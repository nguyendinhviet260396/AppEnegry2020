{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { deepMix } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport BaseBarLayer from '../bar/layer';\nimport './theme';\nimport './component/label';\nimport './component/label-auto';\nimport { getGeometryByType } from '../../util/view';\n\nvar StackedBarLayer =\n/** @class */\nfunction (_super) {\n  __extends(StackedBarLayer, _super);\n\n  function StackedBarLayer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'stackedBar';\n    _this.baseType = 'bar';\n    return _this;\n  }\n\n  StackedBarLayer.getDefaultOptions = function () {\n    return deepMix({}, _super.getDefaultOptions.call(this), {\n      xAxis: {\n        visible: true,\n        autoRotateTitle: false,\n        grid: {\n          visible: true\n        },\n        line: {\n          visible: false\n        },\n        tickLine: {\n          visible: true\n        },\n        label: {\n          visible: true,\n          autoRotate: true,\n          autoHide: true\n        },\n        title: {\n          visible: true,\n          spacing: 12\n        }\n      },\n      yAxis: {\n        visible: true,\n        autoRotateTitle: true,\n        grid: {\n          visible: false\n        },\n        line: {\n          visible: false\n        },\n        tickLine: {\n          visible: false\n        },\n        label: {\n          visible: true,\n          autoRotate: true,\n          autoHide: true\n        },\n        title: {\n          visible: false,\n          spacing: 12\n        }\n      },\n      legend: {\n        visible: true,\n        position: 'top-left',\n        offsetY: 0\n      }\n    });\n  };\n\n  StackedBarLayer.prototype.getColorScale = function () {\n    var stackField = this.options.stackField;\n    return this.view.getScaleByField(stackField);\n  };\n\n  StackedBarLayer.prototype.adjustBar = function (bar) {\n    bar.adjust = [{\n      type: 'stack'\n    }];\n  };\n\n  StackedBarLayer.prototype.renderLabel = function () {\n    var scales = this.config.scales;\n    var _a = this.options,\n        label = _a.label,\n        xField = _a.xField;\n    var scale = scales[xField];\n\n    if (label === null || label === void 0 ? void 0 : label.visible) {\n      var geometry = getGeometryByType(this.view, 'interval');\n      this.doRenderLabel(geometry, __assign({\n        type: 'stacked-bar',\n        formatter: scale.formatter && function (value) {\n          return scale.formatter(value);\n        }\n      }, this.options.label));\n    }\n  };\n\n  StackedBarLayer.prototype.geometryTooltip = function () {\n    this.bar.tooltip = {};\n    var tooltipOptions = this.options.tooltip;\n\n    if (tooltipOptions.fields) {\n      this.bar.tooltip.fields = tooltipOptions.fields;\n    }\n\n    if (tooltipOptions.formatter) {\n      this.bar.tooltip.callback = tooltipOptions.formatter;\n\n      if (!tooltipOptions.fields) {\n        this.bar.tooltip.fields = [this.options.xField, this.options.yField, this.options.stackField];\n      }\n    }\n  };\n\n  return StackedBarLayer;\n}(BaseBarLayer);\n\nexport default StackedBarLayer;\nregisterPlotType('stackedBar', StackedBarLayer);","map":{"version":3,"sources":["../../../src/plots/stacked-bar/layer.ts"],"names":[],"mappings":"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","sourcesContent":["import { deepMix } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport { LayerConfig } from '../../base/layer';\nimport { ElementOption } from '../../interface/config';\nimport BaseBarLayer from '../bar/layer';\nimport { BarViewConfig } from '../bar/interface';\nimport './theme';\nimport './component/label';\nimport './component/label-auto';\nimport { getGeometryByType } from '../../util/view';\nimport { Maybe } from '../../interface/types';\n\nexport interface StackedBarViewConfig extends BarViewConfig {\n  stackField: string;\n}\n\nexport interface StackedBarLayerConfig extends StackedBarViewConfig, LayerConfig {}\n\nexport default class StackedBarLayer<T extends StackedBarLayerConfig = StackedBarLayerConfig> extends BaseBarLayer<T> {\n  public static getDefaultOptions() {\n    return deepMix({}, super.getDefaultOptions(), {\n      xAxis: {\n        visible: true,\n        autoRotateTitle: false,\n        grid: {\n          visible: true,\n        },\n        line: {\n          visible: false,\n        },\n        tickLine: {\n          visible: true,\n        },\n        label: {\n          visible: true,\n          autoRotate: true,\n          autoHide: true,\n        },\n        title: {\n          visible: true,\n          spacing: 12,\n        },\n      },\n      yAxis: {\n        visible: true,\n        autoRotateTitle: true,\n        grid: {\n          visible: false,\n        },\n        line: {\n          visible: false,\n        },\n        tickLine: {\n          visible: false,\n        },\n        label: {\n          visible: true,\n          autoRotate: true,\n          autoHide: true,\n        },\n        title: {\n          visible: false,\n          spacing: 12,\n        },\n      },\n      legend: {\n        visible: true,\n        position: 'top-left',\n        offsetY: 0,\n      },\n    });\n  }\n\n  public type: string = 'stackedBar';\n  public baseType: string = 'bar';\n\n  public getColorScale() {\n    const { stackField } = this.options;\n    return this.view.getScaleByField(stackField);\n  }\n\n  protected adjustBar(bar: ElementOption) {\n    bar.adjust = [\n      {\n        type: 'stack',\n      },\n    ];\n  }\n\n  protected renderLabel() {\n    const { scales } = this.config;\n    const { label, xField } = this.options;\n    const scale = scales[xField];\n    if (label?.visible) {\n      const geometry = getGeometryByType(this.view, 'interval');\n      this.doRenderLabel(geometry, {\n        type: 'stacked-bar',\n        formatter: scale.formatter && ((value: Maybe<string | number>) => scale.formatter(value)),\n        ...this.options.label,\n      });\n    }\n  }\n\n  protected geometryTooltip() {\n    this.bar.tooltip = {};\n    const tooltipOptions: any = this.options.tooltip;\n    if (tooltipOptions.fields) {\n      this.bar.tooltip.fields = tooltipOptions.fields;\n    }\n    if (tooltipOptions.formatter) {\n      this.bar.tooltip.callback = tooltipOptions.formatter;\n      if (!tooltipOptions.fields) {\n        this.bar.tooltip.fields = [this.options.xField, this.options.yField, this.options.stackField];\n      }\n    }\n  }\n}\n\nregisterPlotType('stackedBar', StackedBarLayer);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}