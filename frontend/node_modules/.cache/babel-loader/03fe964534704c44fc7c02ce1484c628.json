{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { deepMix } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport BaseColumnLayer from '../column/layer';\nimport './theme';\n\nvar GroupedColumnLayer =\n/** @class */\nfunction (_super) {\n  __extends(GroupedColumnLayer, _super);\n\n  function GroupedColumnLayer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.baseType = 'column';\n    _this.type = 'groupedColumn';\n    return _this;\n  }\n\n  GroupedColumnLayer.getDefaultOptions = function () {\n    return deepMix({}, _super.getDefaultOptions.call(this), {\n      yAxis: {\n        title: {\n          visible: true\n        }\n      }\n    });\n  };\n\n  GroupedColumnLayer.prototype.getResponsiveTheme = function () {\n    return this.themeController.getResponsiveTheme('column');\n  };\n\n  GroupedColumnLayer.prototype.getColorScale = function () {\n    var groupField = this.options.groupField;\n\n    if (groupField) {\n      return this.view.getScaleByField(groupField);\n    }\n  };\n\n  GroupedColumnLayer.prototype.addGeometry = function () {\n    _super.prototype.addGeometry.call(this);\n  };\n\n  GroupedColumnLayer.prototype.adjustColumn = function (column) {\n    column.adjust = [{\n      type: 'dodge',\n      marginRatio: 0.1\n    }];\n  };\n\n  GroupedColumnLayer.prototype.geometryTooltip = function () {\n    this.column.tooltip = {};\n    var tooltipOptions = this.options.tooltip;\n\n    if (tooltipOptions.fields) {\n      this.column.tooltip.fields = tooltipOptions.fields;\n    }\n\n    if (tooltipOptions.formatter) {\n      this.column.tooltip.callback = tooltipOptions.formatter;\n\n      if (!tooltipOptions.fields) {\n        this.column.tooltip.fields = [this.options.xField, this.options.yField, this.options.groupField];\n      }\n    }\n  };\n\n  return GroupedColumnLayer;\n}(BaseColumnLayer);\n\nexport default GroupedColumnLayer;\nregisterPlotType('groupedColumn', GroupedColumnLayer);","map":{"version":3,"sources":["../../../src/plots/grouped-column/layer.ts"],"names":[],"mappings":";AAAA,SAAS,OAAT,QAAwB,YAAxB;AACA,SAAS,gBAAT,QAAiC,mBAAjC;AAGA,OAAO,eAAP,MAA4B,iBAA5B;AAEA,OAAO,SAAP;;AAQA,IAAA,kBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAgD,EAAA,SAAA,CAAA,kBAAA,EAAA,MAAA,CAAA;;AAAhD,WAAA,kBAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;;AACS,IAAA,KAAA,CAAA,QAAA,GAAmB,QAAnB;AAWA,IAAA,KAAA,CAAA,IAAA,GAAe,eAAf;;AAsCR;;AA/Ce,EAAA,kBAAA,CAAA,iBAAA,GAAd,YAAA;AACE,WAAO,OAAO,CAAC,EAAD,EAAK,MAAA,CAAM,iBAAN,CAAuB,IAAvB,CAAuB,IAAvB,CAAL,EAAgC;AAC5C,MAAA,KAAK,EAAE;AACL,QAAA,KAAK,EAAE;AACL,UAAA,OAAO,EAAE;AADJ;AADF;AADqC,KAAhC,CAAd;AAOD,GARa;;AAUP,EAAA,kBAAA,CAAA,SAAA,CAAA,kBAAA,GAAP,YAAA;AACE,WAAO,KAAK,eAAL,CAAqB,kBAArB,CAAwC,QAAxC,CAAP;AACD,GAFM;;AAIA,EAAA,kBAAA,CAAA,SAAA,CAAA,aAAA,GAAP,YAAA;AACU,QAAA,UAAU,GAAK,KAAK,OAAL,CAAL,UAAV;;AACR,QAAI,UAAJ,EAAgB;AACd,aAAO,KAAK,IAAL,CAAU,eAAV,CAA0B,UAA1B,CAAP;AACD;AACF,GALM;;AAOG,EAAA,kBAAA,CAAA,SAAA,CAAA,WAAA,GAAV,YAAA;AACE,IAAA,MAAA,CAAA,SAAA,CAAM,WAAN,CAAiB,IAAjB,CAAiB,IAAjB;AACD,GAFS;;AAIA,EAAA,kBAAA,CAAA,SAAA,CAAA,YAAA,GAAV,UAAuB,MAAvB,EAA4C;AAC1C,IAAA,MAAM,CAAC,MAAP,GAAgB,CACd;AACE,MAAA,IAAI,EAAE,OADR;AAEE,MAAA,WAAW,EAAE;AAFf,KADc,CAAhB;AAMD,GAPS;;AASA,EAAA,kBAAA,CAAA,SAAA,CAAA,eAAA,GAAV,YAAA;AACE,SAAK,MAAL,CAAY,OAAZ,GAAsB,EAAtB;AACA,QAAM,cAAc,GAAQ,KAAK,OAAL,CAAa,OAAzC;;AACA,QAAI,cAAc,CAAC,MAAnB,EAA2B;AACzB,WAAK,MAAL,CAAY,OAAZ,CAAoB,MAApB,GAA6B,cAAc,CAAC,MAA5C;AACD;;AACD,QAAI,cAAc,CAAC,SAAnB,EAA8B;AAC5B,WAAK,MAAL,CAAY,OAAZ,CAAoB,QAApB,GAA+B,cAAc,CAAC,SAA9C;;AACA,UAAI,CAAC,cAAc,CAAC,MAApB,EAA4B;AAC1B,aAAK,MAAL,CAAY,OAAZ,CAAoB,MAApB,GAA6B,CAAC,KAAK,OAAL,CAAa,MAAd,EAAsB,KAAK,OAAL,CAAa,MAAnC,EAA2C,KAAK,OAAL,CAAa,UAAxD,CAA7B;AACD;AACF;AACF,GAZS;;AAaZ,SAAA,kBAAA;AAAC,CAlDD,CAAgD,eAAhD,CAAA;;;AAoDA,gBAAgB,CAAC,eAAD,EAAkB,kBAAlB,CAAhB","sourcesContent":["import { deepMix } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport { LayerConfig } from '../../base/layer';\nimport { ElementOption } from '../../interface/config';\nimport BaseColumnLayer from '../column/layer';\nimport { ColumnViewConfig } from '../column/interface';\nimport './theme';\n\nexport interface GroupedColumnViewConfig extends ColumnViewConfig {\n  groupField: string;\n}\n\nexport interface GroupedColumnLayerConfig extends GroupedColumnViewConfig, LayerConfig {}\n\nexport default class GroupedColumnLayer extends BaseColumnLayer<GroupedColumnLayerConfig> {\n  public baseType: string = 'column';\n\n  public static getDefaultOptions(): Partial<GroupedColumnViewConfig> {\n    return deepMix({}, super.getDefaultOptions(), {\n      yAxis: {\n        title: {\n          visible: true,\n        },\n      },\n    });\n  }\n  public type: string = 'groupedColumn';\n  public getResponsiveTheme() {\n    return this.themeController.getResponsiveTheme('column');\n  }\n\n  public getColorScale() {\n    const { groupField } = this.options;\n    if (groupField) {\n      return this.view.getScaleByField(groupField);\n    }\n  }\n\n  protected addGeometry() {\n    super.addGeometry();\n  }\n\n  protected adjustColumn(column: ElementOption) {\n    column.adjust = [\n      {\n        type: 'dodge',\n        marginRatio: 0.1,\n      },\n    ];\n  }\n\n  protected geometryTooltip() {\n    this.column.tooltip = {};\n    const tooltipOptions: any = this.options.tooltip;\n    if (tooltipOptions.fields) {\n      this.column.tooltip.fields = tooltipOptions.fields;\n    }\n    if (tooltipOptions.formatter) {\n      this.column.tooltip.callback = tooltipOptions.formatter;\n      if (!tooltipOptions.fields) {\n        this.column.tooltip.fields = [this.options.xField, this.options.yField, this.options.groupField];\n      }\n    }\n  }\n}\n\nregisterPlotType('groupedColumn', GroupedColumnLayer);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}