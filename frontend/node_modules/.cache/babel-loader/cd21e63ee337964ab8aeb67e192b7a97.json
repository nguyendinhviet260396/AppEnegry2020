{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { isArray, isFunction, isString, isEmpty, isNil } from '@antv/util';\nimport ElementParser from '../base';\n\nvar CircleParser =\n/** @class */\nfunction (_super) {\n  __extends(CircleParser, _super);\n\n  function CircleParser() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  CircleParser.prototype.init = function () {\n    var props = this.plot.options;\n    this.style = props.pointStyle;\n\n    if (!props.xField || !props.yField) {\n      return;\n    }\n\n    this.config = {\n      type: 'point',\n      position: {\n        fields: [props.xField, props.yField]\n      }\n    };\n    this.parseColor();\n    this.parseSize();\n\n    if (props.shape) {\n      this.parseShape(props.shape);\n    }\n\n    if (props.pointStyle) {\n      this.parseStyle();\n    }\n  };\n\n  CircleParser.prototype.parseColor = function () {\n    var props = this.plot.options;\n    var config = {};\n    var colorField = props.colorField;\n\n    if (colorField) {\n      config.fields = isArray(colorField) ? colorField : [colorField];\n    }\n\n    if (props.color) {\n      this._parseColor(props, config);\n    }\n\n    if (!isEmpty(config)) {\n      this.config.color = config;\n    }\n  };\n\n  CircleParser.prototype.parseSize = function () {\n    var props = this.plot.options;\n    var config = {};\n\n    if (props.sizeField) {\n      config.fields = [props.sizeField];\n    }\n\n    if (props.pointSize) {\n      config.values = isArray(props.pointSize) ? props.pointSize : [props.pointSize];\n    }\n\n    this.config.size = config;\n  };\n\n  CircleParser.prototype.parseShape = function (shapeName) {\n    this.config.shape = shapeName;\n  };\n\n  CircleParser.prototype.parseStyle = function () {\n    var props = this.plot.options;\n    var styleProps = props.pointStyle;\n    var config = {\n      fields: null,\n      callback: null,\n      cfg: null\n    };\n    var xField = props.xField,\n        yField = props.yField,\n        colorField = props.colorField;\n\n    if (isFunction(styleProps)) {\n      if (colorField) {\n        config.fields = isArray(colorField) ? [xField, yField, colorField].concat(colorField) : [xField, yField, colorField];\n      } else {\n        config.fields = [xField, yField];\n      }\n\n      config.callback = styleProps;\n    } else {\n      config.cfg = styleProps; // opacity 与 fillOpacity 兼容\n\n      if (!isNil(styleProps.opacity)) {\n        config.cfg.fillOpacity = styleProps.opacity;\n      }\n    }\n\n    this.config.style = config;\n  };\n\n  CircleParser.prototype._parseColor = function (props, config) {\n    if (isString(props.color)) {\n      config.values = [props.color];\n    } else if (isFunction(props.color)) {\n      config.callback = props.color;\n    } else if (isArray(props.color)) {\n      config.values = props.color;\n    }\n  };\n\n  return CircleParser;\n}(ElementParser);\n\nexport default CircleParser;","map":{"version":3,"sources":["../../../src/geoms/point/circle.ts"],"names":[],"mappings":"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","sourcesContent":["import { LooseObject } from '../../dependents';\nimport { isArray, isFunction, isString, isEmpty, isNil } from '@antv/util';\nimport ElementParser from '../base';\n\nexport default class CircleParser extends ElementParser {\n  public init() {\n    const props = this.plot.options;\n    this.style = props.pointStyle;\n    if (!props.xField || !props.yField) {\n      return;\n    }\n    this.config = {\n      type: 'point',\n      position: {\n        fields: [props.xField, props.yField],\n      },\n    };\n    this.parseColor();\n    this.parseSize();\n\n    if (props.shape) {\n      this.parseShape(props.shape);\n    }\n    if (props.pointStyle) {\n      this.parseStyle();\n    }\n  }\n\n  public parseColor() {\n    const props = this.plot.options;\n    const config: LooseObject = {};\n    const colorField = props.colorField;\n    if (colorField) {\n      config.fields = isArray(colorField) ? colorField : [colorField];\n    }\n    if (props.color) {\n      this._parseColor(props, config);\n    }\n    if (!isEmpty(config)) {\n      this.config.color = config;\n    }\n  }\n\n  public parseSize() {\n    const props = this.plot.options;\n    const config: LooseObject = {};\n    if (props.sizeField) {\n      config.fields = [props.sizeField];\n    }\n    if (props.pointSize) {\n      config.values = isArray(props.pointSize) ? props.pointSize : [props.pointSize];\n    }\n    this.config.size = config;\n  }\n\n  public parseShape(shapeName) {\n    this.config.shape = shapeName;\n  }\n\n  public parseStyle() {\n    const props = this.plot.options;\n    const styleProps = props.pointStyle;\n    const config = {\n      fields: null,\n      callback: null,\n      cfg: null,\n    };\n    const { xField, yField, colorField } = props;\n    if (isFunction(styleProps)) {\n      if (colorField) {\n        config.fields = isArray(colorField)\n          ? [xField, yField, colorField].concat(colorField)\n          : [xField, yField, colorField];\n      } else {\n        config.fields = [xField, yField];\n      }\n      config.callback = styleProps;\n    } else {\n      config.cfg = styleProps;\n      // opacity 与 fillOpacity 兼容\n      if (!isNil(styleProps.opacity)) {\n        config.cfg.fillOpacity = styleProps.opacity;\n      }\n    }\n    this.config.style = config;\n  }\n\n  private _parseColor(props, config) {\n    if (isString(props.color)) {\n      config.values = [props.color];\n    } else if (isFunction(props.color)) {\n      config.callback = props.color;\n    } else if (isArray(props.color)) {\n      config.values = props.color;\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}