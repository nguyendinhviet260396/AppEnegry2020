{"ast":null,"code":"import { has, each } from '@antv/util';\nimport { getMedian } from '../../math';\nvar unitMapper = {\n  k: {\n    number: 1e3,\n    index: 0\n  },\n  m: {\n    number: 1e6,\n    index: 1\n  },\n  b: {\n    number: 1e9,\n    index: 2\n  },\n  t: {\n    number: 1e12,\n    index: 3\n  }\n}; // https://gist.github.com/MartinMuzatko/1060fe584d17c7b9ca6e\n// https://jburrows.wordpress.com/2014/11/18/abbreviating-numbers/\n\n/*tslint:disable*/\n\nexport default function digitsAbbreviate(shape, option, index, cfg) {\n  if (!has(cfg, 'node') || !has(cfg.node, 'node')) {\n    return;\n  }\n\n  var nodes = cfg.nodes.nodes;\n  var number = parseFloat(shape.get('origin').text);\n\n  if (number === 0) {\n    return;\n  }\n\n  if (option.formatter) {\n    shape.attr('text', option.formatter(number));\n    return;\n  }\n\n  if (option.unit) {\n    var _a = abbravateDigitsByUnit(option, number),\n        num = _a.num,\n        unitname = _a.unitname;\n\n    shape.attr('text', num + unitname);\n  } else {\n    // 自动换算逻辑\n    // 根据中位数得到换算单位\n    var numbers = extractNumbers(nodes);\n    var median = getMedian(numbers);\n    var unitname = getUnitByNumber(median); //根据数值的interval计算换算后保留的浮点数\n\n    var unitNumber = unitMapper[unitname].number;\n    var interval = getLinearNodesInterval(nodes);\n    var decimal = getDigitsDecimal(interval, unitNumber);\n    var num = abbravateDigitsByUnit({\n      unit: unitname,\n      decimal: decimal\n    }, number).num;\n    shape.attr('text', num + unitname);\n  }\n}\n\nfunction abbravateDigitsByUnit(option, number) {\n  var units = ['k', 'm', 'b', 't'];\n  var num;\n  var unitname;\n\n  if (option.unit === 'auto') {\n    /** auto formatt k-m-b-t */\n    var order = Math.floor(Math.log(number) / Math.log(1000));\n    unitname = units[order - 1];\n    num = (number / Math.pow(1000, order)).toFixed(option.decimal);\n  } else if (option.unit) {\n    var unit = unitMapper[option.unit];\n    unitname = option.unit;\n    num = (number / unit.number).toFixed(option.decimal);\n  }\n\n  return {\n    num: num,\n    unitname: unitname\n  };\n}\n\nfunction getUnitByNumber(number) {\n  var units = ['k', 'm', 'b', 't'];\n  var order = Math.floor(Math.log(number) / Math.log(1000));\n  return units[order - 1];\n}\n\nfunction extractNumbers(nodes) {\n  var numbers = [];\n  each(nodes, function (node) {\n    var n = node;\n    var number = parseFloat(n.shape.get('origin').text);\n    numbers.push(number);\n  });\n  return numbers;\n}\n\nfunction getLinearNodesInterval(nodes) {\n  if (nodes.length >= 2) {\n    var a = parseFloat(nodes[0].shape.get('origin').text);\n    var b = parseFloat(nodes[1].shape.get('origin').text);\n    return Math.abs(a - b);\n  }\n\n  return 0;\n}\n\nfunction getDigitsDecimal(interval, unitNumber) {\n  var unitBit = Math.floor(Math.log10(unitNumber));\n\n  if (interval >= unitNumber) {\n    var remainder = interval % unitNumber;\n\n    if (remainder > 0) {\n      var remainderBit = Math.floor(Math.log10(remainder));\n      return Math.abs(remainderBit - unitBit);\n    }\n  } else {\n    var intervalBit = Math.floor(Math.log10(interval));\n    return Math.abs(intervalBit - unitBit);\n  }\n\n  return 0;\n}","map":{"version":3,"sources":["../../../../src/util/responsive/rules/digits-abbreviate.ts"],"names":[],"mappings":"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","sourcesContent":["import { IShape } from '@antv/g-base';\nimport { has, each } from '@antv/util';\nimport { getMedian } from '../../math';\n\ninterface DigitsAbbreviateCfg {\n  unit?: 'k' | 'm' | 'b' | 't' | 'auto';\n  formatter?: (val: number) => string;\n  decimal?: number;\n}\nconst unitMapper = {\n  k: { number: 1e3, index: 0 },\n  m: { number: 1e6, index: 1 },\n  b: { number: 1e9, index: 2 },\n  t: { number: 1e12, index: 3 },\n};\n\n// https://gist.github.com/MartinMuzatko/1060fe584d17c7b9ca6e\n// https://jburrows.wordpress.com/2014/11/18/abbreviating-numbers/\n/*tslint:disable*/\n\nexport default function digitsAbbreviate(shape: IShape, option: DigitsAbbreviateCfg, index, cfg) {\n  if (!has(cfg, 'node') || !has(cfg.node, 'node')) {\n    return;\n  }\n  const nodes = cfg.nodes.nodes;\n  const number = parseFloat(shape.get('origin').text);\n  if (number === 0) {\n    return;\n  }\n  if (option.formatter) {\n    shape.attr('text', option.formatter(number));\n    return;\n  }\n  if (option.unit) {\n    const { num, unitname } = abbravateDigitsByUnit(option, number);\n    shape.attr('text', num + unitname);\n  } else {\n    // 自动换算逻辑\n    // 根据中位数得到换算单位\n    const numbers = extractNumbers(nodes);\n    const median = getMedian(numbers);\n    const unitname = getUnitByNumber(median);\n    //根据数值的interval计算换算后保留的浮点数\n    const unitNumber = unitMapper[unitname].number;\n    const interval = getLinearNodesInterval(nodes);\n    const decimal = getDigitsDecimal(interval, unitNumber);\n    const { num } = abbravateDigitsByUnit({ unit: unitname, decimal }, number);\n    shape.attr('text', num + unitname);\n  }\n}\n\nfunction abbravateDigitsByUnit(option, number) {\n  const units = ['k', 'm', 'b', 't'];\n  let num;\n  let unitname;\n  if (option.unit === 'auto') {\n    /** auto formatt k-m-b-t */\n    const order = Math.floor(Math.log(number) / Math.log(1000));\n    unitname = units[order - 1];\n    num = (number / 1000 ** order).toFixed(option.decimal);\n  } else if (option.unit) {\n    const unit = unitMapper[option.unit];\n    unitname = option.unit;\n    num = (number / unit.number).toFixed(option.decimal);\n  }\n  return { num, unitname };\n}\n\nfunction getUnitByNumber(number) {\n  const units = ['k', 'm', 'b', 't'];\n  const order = Math.floor(Math.log(number) / Math.log(1000));\n  return units[order - 1];\n}\n\nfunction extractNumbers(nodes) {\n  const numbers = [];\n  each(nodes, (node) => {\n    const n = node as any;\n    const number = parseFloat(n.shape.get('origin').text);\n    numbers.push(number);\n  });\n  return numbers;\n}\n\nfunction getLinearNodesInterval(nodes) {\n  if (nodes.length >= 2) {\n    const a = parseFloat(nodes[0].shape.get('origin').text);\n    const b = parseFloat(nodes[1].shape.get('origin').text);\n    return Math.abs(a - b);\n  }\n  return 0;\n}\n\nfunction getDigitsDecimal(interval, unitNumber) {\n  const unitBit = Math.floor(Math.log10(unitNumber));\n  if (interval >= unitNumber) {\n    const remainder = interval % unitNumber;\n    if (remainder > 0) {\n      const remainderBit = Math.floor(Math.log10(remainder));\n      return Math.abs(remainderBit - unitBit);\n    }\n  } else {\n    const intervalBit = Math.floor(Math.log10(interval));\n    return Math.abs(intervalBit - unitBit);\n  }\n  return 0;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}