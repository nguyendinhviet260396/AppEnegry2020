{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport GCanvas from '@antv/g-canvas/lib/canvas';\nimport GSVGCanvas from '@antv/g-svg/lib/canvas';\nimport Base from '../base';\nimport isString from '@antv/util/lib/is-string';\nimport createDOM from '@antv/dom-util/lib/create-dom';\nimport modifyCSS from '@antv/dom-util/lib/modify-css';\nimport isNil from '@antv/util/lib/is-nil';\nimport each from '@antv/util/lib/each';\nimport { transform } from '@antv/matrix-util';\nimport { debounce } from '@antv/util';\nvar max = Math.max;\nvar DEFAULT_MODE = 'default';\nvar KEYSHAPE_MODE = 'keyShape';\nvar DELEGATE_MODE = 'delegate';\nvar SVG = 'svg';\n\nvar MiniMap =\n/** @class */\nfunction (_super) {\n  __extends(MiniMap, _super);\n\n  function MiniMap() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * 主图更新的监听函数，使用 debounce 减少渲染频率\n     * e.g. 拖拽节点只会在松手后的 100ms 后执行 updateCanvas\n     * e.g. render 时大量 addItem 也只会执行一次 updateCanvas\n     */\n\n\n    _this.handleUpdateCanvas = debounce(function (event) {\n      var self = _this;\n      if (self.destroyed) return;\n      self.updateCanvas();\n    }, 100, false);\n    return _this;\n  }\n\n  MiniMap.prototype.getDefaultCfgs = function () {\n    return {\n      container: null,\n      className: 'g6-minimap',\n      viewportClassName: 'g6-minimap-viewport',\n      // Minimap 中默认展示和主图一样的内容，KeyShape 只展示节点和边的 key shape 部分，delegate表示展示自定义的rect，用户可自定义样式\n      type: 'default',\n      padding: 50,\n      size: [200, 120],\n      delegateStyle: {\n        fill: '#40a9ff',\n        stroke: '#096dd9'\n      },\n      refresh: true\n    };\n  };\n\n  MiniMap.prototype.getEvents = function () {\n    return {\n      beforepaint: 'updateViewport',\n      beforeanimate: 'disableRefresh',\n      afteranimate: 'enableRefresh',\n      viewportchange: 'disableOneRefresh'\n    };\n  }; // 若是正在进行动画，不刷新缩略图\n\n\n  MiniMap.prototype.disableRefresh = function () {\n    this.set('refresh', false);\n  };\n\n  MiniMap.prototype.enableRefresh = function () {\n    this.set('refresh', true);\n    this.updateCanvas();\n  };\n\n  MiniMap.prototype.disableOneRefresh = function () {\n    this.set('viewportChange', true);\n  };\n\n  MiniMap.prototype.initViewport = function () {\n    var _this = this;\n\n    var cfgs = this._cfgs;\n    var size = cfgs.size,\n        graph = cfgs.graph;\n    if (this.destroyed) return;\n    var canvas = this.get('canvas');\n    var containerDOM = canvas.get('container');\n    var viewport = createDOM(\"<div class=\" + cfgs.viewportClassName + \"\\n      style='position:absolute;\\n        left:0;\\n        top:0;\\n        box-sizing:border-box;\\n        border: 2px solid #1980ff'></div>\"); // 计算拖拽水平方向距离\n\n    var x = 0; // 计算拖拽垂直方向距离\n\n    var y = 0; // 是否在拖拽minimap的视口\n\n    var dragging = false; // 缓存viewport当前对于画布的x\n\n    var left = 0; // 缓存viewport当前对于画布的y\n\n    var top = 0; // 缓存viewport当前宽度\n\n    var width = 0; // 缓存viewport当前高度\n\n    var height = 0;\n    var ratio = 0;\n    var zoom = 0;\n    containerDOM.addEventListener('mousedown', function (e) {\n      cfgs.refresh = false;\n\n      if (e.target !== viewport) {\n        return;\n      } // 如果视口已经最大了，不需要拖拽\n\n\n      var style = viewport.style;\n      left = parseInt(style.left, 10);\n      top = parseInt(style.top, 10);\n      width = parseInt(style.width, 10);\n      height = parseInt(style.height, 10);\n\n      if (width > size[0] || height > size[1]) {\n        return;\n      }\n\n      zoom = graph.getZoom();\n      ratio = _this.get('ratio');\n      dragging = true;\n      x = e.clientX;\n      y = e.clientY;\n    }, false);\n    containerDOM.addEventListener('mousemove', function (e) {\n      if (!dragging || isNil(e.clientX) || isNil(e.clientY)) {\n        return;\n      }\n\n      var dx = x - e.clientX;\n      var dy = y - e.clientY; // 若视口移动到最左边或最右边了,仅移动到边界\n\n      if (left - dx < 0 || left - dx + width >= size[0]) {\n        dx = 0;\n      } // 若视口移动到最上或最下边了，仅移动到边界\n\n\n      if (top - dy < 0 || top - dy + height >= size[1]) {\n        dy = 0;\n      }\n\n      left -= dx;\n      top -= dy; // 先移动视口，避免移动到边上以后出现视口闪烁\n\n      modifyCSS(viewport, {\n        left: left + \"px\",\n        top: top + \"px\"\n      }); // graph 移动需要偏移量 dx/dy * 缩放比例才会得到正确的移动距离\n\n      graph.translate(dx * zoom / ratio, dy * zoom / ratio);\n      x = e.clientX;\n      y = e.clientY;\n    }, false);\n    containerDOM.addEventListener('mouseleave', function () {\n      dragging = false;\n      cfgs.refresh = true;\n    }, false);\n    containerDOM.addEventListener('mouseup', function () {\n      dragging = false;\n      cfgs.refresh = true;\n    }, false);\n    this.set('viewport', viewport);\n    containerDOM.appendChild(viewport);\n  };\n  /**\n   * 更新 viewport 视图\n   */\n\n\n  MiniMap.prototype.updateViewport = function () {\n    if (this.destroyed) return;\n    var ratio = this.get('ratio');\n    var dx = this.get('dx');\n    var dy = this.get('dy');\n    var totaldx = this.get('totaldx');\n    var totaldy = this.get('totaldy');\n    var graph = this.get('graph');\n    var size = this.get('size');\n    var graphWidth = graph.get('width');\n    var graphHeight = graph.get('height');\n    var topLeft = graph.getPointByCanvas(0, 0);\n    var bottomRight = graph.getPointByCanvas(graphWidth, graphHeight);\n    var viewport = this.get('viewport');\n\n    if (!viewport) {\n      this.initViewport();\n    }\n\n    var zoom = graph.getZoom(); // viewport宽高,左上角点的计算\n\n    var width = (bottomRight.x - topLeft.x) * ratio;\n    var height = (bottomRight.y - topLeft.y) * ratio;\n    var left = topLeft.x * ratio + totaldx;\n    var top = topLeft.y * ratio + totaldy;\n    var right = left + width;\n    var bottom = top + height;\n\n    if (left < 0) {\n      width += left;\n      left = 0;\n    }\n\n    if (right > size[0]) {\n      width = width - (right - size[0]);\n    }\n\n    if (top < 0) {\n      height += top;\n      top = 0;\n    }\n\n    if (bottom > size[1]) {\n      height = height - (bottom - size[1]);\n    } // 缓存目前缩放比，在移动 minimap 视窗时就不用再计算大图的移动量\n\n\n    this.set('ratio', ratio);\n    var correctLeft = left + \"px\";\n    var correctTop = top + \"px\";\n    modifyCSS(viewport, {\n      left: correctLeft,\n      top: correctTop,\n      width: width + \"px\",\n      height: height + \"px\"\n    });\n  };\n  /**\n   * 将主图上的图形完全复制到小图\n   */\n\n\n  MiniMap.prototype.updateGraphShapes = function () {\n    var graph = this._cfgs.graph;\n    var canvas = this.get('canvas');\n    var graphGroup = graph.get('group');\n    if (graphGroup.destroyed) return;\n    var clonedGroup = graphGroup.clone();\n    clonedGroup.resetMatrix();\n    canvas.clear();\n    canvas.add(clonedGroup);\n  }; // 仅在 minimap 上绘制 keyShape\n  // FIXME 如果用户自定义绘制了其他内容，minimap上就无法画出\n\n\n  MiniMap.prototype.updateKeyShapes = function () {\n    var _this = this;\n\n    var graph = this._cfgs.graph;\n    each(graph.getEdges(), function (edge) {\n      _this.updateOneEdgeKeyShape(edge);\n    });\n    each(graph.getNodes(), function (node) {\n      _this.updateOneNodeKeyShape(node);\n    });\n    this.clearDestroyedShapes();\n  };\n  /**\n   * 增加/更新单个元素的 keyShape\n   * @param item INode 实例\n   */\n\n\n  MiniMap.prototype.updateOneNodeKeyShape = function (item) {\n    var canvas = this.get('canvas');\n    var group = canvas.get('children')[0] || canvas.addGroup();\n    var itemMap = this.get('itemMap') || {}; // 差量更新 minimap 上的一个节点，对应主图的 item\n\n    var mappedItem = itemMap[item.get('id')];\n    var bbox = item.getBBox(); // 计算了节点父组矩阵的 bbox\n\n    var cKeyShape = item.get('keyShape').clone();\n    var keyShapeStyle = cKeyShape.attr();\n    var attrs = {\n      x: bbox.centerX,\n      y: bbox.centerY\n    };\n\n    if (!mappedItem) {\n      mappedItem = cKeyShape;\n      group.add(mappedItem);\n    } else {\n      attrs = Object.assign(keyShapeStyle, attrs);\n    }\n\n    var shapeType = mappedItem.get('type');\n\n    if (shapeType === 'rect' || shapeType === 'image') {\n      attrs.x = bbox.minX;\n      attrs.y = bbox.minY;\n    }\n\n    mappedItem.attr(attrs);\n\n    if (!item.isVisible()) {\n      mappedItem.hide();\n    }\n\n    mappedItem.exist = true;\n    itemMap[item.get('id')] = mappedItem;\n    this.set('itemMap', itemMap);\n  };\n  /**\n   * Minimap 中展示自定义的rect，支持用户自定义样式和节点大小\n   */\n\n\n  MiniMap.prototype.updateDelegateShapes = function () {\n    var _this = this;\n\n    var graph = this._cfgs.graph; // 差量更新 minimap 上的节点和边\n\n    each(graph.getEdges(), function (edge) {\n      _this.updateOneEdgeKeyShape(edge);\n    });\n    each(graph.getNodes(), function (node) {\n      _this.updateOneNodeDelegateShape(node);\n    });\n    this.clearDestroyedShapes();\n  };\n\n  MiniMap.prototype.clearDestroyedShapes = function () {\n    var itemMap = this.get('itemMap') || {};\n    var keys = Object.keys(itemMap);\n    if (!keys || keys.length === 0) return;\n\n    for (var i = keys.length - 1; i >= 0; i--) {\n      var shape = itemMap[keys[i]];\n      var exist = shape.exist;\n      shape.exist = false;\n\n      if (!exist) {\n        shape.remove();\n        delete itemMap[keys[i]];\n      }\n    }\n  };\n  /**\n   * 设置只显示 edge 的 keyShape\n   * @param item IEdge 实例\n   */\n\n\n  MiniMap.prototype.updateOneEdgeKeyShape = function (item) {\n    var canvas = this.get('canvas');\n    var group = canvas.get('children')[0] || canvas.addGroup();\n    var itemMap = this.get('itemMap') || {}; // 差量更新 minimap 上的一个节点，对应主图的 item\n\n    var mappedItem = itemMap[item.get('id')];\n\n    if (mappedItem) {\n      var path = item.get('keyShape').attr('path');\n      mappedItem.attr('path', path);\n    } else {\n      mappedItem = item.get('keyShape').clone();\n      group.add(mappedItem);\n      mappedItem.toBack();\n    }\n\n    if (!item.isVisible()) {\n      mappedItem.hide();\n    }\n\n    mappedItem.exist = true;\n    itemMap[item.get('id')] = mappedItem;\n    this.set('itemMap', itemMap);\n  };\n  /**\n   * Minimap 中展示自定义的 rect，支持用户自定义样式和节点大小\n   * 增加/更新单个元素\n   * @param item INode 实例\n   */\n\n\n  MiniMap.prototype.updateOneNodeDelegateShape = function (item) {\n    var canvas = this.get('canvas');\n    var group = canvas.get('children')[0] || canvas.addGroup();\n    var delegateStyle = this.get('delegateStyle');\n    var itemMap = this.get('itemMap') || {}; // 差量更新 minimap 上的一个节点，对应主图的 item\n\n    var mappedItem = itemMap[item.get('id')];\n    var bbox = item.getBBox(); // 计算了节点父组矩阵的 bbox\n\n    if (mappedItem) {\n      var attrs = {\n        x: bbox.minX,\n        y: bbox.minY,\n        width: bbox.width,\n        height: bbox.height\n      };\n      mappedItem.attr(attrs);\n    } else {\n      mappedItem = group.addShape('rect', {\n        attrs: __assign({\n          x: bbox.minX,\n          y: bbox.minY,\n          width: bbox.width,\n          height: bbox.height\n        }, delegateStyle),\n        name: 'minimap-node-shape'\n      });\n    }\n\n    if (!item.isVisible()) {\n      mappedItem.hide();\n    }\n\n    mappedItem.exist = true;\n    itemMap[item.get('id')] = mappedItem;\n    this.set('itemMap', itemMap);\n  };\n\n  MiniMap.prototype.init = function () {\n    this.initContainer();\n    this.get('graph').on('afterupdateitem', this.handleUpdateCanvas);\n    this.get('graph').on('afteritemstatechange', this.handleUpdateCanvas);\n    this.get('graph').on('afteradditem', this.handleUpdateCanvas);\n    this.get('graph').on('afterremoveitem', this.handleUpdateCanvas);\n    this.get('graph').on('afterrender', this.handleUpdateCanvas);\n    this.get('graph').on('afterlayout', this.handleUpdateCanvas);\n  };\n  /**\n   * 初始化 Minimap 的容器\n   */\n\n\n  MiniMap.prototype.initContainer = function () {\n    var self = this;\n    var graph = self.get('graph');\n    var size = self.get('size');\n    var className = self.get('className');\n    var parentNode = self.get('container');\n    var container = createDOM(\"<div class='\" + className + \"' style='width: \" + size[0] + \"px; height: \" + size[1] + \"px; overflow: hidden'></div>\");\n\n    if (isString(parentNode)) {\n      parentNode = document.getElementById(parentNode);\n    }\n\n    if (parentNode) {\n      parentNode.appendChild(container);\n    } else {\n      graph.get('container').appendChild(container);\n    }\n\n    self.set('container', container);\n    var containerDOM = createDOM('<div class=\"g6-minimap-container\" style=\"position: relative;\"></div>');\n    container.appendChild(containerDOM);\n    var canvas;\n    var renderer = graph.get('renderer');\n\n    if (renderer === SVG) {\n      canvas = new GSVGCanvas({\n        container: containerDOM,\n        width: size[0],\n        height: size[1]\n      });\n    } else {\n      canvas = new GCanvas({\n        container: containerDOM,\n        width: size[0],\n        height: size[1]\n      });\n    }\n\n    self.set('canvas', canvas);\n    self.updateCanvas();\n  };\n\n  MiniMap.prototype.updateCanvas = function () {\n    // 如果是在动画，则不刷新视图\n    var isRefresh = this.get('refresh');\n\n    if (!isRefresh) {\n      return;\n    }\n\n    var graph = this.get('graph');\n\n    if (graph.get('destroyed')) {\n      return;\n    } // 如果是视口变换，也不刷新视图，但是需要重置视口大小和位置\n\n\n    if (this.get('viewportChange')) {\n      this.set('viewportChange', false);\n      this.updateViewport();\n    }\n\n    var size = this.get('size');\n    var canvas = this.get('canvas');\n    var type = this.get('type');\n    var padding = this.get('padding');\n\n    if (canvas.destroyed) {\n      return;\n    }\n\n    switch (type) {\n      case DEFAULT_MODE:\n        this.updateGraphShapes();\n        break;\n\n      case KEYSHAPE_MODE:\n        this.updateKeyShapes();\n        break;\n\n      case DELEGATE_MODE:\n        // 得到的节点直接带有 x 和 y，每个节点不存在父 group，即每个节点位置不由父 group 控制\n        this.updateDelegateShapes();\n        break;\n\n      default:\n        break;\n    }\n\n    var group = canvas.get('children')[0];\n    if (!group) return;\n    group.resetMatrix(); // 该 bbox 是准确的，不计算 matrix 的包围盒\n\n    var bbox = group.getCanvasBBox();\n    var graphBBox = graph.get('canvas').getBBox();\n    var width = graphBBox.width;\n    var height = graphBBox.height;\n\n    if (Number.isFinite(bbox.width)) {\n      // 刷新后bbox可能会变，需要重置画布矩阵以缩放到合适的大小\n      width = max(bbox.width, width);\n      height = max(bbox.height, height);\n    }\n\n    width += 2 * padding;\n    height += 2 * padding;\n    var ratio = Math.min(size[0] / width, size[1] / height);\n    var matrix = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n    var minX = 0;\n    var minY = 0; // 平移到左上角\n\n    if (Number.isFinite(bbox.minX)) {\n      minX = -bbox.minX;\n    }\n\n    if (Number.isFinite(bbox.minY)) {\n      minY = -bbox.minY;\n    } // 缩放到适合视口后, 平移到画布中心\n\n\n    var dx = (size[0] - (width - 2 * padding) * ratio) / 2;\n    var dy = (size[1] - (height - 2 * padding) * ratio) / 2;\n    matrix = transform(matrix, [['t', minX, minY], ['s', ratio, ratio], ['t', dx, dy]]);\n    group.setMatrix(matrix); // 更新minimap视口\n\n    this.set('ratio', ratio);\n    this.set('totaldx', dx + minX * ratio);\n    this.set('totaldy', dy + minY * ratio);\n    this.set('dx', dx);\n    this.set('dy', dy);\n    this.updateViewport();\n  };\n  /**\n   * 获取minimap的画布\n   * @return {GCanvas} G的canvas实例\n   */\n\n\n  MiniMap.prototype.getCanvas = function () {\n    return this.get('canvas');\n  };\n  /**\n   * 获取minimap的窗口\n   * @return {HTMLElement} 窗口的dom实例\n   */\n\n\n  MiniMap.prototype.getViewport = function () {\n    return this.get('viewport');\n  };\n  /**\n   * 获取minimap的容器dom\n   * @return {HTMLElement} dom\n   */\n\n\n  MiniMap.prototype.getContainer = function () {\n    return this.get('container');\n  };\n\n  MiniMap.prototype.destroy = function () {\n    this.get('canvas').destroy();\n    var container = this.get('container');\n    container.parentNode.removeChild(container);\n  };\n\n  return MiniMap;\n}(Base);\n\nexport default MiniMap;","map":{"version":3,"sources":["C:/Users/vietn/Desktop/AppEnegry2020/frontend/node_modules/@antv/g6/es/plugins/minimap/index.js"],"names":["__assign","__extends","GCanvas","GSVGCanvas","Base","isString","createDOM","modifyCSS","isNil","each","transform","debounce","max","Math","DEFAULT_MODE","KEYSHAPE_MODE","DELEGATE_MODE","SVG","MiniMap","_super","_this","apply","arguments","handleUpdateCanvas","event","self","destroyed","updateCanvas","prototype","getDefaultCfgs","container","className","viewportClassName","type","padding","size","delegateStyle","fill","stroke","refresh","getEvents","beforepaint","beforeanimate","afteranimate","viewportchange","disableRefresh","set","enableRefresh","disableOneRefresh","initViewport","cfgs","_cfgs","graph","canvas","get","containerDOM","viewport","x","y","dragging","left","top","width","height","ratio","zoom","addEventListener","e","target","style","parseInt","getZoom","clientX","clientY","dx","dy","translate","appendChild","updateViewport","totaldx","totaldy","graphWidth","graphHeight","topLeft","getPointByCanvas","bottomRight","right","bottom","correctLeft","correctTop","updateGraphShapes","graphGroup","clonedGroup","clone","resetMatrix","clear","add","updateKeyShapes","getEdges","edge","updateOneEdgeKeyShape","getNodes","node","updateOneNodeKeyShape","clearDestroyedShapes","item","group","addGroup","itemMap","mappedItem","bbox","getBBox","cKeyShape","keyShapeStyle","attr","attrs","centerX","centerY","Object","assign","shapeType","minX","minY","isVisible","hide","exist","updateDelegateShapes","updateOneNodeDelegateShape","keys","length","i","shape","remove","path","toBack","addShape","name","init","initContainer","on","parentNode","document","getElementById","renderer","isRefresh","getCanvasBBox","graphBBox","Number","isFinite","min","matrix","setMatrix","getCanvas","getViewport","getContainer","destroy","removeChild"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,OAAOC,QAAP,MAAqB,0BAArB;AACA,OAAOC,SAAP,MAAsB,+BAAtB;AACA,OAAOC,SAAP,MAAsB,+BAAtB;AACA,OAAOC,KAAP,MAAkB,uBAAlB;AACA,OAAOC,IAAP,MAAiB,qBAAjB;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,IAAIC,GAAG,GAAGC,IAAI,CAACD,GAAf;AACA,IAAIE,YAAY,GAAG,SAAnB;AACA,IAAIC,aAAa,GAAG,UAApB;AACA,IAAIC,aAAa,GAAG,UAApB;AACA,IAAIC,GAAG,GAAG,KAAV;;AAEA,IAAIC,OAAO;AACX;AACA,UAAUC,MAAV,EAAkB;AAChBlB,EAAAA,SAAS,CAACiB,OAAD,EAAUC,MAAV,CAAT;;AAEA,WAASD,OAAT,GAAmB;AACjB,QAAIE,KAAK,GAAGD,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACE,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAnB,IAAoD,IAAhE;AACA;;;;;;;AAOAF,IAAAA,KAAK,CAACG,kBAAN,GAA2BZ,QAAQ,CAAC,UAAUa,KAAV,EAAiB;AACnD,UAAIC,IAAI,GAAGL,KAAX;AACA,UAAIK,IAAI,CAACC,SAAT,EAAoB;AACpBD,MAAAA,IAAI,CAACE,YAAL;AACD,KAJkC,EAIhC,GAJgC,EAI3B,KAJ2B,CAAnC;AAKA,WAAOP,KAAP;AACD;;AAEDF,EAAAA,OAAO,CAACU,SAAR,CAAkBC,cAAlB,GAAmC,YAAY;AAC7C,WAAO;AACLC,MAAAA,SAAS,EAAE,IADN;AAELC,MAAAA,SAAS,EAAE,YAFN;AAGLC,MAAAA,iBAAiB,EAAE,qBAHd;AAIL;AACAC,MAAAA,IAAI,EAAE,SALD;AAMLC,MAAAA,OAAO,EAAE,EANJ;AAOLC,MAAAA,IAAI,EAAE,CAAC,GAAD,EAAM,GAAN,CAPD;AAQLC,MAAAA,aAAa,EAAE;AACbC,QAAAA,IAAI,EAAE,SADO;AAEbC,QAAAA,MAAM,EAAE;AAFK,OARV;AAYLC,MAAAA,OAAO,EAAE;AAZJ,KAAP;AAcD,GAfD;;AAiBArB,EAAAA,OAAO,CAACU,SAAR,CAAkBY,SAAlB,GAA8B,YAAY;AACxC,WAAO;AACLC,MAAAA,WAAW,EAAE,gBADR;AAELC,MAAAA,aAAa,EAAE,gBAFV;AAGLC,MAAAA,YAAY,EAAE,eAHT;AAILC,MAAAA,cAAc,EAAE;AAJX,KAAP;AAMD,GAPD,CArCgB,CA4Cb;;;AAGH1B,EAAAA,OAAO,CAACU,SAAR,CAAkBiB,cAAlB,GAAmC,YAAY;AAC7C,SAAKC,GAAL,CAAS,SAAT,EAAoB,KAApB;AACD,GAFD;;AAIA5B,EAAAA,OAAO,CAACU,SAAR,CAAkBmB,aAAlB,GAAkC,YAAY;AAC5C,SAAKD,GAAL,CAAS,SAAT,EAAoB,IAApB;AACA,SAAKnB,YAAL;AACD,GAHD;;AAKAT,EAAAA,OAAO,CAACU,SAAR,CAAkBoB,iBAAlB,GAAsC,YAAY;AAChD,SAAKF,GAAL,CAAS,gBAAT,EAA2B,IAA3B;AACD,GAFD;;AAIA5B,EAAAA,OAAO,CAACU,SAAR,CAAkBqB,YAAlB,GAAiC,YAAY;AAC3C,QAAI7B,KAAK,GAAG,IAAZ;;AAEA,QAAI8B,IAAI,GAAG,KAAKC,KAAhB;AACA,QAAIhB,IAAI,GAAGe,IAAI,CAACf,IAAhB;AAAA,QACIiB,KAAK,GAAGF,IAAI,CAACE,KADjB;AAEA,QAAI,KAAK1B,SAAT,EAAoB;AACpB,QAAI2B,MAAM,GAAG,KAAKC,GAAL,CAAS,QAAT,CAAb;AACA,QAAIC,YAAY,GAAGF,MAAM,CAACC,GAAP,CAAW,WAAX,CAAnB;AACA,QAAIE,QAAQ,GAAGlD,SAAS,CAAC,gBAAgB4C,IAAI,CAAClB,iBAArB,GAAyC,+IAA1C,CAAxB,CAT2C,CASyK;;AAEpN,QAAIyB,CAAC,GAAG,CAAR,CAX2C,CAWhC;;AAEX,QAAIC,CAAC,GAAG,CAAR,CAb2C,CAahC;;AAEX,QAAIC,QAAQ,GAAG,KAAf,CAf2C,CAerB;;AAEtB,QAAIC,IAAI,GAAG,CAAX,CAjB2C,CAiB7B;;AAEd,QAAIC,GAAG,GAAG,CAAV,CAnB2C,CAmB9B;;AAEb,QAAIC,KAAK,GAAG,CAAZ,CArB2C,CAqB5B;;AAEf,QAAIC,MAAM,GAAG,CAAb;AACA,QAAIC,KAAK,GAAG,CAAZ;AACA,QAAIC,IAAI,GAAG,CAAX;AACAV,IAAAA,YAAY,CAACW,gBAAb,CAA8B,WAA9B,EAA2C,UAAUC,CAAV,EAAa;AACtDjB,MAAAA,IAAI,CAACX,OAAL,GAAe,KAAf;;AAEA,UAAI4B,CAAC,CAACC,MAAF,KAAaZ,QAAjB,EAA2B;AACzB;AACD,OALqD,CAKpD;;;AAGF,UAAIa,KAAK,GAAGb,QAAQ,CAACa,KAArB;AACAT,MAAAA,IAAI,GAAGU,QAAQ,CAACD,KAAK,CAACT,IAAP,EAAa,EAAb,CAAf;AACAC,MAAAA,GAAG,GAAGS,QAAQ,CAACD,KAAK,CAACR,GAAP,EAAY,EAAZ,CAAd;AACAC,MAAAA,KAAK,GAAGQ,QAAQ,CAACD,KAAK,CAACP,KAAP,EAAc,EAAd,CAAhB;AACAC,MAAAA,MAAM,GAAGO,QAAQ,CAACD,KAAK,CAACN,MAAP,EAAe,EAAf,CAAjB;;AAEA,UAAID,KAAK,GAAG3B,IAAI,CAAC,CAAD,CAAZ,IAAmB4B,MAAM,GAAG5B,IAAI,CAAC,CAAD,CAApC,EAAyC;AACvC;AACD;;AAED8B,MAAAA,IAAI,GAAGb,KAAK,CAACmB,OAAN,EAAP;AACAP,MAAAA,KAAK,GAAG5C,KAAK,CAACkC,GAAN,CAAU,OAAV,CAAR;AACAK,MAAAA,QAAQ,GAAG,IAAX;AACAF,MAAAA,CAAC,GAAGU,CAAC,CAACK,OAAN;AACAd,MAAAA,CAAC,GAAGS,CAAC,CAACM,OAAN;AACD,KAvBD,EAuBG,KAvBH;AAwBAlB,IAAAA,YAAY,CAACW,gBAAb,CAA8B,WAA9B,EAA2C,UAAUC,CAAV,EAAa;AACtD,UAAI,CAACR,QAAD,IAAanD,KAAK,CAAC2D,CAAC,CAACK,OAAH,CAAlB,IAAiChE,KAAK,CAAC2D,CAAC,CAACM,OAAH,CAA1C,EAAuD;AACrD;AACD;;AAED,UAAIC,EAAE,GAAGjB,CAAC,GAAGU,CAAC,CAACK,OAAf;AACA,UAAIG,EAAE,GAAGjB,CAAC,GAAGS,CAAC,CAACM,OAAf,CANsD,CAM9B;;AAExB,UAAIb,IAAI,GAAGc,EAAP,GAAY,CAAZ,IAAiBd,IAAI,GAAGc,EAAP,GAAYZ,KAAZ,IAAqB3B,IAAI,CAAC,CAAD,CAA9C,EAAmD;AACjDuC,QAAAA,EAAE,GAAG,CAAL;AACD,OAVqD,CAUpD;;;AAGF,UAAIb,GAAG,GAAGc,EAAN,GAAW,CAAX,IAAgBd,GAAG,GAAGc,EAAN,GAAWZ,MAAX,IAAqB5B,IAAI,CAAC,CAAD,CAA7C,EAAkD;AAChDwC,QAAAA,EAAE,GAAG,CAAL;AACD;;AAEDf,MAAAA,IAAI,IAAIc,EAAR;AACAb,MAAAA,GAAG,IAAIc,EAAP,CAlBsD,CAkB3C;;AAEXpE,MAAAA,SAAS,CAACiD,QAAD,EAAW;AAClBI,QAAAA,IAAI,EAAEA,IAAI,GAAG,IADK;AAElBC,QAAAA,GAAG,EAAEA,GAAG,GAAG;AAFO,OAAX,CAAT,CApBsD,CAuBlD;;AAEJT,MAAAA,KAAK,CAACwB,SAAN,CAAgBF,EAAE,GAAGT,IAAL,GAAYD,KAA5B,EAAmCW,EAAE,GAAGV,IAAL,GAAYD,KAA/C;AACAP,MAAAA,CAAC,GAAGU,CAAC,CAACK,OAAN;AACAd,MAAAA,CAAC,GAAGS,CAAC,CAACM,OAAN;AACD,KA5BD,EA4BG,KA5BH;AA6BAlB,IAAAA,YAAY,CAACW,gBAAb,CAA8B,YAA9B,EAA4C,YAAY;AACtDP,MAAAA,QAAQ,GAAG,KAAX;AACAT,MAAAA,IAAI,CAACX,OAAL,GAAe,IAAf;AACD,KAHD,EAGG,KAHH;AAIAgB,IAAAA,YAAY,CAACW,gBAAb,CAA8B,SAA9B,EAAyC,YAAY;AACnDP,MAAAA,QAAQ,GAAG,KAAX;AACAT,MAAAA,IAAI,CAACX,OAAL,GAAe,IAAf;AACD,KAHD,EAGG,KAHH;AAIA,SAAKO,GAAL,CAAS,UAAT,EAAqBU,QAArB;AACAD,IAAAA,YAAY,CAACsB,WAAb,CAAyBrB,QAAzB;AACD,GAzFD;AA0FA;;;;;AAKAtC,EAAAA,OAAO,CAACU,SAAR,CAAkBkD,cAAlB,GAAmC,YAAY;AAC7C,QAAI,KAAKpD,SAAT,EAAoB;AACpB,QAAIsC,KAAK,GAAG,KAAKV,GAAL,CAAS,OAAT,CAAZ;AACA,QAAIoB,EAAE,GAAG,KAAKpB,GAAL,CAAS,IAAT,CAAT;AACA,QAAIqB,EAAE,GAAG,KAAKrB,GAAL,CAAS,IAAT,CAAT;AACA,QAAIyB,OAAO,GAAG,KAAKzB,GAAL,CAAS,SAAT,CAAd;AACA,QAAI0B,OAAO,GAAG,KAAK1B,GAAL,CAAS,SAAT,CAAd;AACA,QAAIF,KAAK,GAAG,KAAKE,GAAL,CAAS,OAAT,CAAZ;AACA,QAAInB,IAAI,GAAG,KAAKmB,GAAL,CAAS,MAAT,CAAX;AACA,QAAI2B,UAAU,GAAG7B,KAAK,CAACE,GAAN,CAAU,OAAV,CAAjB;AACA,QAAI4B,WAAW,GAAG9B,KAAK,CAACE,GAAN,CAAU,QAAV,CAAlB;AACA,QAAI6B,OAAO,GAAG/B,KAAK,CAACgC,gBAAN,CAAuB,CAAvB,EAA0B,CAA1B,CAAd;AACA,QAAIC,WAAW,GAAGjC,KAAK,CAACgC,gBAAN,CAAuBH,UAAvB,EAAmCC,WAAnC,CAAlB;AACA,QAAI1B,QAAQ,GAAG,KAAKF,GAAL,CAAS,UAAT,CAAf;;AAEA,QAAI,CAACE,QAAL,EAAe;AACb,WAAKP,YAAL;AACD;;AAED,QAAIgB,IAAI,GAAGb,KAAK,CAACmB,OAAN,EAAX,CAnB6C,CAmBjB;;AAE5B,QAAIT,KAAK,GAAG,CAACuB,WAAW,CAAC5B,CAAZ,GAAgB0B,OAAO,CAAC1B,CAAzB,IAA8BO,KAA1C;AACA,QAAID,MAAM,GAAG,CAACsB,WAAW,CAAC3B,CAAZ,GAAgByB,OAAO,CAACzB,CAAzB,IAA8BM,KAA3C;AACA,QAAIJ,IAAI,GAAGuB,OAAO,CAAC1B,CAAR,GAAYO,KAAZ,GAAoBe,OAA/B;AACA,QAAIlB,GAAG,GAAGsB,OAAO,CAACzB,CAAR,GAAYM,KAAZ,GAAoBgB,OAA9B;AACA,QAAIM,KAAK,GAAG1B,IAAI,GAAGE,KAAnB;AACA,QAAIyB,MAAM,GAAG1B,GAAG,GAAGE,MAAnB;;AAEA,QAAIH,IAAI,GAAG,CAAX,EAAc;AACZE,MAAAA,KAAK,IAAIF,IAAT;AACAA,MAAAA,IAAI,GAAG,CAAP;AACD;;AAED,QAAI0B,KAAK,GAAGnD,IAAI,CAAC,CAAD,CAAhB,EAAqB;AACnB2B,MAAAA,KAAK,GAAGA,KAAK,IAAIwB,KAAK,GAAGnD,IAAI,CAAC,CAAD,CAAhB,CAAb;AACD;;AAED,QAAI0B,GAAG,GAAG,CAAV,EAAa;AACXE,MAAAA,MAAM,IAAIF,GAAV;AACAA,MAAAA,GAAG,GAAG,CAAN;AACD;;AAED,QAAI0B,MAAM,GAAGpD,IAAI,CAAC,CAAD,CAAjB,EAAsB;AACpB4B,MAAAA,MAAM,GAAGA,MAAM,IAAIwB,MAAM,GAAGpD,IAAI,CAAC,CAAD,CAAjB,CAAf;AACD,KA5C4C,CA4C3C;;;AAGF,SAAKW,GAAL,CAAS,OAAT,EAAkBkB,KAAlB;AACA,QAAIwB,WAAW,GAAG5B,IAAI,GAAG,IAAzB;AACA,QAAI6B,UAAU,GAAG5B,GAAG,GAAG,IAAvB;AACAtD,IAAAA,SAAS,CAACiD,QAAD,EAAW;AAClBI,MAAAA,IAAI,EAAE4B,WADY;AAElB3B,MAAAA,GAAG,EAAE4B,UAFa;AAGlB3B,MAAAA,KAAK,EAAEA,KAAK,GAAG,IAHG;AAIlBC,MAAAA,MAAM,EAAEA,MAAM,GAAG;AAJC,KAAX,CAAT;AAMD,GAxDD;AAyDA;;;;;AAKA7C,EAAAA,OAAO,CAACU,SAAR,CAAkB8D,iBAAlB,GAAsC,YAAY;AAChD,QAAItC,KAAK,GAAG,KAAKD,KAAL,CAAWC,KAAvB;AACA,QAAIC,MAAM,GAAG,KAAKC,GAAL,CAAS,QAAT,CAAb;AACA,QAAIqC,UAAU,GAAGvC,KAAK,CAACE,GAAN,CAAU,OAAV,CAAjB;AACA,QAAIqC,UAAU,CAACjE,SAAf,EAA0B;AAC1B,QAAIkE,WAAW,GAAGD,UAAU,CAACE,KAAX,EAAlB;AACAD,IAAAA,WAAW,CAACE,WAAZ;AACAzC,IAAAA,MAAM,CAAC0C,KAAP;AACA1C,IAAAA,MAAM,CAAC2C,GAAP,CAAWJ,WAAX;AACD,GATD,CAzNgB,CAkOb;AACH;;;AAGA1E,EAAAA,OAAO,CAACU,SAAR,CAAkBqE,eAAlB,GAAoC,YAAY;AAC9C,QAAI7E,KAAK,GAAG,IAAZ;;AAEA,QAAIgC,KAAK,GAAG,KAAKD,KAAL,CAAWC,KAAvB;AACA3C,IAAAA,IAAI,CAAC2C,KAAK,CAAC8C,QAAN,EAAD,EAAmB,UAAUC,IAAV,EAAgB;AACrC/E,MAAAA,KAAK,CAACgF,qBAAN,CAA4BD,IAA5B;AACD,KAFG,CAAJ;AAGA1F,IAAAA,IAAI,CAAC2C,KAAK,CAACiD,QAAN,EAAD,EAAmB,UAAUC,IAAV,EAAgB;AACrClF,MAAAA,KAAK,CAACmF,qBAAN,CAA4BD,IAA5B;AACD,KAFG,CAAJ;AAGA,SAAKE,oBAAL;AACD,GAXD;AAYA;;;;;;AAMAtF,EAAAA,OAAO,CAACU,SAAR,CAAkB2E,qBAAlB,GAA0C,UAAUE,IAAV,EAAgB;AACxD,QAAIpD,MAAM,GAAG,KAAKC,GAAL,CAAS,QAAT,CAAb;AACA,QAAIoD,KAAK,GAAGrD,MAAM,CAACC,GAAP,CAAW,UAAX,EAAuB,CAAvB,KAA6BD,MAAM,CAACsD,QAAP,EAAzC;AACA,QAAIC,OAAO,GAAG,KAAKtD,GAAL,CAAS,SAAT,KAAuB,EAArC,CAHwD,CAGf;;AAEzC,QAAIuD,UAAU,GAAGD,OAAO,CAACH,IAAI,CAACnD,GAAL,CAAS,IAAT,CAAD,CAAxB;AACA,QAAIwD,IAAI,GAAGL,IAAI,CAACM,OAAL,EAAX,CANwD,CAM7B;;AAE3B,QAAIC,SAAS,GAAGP,IAAI,CAACnD,GAAL,CAAS,UAAT,EAAqBuC,KAArB,EAAhB;AACA,QAAIoB,aAAa,GAAGD,SAAS,CAACE,IAAV,EAApB;AACA,QAAIC,KAAK,GAAG;AACV1D,MAAAA,CAAC,EAAEqD,IAAI,CAACM,OADE;AAEV1D,MAAAA,CAAC,EAAEoD,IAAI,CAACO;AAFE,KAAZ;;AAKA,QAAI,CAACR,UAAL,EAAiB;AACfA,MAAAA,UAAU,GAAGG,SAAb;AACAN,MAAAA,KAAK,CAACV,GAAN,CAAUa,UAAV;AACD,KAHD,MAGO;AACLM,MAAAA,KAAK,GAAGG,MAAM,CAACC,MAAP,CAAcN,aAAd,EAA6BE,KAA7B,CAAR;AACD;;AAED,QAAIK,SAAS,GAAGX,UAAU,CAACvD,GAAX,CAAe,MAAf,CAAhB;;AAEA,QAAIkE,SAAS,KAAK,MAAd,IAAwBA,SAAS,KAAK,OAA1C,EAAmD;AACjDL,MAAAA,KAAK,CAAC1D,CAAN,GAAUqD,IAAI,CAACW,IAAf;AACAN,MAAAA,KAAK,CAACzD,CAAN,GAAUoD,IAAI,CAACY,IAAf;AACD;;AAEDb,IAAAA,UAAU,CAACK,IAAX,CAAgBC,KAAhB;;AAEA,QAAI,CAACV,IAAI,CAACkB,SAAL,EAAL,EAAuB;AACrBd,MAAAA,UAAU,CAACe,IAAX;AACD;;AAEDf,IAAAA,UAAU,CAACgB,KAAX,GAAmB,IAAnB;AACAjB,IAAAA,OAAO,CAACH,IAAI,CAACnD,GAAL,CAAS,IAAT,CAAD,CAAP,GAA0BuD,UAA1B;AACA,SAAK/D,GAAL,CAAS,SAAT,EAAoB8D,OAApB;AACD,GAtCD;AAuCA;;;;;AAKA1F,EAAAA,OAAO,CAACU,SAAR,CAAkBkG,oBAAlB,GAAyC,YAAY;AACnD,QAAI1G,KAAK,GAAG,IAAZ;;AAEA,QAAIgC,KAAK,GAAG,KAAKD,KAAL,CAAWC,KAAvB,CAHmD,CAGrB;;AAE9B3C,IAAAA,IAAI,CAAC2C,KAAK,CAAC8C,QAAN,EAAD,EAAmB,UAAUC,IAAV,EAAgB;AACrC/E,MAAAA,KAAK,CAACgF,qBAAN,CAA4BD,IAA5B;AACD,KAFG,CAAJ;AAGA1F,IAAAA,IAAI,CAAC2C,KAAK,CAACiD,QAAN,EAAD,EAAmB,UAAUC,IAAV,EAAgB;AACrClF,MAAAA,KAAK,CAAC2G,0BAAN,CAAiCzB,IAAjC;AACD,KAFG,CAAJ;AAGA,SAAKE,oBAAL;AACD,GAZD;;AAcAtF,EAAAA,OAAO,CAACU,SAAR,CAAkB4E,oBAAlB,GAAyC,YAAY;AACnD,QAAII,OAAO,GAAG,KAAKtD,GAAL,CAAS,SAAT,KAAuB,EAArC;AACA,QAAI0E,IAAI,GAAGV,MAAM,CAACU,IAAP,CAAYpB,OAAZ,CAAX;AACA,QAAI,CAACoB,IAAD,IAASA,IAAI,CAACC,MAAL,KAAgB,CAA7B,EAAgC;;AAEhC,SAAK,IAAIC,CAAC,GAAGF,IAAI,CAACC,MAAL,GAAc,CAA3B,EAA8BC,CAAC,IAAI,CAAnC,EAAsCA,CAAC,EAAvC,EAA2C;AACzC,UAAIC,KAAK,GAAGvB,OAAO,CAACoB,IAAI,CAACE,CAAD,CAAL,CAAnB;AACA,UAAIL,KAAK,GAAGM,KAAK,CAACN,KAAlB;AACAM,MAAAA,KAAK,CAACN,KAAN,GAAc,KAAd;;AAEA,UAAI,CAACA,KAAL,EAAY;AACVM,QAAAA,KAAK,CAACC,MAAN;AACA,eAAOxB,OAAO,CAACoB,IAAI,CAACE,CAAD,CAAL,CAAd;AACD;AACF;AACF,GAfD;AAgBA;;;;;;AAMAhH,EAAAA,OAAO,CAACU,SAAR,CAAkBwE,qBAAlB,GAA0C,UAAUK,IAAV,EAAgB;AACxD,QAAIpD,MAAM,GAAG,KAAKC,GAAL,CAAS,QAAT,CAAb;AACA,QAAIoD,KAAK,GAAGrD,MAAM,CAACC,GAAP,CAAW,UAAX,EAAuB,CAAvB,KAA6BD,MAAM,CAACsD,QAAP,EAAzC;AACA,QAAIC,OAAO,GAAG,KAAKtD,GAAL,CAAS,SAAT,KAAuB,EAArC,CAHwD,CAGf;;AAEzC,QAAIuD,UAAU,GAAGD,OAAO,CAACH,IAAI,CAACnD,GAAL,CAAS,IAAT,CAAD,CAAxB;;AAEA,QAAIuD,UAAJ,EAAgB;AACd,UAAIwB,IAAI,GAAG5B,IAAI,CAACnD,GAAL,CAAS,UAAT,EAAqB4D,IAArB,CAA0B,MAA1B,CAAX;AACAL,MAAAA,UAAU,CAACK,IAAX,CAAgB,MAAhB,EAAwBmB,IAAxB;AACD,KAHD,MAGO;AACLxB,MAAAA,UAAU,GAAGJ,IAAI,CAACnD,GAAL,CAAS,UAAT,EAAqBuC,KAArB,EAAb;AACAa,MAAAA,KAAK,CAACV,GAAN,CAAUa,UAAV;AACAA,MAAAA,UAAU,CAACyB,MAAX;AACD;;AAED,QAAI,CAAC7B,IAAI,CAACkB,SAAL,EAAL,EAAuB;AACrBd,MAAAA,UAAU,CAACe,IAAX;AACD;;AAEDf,IAAAA,UAAU,CAACgB,KAAX,GAAmB,IAAnB;AACAjB,IAAAA,OAAO,CAACH,IAAI,CAACnD,GAAL,CAAS,IAAT,CAAD,CAAP,GAA0BuD,UAA1B;AACA,SAAK/D,GAAL,CAAS,SAAT,EAAoB8D,OAApB;AACD,GAvBD;AAwBA;;;;;;;AAOA1F,EAAAA,OAAO,CAACU,SAAR,CAAkBmG,0BAAlB,GAA+C,UAAUtB,IAAV,EAAgB;AAC7D,QAAIpD,MAAM,GAAG,KAAKC,GAAL,CAAS,QAAT,CAAb;AACA,QAAIoD,KAAK,GAAGrD,MAAM,CAACC,GAAP,CAAW,UAAX,EAAuB,CAAvB,KAA6BD,MAAM,CAACsD,QAAP,EAAzC;AACA,QAAIvE,aAAa,GAAG,KAAKkB,GAAL,CAAS,eAAT,CAApB;AACA,QAAIsD,OAAO,GAAG,KAAKtD,GAAL,CAAS,SAAT,KAAuB,EAArC,CAJ6D,CAIpB;;AAEzC,QAAIuD,UAAU,GAAGD,OAAO,CAACH,IAAI,CAACnD,GAAL,CAAS,IAAT,CAAD,CAAxB;AACA,QAAIwD,IAAI,GAAGL,IAAI,CAACM,OAAL,EAAX,CAP6D,CAOlC;;AAE3B,QAAIF,UAAJ,EAAgB;AACd,UAAIM,KAAK,GAAG;AACV1D,QAAAA,CAAC,EAAEqD,IAAI,CAACW,IADE;AAEV/D,QAAAA,CAAC,EAAEoD,IAAI,CAACY,IAFE;AAGV5D,QAAAA,KAAK,EAAEgD,IAAI,CAAChD,KAHF;AAIVC,QAAAA,MAAM,EAAE+C,IAAI,CAAC/C;AAJH,OAAZ;AAMA8C,MAAAA,UAAU,CAACK,IAAX,CAAgBC,KAAhB;AACD,KARD,MAQO;AACLN,MAAAA,UAAU,GAAGH,KAAK,CAAC6B,QAAN,CAAe,MAAf,EAAuB;AAClCpB,QAAAA,KAAK,EAAEnH,QAAQ,CAAC;AACdyD,UAAAA,CAAC,EAAEqD,IAAI,CAACW,IADM;AAEd/D,UAAAA,CAAC,EAAEoD,IAAI,CAACY,IAFM;AAGd5D,UAAAA,KAAK,EAAEgD,IAAI,CAAChD,KAHE;AAIdC,UAAAA,MAAM,EAAE+C,IAAI,CAAC/C;AAJC,SAAD,EAKZ3B,aALY,CADmB;AAOlCoG,QAAAA,IAAI,EAAE;AAP4B,OAAvB,CAAb;AASD;;AAED,QAAI,CAAC/B,IAAI,CAACkB,SAAL,EAAL,EAAuB;AACrBd,MAAAA,UAAU,CAACe,IAAX;AACD;;AAEDf,IAAAA,UAAU,CAACgB,KAAX,GAAmB,IAAnB;AACAjB,IAAAA,OAAO,CAACH,IAAI,CAACnD,GAAL,CAAS,IAAT,CAAD,CAAP,GAA0BuD,UAA1B;AACA,SAAK/D,GAAL,CAAS,SAAT,EAAoB8D,OAApB;AACD,GApCD;;AAsCA1F,EAAAA,OAAO,CAACU,SAAR,CAAkB6G,IAAlB,GAAyB,YAAY;AACnC,SAAKC,aAAL;AACA,SAAKpF,GAAL,CAAS,OAAT,EAAkBqF,EAAlB,CAAqB,iBAArB,EAAwC,KAAKpH,kBAA7C;AACA,SAAK+B,GAAL,CAAS,OAAT,EAAkBqF,EAAlB,CAAqB,sBAArB,EAA6C,KAAKpH,kBAAlD;AACA,SAAK+B,GAAL,CAAS,OAAT,EAAkBqF,EAAlB,CAAqB,cAArB,EAAqC,KAAKpH,kBAA1C;AACA,SAAK+B,GAAL,CAAS,OAAT,EAAkBqF,EAAlB,CAAqB,iBAArB,EAAwC,KAAKpH,kBAA7C;AACA,SAAK+B,GAAL,CAAS,OAAT,EAAkBqF,EAAlB,CAAqB,aAArB,EAAoC,KAAKpH,kBAAzC;AACA,SAAK+B,GAAL,CAAS,OAAT,EAAkBqF,EAAlB,CAAqB,aAArB,EAAoC,KAAKpH,kBAAzC;AACD,GARD;AASA;;;;;AAKAL,EAAAA,OAAO,CAACU,SAAR,CAAkB8G,aAAlB,GAAkC,YAAY;AAC5C,QAAIjH,IAAI,GAAG,IAAX;AACA,QAAI2B,KAAK,GAAG3B,IAAI,CAAC6B,GAAL,CAAS,OAAT,CAAZ;AACA,QAAInB,IAAI,GAAGV,IAAI,CAAC6B,GAAL,CAAS,MAAT,CAAX;AACA,QAAIvB,SAAS,GAAGN,IAAI,CAAC6B,GAAL,CAAS,WAAT,CAAhB;AACA,QAAIsF,UAAU,GAAGnH,IAAI,CAAC6B,GAAL,CAAS,WAAT,CAAjB;AACA,QAAIxB,SAAS,GAAGxB,SAAS,CAAC,iBAAiByB,SAAjB,GAA6B,kBAA7B,GAAkDI,IAAI,CAAC,CAAD,CAAtD,GAA4D,cAA5D,GAA6EA,IAAI,CAAC,CAAD,CAAjF,GAAuF,8BAAxF,CAAzB;;AAEA,QAAI9B,QAAQ,CAACuI,UAAD,CAAZ,EAA0B;AACxBA,MAAAA,UAAU,GAAGC,QAAQ,CAACC,cAAT,CAAwBF,UAAxB,CAAb;AACD;;AAED,QAAIA,UAAJ,EAAgB;AACdA,MAAAA,UAAU,CAAC/D,WAAX,CAAuB/C,SAAvB;AACD,KAFD,MAEO;AACLsB,MAAAA,KAAK,CAACE,GAAN,CAAU,WAAV,EAAuBuB,WAAvB,CAAmC/C,SAAnC;AACD;;AAEDL,IAAAA,IAAI,CAACqB,GAAL,CAAS,WAAT,EAAsBhB,SAAtB;AACA,QAAIyB,YAAY,GAAGjD,SAAS,CAAC,sEAAD,CAA5B;AACAwB,IAAAA,SAAS,CAAC+C,WAAV,CAAsBtB,YAAtB;AACA,QAAIF,MAAJ;AACA,QAAI0F,QAAQ,GAAG3F,KAAK,CAACE,GAAN,CAAU,UAAV,CAAf;;AAEA,QAAIyF,QAAQ,KAAK9H,GAAjB,EAAsB;AACpBoC,MAAAA,MAAM,GAAG,IAAIlD,UAAJ,CAAe;AACtB2B,QAAAA,SAAS,EAAEyB,YADW;AAEtBO,QAAAA,KAAK,EAAE3B,IAAI,CAAC,CAAD,CAFW;AAGtB4B,QAAAA,MAAM,EAAE5B,IAAI,CAAC,CAAD;AAHU,OAAf,CAAT;AAKD,KAND,MAMO;AACLkB,MAAAA,MAAM,GAAG,IAAInD,OAAJ,CAAY;AACnB4B,QAAAA,SAAS,EAAEyB,YADQ;AAEnBO,QAAAA,KAAK,EAAE3B,IAAI,CAAC,CAAD,CAFQ;AAGnB4B,QAAAA,MAAM,EAAE5B,IAAI,CAAC,CAAD;AAHO,OAAZ,CAAT;AAKD;;AAEDV,IAAAA,IAAI,CAACqB,GAAL,CAAS,QAAT,EAAmBO,MAAnB;AACA5B,IAAAA,IAAI,CAACE,YAAL;AACD,GAxCD;;AA0CAT,EAAAA,OAAO,CAACU,SAAR,CAAkBD,YAAlB,GAAiC,YAAY;AAC3C;AACA,QAAIqH,SAAS,GAAG,KAAK1F,GAAL,CAAS,SAAT,CAAhB;;AAEA,QAAI,CAAC0F,SAAL,EAAgB;AACd;AACD;;AAED,QAAI5F,KAAK,GAAG,KAAKE,GAAL,CAAS,OAAT,CAAZ;;AAEA,QAAIF,KAAK,CAACE,GAAN,CAAU,WAAV,CAAJ,EAA4B;AAC1B;AACD,KAZ0C,CAYzC;;;AAGF,QAAI,KAAKA,GAAL,CAAS,gBAAT,CAAJ,EAAgC;AAC9B,WAAKR,GAAL,CAAS,gBAAT,EAA2B,KAA3B;AACA,WAAKgC,cAAL;AACD;;AAED,QAAI3C,IAAI,GAAG,KAAKmB,GAAL,CAAS,MAAT,CAAX;AACA,QAAID,MAAM,GAAG,KAAKC,GAAL,CAAS,QAAT,CAAb;AACA,QAAIrB,IAAI,GAAG,KAAKqB,GAAL,CAAS,MAAT,CAAX;AACA,QAAIpB,OAAO,GAAG,KAAKoB,GAAL,CAAS,SAAT,CAAd;;AAEA,QAAID,MAAM,CAAC3B,SAAX,EAAsB;AACpB;AACD;;AAED,YAAQO,IAAR;AACE,WAAKnB,YAAL;AACE,aAAK4E,iBAAL;AACA;;AAEF,WAAK3E,aAAL;AACE,aAAKkF,eAAL;AACA;;AAEF,WAAKjF,aAAL;AACE;AACA,aAAK8G,oBAAL;AACA;;AAEF;AACE;AAfJ;;AAkBA,QAAIpB,KAAK,GAAGrD,MAAM,CAACC,GAAP,CAAW,UAAX,EAAuB,CAAvB,CAAZ;AACA,QAAI,CAACoD,KAAL,EAAY;AACZA,IAAAA,KAAK,CAACZ,WAAN,GAjD2C,CAiDtB;;AAErB,QAAIgB,IAAI,GAAGJ,KAAK,CAACuC,aAAN,EAAX;AACA,QAAIC,SAAS,GAAG9F,KAAK,CAACE,GAAN,CAAU,QAAV,EAAoByD,OAApB,EAAhB;AACA,QAAIjD,KAAK,GAAGoF,SAAS,CAACpF,KAAtB;AACA,QAAIC,MAAM,GAAGmF,SAAS,CAACnF,MAAvB;;AAEA,QAAIoF,MAAM,CAACC,QAAP,CAAgBtC,IAAI,CAAChD,KAArB,CAAJ,EAAiC;AAC/B;AACAA,MAAAA,KAAK,GAAGlD,GAAG,CAACkG,IAAI,CAAChD,KAAN,EAAaA,KAAb,CAAX;AACAC,MAAAA,MAAM,GAAGnD,GAAG,CAACkG,IAAI,CAAC/C,MAAN,EAAcA,MAAd,CAAZ;AACD;;AAEDD,IAAAA,KAAK,IAAI,IAAI5B,OAAb;AACA6B,IAAAA,MAAM,IAAI,IAAI7B,OAAd;AACA,QAAI8B,KAAK,GAAGnD,IAAI,CAACwI,GAAL,CAASlH,IAAI,CAAC,CAAD,CAAJ,GAAU2B,KAAnB,EAA0B3B,IAAI,CAAC,CAAD,CAAJ,GAAU4B,MAApC,CAAZ;AACA,QAAIuF,MAAM,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CAAb;AACA,QAAI7B,IAAI,GAAG,CAAX;AACA,QAAIC,IAAI,GAAG,CAAX,CAnE2C,CAmE7B;;AAEd,QAAIyB,MAAM,CAACC,QAAP,CAAgBtC,IAAI,CAACW,IAArB,CAAJ,EAAgC;AAC9BA,MAAAA,IAAI,GAAG,CAACX,IAAI,CAACW,IAAb;AACD;;AAED,QAAI0B,MAAM,CAACC,QAAP,CAAgBtC,IAAI,CAACY,IAArB,CAAJ,EAAgC;AAC9BA,MAAAA,IAAI,GAAG,CAACZ,IAAI,CAACY,IAAb;AACD,KA3E0C,CA2EzC;;;AAGF,QAAIhD,EAAE,GAAG,CAACvC,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAC2B,KAAK,GAAG,IAAI5B,OAAb,IAAwB8B,KAAnC,IAA4C,CAArD;AACA,QAAIW,EAAE,GAAG,CAACxC,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAC4B,MAAM,GAAG,IAAI7B,OAAd,IAAyB8B,KAApC,IAA6C,CAAtD;AACAsF,IAAAA,MAAM,GAAG5I,SAAS,CAAC4I,MAAD,EAAS,CAAC,CAAC,GAAD,EAAM7B,IAAN,EAAYC,IAAZ,CAAD,EAAoB,CAAC,GAAD,EAAM1D,KAAN,EAAaA,KAAb,CAApB,EAAyC,CAAC,GAAD,EAAMU,EAAN,EAAUC,EAAV,CAAzC,CAAT,CAAlB;AACA+B,IAAAA,KAAK,CAAC6C,SAAN,CAAgBD,MAAhB,EAjF2C,CAiFlB;;AAEzB,SAAKxG,GAAL,CAAS,OAAT,EAAkBkB,KAAlB;AACA,SAAKlB,GAAL,CAAS,SAAT,EAAoB4B,EAAE,GAAG+C,IAAI,GAAGzD,KAAhC;AACA,SAAKlB,GAAL,CAAS,SAAT,EAAoB6B,EAAE,GAAG+C,IAAI,GAAG1D,KAAhC;AACA,SAAKlB,GAAL,CAAS,IAAT,EAAe4B,EAAf;AACA,SAAK5B,GAAL,CAAS,IAAT,EAAe6B,EAAf;AACA,SAAKG,cAAL;AACD,GAzFD;AA0FA;;;;;;AAMA5D,EAAAA,OAAO,CAACU,SAAR,CAAkB4H,SAAlB,GAA8B,YAAY;AACxC,WAAO,KAAKlG,GAAL,CAAS,QAAT,CAAP;AACD,GAFD;AAGA;;;;;;AAMApC,EAAAA,OAAO,CAACU,SAAR,CAAkB6H,WAAlB,GAAgC,YAAY;AAC1C,WAAO,KAAKnG,GAAL,CAAS,UAAT,CAAP;AACD,GAFD;AAGA;;;;;;AAMApC,EAAAA,OAAO,CAACU,SAAR,CAAkB8H,YAAlB,GAAiC,YAAY;AAC3C,WAAO,KAAKpG,GAAL,CAAS,WAAT,CAAP;AACD,GAFD;;AAIApC,EAAAA,OAAO,CAACU,SAAR,CAAkB+H,OAAlB,GAA4B,YAAY;AACtC,SAAKrG,GAAL,CAAS,QAAT,EAAmBqG,OAAnB;AACA,QAAI7H,SAAS,GAAG,KAAKwB,GAAL,CAAS,WAAT,CAAhB;AACAxB,IAAAA,SAAS,CAAC8G,UAAV,CAAqBgB,WAArB,CAAiC9H,SAAjC;AACD,GAJD;;AAMA,SAAOZ,OAAP;AACD,CAlkBD,CAkkBEd,IAlkBF,CAFA;;AAskBA,eAAec,OAAf","sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport GCanvas from '@antv/g-canvas/lib/canvas';\nimport GSVGCanvas from '@antv/g-svg/lib/canvas';\nimport Base from '../base';\nimport isString from '@antv/util/lib/is-string';\nimport createDOM from '@antv/dom-util/lib/create-dom';\nimport modifyCSS from '@antv/dom-util/lib/modify-css';\nimport isNil from '@antv/util/lib/is-nil';\nimport each from '@antv/util/lib/each';\nimport { transform } from '@antv/matrix-util';\nimport { debounce } from '@antv/util';\nvar max = Math.max;\nvar DEFAULT_MODE = 'default';\nvar KEYSHAPE_MODE = 'keyShape';\nvar DELEGATE_MODE = 'delegate';\nvar SVG = 'svg';\n\nvar MiniMap =\n/** @class */\nfunction (_super) {\n  __extends(MiniMap, _super);\n\n  function MiniMap() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * 主图更新的监听函数，使用 debounce 减少渲染频率\n     * e.g. 拖拽节点只会在松手后的 100ms 后执行 updateCanvas\n     * e.g. render 时大量 addItem 也只会执行一次 updateCanvas\n     */\n\n\n    _this.handleUpdateCanvas = debounce(function (event) {\n      var self = _this;\n      if (self.destroyed) return;\n      self.updateCanvas();\n    }, 100, false);\n    return _this;\n  }\n\n  MiniMap.prototype.getDefaultCfgs = function () {\n    return {\n      container: null,\n      className: 'g6-minimap',\n      viewportClassName: 'g6-minimap-viewport',\n      // Minimap 中默认展示和主图一样的内容，KeyShape 只展示节点和边的 key shape 部分，delegate表示展示自定义的rect，用户可自定义样式\n      type: 'default',\n      padding: 50,\n      size: [200, 120],\n      delegateStyle: {\n        fill: '#40a9ff',\n        stroke: '#096dd9'\n      },\n      refresh: true\n    };\n  };\n\n  MiniMap.prototype.getEvents = function () {\n    return {\n      beforepaint: 'updateViewport',\n      beforeanimate: 'disableRefresh',\n      afteranimate: 'enableRefresh',\n      viewportchange: 'disableOneRefresh'\n    };\n  }; // 若是正在进行动画，不刷新缩略图\n\n\n  MiniMap.prototype.disableRefresh = function () {\n    this.set('refresh', false);\n  };\n\n  MiniMap.prototype.enableRefresh = function () {\n    this.set('refresh', true);\n    this.updateCanvas();\n  };\n\n  MiniMap.prototype.disableOneRefresh = function () {\n    this.set('viewportChange', true);\n  };\n\n  MiniMap.prototype.initViewport = function () {\n    var _this = this;\n\n    var cfgs = this._cfgs;\n    var size = cfgs.size,\n        graph = cfgs.graph;\n    if (this.destroyed) return;\n    var canvas = this.get('canvas');\n    var containerDOM = canvas.get('container');\n    var viewport = createDOM(\"<div class=\" + cfgs.viewportClassName + \"\\n      style='position:absolute;\\n        left:0;\\n        top:0;\\n        box-sizing:border-box;\\n        border: 2px solid #1980ff'></div>\"); // 计算拖拽水平方向距离\n\n    var x = 0; // 计算拖拽垂直方向距离\n\n    var y = 0; // 是否在拖拽minimap的视口\n\n    var dragging = false; // 缓存viewport当前对于画布的x\n\n    var left = 0; // 缓存viewport当前对于画布的y\n\n    var top = 0; // 缓存viewport当前宽度\n\n    var width = 0; // 缓存viewport当前高度\n\n    var height = 0;\n    var ratio = 0;\n    var zoom = 0;\n    containerDOM.addEventListener('mousedown', function (e) {\n      cfgs.refresh = false;\n\n      if (e.target !== viewport) {\n        return;\n      } // 如果视口已经最大了，不需要拖拽\n\n\n      var style = viewport.style;\n      left = parseInt(style.left, 10);\n      top = parseInt(style.top, 10);\n      width = parseInt(style.width, 10);\n      height = parseInt(style.height, 10);\n\n      if (width > size[0] || height > size[1]) {\n        return;\n      }\n\n      zoom = graph.getZoom();\n      ratio = _this.get('ratio');\n      dragging = true;\n      x = e.clientX;\n      y = e.clientY;\n    }, false);\n    containerDOM.addEventListener('mousemove', function (e) {\n      if (!dragging || isNil(e.clientX) || isNil(e.clientY)) {\n        return;\n      }\n\n      var dx = x - e.clientX;\n      var dy = y - e.clientY; // 若视口移动到最左边或最右边了,仅移动到边界\n\n      if (left - dx < 0 || left - dx + width >= size[0]) {\n        dx = 0;\n      } // 若视口移动到最上或最下边了，仅移动到边界\n\n\n      if (top - dy < 0 || top - dy + height >= size[1]) {\n        dy = 0;\n      }\n\n      left -= dx;\n      top -= dy; // 先移动视口，避免移动到边上以后出现视口闪烁\n\n      modifyCSS(viewport, {\n        left: left + \"px\",\n        top: top + \"px\"\n      }); // graph 移动需要偏移量 dx/dy * 缩放比例才会得到正确的移动距离\n\n      graph.translate(dx * zoom / ratio, dy * zoom / ratio);\n      x = e.clientX;\n      y = e.clientY;\n    }, false);\n    containerDOM.addEventListener('mouseleave', function () {\n      dragging = false;\n      cfgs.refresh = true;\n    }, false);\n    containerDOM.addEventListener('mouseup', function () {\n      dragging = false;\n      cfgs.refresh = true;\n    }, false);\n    this.set('viewport', viewport);\n    containerDOM.appendChild(viewport);\n  };\n  /**\n   * 更新 viewport 视图\n   */\n\n\n  MiniMap.prototype.updateViewport = function () {\n    if (this.destroyed) return;\n    var ratio = this.get('ratio');\n    var dx = this.get('dx');\n    var dy = this.get('dy');\n    var totaldx = this.get('totaldx');\n    var totaldy = this.get('totaldy');\n    var graph = this.get('graph');\n    var size = this.get('size');\n    var graphWidth = graph.get('width');\n    var graphHeight = graph.get('height');\n    var topLeft = graph.getPointByCanvas(0, 0);\n    var bottomRight = graph.getPointByCanvas(graphWidth, graphHeight);\n    var viewport = this.get('viewport');\n\n    if (!viewport) {\n      this.initViewport();\n    }\n\n    var zoom = graph.getZoom(); // viewport宽高,左上角点的计算\n\n    var width = (bottomRight.x - topLeft.x) * ratio;\n    var height = (bottomRight.y - topLeft.y) * ratio;\n    var left = topLeft.x * ratio + totaldx;\n    var top = topLeft.y * ratio + totaldy;\n    var right = left + width;\n    var bottom = top + height;\n\n    if (left < 0) {\n      width += left;\n      left = 0;\n    }\n\n    if (right > size[0]) {\n      width = width - (right - size[0]);\n    }\n\n    if (top < 0) {\n      height += top;\n      top = 0;\n    }\n\n    if (bottom > size[1]) {\n      height = height - (bottom - size[1]);\n    } // 缓存目前缩放比，在移动 minimap 视窗时就不用再计算大图的移动量\n\n\n    this.set('ratio', ratio);\n    var correctLeft = left + \"px\";\n    var correctTop = top + \"px\";\n    modifyCSS(viewport, {\n      left: correctLeft,\n      top: correctTop,\n      width: width + \"px\",\n      height: height + \"px\"\n    });\n  };\n  /**\n   * 将主图上的图形完全复制到小图\n   */\n\n\n  MiniMap.prototype.updateGraphShapes = function () {\n    var graph = this._cfgs.graph;\n    var canvas = this.get('canvas');\n    var graphGroup = graph.get('group');\n    if (graphGroup.destroyed) return;\n    var clonedGroup = graphGroup.clone();\n    clonedGroup.resetMatrix();\n    canvas.clear();\n    canvas.add(clonedGroup);\n  }; // 仅在 minimap 上绘制 keyShape\n  // FIXME 如果用户自定义绘制了其他内容，minimap上就无法画出\n\n\n  MiniMap.prototype.updateKeyShapes = function () {\n    var _this = this;\n\n    var graph = this._cfgs.graph;\n    each(graph.getEdges(), function (edge) {\n      _this.updateOneEdgeKeyShape(edge);\n    });\n    each(graph.getNodes(), function (node) {\n      _this.updateOneNodeKeyShape(node);\n    });\n    this.clearDestroyedShapes();\n  };\n  /**\n   * 增加/更新单个元素的 keyShape\n   * @param item INode 实例\n   */\n\n\n  MiniMap.prototype.updateOneNodeKeyShape = function (item) {\n    var canvas = this.get('canvas');\n    var group = canvas.get('children')[0] || canvas.addGroup();\n    var itemMap = this.get('itemMap') || {}; // 差量更新 minimap 上的一个节点，对应主图的 item\n\n    var mappedItem = itemMap[item.get('id')];\n    var bbox = item.getBBox(); // 计算了节点父组矩阵的 bbox\n\n    var cKeyShape = item.get('keyShape').clone();\n    var keyShapeStyle = cKeyShape.attr();\n    var attrs = {\n      x: bbox.centerX,\n      y: bbox.centerY\n    };\n\n    if (!mappedItem) {\n      mappedItem = cKeyShape;\n      group.add(mappedItem);\n    } else {\n      attrs = Object.assign(keyShapeStyle, attrs);\n    }\n\n    var shapeType = mappedItem.get('type');\n\n    if (shapeType === 'rect' || shapeType === 'image') {\n      attrs.x = bbox.minX;\n      attrs.y = bbox.minY;\n    }\n\n    mappedItem.attr(attrs);\n\n    if (!item.isVisible()) {\n      mappedItem.hide();\n    }\n\n    mappedItem.exist = true;\n    itemMap[item.get('id')] = mappedItem;\n    this.set('itemMap', itemMap);\n  };\n  /**\n   * Minimap 中展示自定义的rect，支持用户自定义样式和节点大小\n   */\n\n\n  MiniMap.prototype.updateDelegateShapes = function () {\n    var _this = this;\n\n    var graph = this._cfgs.graph; // 差量更新 minimap 上的节点和边\n\n    each(graph.getEdges(), function (edge) {\n      _this.updateOneEdgeKeyShape(edge);\n    });\n    each(graph.getNodes(), function (node) {\n      _this.updateOneNodeDelegateShape(node);\n    });\n    this.clearDestroyedShapes();\n  };\n\n  MiniMap.prototype.clearDestroyedShapes = function () {\n    var itemMap = this.get('itemMap') || {};\n    var keys = Object.keys(itemMap);\n    if (!keys || keys.length === 0) return;\n\n    for (var i = keys.length - 1; i >= 0; i--) {\n      var shape = itemMap[keys[i]];\n      var exist = shape.exist;\n      shape.exist = false;\n\n      if (!exist) {\n        shape.remove();\n        delete itemMap[keys[i]];\n      }\n    }\n  };\n  /**\n   * 设置只显示 edge 的 keyShape\n   * @param item IEdge 实例\n   */\n\n\n  MiniMap.prototype.updateOneEdgeKeyShape = function (item) {\n    var canvas = this.get('canvas');\n    var group = canvas.get('children')[0] || canvas.addGroup();\n    var itemMap = this.get('itemMap') || {}; // 差量更新 minimap 上的一个节点，对应主图的 item\n\n    var mappedItem = itemMap[item.get('id')];\n\n    if (mappedItem) {\n      var path = item.get('keyShape').attr('path');\n      mappedItem.attr('path', path);\n    } else {\n      mappedItem = item.get('keyShape').clone();\n      group.add(mappedItem);\n      mappedItem.toBack();\n    }\n\n    if (!item.isVisible()) {\n      mappedItem.hide();\n    }\n\n    mappedItem.exist = true;\n    itemMap[item.get('id')] = mappedItem;\n    this.set('itemMap', itemMap);\n  };\n  /**\n   * Minimap 中展示自定义的 rect，支持用户自定义样式和节点大小\n   * 增加/更新单个元素\n   * @param item INode 实例\n   */\n\n\n  MiniMap.prototype.updateOneNodeDelegateShape = function (item) {\n    var canvas = this.get('canvas');\n    var group = canvas.get('children')[0] || canvas.addGroup();\n    var delegateStyle = this.get('delegateStyle');\n    var itemMap = this.get('itemMap') || {}; // 差量更新 minimap 上的一个节点，对应主图的 item\n\n    var mappedItem = itemMap[item.get('id')];\n    var bbox = item.getBBox(); // 计算了节点父组矩阵的 bbox\n\n    if (mappedItem) {\n      var attrs = {\n        x: bbox.minX,\n        y: bbox.minY,\n        width: bbox.width,\n        height: bbox.height\n      };\n      mappedItem.attr(attrs);\n    } else {\n      mappedItem = group.addShape('rect', {\n        attrs: __assign({\n          x: bbox.minX,\n          y: bbox.minY,\n          width: bbox.width,\n          height: bbox.height\n        }, delegateStyle),\n        name: 'minimap-node-shape'\n      });\n    }\n\n    if (!item.isVisible()) {\n      mappedItem.hide();\n    }\n\n    mappedItem.exist = true;\n    itemMap[item.get('id')] = mappedItem;\n    this.set('itemMap', itemMap);\n  };\n\n  MiniMap.prototype.init = function () {\n    this.initContainer();\n    this.get('graph').on('afterupdateitem', this.handleUpdateCanvas);\n    this.get('graph').on('afteritemstatechange', this.handleUpdateCanvas);\n    this.get('graph').on('afteradditem', this.handleUpdateCanvas);\n    this.get('graph').on('afterremoveitem', this.handleUpdateCanvas);\n    this.get('graph').on('afterrender', this.handleUpdateCanvas);\n    this.get('graph').on('afterlayout', this.handleUpdateCanvas);\n  };\n  /**\n   * 初始化 Minimap 的容器\n   */\n\n\n  MiniMap.prototype.initContainer = function () {\n    var self = this;\n    var graph = self.get('graph');\n    var size = self.get('size');\n    var className = self.get('className');\n    var parentNode = self.get('container');\n    var container = createDOM(\"<div class='\" + className + \"' style='width: \" + size[0] + \"px; height: \" + size[1] + \"px; overflow: hidden'></div>\");\n\n    if (isString(parentNode)) {\n      parentNode = document.getElementById(parentNode);\n    }\n\n    if (parentNode) {\n      parentNode.appendChild(container);\n    } else {\n      graph.get('container').appendChild(container);\n    }\n\n    self.set('container', container);\n    var containerDOM = createDOM('<div class=\"g6-minimap-container\" style=\"position: relative;\"></div>');\n    container.appendChild(containerDOM);\n    var canvas;\n    var renderer = graph.get('renderer');\n\n    if (renderer === SVG) {\n      canvas = new GSVGCanvas({\n        container: containerDOM,\n        width: size[0],\n        height: size[1]\n      });\n    } else {\n      canvas = new GCanvas({\n        container: containerDOM,\n        width: size[0],\n        height: size[1]\n      });\n    }\n\n    self.set('canvas', canvas);\n    self.updateCanvas();\n  };\n\n  MiniMap.prototype.updateCanvas = function () {\n    // 如果是在动画，则不刷新视图\n    var isRefresh = this.get('refresh');\n\n    if (!isRefresh) {\n      return;\n    }\n\n    var graph = this.get('graph');\n\n    if (graph.get('destroyed')) {\n      return;\n    } // 如果是视口变换，也不刷新视图，但是需要重置视口大小和位置\n\n\n    if (this.get('viewportChange')) {\n      this.set('viewportChange', false);\n      this.updateViewport();\n    }\n\n    var size = this.get('size');\n    var canvas = this.get('canvas');\n    var type = this.get('type');\n    var padding = this.get('padding');\n\n    if (canvas.destroyed) {\n      return;\n    }\n\n    switch (type) {\n      case DEFAULT_MODE:\n        this.updateGraphShapes();\n        break;\n\n      case KEYSHAPE_MODE:\n        this.updateKeyShapes();\n        break;\n\n      case DELEGATE_MODE:\n        // 得到的节点直接带有 x 和 y，每个节点不存在父 group，即每个节点位置不由父 group 控制\n        this.updateDelegateShapes();\n        break;\n\n      default:\n        break;\n    }\n\n    var group = canvas.get('children')[0];\n    if (!group) return;\n    group.resetMatrix(); // 该 bbox 是准确的，不计算 matrix 的包围盒\n\n    var bbox = group.getCanvasBBox();\n    var graphBBox = graph.get('canvas').getBBox();\n    var width = graphBBox.width;\n    var height = graphBBox.height;\n\n    if (Number.isFinite(bbox.width)) {\n      // 刷新后bbox可能会变，需要重置画布矩阵以缩放到合适的大小\n      width = max(bbox.width, width);\n      height = max(bbox.height, height);\n    }\n\n    width += 2 * padding;\n    height += 2 * padding;\n    var ratio = Math.min(size[0] / width, size[1] / height);\n    var matrix = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n    var minX = 0;\n    var minY = 0; // 平移到左上角\n\n    if (Number.isFinite(bbox.minX)) {\n      minX = -bbox.minX;\n    }\n\n    if (Number.isFinite(bbox.minY)) {\n      minY = -bbox.minY;\n    } // 缩放到适合视口后, 平移到画布中心\n\n\n    var dx = (size[0] - (width - 2 * padding) * ratio) / 2;\n    var dy = (size[1] - (height - 2 * padding) * ratio) / 2;\n    matrix = transform(matrix, [['t', minX, minY], ['s', ratio, ratio], ['t', dx, dy]]);\n    group.setMatrix(matrix); // 更新minimap视口\n\n    this.set('ratio', ratio);\n    this.set('totaldx', dx + minX * ratio);\n    this.set('totaldy', dy + minY * ratio);\n    this.set('dx', dx);\n    this.set('dy', dy);\n    this.updateViewport();\n  };\n  /**\n   * 获取minimap的画布\n   * @return {GCanvas} G的canvas实例\n   */\n\n\n  MiniMap.prototype.getCanvas = function () {\n    return this.get('canvas');\n  };\n  /**\n   * 获取minimap的窗口\n   * @return {HTMLElement} 窗口的dom实例\n   */\n\n\n  MiniMap.prototype.getViewport = function () {\n    return this.get('viewport');\n  };\n  /**\n   * 获取minimap的容器dom\n   * @return {HTMLElement} dom\n   */\n\n\n  MiniMap.prototype.getContainer = function () {\n    return this.get('container');\n  };\n\n  MiniMap.prototype.destroy = function () {\n    this.get('canvas').destroy();\n    var container = this.get('container');\n    container.parentNode.removeChild(container);\n  };\n\n  return MiniMap;\n}(Base);\n\nexport default MiniMap;"]},"metadata":{},"sourceType":"module"}