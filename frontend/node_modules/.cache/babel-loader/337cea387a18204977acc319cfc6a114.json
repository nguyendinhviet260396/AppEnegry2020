{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { deepMix, every } from '@antv/util';\nimport * as EventParser from './event';\nimport ViewLayer from '../../base/view-layer';\nimport { getGeom } from '../../geoms/factory';\nimport { getPieLabel } from './component/label';\nimport SpiderLabel from './component/label/spider-label';\nimport { registerPlotType } from '../../base/global';\nimport './theme';\nexport var percentageField = '$$percentage$$';\nvar G2_GEOM_MAP = {\n  pie: 'interval'\n};\nvar PLOT_GEOM_MAP = {\n  pie: 'column'\n}; // @ts-ignore\n\nvar PieLayer =\n/** @class */\nfunction (_super) {\n  __extends(PieLayer, _super);\n\n  function PieLayer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'pie';\n    return _this;\n  }\n\n  PieLayer.getDefaultOptions = function () {\n    return deepMix({}, _super.getDefaultOptions.call(this), {\n      width: 400,\n      height: 400,\n      title: {\n        visible: false\n      },\n      description: {\n        visible: false\n      },\n      forceFit: true,\n      padding: 'auto',\n      radius: 0.8,\n      label: {\n        visible: true,\n        type: 'inner',\n        autoRotate: false,\n        adjustPosition: true,\n        allowOverlap: false,\n        line: {\n          visible: true,\n          smooth: true\n        }\n      },\n      legend: {\n        visible: true,\n        position: 'right-center'\n      },\n      tooltip: {\n        visible: true,\n        shared: false,\n        showCrosshairs: false,\n        showMarkers: false\n      },\n      pieStyle: {\n        stroke: 'white',\n        lineWidth: 1\n      }\n    });\n  };\n\n  PieLayer.prototype.afterInit = function () {\n    _super.prototype.afterInit.call(this);\n\n    var _a = this.options,\n        angleField = _a.angleField,\n        colorField = _a.colorField,\n        data = _a.data;\n    var allZero = every(data, function (d) {\n      return d[angleField] === 0;\n    });\n\n    if (allZero) {\n      var pieGeom = this.view.geometries[0];\n      pieGeom.tooltip(colorField + \"*\" + angleField);\n    }\n  };\n\n  PieLayer.prototype.afterRender = function () {\n    _super.prototype.afterRender.call(this);\n\n    var options = this.options;\n    /** 蜘蛛布局label */\n\n    if (options.label && options.label.visible) {\n      // 清除，避免二次渲染\n      if (this.labelComponent) {\n        this.labelComponent.clear();\n      }\n\n      var labelConfig = options.label;\n\n      if (labelConfig.type === 'spider') {\n        var data = options.data,\n            colorField = options.colorField,\n            angleField_1 = options.angleField;\n        var allZero = every(data, function (d) {\n          return d[angleField_1] === 0;\n        });\n        var valueField = allZero ? percentageField : angleField_1;\n        this.labelComponent = new SpiderLabel(__assign({\n          view: this.view,\n          fields: colorField ? [valueField, colorField] : [valueField],\n          angleField: angleField_1,\n          allZero: allZero\n        }, this.options.label));\n        this.labelComponent.render();\n      } else {\n        var LabelCtor = getPieLabel(labelConfig.type);\n        this.labelComponent = new LabelCtor(this, options.label);\n        this.labelComponent.render();\n      }\n    }\n  };\n\n  PieLayer.prototype.getAngleScale = function () {\n    var angleField = this.options.angleField;\n\n    if (angleField) {\n      return this.view.getScaleByField(angleField);\n    }\n  };\n\n  PieLayer.prototype.geometryParser = function (dim, type) {\n    if (dim === 'g2') {\n      return G2_GEOM_MAP[type];\n    }\n\n    return PLOT_GEOM_MAP[type];\n  };\n\n  PieLayer.prototype.scale = function () {\n    var props = this.options;\n\n    _super.prototype.scale.call(this);\n\n    var scales = {};\n    scales[props.angleField] = {};\n    scales[props.colorField] = {\n      type: 'cat'\n    };\n    scales = deepMix({}, this.config.scales, scales);\n    this.setConfig('scales', scales);\n  };\n\n  PieLayer.prototype.processData = function (data) {\n    var key = this.options.angleField;\n    var allZero = every(data, function (d) {\n      return d[key] === 0;\n    });\n\n    if (allZero) {\n      return data.map(function (item) {\n        var _a;\n\n        return __assign(__assign({}, item), (_a = {}, _a[key] = typeof item[key] === 'string' ? Number.parseFloat(item[key]) : item[key], _a[percentageField] = 1 / data.length, _a));\n      });\n    }\n\n    return data.map(function (item) {\n      var _a;\n\n      var value = item[key];\n      return __assign(__assign({}, item), (_a = {}, _a[key] = value && !isNaN(value) ? +value : value, _a));\n    });\n  };\n\n  PieLayer.prototype.axis = function () {\n    return;\n  };\n\n  PieLayer.prototype.coord = function () {\n    var props = this.options;\n    var coordConfig = {\n      type: 'theta',\n      cfg: {\n        radius: props.radius,\n        // @ts-ignore 业务定制,不开放配置\n        innerRadius: props.innerRadius || 0\n      }\n    };\n    this.setConfig('coordinate', coordConfig);\n  };\n\n  PieLayer.prototype.addGeometry = function () {\n    var props = this.options;\n    var data = props.data,\n        angleField = props.angleField;\n    var pie;\n    var allZero = every(data, function (d) {\n      return d[angleField] === 0;\n    });\n\n    if (allZero) {\n      pie = getGeom('interval', 'main', {\n        plot: this,\n        positionFields: [1, percentageField]\n      });\n    } else {\n      pie = getGeom('interval', 'main', {\n        plot: this,\n        positionFields: [1, props.angleField]\n      });\n    }\n\n    pie.adjust = [{\n      type: 'stack'\n    }];\n    this.pie = pie;\n\n    if (props.label) {\n      this.label();\n    }\n\n    if (props.tooltip && (props.tooltip.fields || props.tooltip.formatter)) {\n      this.geometryTooltip();\n    }\n\n    this.setConfig('geometry', pie);\n  };\n\n  PieLayer.prototype.geometryTooltip = function () {\n    this.pie.tooltip = {};\n    var tooltipOptions = this.options.tooltip;\n\n    if (tooltipOptions.fields) {\n      this.pie.tooltip.fields = tooltipOptions.fields;\n    } else {\n      this.pie.tooltip.fields = [this.options.angleField, this.options.colorField];\n    }\n\n    if (tooltipOptions.formatter) {\n      this.pie.tooltip.callback = tooltipOptions.formatter;\n\n      if (!tooltipOptions.fields) {\n        this.pie.tooltip.fields = [this.options.angleField, this.options.colorField];\n      }\n    }\n  };\n\n  PieLayer.prototype.animation = function () {\n    _super.prototype.animation.call(this);\n\n    var props = this.options;\n\n    if (props.animation === false) {\n      /** 关闭动画 */\n      this.pie.animate = false;\n    }\n  };\n\n  PieLayer.prototype.annotation = function () {\n    return;\n  };\n\n  PieLayer.prototype.parseEvents = function (eventParser) {\n    if (eventParser) {\n      _super.prototype.parseEvents.call(this, eventParser);\n    } else {\n      _super.prototype.parseEvents.call(this, EventParser);\n    }\n  };\n\n  PieLayer.prototype.label = function () {\n    // 不使用 g2 内置label\n    this.pie.label = false;\n  };\n\n  return PieLayer;\n}(ViewLayer);\n\nexport default PieLayer;\nregisterPlotType('pie', PieLayer);","map":{"version":3,"sources":["../../../src/plots/pie/layer.ts"],"names":[],"mappings":"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","sourcesContent":["import { deepMix, every } from '@antv/util';\nimport * as EventParser from './event';\nimport ViewLayer, { ViewConfig } from '../../base/view-layer';\nimport { DataItem, Label, GraphicStyle } from '../../interface/config';\nimport { getGeom } from '../../geoms/factory';\nimport { LayerConfig } from '../../base/layer';\nimport { getPieLabel, PieLabelConfig } from './component/label';\nimport SpiderLabel from './component/label/spider-label';\nimport { registerPlotType } from '../../base/global';\nimport PieBaseLabel from './component/label/base-label';\nimport './theme';\n\nexport const percentageField = '$$percentage$$';\n\nexport interface PieViewConfig extends ViewConfig {\n  angleField: string;\n  colorField?: string;\n  radius?: number;\n  pieStyle?: GraphicStyle | ((...args: any[]) => GraphicStyle);\n  label?: PieLabelConfig;\n}\n\nexport interface PieLayerConfig extends PieViewConfig, LayerConfig {}\n\nconst G2_GEOM_MAP = {\n  pie: 'interval',\n};\n\nconst PLOT_GEOM_MAP = {\n  pie: 'column',\n};\n\n// @ts-ignore\nexport default class PieLayer<T extends PieLayerConfig = PieLayerConfig> extends ViewLayer<T> {\n  public static getDefaultOptions(): any {\n    return deepMix({}, super.getDefaultOptions(), {\n      width: 400,\n      height: 400,\n      title: {\n        visible: false,\n      },\n      description: {\n        visible: false,\n      },\n      forceFit: true,\n      padding: 'auto',\n      radius: 0.8,\n      label: {\n        visible: true,\n        type: 'inner',\n        autoRotate: false,\n        adjustPosition: true,\n        allowOverlap: false,\n        line: {\n          visible: true,\n          smooth: true,\n        },\n      },\n      legend: {\n        visible: true,\n        position: 'right-center',\n      },\n      tooltip: {\n        visible: true,\n        shared: false,\n        showCrosshairs: false,\n        showMarkers: false,\n      },\n      pieStyle: {\n        stroke: 'white',\n        lineWidth: 1,\n      },\n    });\n  }\n\n  public pie: any;\n  public type: string = 'pie';\n  public labelComponent: SpiderLabel | PieBaseLabel;\n\n  public afterInit() {\n    super.afterInit();\n    const { angleField, colorField, data } = this.options;\n    const allZero = every(data, (d) => d[angleField] === 0);\n    if (allZero) {\n      const pieGeom = this.view.geometries[0];\n      pieGeom.tooltip(`${colorField}*${angleField}`);\n    }\n  }\n\n  public afterRender() {\n    super.afterRender();\n    const options = this.options;\n    /** 蜘蛛布局label */\n    if (options.label && options.label.visible) {\n      // 清除，避免二次渲染\n      if (this.labelComponent) {\n        this.labelComponent.clear();\n      }\n      const labelConfig = options.label as Label;\n      if (labelConfig.type === 'spider') {\n        const { data, colorField, angleField } = options;\n        const allZero = every(data, (d) => d[angleField] === 0);\n        const valueField = allZero ? percentageField : angleField;\n        this.labelComponent = new SpiderLabel({\n          view: this.view,\n          fields: colorField ? [valueField, colorField] : [valueField],\n          angleField,\n          allZero,\n          ...this.options.label,\n        });\n        this.labelComponent.render();\n      } else {\n        const LabelCtor = getPieLabel(labelConfig.type);\n        this.labelComponent = new LabelCtor(this, options.label);\n        this.labelComponent.render();\n      }\n    }\n  }\n\n  public getAngleScale() {\n    const { angleField } = this.options;\n    if (angleField) {\n      return this.view.getScaleByField(angleField);\n    }\n  }\n\n  protected geometryParser(dim, type) {\n    if (dim === 'g2') {\n      return G2_GEOM_MAP[type];\n    }\n    return PLOT_GEOM_MAP[type];\n  }\n\n  protected scale() {\n    const props = this.options;\n    super.scale();\n    let scales = {};\n    scales[props.angleField] = {};\n    scales[props.colorField] = { type: 'cat' };\n    scales = deepMix({}, this.config.scales, scales);\n    this.setConfig('scales', scales);\n  }\n\n  protected processData(data?: DataItem[]): DataItem[] | undefined {\n    const key = this.options.angleField;\n    const allZero = every(data, (d) => d[key] === 0);\n    if (allZero) {\n      return data.map((item) => ({\n        ...item,\n        [key]: typeof item[key] === 'string' ? Number.parseFloat(item[key] as 'string') : item[key],\n        [percentageField]: 1 / data.length,\n      }));\n    }\n    return data.map((item) => {\n      const value = item[key];\n\n      return {\n        ...item,\n        // @ts-ignore 如果 value 是数字或者数字字符串： 0, '23', '3.33'，转换为数字\n        // 如果直接 Number.parseFloat(item[key] as 'string') 会出现 NaN，导致浏览器崩溃\n        [key]: value && !isNaN(value) ? +value : value,\n      };\n    });\n  }\n\n  protected axis() {\n    return;\n  }\n\n  protected coord() {\n    const props = this.options;\n    const coordConfig: any = {\n      type: 'theta',\n      cfg: {\n        radius: props.radius,\n        // @ts-ignore 业务定制,不开放配置\n        innerRadius: props.innerRadius || 0,\n      },\n    };\n    this.setConfig('coordinate', coordConfig);\n  }\n\n  protected addGeometry() {\n    const props = this.options;\n    const { data, angleField } = props;\n    let pie;\n    const allZero = every(data, (d) => d[angleField] === 0);\n    if (allZero) {\n      pie = getGeom('interval', 'main', {\n        plot: this,\n        positionFields: [1, percentageField],\n      });\n    } else {\n      pie = getGeom('interval', 'main', {\n        plot: this,\n        positionFields: [1, props.angleField],\n      });\n    }\n    pie.adjust = [{ type: 'stack' }];\n    this.pie = pie;\n    if (props.label) {\n      this.label();\n    }\n    if (props.tooltip && (props.tooltip.fields || props.tooltip.formatter)) {\n      this.geometryTooltip();\n    }\n    this.setConfig('geometry', pie);\n  }\n\n  protected geometryTooltip() {\n    this.pie.tooltip = {};\n    const tooltipOptions: any = this.options.tooltip;\n    if (tooltipOptions.fields) {\n      this.pie.tooltip.fields = tooltipOptions.fields;\n    } else {\n      this.pie.tooltip.fields = [this.options.angleField, this.options.colorField];\n    }\n    if (tooltipOptions.formatter) {\n      this.pie.tooltip.callback = tooltipOptions.formatter;\n      if (!tooltipOptions.fields) {\n        this.pie.tooltip.fields = [this.options.angleField, this.options.colorField];\n      }\n    }\n  }\n\n  protected animation() {\n    super.animation();\n    const props = this.options;\n    if (props.animation === false) {\n      /** 关闭动画 */\n      this.pie.animate = false;\n    }\n  }\n\n  protected annotation() {\n    return;\n  }\n\n  protected parseEvents(eventParser?) {\n    if (eventParser) {\n      super.parseEvents(eventParser);\n    } else {\n      super.parseEvents(EventParser);\n    }\n  }\n\n  private label() {\n    // 不使用 g2 内置label\n    this.pie.label = false;\n  }\n}\n\nregisterPlotType('pie', PieLayer);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}