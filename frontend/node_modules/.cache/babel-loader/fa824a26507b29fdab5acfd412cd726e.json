{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { Legend } from '@antv/component';\nimport { registerPlotType } from '../../base/global';\nimport ComboViewLayer from '../base';\nimport LineLayer from '../../plots/line/layer';\nimport { clone, deepMix, each, findIndex } from '@antv/util';\nvar defaultLineConfig = {\n  lineSize: 2,\n  connectNull: true,\n  point: {\n    visible: false,\n    size: 3,\n    shape: 'circle',\n    style: {\n      stroke: '#fff'\n    }\n  },\n  label: {\n    visible: false\n  }\n};\nvar defaultYAxisConfig = {\n  visible: true,\n  colorMapping: true,\n  grid: {\n    visible: true\n  },\n  line: {\n    visible: false\n  },\n  tickLine: {\n    visible: false\n  },\n  label: {\n    visible: true,\n    autoHide: true,\n    autoRotate: false\n  },\n  title: {\n    autoRotate: true,\n    visible: false,\n    offset: 12\n  }\n};\n\nvar DualLineLayer =\n/** @class */\nfunction (_super) {\n  __extends(DualLineLayer, _super);\n\n  function DualLineLayer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'dualLine';\n    return _this;\n  }\n\n  DualLineLayer.getDefaultOptions = function () {\n    return deepMix({}, _super.getDefaultOptions.call(this), {\n      legend: {\n        visible: true\n      },\n      yAxis: {\n        leftConfig: defaultYAxisConfig,\n        rightConfig: defaultYAxisConfig\n      },\n      // 自古红蓝出cp....\n      lineConfigs: [deepMix({}, defaultLineConfig, {\n        color: '#5B8FF9'\n      }), deepMix({}, defaultLineConfig, {\n        color: '#e76c5e'\n      })]\n    });\n  };\n\n  DualLineLayer.prototype.init = function () {\n    var _this = this;\n\n    _super.prototype.init.call(this);\n\n    if (!this.checkData()) {\n      return;\n    }\n\n    var _a = this.options,\n        data = _a.data,\n        meta = _a.meta,\n        xField = _a.xField,\n        yField = _a.yField,\n        xAxis = _a.xAxis,\n        tooltip = _a.tooltip,\n        lineConfigs = _a.lineConfigs,\n        legend = _a.legend,\n        events = _a.events;\n    this.colors = [lineConfigs[0].color, lineConfigs[1].color];\n    var yAxisGlobalConfig = this.getYAxisGlobalConfig(); //draw first line\n\n    var leftLine = this.createLayer(LineLayer, data[0], __assign({\n      meta: meta,\n      xField: xField,\n      yField: yField[0],\n      xAxis: {\n        visible: false\n      },\n      yAxis: deepMix({}, yAxisGlobalConfig, this.yAxis(0), {\n        grid: {\n          visible: false\n        },\n        nice: true\n      }),\n      tooltip: {\n        visible: false\n      },\n      events: events\n    }, lineConfigs[0]));\n    leftLine.render(); //draw second line\n\n    var metaInfo = {};\n    metaInfo[yField[1]] = {\n      ticks: this.getTicks()\n    };\n    var rightLine = this.createLayer(LineLayer, data[1], __assign({\n      xField: xField,\n      yField: yField[1],\n      meta: deepMix({}, meta, metaInfo),\n      serieField: yField[1],\n      xAxis: xAxis,\n      yAxis: deepMix({}, yAxisGlobalConfig, this.yAxis(1), {\n        position: 'right',\n        nice: false\n      }),\n      tooltip: deepMix({}, tooltip, {\n        showMarkers: false,\n        custom: {\n          onChange: function (containerDom, ev) {\n            _this.tooltip(containerDom, ev);\n          }\n        }\n      }),\n      events: events\n    }, lineConfigs[1]));\n    rightLine.render();\n\n    if (legend.visible) {\n      this.customLegend();\n    }\n\n    this.adjustLayout();\n  };\n\n  DualLineLayer.prototype.tooltip = function (dom, ev) {\n    var unCheckedValue = this.getUnCheckedValue(); // 如果legend全部是unchecked的状态，tooltip不显示\n\n    if (unCheckedValue.length === this.colors.length) {\n      dom.style.display = 'none';\n      return;\n    } else {\n      dom.style.display = 'block';\n    }\n\n    var _a = this.options,\n        yField = _a.yField,\n        legend = _a.legend;\n    var originItem = clone(ev.items[0]);\n    var dataItemsA = this.getDataByXField(ev.title, 0)[0];\n\n    if (dataItemsA) {\n      if (findIndex(ev.items, function (item) {\n        return item.name === yField[0];\n      }) < 0) {\n        ev.items.push(__assign(__assign({}, originItem), {\n          mappingData: deepMix({}, originItem.mappingData, {\n            _origin: dataItemsA\n          }),\n          data: dataItemsA,\n          name: yField[0],\n          value: dataItemsA[yField[0]],\n          color: this.colors[0]\n        }));\n      }\n    }\n\n    if (legend.visible) {\n      each(this.legends, function (legend, index) {\n        var item = legend.get('items')[0];\n\n        if (item.unchecked) {\n          var spliceIndex = index === 0 ? 1 : 0;\n          ev.items.splice(spliceIndex, 1);\n        }\n      });\n    }\n  };\n\n  DualLineLayer.prototype.customLegend = function () {\n    var _this = this;\n\n    var _a = this.options,\n        yField = _a.yField,\n        legend = _a.legend;\n    var colors = this.colors;\n    var container = this.container.addGroup();\n    var legendCfg = legend;\n    each(this.geomLayers, function (line, index) {\n      var markerCfg = deepMix({}, {\n        symbol: 'circle',\n        style: {\n          r: 4,\n          fill: colors[index]\n        }\n      }, legendCfg.marker);\n      var items = [{\n        name: yField[index],\n        unchecked: false,\n        marker: markerCfg\n      }];\n      var legend = new Legend.Category({\n        id: _this.type,\n        container: container,\n        x: 0,\n        y: 0,\n        items: items,\n        updateAutoRender: true,\n        itemBackground: null,\n        itemName: legendCfg.text\n      });\n      legend.init();\n      legend.render();\n\n      _this.legends.push(legend);\n    }); // 使用legend做图层筛选\n\n    each(this.geomLayers, function (line, index) {\n      _this.legendFilter(index);\n    });\n  };\n\n  return DualLineLayer;\n}(ComboViewLayer);\n\nexport default DualLineLayer;\nregisterPlotType('dualLine', DualLineLayer);","map":{"version":3,"sources":["../../../src/combo/dual-line/layer.ts"],"names":[],"mappings":";AAAA,SAAS,MAAT,QAAuB,iBAAvB;AACA,SAAS,gBAAT,QAAiC,mBAAjC;AACA,OAAO,cAAP,MAA2B,SAA3B;AAEA,OAAO,SAAP,MAAsB,wBAAtB;AACA,SAAS,KAAT,EAAgB,OAAhB,EAAyB,IAAzB,EAA+B,SAA/B,QAAgD,YAAhD;AAUA,IAAM,iBAAiB,GAAG;AACxB,EAAA,QAAQ,EAAE,CADc;AAExB,EAAA,WAAW,EAAE,IAFW;AAGxB,EAAA,KAAK,EAAE;AACL,IAAA,OAAO,EAAE,KADJ;AAEL,IAAA,IAAI,EAAE,CAFD;AAGL,IAAA,KAAK,EAAE,QAHF;AAIL,IAAA,KAAK,EAAE;AACL,MAAA,MAAM,EAAE;AADH;AAJF,GAHiB;AAWxB,EAAA,KAAK,EAAE;AACL,IAAA,OAAO,EAAE;AADJ;AAXiB,CAA1B;AAgBA,IAAM,kBAAkB,GAAG;AACzB,EAAA,OAAO,EAAE,IADgB;AAEzB,EAAA,YAAY,EAAE,IAFW;AAGzB,EAAA,IAAI,EAAE;AACJ,IAAA,OAAO,EAAE;AADL,GAHmB;AAMzB,EAAA,IAAI,EAAE;AACJ,IAAA,OAAO,EAAE;AADL,GANmB;AASzB,EAAA,QAAQ,EAAE;AACR,IAAA,OAAO,EAAE;AADD,GATe;AAYzB,EAAA,KAAK,EAAE;AACL,IAAA,OAAO,EAAE,IADJ;AAEL,IAAA,QAAQ,EAAE,IAFL;AAGL,IAAA,UAAU,EAAE;AAHP,GAZkB;AAiBzB,EAAA,KAAK,EAAE;AACL,IAAA,UAAU,EAAE,IADP;AAEL,IAAA,OAAO,EAAE,KAFJ;AAGL,IAAA,MAAM,EAAE;AAHH;AAjBkB,CAA3B;;AA0BA,IAAA,aAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAgG,EAAA,SAAA,CAAA,aAAA,EAAA,MAAA,CAAA;;AAAhG,WAAA,aAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;;AAkBS,IAAA,KAAA,CAAA,IAAA,GAAe,UAAf;;AA4IR;;AA7Je,EAAA,aAAA,CAAA,iBAAA,GAAd,YAAA;AACE,WAAO,OAAO,CAAC,EAAD,EAAK,MAAA,CAAM,iBAAN,CAAuB,IAAvB,CAAuB,IAAvB,CAAL,EAAgC;AAC5C,MAAA,MAAM,EAAE;AACN,QAAA,OAAO,EAAE;AADH,OADoC;AAI5C,MAAA,KAAK,EAAE;AACL,QAAA,UAAU,EAAE,kBADP;AAEL,QAAA,WAAW,EAAE;AAFR,OAJqC;AAQ5C;AACA,MAAA,WAAW,EAAE,CACX,OAAO,CAAC,EAAD,EAAK,iBAAL,EAAwB;AAAE,QAAA,KAAK,EAAE;AAAT,OAAxB,CADI,EAEX,OAAO,CAAC,EAAD,EAAK,iBAAL,EAAwB;AAAE,QAAA,KAAK,EAAE;AAAT,OAAxB,CAFI;AAT+B,KAAhC,CAAd;AAcD,GAfa;;AAmBP,EAAA,aAAA,CAAA,SAAA,CAAA,IAAA,GAAP,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACE,IAAA,MAAA,CAAA,SAAA,CAAM,IAAN,CAAU,IAAV,CAAU,IAAV;;AACA,QAAI,CAAC,KAAK,SAAL,EAAL,EAAuB;AACrB;AACD;;AACK,QAAA,EAAA,GAA8E,KAAK,OAAnF;AAAA,QAAE,IAAI,GAAA,EAAA,CAAA,IAAN;AAAA,QAAQ,IAAI,GAAA,EAAA,CAAA,IAAZ;AAAA,QAAc,MAAM,GAAA,EAAA,CAAA,MAApB;AAAA,QAAsB,MAAM,GAAA,EAAA,CAAA,MAA5B;AAAA,QAA8B,KAAK,GAAA,EAAA,CAAA,KAAnC;AAAA,QAAqC,OAAO,GAAA,EAAA,CAAA,OAA5C;AAAA,QAA8C,WAAW,GAAA,EAAA,CAAA,WAAzD;AAAA,QAA2D,MAAM,GAAA,EAAA,CAAA,MAAjE;AAAA,QAAmE,MAAM,GAAA,EAAA,CAAA,MAAzE;AACN,SAAK,MAAL,GAAc,CAAC,WAAW,CAAC,CAAD,CAAX,CAAe,KAAhB,EAAiC,WAAW,CAAC,CAAD,CAAX,CAAe,KAAhD,CAAd;AACA,QAAM,iBAAiB,GAAG,KAAK,oBAAL,EAA1B,CAPF,CAQE;;AACA,QAAM,QAAQ,GAAG,KAAK,WAAL,CAAiB,SAAjB,EAA4B,IAAI,CAAC,CAAD,CAAhC,EAAmC,QAAA,CAAA;AAClD,MAAA,IAAI,EAAA,IAD8C;AAElD,MAAA,MAAM,EAAA,MAF4C;AAGlD,MAAA,MAAM,EAAE,MAAM,CAAC,CAAD,CAHoC;AAIlD,MAAA,KAAK,EAAE;AACL,QAAA,OAAO,EAAE;AADJ,OAJ2C;AAOlD,MAAA,KAAK,EAAE,OAAO,CAAC,EAAD,EAAK,iBAAL,EAAwB,KAAK,KAAL,CAAW,CAAX,CAAxB,EAAuC;AACnD,QAAA,IAAI,EAAE;AACJ,UAAA,OAAO,EAAE;AADL,SAD6C;AAInD,QAAA,IAAI,EAAE;AAJ6C,OAAvC,CAPoC;AAalD,MAAA,OAAO,EAAE;AACP,QAAA,OAAO,EAAE;AADF,OAbyC;AAgBlD,MAAA,MAAM,EAAA;AAhB4C,KAAA,EAiB/C,WAAW,CAAC,CAAD,CAjBoC,CAAnC,CAAjB;AAmBA,IAAA,QAAQ,CAAC,MAAT,GA5BF,CA6BE;;AACA,QAAM,QAAQ,GAAG,EAAjB;AACA,IAAA,QAAQ,CAAC,MAAM,CAAC,CAAD,CAAP,CAAR,GAAsB;AAAE,MAAA,KAAK,EAAE,KAAK,QAAL;AAAT,KAAtB;AACA,QAAM,SAAS,GAAG,KAAK,WAAL,CAAiB,SAAjB,EAA4B,IAAI,CAAC,CAAD,CAAhC,EAAmC,QAAA,CAAA;AACnD,MAAA,MAAM,EAAA,MAD6C;AAEnD,MAAA,MAAM,EAAE,MAAM,CAAC,CAAD,CAFqC;AAGnD,MAAA,IAAI,EAAE,OAAO,CAAC,EAAD,EAAK,IAAL,EAAW,QAAX,CAHsC;AAInD,MAAA,UAAU,EAAE,MAAM,CAAC,CAAD,CAJiC;AAKnD,MAAA,KAAK,EAAA,KAL8C;AAMnD,MAAA,KAAK,EAAE,OAAO,CAAC,EAAD,EAAK,iBAAL,EAAwB,KAAK,KAAL,CAAW,CAAX,CAAxB,EAAuC;AACnD,QAAA,QAAQ,EAAE,OADyC;AAEnD,QAAA,IAAI,EAAE;AAF6C,OAAvC,CANqC;AAUnD,MAAA,OAAO,EAAE,OAAO,CAAC,EAAD,EAAK,OAAL,EAAc;AAC5B,QAAA,WAAW,EAAE,KADe;AAE5B,QAAA,MAAM,EAAE;AACN,UAAA,QAAQ,EAAE,UAAC,YAAD,EAAe,EAAf,EAAiB;AACzB,YAAA,KAAI,CAAC,OAAL,CAAa,YAAb,EAA2B,EAA3B;AACD;AAHK;AAFoB,OAAd,CAVmC;AAkBnD,MAAA,MAAM,EAAA;AAlB6C,KAAA,EAmBhD,WAAW,CAAC,CAAD,CAnBqC,CAAnC,CAAlB;AAqBA,IAAA,SAAS,CAAC,MAAV;;AACA,QAAI,MAAM,CAAC,OAAX,EAAoB;AAClB,WAAK,YAAL;AACD;;AACD,SAAK,YAAL;AACD,GA1DM;;AA4DG,EAAA,aAAA,CAAA,SAAA,CAAA,OAAA,GAAV,UAAkB,GAAlB,EAAuB,EAAvB,EAAyB;AACvB,QAAM,cAAc,GAAG,KAAK,iBAAL,EAAvB,CADuB,CAEvB;;AACA,QAAI,cAAc,CAAC,MAAf,KAA0B,KAAK,MAAL,CAAY,MAA1C,EAAkD;AAChD,MAAA,GAAG,CAAC,KAAJ,CAAU,OAAV,GAAoB,MAApB;AACA;AACD,KAHD,MAGO;AACL,MAAA,GAAG,CAAC,KAAJ,CAAU,OAAV,GAAoB,OAApB;AACD;;AACK,QAAA,EAAA,GAAqB,KAAK,OAA1B;AAAA,QAAE,MAAM,GAAA,EAAA,CAAA,MAAR;AAAA,QAAU,MAAM,GAAA,EAAA,CAAA,MAAhB;AACN,QAAM,UAAU,GAAG,KAAK,CAAC,EAAE,CAAC,KAAH,CAAS,CAAT,CAAD,CAAxB;AACA,QAAM,UAAU,GAAG,KAAK,eAAL,CAAqB,EAAE,CAAC,KAAxB,EAA+B,CAA/B,EAAkC,CAAlC,CAAnB;;AACA,QAAI,UAAJ,EAAgB;AACd,UAAI,SAAS,CAAC,EAAE,CAAC,KAAJ,EAAW,UAAC,IAAD,EAAU;AAAK,eAAA,IAAI,CAAC,IAAL,KAAc,MAAM,CAApB,CAAoB,CAApB;AAAuB,OAAjD,CAAT,GAA8D,CAAlE,EAAqE;AACnE,QAAA,EAAE,CAAC,KAAH,CAAS,IAAT,CAAa,QAAA,CAAA,QAAA,CAAA,EAAA,EACR,UADQ,CAAA,EACE;AACb,UAAA,WAAW,EAAE,OAAO,CAAC,EAAD,EAAK,UAAU,CAAC,WAAhB,EAA6B;AAAE,YAAA,OAAO,EAAE;AAAX,WAA7B,CADP;AAEb,UAAA,IAAI,EAAE,UAFO;AAGb,UAAA,IAAI,EAAE,MAAM,CAAC,CAAD,CAHC;AAIb,UAAA,KAAK,EAAE,UAAU,CAAC,MAAM,CAAC,CAAD,CAAP,CAJJ;AAKb,UAAA,KAAK,EAAE,KAAK,MAAL,CAAY,CAAZ;AALM,SADF,CAAb;AAQD;AACF;;AACD,QAAI,MAAM,CAAC,OAAX,EAAoB;AAClB,MAAA,IAAI,CAAC,KAAK,OAAN,EAAe,UAAC,MAAD,EAAS,KAAT,EAAc;AAC/B,YAAM,IAAI,GAAG,MAAM,CAAC,GAAP,CAAW,OAAX,EAAoB,CAApB,CAAb;;AACA,YAAI,IAAI,CAAC,SAAT,EAAoB;AAClB,cAAM,WAAW,GAAG,KAAK,KAAK,CAAV,GAAc,CAAd,GAAkB,CAAtC;AACA,UAAA,EAAE,CAAC,KAAH,CAAS,MAAT,CAAgB,WAAhB,EAA6B,CAA7B;AACD;AACF,OANG,CAAJ;AAOD;AACF,GAjCS;;AAmCA,EAAA,aAAA,CAAA,SAAA,CAAA,YAAA,GAAV,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACQ,QAAA,EAAA,GAAqB,KAAK,OAA1B;AAAA,QAAE,MAAM,GAAA,EAAA,CAAA,MAAR;AAAA,QAAU,MAAM,GAAA,EAAA,CAAA,MAAhB;AACE,QAAA,MAAM,GAAK,KAAL,MAAN;AACR,QAAM,SAAS,GAAG,KAAK,SAAL,CAAe,QAAf,EAAlB;AACA,QAAM,SAAS,GAAG,MAAlB;AACA,IAAA,IAAI,CAAC,KAAK,UAAN,EAAkB,UAAC,IAAD,EAAO,KAAP,EAAY;AAChC,UAAM,SAAS,GAAG,OAAO,CACvB,EADuB,EAEvB;AACE,QAAA,MAAM,EAAE,QADV;AAEE,QAAA,KAAK,EAAE;AACL,UAAA,CAAC,EAAE,CADE;AAEL,UAAA,IAAI,EAAE,MAAM,CAAC,KAAD;AAFP;AAFT,OAFuB,EASvB,SAAS,CAAC,MATa,CAAzB;AAWA,UAAM,KAAK,GAAG,CACZ;AACE,QAAA,IAAI,EAAE,MAAM,CAAC,KAAD,CADd;AAEE,QAAA,SAAS,EAAE,KAFb;AAGE,QAAA,MAAM,EAAE;AAHV,OADY,CAAd;AAOA,UAAM,MAAM,GAAG,IAAI,MAAM,CAAC,QAAX,CAAoB;AACjC,QAAA,EAAE,EAAE,KAAI,CAAC,IADwB;AAEjC,QAAA,SAAS,EAAA,SAFwB;AAGjC,QAAA,CAAC,EAAE,CAH8B;AAIjC,QAAA,CAAC,EAAE,CAJ8B;AAKjC,QAAA,KAAK,EAAE,KAL0B;AAMjC,QAAA,gBAAgB,EAAE,IANe;AAOjC,QAAA,cAAc,EAAE,IAPiB;AAQjC,QAAA,QAAQ,EAAE,SAAS,CAAC;AARa,OAApB,CAAf;AAUA,MAAA,MAAM,CAAC,IAAP;AACA,MAAA,MAAM,CAAC,MAAP;;AACA,MAAA,KAAI,CAAC,OAAL,CAAa,IAAb,CAAkB,MAAlB;AACD,KAhCG,CAAJ,CALF,CAsCE;;AACA,IAAA,IAAI,CAAC,KAAK,UAAN,EAAkB,UAAC,IAAD,EAAO,KAAP,EAAY;AAChC,MAAA,KAAI,CAAC,YAAL,CAAkB,KAAlB;AACD,KAFG,CAAJ;AAGD,GA1CS;;AA2CZ,SAAA,aAAA;AAAC,CA9JD,CAAgG,cAAhG,CAAA;;;AAgKA,gBAAgB,CAAC,UAAD,EAAa,aAAb,CAAhB","sourcesContent":["import { Legend } from '@antv/component';\nimport { registerPlotType } from '../../base/global';\nimport ComboViewLayer from '../base';\nimport { LayerConfig } from '../../base/layer';\nimport LineLayer from '../../plots/line/layer';\nimport { clone, deepMix, each, findIndex } from '@antv/util';\nimport { IValueAxis, ICatAxis, ITimeAxis } from '../../interface/config';\nimport { ComboViewConfig, LineConfig } from '../util/interface';\n\nexport interface DualLineViewConfig extends ComboViewConfig {\n  xAxis?: IValueAxis | ICatAxis | ITimeAxis;\n  tooltip?: any;\n  lineConfigs?: LineConfig[];\n}\n\nconst defaultLineConfig = {\n  lineSize: 2,\n  connectNull: true,\n  point: {\n    visible: false,\n    size: 3,\n    shape: 'circle',\n    style: {\n      stroke: '#fff',\n    },\n  },\n  label: {\n    visible: false,\n  },\n};\n\nconst defaultYAxisConfig = {\n  visible: true,\n  colorMapping: true,\n  grid: {\n    visible: true,\n  },\n  line: {\n    visible: false,\n  },\n  tickLine: {\n    visible: false,\n  },\n  label: {\n    visible: true,\n    autoHide: true,\n    autoRotate: false,\n  },\n  title: {\n    autoRotate: true,\n    visible: false,\n    offset: 12,\n  },\n};\n\ninterface DualLineLayerConfig extends DualLineViewConfig, LayerConfig {}\n\nexport default class DualLineLayer<T extends DualLineLayerConfig = DualLineLayerConfig> extends ComboViewLayer<T> {\n  public static getDefaultOptions(): Partial<DualLineLayerConfig> {\n    return deepMix({}, super.getDefaultOptions(), {\n      legend: {\n        visible: true,\n      },\n      yAxis: {\n        leftConfig: defaultYAxisConfig,\n        rightConfig: defaultYAxisConfig,\n      },\n      // 自古红蓝出cp....\n      lineConfigs: [\n        deepMix({}, defaultLineConfig, { color: '#5B8FF9' }),\n        deepMix({}, defaultLineConfig, { color: '#e76c5e' }),\n      ],\n    });\n  }\n\n  public type: string = 'dualLine';\n\n  public init() {\n    super.init();\n    if (!this.checkData()) {\n      return;\n    }\n    const { data, meta, xField, yField, xAxis, tooltip, lineConfigs, legend, events } = this.options;\n    this.colors = [lineConfigs[0].color as string, lineConfigs[1].color as string];\n    const yAxisGlobalConfig = this.getYAxisGlobalConfig();\n    //draw first line\n    const leftLine = this.createLayer(LineLayer, data[0], {\n      meta,\n      xField,\n      yField: yField[0],\n      xAxis: {\n        visible: false,\n      },\n      yAxis: deepMix({}, yAxisGlobalConfig, this.yAxis(0), {\n        grid: {\n          visible: false,\n        },\n        nice: true,\n      }),\n      tooltip: {\n        visible: false,\n      },\n      events,\n      ...lineConfigs[0],\n    });\n    leftLine.render();\n    //draw second line\n    const metaInfo = {};\n    metaInfo[yField[1]] = { ticks: this.getTicks() };\n    const rightLine = this.createLayer(LineLayer, data[1], {\n      xField,\n      yField: yField[1],\n      meta: deepMix({}, meta, metaInfo),\n      serieField: yField[1],\n      xAxis,\n      yAxis: deepMix({}, yAxisGlobalConfig, this.yAxis(1), {\n        position: 'right',\n        nice: false,\n      }),\n      tooltip: deepMix({}, tooltip, {\n        showMarkers: false,\n        custom: {\n          onChange: (containerDom, ev) => {\n            this.tooltip(containerDom, ev);\n          },\n        },\n      }),\n      events,\n      ...lineConfigs[1],\n    });\n    rightLine.render();\n    if (legend.visible) {\n      this.customLegend();\n    }\n    this.adjustLayout();\n  }\n\n  protected tooltip(dom, ev) {\n    const unCheckedValue = this.getUnCheckedValue();\n    // 如果legend全部是unchecked的状态，tooltip不显示\n    if (unCheckedValue.length === this.colors.length) {\n      dom.style.display = 'none';\n      return;\n    } else {\n      dom.style.display = 'block';\n    }\n    const { yField, legend } = this.options;\n    const originItem = clone(ev.items[0]);\n    const dataItemsA = this.getDataByXField(ev.title, 0)[0];\n    if (dataItemsA) {\n      if (findIndex(ev.items, (item: any) => item.name === yField[0]) < 0) {\n        ev.items.push({\n          ...originItem,\n          mappingData: deepMix({}, originItem.mappingData, { _origin: dataItemsA }),\n          data: dataItemsA,\n          name: yField[0],\n          value: dataItemsA[yField[0]],\n          color: this.colors[0],\n        });\n      }\n    }\n    if (legend.visible) {\n      each(this.legends, (legend, index) => {\n        const item = legend.get('items')[0];\n        if (item.unchecked) {\n          const spliceIndex = index === 0 ? 1 : 0;\n          ev.items.splice(spliceIndex, 1);\n        }\n      });\n    }\n  }\n\n  protected customLegend() {\n    const { yField, legend } = this.options;\n    const { colors } = this;\n    const container = this.container.addGroup();\n    const legendCfg = legend;\n    each(this.geomLayers, (line, index) => {\n      const markerCfg = deepMix(\n        {},\n        {\n          symbol: 'circle',\n          style: {\n            r: 4,\n            fill: colors[index],\n          },\n        },\n        legendCfg.marker\n      );\n      const items = [\n        {\n          name: yField[index],\n          unchecked: false,\n          marker: markerCfg,\n        },\n      ];\n      const legend = new Legend.Category({\n        id: this.type,\n        container,\n        x: 0,\n        y: 0,\n        items: items,\n        updateAutoRender: true,\n        itemBackground: null,\n        itemName: legendCfg.text,\n      });\n      legend.init();\n      legend.render();\n      this.legends.push(legend);\n    });\n    // 使用legend做图层筛选\n    each(this.geomLayers, (line, index) => {\n      this.legendFilter(index);\n    });\n  }\n}\n\nregisterPlotType('dualLine', DualLineLayer);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}