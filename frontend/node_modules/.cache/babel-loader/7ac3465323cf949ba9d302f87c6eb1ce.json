{"ast":null,"code":"import { __extends } from \"tslib\";\n/**\n * @author linhuiw\n * @description 仪表盘 layer\n */\n\nimport { deepMix, uniqueId } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport ViewLayer from '../../base/view-layer';\nimport { extractScale } from '../../util/scale';\nimport { GaugeShape } from './geometry/shape/gauge-shape';\nimport * as EventParser from './event';\n\nvar GaugeLayer =\n/** @class */\nfunction (_super) {\n  __extends(GaugeLayer, _super);\n\n  function GaugeLayer(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.type = 'gauge';\n    return _this;\n  }\n\n  GaugeLayer.getDefaultOptions = function () {\n    return deepMix({}, _super.getDefaultOptions.call(this), {\n      startAngle: -7 / 6,\n      endAngle: 1 / 6,\n      rangeBackgroundStyle: {\n        fill: '#f0f0f0'\n      },\n      rangeSize: 24,\n      statistic: {\n        position: ['50%', '80%']\n      },\n      axis: {\n        visible: true,\n        offset: -10,\n        tickCount: 21,\n        subTickCount: 4,\n        tickLine: {\n          visible: true,\n          length: 5,\n          style: {\n            stroke: '#aaa',\n            lineWidth: 2\n          }\n        },\n        label: {\n          visible: true,\n          offset: 8,\n          style: {\n            fill: '#aaa',\n            fontSize: 16,\n            textAlign: 'center',\n            textBaseline: 'middle'\n          }\n        }\n      },\n      pivot: {\n        visible: true,\n        thickness: 6,\n        pin: {\n          visible: true,\n          size: 2,\n          style: {\n            fill: '#2E364B'\n          }\n        },\n        base: {\n          visible: true,\n          style: {\n            fill: '#EEEEEE'\n          }\n        },\n        pointer: {\n          visible: true,\n          style: {\n            fill: '#CFCFCF'\n          }\n        }\n      }\n    });\n  };\n\n  GaugeLayer.prototype.init = function () {\n    var _a = this.options,\n        value = _a.value,\n        range = _a.range;\n    var rangeSorted = (range || []).map(function (d) {\n      return +d;\n    }).sort(function (a, b) {\n      return a - b;\n    });\n    var _b = this.options,\n        _c = _b.min,\n        min = _c === void 0 ? rangeSorted[0] : _c,\n        _d = _b.max,\n        max = _d === void 0 ? rangeSorted[rangeSorted.length - 1] : _d,\n        _e = _b.format,\n        format = _e === void 0 ? function (d) {\n      return \"\" + d;\n    } : _e;\n    var valueText = format(value); //const styleMix = this.getStyleMix();\n    //this.options.styleMix = styleMix;\n\n    this.options.data = [{\n      value: value || 0\n    }];\n    this.options.valueText = valueText;\n    this.options.min = min;\n    this.options.max = max;\n    this.options.format = format;\n    this.initG2Shape();\n\n    _super.prototype.init.call(this);\n  };\n  /**\n   * 绘制指针\n   */\n\n\n  GaugeLayer.prototype.initG2Shape = function () {\n    this.gaugeShape = new GaugeShape(uniqueId());\n    this.gaugeShape.setOption(this.type, deepMix({}, this.options, {\n      radius: 0.6,\n      angle: 240,\n      textPosition: '100%'\n    }));\n    this.gaugeShape.render();\n  };\n\n  GaugeLayer.prototype.geometryParser = function () {\n    return 'gauge';\n  };\n\n  GaugeLayer.prototype.scale = function () {\n    var _a = this.options,\n        min = _a.min,\n        max = _a.max,\n        format = _a.format;\n    var scales = {\n      value: {}\n    };\n    extractScale(scales.value, {\n      min: min,\n      max: max,\n      minLimit: min,\n      maxLimit: max,\n      nice: true,\n      formatter: format,\n      // 自定义 tick step\n      tickInterval: 20\n    }); // @ts-ignore\n\n    this.setConfig('scales', scales);\n\n    _super.prototype.scale.call(this);\n  };\n\n  GaugeLayer.prototype.coord = function () {\n    var coordConfig = {\n      type: 'polar',\n      cfg: {\n        radius: 1,\n        startAngle: this.options.startAngle * Math.PI,\n        endAngle: this.options.endAngle * Math.PI\n      }\n    };\n    this.setConfig('coordinate', coordConfig);\n  };\n\n  GaugeLayer.prototype.axis = function () {\n    var axis = this.options.axis;\n    var axesConfig = {\n      value: {\n        line: null,\n        grid: null,\n        tickLine: null\n      }\n    };\n    var offsetValue;\n\n    if (axis.offset < 0) {\n      offsetValue = axis.offset - this.options.rangeSize - axis.tickLine.length - axis.label.offset;\n    } else {\n      offsetValue = axis.offset + axis.tickLine.length + axis.label.offset;\n    }\n\n    if (axis.label.visible) {\n      axesConfig.value.label = {\n        offset: offsetValue,\n        textStyle: axis.label.style,\n        autoRotate: true\n      };\n    } else {\n      axesConfig.value.label = {\n        style: {\n          opacity: 0\n        }\n      };\n    }\n\n    axesConfig['1'] = false;\n    axesConfig['value'] = axis.visible ? axesConfig['value'] : false;\n    this.setConfig('axes', axesConfig);\n  };\n\n  GaugeLayer.prototype.addGeometry = function () {\n    var pointerColor = this.options.pivot.pointer.style.fill || this.theme.defaultColor;\n    var pointer = {\n      type: 'point',\n      position: {\n        fields: ['value', '1']\n      },\n      shape: {\n        values: ['gauge']\n      },\n      color: {\n        values: [pointerColor]\n      }\n    };\n    this.setConfig('geometry', pointer);\n  };\n\n  GaugeLayer.prototype.annotation = function () {\n    var statistic = this.options.statistic;\n    var annotationConfigs = []; // @ts-ignore\n\n    if (statistic && statistic.visible) {\n      var statistics = this.renderStatistic();\n      annotationConfigs.push(statistics);\n    }\n\n    this.setConfig('annotations', annotationConfigs);\n  };\n\n  GaugeLayer.prototype.renderStatistic = function () {\n    var containerSize = Math.max(this.options.width, this.options.height) / 20;\n    var statistic = this.options.statistic;\n    var text = {\n      type: 'text',\n      content: statistic.text,\n      top: true,\n      position: statistic.position,\n      style: {\n        fill: statistic.color,\n        fontSize: statistic.size ? statistic.size : containerSize * 1.2,\n        textAlign: 'center',\n        textBaseline: 'middle'\n      }\n    };\n    return text;\n  };\n\n  GaugeLayer.prototype.parseEvents = function () {\n    _super.prototype.parseEvents.call(this, EventParser);\n  };\n\n  return GaugeLayer;\n}(ViewLayer);\n\nexport default GaugeLayer;\nregisterPlotType('gauge', GaugeLayer);","map":{"version":3,"sources":["../../../src/plots/gauge/layer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @author linhuiw\n * @description 仪表盘 layer\n */\nimport { deepMix, uniqueId } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport { LayerConfig } from '../../base/layer';\nimport ViewLayer from '../../base/view-layer';\nimport { ElementOption } from '../../interface/config';\nimport { extractScale } from '../../util/scale';\nimport { GaugeViewConfig } from './interface';\nimport { GaugeShape } from './geometry/shape/gauge-shape';\nimport * as EventParser from './event';\n\nexport interface GaugeLayerConfig extends GaugeViewConfig, LayerConfig {}\n\nexport default class GaugeLayer<T extends GaugeLayerConfig = GaugeLayerConfig> extends ViewLayer<T> {\n  data: [];\n\n  gaugeShape: any;\n\n  options: any;\n\n  constructor(props) {\n    super(props);\n  }\n\n  public static getDefaultOptions(): any {\n    return deepMix({}, super.getDefaultOptions(), {\n      startAngle: -7 / 6,\n      endAngle: 1 / 6,\n      rangeBackgroundStyle: {\n        fill: '#f0f0f0',\n      },\n      rangeSize: 24,\n      statistic: {\n        position: ['50%', '80%'],\n      },\n      axis: {\n        visible: true,\n        offset: -10,\n        tickCount: 21,\n        subTickCount: 4,\n        tickLine: {\n          visible: true,\n          length: 5,\n          style: {\n            stroke: '#aaa',\n            lineWidth: 2,\n          },\n        },\n        label: {\n          visible: true,\n          offset: 8,\n          style: {\n            fill: '#aaa',\n            fontSize: 16,\n            textAlign: 'center',\n            textBaseline: 'middle',\n          },\n        },\n      },\n      pivot: {\n        visible: true,\n        thickness: 6,\n        pin: {\n          visible: true,\n          size: 2,\n          style: {\n            fill: '#2E364B',\n          },\n        },\n        base: {\n          visible: true,\n          style: {\n            fill: '#EEEEEE',\n          },\n        },\n        pointer: {\n          visible: true,\n          style: {\n            fill: '#CFCFCF',\n          },\n        },\n      },\n    });\n  }\n\n  public type: string = 'gauge';\n\n  public init() {\n    const { value, range } = this.options;\n    const rangeSorted = (range || []).map((d: number) => +d).sort((a: number, b: number) => a - b);\n\n    const { min = rangeSorted[0], max = rangeSorted[rangeSorted.length - 1], format = (d) => `${d}` } = this.options;\n\n    const valueText = format(value);\n    //const styleMix = this.getStyleMix();\n    //this.options.styleMix = styleMix;\n    this.options.data = [{ value: value || 0 }];\n    this.options.valueText = valueText;\n    this.options.min = min;\n    this.options.max = max;\n    this.options.format = format;\n    this.initG2Shape();\n    super.init();\n  }\n\n  /**\n   * 绘制指针\n   */\n  protected initG2Shape() {\n    this.gaugeShape = new GaugeShape(uniqueId());\n    this.gaugeShape.setOption(\n      this.type,\n      deepMix({}, this.options, {\n        radius: 0.6,\n        angle: 240,\n        textPosition: '100%',\n      })\n    );\n    this.gaugeShape.render();\n  }\n\n  protected geometryParser(): string {\n    return 'gauge';\n  }\n\n  protected scale() {\n    const { min, max, format } = this.options;\n    const scales = {\n      value: {},\n    };\n    extractScale(scales.value, {\n      min,\n      max,\n      minLimit: min,\n      maxLimit: max,\n      nice: true,\n      formatter: format,\n      // 自定义 tick step\n      tickInterval: 20,\n    });\n    // @ts-ignore\n    this.setConfig('scales', scales);\n    super.scale();\n  }\n\n  protected coord() {\n    const coordConfig: any = {\n      type: 'polar',\n      cfg: {\n        radius: 1,\n        startAngle: this.options.startAngle * Math.PI,\n        endAngle: this.options.endAngle * Math.PI,\n      },\n    };\n    this.setConfig('coordinate', coordConfig);\n  }\n\n  protected axis() {\n    const { axis } = this.options;\n    const axesConfig: any = {\n      value: {\n        line: null,\n        grid: null,\n        tickLine: null,\n      },\n    };\n    let offsetValue;\n    if (axis.offset < 0) {\n      offsetValue = axis.offset - this.options.rangeSize - axis.tickLine.length - axis.label.offset;\n    } else {\n      offsetValue = axis.offset + axis.tickLine.length + axis.label.offset;\n    }\n    if (axis.label.visible) {\n      axesConfig.value.label = {\n        offset: offsetValue,\n        textStyle: axis.label.style,\n        autoRotate: true,\n      };\n    } else {\n      axesConfig.value.label = {\n        style: {\n          opacity: 0,\n        },\n      };\n    }\n    axesConfig['1'] = false;\n    axesConfig['value'] = axis.visible ? axesConfig['value'] : false;\n    this.setConfig('axes', axesConfig);\n  }\n\n  protected addGeometry() {\n    const pointerColor = this.options.pivot.pointer.style.fill || this.theme.defaultColor;\n\n    const pointer: ElementOption = {\n      type: 'point',\n      position: {\n        fields: ['value', '1'],\n      },\n      shape: {\n        values: ['gauge'],\n      },\n      color: {\n        values: [pointerColor],\n      },\n    };\n\n    this.setConfig('geometry', pointer);\n  }\n\n  protected annotation() {\n    const { statistic } = this.options;\n    const annotationConfigs = [];\n    // @ts-ignore\n    if (statistic && statistic.visible) {\n      const statistics = this.renderStatistic();\n      annotationConfigs.push(statistics);\n    }\n    this.setConfig('annotations', annotationConfigs);\n  }\n\n  protected renderStatistic() {\n    const containerSize = Math.max(this.options.width, this.options.height) / 20;\n    const { statistic } = this.options;\n    const text = {\n      type: 'text',\n      content: statistic.text,\n      top: true,\n      position: statistic.position,\n      style: {\n        fill: statistic.color,\n        fontSize: statistic.size ? statistic.size : containerSize * 1.2,\n        textAlign: 'center',\n        textBaseline: 'middle',\n      },\n    };\n    return text;\n  }\n\n  protected parseEvents() {\n    super.parseEvents(EventParser);\n  }\n}\n\nregisterPlotType('gauge', GaugeLayer);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}