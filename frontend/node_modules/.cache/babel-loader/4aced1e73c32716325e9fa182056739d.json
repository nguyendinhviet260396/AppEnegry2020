{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { mix } from '@antv/util';\nimport Global from '../../global';\nimport Shape from '../shape';\nShape.registerNode('rect', {\n  // 自定义节点时的配置\n  options: {\n    size: [100, 30],\n    style: {\n      radius: 0,\n      stroke: Global.defaultShapeStrokeColor,\n      fill: Global.defaultShapeFillColor,\n      lineWidth: Global.defaultNode.style.lineWidth,\n      fillOpacity: 1\n    },\n    // 文本样式配置\n    labelCfg: {\n      style: {\n        fill: '#595959',\n        fontSize: 12\n      }\n    },\n    // 节点上左右上下四个方向上的链接circle配置\n    linkPoints: {\n      top: false,\n      right: false,\n      bottom: false,\n      left: false,\n      // circle的大小\n      size: 10,\n      lineWidth: 1,\n      fill: '#72CC4A',\n      stroke: '#72CC4A'\n    },\n    // 连接点，默认为左右\n    // anchorPoints: [{ x: 0, y: 0.5 }, { x: 1, y: 0.5 }]\n    anchorPoints: [[0, 0.5], [1, 0.5]]\n  },\n  shapeType: 'rect',\n  labelPosition: 'center',\n  drawShape: function drawShape(cfg, group) {\n    var style = this.getShapeStyle(cfg);\n    var keyShape = group.addShape('rect', {\n      attrs: style,\n      className: this.type + \"-keyShape\",\n      name: this.type + \"-keyShape\",\n      draggable: true\n    });\n    this.drawLinkPoints(cfg, group);\n    return keyShape;\n  },\n\n  /**\n   * 绘制节点上的LinkPoints\n   * @param {Object} cfg data数据配置项\n   * @param {Group} group Group实例\n   */\n  drawLinkPoints: function drawLinkPoints(cfg, group) {\n    var _a = this.getOptions(cfg).linkPoints,\n        linkPoints = _a === void 0 ? {} : _a;\n\n    var top = linkPoints.top,\n        left = linkPoints.left,\n        right = linkPoints.right,\n        bottom = linkPoints.bottom,\n        markSize = linkPoints.size,\n        markR = linkPoints.r,\n        markStyle = __rest(linkPoints, [\"top\", \"left\", \"right\", \"bottom\", \"size\", \"r\"]);\n\n    var size = this.getSize(cfg);\n    var width = size[0];\n    var height = size[1];\n\n    if (left) {\n      // left circle\n      group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: -width / 2,\n          y: 0,\n          r: markSize / 2 || markR || 5\n        }),\n        className: 'link-point-left',\n        name: 'link-point-left',\n        isAnchorPoint: true\n      });\n    }\n\n    if (right) {\n      // right circle\n      group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: width / 2,\n          y: 0,\n          r: markSize / 2 || markR || 5\n        }),\n        className: 'link-point-right',\n        name: 'link-point-right',\n        isAnchorPoint: true\n      });\n    }\n\n    if (top) {\n      // top circle\n      group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: 0,\n          y: -height / 2,\n          r: markSize / 2 || markR || 5\n        }),\n        className: 'link-point-top',\n        name: 'link-point-top',\n        isAnchorPoint: true\n      });\n    }\n\n    if (bottom) {\n      // bottom circle\n      group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: 0,\n          y: height / 2,\n          r: markSize / 2 || markR || 5\n        }),\n        className: 'link-point-bottom',\n        name: 'link-point-bottom',\n        isAnchorPoint: true\n      });\n    }\n  },\n\n  /**\n   * 获取节点的样式，供基于该节点自定义时使用\n   * @param {Object} cfg 节点数据模型\n   * @return {Object} 节点的样式\n   */\n  getShapeStyle: function getShapeStyle(cfg) {\n    var defaultStyle = this.getOptions(cfg).style;\n    var strokeStyle = {\n      stroke: cfg.color\n    }; // 如果设置了color，则覆盖默认的stroke属性\n\n    var style = mix({}, defaultStyle, strokeStyle);\n    var size = this.getSize(cfg);\n    var width = style.width || size[0];\n    var height = style.height || size[1];\n\n    var styles = __assign({\n      x: -width / 2,\n      y: -height / 2,\n      width: width,\n      height: height\n    }, style);\n\n    return styles;\n  },\n  update: function update(cfg, item) {\n    var group = item.getContainer(); // 这里不传 cfg 参数是因为 cfg.style 需要最后覆盖样式\n\n    var defaultStyle = this.getOptions({}).style;\n    var size = this.getSize(cfg);\n    var keyShape = item.get('keyShape');\n\n    if (!cfg.size) {\n      size[0] = keyShape.attr('width') || defaultStyle.width;\n      size[1] = keyShape.attr('height') || defaultStyle.height;\n    } // 下面这些属性需要覆盖默认样式与目前样式，但若在 cfg 中有指定则应该被 cfg 的相应配置覆盖。\n\n\n    var strokeStyle = {\n      stroke: cfg.color,\n      x: -size[0] / 2,\n      y: -size[1] / 2,\n      width: size[0],\n      height: size[1]\n    }; // 与 getShapeStyle 不同在于，update 时需要获取到当前的 style 进行融合。即新传入的配置项中没有涉及的属性，保留当前的配置。\n\n    var style = mix({}, defaultStyle, keyShape.attr(), strokeStyle);\n    style = mix(style, cfg.style);\n    this.updateShape(cfg, item, style, false);\n    this.updateLinkPoints(cfg, group);\n  }\n}, 'single-node');","map":{"version":3,"sources":["C:/Users/vietn/Desktop/AppEnegry2020/frontend/node_modules/@antv/g6/es/shape/nodes/rect.js"],"names":["__assign","__rest","mix","Global","Shape","registerNode","options","size","style","radius","stroke","defaultShapeStrokeColor","fill","defaultShapeFillColor","lineWidth","defaultNode","fillOpacity","labelCfg","fontSize","linkPoints","top","right","bottom","left","anchorPoints","shapeType","labelPosition","drawShape","cfg","group","getShapeStyle","keyShape","addShape","attrs","className","type","name","draggable","drawLinkPoints","_a","getOptions","markSize","markR","r","markStyle","getSize","width","height","x","y","isAnchorPoint","defaultStyle","strokeStyle","color","styles","update","item","getContainer","get","attr","updateShape","updateLinkPoints"],"mappings":"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","sourcesContent":["import { __assign, __rest } from \"tslib\";\nimport { mix } from '@antv/util';\nimport Global from '../../global';\nimport Shape from '../shape';\nShape.registerNode('rect', {\n  // 自定义节点时的配置\n  options: {\n    size: [100, 30],\n    style: {\n      radius: 0,\n      stroke: Global.defaultShapeStrokeColor,\n      fill: Global.defaultShapeFillColor,\n      lineWidth: Global.defaultNode.style.lineWidth,\n      fillOpacity: 1\n    },\n    // 文本样式配置\n    labelCfg: {\n      style: {\n        fill: '#595959',\n        fontSize: 12\n      }\n    },\n    // 节点上左右上下四个方向上的链接circle配置\n    linkPoints: {\n      top: false,\n      right: false,\n      bottom: false,\n      left: false,\n      // circle的大小\n      size: 10,\n      lineWidth: 1,\n      fill: '#72CC4A',\n      stroke: '#72CC4A'\n    },\n    // 连接点，默认为左右\n    // anchorPoints: [{ x: 0, y: 0.5 }, { x: 1, y: 0.5 }]\n    anchorPoints: [[0, 0.5], [1, 0.5]]\n  },\n  shapeType: 'rect',\n  labelPosition: 'center',\n  drawShape: function drawShape(cfg, group) {\n    var style = this.getShapeStyle(cfg);\n    var keyShape = group.addShape('rect', {\n      attrs: style,\n      className: this.type + \"-keyShape\",\n      name: this.type + \"-keyShape\",\n      draggable: true\n    });\n    this.drawLinkPoints(cfg, group);\n    return keyShape;\n  },\n\n  /**\n   * 绘制节点上的LinkPoints\n   * @param {Object} cfg data数据配置项\n   * @param {Group} group Group实例\n   */\n  drawLinkPoints: function drawLinkPoints(cfg, group) {\n    var _a = this.getOptions(cfg).linkPoints,\n        linkPoints = _a === void 0 ? {} : _a;\n\n    var top = linkPoints.top,\n        left = linkPoints.left,\n        right = linkPoints.right,\n        bottom = linkPoints.bottom,\n        markSize = linkPoints.size,\n        markR = linkPoints.r,\n        markStyle = __rest(linkPoints, [\"top\", \"left\", \"right\", \"bottom\", \"size\", \"r\"]);\n\n    var size = this.getSize(cfg);\n    var width = size[0];\n    var height = size[1];\n\n    if (left) {\n      // left circle\n      group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: -width / 2,\n          y: 0,\n          r: markSize / 2 || markR || 5\n        }),\n        className: 'link-point-left',\n        name: 'link-point-left',\n        isAnchorPoint: true\n      });\n    }\n\n    if (right) {\n      // right circle\n      group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: width / 2,\n          y: 0,\n          r: markSize / 2 || markR || 5\n        }),\n        className: 'link-point-right',\n        name: 'link-point-right',\n        isAnchorPoint: true\n      });\n    }\n\n    if (top) {\n      // top circle\n      group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: 0,\n          y: -height / 2,\n          r: markSize / 2 || markR || 5\n        }),\n        className: 'link-point-top',\n        name: 'link-point-top',\n        isAnchorPoint: true\n      });\n    }\n\n    if (bottom) {\n      // bottom circle\n      group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: 0,\n          y: height / 2,\n          r: markSize / 2 || markR || 5\n        }),\n        className: 'link-point-bottom',\n        name: 'link-point-bottom',\n        isAnchorPoint: true\n      });\n    }\n  },\n\n  /**\n   * 获取节点的样式，供基于该节点自定义时使用\n   * @param {Object} cfg 节点数据模型\n   * @return {Object} 节点的样式\n   */\n  getShapeStyle: function getShapeStyle(cfg) {\n    var defaultStyle = this.getOptions(cfg).style;\n    var strokeStyle = {\n      stroke: cfg.color\n    }; // 如果设置了color，则覆盖默认的stroke属性\n\n    var style = mix({}, defaultStyle, strokeStyle);\n    var size = this.getSize(cfg);\n    var width = style.width || size[0];\n    var height = style.height || size[1];\n\n    var styles = __assign({\n      x: -width / 2,\n      y: -height / 2,\n      width: width,\n      height: height\n    }, style);\n\n    return styles;\n  },\n  update: function update(cfg, item) {\n    var group = item.getContainer(); // 这里不传 cfg 参数是因为 cfg.style 需要最后覆盖样式\n\n    var defaultStyle = this.getOptions({}).style;\n    var size = this.getSize(cfg);\n    var keyShape = item.get('keyShape');\n\n    if (!cfg.size) {\n      size[0] = keyShape.attr('width') || defaultStyle.width;\n      size[1] = keyShape.attr('height') || defaultStyle.height;\n    } // 下面这些属性需要覆盖默认样式与目前样式，但若在 cfg 中有指定则应该被 cfg 的相应配置覆盖。\n\n\n    var strokeStyle = {\n      stroke: cfg.color,\n      x: -size[0] / 2,\n      y: -size[1] / 2,\n      width: size[0],\n      height: size[1]\n    }; // 与 getShapeStyle 不同在于，update 时需要获取到当前的 style 进行融合。即新传入的配置项中没有涉及的属性，保留当前的配置。\n\n    var style = mix({}, defaultStyle, keyShape.attr(), strokeStyle);\n    style = mix(style, cfg.style);\n    this.updateShape(cfg, item, style, false);\n    this.updateLinkPoints(cfg, group);\n  }\n}, 'single-node');"]},"metadata":{},"sourceType":"module"}