{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { deepMix } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport StackedArea from '../stacked-area/layer';\nimport { transformDataPercentage } from '../../util/data';\n\nvar PercentStackedAreaLayer =\n/** @class */\nfunction (_super) {\n  __extends(PercentStackedAreaLayer, _super);\n\n  function PercentStackedAreaLayer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'percentStackedArea';\n    _this.baseType = 'stackedArea';\n    return _this;\n  }\n\n  PercentStackedAreaLayer.getDefaultOptions = function () {\n    return deepMix({}, _super.getDefaultOptions.call(this), {\n      yAxis: {\n        visible: true,\n        label: {\n          visible: true,\n          formatter: function formatter(v) {\n            var reg = /%/gi;\n            return v.replace(reg, '');\n          }\n        }\n      }\n    });\n  };\n\n  PercentStackedAreaLayer.prototype.processData = function (originData) {\n    var _a = this.options,\n        xField = _a.xField,\n        yField = _a.yField;\n    return transformDataPercentage(originData, xField, [yField]);\n  };\n\n  PercentStackedAreaLayer.prototype.scale = function () {\n    var metaConfig = {};\n    var yField = this.options.yField;\n    metaConfig[this.options.yField] = {\n      tickCount: 6,\n      alias: yField + \" (%)\",\n      min: 0,\n      max: 1,\n      formatter: function formatter(v) {\n        var formattedValue = (v * 100).toFixed(1);\n        return formattedValue + \"%\";\n      }\n    };\n    this.options.meta = deepMix({}, metaConfig, this.options.meta);\n\n    _super.prototype.scale.call(this);\n  };\n\n  return PercentStackedAreaLayer;\n}(StackedArea);\n\nexport default PercentStackedAreaLayer;\nregisterPlotType('percentStackedArea', PercentStackedAreaLayer);","map":{"version":3,"sources":["../../../src/plots/percent-stacked-area/layer.ts"],"names":[],"mappings":";AAAA,SAAS,OAAT,QAAwB,YAAxB;AACA,SAAS,gBAAT,QAAiC,mBAAjC;AAEA,OAAO,WAAP,MAAwB,uBAAxB;AAGA,SAAS,uBAAT,QAAwC,iBAAxC;;AAKA,IAAA,uBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAqD,EAAA,SAAA,CAAA,uBAAA,EAAA,MAAA,CAAA;;AAArD,WAAA,uBAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;;AAeS,IAAA,KAAA,CAAA,IAAA,GAAe,oBAAf;AACA,IAAA,KAAA,CAAA,QAAA,GAAmB,aAAnB;;AAwBR;;AAvCe,EAAA,uBAAA,CAAA,iBAAA,GAAd,YAAA;AACE,WAAO,OAAO,CAAC,EAAD,EAAK,MAAA,CAAM,iBAAN,CAAuB,IAAvB,CAAuB,IAAvB,CAAL,EAAgC;AAC5C,MAAA,KAAK,EAAE;AACL,QAAA,OAAO,EAAE,IADJ;AAEL,QAAA,KAAK,EAAE;AACL,UAAA,OAAO,EAAE,IADJ;AAEL,UAAA,SAAS,EAAE,mBAAC,CAAD,EAAE;AACX,gBAAM,GAAG,GAAG,KAAZ;AACA,mBAAO,CAAC,CAAC,OAAF,CAAU,GAAV,EAAe,EAAf,CAAP;AACD;AALI;AAFF;AADqC,KAAhC,CAAd;AAYD,GAba;;AAiBJ,EAAA,uBAAA,CAAA,SAAA,CAAA,WAAA,GAAV,UAAsB,UAAtB,EAA6C;AACrC,QAAA,EAAA,GAAqB,KAAK,OAA1B;AAAA,QAAE,MAAM,GAAA,EAAA,CAAA,MAAR;AAAA,QAAU,MAAM,GAAA,EAAA,CAAA,MAAhB;AAEN,WAAO,uBAAuB,CAAC,UAAD,EAAa,MAAb,EAAqB,CAAC,MAAD,CAArB,CAA9B;AACD,GAJS;;AAMA,EAAA,uBAAA,CAAA,SAAA,CAAA,KAAA,GAAV,YAAA;AACE,QAAM,UAAU,GAAG,EAAnB;AACQ,QAAA,MAAM,GAAK,KAAK,OAAL,CAAL,MAAN;AACR,IAAA,UAAU,CAAC,KAAK,OAAL,CAAa,MAAd,CAAV,GAAkC;AAChC,MAAA,SAAS,EAAE,CADqB;AAEhC,MAAA,KAAK,EAAK,MAAM,GAAA,MAFgB;AAGhC,MAAA,GAAG,EAAE,CAH2B;AAIhC,MAAA,GAAG,EAAE,CAJ2B;AAKhC,MAAA,SAAS,EAAE,mBAAC,CAAD,EAAE;AACX,YAAM,cAAc,GAAG,CAAC,CAAC,GAAG,GAAL,EAAU,OAAV,CAAkB,CAAlB,CAAvB;AACA,eAAU,cAAc,GAAA,GAAxB;AACD;AAR+B,KAAlC;AAUA,SAAK,OAAL,CAAa,IAAb,GAAoB,OAAO,CAAC,EAAD,EAAK,UAAL,EAAiB,KAAK,OAAL,CAAa,IAA9B,CAA3B;;AACA,IAAA,MAAA,CAAA,SAAA,CAAM,KAAN,CAAW,IAAX,CAAW,IAAX;AACD,GAfS;;AAgBZ,SAAA,uBAAA;AAAC,CAxCD,CAAqD,WAArD,CAAA;;;AA0CA,gBAAgB,CAAC,oBAAD,EAAuB,uBAAvB,CAAhB","sourcesContent":["import { deepMix } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport { LayerConfig } from '../../base/layer';\nimport StackedArea from '../stacked-area/layer';\nimport { StackedAreaViewConfig } from '../stacked-area/interface';\nimport { DataItem } from '../../interface/config';\nimport { transformDataPercentage } from '../../util/data';\n\nexport type PercentStackedAreaViewConfig = StackedAreaViewConfig;\nexport interface PercentStackedAreaLayerConfig extends PercentStackedAreaViewConfig, LayerConfig {}\n\nexport default class PercentStackedAreaLayer extends StackedArea<PercentStackedAreaLayerConfig> {\n  public static getDefaultOptions(): any {\n    return deepMix({}, super.getDefaultOptions(), {\n      yAxis: {\n        visible: true,\n        label: {\n          visible: true,\n          formatter: (v) => {\n            const reg = /%/gi;\n            return v.replace(reg, '');\n          },\n        },\n      },\n    });\n  }\n  public type: string = 'percentStackedArea';\n  public baseType: string = 'stackedArea';\n\n  protected processData(originData?: DataItem[]) {\n    const { xField, yField } = this.options;\n\n    return transformDataPercentage(originData, xField, [yField]);\n  }\n\n  protected scale() {\n    const metaConfig = {};\n    const { yField } = this.options;\n    metaConfig[this.options.yField] = {\n      tickCount: 6,\n      alias: `${yField} (%)`,\n      min: 0,\n      max: 1,\n      formatter: (v) => {\n        const formattedValue = (v * 100).toFixed(1);\n        return `${formattedValue}%`;\n      },\n    };\n    this.options.meta = deepMix({}, metaConfig, this.options.meta);\n    super.scale();\n  }\n}\n\nregisterPlotType('percentStackedArea', PercentStackedAreaLayer);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}