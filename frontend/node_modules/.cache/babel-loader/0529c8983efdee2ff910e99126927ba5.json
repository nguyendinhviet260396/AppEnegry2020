{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { deepMix } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport StackedBar from '../stacked-bar/layer';\nimport { transformDataPercentage } from '../../util/data';\n\nvar PercentStackedBarLayer =\n/** @class */\nfunction (_super) {\n  __extends(PercentStackedBarLayer, _super);\n\n  function PercentStackedBarLayer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'percentStackedBar';\n    return _this;\n  }\n\n  PercentStackedBarLayer.getDefaultOptions = function () {\n    return deepMix({}, _super.getDefaultOptions.call(this), {\n      xAxis: {\n        visible: true,\n        tickLine: {\n          visible: false\n        },\n        grid: {\n          visible: false\n        },\n        title: {\n          visible: true,\n          formatter: function (v) {\n            return v + \" (%)\";\n          }\n        },\n        label: {\n          visible: false,\n          formatter: function (v) {\n            var reg = /%/gi;\n            return v.replace(reg, '');\n          }\n        }\n      }\n    });\n  };\n\n  PercentStackedBarLayer.prototype.processData = function (originData) {\n    var _a = this.options,\n        xField = _a.xField,\n        yField = _a.yField;\n\n    var processData = _super.prototype.processData.call(this, originData);\n\n    return transformDataPercentage(processData, yField, [xField]);\n  };\n\n  PercentStackedBarLayer.prototype.scale = function () {\n    var metaConfig = {};\n    var xField = this.options.xField;\n    metaConfig[xField] = {\n      tickCount: 6,\n      alias: xField + \" (%)\",\n      min: 0,\n      max: 1,\n      formatter: function (v) {\n        var formattedValue = (v * 100).toFixed(1);\n        return formattedValue + \"%\";\n      }\n    };\n    this.options.meta = deepMix({}, this.options.meta, metaConfig);\n\n    _super.prototype.scale.call(this);\n  };\n\n  return PercentStackedBarLayer;\n}(StackedBar);\n\nexport default PercentStackedBarLayer;\nregisterPlotType('percentStackedBar', PercentStackedBarLayer);","map":{"version":3,"sources":["../../../src/plots/percent-stacked-bar/layer.ts"],"names":[],"mappings":";AAAA,SAAS,OAAT,QAAwB,YAAxB;AACA,SAAS,gBAAT,QAAiC,mBAAjC;AAEA,OAAO,UAAP,MAAiD,sBAAjD;AAEA,SAAS,uBAAT,QAAwC,iBAAxC;;AAKA,IAAA,sBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAoD,EAAA,SAAA,CAAA,sBAAA,EAAA,MAAA,CAAA;;AAApD,WAAA,sBAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;;AAyBS,IAAA,KAAA,CAAA,IAAA,GAAe,mBAAf;;AAyBR;;AAjDe,EAAA,sBAAA,CAAA,iBAAA,GAAd,YAAA;AACE,WAAO,OAAO,CAAC,EAAD,EAAK,MAAA,CAAM,iBAAN,CAAuB,IAAvB,CAAuB,IAAvB,CAAL,EAAgC;AAC5C,MAAA,KAAK,EAAE;AACL,QAAA,OAAO,EAAE,IADJ;AAEL,QAAA,QAAQ,EAAE;AACR,UAAA,OAAO,EAAE;AADD,SAFL;AAKL,QAAA,IAAI,EAAE;AACJ,UAAA,OAAO,EAAE;AADL,SALD;AAQL,QAAA,KAAK,EAAE;AACL,UAAA,OAAO,EAAE,IADJ;AAEL,UAAA,SAAS,EAAE,UAAC,CAAD,EAAE;AAAK,mBAAG,CAAC,GAAJ,MAAA;AAAU;AAFvB,SARF;AAYL,QAAA,KAAK,EAAE;AACL,UAAA,OAAO,EAAE,KADJ;AAEL,UAAA,SAAS,EAAE,UAAC,CAAD,EAAE;AACX,gBAAM,GAAG,GAAG,KAAZ;AACA,mBAAO,CAAC,CAAC,OAAF,CAAU,GAAV,EAAe,EAAf,CAAP;AACD;AALI;AAZF;AADqC,KAAhC,CAAd;AAsBD,GAvBa;;AA0BJ,EAAA,sBAAA,CAAA,SAAA,CAAA,WAAA,GAAV,UAAsB,UAAtB,EAA6C;AACrC,QAAA,EAAA,GAAqB,KAAK,OAA1B;AAAA,QAAE,MAAM,GAAA,EAAA,CAAA,MAAR;AAAA,QAAU,MAAM,GAAA,EAAA,CAAA,MAAhB;;AACN,QAAM,WAAW,GAAG,MAAA,CAAA,SAAA,CAAM,WAAN,CAAiB,IAAjB,CAAiB,IAAjB,EAAkB,UAAlB,CAApB;;AAEA,WAAO,uBAAuB,CAAC,WAAD,EAAc,MAAd,EAAsB,CAAC,MAAD,CAAtB,CAA9B;AACD,GALS;;AAOA,EAAA,sBAAA,CAAA,SAAA,CAAA,KAAA,GAAV,YAAA;AACE,QAAM,UAAU,GAAG,EAAnB;AACQ,QAAA,MAAM,GAAK,KAAK,OAAL,CAAL,MAAN;AACR,IAAA,UAAU,CAAC,MAAD,CAAV,GAAqB;AACnB,MAAA,SAAS,EAAE,CADQ;AAEnB,MAAA,KAAK,EAAK,MAAM,GAAA,MAFG;AAGnB,MAAA,GAAG,EAAE,CAHc;AAInB,MAAA,GAAG,EAAE,CAJc;AAKnB,MAAA,SAAS,EAAE,UAAC,CAAD,EAAE;AACX,YAAM,cAAc,GAAG,CAAC,CAAC,GAAG,GAAL,EAAU,OAAV,CAAkB,CAAlB,CAAvB;AACA,eAAU,cAAc,GAAA,GAAxB;AACD;AARkB,KAArB;AAUA,SAAK,OAAL,CAAa,IAAb,GAAoB,OAAO,CAAC,EAAD,EAAK,KAAK,OAAL,CAAa,IAAlB,EAAwB,UAAxB,CAA3B;;AACA,IAAA,MAAA,CAAA,SAAA,CAAM,KAAN,CAAW,IAAX,CAAW,IAAX;AACD,GAfS;;AAgBZ,SAAA,sBAAA;AAAC,CAlDD,CAAoD,UAApD,CAAA;;;AAoDA,gBAAgB,CAAC,mBAAD,EAAsB,sBAAtB,CAAhB","sourcesContent":["import { deepMix } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport { LayerConfig } from '../../base/layer';\nimport StackedBar, { StackedBarViewConfig } from '../stacked-bar/layer';\nimport { DataItem } from '../../interface/config';\nimport { transformDataPercentage } from '../../util/data';\n\nexport type PercentStackedBarViewConfig = StackedBarViewConfig;\nexport interface PercentStackedBarLayerConfig extends PercentStackedBarViewConfig, LayerConfig {}\n\nexport default class PercentStackedBarLayer extends StackedBar<PercentStackedBarLayerConfig> {\n  public static getDefaultOptions(): any {\n    return deepMix({}, super.getDefaultOptions(), {\n      xAxis: {\n        visible: true,\n        tickLine: {\n          visible: false,\n        },\n        grid: {\n          visible: false,\n        },\n        title: {\n          visible: true,\n          formatter: (v) => `${v} (%)`,\n        },\n        label: {\n          visible: false,\n          formatter: (v) => {\n            const reg = /%/gi;\n            return v.replace(reg, '');\n          },\n        },\n      },\n    });\n  }\n  public type: string = 'percentStackedBar';\n\n  protected processData(originData?: DataItem[]) {\n    const { xField, yField } = this.options;\n    const processData = super.processData(originData);\n\n    return transformDataPercentage(processData, yField, [xField]);\n  }\n\n  protected scale() {\n    const metaConfig = {};\n    const { xField } = this.options;\n    metaConfig[xField] = {\n      tickCount: 6,\n      alias: `${xField} (%)`,\n      min: 0,\n      max: 1,\n      formatter: (v) => {\n        const formattedValue = (v * 100).toFixed(1);\n        return `${formattedValue}%`;\n      },\n    };\n    this.options.meta = deepMix({}, this.options.meta, metaConfig);\n    super.scale();\n  }\n}\n\nregisterPlotType('percentStackedBar', PercentStackedBarLayer);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}