{"ast":null,"code":"import React, { useEffect } from 'react';\nimport G6 from '@antv/g6/es';\nimport { ErrorBoundary } from '../base';\nimport { processMinimap, getGraphSize } from './util';\nimport useGraph from '../hooks/useGraph';\nvar defaultStateStyles = {\n  hover: {\n    stroke: '#1890ff',\n    lineWidth: 2\n  }\n};\nvar defaultNodeSize = [150, 30];\nvar defaultNodeStyle = {\n  stroke: '#72CC4A',\n  fill: '#f00'\n};\nvar defaultNodeAnchorPoints = [[0.5, 0], [0.5, 1]];\nvar defaultEdgeStyle = {\n  stroke: '#91d5ff',\n  endArrow: {\n    path: G6.Arrow.vee(10, 10),\n    fill: '#91d5ff'\n  }\n};\nvar defaultLayout = {\n  type: 'dagre',\n  rankdir: 'LR',\n  nodesep: 30,\n  ranksep: 50\n};\nvar defaultLabelCfg = {\n  style: {\n    fill: '#000000A6',\n    fontSize: 10\n  }\n};\nvar graph;\n\nvar DagreFundFlowGraph = function DagreFundFlowGraph(_ref) {\n  var data = _ref.data,\n      className = _ref.className,\n      style = _ref.style,\n      width = _ref.width,\n      height = _ref.height,\n      _ref$nodeType = _ref.nodeType,\n      nodeType = _ref$nodeType === void 0 ? 'round-rect' : _ref$nodeType,\n      _ref$edgeType = _ref.edgeType,\n      edgeType = _ref$edgeType === void 0 ? 'fund-polyline' : _ref$edgeType,\n      _ref$behaviors = _ref.behaviors,\n      behaviors = _ref$behaviors === void 0 ? ['zoom-canvas', 'drag-canvas'] : _ref$behaviors,\n      _ref$nodeSize = _ref.nodeSize,\n      nodeSize = _ref$nodeSize === void 0 ? defaultNodeSize : _ref$nodeSize,\n      _ref$nodeLabelCfg = _ref.nodeLabelCfg,\n      nodeLabelCfg = _ref$nodeLabelCfg === void 0 ? defaultLabelCfg : _ref$nodeLabelCfg,\n      _ref$edgeLabelCfg = _ref.edgeLabelCfg,\n      edgeLabelCfg = _ref$edgeLabelCfg === void 0 ? defaultLabelCfg : _ref$edgeLabelCfg,\n      _ref$nodeAnchorPoints = _ref.nodeAnchorPoints,\n      nodeAnchorPoints = _ref$nodeAnchorPoints === void 0 ? defaultNodeAnchorPoints : _ref$nodeAnchorPoints,\n      _ref$layout = _ref.layout,\n      layout = _ref$layout === void 0 ? defaultLayout : _ref$layout,\n      minimapCfg = _ref.minimapCfg,\n      _ref$nodeStyle = _ref.nodeStyle,\n      nodeStyle = _ref$nodeStyle === void 0 ? defaultNodeStyle : _ref$nodeStyle,\n      _ref$edgeStyle = _ref.edgeStyle,\n      edgeStyle = _ref$edgeStyle === void 0 ? defaultEdgeStyle : _ref$edgeStyle,\n      _ref$nodeStateStyles = _ref.nodeStateStyles,\n      nodeStateStyles = _ref$nodeStateStyles === void 0 ? defaultStateStyles : _ref$nodeStateStyles,\n      _ref$edgeStateStyles = _ref.edgeStateStyles,\n      edgeStateStyles = _ref$edgeStateStyles === void 0 ? defaultStateStyles : _ref$edgeStateStyles,\n      _ref$colorMap = _ref.colorMap,\n      colorMap = _ref$colorMap === void 0 ? {} : _ref$colorMap,\n      handleEdgeClick = _ref.handleEdgeClick,\n      handleEdgeHover = _ref.handleEdgeHover,\n      handleEdgeUnHover = _ref.handleEdgeUnHover,\n      handleNodeClick = _ref.handleNodeClick,\n      handleNodeHover = _ref.handleNodeHover,\n      handleNodeUnHover = _ref.handleNodeUnHover,\n      handleCanvasClick = _ref.handleCanvasClick,\n      graphRef = _ref.graphRef;\n  var container = React.useRef(null);\n  var props = {\n    data: data,\n    className: className,\n    style: style,\n    width: width,\n    height: height,\n    nodeType: nodeType,\n    edgeType: edgeType,\n    behaviors: behaviors,\n    nodeSize: nodeSize,\n    nodeLabelCfg: nodeLabelCfg,\n    edgeLabelCfg: edgeLabelCfg,\n    nodeAnchorPoints: nodeAnchorPoints,\n    layout: layout,\n    minimapCfg: minimapCfg,\n    nodeStyle: nodeStyle,\n    edgeStyle: edgeStyle,\n    nodeStateStyles: nodeStateStyles,\n    edgeStateStyles: edgeStateStyles,\n    colorMap: colorMap,\n    handleEdgeClick: handleEdgeClick,\n    handleEdgeHover: handleEdgeHover,\n    handleEdgeUnHover: handleEdgeUnHover,\n    handleNodeClick: handleNodeClick,\n    handleNodeHover: handleNodeHover,\n    handleNodeUnHover: handleNodeUnHover,\n    handleCanvasClick: handleCanvasClick,\n    graphRef: graphRef\n  };\n  useGraph(graph, props, container);\n  useEffect(function () {\n    var graphSize = getGraphSize(width, height, container);\n\n    if (!graph || graph.destroyed) {\n      graph = new G6.Graph({\n        container: container.current,\n        width: graphSize[0],\n        height: graphSize[1],\n        modes: {\n          default: behaviors\n        },\n        defaultNode: {\n          type: nodeType,\n          size: nodeSize,\n          style: nodeStyle,\n          anchorPoints: nodeAnchorPoints,\n          labelCfg: nodeLabelCfg\n        },\n        defaultEdge: {\n          type: edgeType,\n          style: edgeStyle,\n          colorMap: colorMap,\n          labelCfg: edgeLabelCfg\n        },\n        nodeStateStyles: nodeStateStyles,\n        edgeStateStyles: edgeStateStyles,\n        layout: layout\n      });\n\n      if (graphRef) {\n        graphRef.current = graph;\n      }\n    }\n\n    processMinimap(minimapCfg, graph);\n    graph.data(data);\n    graph.render(); // modify the node color according to the in edge\n\n    var edges = graph.getEdges();\n    edges.forEach(function (edge) {\n      var line = edge.getKeyShape();\n      var stroke = line.attr('stroke');\n      var targetNode = edge.getTarget();\n      targetNode.update({\n        style: {\n          stroke: stroke\n        }\n      });\n    });\n    graph.fitView();\n    graph.on('edge:mouseenter', function (evt) {\n      var item = evt.item;\n      graph.setItemState(item, 'hover', true);\n\n      if (handleEdgeHover) {\n        handleEdgeHover(item, graph);\n      }\n    });\n    graph.on('edge:mouseleave', function (evt) {\n      var item = evt.item;\n      graph.setItemState(item, 'hover', false);\n\n      if (handleEdgeUnHover) {\n        handleEdgeUnHover(item, graph);\n      }\n    });\n    graph.on('edge:click', function (evt) {\n      var item = evt.item;\n\n      if (handleEdgeClick) {\n        handleEdgeClick(item, graph);\n      }\n    });\n    graph.on('node:mouseenter', function (evt) {\n      var item = evt.item;\n      graph.setItemState(item, 'hover', false);\n\n      if (handleNodeHover) {\n        handleNodeHover(item, graph);\n      }\n    });\n    graph.on('node:mouseleave', function (evt) {\n      var item = evt.item;\n      graph.setItemState(item, 'hover', false);\n\n      if (handleNodeUnHover) {\n        handleNodeUnHover(item, graph);\n      }\n    });\n    graph.on('node:click', function (evt) {\n      var item = evt.item;\n\n      if (handleNodeClick) {\n        handleNodeClick(item, graph);\n      }\n    });\n    graph.on('canvas:click', function (evt) {\n      handleCanvasClick && handleCanvasClick(graph);\n    });\n    return function () {\n      return graph.destroy();\n    };\n  }, []);\n  return React.createElement(ErrorBoundary, null, React.createElement(\"div\", {\n    className: className,\n    style: style,\n    ref: container\n  }));\n};\n\nexport default DagreFundFlowGraph;","map":{"version":3,"sources":["C:/Users/vietn/Desktop/AppEnegry2020/frontend/node_modules/@ant-design/charts/es/graph/dagreFundFlow.js"],"names":["React","useEffect","G6","ErrorBoundary","processMinimap","getGraphSize","useGraph","defaultStateStyles","hover","stroke","lineWidth","defaultNodeSize","defaultNodeStyle","fill","defaultNodeAnchorPoints","defaultEdgeStyle","endArrow","path","Arrow","vee","defaultLayout","type","rankdir","nodesep","ranksep","defaultLabelCfg","style","fontSize","graph","DagreFundFlowGraph","_ref","data","className","width","height","_ref$nodeType","nodeType","_ref$edgeType","edgeType","_ref$behaviors","behaviors","_ref$nodeSize","nodeSize","_ref$nodeLabelCfg","nodeLabelCfg","_ref$edgeLabelCfg","edgeLabelCfg","_ref$nodeAnchorPoints","nodeAnchorPoints","_ref$layout","layout","minimapCfg","_ref$nodeStyle","nodeStyle","_ref$edgeStyle","edgeStyle","_ref$nodeStateStyles","nodeStateStyles","_ref$edgeStateStyles","edgeStateStyles","_ref$colorMap","colorMap","handleEdgeClick","handleEdgeHover","handleEdgeUnHover","handleNodeClick","handleNodeHover","handleNodeUnHover","handleCanvasClick","graphRef","container","useRef","props","graphSize","destroyed","Graph","current","modes","default","defaultNode","size","anchorPoints","labelCfg","defaultEdge","render","edges","getEdges","forEach","edge","line","getKeyShape","attr","targetNode","getTarget","update","fitView","on","evt","item","setItemState","destroy","createElement","ref"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport G6 from '@antv/g6/es';\nimport { ErrorBoundary } from '../base';\nimport { processMinimap, getGraphSize } from './util';\nimport useGraph from '../hooks/useGraph';\nvar defaultStateStyles = {\n  hover: {\n    stroke: '#1890ff',\n    lineWidth: 2\n  }\n};\nvar defaultNodeSize = [150, 30];\nvar defaultNodeStyle = {\n  stroke: '#72CC4A',\n  fill: '#f00'\n};\nvar defaultNodeAnchorPoints = [[0.5, 0], [0.5, 1]];\nvar defaultEdgeStyle = {\n  stroke: '#91d5ff',\n  endArrow: {\n    path: G6.Arrow.vee(10, 10),\n    fill: '#91d5ff'\n  }\n};\nvar defaultLayout = {\n  type: 'dagre',\n  rankdir: 'LR',\n  nodesep: 30,\n  ranksep: 50\n};\nvar defaultLabelCfg = {\n  style: {\n    fill: '#000000A6',\n    fontSize: 10\n  }\n};\nvar graph;\n\nvar DagreFundFlowGraph = function DagreFundFlowGraph(_ref) {\n  var data = _ref.data,\n      className = _ref.className,\n      style = _ref.style,\n      width = _ref.width,\n      height = _ref.height,\n      _ref$nodeType = _ref.nodeType,\n      nodeType = _ref$nodeType === void 0 ? 'round-rect' : _ref$nodeType,\n      _ref$edgeType = _ref.edgeType,\n      edgeType = _ref$edgeType === void 0 ? 'fund-polyline' : _ref$edgeType,\n      _ref$behaviors = _ref.behaviors,\n      behaviors = _ref$behaviors === void 0 ? ['zoom-canvas', 'drag-canvas'] : _ref$behaviors,\n      _ref$nodeSize = _ref.nodeSize,\n      nodeSize = _ref$nodeSize === void 0 ? defaultNodeSize : _ref$nodeSize,\n      _ref$nodeLabelCfg = _ref.nodeLabelCfg,\n      nodeLabelCfg = _ref$nodeLabelCfg === void 0 ? defaultLabelCfg : _ref$nodeLabelCfg,\n      _ref$edgeLabelCfg = _ref.edgeLabelCfg,\n      edgeLabelCfg = _ref$edgeLabelCfg === void 0 ? defaultLabelCfg : _ref$edgeLabelCfg,\n      _ref$nodeAnchorPoints = _ref.nodeAnchorPoints,\n      nodeAnchorPoints = _ref$nodeAnchorPoints === void 0 ? defaultNodeAnchorPoints : _ref$nodeAnchorPoints,\n      _ref$layout = _ref.layout,\n      layout = _ref$layout === void 0 ? defaultLayout : _ref$layout,\n      minimapCfg = _ref.minimapCfg,\n      _ref$nodeStyle = _ref.nodeStyle,\n      nodeStyle = _ref$nodeStyle === void 0 ? defaultNodeStyle : _ref$nodeStyle,\n      _ref$edgeStyle = _ref.edgeStyle,\n      edgeStyle = _ref$edgeStyle === void 0 ? defaultEdgeStyle : _ref$edgeStyle,\n      _ref$nodeStateStyles = _ref.nodeStateStyles,\n      nodeStateStyles = _ref$nodeStateStyles === void 0 ? defaultStateStyles : _ref$nodeStateStyles,\n      _ref$edgeStateStyles = _ref.edgeStateStyles,\n      edgeStateStyles = _ref$edgeStateStyles === void 0 ? defaultStateStyles : _ref$edgeStateStyles,\n      _ref$colorMap = _ref.colorMap,\n      colorMap = _ref$colorMap === void 0 ? {} : _ref$colorMap,\n      handleEdgeClick = _ref.handleEdgeClick,\n      handleEdgeHover = _ref.handleEdgeHover,\n      handleEdgeUnHover = _ref.handleEdgeUnHover,\n      handleNodeClick = _ref.handleNodeClick,\n      handleNodeHover = _ref.handleNodeHover,\n      handleNodeUnHover = _ref.handleNodeUnHover,\n      handleCanvasClick = _ref.handleCanvasClick,\n      graphRef = _ref.graphRef;\n  var container = React.useRef(null);\n  var props = {\n    data: data,\n    className: className,\n    style: style,\n    width: width,\n    height: height,\n    nodeType: nodeType,\n    edgeType: edgeType,\n    behaviors: behaviors,\n    nodeSize: nodeSize,\n    nodeLabelCfg: nodeLabelCfg,\n    edgeLabelCfg: edgeLabelCfg,\n    nodeAnchorPoints: nodeAnchorPoints,\n    layout: layout,\n    minimapCfg: minimapCfg,\n    nodeStyle: nodeStyle,\n    edgeStyle: edgeStyle,\n    nodeStateStyles: nodeStateStyles,\n    edgeStateStyles: edgeStateStyles,\n    colorMap: colorMap,\n    handleEdgeClick: handleEdgeClick,\n    handleEdgeHover: handleEdgeHover,\n    handleEdgeUnHover: handleEdgeUnHover,\n    handleNodeClick: handleNodeClick,\n    handleNodeHover: handleNodeHover,\n    handleNodeUnHover: handleNodeUnHover,\n    handleCanvasClick: handleCanvasClick,\n    graphRef: graphRef\n  };\n  useGraph(graph, props, container);\n  useEffect(function () {\n    var graphSize = getGraphSize(width, height, container);\n\n    if (!graph || graph.destroyed) {\n      graph = new G6.Graph({\n        container: container.current,\n        width: graphSize[0],\n        height: graphSize[1],\n        modes: {\n          default: behaviors\n        },\n        defaultNode: {\n          type: nodeType,\n          size: nodeSize,\n          style: nodeStyle,\n          anchorPoints: nodeAnchorPoints,\n          labelCfg: nodeLabelCfg\n        },\n        defaultEdge: {\n          type: edgeType,\n          style: edgeStyle,\n          colorMap: colorMap,\n          labelCfg: edgeLabelCfg\n        },\n        nodeStateStyles: nodeStateStyles,\n        edgeStateStyles: edgeStateStyles,\n        layout: layout\n      });\n\n      if (graphRef) {\n        graphRef.current = graph;\n      }\n    }\n\n    processMinimap(minimapCfg, graph);\n    graph.data(data);\n    graph.render(); // modify the node color according to the in edge\n\n    var edges = graph.getEdges();\n    edges.forEach(function (edge) {\n      var line = edge.getKeyShape();\n      var stroke = line.attr('stroke');\n      var targetNode = edge.getTarget();\n      targetNode.update({\n        style: {\n          stroke: stroke\n        }\n      });\n    });\n    graph.fitView();\n    graph.on('edge:mouseenter', function (evt) {\n      var item = evt.item;\n      graph.setItemState(item, 'hover', true);\n\n      if (handleEdgeHover) {\n        handleEdgeHover(item, graph);\n      }\n    });\n    graph.on('edge:mouseleave', function (evt) {\n      var item = evt.item;\n      graph.setItemState(item, 'hover', false);\n\n      if (handleEdgeUnHover) {\n        handleEdgeUnHover(item, graph);\n      }\n    });\n    graph.on('edge:click', function (evt) {\n      var item = evt.item;\n\n      if (handleEdgeClick) {\n        handleEdgeClick(item, graph);\n      }\n    });\n    graph.on('node:mouseenter', function (evt) {\n      var item = evt.item;\n      graph.setItemState(item, 'hover', false);\n\n      if (handleNodeHover) {\n        handleNodeHover(item, graph);\n      }\n    });\n    graph.on('node:mouseleave', function (evt) {\n      var item = evt.item;\n      graph.setItemState(item, 'hover', false);\n\n      if (handleNodeUnHover) {\n        handleNodeUnHover(item, graph);\n      }\n    });\n    graph.on('node:click', function (evt) {\n      var item = evt.item;\n\n      if (handleNodeClick) {\n        handleNodeClick(item, graph);\n      }\n    });\n    graph.on('canvas:click', function (evt) {\n      handleCanvasClick && handleCanvasClick(graph);\n    });\n    return function () {\n      return graph.destroy();\n    };\n  }, []);\n  return React.createElement(ErrorBoundary, null, React.createElement(\"div\", {\n    className: className,\n    style: style,\n    ref: container\n  }));\n};\n\nexport default DagreFundFlowGraph;"]},"metadata":{},"sourceType":"module"}