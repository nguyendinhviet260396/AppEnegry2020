{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { deepMix } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport RoseLayer from '../rose/layer';\n\nvar GroupedRoseLayer =\n/** @class */\nfunction (_super) {\n  __extends(GroupedRoseLayer, _super);\n\n  function GroupedRoseLayer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'groupedRose';\n    _this.baseType = 'rose';\n    return _this;\n  }\n\n  GroupedRoseLayer.getDefaultOptions = function () {\n    return deepMix({}, _super.getDefaultOptions.call(this), {\n      xAxis: {\n        visible: true,\n        line: {\n          visible: false\n        },\n        tickLine: {\n          visible: false\n        },\n        grid: {\n          visible: true,\n          alignTick: false,\n          style: {\n            lineWidth: 0.5\n          }\n        },\n        label: {\n          offset: 5,\n          autoRotate: true\n        }\n      },\n      yAxis: {\n        visible: false\n      }\n    });\n  };\n\n  GroupedRoseLayer.prototype.getColorScale = function () {\n    var groupField = this.options.groupField;\n\n    if (groupField) {\n      return this.view.getScaleByField(groupField);\n    }\n  };\n\n  GroupedRoseLayer.prototype.adjustRoseAdjust = function () {\n    return [{\n      type: 'dodge',\n      marginRatio: 1\n    }];\n  };\n\n  GroupedRoseLayer.prototype.geometryTooltip = function () {\n    this.rose.tooltip = {};\n    var tooltipOptions = this.options.tooltip;\n\n    if (tooltipOptions.fields) {\n      this.rose.tooltip.fields = tooltipOptions.fields;\n    }\n\n    if (tooltipOptions.formatter) {\n      this.rose.tooltip.callback = tooltipOptions.formatter;\n\n      if (!tooltipOptions.fields) {\n        this.rose.tooltip.fields = [this.options.radiusField, this.options.categoryField, this.options.groupField];\n      }\n    }\n  };\n\n  return GroupedRoseLayer;\n}(RoseLayer);\n\nexport default GroupedRoseLayer;\nregisterPlotType('groupedRose', GroupedRoseLayer);","map":{"version":3,"sources":["../../../src/plots/grouped-rose/layer.ts"],"names":[],"mappings":";AAAA,SAAS,OAAT,QAAwB,YAAxB;AACA,SAAS,gBAAT,QAAiC,mBAAjC;AAEA,OAAO,SAAP,MAA0C,eAA1C;;AAQA,IAAA,gBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAyG,EAAA,SAAA,CAAA,gBAAA,EAAA,MAAA,CAAA;;AAAzG,WAAA,gBAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;;AA6BS,IAAA,KAAA,CAAA,IAAA,GAAe,aAAf;AACA,IAAA,KAAA,CAAA,QAAA,GAAmB,MAAnB;;AA+BR;;AA5De,EAAA,gBAAA,CAAA,iBAAA,GAAd,YAAA;AACE,WAAO,OAAO,CAAC,EAAD,EAAK,MAAA,CAAM,iBAAN,CAAuB,IAAvB,CAAuB,IAAvB,CAAL,EAAgC;AAC5C,MAAA,KAAK,EAAE;AACL,QAAA,OAAO,EAAE,IADJ;AAEL,QAAA,IAAI,EAAE;AACJ,UAAA,OAAO,EAAE;AADL,SAFD;AAKL,QAAA,QAAQ,EAAE;AACR,UAAA,OAAO,EAAE;AADD,SALL;AAQL,QAAA,IAAI,EAAE;AACJ,UAAA,OAAO,EAAE,IADL;AAEJ,UAAA,SAAS,EAAE,KAFP;AAGJ,UAAA,KAAK,EAAE;AACL,YAAA,SAAS,EAAE;AADN;AAHH,SARD;AAeL,QAAA,KAAK,EAAE;AACL,UAAA,MAAM,EAAE,CADH;AAEL,UAAA,UAAU,EAAE;AAFP;AAfF,OADqC;AAqB5C,MAAA,KAAK,EAAE;AACL,QAAA,OAAO,EAAE;AADJ;AArBqC,KAAhC,CAAd;AAyBD,GA1Ba;;AA+BP,EAAA,gBAAA,CAAA,SAAA,CAAA,aAAA,GAAP,YAAA;AACU,QAAA,UAAU,GAAK,KAAK,OAAL,CAAL,UAAV;;AACR,QAAI,UAAJ,EAAgB;AACd,aAAO,KAAK,IAAL,CAAU,eAAV,CAA0B,UAA1B,CAAP;AACD;AACF,GALM;;AAOG,EAAA,gBAAA,CAAA,SAAA,CAAA,gBAAA,GAAV,YAAA;AACE,WAAO,CACL;AACE,MAAA,IAAI,EAAE,OADR;AAEE,MAAA,WAAW,EAAE;AAFf,KADK,CAAP;AAMD,GAPS;;AASA,EAAA,gBAAA,CAAA,SAAA,CAAA,eAAA,GAAV,YAAA;AACE,SAAK,IAAL,CAAU,OAAV,GAAoB,EAApB;AACA,QAAM,cAAc,GAAQ,KAAK,OAAL,CAAa,OAAzC;;AACA,QAAI,cAAc,CAAC,MAAnB,EAA2B;AACzB,WAAK,IAAL,CAAU,OAAV,CAAkB,MAAlB,GAA2B,cAAc,CAAC,MAA1C;AACD;;AACD,QAAI,cAAc,CAAC,SAAnB,EAA8B;AAC5B,WAAK,IAAL,CAAU,OAAV,CAAkB,QAAlB,GAA6B,cAAc,CAAC,SAA5C;;AACA,UAAI,CAAC,cAAc,CAAC,MAApB,EAA4B;AAC1B,aAAK,IAAL,CAAU,OAAV,CAAkB,MAAlB,GAA2B,CAAC,KAAK,OAAL,CAAa,WAAd,EAA2B,KAAK,OAAL,CAAa,aAAxC,EAAuD,KAAK,OAAL,CAAa,UAApE,CAA3B;AACD;AACF;AACF,GAZS;;AAaZ,SAAA,gBAAA;AAAC,CA7DD,CAAyG,SAAzG,CAAA;;;AA+DA,gBAAgB,CAAC,aAAD,EAAgB,gBAAhB,CAAhB","sourcesContent":["import { deepMix } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport { LayerConfig } from '../../base/layer';\nimport RoseLayer, { RoseViewConfig } from '../rose/layer';\n\nexport interface GroupedRoseViewConfig extends RoseViewConfig {\n  groupField: string;\n}\n\nexport interface GroupedRoseLayerConfig extends GroupedRoseViewConfig, LayerConfig {}\n\nexport default class GroupedRoseLayer<T extends GroupedRoseLayerConfig = GroupedRoseLayerConfig> extends RoseLayer<T> {\n  public static getDefaultOptions() {\n    return deepMix({}, super.getDefaultOptions(), {\n      xAxis: {\n        visible: true,\n        line: {\n          visible: false,\n        },\n        tickLine: {\n          visible: false,\n        },\n        grid: {\n          visible: true,\n          alignTick: false,\n          style: {\n            lineWidth: 0.5,\n          },\n        },\n        label: {\n          offset: 5,\n          autoRotate: true,\n        },\n      },\n      yAxis: {\n        visible: false,\n      },\n    });\n  }\n\n  public type: string = 'groupedRose';\n  public baseType: string = 'rose';\n\n  public getColorScale() {\n    const { groupField } = this.options;\n    if (groupField) {\n      return this.view.getScaleByField(groupField);\n    }\n  }\n\n  protected adjustRoseAdjust() {\n    return [\n      {\n        type: 'dodge',\n        marginRatio: 1,\n      },\n    ];\n  }\n\n  protected geometryTooltip() {\n    this.rose.tooltip = {};\n    const tooltipOptions: any = this.options.tooltip;\n    if (tooltipOptions.fields) {\n      this.rose.tooltip.fields = tooltipOptions.fields;\n    }\n    if (tooltipOptions.formatter) {\n      this.rose.tooltip.callback = tooltipOptions.formatter;\n      if (!tooltipOptions.fields) {\n        this.rose.tooltip.fields = [this.options.radiusField, this.options.categoryField, this.options.groupField];\n      }\n    }\n  }\n}\n\nregisterPlotType('groupedRose', GroupedRoseLayer);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}