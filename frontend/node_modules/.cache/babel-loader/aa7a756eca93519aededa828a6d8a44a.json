{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { each, deepMix, minBy, maxBy } from '@antv/util';\nimport { getScale } from '@antv/scale';\nimport { regressionLinear, regressionExp, regressionLoess, regressionLog, regressionPoly, regressionPow, regressionQuad } from 'd3-regression';\nimport { getSplinePath } from '../../../util/path';\nvar REGRESSION_MAP = {\n  exp: regressionExp,\n  linear: regressionLinear,\n  loess: regressionLoess,\n  log: regressionLog,\n  poly: regressionPoly,\n  pow: regressionPow,\n  quad: regressionQuad\n};\n\nfunction se95(p, n) {\n  return Math.sqrt(p * (1 - p) / n) * 1.96;\n}\n\nvar TrendLine =\n/** @class */\nfunction () {\n  function TrendLine(cfg) {\n    var defaultOptions = {\n      type: 'linear',\n      style: {\n        stroke: '#9ba29a',\n        lineWidth: 2,\n        opacity: 0.5,\n        lineJoin: 'round',\n        lineCap: 'round'\n      },\n      showConfidence: false,\n      confidenceStyle: {\n        fill: '#ccc',\n        opacity: 0.1\n      }\n    };\n    this.options = deepMix({}, defaultOptions, cfg);\n    this.view = this.options.view;\n    this.init();\n  }\n\n  TrendLine.prototype.init = function () {\n    // 处理数据\n    var _a = this.options.plotOptions,\n        xField = _a.xField,\n        yField = _a.yField,\n        data = _a.data;\n    var reg = REGRESSION_MAP[this.options.type]().x(function (d) {\n      return d[xField];\n    }).y(function (d) {\n      return d[yField];\n    });\n    this.data = this.processData(reg(data)); // 创建container\n\n    this.container = this.view.backgroundGroup.addGroup();\n  };\n\n  TrendLine.prototype.render = function () {\n    var xscale_view = this.view.getScaleByField(this.options.plotOptions.xField);\n    var yscale_view = this.view.getScaleByField(this.options.plotOptions.yField);\n    var coord = this.view.getCoordinate();\n    var trendlineData = this.data.trendlineData; // 创建图形绘制的scale\n\n    var LinearScale = getScale('linear');\n    var xRange = this.adjustScale(xscale_view, trendlineData, 'x');\n    var xScale = new LinearScale({\n      min: xRange.min,\n      max: xRange.max\n    });\n    var yRange = this.adjustScale(yscale_view, trendlineData, 'y');\n    var yScale = new LinearScale({\n      min: yRange.min,\n      max: yRange.max\n    }); // 绘制置信区间曲线\n\n    if (this.options.showConfidence) {\n      var confidencePath = this.getConfidencePath(xScale, yScale, coord);\n      this.container.addShape('path', {\n        attrs: __assign({\n          path: confidencePath\n        }, this.options.confidenceStyle),\n        name: 'confidence'\n      });\n    } // 绘制trendline\n\n\n    var points = this.getTrendlinePoints(xScale, yScale, coord);\n    var constraint = [[0, 0], [1, 1]];\n    var path = getSplinePath(points, false, constraint);\n    this.shape = this.container.addShape('path', {\n      attrs: __assign({\n        path: path\n      }, this.options.style),\n      name: 'trendline'\n    });\n  };\n\n  TrendLine.prototype.clear = function () {\n    if (this.container) {\n      this.container.clear();\n    }\n  };\n\n  TrendLine.prototype.destroy = function () {\n    if (this.container) {\n      this.container.destroy();\n    }\n  };\n\n  TrendLine.prototype.processData = function (data) {\n    var trendline = [];\n    var confidence = [];\n    each(data, function (d) {\n      trendline.push({\n        x: d[0],\n        y: d[1]\n      });\n      var conf = se95(data.rSquared, d[1]);\n      confidence.push({\n        x: d[0],\n        y0: d[1] - conf,\n        y1: d[1] + conf\n      });\n    });\n    return {\n      trendlineData: trendline,\n      confidenceData: confidence\n    };\n  };\n\n  TrendLine.prototype.getTrendlinePoints = function (xScale, yScale, coord) {\n    var points = [];\n    each(this.data.trendlineData, function (d) {\n      var xRatio = xScale.scale(d.x);\n      var yRatio = yScale.scale(d.y);\n      var x = coord.start.x + coord.width * xRatio;\n      var y = coord.start.y - coord.height * yRatio;\n      points.push({\n        x: x,\n        y: y\n      });\n    });\n    return points;\n  };\n\n  TrendLine.prototype.getConfidencePath = function (xScale, yScale, coord) {\n    var upperPoints = [];\n    var lowerPoints = [];\n    var path = [];\n    each(this.data.confidenceData, function (d) {\n      var xRatio = xScale.scale(d.x);\n      var y0Ratio = yScale.scale(d.y0);\n      var y1Ratio = yScale.scale(d.y1);\n      var x = coord.start.x + coord.width * xRatio;\n      var y0 = coord.start.y - coord.height * y0Ratio;\n      var y1 = coord.start.y - coord.height * y1Ratio;\n      upperPoints.push({\n        x: x,\n        y: y0\n      });\n      lowerPoints.push({\n        x: x,\n        y: y1\n      });\n    });\n\n    for (var i = 0; i < upperPoints.length; i++) {\n      var flag = i === 0 ? 'M' : 'L';\n      var p = upperPoints[i];\n\n      if (!isNaN(p.x) && !isNaN(p.y)) {\n        path.push([flag, p.x, p.y]);\n      }\n    }\n\n    for (var j = lowerPoints.length - 1; j > 0; j--) {\n      var p = lowerPoints[j];\n\n      if (!isNaN(p.x) && !isNaN(p.y)) {\n        path.push(['L', p.x, p.y]);\n      }\n    }\n\n    return path;\n  };\n\n  TrendLine.prototype.adjustScale = function (viewScale, trendlineData, dim) {\n    // 处理用户自行配置min max的情况\n    var min = viewScale.min,\n        max = viewScale.max;\n    var _a = this.options.plotOptions,\n        data = _a.data,\n        xField = _a.xField,\n        yField = _a.yField;\n    var field = dim === 'x' ? xField : yField;\n    var dataMin = minBy(data, field)[field];\n    var dataMax = maxBy(data, field)[field];\n    var minRatio = (min - dataMin) / (dataMax - dataMin);\n    var maxRatio = (max - dataMax) / (dataMax - dataMin);\n    var trendMin = minBy(trendlineData, dim)[dim];\n    var trendMax = maxBy(trendlineData, dim)[dim];\n    return {\n      min: trendMin + minRatio * (trendMax - trendMin),\n      max: trendMax + maxRatio * (trendMax - trendMin)\n    };\n  };\n\n  return TrendLine;\n}();\n\nexport default TrendLine;","map":{"version":3,"sources":["../../../../src/plots/scatter/components/trendline.ts"],"names":[],"mappings":"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","sourcesContent":["import { each, deepMix, minBy, maxBy } from '@antv/util';\nimport { View, IGroup, IShape } from '../../../dependents';\nimport { getScale } from '@antv/scale';\nimport {\n  regressionLinear,\n  regressionExp,\n  regressionLoess,\n  regressionLog,\n  regressionPoly,\n  regressionPow,\n  regressionQuad,\n} from 'd3-regression';\n\nimport { getSplinePath } from '../../../util/path';\n\nconst REGRESSION_MAP = {\n  exp: regressionExp,\n  linear: regressionLinear,\n  loess: regressionLoess,\n  log: regressionLog,\n  poly: regressionPoly,\n  pow: regressionPow,\n  quad: regressionQuad,\n};\n\nexport interface TrendlineConfig {\n  visible?: boolean;\n  type?: string;\n  style?: any;\n  showConfidence?: boolean;\n  confidenceStyle?: any;\n}\n\nexport interface ITrendline extends TrendlineConfig {\n  view: View;\n  plotOptions: any;\n}\n\nfunction se95(p, n) {\n  return Math.sqrt((p * (1 - p)) / n) * 1.96;\n}\n\nexport default class TrendLine {\n  public data: { trendlineData: any[]; confidenceData: any[] };\n  protected options: any;\n  protected view: View;\n  protected container: IGroup;\n  protected shape: IShape;\n\n  constructor(cfg: ITrendline) {\n    const defaultOptions = {\n      type: 'linear',\n      style: {\n        stroke: '#9ba29a',\n        lineWidth: 2,\n        opacity: 0.5,\n        lineJoin: 'round',\n        lineCap: 'round',\n      },\n      showConfidence: false,\n      confidenceStyle: {\n        fill: '#ccc',\n        opacity: 0.1,\n      },\n    };\n    this.options = deepMix({}, defaultOptions, cfg);\n    this.view = this.options.view;\n    this.init();\n  }\n\n  public init() {\n    // 处理数据\n    const { xField, yField, data } = this.options.plotOptions;\n    const reg = REGRESSION_MAP[this.options.type]()\n      .x((d) => d[xField])\n      .y((d) => d[yField]);\n    this.data = this.processData(reg(data));\n    // 创建container\n    this.container = this.view.backgroundGroup.addGroup();\n  }\n\n  public render() {\n    const xscale_view = this.view.getScaleByField(this.options.plotOptions.xField);\n    const yscale_view = this.view.getScaleByField(this.options.plotOptions.yField);\n    const coord = this.view.getCoordinate();\n    const { trendlineData } = this.data;\n    // 创建图形绘制的scale\n    const LinearScale = getScale('linear');\n    const xRange = this.adjustScale(xscale_view, trendlineData, 'x');\n    const xScale = new LinearScale({\n      min: xRange.min,\n      max: xRange.max,\n      // nice: xscale_view.nice,\n    });\n    const yRange = this.adjustScale(yscale_view, trendlineData, 'y');\n    const yScale = new LinearScale({\n      min: yRange.min,\n      max: yRange.max,\n      // nice: yscale_view.nice,\n    });\n    // 绘制置信区间曲线\n    if (this.options.showConfidence) {\n      const confidencePath = this.getConfidencePath(xScale, yScale, coord);\n      this.container.addShape('path', {\n        attrs: {\n          path: confidencePath,\n          ...this.options.confidenceStyle,\n        },\n        name: 'confidence',\n      });\n    }\n    // 绘制trendline\n    const points = this.getTrendlinePoints(xScale, yScale, coord);\n    const constraint = [\n      [0, 0],\n      [1, 1],\n    ];\n    const path = getSplinePath(points, false, constraint);\n    this.shape = this.container.addShape('path', {\n      attrs: {\n        path,\n        ...this.options.style,\n      },\n      name: 'trendline',\n    });\n  }\n\n  public clear() {\n    if (this.container) {\n      this.container.clear();\n    }\n  }\n\n  public destroy() {\n    if (this.container) {\n      this.container.destroy();\n    }\n  }\n\n  private processData(data) {\n    const trendline = [];\n    const confidence = [];\n    each(data, (d) => {\n      trendline.push({ x: d[0], y: d[1] });\n      const conf = se95(data.rSquared, d[1]);\n      confidence.push({ x: d[0], y0: d[1] - conf, y1: d[1] + conf });\n    });\n    return { trendlineData: trendline, confidenceData: confidence };\n  }\n\n  private getTrendlinePoints(xScale, yScale, coord) {\n    const points = [];\n    each(this.data.trendlineData, (d) => {\n      const xRatio = xScale.scale(d.x);\n      const yRatio = yScale.scale(d.y);\n      const x = coord.start.x + coord.width * xRatio;\n      const y = coord.start.y - coord.height * yRatio;\n      points.push({ x, y });\n    });\n    return points;\n  }\n\n  private getConfidencePath(xScale, yScale, coord) {\n    const upperPoints = [];\n    const lowerPoints = [];\n    const path = [];\n    each(this.data.confidenceData, (d) => {\n      const xRatio = xScale.scale(d.x);\n      const y0Ratio = yScale.scale(d.y0);\n      const y1Ratio = yScale.scale(d.y1);\n      const x = coord.start.x + coord.width * xRatio;\n      const y0 = coord.start.y - coord.height * y0Ratio;\n      const y1 = coord.start.y - coord.height * y1Ratio;\n      upperPoints.push({ x, y: y0 });\n      lowerPoints.push({ x, y: y1 });\n    });\n    for (let i = 0; i < upperPoints.length; i++) {\n      const flag = i === 0 ? 'M' : 'L';\n      const p = upperPoints[i];\n      if (!isNaN(p.x) && !isNaN(p.y)) {\n        path.push([flag, p.x, p.y]);\n      }\n    }\n    for (let j = lowerPoints.length - 1; j > 0; j--) {\n      const p = lowerPoints[j];\n      if (!isNaN(p.x) && !isNaN(p.y)) {\n        path.push(['L', p.x, p.y]);\n      }\n    }\n    return path;\n  }\n\n  private adjustScale(viewScale, trendlineData, dim) {\n    // 处理用户自行配置min max的情况\n    const { min, max } = viewScale;\n    const { data, xField, yField } = this.options.plotOptions;\n    const field = dim === 'x' ? xField : yField;\n    const dataMin = minBy(data, field)[field];\n    const dataMax = maxBy(data, field)[field];\n    const minRatio = (min - dataMin) / (dataMax - dataMin);\n    const maxRatio = (max - dataMax) / (dataMax - dataMin);\n    const trendMin = minBy(trendlineData, dim)[dim];\n    const trendMax = maxBy(trendlineData, dim)[dim];\n    return {\n      min: trendMin + minRatio * (trendMax - trendMin),\n      max: trendMax + maxRatio * (trendMax - trendMin),\n    };\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}