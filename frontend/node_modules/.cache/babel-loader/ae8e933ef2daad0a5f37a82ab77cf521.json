{"ast":null,"code":"import { __extends } from \"tslib\";\n/**\n * 可插拔的状态量管理机\n */\n// todo: 后续还需要加入交互互斥的维护机制\n\nimport EventEmitter from '@antv/event-emitter';\nimport { each } from '@antv/util';\n\nvar StateManager =\n/** @class */\nfunction (_super) {\n  __extends(StateManager, _super);\n\n  function StateManager() {\n    var _this = _super.call(this) || this;\n\n    _this._states = {};\n    _this._stateStack = {};\n    return _this;\n  }\n\n  StateManager.prototype.setState = function (name, exp) {\n    this._stateStack[name] = exp;\n\n    this._onUpdate();\n  };\n\n  StateManager.prototype.getState = function (name) {\n    return this._states[name];\n  };\n\n  StateManager.prototype.getAllStates = function () {\n    return this._states;\n  };\n\n  StateManager.prototype.clear = function () {\n    this._states = {};\n    this._stateStack = {};\n\n    if (this._changeTimer) {\n      clearTimeout(this._changeTimer);\n      this._changeTimer = null;\n    }\n  };\n\n  StateManager.prototype._onUpdate = function () {\n    var _this = this;\n\n    var stateStack = this._stateStack;\n\n    if (this._changeTimer) {\n      clearTimeout(this._changeTimer);\n      this._changeTimer = null;\n    }\n\n    this._changeTimer = setTimeout(function () {\n      // for (const name in stateStack) {\n      each(stateStack, function (exp, name) {\n        var state = stateStack[name];\n\n        if (!_this._states[name] || _this._states[name] !== exp) {\n          // update states\n          _this._states[name] = exp; // dispatch state event\n\n          _this._triggerEvent(name, state);\n        }\n      }); // }\n      // clear stack\n\n      _this._stateStack = {};\n    }, 16);\n  };\n\n  StateManager.prototype._triggerEvent = function (name, exp) {\n    this.emit(name + \":change\", {\n      name: name,\n      exp: exp\n    });\n  };\n\n  return StateManager;\n}(EventEmitter);\n\nexport default StateManager;","map":{"version":3,"sources":["../../src/util/state-manager.ts"],"names":[],"mappings":";AAAA;;;AAGA;;AACA,OAAO,YAAP,MAAyB,qBAAzB;AACA,SAAS,IAAT,QAAqB,YAArB;;AAKA,IAAA,YAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA0C,EAAA,SAAA,CAAA,YAAA,EAAA,MAAA,CAAA;;AAKxC,WAAA,YAAA,GAAA;AAAA,QAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADT;;AAEE,IAAA,KAAI,CAAC,OAAL,GAAe,EAAf;AACA,IAAA,KAAI,CAAC,WAAL,GAAmB,EAAnB;;AACD;;AAEM,EAAA,YAAA,CAAA,SAAA,CAAA,QAAA,GAAP,UAAgB,IAAhB,EAA8B,GAA9B,EAAsC;AACpC,SAAK,WAAL,CAAiB,IAAjB,IAAyB,GAAzB;;AACA,SAAK,SAAL;AACD,GAHM;;AAKA,EAAA,YAAA,CAAA,SAAA,CAAA,QAAA,GAAP,UAAgB,IAAhB,EAA4B;AAC1B,WAAO,KAAK,OAAL,CAAa,IAAb,CAAP;AACD,GAFM;;AAIA,EAAA,YAAA,CAAA,SAAA,CAAA,YAAA,GAAP,YAAA;AACE,WAAO,KAAK,OAAZ;AACD,GAFM;;AAIA,EAAA,YAAA,CAAA,SAAA,CAAA,KAAA,GAAP,YAAA;AACE,SAAK,OAAL,GAAe,EAAf;AACA,SAAK,WAAL,GAAmB,EAAnB;;AACA,QAAI,KAAK,YAAT,EAAuB;AACrB,MAAA,YAAY,CAAC,KAAK,YAAN,CAAZ;AACA,WAAK,YAAL,GAAoB,IAApB;AACD;AACF,GAPM;;AASC,EAAA,YAAA,CAAA,SAAA,CAAA,SAAA,GAAR,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACE,QAAM,UAAU,GAAG,KAAK,WAAxB;;AAEA,QAAI,KAAK,YAAT,EAAuB;AACrB,MAAA,YAAY,CAAC,KAAK,YAAN,CAAZ;AACA,WAAK,YAAL,GAAoB,IAApB;AACD;;AAED,SAAK,YAAL,GAAoB,UAAU,CAAC,YAAA;AAC7B;AACA,MAAA,IAAI,CAAC,UAAD,EAAa,UAAC,GAAD,EAAM,IAAN,EAAU;AACzB,YAAM,KAAK,GAAG,UAAU,CAAC,IAAD,CAAxB;;AACA,YAAI,CAAC,KAAI,CAAC,OAAL,CAAa,IAAb,CAAD,IAAuB,KAAI,CAAC,OAAL,CAAa,IAAb,MAAuB,GAAlD,EAAuD;AACrD;AACA,UAAA,KAAI,CAAC,OAAL,CAAa,IAAb,IAAqB,GAArB,CAFqD,CAGrD;;AACA,UAAA,KAAI,CAAC,aAAL,CAAmB,IAAnB,EAAyB,KAAzB;AACD;AACF,OARG,CAAJ,CAF6B,CAW7B;AACA;;AACA,MAAA,KAAI,CAAC,WAAL,GAAmB,EAAnB;AACD,KAd6B,EAc3B,EAd2B,CAA9B;AAeD,GAvBO;;AAyBA,EAAA,YAAA,CAAA,SAAA,CAAA,aAAA,GAAR,UAAsB,IAAtB,EAAoC,GAApC,EAA4C;AAC1C,SAAK,IAAL,CAAa,IAAI,GAAA,SAAjB,EAA4B;AAC1B,MAAA,IAAI,EAAA,IADsB;AAE1B,MAAA,GAAG,EAAA;AAFuB,KAA5B;AAID,GALO;;AAMV,SAAA,YAAA;AAAC,CAhED,CAA0C,YAA1C,CAAA","sourcesContent":["/**\n * 可插拔的状态量管理机\n */\n// todo: 后续还需要加入交互互斥的维护机制\nimport EventEmitter from '@antv/event-emitter';\nimport { each } from '@antv/util';\nimport { LooseMap } from '../interface/types';\n\ntype States = LooseMap;\n\nexport default class StateManager extends EventEmitter {\n  private _states: States;\n  private _stateStack: States;\n  private _changeTimer: any;\n\n  constructor() {\n    super();\n    this._states = {};\n    this._stateStack = {};\n  }\n\n  public setState(name: string, exp: any) {\n    this._stateStack[name] = exp;\n    this._onUpdate();\n  }\n\n  public getState(name: string) {\n    return this._states[name];\n  }\n\n  public getAllStates() {\n    return this._states;\n  }\n\n  public clear() {\n    this._states = {};\n    this._stateStack = {};\n    if (this._changeTimer) {\n      clearTimeout(this._changeTimer);\n      this._changeTimer = null;\n    }\n  }\n\n  private _onUpdate() {\n    const stateStack = this._stateStack;\n\n    if (this._changeTimer) {\n      clearTimeout(this._changeTimer);\n      this._changeTimer = null;\n    }\n\n    this._changeTimer = setTimeout(() => {\n      // for (const name in stateStack) {\n      each(stateStack, (exp, name) => {\n        const state = stateStack[name];\n        if (!this._states[name] || this._states[name] !== exp) {\n          // update states\n          this._states[name] = exp;\n          // dispatch state event\n          this._triggerEvent(name, state);\n        }\n      });\n      // }\n      // clear stack\n      this._stateStack = {};\n    }, 16);\n  }\n\n  private _triggerEvent(name: string, exp: any) {\n    this.emit(`${name}:change`, {\n      name,\n      exp,\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}