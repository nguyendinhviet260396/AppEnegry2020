{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getName = exports.syncScale = exports.createScaleByField = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar util_1 = require(\"@antv/util\");\n\nvar dependents_1 = require(\"../dependents\");\n\nvar dateRegex = /^(?:(?!0000)[0-9]{4}([-/.]+)(?:(?:0?[1-9]|1[0-2])\\1(?:0?[1-9]|1[0-9]|2[0-8])|(?:0?[13-9]|1[0-2])\\1(?:29|30)|(?:0?[13578]|1[02])\\1(?:31))|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)([-/.]+)0?2\\2(?:29))(\\s+([01]|([01][0-9]|2[0-3])):([0-9]|[0-5][0-9]):([0-9]|[0-5][0-9]))?$/;\n/**\n * 获取字段对应数据的类型\n * @param field 数据字段名\n * @param data 数据源\n * @returns default type 返回对应的数据类型\n */\n\nfunction getDefaultType(value) {\n  var type = 'linear';\n\n  if (dateRegex.test(value)) {\n    type = 'time';\n  } else if (util_1.isString(value)) {\n    type = 'cat';\n  }\n\n  return type;\n}\n/**\n * @ignore\n * 为指定的 `field` 字段数据创建 scale\n * @param field 字段名\n * @param [data] 数据集，可为空\n * @param [scaleDef] 列定义，可为空\n * @returns scale 返回创建的 Scale 实例\n */\n\n\nfunction createScaleByField(field, data, scaleDef) {\n  var validData = data || [];\n\n  if (util_1.isNumber(field) || util_1.isNil(util_1.firstValue(validData, field)) && util_1.isEmpty(scaleDef)) {\n    var Identity = dependents_1.getScale('identity');\n    return new Identity({\n      field: field.toString(),\n      values: [field]\n    });\n  }\n\n  var values = util_1.valuesOfKey(validData, field); // 如果已经定义过这个度量\n\n  var type = util_1.get(scaleDef, 'type', getDefaultType(values[0]));\n  var ScaleCtor = dependents_1.getScale(type);\n  return new ScaleCtor(tslib_1.__assign({\n    field: field,\n    values: values\n  }, scaleDef));\n}\n\nexports.createScaleByField = createScaleByField;\n/**\n * @ignore\n * 同步 scale\n * @todo 是否可以通过 scale.update() 方法进行更新\n * @param scale 需要同步的 scale 实例\n * @param newScale 同步源 Scale\n */\n\nfunction syncScale(scale, newScale) {\n  if (scale.type !== 'identity' && newScale.type !== 'identity') {\n    var obj = {};\n\n    for (var k in newScale) {\n      if (Object.prototype.hasOwnProperty.call(newScale, k)) {\n        obj[k] = newScale[k];\n      }\n    }\n\n    scale.change(obj);\n  }\n}\n\nexports.syncScale = syncScale;\n/**\n * @ignore\n * get the scale name, if alias exist, return alias, or else field\n * @param scale\n * @returns the name of field\n */\n\nfunction getName(scale) {\n  return scale.alias || scale.field;\n}\n\nexports.getName = getName;","map":{"version":3,"sources":["../../src/util/scale.ts"],"names":[],"mappings":";;;;;;;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAGA,IAAM,SAAS,GAAG,sTAAlB;AAEA;;;;;;;AAMA,SAAS,cAAT,CAAwB,KAAxB,EAAkC;AAChC,MAAI,IAAI,GAAG,QAAX;;AACA,MAAI,SAAS,CAAC,IAAV,CAAe,KAAf,CAAJ,EAA2B;AACzB,IAAA,IAAI,GAAG,MAAP;AACD,GAFD,MAEO,IAAI,MAAA,CAAA,QAAA,CAAS,KAAT,CAAJ,EAAqB;AAC1B,IAAA,IAAI,GAAG,KAAP;AACD;;AACD,SAAO,IAAP;AACD;AAED;;;;;;;;;;AAQA,SAAgB,kBAAhB,CAAmC,KAAnC,EAA2D,IAA3D,EAAsF,QAAtF,EAA4G;AAC1G,MAAM,SAAS,GAAG,IAAI,IAAI,EAA1B;;AAEA,MAAI,MAAA,CAAA,QAAA,CAAS,KAAT,KAAoB,MAAA,CAAA,KAAA,CAAM,MAAA,CAAA,UAAA,CAAW,SAAX,EAAsB,KAAtB,CAAN,KAAuC,MAAA,CAAA,OAAA,CAAQ,QAAR,CAA/D,EAAmF;AACjF,QAAM,QAAQ,GAAG,YAAA,CAAA,QAAA,CAAS,UAAT,CAAjB;AACA,WAAO,IAAI,QAAJ,CAAa;AAClB,MAAA,KAAK,EAAE,KAAK,CAAC,QAAN,EADW;AAElB,MAAA,MAAM,EAAE,CAAC,KAAD;AAFU,KAAb,CAAP;AAID;;AAED,MAAM,MAAM,GAAG,MAAA,CAAA,WAAA,CAAY,SAAZ,EAAuB,KAAvB,CAAf,CAX0G,CAa1G;;AACA,MAAM,IAAI,GAAG,MAAA,CAAA,GAAA,CAAI,QAAJ,EAAc,MAAd,EAAsB,cAAc,CAAC,MAAM,CAAC,CAAD,CAAP,CAApC,CAAb;AACA,MAAM,SAAS,GAAG,YAAA,CAAA,QAAA,CAAS,IAAT,CAAlB;AACA,SAAO,IAAI,SAAJ,CAAa,OAAA,CAAA,QAAA,CAAA;AAClB,IAAA,KAAK,EAAA,KADa;AAElB,IAAA,MAAM,EAAA;AAFY,GAAA,EAGf,QAHe,CAAb,CAAP;AAKD;;AArBD,OAAA,CAAA,kBAAA,GAAA,kBAAA;AAuBA;;;;;;;;AAOA,SAAgB,SAAhB,CAA0B,KAA1B,EAAwC,QAAxC,EAAuD;AACrD,MAAI,KAAK,CAAC,IAAN,KAAe,UAAf,IAA6B,QAAQ,CAAC,IAAT,KAAkB,UAAnD,EAA+D;AAC7D,QAAM,GAAG,GAAG,EAAZ;;AACA,SAAK,IAAM,CAAX,IAAgB,QAAhB,EAA0B;AACxB,UAAI,MAAM,CAAC,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,QAArC,EAA+C,CAA/C,CAAJ,EAAuD;AACrD,QAAA,GAAG,CAAC,CAAD,CAAH,GAAS,QAAQ,CAAC,CAAD,CAAjB;AACD;AACF;;AAED,IAAA,KAAK,CAAC,MAAN,CAAa,GAAb;AACD;AACF;;AAXD,OAAA,CAAA,SAAA,GAAA,SAAA;AAaA;;;;;;;AAMA,SAAgB,OAAhB,CAAwB,KAAxB,EAAoC;AAClC,SAAO,KAAK,CAAC,KAAN,IAAe,KAAK,CAAC,KAA5B;AACD;;AAFD,OAAA,CAAA,OAAA,GAAA,OAAA","sourcesContent":["import { firstValue, get, isEmpty, isNil, isNumber, isString, valuesOfKey } from '@antv/util';\nimport { getScale, Scale } from '../dependents';\nimport { LooseObject, ScaleOption } from '../interface';\n\nconst dateRegex = /^(?:(?!0000)[0-9]{4}([-/.]+)(?:(?:0?[1-9]|1[0-2])\\1(?:0?[1-9]|1[0-9]|2[0-8])|(?:0?[13-9]|1[0-2])\\1(?:29|30)|(?:0?[13578]|1[02])\\1(?:31))|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)([-/.]+)0?2\\2(?:29))(\\s+([01]|([01][0-9]|2[0-3])):([0-9]|[0-5][0-9]):([0-9]|[0-5][0-9]))?$/;\n\n/**\n * 获取字段对应数据的类型\n * @param field 数据字段名\n * @param data 数据源\n * @returns default type 返回对应的数据类型\n */\nfunction getDefaultType(value: any): string {\n  let type = 'linear';\n  if (dateRegex.test(value)) {\n    type = 'time';\n  } else if (isString(value)) {\n    type = 'cat';\n  }\n  return type;\n}\n\n/**\n * @ignore\n * 为指定的 `field` 字段数据创建 scale\n * @param field 字段名\n * @param [data] 数据集，可为空\n * @param [scaleDef] 列定义，可为空\n * @returns scale 返回创建的 Scale 实例\n */\nexport function createScaleByField(field: string | number, data?: LooseObject[] | [], scaleDef?: ScaleOption): Scale {\n  const validData = data || [];\n\n  if (isNumber(field) || (isNil(firstValue(validData, field)) && isEmpty(scaleDef))) {\n    const Identity = getScale('identity');\n    return new Identity({\n      field: field.toString(),\n      values: [field],\n    });\n  }\n\n  const values = valuesOfKey(validData, field);\n\n  // 如果已经定义过这个度量\n  const type = get(scaleDef, 'type', getDefaultType(values[0]));\n  const ScaleCtor = getScale(type);\n  return new ScaleCtor({\n    field,\n    values,\n    ...scaleDef,\n  });\n}\n\n/**\n * @ignore\n * 同步 scale\n * @todo 是否可以通过 scale.update() 方法进行更新\n * @param scale 需要同步的 scale 实例\n * @param newScale 同步源 Scale\n */\nexport function syncScale(scale: Scale, newScale: Scale) {\n  if (scale.type !== 'identity' && newScale.type !== 'identity') {\n    const obj = {};\n    for (const k in newScale) {\n      if (Object.prototype.hasOwnProperty.call(newScale, k)) {\n        obj[k] = newScale[k];\n      }\n    }\n\n    scale.change(obj);\n  }\n}\n\n/**\n * @ignore\n * get the scale name, if alias exist, return alias, or else field\n * @param scale\n * @returns the name of field\n */\nexport function getName(scale: Scale): string {\n  return scale.alias || scale.field;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}