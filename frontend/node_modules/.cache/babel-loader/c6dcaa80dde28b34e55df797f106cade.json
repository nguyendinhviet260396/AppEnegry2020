{"ast":null,"code":"import { __assign } from \"tslib\";\n/**\n * Create By Bruce Too\n * On 2020-02-18\n */\n\nimport { mix, clone, each, isArray } from '@antv/util';\nimport { VALUE_FIELD, IS_TOTAL } from '../../layer';\nimport { VIEW_LIFE_CIRCLE } from '../../../../dependents';\n\nfunction getDefaultCfg() {\n  return {\n    fill: '#fff',\n    fontSize: 12,\n    lineHeight: 12,\n    stroke: 'rgba(0, 0, 0, 0.45)'\n  };\n}\n\nvar DiffLabel =\n/** @class */\nfunction () {\n  function DiffLabel(cfg) {\n    this.textAttrs = {};\n    this.view = cfg.view;\n    this.fields = cfg.fields;\n    this.formatter = cfg.formatter;\n    this.textAttrs = mix(getDefaultCfg(), cfg.style);\n\n    this._init();\n  }\n  /** 绘制辅助labels */\n\n\n  DiffLabel.prototype.draw = function () {\n    var _this = this;\n\n    if (!this.view || this.view.destroyed) {\n      return;\n    }\n\n    var data = clone(this.view.getData());\n    this.container = this.view.foregroundGroup.addGroup();\n    var shapes = this.view.geometries[0].elements.map(function (value) {\n      return value.shape;\n    });\n    each(shapes, function (shape, idx) {\n      if (!shape.cfg.origin) return;\n      var _origin = shape.cfg.origin.data;\n      var shapeBox = shape.getBBox();\n      var values = _origin[VALUE_FIELD];\n      var diff = values;\n\n      if (isArray(values)) {\n        diff = values[1] - values[0];\n      }\n\n      diff = diff > 0 ? \"+\" + diff : diff;\n      /** is total, total do not need `+` sign */\n\n      if (_origin[IS_TOTAL]) {\n        diff = values[0] - values[1];\n      }\n\n      var formattedText = diff;\n\n      if (_this.formatter) {\n        var color = shapes[idx].attr('fill');\n        formattedText = _this.formatter(\"\" + diff, {\n          _origin: data[idx],\n          color: color\n        }, idx);\n      }\n\n      var text = _this.container.addShape('text', {\n        attrs: __assign({\n          text: formattedText,\n          textBaseline: 'middle',\n          textAlign: 'center',\n          x: (shapeBox.minX + shapeBox.maxX) / 2,\n          y: (shapeBox.minY + shapeBox.maxY) / 2\n        }, _this.textAttrs),\n        name: 'dill-label'\n      });\n\n      if (text.getBBox().height > shapeBox.height) {\n        text.set('visible', false);\n      }\n    });\n    this.view.getCanvas().draw();\n  };\n\n  DiffLabel.prototype.clear = function () {\n    if (this.container) {\n      this.container.clear();\n    }\n  };\n\n  DiffLabel.prototype._init = function () {\n    var _this = this;\n\n    this.view.on(VIEW_LIFE_CIRCLE.BEFORE_RENDER, function () {\n      _this.clear();\n    });\n    this.view.on(VIEW_LIFE_CIRCLE.AFTER_RENDER, function () {\n      _this.draw();\n    });\n  };\n\n  return DiffLabel;\n}();\n\nexport default DiffLabel;","map":{"version":3,"sources":["../../../../../src/plots/waterfall/component/label/diff-label.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Create By Bruce Too\n * On 2020-02-18\n */\nimport { mix, clone, each, isArray } from '@antv/util';\nimport { VALUE_FIELD, IS_TOTAL } from '../../layer';\nimport { IGroup, View, VIEW_LIFE_CIRCLE } from '../../../../dependents';\nimport { TextStyle } from '../../../../interface/config';\n\nexport interface DiffLabelcfg {\n  view: View;\n  fields: string[];\n  formatter: (text: string, item: object, idx: number) => string;\n  style?: TextStyle;\n}\n\nfunction getDefaultCfg() {\n  return {\n    fill: '#fff',\n    fontSize: 12,\n    lineHeight: 12,\n    stroke: 'rgba(0, 0, 0, 0.45)',\n  };\n}\n\nexport default class DiffLabel {\n  private view: View;\n  private fields: string[];\n  private container: IGroup;\n  private formatter: (text: string, item: object, idx: number) => string;\n  private textAttrs: object = {};\n\n  constructor(cfg: DiffLabelcfg) {\n    this.view = cfg.view;\n    this.fields = cfg.fields;\n    this.formatter = cfg.formatter;\n    this.textAttrs = mix(getDefaultCfg(), cfg.style);\n\n    this._init();\n  }\n\n  /** 绘制辅助labels */\n  public draw() {\n    if (!this.view || this.view.destroyed) {\n      return;\n    }\n    const data = clone(this.view.getData());\n    this.container = this.view.foregroundGroup.addGroup();\n    const shapes = this.view.geometries[0].elements.map((value) => value.shape);\n    each(shapes, (shape, idx) => {\n      if (!shape.cfg.origin) return;\n      const _origin = shape.cfg.origin.data;\n      const shapeBox = shape.getBBox();\n      const values = _origin[VALUE_FIELD];\n      let diff = values;\n      if (isArray(values)) {\n        diff = values[1] - values[0];\n      }\n      diff = diff > 0 ? `+${diff}` : diff;\n      /** is total, total do not need `+` sign */\n      if (_origin[IS_TOTAL]) {\n        diff = values[0] - values[1];\n      }\n      let formattedText = diff;\n      if (this.formatter) {\n        const color = shapes[idx].attr('fill');\n        formattedText = this.formatter(`${diff}`, { _origin: data[idx], color }, idx);\n      }\n      const text = this.container.addShape('text', {\n        attrs: {\n          text: formattedText,\n          textBaseline: 'middle',\n          textAlign: 'center',\n          x: (shapeBox.minX + shapeBox.maxX) / 2,\n          y: (shapeBox.minY + shapeBox.maxY) / 2,\n          ...this.textAttrs,\n        },\n        name: 'dill-label',\n      });\n      if (text.getBBox().height > shapeBox.height) {\n        text.set('visible', false);\n      }\n    });\n    this.view.getCanvas().draw();\n  }\n\n  public clear() {\n    if (this.container) {\n      this.container.clear();\n    }\n  }\n\n  private _init() {\n    this.view.on(VIEW_LIFE_CIRCLE.BEFORE_RENDER, () => {\n      this.clear();\n    });\n\n    this.view.on(VIEW_LIFE_CIRCLE.AFTER_RENDER, () => {\n      this.draw();\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}