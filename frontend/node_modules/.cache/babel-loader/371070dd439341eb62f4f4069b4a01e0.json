{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { deepMix, has, each, clone } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport ViewLayer from '../../base/view-layer';\nimport { getComponent } from '../../components/factory';\nimport ConversionTag from '../../components/conversion-tag';\nimport { getGeom } from '../../geoms/factory';\nimport { extractScale } from '../../util/scale';\nimport responsiveMethods from './apply-responsive';\nimport './theme';\nimport './component/label';\nimport './component/label-auto';\nimport * as EventParser from './event';\nimport { getGeometryByType } from '../../util/view';\nvar G2_GEOM_MAP = {\n  bar: 'interval'\n};\nvar PLOT_GEOM_MAP = {\n  interval: 'bar'\n};\n\nvar BaseBarLayer =\n/** @class */\nfunction (_super) {\n  __extends(BaseBarLayer, _super);\n\n  function BaseBarLayer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'bar';\n    return _this;\n  }\n\n  BaseBarLayer.getDefaultOptions = function () {\n    var cfg = {\n      xAxis: {\n        visible: true,\n        line: {\n          visible: false\n        },\n        title: {\n          visible: true\n        },\n        label: {\n          visible: false\n        },\n        tickLine: {\n          visible: false\n        },\n        grid: {\n          visible: false\n        },\n        nice: true\n      },\n      yAxis: {\n        visible: true,\n        grid: {\n          visible: false\n        },\n        line: {\n          visible: false\n        },\n        tickLine: {\n          visible: false\n        },\n        label: {\n          visible: true,\n          autoRotate: false,\n          autoHide: true\n        },\n        title: {\n          visible: false,\n          spacing: 12\n        }\n      },\n      tooltip: {\n        visible: true,\n        shared: true,\n        showCrosshairs: false,\n        showMarkers: false\n      },\n      label: {\n        visible: true,\n        position: 'left',\n        adjustColor: true\n      },\n      legend: {\n        visible: false,\n        position: 'top-left'\n      },\n      interactions: [{\n        type: 'tooltip'\n      }, {\n        type: 'active-region'\n      }, {\n        type: 'legend-active'\n      }, {\n        type: 'legend-filter'\n      }],\n      conversionTag: {\n        visible: false\n      }\n    };\n    return deepMix({}, _super.getDefaultOptions.call(this), cfg);\n  };\n\n  BaseBarLayer.prototype.beforeInit = function () {\n    _super.prototype.beforeInit.call(this);\n\n    var props = this.options;\n    /** 响应式图形 */\n\n    if (props.responsive && props.padding !== 'auto') {\n      this.applyResponsive('preRender');\n    }\n  };\n\n  BaseBarLayer.prototype.afterRender = function () {\n    var props = this.options;\n    this.renderLabel();\n    /** 响应式 */\n\n    if (props.responsive && props.padding !== 'auto') {\n      this.applyResponsive('afterRender');\n    }\n\n    if (props.conversionTag.visible) {\n      this.conversionTag = new ConversionTag(__assign({\n        view: this.view,\n        field: props.xField,\n        animation: props.animation === false ? false : true\n      }, props.conversionTag));\n    }\n\n    _super.prototype.afterRender.call(this);\n  };\n\n  BaseBarLayer.prototype.geometryParser = function (dim, type) {\n    if (dim === 'g2') {\n      return G2_GEOM_MAP[type];\n    }\n\n    return PLOT_GEOM_MAP[type];\n  };\n\n  BaseBarLayer.prototype.processData = function (originData) {\n    var inputData = originData ? originData.slice().reverse() : originData;\n    var yField = this.options.yField;\n    var processedData = [];\n    each(inputData, function (data) {\n      var d = clone(data);\n      d[yField] = d[yField].toString();\n      processedData.push(d);\n    });\n    return processedData;\n  };\n\n  BaseBarLayer.prototype.scale = function () {\n    var props = this.options;\n    var scales = {};\n    /** 配置x-scale */\n\n    scales[props.yField] = {\n      type: 'cat'\n    };\n\n    if (has(props, 'yAxis')) {\n      extractScale(scales[props.yField], props.yAxis);\n    }\n    /** 配置y-scale */\n\n\n    scales[props.xField] = {};\n\n    if (has(props, 'xAxis')) {\n      extractScale(scales[props.xField], props.xAxis);\n    }\n\n    this.setConfig('scales', scales);\n\n    _super.prototype.scale.call(this);\n  };\n\n  BaseBarLayer.prototype.coord = function () {\n    this.setConfig('coordinate', {\n      actions: [['transpose']]\n    });\n  };\n\n  BaseBarLayer.prototype.axis = function () {\n    var xAxis_parser = getComponent('axis', {\n      plot: this,\n      dim: 'x'\n    });\n    var yAxis_parser = getComponent('axis', {\n      plot: this,\n      dim: 'y'\n    });\n    /** 转置坐标系特殊配置 */\n\n    if (xAxis_parser) {\n      xAxis_parser.position = 'left';\n    }\n\n    if (yAxis_parser) {\n      yAxis_parser.position = 'bottom';\n    }\n\n    var axesConfig = {};\n    axesConfig[this.options.xField] = xAxis_parser;\n    axesConfig[this.options.yField] = yAxis_parser;\n    /** 存储坐标轴配置项到config */\n\n    this.setConfig('axes', axesConfig);\n  }; //eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  BaseBarLayer.prototype.adjustBar = function (bar) {\n    return null;\n  };\n\n  BaseBarLayer.prototype.addGeometry = function () {\n    var props = this.options;\n    var bar = getGeom('interval', 'main', {\n      positionFields: [props.yField, props.xField],\n      plot: this\n    });\n\n    if (props.conversionTag.visible) {\n      this.setConfig('theme', deepMix({}, this.getTheme(), {\n        columnWidthRatio: 1 / 3\n      }));\n    }\n\n    this.adjustBar(bar);\n    this.bar = bar;\n\n    if (props.tooltip && (props.tooltip.fields || props.tooltip.formatter)) {\n      this.geometryTooltip();\n    }\n\n    this.setConfig('geometry', bar);\n  };\n\n  BaseBarLayer.prototype.animation = function () {\n    _super.prototype.animation.call(this);\n\n    var props = this.options;\n\n    if (props.animation === false) {\n      /** 关闭动画 */\n      this.bar.animate = false;\n    }\n  };\n\n  BaseBarLayer.prototype.parseEvents = function () {\n    _super.prototype.parseEvents.call(this, EventParser);\n  };\n\n  BaseBarLayer.prototype.renderLabel = function () {\n    var scales = this.config.scales;\n    var _a = this.options,\n        label = _a.label,\n        xField = _a.xField;\n    var scale = scales[xField];\n\n    if (label === null || label === void 0 ? void 0 : label.visible) {\n      var geometry = getGeometryByType(this.view, 'interval');\n      this.doRenderLabel(geometry, __assign({\n        type: 'bar',\n        formatter: scale.formatter && function (value) {\n          return scale.formatter(value);\n        }\n      }, this.options.label));\n    }\n  };\n\n  BaseBarLayer.prototype.geometryTooltip = function () {\n    this.bar.tooltip = {};\n    var tooltipOptions = this.options.tooltip;\n\n    if (tooltipOptions.fields) {\n      this.bar.tooltip.fields = tooltipOptions.fields;\n    }\n\n    if (tooltipOptions.formatter) {\n      this.bar.tooltip.callback = tooltipOptions.formatter;\n\n      if (!tooltipOptions.fields) {\n        this.bar.tooltip.fields = [this.options.xField, this.options.yField];\n\n        if (this.options.colorField) {\n          this.bar.tooltip.fields.push(this.options.colorField);\n        }\n      }\n    }\n  };\n\n  BaseBarLayer.prototype.applyResponsive = function (stage) {\n    var _this = this;\n\n    var methods = responsiveMethods[stage];\n    each(methods, function (r) {\n      var responsive = r;\n      responsive.method(_this);\n    });\n  };\n\n  BaseBarLayer.prototype.getLabelOptionsByPosition = function (position) {\n    if (position === 'middle') {\n      return {\n        offset: 0\n      };\n    }\n\n    if (position === 'left') {\n      return {\n        offset: 7,\n        style: {\n          stroke: null,\n          lineWidth: 0\n        }\n      };\n    }\n\n    if (position === 'right') {\n      return {\n        offset: 4\n      };\n    }\n  };\n\n  return BaseBarLayer;\n}(ViewLayer);\n\nexport default BaseBarLayer;\nregisterPlotType('bar', BaseBarLayer);","map":{"version":3,"sources":["../../../src/plots/bar/layer.ts"],"names":[],"mappings":"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","sourcesContent":["import { deepMix, has, each, clone } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport { LayerConfig } from '../../base/layer';\nimport ViewLayer from '../../base/view-layer';\nimport { getComponent } from '../../components/factory';\nimport ConversionTag from '../../components/conversion-tag';\nimport { getGeom } from '../../geoms/factory';\nimport { ElementOption, DataItem } from '../../interface/config';\nimport { extractScale } from '../../util/scale';\nimport responsiveMethods from './apply-responsive';\nimport './theme';\nimport './component/label';\nimport './component/label-auto';\nimport * as EventParser from './event';\nimport { getGeometryByType } from '../../util/view';\nimport { BarViewConfig } from './interface';\nimport { Maybe } from '../../interface/types';\n\nconst G2_GEOM_MAP = {\n  bar: 'interval',\n};\n\nconst PLOT_GEOM_MAP = {\n  interval: 'bar',\n};\n\nexport interface BarLayerConfig extends BarViewConfig, LayerConfig {}\n\nexport default class BaseBarLayer<T extends BarLayerConfig = BarLayerConfig> extends ViewLayer<T> {\n  public static getDefaultOptions(): Partial<BarViewConfig> {\n    const cfg: Partial<BarViewConfig> = {\n      xAxis: {\n        visible: true,\n        line: {\n          visible: false,\n        },\n        title: {\n          visible: true,\n        },\n        label: {\n          visible: false,\n        },\n        tickLine: {\n          visible: false,\n        },\n        grid: {\n          visible: false,\n        },\n        nice: true,\n      },\n      yAxis: {\n        visible: true,\n        grid: {\n          visible: false,\n        },\n        line: {\n          visible: false,\n        },\n        tickLine: {\n          visible: false,\n        },\n        label: {\n          visible: true,\n          autoRotate: false,\n          autoHide: true,\n        },\n        title: {\n          visible: false,\n          spacing: 12,\n        },\n      },\n      tooltip: {\n        visible: true,\n        shared: true,\n        showCrosshairs: false,\n        showMarkers: false,\n      },\n      label: {\n        visible: true,\n        position: 'left',\n        adjustColor: true,\n      },\n      legend: {\n        visible: false,\n        position: 'top-left',\n      },\n      interactions: [\n        { type: 'tooltip' },\n        { type: 'active-region' },\n        { type: 'legend-active' },\n        { type: 'legend-filter' },\n      ],\n      conversionTag: {\n        visible: false,\n      },\n    };\n    return deepMix({}, super.getDefaultOptions(), cfg);\n  }\n\n  public bar: any;\n  public type: string = 'bar';\n  public conversionTag?: ConversionTag;\n\n  public beforeInit() {\n    super.beforeInit();\n    const props = this.options;\n    /** 响应式图形 */\n    if (props.responsive && props.padding !== 'auto') {\n      this.applyResponsive('preRender');\n    }\n  }\n\n  public afterRender() {\n    const props = this.options;\n    this.renderLabel();\n    /** 响应式 */\n    if (props.responsive && props.padding !== 'auto') {\n      this.applyResponsive('afterRender');\n    }\n    if (props.conversionTag.visible) {\n      this.conversionTag = new ConversionTag({\n        view: this.view,\n        field: props.xField,\n        animation: props.animation === false ? false : true,\n        ...props.conversionTag,\n      });\n    }\n    super.afterRender();\n  }\n\n  protected geometryParser(dim, type) {\n    if (dim === 'g2') {\n      return G2_GEOM_MAP[type];\n    }\n    return PLOT_GEOM_MAP[type];\n  }\n\n  protected processData(originData?: DataItem[]) {\n    const inputData = originData ? originData.slice().reverse() : originData;\n    const { yField } = this.options;\n    const processedData = [];\n    each(inputData, (data) => {\n      const d = clone(data);\n      d[yField] = d[yField].toString();\n      processedData.push(d);\n    });\n    return processedData;\n  }\n\n  protected scale() {\n    const props = this.options;\n    const scales = {};\n    /** 配置x-scale */\n    scales[props.yField] = {\n      type: 'cat',\n    };\n    if (has(props, 'yAxis')) {\n      extractScale(scales[props.yField], props.yAxis);\n    }\n    /** 配置y-scale */\n    scales[props.xField] = {};\n    if (has(props, 'xAxis')) {\n      extractScale(scales[props.xField], props.xAxis);\n    }\n    this.setConfig('scales', scales);\n    super.scale();\n  }\n\n  protected coord() {\n    this.setConfig('coordinate', {\n      actions: [['transpose']],\n    });\n  }\n\n  protected axis(): void {\n    const xAxis_parser = getComponent('axis', {\n      plot: this,\n      dim: 'x',\n    });\n    const yAxis_parser = getComponent('axis', {\n      plot: this,\n      dim: 'y',\n    });\n    /** 转置坐标系特殊配置 */\n    if (xAxis_parser) {\n      xAxis_parser.position = 'left';\n    }\n    if (yAxis_parser) {\n      yAxis_parser.position = 'bottom';\n    }\n    const axesConfig = {};\n    axesConfig[this.options.xField] = xAxis_parser;\n    axesConfig[this.options.yField] = yAxis_parser;\n    /** 存储坐标轴配置项到config */\n    this.setConfig('axes', axesConfig);\n  }\n\n  //eslint-disable-next-line @typescript-eslint/no-unused-vars\n  protected adjustBar(bar: ElementOption) {\n    return null;\n  }\n\n  protected addGeometry() {\n    const props: any = this.options;\n    const bar = getGeom('interval', 'main', {\n      positionFields: [props.yField, props.xField],\n      plot: this,\n    });\n    if (props.conversionTag.visible) {\n      this.setConfig(\n        'theme',\n        deepMix({}, this.getTheme(), {\n          columnWidthRatio: 1 / 3,\n        })\n      );\n    }\n    this.adjustBar(bar);\n    this.bar = bar;\n\n    if (props.tooltip && (props.tooltip.fields || props.tooltip.formatter)) {\n      this.geometryTooltip();\n    }\n\n    this.setConfig('geometry', bar);\n  }\n\n  protected animation() {\n    super.animation();\n    const props = this.options;\n    if (props.animation === false) {\n      /** 关闭动画 */\n      this.bar.animate = false;\n    }\n  }\n\n  protected parseEvents() {\n    super.parseEvents(EventParser);\n  }\n\n  protected renderLabel() {\n    const { scales } = this.config;\n    const { label, xField } = this.options;\n    const scale = scales[xField];\n    if (label?.visible) {\n      const geometry = getGeometryByType(this.view, 'interval');\n      this.doRenderLabel(geometry, {\n        type: 'bar',\n        formatter: scale.formatter && ((value: Maybe<string | number>) => scale.formatter(value)),\n        ...this.options.label,\n      });\n    }\n  }\n\n  protected geometryTooltip() {\n    this.bar.tooltip = {};\n    const tooltipOptions: any = this.options.tooltip;\n    if (tooltipOptions.fields) {\n      this.bar.tooltip.fields = tooltipOptions.fields;\n    }\n    if (tooltipOptions.formatter) {\n      this.bar.tooltip.callback = tooltipOptions.formatter;\n      if (!tooltipOptions.fields) {\n        this.bar.tooltip.fields = [this.options.xField, this.options.yField];\n        if (this.options.colorField) {\n          this.bar.tooltip.fields.push(this.options.colorField);\n        }\n      }\n    }\n  }\n\n  private applyResponsive(stage) {\n    const methods = responsiveMethods[stage];\n    each(methods, (r) => {\n      const responsive = r;\n      responsive.method(this);\n    });\n  }\n\n  public getLabelOptionsByPosition(position: string) {\n    if (position === 'middle') {\n      return {\n        offset: 0,\n      };\n    }\n\n    if (position === 'left') {\n      return {\n        offset: 7,\n        style: {\n          stroke: null,\n          lineWidth: 0,\n        },\n      };\n    }\n\n    if (position === 'right') {\n      return {\n        offset: 4,\n      };\n    }\n  }\n}\n\nregisterPlotType('bar', BaseBarLayer);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}