{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { deepMix, valuesOfKey, sortBy } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport BaseBarLayer from '../bar/layer';\nimport './theme';\n\nvar GroupedBarLayer =\n/** @class */\nfunction (_super) {\n  __extends(GroupedBarLayer, _super);\n\n  function GroupedBarLayer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'groupedBar';\n    _this.baseType = 'bar';\n    return _this;\n  }\n\n  GroupedBarLayer.getDefaultOptions = function () {\n    return deepMix({}, _super.getDefaultOptions.call(this), {\n      xAxis: {\n        visible: true,\n        grid: {\n          visible: true\n        }\n      },\n      yAxis: {\n        visible: true,\n        title: {\n          visible: false\n        }\n      },\n      label: {\n        visible: true,\n        position: 'right',\n        adjustColor: true\n      },\n      legend: {\n        visible: true,\n        position: 'right-top',\n        offsetY: 0\n      }\n    });\n  };\n\n  GroupedBarLayer.prototype.afterRender = function () {\n    _super.prototype.afterRender.call(this);\n\n    var names = valuesOfKey(this.options.data, this.options.groupField) || [];\n    this.view.on('tooltip:change', function (e) {\n      var _a = e.items,\n          items = _a === void 0 ? [] : _a;\n      var fixedItems = sortBy(items.slice(), function (item) {\n        return names.indexOf(item.name);\n      }).reverse();\n      fixedItems.forEach(function (item, idx) {\n        e.items[idx] = item;\n      });\n    });\n  };\n\n  GroupedBarLayer.prototype.getColorScale = function () {\n    var groupField = this.options.groupField;\n\n    if (groupField) {\n      return this.view.getScaleByField(groupField);\n    }\n  };\n\n  GroupedBarLayer.prototype.scale = function () {\n    var defaultMeta = {};\n    defaultMeta[this.options.groupField] = {\n      values: valuesOfKey(this.options.data, this.options.groupField)\n    };\n\n    if (!this.options.meta) {\n      this.options.meta = defaultMeta;\n    } else {\n      this.options.meta = deepMix({}, this.options.meta, defaultMeta);\n    }\n\n    _super.prototype.scale.call(this);\n  };\n\n  GroupedBarLayer.prototype.adjustBar = function (bar) {\n    bar.adjust = [{\n      type: 'dodge',\n      marginRatio: 0.1\n    }];\n  };\n\n  GroupedBarLayer.prototype.geometryTooltip = function () {\n    this.bar.tooltip = {};\n    var tooltipOptions = this.options.tooltip;\n\n    if (tooltipOptions.fields) {\n      this.bar.tooltip.fields = tooltipOptions.fields;\n    }\n\n    if (tooltipOptions.formatter) {\n      this.bar.tooltip.callback = tooltipOptions.formatter;\n\n      if (!tooltipOptions.fields) {\n        this.bar.tooltip.fields = [this.options.xField, this.options.yField, this.options.groupField];\n      }\n    }\n  };\n\n  return GroupedBarLayer;\n}(BaseBarLayer);\n\nexport default GroupedBarLayer;\nregisterPlotType('groupedBar', GroupedBarLayer);","map":{"version":3,"sources":["../../../src/plots/grouped-bar/layer.ts"],"names":[],"mappings":"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","sourcesContent":["import { deepMix, valuesOfKey, sortBy } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport { LayerConfig } from '../../base/layer';\nimport { ElementOption } from '../../interface/config';\nimport BaseBarLayer from '../bar/layer';\nimport { BarViewConfig } from '../bar/interface';\nimport './theme';\n\nexport interface GroupedBarViewConfig extends BarViewConfig {\n  groupField: string;\n}\n\nexport interface GroupedBarLayerConfig extends GroupedBarViewConfig, LayerConfig {}\n\nexport default class GroupedBarLayer extends BaseBarLayer<GroupedBarLayerConfig> {\n  public static getDefaultOptions(): Partial<GroupedBarViewConfig> {\n    return deepMix({}, super.getDefaultOptions(), {\n      xAxis: {\n        visible: true,\n        grid: {\n          visible: true,\n        },\n      },\n      yAxis: {\n        visible: true,\n        title: {\n          visible: false,\n        },\n      },\n      label: {\n        visible: true,\n        position: 'right',\n        adjustColor: true,\n      },\n      legend: {\n        visible: true,\n        position: 'right-top',\n        offsetY: 0,\n      },\n    });\n  }\n\n  public type: string = 'groupedBar';\n\n  public baseType: string = 'bar';\n\n  public afterRender() {\n    super.afterRender();\n    const names = valuesOfKey(this.options.data, this.options.groupField) || [];\n    this.view.on('tooltip:change', (e) => {\n      const { items = [] } = e;\n      const fixedItems = sortBy(items.slice(), (item) => {\n        return names.indexOf(item.name);\n      }).reverse();\n      fixedItems.forEach((item, idx) => {\n        e.items[idx] = item;\n      });\n    });\n  }\n\n  public getColorScale() {\n    const { groupField } = this.options;\n    if (groupField) {\n      return this.view.getScaleByField(groupField);\n    }\n  }\n\n  protected scale() {\n    const defaultMeta = {};\n    defaultMeta[this.options.groupField] = {\n      values: valuesOfKey(this.options.data, this.options.groupField),\n    };\n    if (!this.options.meta) {\n      this.options.meta = defaultMeta;\n    } else {\n      this.options.meta = deepMix({}, this.options.meta, defaultMeta);\n    }\n    super.scale();\n  }\n\n  protected adjustBar(bar: ElementOption) {\n    bar.adjust = [\n      {\n        type: 'dodge',\n        marginRatio: 0.1,\n      },\n    ];\n  }\n\n  protected geometryTooltip() {\n    this.bar.tooltip = {};\n    const tooltipOptions: any = this.options.tooltip;\n    if (tooltipOptions.fields) {\n      this.bar.tooltip.fields = tooltipOptions.fields;\n    }\n    if (tooltipOptions.formatter) {\n      this.bar.tooltip.callback = tooltipOptions.formatter;\n      if (!tooltipOptions.fields) {\n        this.bar.tooltip.fields = [this.options.xField, this.options.yField, this.options.groupField];\n      }\n    }\n  }\n}\n\nregisterPlotType('groupedBar', GroupedBarLayer);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}