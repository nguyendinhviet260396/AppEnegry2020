{"ast":null,"code":"import { __extends } from \"tslib\";\nimport EventEmitter from '@antv/event-emitter';\nimport { isNil, each, findIndex, deepMix, keys, contains, isFunction } from '@antv/util';\nimport CanvasController from './controller/canvas';\nimport EventController from './controller/event';\nimport { getPlotType } from './global';\nimport Layer from './layer';\nimport ViewLayer from './view-layer';\nimport { CANVAS_EVENT_MAP } from '../util/event';\n\nvar BasePlot =\n/** @class */\nfunction (_super) {\n  __extends(BasePlot, _super);\n\n  function BasePlot(container, props) {\n    var _this = _super.call(this) || this;\n\n    _this.containerDOM = typeof container === 'string' ? document.getElementById(container) : container;\n    _this.forceFit = !isNil(props.forceFit) ? props.forceFit : isNil(props.width) && isNil(props.height);\n    _this.renderer = props.renderer || 'canvas';\n    _this.pixelRatio = props.pixelRatio || null;\n    _this.width = props.width;\n    _this.height = props.height;\n    _this.theme = props.theme;\n    _this.localRefresh = props.localRefresh;\n    _this.canvasController = new CanvasController({\n      containerDOM: _this.containerDOM,\n      plot: _this\n    });\n    /** update layer properties */\n\n    _this.width = _this.canvasController.width;\n    _this.height = _this.canvasController.height;\n    _this.canvas = _this.canvasController.canvas;\n    _this.layers = [];\n    _this.destroyed = false;\n\n    _this.createLayers(props);\n    /** bind events */\n\n\n    _this.eventController = new EventController({\n      plot: _this,\n      canvas: _this.canvasController.canvas\n    });\n\n    _this.eventController.bindEvents();\n\n    _this.parseEvents(props);\n\n    return _this;\n  }\n  /** 生命周期 */\n\n\n  BasePlot.prototype.destroy = function () {\n    this.eachLayer(function (layer) {\n      layer.destroy();\n    });\n    this.canvasController.destroy();\n    this.eventController.clearEvents();\n    this.layers = [];\n    this.destroyed = true;\n  };\n  /**\n   * 重新绘制图形\n   */\n\n\n  BasePlot.prototype.repaint = function () {\n    this.canvasController.canvas.draw();\n  };\n\n  BasePlot.prototype.updateConfig = function (config, all) {\n    if (all === void 0) {\n      all = false;\n    }\n\n    if (all) {\n      this.eachLayer(function (layer) {\n        if (layer instanceof ViewLayer) {\n          layer.updateConfig(config);\n        }\n      });\n    } else {\n      var layer = this.layers[0];\n\n      if (layer instanceof Layer) {\n        layer.updateConfig(config);\n      }\n    }\n\n    if (config.width) {\n      this.width = config.width;\n    }\n\n    if (config.height) {\n      this.height = config.height;\n    }\n\n    if (config.theme) {\n      this.theme = config.theme;\n    }\n\n    this.canvasController.updateCanvasSize();\n    this.canvasController.updateCanvasTheme();\n  };\n\n  BasePlot.prototype.changeData = function (data, all) {\n    if (all === void 0) {\n      all = false;\n    }\n\n    if (all) {\n      this.eachLayer(function (layer) {\n        if (layer instanceof ViewLayer) {\n          layer.changeData(data);\n        }\n      });\n    } else {\n      var layer = this.layers[0];\n\n      if (layer instanceof ViewLayer) {\n        layer.changeData(data);\n      }\n    }\n  };\n\n  BasePlot.prototype.getScaleByField = function (field) {\n    return this.layers[0].getScaleByField(field);\n  };\n\n  BasePlot.prototype.getXScale = function () {\n    return this.layers[0].getXScale();\n  };\n\n  BasePlot.prototype.getYScale = function () {\n    return this.layers[0].getYScale();\n  };\n\n  BasePlot.prototype.getColorScale = function () {\n    return this.layers[0].getColorScale();\n  };\n\n  BasePlot.prototype.getPlotTheme = function () {\n    var layer = this.layers[0];\n    return layer.getPlotTheme();\n  };\n\n  BasePlot.prototype.getData = function () {\n    var layer = this.layers[0];\n    return layer.getData();\n  };\n  /**\n   * 绑定一个外部的stateManager\n   * 先直接传递给各个子 Layer\n   *\n   *  @param stateManager\n   *  @param cfg\n   */\n\n\n  BasePlot.prototype.bindStateManager = function (stateManager, cfg) {\n    this.eachLayer(function (layer) {\n      if (layer instanceof ViewLayer) {\n        layer.bindStateManager(stateManager, cfg);\n      }\n    });\n  };\n  /**\n   * 响应状态量更新的快捷方法\n   *\n   *  @param condition\n   * @param style\n   */\n\n\n  BasePlot.prototype.setActive = function (condition, style) {\n    this.eachLayer(function (layer) {\n      if (layer instanceof ViewLayer) {\n        layer.setActive(condition, style);\n      }\n    });\n  };\n\n  BasePlot.prototype.setSelected = function (condition, style) {\n    this.eachLayer(function (layer) {\n      if (layer instanceof ViewLayer) {\n        layer.setSelected(condition, style);\n      }\n    });\n  };\n\n  BasePlot.prototype.setDisable = function (condition, style) {\n    this.eachLayer(function (layer) {\n      if (layer instanceof ViewLayer) {\n        layer.setDisable(condition, style);\n      }\n    });\n  };\n\n  BasePlot.prototype.setDefault = function (condition, style) {\n    this.eachLayer(function (layer) {\n      if (layer instanceof ViewLayer) {\n        layer.setDefault(condition, style);\n      }\n    });\n  };\n  /**\n   * 获取 Plot 的 View\n   */\n\n\n  BasePlot.prototype.getView = function () {\n    // 临时：避免 getLayer 的类型转换问题\n    return this.layers[0].view;\n  };\n  /**\n   * 获取图形下的图层 Layer，默认第一个 Layer\n   * @param idx\n   */\n\n\n  BasePlot.prototype.getLayer = function (idx) {\n    if (idx === void 0) {\n      idx = 0;\n    }\n\n    return this.layers[idx];\n  };\n\n  BasePlot.prototype.getCanvas = function () {\n    return this.canvasController.canvas;\n  };\n\n  BasePlot.prototype.getLayers = function () {\n    return this.layers;\n  };\n\n  BasePlot.prototype.render = function () {\n    this.eachLayer(function (layer) {\n      return layer.render();\n    });\n  };\n\n  BasePlot.prototype.eachLayer = function (cb) {\n    each(this.layers, cb);\n  };\n  /**\n   * add children layer\n   * @param layer\n   */\n\n\n  BasePlot.prototype.addLayer = function (layer) {\n    var idx = findIndex(this.layers, function (item) {\n      return item === layer;\n    });\n\n    if (idx < 0) {\n      this.layers.push(layer);\n    }\n  };\n\n  BasePlot.prototype.createLayers = function (props) {\n    if (props.layers) {// TODO: combo plot\n    } else if (props.type) {\n      var viewLayerCtr = getPlotType(props.type);\n      var viewLayerProps = deepMix({}, props, {\n        canvas: this.canvasController.canvas,\n        x: 0,\n        y: 0,\n        width: this.width,\n        height: this.height\n      });\n      var viewLayer = new viewLayerCtr(viewLayerProps);\n      this.addLayer(viewLayer);\n    }\n  };\n\n  BasePlot.prototype.parseEvents = function (props) {\n    var _this = this;\n\n    var eventsName = keys(CANVAS_EVENT_MAP);\n\n    if (props.events) {\n      each(props.events, function (e, k) {\n        if (contains(eventsName, k) && isFunction(e)) {\n          var eventName = CANVAS_EVENT_MAP[k] || k;\n          var handler = e;\n\n          _this.on(eventName, handler);\n        }\n      });\n    }\n  };\n\n  return BasePlot;\n}(EventEmitter);\n\nexport default BasePlot;","map":{"version":3,"sources":["../../src/base/plot.ts"],"names":[],"mappings":"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","sourcesContent":["import EventEmitter from '@antv/event-emitter';\nimport { ICanvas } from '../dependents';\nimport { isNil, each, findIndex, deepMix, keys, contains, isFunction } from '@antv/util';\nimport { RecursivePartial, LooseMap } from '../interface/types';\nimport StateManager from '../util/state-manager';\nimport CanvasController from './controller/canvas';\nimport EventController from './controller/event';\nimport { getPlotType } from './global';\nimport Layer from './layer';\nimport ViewLayer from './view-layer';\nimport { CANVAS_EVENT_MAP } from '../util/event';\n\nexport interface PlotConfig {\n  forceFit?: boolean;\n  width?: number;\n  renderer?: string;\n  height?: number;\n  pixelRatio?: number;\n  theme?: LooseMap | string;\n  localRefresh?: boolean;\n}\n\ntype LayerCtor<C> = ViewLayer<C>;\n\nexport default class BasePlot<\n  T extends PlotConfig = PlotConfig,\n  L extends LayerCtor<T> = LayerCtor<T>\n> extends EventEmitter {\n  public width: number;\n  public height: number;\n  public forceFit: boolean;\n  public renderer: string;\n  public pixelRatio: number;\n  public theme: string | object;\n  public localRefresh?: boolean;\n  public canvas: ICanvas;\n  public destroyed: boolean;\n  protected layers: Array<L>;\n  private canvasController: CanvasController;\n  private eventController: EventController;\n  protected containerDOM: HTMLElement;\n\n  constructor(container: HTMLElement, props: T) {\n    super();\n    this.containerDOM = typeof container === 'string' ? document.getElementById(container) : container;\n    this.forceFit = !isNil(props.forceFit) ? props.forceFit : isNil(props.width) && isNil(props.height);\n    this.renderer = props.renderer || 'canvas';\n    this.pixelRatio = props.pixelRatio || null;\n    this.width = props.width;\n    this.height = props.height;\n    this.theme = props.theme;\n    this.localRefresh = props.localRefresh;\n    this.canvasController = new CanvasController({\n      containerDOM: this.containerDOM,\n      plot: this,\n    });\n    /** update layer properties */\n    this.width = this.canvasController.width;\n    this.height = this.canvasController.height;\n    this.canvas = this.canvasController.canvas;\n    this.layers = [];\n    this.destroyed = false;\n\n    this.createLayers(props);\n\n    /** bind events */\n    this.eventController = new EventController({\n      plot: this,\n      canvas: this.canvasController.canvas,\n    });\n\n    this.eventController.bindEvents();\n    this.parseEvents(props);\n  }\n\n  /** 生命周期 */\n  public destroy() {\n    this.eachLayer((layer) => {\n      layer.destroy();\n    });\n    this.canvasController.destroy();\n    this.eventController.clearEvents();\n    this.layers = [];\n    this.destroyed = true;\n  }\n\n  /**\n   * 重新绘制图形\n   */\n  public repaint(): void {\n    this.canvasController.canvas.draw();\n  }\n\n  public updateConfig(config: RecursivePartial<T>, all: boolean = false) {\n    if (all) {\n      this.eachLayer((layer) => {\n        if (layer instanceof ViewLayer) {\n          layer.updateConfig(config);\n        }\n      });\n    } else {\n      const layer: any = this.layers[0];\n      if (layer instanceof Layer) {\n        layer.updateConfig(config);\n      }\n    }\n\n    if (config.width) {\n      this.width = config.width as number;\n    }\n    if (config.height) {\n      this.height = config.height as number;\n    }\n    if (config.theme) {\n      this.theme = config.theme;\n    }\n\n    this.canvasController.updateCanvasSize();\n    this.canvasController.updateCanvasTheme();\n  }\n\n  public changeData(data: any[], all: boolean = false) {\n    if (all) {\n      this.eachLayer((layer) => {\n        if (layer instanceof ViewLayer) {\n          layer.changeData(data);\n        }\n      });\n    } else {\n      const layer: any = this.layers[0];\n      if (layer instanceof ViewLayer) {\n        layer.changeData(data);\n      }\n    }\n  }\n\n  public getScaleByField(field: string) {\n    return this.layers[0].getScaleByField(field);\n  }\n\n  public getXScale() {\n    return this.layers[0].getXScale();\n  }\n\n  public getYScale() {\n    return this.layers[0].getYScale();\n  }\n\n  public getColorScale() {\n    return this.layers[0].getColorScale();\n  }\n\n  public getPlotTheme() {\n    const layer: any = this.layers[0];\n    return layer.getPlotTheme();\n  }\n\n  public getData() {\n    const layer: any = this.layers[0];\n    return layer.getData();\n  }\n\n  /**\n   * 绑定一个外部的stateManager\n   * 先直接传递给各个子 Layer\n   *\n   *  @param stateManager\n   *  @param cfg\n   */\n  public bindStateManager(stateManager: StateManager, cfg: any) {\n    this.eachLayer((layer) => {\n      if (layer instanceof ViewLayer) {\n        layer.bindStateManager(stateManager, cfg);\n      }\n    });\n  }\n\n  /**\n   * 响应状态量更新的快捷方法\n   *\n   *  @param condition\n   * @param style\n   */\n  public setActive(condition: any, style: any) {\n    this.eachLayer((layer) => {\n      if (layer instanceof ViewLayer) {\n        layer.setActive(condition, style);\n      }\n    });\n  }\n\n  public setSelected(condition: any, style: any) {\n    this.eachLayer((layer) => {\n      if (layer instanceof ViewLayer) {\n        layer.setSelected(condition, style);\n      }\n    });\n  }\n\n  public setDisable(condition: any, style: any) {\n    this.eachLayer((layer) => {\n      if (layer instanceof ViewLayer) {\n        layer.setDisable(condition, style);\n      }\n    });\n  }\n\n  public setDefault(condition: any, style: any) {\n    this.eachLayer((layer) => {\n      if (layer instanceof ViewLayer) {\n        layer.setDefault(condition, style);\n      }\n    });\n  }\n\n  /**\n   * 获取 Plot 的 View\n   */\n  public getView() {\n    // 临时：避免 getLayer 的类型转换问题\n    return (this.layers[0] as ViewLayer<T>).view;\n  }\n\n  /**\n   * 获取图形下的图层 Layer，默认第一个 Layer\n   * @param idx\n   */\n  public getLayer(idx: number = 0) {\n    return this.layers[idx];\n  }\n\n  public getCanvas() {\n    return this.canvasController.canvas;\n  }\n\n  public getLayers() {\n    return this.layers;\n  }\n\n  public render() {\n    this.eachLayer((layer) => layer.render());\n  }\n\n  protected eachLayer(cb: (layer: Layer<any>) => void) {\n    each(this.layers, cb);\n  }\n\n  /**\n   * add children layer\n   * @param layer\n   */\n  public addLayer(layer: L) {\n    const idx = findIndex(this.layers, (item) => item === layer);\n    if (idx < 0) {\n      this.layers.push(layer);\n    }\n  }\n\n  protected createLayers(props: T & { type?: string; layers?: any }) {\n    if (props.layers) {\n      // TODO: combo plot\n    } else if (props.type) {\n      const viewLayerCtr = getPlotType(props.type);\n      const viewLayerProps: T = deepMix({}, props, {\n        canvas: this.canvasController.canvas,\n        x: 0,\n        y: 0,\n        width: this.width,\n        height: this.height,\n      });\n      const viewLayer = new viewLayerCtr(viewLayerProps);\n      this.addLayer(viewLayer);\n    }\n  }\n\n  protected parseEvents(props) {\n    const eventsName = keys(CANVAS_EVENT_MAP);\n    if (props.events) {\n      each(props.events, (e, k) => {\n        if (contains(eventsName, k) && isFunction(e)) {\n          const eventName = CANVAS_EVENT_MAP[k] || k;\n          const handler = e;\n          this.on(eventName, handler);\n        }\n      });\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}