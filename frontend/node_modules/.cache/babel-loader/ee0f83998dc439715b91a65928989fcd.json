{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { deepMix, get, each } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport BaseArea from '../area/layer';\nimport { getPlotComponents } from './component';\nimport './component/label/area-point';\nimport './component/label/area-point-auto';\nimport './theme';\n\nvar StackedAreaLayer =\n/** @class */\nfunction (_super) {\n  __extends(StackedAreaLayer, _super);\n\n  function StackedAreaLayer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.plotComponents = [];\n    _this.type = 'stackedArea';\n    _this.baseType = 'area';\n    return _this;\n  }\n\n  StackedAreaLayer.getDefaultOptions = function () {\n    return deepMix({}, _super.getDefaultOptions.call(this), {\n      label: {\n        visible: false,\n        type: 'area'\n      }\n    });\n  };\n\n  StackedAreaLayer.prototype.beforeInit = function () {\n    var visible = get(this.options, ['label', 'visible']);\n    var type = get(this.options, ['label', 'type']);\n    var options = this.options;\n\n    if (visible) {\n      if (type === 'line') {\n        options.lineLabel = this.options.label;\n      }\n\n      if (type === 'area') {\n        options.areaLabel = this.options.label;\n      }\n    }\n\n    _super.prototype.beforeInit.call(this);\n  };\n\n  StackedAreaLayer.prototype.getColorScale = function () {\n    var stackField = this.options.stackField;\n    return this.view.getScaleByField(stackField);\n  };\n\n  StackedAreaLayer.prototype.label = function () {\n    var props = this.options;\n    var label = props.label;\n\n    if (label && label.visible === false) {\n      if (this.line) {\n        this.line.label = false;\n      }\n\n      if (this.point) {\n        this.point.label = false;\n      }\n\n      this.area.label = false;\n      return;\n    }\n  };\n\n  StackedAreaLayer.prototype.adjustArea = function (ele) {\n    ele.adjust = [{\n      type: 'stack'\n    }];\n  };\n\n  StackedAreaLayer.prototype.adjustLine = function (ele) {\n    ele.adjust = [{\n      type: 'stack'\n    }];\n  };\n\n  StackedAreaLayer.prototype.adjustPoint = function (ele) {\n    ele.adjust = [{\n      type: 'stack'\n    }];\n  };\n\n  StackedAreaLayer.prototype.afterRender = function () {\n    this.renderPlotComponents();\n    this.options.responsive = false;\n\n    _super.prototype.afterRender.call(this);\n  };\n\n  StackedAreaLayer.prototype.geometryTooltip = function () {\n    this.area.tooltip = {};\n    var tooltipOptions = this.options.tooltip;\n\n    if (tooltipOptions.fields) {\n      this.area.tooltip.fields = tooltipOptions.fields;\n    }\n\n    if (tooltipOptions.formatter) {\n      this.area.tooltip.callback = tooltipOptions.formatter;\n\n      if (!tooltipOptions.fields) {\n        this.area.tooltip.fields = [this.options.xField, this.options.yField, this.options.stackField];\n      }\n    }\n  };\n\n  StackedAreaLayer.prototype.renderPlotComponents = function () {\n    var _this = this;\n\n    var componentsType = ['areaLabel', 'lineLabel'];\n    each(componentsType, function (t) {\n      var cfg = __assign({\n        view: _this.view,\n        plot: _this\n      }, _this.options[t]);\n\n      var component = getPlotComponents(_this, t, cfg);\n\n      if (component) {\n        component.render();\n\n        _this.plotComponents.push(component);\n      }\n    });\n  };\n\n  return StackedAreaLayer;\n}(BaseArea);\n\nexport default StackedAreaLayer;\nregisterPlotType('stackedArea', StackedAreaLayer);","map":{"version":3,"sources":["../../../src/plots/stacked-area/layer.ts"],"names":[],"mappings":";AAAA,SAAS,OAAT,EAAkB,GAAlB,EAAuB,IAAvB,QAAmC,YAAnC;AACA,SAAS,gBAAT,QAAiC,mBAAjC;AAGA,OAAO,QAAP,MAAqB,eAArB;AACA,SAAS,iBAAT,QAAkC,aAAlC;AACA,OAAO,8BAAP;AACA,OAAO,mCAAP;AAEA,OAAO,SAAP;;AAIA,IAAA,gBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAyG,EAAA,SAAA,CAAA,gBAAA,EAAA,MAAA,CAAA;;AAAzG,WAAA,gBAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;;AACY,IAAA,KAAA,CAAA,cAAA,GAAwB,EAAxB;AAWH,IAAA,KAAA,CAAA,IAAA,GAAe,aAAf;AACA,IAAA,KAAA,CAAA,QAAA,GAAmB,MAAnB;;AAiGR;;AA3Ge,EAAA,gBAAA,CAAA,iBAAA,GAAd,YAAA;AACE,WAAO,OAAO,CAAC,EAAD,EAAK,MAAA,CAAM,iBAAN,CAAuB,IAAvB,CAAuB,IAAvB,CAAL,EAAgC;AAC5C,MAAA,KAAK,EAAE;AACL,QAAA,OAAO,EAAE,KADJ;AAEL,QAAA,IAAI,EAAE;AAFD;AADqC,KAAhC,CAAd;AAMD,GAPa;;AAYP,EAAA,gBAAA,CAAA,SAAA,CAAA,UAAA,GAAP,YAAA;AACE,QAAM,OAAO,GAAG,GAAG,CAAC,KAAK,OAAN,EAAe,CAAC,OAAD,EAAU,SAAV,CAAf,CAAnB;AACA,QAAM,IAAI,GAAG,GAAG,CAAC,KAAK,OAAN,EAAe,CAAC,OAAD,EAAU,MAAV,CAAf,CAAhB;AACA,QAAM,OAAO,GAAQ,KAAK,OAA1B;;AACA,QAAI,OAAJ,EAAa;AACX,UAAI,IAAI,KAAK,MAAb,EAAqB;AACnB,QAAA,OAAO,CAAC,SAAR,GAAoB,KAAK,OAAL,CAAa,KAAjC;AACD;;AACD,UAAI,IAAI,KAAK,MAAb,EAAqB;AACnB,QAAA,OAAO,CAAC,SAAR,GAAoB,KAAK,OAAL,CAAa,KAAjC;AACD;AACF;;AACD,IAAA,MAAA,CAAA,SAAA,CAAM,UAAN,CAAgB,IAAhB,CAAgB,IAAhB;AACD,GAbM;;AAeA,EAAA,gBAAA,CAAA,SAAA,CAAA,aAAA,GAAP,YAAA;AACU,QAAA,UAAU,GAAK,KAAK,OAAL,CAAL,UAAV;AACR,WAAO,KAAK,IAAL,CAAU,eAAV,CAA0B,UAA1B,CAAP;AACD,GAHM;;AAKG,EAAA,gBAAA,CAAA,SAAA,CAAA,KAAA,GAAV,YAAA;AACE,QAAM,KAAK,GAAG,KAAK,OAAnB;AACA,QAAM,KAAK,GAAG,KAAK,CAAC,KAApB;;AAEA,QAAI,KAAK,IAAI,KAAK,CAAC,OAAN,KAAkB,KAA/B,EAAsC;AACpC,UAAI,KAAK,IAAT,EAAe;AACb,aAAK,IAAL,CAAU,KAAV,GAAkB,KAAlB;AACD;;AACD,UAAI,KAAK,KAAT,EAAgB;AACd,aAAK,KAAL,CAAW,KAAX,GAAmB,KAAnB;AACD;;AACD,WAAK,IAAL,CAAU,KAAV,GAAkB,KAAlB;AACA;AACD;AACF,GAdS;;AAgBA,EAAA,gBAAA,CAAA,SAAA,CAAA,UAAA,GAAV,UAAqB,GAArB,EAAuC;AACrC,IAAA,GAAG,CAAC,MAAJ,GAAa,CACX;AACE,MAAA,IAAI,EAAE;AADR,KADW,CAAb;AAKD,GANS;;AAQA,EAAA,gBAAA,CAAA,SAAA,CAAA,UAAA,GAAV,UAAqB,GAArB,EAAuC;AACrC,IAAA,GAAG,CAAC,MAAJ,GAAa,CACX;AACE,MAAA,IAAI,EAAE;AADR,KADW,CAAb;AAKD,GANS;;AAQA,EAAA,gBAAA,CAAA,SAAA,CAAA,WAAA,GAAV,UAAsB,GAAtB,EAAwC;AACtC,IAAA,GAAG,CAAC,MAAJ,GAAa,CACX;AACE,MAAA,IAAI,EAAE;AADR,KADW,CAAb;AAKD,GANS;;AAQH,EAAA,gBAAA,CAAA,SAAA,CAAA,WAAA,GAAP,YAAA;AACE,SAAK,oBAAL;AACA,SAAK,OAAL,CAAa,UAAb,GAA0B,KAA1B;;AACA,IAAA,MAAA,CAAA,SAAA,CAAM,WAAN,CAAiB,IAAjB,CAAiB,IAAjB;AACD,GAJM;;AAMG,EAAA,gBAAA,CAAA,SAAA,CAAA,eAAA,GAAV,YAAA;AACE,SAAK,IAAL,CAAU,OAAV,GAAoB,EAApB;AACA,QAAM,cAAc,GAAQ,KAAK,OAAL,CAAa,OAAzC;;AACA,QAAI,cAAc,CAAC,MAAnB,EAA2B;AACzB,WAAK,IAAL,CAAU,OAAV,CAAkB,MAAlB,GAA2B,cAAc,CAAC,MAA1C;AACD;;AACD,QAAI,cAAc,CAAC,SAAnB,EAA8B;AAC5B,WAAK,IAAL,CAAU,OAAV,CAAkB,QAAlB,GAA6B,cAAc,CAAC,SAA5C;;AACA,UAAI,CAAC,cAAc,CAAC,MAApB,EAA4B;AAC1B,aAAK,IAAL,CAAU,OAAV,CAAkB,MAAlB,GAA2B,CAAC,KAAK,OAAL,CAAa,MAAd,EAAsB,KAAK,OAAL,CAAa,MAAnC,EAA2C,KAAK,OAAL,CAAa,UAAxD,CAA3B;AACD;AACF;AACF,GAZS;;AAcA,EAAA,gBAAA,CAAA,SAAA,CAAA,oBAAA,GAAV,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACE,QAAM,cAAc,GAAG,CAAC,WAAD,EAAc,WAAd,CAAvB;AACA,IAAA,IAAI,CAAC,cAAD,EAAiB,UAAC,CAAD,EAAE;AACrB,UAAM,GAAG,GAAA,QAAA,CAAA;AACP,QAAA,IAAI,EAAE,KAAI,CAAC,IADJ;AAEP,QAAA,IAAI,EAAE;AAFC,OAAA,EAGJ,KAAI,CAAC,OAAL,CAAa,CAAb,CAHI,CAAT;;AAKA,UAAM,SAAS,GAAG,iBAAiB,CAAC,KAAD,EAAO,CAAP,EAAU,GAAV,CAAnC;;AACA,UAAI,SAAJ,EAAe;AACb,QAAA,SAAS,CAAC,MAAV;;AACA,QAAA,KAAI,CAAC,cAAL,CAAoB,IAApB,CAAyB,SAAzB;AACD;AACF,KAXG,CAAJ;AAYD,GAdS;;AAeZ,SAAA,gBAAA;AAAC,CA9GD,CAAyG,QAAzG,CAAA;;;AAgHA,gBAAgB,CAAC,aAAD,EAAgB,gBAAhB,CAAhB","sourcesContent":["import { deepMix, get, each } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport { LayerConfig } from '../../base/layer';\nimport { ElementOption, Label } from '../../interface/config';\nimport BaseArea from '../area/layer';\nimport { getPlotComponents } from './component';\nimport './component/label/area-point';\nimport './component/label/area-point-auto';\nimport { StackedAreaViewConfig } from './interface';\nimport './theme';\n\nexport interface StackedAreaLayerConfig extends StackedAreaViewConfig, LayerConfig {}\n\nexport default class StackedAreaLayer<T extends StackedAreaLayerConfig = StackedAreaLayerConfig> extends BaseArea<T> {\n  protected plotComponents: any[] = [];\n\n  public static getDefaultOptions(): any {\n    return deepMix({}, super.getDefaultOptions(), {\n      label: {\n        visible: false,\n        type: 'area',\n      },\n    });\n  }\n\n  public type: string = 'stackedArea';\n  public baseType: string = 'area';\n\n  public beforeInit() {\n    const visible = get(this.options, ['label', 'visible']);\n    const type = get(this.options, ['label', 'type']);\n    const options: any = this.options;\n    if (visible) {\n      if (type === 'line') {\n        options.lineLabel = this.options.label;\n      }\n      if (type === 'area') {\n        options.areaLabel = this.options.label;\n      }\n    }\n    super.beforeInit();\n  }\n\n  public getColorScale() {\n    const { stackField } = this.options;\n    return this.view.getScaleByField(stackField);\n  }\n\n  protected label() {\n    const props = this.options;\n    const label = props.label as Label;\n\n    if (label && label.visible === false) {\n      if (this.line) {\n        this.line.label = false;\n      }\n      if (this.point) {\n        this.point.label = false;\n      }\n      this.area.label = false;\n      return;\n    }\n  }\n\n  protected adjustArea(ele: ElementOption) {\n    ele.adjust = [\n      {\n        type: 'stack',\n      },\n    ];\n  }\n\n  protected adjustLine(ele: ElementOption) {\n    ele.adjust = [\n      {\n        type: 'stack',\n      },\n    ];\n  }\n\n  protected adjustPoint(ele: ElementOption) {\n    ele.adjust = [\n      {\n        type: 'stack',\n      },\n    ];\n  }\n\n  public afterRender() {\n    this.renderPlotComponents();\n    this.options.responsive = false;\n    super.afterRender();\n  }\n\n  protected geometryTooltip() {\n    this.area.tooltip = {};\n    const tooltipOptions: any = this.options.tooltip;\n    if (tooltipOptions.fields) {\n      this.area.tooltip.fields = tooltipOptions.fields;\n    }\n    if (tooltipOptions.formatter) {\n      this.area.tooltip.callback = tooltipOptions.formatter;\n      if (!tooltipOptions.fields) {\n        this.area.tooltip.fields = [this.options.xField, this.options.yField, this.options.stackField];\n      }\n    }\n  }\n\n  protected renderPlotComponents() {\n    const componentsType = ['areaLabel', 'lineLabel'];\n    each(componentsType, (t) => {\n      const cfg = {\n        view: this.view,\n        plot: this,\n        ...this.options[t],\n      };\n      const component = getPlotComponents(this, t, cfg);\n      if (component) {\n        component.render();\n        this.plotComponents.push(component);\n      }\n    });\n  }\n}\n\nregisterPlotType('stackedArea', StackedAreaLayer);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}