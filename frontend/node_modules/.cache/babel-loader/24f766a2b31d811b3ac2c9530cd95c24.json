{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as _ from '@antv/util';\nimport { DODGE_RATIO, MARGIN_RATIO } from '../constant';\nimport Adjust from './adjust';\n\nvar Dodge =\n/** @class */\nfunction (_super) {\n  __extends(Dodge, _super);\n\n  function Dodge(cfg) {\n    var _this = _super.call(this, cfg) || this;\n\n    _this.cacheMap = {};\n    _this.adjustDataArray = [];\n    _this.mergeData = [];\n    var _a = cfg.marginRatio,\n        marginRatio = _a === void 0 ? MARGIN_RATIO : _a,\n        _b = cfg.dodgeRatio,\n        dodgeRatio = _b === void 0 ? DODGE_RATIO : _b,\n        dodgeBy = cfg.dodgeBy;\n    _this.marginRatio = marginRatio;\n    _this.dodgeRatio = dodgeRatio;\n    _this.dodgeBy = dodgeBy;\n    return _this;\n  }\n\n  Dodge.prototype.process = function (groupDataArray) {\n    var groupedDataArray = _.clone(groupDataArray); // 将数据数组展开一层\n\n\n    var mergeData = _.flatten(groupedDataArray);\n\n    var dodgeBy = this.dodgeBy; // 如果指定了分组 dim 的字段\n\n    var adjustDataArray = dodgeBy ? _.group(mergeData, dodgeBy) : groupedDataArray;\n    this.cacheMap = {};\n    this.adjustDataArray = adjustDataArray;\n    this.mergeData = mergeData;\n    this.adjustData(adjustDataArray, mergeData);\n    this.adjustDataArray = [];\n    this.mergeData = [];\n    return groupedDataArray;\n  };\n\n  Dodge.prototype.adjustDim = function (dim, values, data, frameIndex) {\n    var _this = this;\n\n    var map = this.getDistribution(dim);\n    var groupData = this.groupData(data, dim); // 根据值分组\n\n    _.each(groupData, function (group, key) {\n      var range; // xField 中只有一个值，不需要做 dodge\n\n      if (values.length === 1) {\n        range = {\n          pre: values[0] - 1,\n          next: values[0] + 1\n        };\n      } else {\n        // 如果有多个，则需要获取调整的范围\n        range = _this.getAdjustRange(dim, parseFloat(key), values);\n      }\n\n      _.each(group, function (d) {\n        var value = d[dim];\n        var valueArr = map[value];\n        var valIndex = valueArr.indexOf(frameIndex);\n        d[dim] = _this.getDodgeOffset(range, valIndex, valueArr.length);\n      });\n    });\n\n    return [];\n  };\n\n  Dodge.prototype.getDodgeOffset = function (range, idx, len) {\n    var _a = this,\n        dodgeRatio = _a.dodgeRatio,\n        marginRatio = _a.marginRatio;\n\n    var pre = range.pre,\n        next = range.next;\n    var tickLength = next - pre;\n    var width = tickLength * dodgeRatio / len;\n    var margin = marginRatio * width;\n    var offset = 1 / 2 * (tickLength - len * width - (len - 1) * margin) + ((idx + 1) * width + idx * margin) - 1 / 2 * width - 1 / 2 * tickLength;\n    return (pre + next) / 2 + offset;\n  };\n\n  Dodge.prototype.getDistribution = function (dim) {\n    var groupedDataArray = this.adjustDataArray;\n    var cacheMap = this.cacheMap;\n    var map = cacheMap[dim];\n\n    if (!map) {\n      map = {};\n\n      _.each(groupedDataArray, function (data, index) {\n        var values = _.valuesOfKey(data, dim);\n\n        if (!values.length) {\n          values.push(0);\n        }\n\n        _.each(values, function (val) {\n          if (!map[val]) {\n            map[val] = [];\n          }\n\n          map[val].push(index);\n        });\n      });\n\n      cacheMap[dim] = map;\n    }\n\n    return map;\n  };\n\n  return Dodge;\n}(Adjust);\n\nexport default Dodge;","map":{"version":3,"sources":["../../src/adjusts/dodge.ts"],"names":[],"mappings":";AAAA,OAAO,KAAK,CAAZ,MAAmB,YAAnB;AACA,SAAS,WAAT,EAAsB,YAAtB,QAA0C,aAA1C;AAEA,OAAO,MAAP,MAAmB,UAAnB;;AAEA,IAAA,KAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAmC,EAAA,SAAA,CAAA,KAAA,EAAA,MAAA,CAAA;;AAKjC,WAAA,KAAA,CAAY,GAAZ,EAAyB;AAAzB,QAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,GAAN,KAAU,IADZ;;AAJQ,IAAA,KAAA,CAAA,QAAA,GAAmC,EAAnC;AACA,IAAA,KAAA,CAAA,eAAA,GAA4B,EAA5B;AACA,IAAA,KAAA,CAAA,SAAA,GAAoB,EAApB;AAKE,QAAA,EAAA,GAAA,GAAA,CAAA,WAAA;AAAA,QAAA,WAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,YAAA,GAAA,EAAA;AAAA,QAA4B,EAAA,GAAA,GAAA,CAAA,UAA5B;AAAA,QAA4B,UAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,WAAA,GAAA,EAA5B;AAAA,QAAsD,OAAA,GAAA,GAAA,CAAA,OAAtD;AACR,IAAA,KAAI,CAAC,WAAL,GAAmB,WAAnB;AACA,IAAA,KAAI,CAAC,UAAL,GAAkB,UAAlB;AACA,IAAA,KAAI,CAAC,OAAL,GAAe,OAAf;;AACD;;AAEM,EAAA,KAAA,CAAA,SAAA,CAAA,OAAA,GAAP,UAAe,cAAf,EAAuC;AACrC,QAAM,gBAAgB,GAAG,CAAC,CAAC,KAAF,CAAQ,cAAR,CAAzB,CADqC,CAErC;;;AACA,QAAM,SAAS,GAAG,CAAC,CAAC,OAAF,CAAU,gBAAV,CAAlB;;AAEQ,QAAA,OAAA,GAAA,KAAA,OAAA,CAL6B,CAOrC;;AACA,QAAM,eAAe,GAAG,OAAO,GAAG,CAAC,CAAC,KAAF,CAAQ,SAAR,EAAmB,OAAnB,CAAH,GAAiC,gBAAhE;AAEA,SAAK,QAAL,GAAgB,EAAhB;AACA,SAAK,eAAL,GAAuB,eAAvB;AACA,SAAK,SAAL,GAAiB,SAAjB;AAEA,SAAK,UAAL,CAAgB,eAAhB,EAAiC,SAAjC;AAEA,SAAK,eAAL,GAAuB,EAAvB;AACA,SAAK,SAAL,GAAiB,EAAjB;AAEA,WAAO,gBAAP;AACD,GApBM;;AAsBG,EAAA,KAAA,CAAA,SAAA,CAAA,SAAA,GAAV,UAAoB,GAApB,EAAiC,MAAjC,EAAmD,IAAnD,EAAiE,UAAjE,EAAmF;AAAnF,QAAA,KAAA,GAAA,IAAA;;AACE,QAAM,GAAG,GAAG,KAAK,eAAL,CAAqB,GAArB,CAAZ;AACA,QAAM,SAAS,GAAG,KAAK,SAAL,CAAe,IAAf,EAAqB,GAArB,CAAlB,CAFiF,CAEpC;;AAE7C,IAAA,CAAC,CAAC,IAAF,CAAO,SAAP,EAAkB,UAAC,KAAD,EAAQ,GAAR,EAAW;AAC3B,UAAI,KAAJ,CAD2B,CAG3B;;AACA,UAAI,MAAM,CAAC,MAAP,KAAkB,CAAtB,EAAyB;AACvB,QAAA,KAAK,GAAG;AACN,UAAA,GAAG,EAAE,MAAM,CAAC,CAAD,CAAN,GAAY,CADX;AAEN,UAAA,IAAI,EAAE,MAAM,CAAC,CAAD,CAAN,GAAY;AAFZ,SAAR;AAID,OALD,MAKO;AACL;AACA,QAAA,KAAK,GAAG,KAAI,CAAC,cAAL,CAAoB,GAApB,EAAyB,UAAU,CAAC,GAAD,CAAnC,EAA0C,MAA1C,CAAR;AACD;;AACD,MAAA,CAAC,CAAC,IAAF,CAAO,KAAP,EAAc,UAAC,CAAD,EAAE;AACd,YAAM,KAAK,GAAG,CAAC,CAAC,GAAD,CAAf;AACA,YAAM,QAAQ,GAAG,GAAG,CAAC,KAAD,CAApB;AACA,YAAM,QAAQ,GAAG,QAAQ,CAAC,OAAT,CAAiB,UAAjB,CAAjB;AACA,QAAA,CAAC,CAAC,GAAD,CAAD,GAAS,KAAI,CAAC,cAAL,CAAoB,KAApB,EAA2B,QAA3B,EAAqC,QAAQ,CAAC,MAA9C,CAAT;AACD,OALD;AAMD,KAnBD;;AAoBA,WAAO,EAAP;AACD,GAzBS;;AA2BF,EAAA,KAAA,CAAA,SAAA,CAAA,cAAA,GAAR,UAAuB,KAAvB,EAAqC,GAArC,EAAkD,GAAlD,EAA6D;AACrD,QAAA,EAAA,GAAA,IAAA;AAAA,QAAE,UAAA,GAAA,EAAA,CAAA,UAAF;AAAA,QAAc,WAAA,GAAA,EAAA,CAAA,WAAd;;AACE,QAAA,GAAA,GAAA,KAAA,CAAA,GAAA;AAAA,QAAK,IAAA,GAAA,KAAA,CAAA,IAAL;AAER,QAAM,UAAU,GAAG,IAAI,GAAG,GAA1B;AAEA,QAAM,KAAK,GAAI,UAAU,GAAG,UAAd,GAA4B,GAA1C;AACA,QAAM,MAAM,GAAG,WAAW,GAAG,KAA7B;AAEA,QAAM,MAAM,GACT,IAAI,CAAL,IAAW,UAAU,GAAG,GAAG,GAAG,KAAnB,GAA2B,CAAC,GAAG,GAAG,CAAP,IAAY,MAAlD,KACC,CAAC,GAAG,GAAG,CAAP,IAAY,KAAZ,GAAoB,GAAG,GAAG,MAD3B,IAEC,IAAI,CAAL,GAAU,KAFV,GAGC,IAAI,CAAL,GAAU,UAJZ;AAMA,WAAO,CAAC,GAAG,GAAG,IAAP,IAAe,CAAf,GAAmB,MAA1B;AACD,GAhBO;;AAkBA,EAAA,KAAA,CAAA,SAAA,CAAA,eAAA,GAAR,UAAwB,GAAxB,EAAmC;AACjC,QAAM,gBAAgB,GAAG,KAAK,eAA9B;AACA,QAAM,QAAQ,GAAG,KAAK,QAAtB;AACA,QAAI,GAAG,GAAG,QAAQ,CAAC,GAAD,CAAlB;;AAEA,QAAI,CAAC,GAAL,EAAU;AACR,MAAA,GAAG,GAAG,EAAN;;AACA,MAAA,CAAC,CAAC,IAAF,CAAO,gBAAP,EAAyB,UAAC,IAAD,EAAO,KAAP,EAAY;AACnC,YAAM,MAAM,GAAG,CAAC,CAAC,WAAF,CAAc,IAAd,EAAoB,GAApB,CAAf;;AACA,YAAI,CAAC,MAAM,CAAC,MAAZ,EAAoB;AAClB,UAAA,MAAM,CAAC,IAAP,CAAY,CAAZ;AACD;;AACD,QAAA,CAAC,CAAC,IAAF,CAAO,MAAP,EAAe,UAAC,GAAD,EAAY;AACzB,cAAI,CAAC,GAAG,CAAC,GAAD,CAAR,EAAe;AACb,YAAA,GAAG,CAAC,GAAD,CAAH,GAAW,EAAX;AACD;;AACD,UAAA,GAAG,CAAC,GAAD,CAAH,CAAS,IAAT,CAAc,KAAd;AACD,SALD;AAMD,OAXD;;AAYA,MAAA,QAAQ,CAAC,GAAD,CAAR,GAAgB,GAAhB;AACD;;AAED,WAAO,GAAP;AACD,GAvBO;;AAwBV,SAAA,KAAA;AAAC,CAzGD,CAAmC,MAAnC,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport * as _ from '@antv/util';\nimport { DODGE_RATIO, MARGIN_RATIO } from '../constant';\nimport Adjust from './adjust';\nvar Dodge = /** @class */ (function (_super) {\n    __extends(Dodge, _super);\n    function Dodge(cfg) {\n        var _this = _super.call(this, cfg) || this;\n        _this.cacheMap = {};\n        _this.adjustDataArray = [];\n        _this.mergeData = [];\n        var _a = cfg.marginRatio, marginRatio = _a === void 0 ? MARGIN_RATIO : _a, _b = cfg.dodgeRatio, dodgeRatio = _b === void 0 ? DODGE_RATIO : _b, dodgeBy = cfg.dodgeBy;\n        _this.marginRatio = marginRatio;\n        _this.dodgeRatio = dodgeRatio;\n        _this.dodgeBy = dodgeBy;\n        return _this;\n    }\n    Dodge.prototype.process = function (groupDataArray) {\n        var groupedDataArray = _.clone(groupDataArray);\n        // 将数据数组展开一层\n        var mergeData = _.flatten(groupedDataArray);\n        var dodgeBy = this.dodgeBy;\n        // 如果指定了分组 dim 的字段\n        var adjustDataArray = dodgeBy ? _.group(mergeData, dodgeBy) : groupedDataArray;\n        this.cacheMap = {};\n        this.adjustDataArray = adjustDataArray;\n        this.mergeData = mergeData;\n        this.adjustData(adjustDataArray, mergeData);\n        this.adjustDataArray = [];\n        this.mergeData = [];\n        return groupedDataArray;\n    };\n    Dodge.prototype.adjustDim = function (dim, values, data, frameIndex) {\n        var _this = this;\n        var map = this.getDistribution(dim);\n        var groupData = this.groupData(data, dim); // 根据值分组\n        _.each(groupData, function (group, key) {\n            var range;\n            // xField 中只有一个值，不需要做 dodge\n            if (values.length === 1) {\n                range = {\n                    pre: values[0] - 1,\n                    next: values[0] + 1,\n                };\n            }\n            else {\n                // 如果有多个，则需要获取调整的范围\n                range = _this.getAdjustRange(dim, parseFloat(key), values);\n            }\n            _.each(group, function (d) {\n                var value = d[dim];\n                var valueArr = map[value];\n                var valIndex = valueArr.indexOf(frameIndex);\n                d[dim] = _this.getDodgeOffset(range, valIndex, valueArr.length);\n            });\n        });\n        return [];\n    };\n    Dodge.prototype.getDodgeOffset = function (range, idx, len) {\n        var _a = this, dodgeRatio = _a.dodgeRatio, marginRatio = _a.marginRatio;\n        var pre = range.pre, next = range.next;\n        var tickLength = next - pre;\n        var width = (tickLength * dodgeRatio) / len;\n        var margin = marginRatio * width;\n        var offset = (1 / 2) * (tickLength - len * width - (len - 1) * margin) +\n            ((idx + 1) * width + idx * margin) -\n            (1 / 2) * width -\n            (1 / 2) * tickLength;\n        return (pre + next) / 2 + offset;\n    };\n    Dodge.prototype.getDistribution = function (dim) {\n        var groupedDataArray = this.adjustDataArray;\n        var cacheMap = this.cacheMap;\n        var map = cacheMap[dim];\n        if (!map) {\n            map = {};\n            _.each(groupedDataArray, function (data, index) {\n                var values = _.valuesOfKey(data, dim);\n                if (!values.length) {\n                    values.push(0);\n                }\n                _.each(values, function (val) {\n                    if (!map[val]) {\n                        map[val] = [];\n                    }\n                    map[val].push(index);\n                });\n            });\n            cacheMap[dim] = map;\n        }\n        return map;\n    };\n    return Dodge;\n}(Adjust));\nexport default Dodge;\n//# sourceMappingURL=dodge.js.map"]},"metadata":{},"sourceType":"module"}