{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { isArray, mix, hasKey, each, has, isFunction, clone, deepMix, isString, isNumber } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport { getGeom } from '../../geoms/factory';\nimport TinyLayer from '../tiny-layer';\nimport Marker from './component/marker';\nimport * as EventParser from './event';\nvar G2_GEOM_MAP = {\n  progress: 'interval'\n};\nvar PLOT_GEOM_MAP = {\n  interval: 'progress'\n};\nvar DEFAULT_COLOR = ['#55A6F3', '#E8EDF3'];\n\nvar ProgressLayer =\n/** @class */\nfunction (_super) {\n  __extends(ProgressLayer, _super);\n\n  function ProgressLayer() {\n    /**\n     * 将进度条配置项转为堆叠条形图配置项\n     */\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'progress';\n    _this.isEntered = false;\n    return _this;\n  }\n\n  ProgressLayer.prototype.processProps = function () {\n    var props = this.options;\n    props.data = this.processData();\n    var cfg = {\n      padding: [0, 0, 0, 0],\n      xField: 'value',\n      yField: '1',\n      stackField: 'type',\n      barSize: props.size ? props.size : this.getSize(),\n      barStyle: props.progressStyle,\n      color: this.parseColorProps(props) || DEFAULT_COLOR\n    };\n    props = mix(props, cfg);\n  };\n\n  ProgressLayer.prototype.init = function () {\n    this.processProps();\n\n    _super.prototype.init.call(this);\n  };\n\n  ProgressLayer.prototype.beforeInit = function () {\n    var percent = this.options.percent;\n\n    if (!isNumber(percent)) {\n      throw new Error('Percent value is required, and the type of percent must be Number.');\n    }\n  };\n\n  ProgressLayer.prototype.update = function (cfg) {\n    var props = this.options;\n\n    if (hasKey(cfg, 'percent')) {\n      props.percent = cfg.percent;\n      this.changeData(this.processData());\n    }\n\n    if (cfg.style) {\n      this.styleUpdateAnimation(cfg.style);\n      this.updateColorConfigByStyle(cfg.style);\n    }\n\n    if (cfg.color) {\n      var style = void 0;\n\n      if (isArray(cfg.color)) {\n        this.options.color = cfg.color;\n        style = [{\n          fill: cfg.color[0]\n        }, {\n          fill: cfg.color[1]\n        }];\n      } else {\n        this.options.color[0] = cfg.color;\n        style = {\n          fill: cfg.color\n        };\n      }\n\n      this.styleUpdateAnimation(style);\n    }\n\n    if (cfg.marker) {\n      this.updateMarkers(cfg.marker);\n      this.options.marker = cfg.marker;\n    }\n  };\n\n  ProgressLayer.prototype.destroy = function () {\n    if (this.markers && this.markers.length > 0) {\n      each(this.markers, function (marker) {\n        marker.destroy();\n      });\n      this.markers = [];\n    }\n\n    _super.prototype.destroy.call(this);\n  };\n\n  ProgressLayer.prototype.afterRender = function () {\n    var _this = this;\n\n    if (this.options.marker && !this.markers) {\n      this.markers = [];\n      each(this.options.marker, function (cfg) {\n        var markerCfg = mix({\n          canvas: _this.canvas,\n          view: _this.view,\n          progressSize: _this.options.barSize\n        }, cfg);\n        var marker = new Marker(markerCfg);\n\n        _this.markers.push(marker);\n      });\n    }\n\n    var progressContainer = this.view.geometries[0].container;\n    var bbox = progressContainer.getBBox();\n    var rect = progressContainer.addShape('rect', {\n      attrs: {\n        width: bbox.width,\n        height: bbox.height,\n        x: bbox.minX,\n        y: bbox.minY,\n        fill: 'rgba(0,0,0,0)'\n      }\n    });\n    this.canvas.draw();\n    rect.on('mouseenter', function (ev) {\n      _this.isEntered = true;\n\n      _this.view.emit('progress:mouseenter', ev);\n    });\n    rect.on('mouseleave', function (ev) {\n      _this.isEntered = false;\n\n      _this.view.emit('progress:mouseleave', ev);\n    });\n    var canvasDom = this.canvas.get('container');\n    canvasDom.addEventListener('mouseleave', function (ev) {\n      if (_this.isEntered) {\n        _this.view.emit('progress:mouseleave', ev);\n\n        _this.isEntered = false;\n      }\n    });\n  };\n\n  ProgressLayer.prototype.geometryParser = function (dim, type) {\n    if (dim === 'g2') {\n      return G2_GEOM_MAP[type];\n    }\n\n    return PLOT_GEOM_MAP[type];\n  };\n\n  ProgressLayer.prototype.coord = function () {\n    this.setConfig('coordinate', {\n      actions: [['transpose']]\n    });\n  };\n\n  ProgressLayer.prototype.addGeometry = function () {\n    var props = this.options;\n    var bar = getGeom('interval', 'main', {\n      positionFields: [props.yField, props.xField],\n      plot: this\n    });\n    bar.adjust = [{\n      type: 'stack'\n    }];\n\n    if (has(props, 'animation')) {\n      bar.animate = props.animation;\n    }\n\n    this.setConfig('geometry', bar);\n  };\n\n  ProgressLayer.prototype.parseEvents = function (eventParser) {\n    if (eventParser) {\n      _super.prototype.parseEvents.call(this, eventParser);\n    } else {\n      _super.prototype.parseEvents.call(this, EventParser);\n    }\n  };\n\n  ProgressLayer.prototype.parseColorProps = function (props) {\n    var colorOption;\n\n    if (props.color) {\n      if (isFunction(props.color)) {\n        colorOption = props.color(props.percent);\n      } else {\n        colorOption = props.color;\n      }\n\n      if (isString(colorOption)) {\n        var color = clone(DEFAULT_COLOR);\n        color[0] = colorOption;\n        return color;\n      } else {\n        return colorOption;\n      }\n    }\n\n    return props.color;\n  };\n\n  ProgressLayer.prototype.processData = function () {\n    var props = this.options;\n    var data = [{\n      type: 'current',\n      value: props.percent\n    }, {\n      type: 'rest',\n      value: 1.0 - props.percent\n    }];\n    return data;\n  };\n\n  ProgressLayer.prototype.updateMarkers = function (markerCfg) {\n    var markerLength = markerCfg.length;\n    var animationOptions = this.getUpdateAnimationOptions(); // marker diff\n\n    each(this.markers, function (marker, index) {\n      if (index > markerLength - 1) {\n        marker.destroy();\n      } else {\n        marker.update(markerCfg[index], animationOptions.duration, animationOptions.easing);\n      }\n    }); // add new markers\n\n    if (this.markers.length < markerLength) {\n      var startIndex = this.markers.length;\n\n      for (var i = startIndex; i < markerLength; i++) {\n        var cfg = deepMix({}, {\n          canvas: this.canvas,\n          view: this.view,\n          progressSize: this.options.barSize\n        }, markerCfg[i]);\n        var marker = new Marker(cfg);\n        this.markers.push(marker);\n      }\n    }\n  };\n\n  ProgressLayer.prototype.getSize = function () {\n    var height = this.height;\n\n    if (height >= 50) {\n      return 10;\n    }\n\n    return 4;\n  };\n\n  ProgressLayer.prototype.styleUpdateAnimation = function (style) {\n    // style更新动画接受用户animation配置的透传\n    var _a = this.getUpdateAnimationOptions(),\n        duration = _a.duration,\n        easing = _a.easing; // get geometry shapes\n\n\n    var progressShapes = [];\n    var view = this.view;\n    var geometry = view.geometries;\n    each(geometry, function (geom) {\n      if (geom.type === 'interval') {\n        var elements = geom.elements;\n        each(elements, function (ele) {\n          progressShapes.push.apply(progressShapes, ele.shape);\n        });\n      }\n    });\n\n    if (isArray(style)) {\n      each(style, function (s, index) {\n        progressShapes[index].animate(s, duration, easing);\n      });\n    } else {\n      progressShapes[0].animate(style, duration, easing);\n    }\n  };\n\n  ProgressLayer.prototype.getUpdateAnimationOptions = function () {\n    var duration = 450;\n    var easing = 'easeQuadInOut';\n    var animationOptions = this.options.animation;\n\n    if (animationOptions && animationOptions.update) {\n      if (animationOptions.update.duration) {\n        duration = animationOptions.update.duration;\n      }\n\n      if (animationOptions.update.easing) {\n        easing = animationOptions.update.easing;\n      }\n    }\n\n    return {\n      duration: duration,\n      easing: easing\n    };\n  };\n\n  ProgressLayer.prototype.updateColorConfigByStyle = function (style) {\n    var _this = this;\n\n    if (isArray(style)) {\n      each(style, function (s, index) {\n        if (s.fill) {\n          _this.options.color[index] = s.fill;\n        }\n      });\n    } else if (style.fill) {\n      this.options.color[0] = style.fill;\n    }\n  };\n\n  return ProgressLayer;\n}(TinyLayer);\n\nexport default ProgressLayer;\nregisterPlotType('progress', ProgressLayer);","map":{"version":3,"sources":["../../../src/sparkline/progress/layer.ts"],"names":[],"mappings":"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","sourcesContent":["import { isArray, mix, hasKey, each, has, isFunction, clone, deepMix, isString, isNumber } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport { getGeom } from '../../geoms/factory';\nimport TinyLayer, { TinyViewConfig } from '../tiny-layer';\nimport Marker, { MarkerConfig } from './component/marker';\nimport * as EventParser from './event';\nimport { GraphicStyle } from '../../interface/config';\n\nexport interface ProgressViewConfig extends TinyViewConfig {\n  progressStyle?: GraphicStyle;\n  percent?: number;\n  size?: number;\n  marker?: MarkerConfig[];\n  /** @ignore */\n  barSize?: number;\n  /** @ignore */\n  barStyle?: GraphicStyle;\n  /** @ignore */\n  stackField?: string;\n}\n\ninterface UpdateConfig {\n  percent: number;\n  color?: string | string[];\n  style?: {} | {}[];\n  marker?: MarkerConfig[];\n}\n\nexport type ProgressLayerConfig = ProgressViewConfig;\n\nconst G2_GEOM_MAP = {\n  progress: 'interval',\n};\n\nconst PLOT_GEOM_MAP = {\n  interval: 'progress',\n};\n\nconst DEFAULT_COLOR = ['#55A6F3', '#E8EDF3'];\n\nexport default class ProgressLayer<T extends ProgressLayerConfig = ProgressLayerConfig> extends TinyLayer<T> {\n  /**\n   * 将进度条配置项转为堆叠条形图配置项\n   */\n\n  public type: string = 'progress';\n  protected markers: MarkerConfig[];\n  private isEntered = false;\n\n  public processProps() {\n    let props = this.options;\n    props.data = this.processData();\n    const cfg = {\n      padding: [0, 0, 0, 0],\n      xField: 'value',\n      yField: '1',\n      stackField: 'type',\n      barSize: props.size ? props.size : this.getSize(),\n      barStyle: props.progressStyle,\n      color: this.parseColorProps(props) || DEFAULT_COLOR,\n    } as any;\n    props = mix(props, cfg);\n  }\n\n  public init() {\n    this.processProps();\n    super.init();\n  }\n\n  public beforeInit() {\n    const { percent } = this.options;\n    if (!isNumber(percent)) {\n      throw new Error('Percent value is required, and the type of percent must be Number.');\n    }\n  }\n\n  public update(cfg: UpdateConfig) {\n    const props = this.options;\n    if (hasKey(cfg, 'percent')) {\n      props.percent = cfg.percent;\n      this.changeData(this.processData());\n    }\n\n    if (cfg.style) {\n      this.styleUpdateAnimation(cfg.style);\n      this.updateColorConfigByStyle(cfg.style);\n    }\n\n    if (cfg.color) {\n      let style;\n      if (isArray(cfg.color)) {\n        this.options.color = cfg.color;\n        style = [{ fill: cfg.color[0] }, { fill: cfg.color[1] }];\n      } else {\n        this.options.color[0] = cfg.color;\n        style = { fill: cfg.color };\n      }\n      this.styleUpdateAnimation(style);\n    }\n\n    if (cfg.marker) {\n      this.updateMarkers(cfg.marker);\n      this.options.marker = cfg.marker;\n    }\n  }\n\n  public destroy() {\n    if (this.markers && this.markers.length > 0) {\n      each(this.markers, (marker) => {\n        marker.destroy();\n      });\n      this.markers = [];\n    }\n    super.destroy();\n  }\n\n  public afterRender() {\n    if (this.options.marker && !this.markers) {\n      this.markers = [];\n      each(this.options.marker, (cfg) => {\n        const markerCfg = mix(\n          {\n            canvas: this.canvas,\n            view: this.view,\n            progressSize: this.options.barSize,\n          },\n          cfg\n        );\n        const marker = new Marker(markerCfg);\n        this.markers.push(marker);\n      });\n    }\n    const progressContainer = this.view.geometries[0].container;\n    const bbox = progressContainer.getBBox();\n    const rect = progressContainer.addShape('rect', {\n      attrs: {\n        width: bbox.width,\n        height: bbox.height,\n        x: bbox.minX,\n        y: bbox.minY,\n        fill: 'rgba(0,0,0,0)',\n      },\n    });\n    this.canvas.draw();\n\n    rect.on('mouseenter', (ev) => {\n      this.isEntered = true;\n      this.view.emit('progress:mouseenter', ev);\n    });\n\n    rect.on('mouseleave', (ev) => {\n      this.isEntered = false;\n      this.view.emit('progress:mouseleave', ev);\n    });\n    const canvasDom = this.canvas.get('container');\n    canvasDom.addEventListener('mouseleave', (ev) => {\n      if (this.isEntered) {\n        this.view.emit('progress:mouseleave', ev);\n        this.isEntered = false;\n      }\n    });\n  }\n\n  protected geometryParser(dim: string, type: string): string {\n    if (dim === 'g2') {\n      return G2_GEOM_MAP[type];\n    }\n    return PLOT_GEOM_MAP[type];\n  }\n\n  protected coord() {\n    this.setConfig('coordinate', {\n      actions: [['transpose']],\n    });\n  }\n\n  protected addGeometry() {\n    const props = this.options;\n    const bar = getGeom('interval', 'main', {\n      positionFields: [props.yField, props.xField],\n      plot: this,\n    });\n    bar.adjust = [\n      {\n        type: 'stack',\n      },\n    ];\n    if (has(props, 'animation')) {\n      bar.animate = props.animation;\n    }\n    this.setConfig('geometry', bar);\n  }\n\n  protected parseEvents(eventParser?) {\n    if (eventParser) {\n      super.parseEvents(eventParser);\n    } else {\n      super.parseEvents(EventParser);\n    }\n  }\n\n  protected parseColorProps(props) {\n    let colorOption;\n    if (props.color) {\n      if (isFunction(props.color)) {\n        colorOption = props.color(props.percent);\n      } else {\n        colorOption = props.color;\n      }\n      if (isString(colorOption)) {\n        const color = clone(DEFAULT_COLOR);\n        color[0] = colorOption;\n        return color;\n      } else {\n        return colorOption;\n      }\n    }\n    return props.color;\n  }\n\n  protected processData() {\n    const props = this.options;\n    const data = [\n      { type: 'current', value: props.percent },\n      { type: 'rest', value: 1.0 - props.percent },\n    ];\n    return data;\n  }\n\n  protected updateMarkers(markerCfg: MarkerConfig[]) {\n    const markerLength = markerCfg.length;\n    const animationOptions = this.getUpdateAnimationOptions();\n    // marker diff\n    each(this.markers, (marker, index) => {\n      if (index > markerLength - 1) {\n        marker.destroy();\n      } else {\n        marker.update(markerCfg[index], animationOptions.duration, animationOptions.easing);\n      }\n    });\n    // add new markers\n    if (this.markers.length < markerLength) {\n      const startIndex = this.markers.length;\n      for (let i = startIndex; i < markerLength; i++) {\n        const cfg = deepMix(\n          {},\n          {\n            canvas: this.canvas,\n            view: this.view,\n            progressSize: this.options.barSize,\n          },\n          markerCfg[i]\n        );\n        const marker = new Marker(cfg);\n        this.markers.push(marker);\n      }\n    }\n  }\n\n  private getSize() {\n    const { height } = this;\n    if (height >= 50) {\n      return 10;\n    }\n    return 4;\n  }\n\n  private styleUpdateAnimation(style) {\n    // style更新动画接受用户animation配置的透传\n    const { duration, easing } = this.getUpdateAnimationOptions();\n    // get geometry shapes\n    const progressShapes = [];\n    const { view } = this;\n    const geometry = view.geometries;\n    each(geometry, (geom) => {\n      if (geom.type === 'interval') {\n        const elements = geom.elements;\n        each(elements, (ele) => {\n          progressShapes.push(...ele.shape);\n        });\n      }\n    });\n    if (isArray(style)) {\n      each(style, (s, index) => {\n        progressShapes[index].animate(s, duration, easing);\n      });\n    } else {\n      progressShapes[0].animate(style, duration, easing);\n    }\n  }\n\n  private getUpdateAnimationOptions() {\n    let duration = 450;\n    let easing = 'easeQuadInOut';\n    const animationOptions: any = this.options.animation;\n    if (animationOptions && animationOptions.update) {\n      if (animationOptions.update.duration) {\n        duration = animationOptions.update.duration;\n      }\n      if (animationOptions.update.easing) {\n        easing = animationOptions.update.easing;\n      }\n    }\n    return { duration, easing };\n  }\n\n  private updateColorConfigByStyle(style) {\n    if (isArray(style)) {\n      each(style, (s, index) => {\n        if (s.fill) {\n          this.options.color[index] = s.fill;\n        }\n      });\n    } else if (style.fill) {\n      this.options.color[0] = style.fill;\n    }\n  }\n}\n\nregisterPlotType('progress', ProgressLayer);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}