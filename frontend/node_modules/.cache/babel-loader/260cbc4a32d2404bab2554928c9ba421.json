{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { each, get, deepMix } from '@antv/util';\nimport { _ORIGIN } from '../../../dependents';\nimport BaseLabel, { registerLabelComponent } from '../../../components/label/base';\nimport { rgb2arr, mappingColor } from '../../../util/color';\nimport BBox from '../../../util/bbox';\n\nvar BarLabel =\n/** @class */\nfunction (_super) {\n  __extends(BarLabel, _super);\n\n  function BarLabel() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  BarLabel.prototype.getLabelItemAttrs = function (element, index) {\n    var _a;\n\n    var _b = this.options,\n        style = _b.style,\n        formatter = _b.formatter;\n    var mappingData = [].concat(element.getModel().mappingData);\n    var value = this.getValue(element);\n    return deepMix({}, style, __assign(__assign({}, this.getPosition(element)), {\n      text: formatter ? formatter(value, (_a = {}, _a[_ORIGIN] = mappingData[0]._origin, _a.mappingDatum = mappingData[0], _a.mappingDatumIndex = 0, _a.element = element, _a.elementIndex = index, _a), index) : value,\n      fill: this.getTextFill(element),\n      stroke: this.getTextStroke(element),\n      textAlign: this.getTextAlign(element),\n      textBaseline: this.getTextBaseline()\n    }));\n  };\n\n  BarLabel.prototype.adjustLabel = function (label, element) {\n    var _a = this.options,\n        adjustPosition = _a.adjustPosition,\n        style = _a.style;\n\n    if (adjustPosition) {\n      var offset = this.getDefaultOffset();\n      var labelRange = label.getBBox();\n      var shapeRange = this.getElementShapeBBox(element);\n\n      if (shapeRange.width <= labelRange.width) {\n        var xPosition = shapeRange.maxX + this.options.offsetX + offset;\n        label.attr('x', xPosition);\n        label.attr('fill', style.fill);\n      }\n    }\n  };\n\n  BarLabel.prototype.getDefaultOptions = function () {\n    var theme = this.layer.theme;\n    var _a = theme.label,\n        label = _a === void 0 ? {} : _a;\n    return __assign({\n      offsetX: 0,\n      offsetY: 0,\n      adjustPosition: true\n    }, label);\n  };\n\n  BarLabel.prototype.getValue = function (element) {\n    return get(element.getData(), this.layer.options.xField);\n  };\n\n  BarLabel.prototype.getPosition = function (element) {\n    var offset = this.getDefaultOffset();\n    var value = this.getValue(element);\n    var bbox = this.getElementShapeBBox(element);\n    var minX = bbox.minX,\n        maxX = bbox.maxX,\n        minY = bbox.minY,\n        height = bbox.height,\n        width = bbox.width;\n    var _a = this.options,\n        offsetX = _a.offsetX,\n        offsetY = _a.offsetY,\n        position = _a.position;\n    var y = minY + height / 2 + offsetY;\n    var dir = value < 0 ? -1 : 1;\n    var x;\n\n    if (position === 'left') {\n      var root = value > 0 ? minX : maxX;\n      x = root + offset * dir + offsetX;\n    } else if (position === 'right') {\n      var root = value > 0 ? maxX : minX;\n      x = root + offset * dir + offsetX;\n    } else {\n      x = minX + width / 2 + offsetX;\n    }\n\n    return {\n      x: x,\n      y: y\n    };\n  };\n\n  BarLabel.prototype.getTextFill = function (element) {\n    var shape = element.shape;\n\n    if (this.options.adjustColor && this.options.position !== 'right') {\n      var shapeColor = shape.attr('fill');\n      var shapeOpacity = shape.attr('opacity') ? shape.attr('opacity') : 1;\n      var rgb = rgb2arr(shapeColor);\n      var gray = Math.round(rgb[0] * 0.299 + rgb[1] * 0.587 + rgb[2] * 0.114) / shapeOpacity;\n      var colorBand = [{\n        from: 0,\n        to: 85,\n        color: 'white'\n      }, {\n        from: 85,\n        to: 170,\n        color: '#F6F6F6'\n      }, {\n        from: 170,\n        to: 255,\n        color: 'black'\n      }];\n      var reflect = mappingColor(colorBand, gray);\n      return reflect;\n    }\n\n    var defaultColor = this.options.style.fill;\n    return defaultColor;\n  };\n\n  BarLabel.prototype.getTextStroke = function (element) {\n    var fill = this.getTextFill(element);\n    var _a = this.options,\n        position = _a.position,\n        adjustColor = _a.adjustColor;\n    return position !== 'right' && adjustColor && fill !== 'black' ? null : undefined;\n  };\n\n  BarLabel.prototype.getTextAlign = function (element) {\n    var value = this.getValue(element);\n    var position = this.options.position;\n    var alignOptions = {\n      right: 'left',\n      left: 'left',\n      middle: 'center'\n    };\n    var alignOptionsReverse = {\n      right: 'right',\n      left: 'right',\n      middle: 'center'\n    };\n\n    if (value < 0) {\n      return alignOptionsReverse[position];\n    }\n\n    return alignOptions[position];\n  };\n\n  BarLabel.prototype.getTextBaseline = function () {\n    return 'middle';\n  };\n\n  BarLabel.prototype.getElementShapeBBox = function (element) {\n    var _this = this;\n\n    var shape = element.shape;\n    var points = [];\n    each(shape.get('origin').points, function (p) {\n      points.push(_this.coord.convertPoint(p));\n    });\n    var xValues = points.map(function (point) {\n      return point.x;\n    });\n    var xValuesMin = Math.min.apply(Math, xValues);\n    var xValueMax = Math.max.apply(Math, xValues);\n    var yValues = points.map(function (point) {\n      return point.y;\n    });\n    var yValuesMin = Math.min.apply(Math, yValues);\n    var yValuesMax = Math.max.apply(Math, yValues);\n    var bbox = new BBox(xValuesMin, yValuesMin, xValueMax - xValuesMin, yValuesMax - yValuesMin);\n    return bbox;\n  };\n\n  BarLabel.prototype.getLabelOffset = function () {\n    // Column 的 offset 在 getPosition 中因 position 不同单独处理\n    return {\n      x: 0,\n      y: 0\n    };\n  };\n\n  return BarLabel;\n}(BaseLabel);\n\nexport default BarLabel;\nregisterLabelComponent('bar', BarLabel);","map":{"version":3,"sources":["../../../../src/plots/bar/component/label.ts"],"names":[],"mappings":"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","sourcesContent":["import { each, get, deepMix } from '@antv/util';\nimport { Element, IShape, MappingDatum, _ORIGIN } from '../../../dependents';\nimport BaseLabel, { registerLabelComponent } from '../../../components/label/base';\nimport { rgb2arr, mappingColor } from '../../../util/color';\nimport BBox from '../../../util/bbox';\nimport { TextStyle } from '../../../interface/config';\nimport { IBarLabel } from '../interface';\n\nexport default class BarLabel<L extends IBarLabel = IBarLabel> extends BaseLabel<L> {\n  protected getLabelItemAttrs(element: Element, index: number): TextStyle {\n    const { style, formatter } = this.options;\n    const mappingData: MappingDatum[] = [].concat(element.getModel().mappingData);\n    const value = this.getValue(element);\n\n    return deepMix({}, style, {\n      ...this.getPosition(element),\n      text: formatter\n        ? formatter(\n            value,\n            {\n              [_ORIGIN]: mappingData[0]._origin,\n              mappingDatum: mappingData[0],\n              mappingDatumIndex: 0,\n              element,\n              elementIndex: index,\n            },\n            index\n          )\n        : value,\n      fill: this.getTextFill(element),\n      stroke: this.getTextStroke(element),\n      textAlign: this.getTextAlign(element),\n      textBaseline: this.getTextBaseline(),\n    });\n  }\n\n  protected adjustLabel(label: IShape, element: Element): void {\n    const { adjustPosition, style } = this.options;\n    if (adjustPosition) {\n      const offset = this.getDefaultOffset();\n      const labelRange = label.getBBox();\n      const shapeRange = this.getElementShapeBBox(element);\n      if (shapeRange.width <= labelRange.width) {\n        const xPosition = shapeRange.maxX + this.options.offsetX + offset;\n        label.attr('x', xPosition);\n        label.attr('fill', style.fill);\n      }\n    }\n  }\n\n  protected getDefaultOptions() {\n    const { theme } = this.layer;\n    const { label = {} } = theme;\n    return {\n      offsetX: 0,\n      offsetY: 0,\n      adjustPosition: true,\n      ...label,\n    };\n  }\n\n  protected getValue(element: Element): number | undefined | null {\n    return get(element.getData(), this.layer.options.xField);\n  }\n\n  protected getPosition(element: Element): { x: number; y: number } {\n    const offset = this.getDefaultOffset();\n    const value = this.getValue(element);\n    const bbox = this.getElementShapeBBox(element);\n    const { minX, maxX, minY, height, width } = bbox;\n    const { offsetX, offsetY, position } = this.options;\n    const y = minY + height / 2 + offsetY;\n    const dir = value < 0 ? -1 : 1;\n    let x;\n    if (position === 'left') {\n      const root = value > 0 ? minX : maxX;\n      x = root + offset * dir + offsetX;\n    } else if (position === 'right') {\n      const root = value > 0 ? maxX : minX;\n      x = root + offset * dir + offsetX;\n    } else {\n      x = minX + width / 2 + offsetX;\n    }\n\n    return { x, y };\n  }\n\n  protected getTextFill(element: Element) {\n    const { shape } = element;\n    if (this.options.adjustColor && this.options.position !== 'right') {\n      const shapeColor = shape.attr('fill');\n      const shapeOpacity = shape.attr('opacity') ? shape.attr('opacity') : 1;\n      const rgb = rgb2arr(shapeColor);\n      const gray = Math.round(rgb[0] * 0.299 + rgb[1] * 0.587 + rgb[2] * 0.114) / shapeOpacity;\n      const colorBand = [\n        { from: 0, to: 85, color: 'white' },\n        { from: 85, to: 170, color: '#F6F6F6' },\n        { from: 170, to: 255, color: 'black' },\n      ];\n      const reflect = mappingColor(colorBand, gray);\n      return reflect;\n    }\n    const defaultColor = this.options.style.fill;\n    return defaultColor;\n  }\n\n  protected getTextStroke(element: Element) {\n    const fill = this.getTextFill(element);\n    const { position, adjustColor } = this.options;\n    return position !== 'right' && adjustColor && fill !== 'black' ? null : undefined;\n  }\n\n  protected getTextAlign(element: Element) {\n    const value = this.getValue(element);\n    const { position } = this.options;\n    const alignOptions = {\n      right: 'left',\n      left: 'left',\n      middle: 'center',\n    };\n    const alignOptionsReverse = {\n      right: 'right',\n      left: 'right',\n      middle: 'center',\n    };\n    if (value < 0) {\n      return alignOptionsReverse[position];\n    }\n    return alignOptions[position];\n  }\n\n  protected getTextBaseline() {\n    return 'middle';\n  }\n\n  protected getElementShapeBBox(element: Element): BBox {\n    const { shape } = element;\n    const points = [];\n    each(shape.get('origin').points, (p) => {\n      points.push(this.coord.convertPoint(p));\n    });\n    const xValues = points.map((point) => point.x);\n    const xValuesMin = Math.min(...xValues);\n    const xValueMax = Math.max(...xValues);\n    const yValues = points.map((point) => point.y);\n    const yValuesMin = Math.min(...yValues);\n    const yValuesMax = Math.max(...yValues);\n    const bbox = new BBox(xValuesMin, yValuesMin, xValueMax - xValuesMin, yValuesMax - yValuesMin);\n    return bbox;\n  }\n\n  protected getLabelOffset() {\n    // Column 的 offset 在 getPosition 中因 position 不同单独处理\n    return {\n      x: 0,\n      y: 0,\n    };\n  }\n}\n\nregisterLabelComponent('bar', BarLabel);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}