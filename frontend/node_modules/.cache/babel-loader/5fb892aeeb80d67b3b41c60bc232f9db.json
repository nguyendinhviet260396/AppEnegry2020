{"ast":null,"code":"import { getScale } from '@antv/scale';\nimport { assign, deepMix, mix, each, isArray, isString, isNumber, contains, toArray, clone, isEmpty } from '@antv/util';\nimport { getMean, getMedian } from '../util/math';\n\nvar GuideLine =\n/** @class */\nfunction () {\n  function GuideLine(cfg) {\n    assign(this, cfg);\n\n    this._init();\n  }\n\n  GuideLine.prototype._init = function () {\n    var _a = this.plot.options,\n        yField = _a.yField,\n        data = _a.data;\n    var plotData = this.plot.processData(data);\n\n    if (isEmpty(plotData) || !isNumber(plotData[0][yField])) {\n      return;\n    }\n\n    var defaultStyle = this.getDefaultStyle();\n    var baseConfig = {\n      type: 'line',\n      top: true,\n      start: this.cfg.start,\n      end: this.cfg.end\n    };\n    baseConfig.style = deepMix({}, defaultStyle.line.style, this.cfg.lineStyle);\n    baseConfig.text = deepMix({}, defaultStyle.text, this.cfg.text);\n\n    if (this.cfg.type) {\n      var stateValue = this._getState(this.cfg.type);\n\n      var scale = this.getYScale();\n      var percent = (1.0 - scale.scale(stateValue)) * 100 + \"%\";\n      var start = ['0%', percent];\n      var end = ['100%', percent];\n      this.config = mix({\n        start: start,\n        end: end\n      }, baseConfig);\n    } else {\n      var _b = this.cfg,\n          start_1 = _b.start,\n          end_1 = _b.end;\n      this.config = clone(baseConfig);\n      var xScale_1 = this.getXScale();\n      var yScale_1 = this.getYScale();\n      var startData_1 = clone(start_1);\n      var endData_1 = clone(end_1);\n      each(start_1, function (value, index) {\n        if (!contains(toArray(start_1[index]), '%') || isNumber(start_1[index])) {\n          if (index === 0) {\n            startData_1[index] = xScale_1.scale(start_1[0]) * 100 + \"%\";\n          } else {\n            startData_1[index] = (1.0 - yScale_1.scale(start_1[1])) * 100 + \"%\";\n          }\n        }\n      });\n      each(end_1, function (value, index) {\n        if (!contains(toArray(end_1[index]), '%') || isNumber(end_1[index])) {\n          if (index === 0) {\n            endData_1[index] = xScale_1.scale(end_1[0]) * 100 + \"%\";\n          } else {\n            endData_1[index] = (1.0 - yScale_1.scale(end_1[1])) * 100 + \"%\";\n          }\n        }\n      });\n      this.config.start = startData_1;\n      this.config.end = endData_1;\n    }\n  };\n\n  GuideLine.prototype.getYScale = function () {\n    var minValue = this._getState('min');\n\n    var maxValue = this._getState('max');\n\n    var Scale = getScale('linear'); // 重新组织scale并使用scale的min和max来计算guide point的百分比位置，以避免受nice的影响\n\n    var scale = new Scale(mix({}, {\n      min: this.plot.type === 'column' ? 0 : minValue,\n      max: maxValue,\n      nice: true,\n      values: this.values\n    }, this.plot.config.scales[this.plot.options.yField]));\n    return scale;\n  };\n\n  GuideLine.prototype.getXScale = function () {\n    var values = this.extractXValue();\n\n    if (isString(values[0])) {\n      var Scale = getScale('cat');\n      var scale = new Scale(mix({}, {\n        values: values\n      }, this.plot.config.scales[this.plot.options.xField]));\n      return scale;\n    } else {\n      var min = Math.min.apply(Math, values);\n      var max = Math.max.apply(Math, values);\n      var Scale = getScale('linear');\n      var scale = new Scale(mix({}, {\n        min: min,\n        max: max,\n        nice: true,\n        values: values\n      }, this.plot.config.scales[this.plot.options.xField]));\n      return scale;\n    }\n  };\n\n  GuideLine.prototype._getState = function (type) {\n    this.values = this._extractValues();\n\n    if (type === 'median') {\n      return getMedian(this.values);\n    }\n\n    if (type === 'mean') {\n      return getMean(this.values);\n    }\n\n    if (type === 'max') {\n      return Math.max.apply(Math, this.values);\n    }\n\n    if (type === 'min') {\n      return Math.min.apply(Math, this.values);\n    }\n  };\n\n  GuideLine.prototype._extractValues = function () {\n    var props = this.plot.options;\n    var field = props.yField;\n    var values = [];\n    var data = this.plot.processData(props.data);\n    each(data, function (d) {\n      if (isArray(d[field])) {\n        values.push.apply(values, d[field]);\n      } else {\n        values.push(d[field]);\n      }\n    });\n    return values;\n  };\n\n  GuideLine.prototype.extractXValue = function () {\n    var props = this.plot.options;\n    var field = props.xField;\n    var values = [];\n    var data = this.plot.processData(props.data);\n    each(data, function (d) {\n      if (isArray(d[field])) {\n        values.push.apply(values, d[field]);\n      } else {\n        values.push(d[field]);\n      }\n    });\n    return values;\n  };\n\n  GuideLine.prototype.getDefaultStyle = function () {\n    this.getDefaultTextAlign();\n    return {\n      line: {\n        style: {\n          lineWidth: 2,\n          stroke: '#333333',\n          opacity: 0.7,\n          lineDash: [0, 0]\n        }\n      },\n      text: {\n        content: '',\n        offsetY: -5,\n        style: {\n          fontSize: 14,\n          stroke: 'white',\n          lineWidth: 2,\n          textAlign: this.getDefaultTextAlign()\n        }\n      }\n    };\n  };\n\n  GuideLine.prototype.getDefaultTextAlign = function () {\n    var textConfig = this.cfg.text;\n\n    if (textConfig) {\n      if (!textConfig.position || textConfig.position === 'start') {\n        return 'left';\n      }\n\n      if (textConfig.position === 'center') {\n        return 'center';\n      }\n\n      if (textConfig.position === 'end') {\n        return 'right';\n      }\n    }\n  };\n\n  return GuideLine;\n}();\n\nexport default GuideLine;","map":{"version":3,"sources":["../../src/components/guide-line.ts"],"names":[],"mappings":"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","sourcesContent":["import { getScale } from '@antv/scale';\nimport { assign, deepMix, mix, each, isArray, isString, isNumber, contains, toArray, clone, isEmpty } from '@antv/util';\nimport { getMean, getMedian } from '../util/math';\n\nexport default class GuideLine {\n  public config: any;\n  private plot: any;\n  private cfg: any;\n  private values: number[];\n\n  constructor(cfg) {\n    assign(this, cfg);\n    this._init();\n  }\n\n  private _init() {\n    const { yField, data } = this.plot.options;\n    const plotData = this.plot.processData(data);\n    if (isEmpty(plotData) || !isNumber(plotData[0][yField])) {\n      return;\n    }\n    const defaultStyle = this.getDefaultStyle();\n    const baseConfig: any = {\n      type: 'line',\n      top: true,\n      start: this.cfg.start,\n      end: this.cfg.end,\n    };\n\n    baseConfig.style = deepMix({}, defaultStyle.line.style, this.cfg.lineStyle);\n    baseConfig.text = deepMix({}, defaultStyle.text, this.cfg.text);\n    if (this.cfg.type) {\n      const stateValue = this._getState(this.cfg.type);\n      const scale = this.getYScale();\n      const percent = `${(1.0 - scale.scale(stateValue)) * 100}%`;\n      const start = ['0%', percent];\n      const end = ['100%', percent];\n      this.config = mix(\n        {\n          start,\n          end,\n        },\n        baseConfig\n      );\n    } else {\n      const { start, end } = this.cfg;\n      this.config = clone(baseConfig);\n      const xScale = this.getXScale();\n      const yScale = this.getYScale();\n      const startData = clone(start);\n      const endData = clone(end);\n      each(start, (value, index) => {\n        if (!contains(toArray(start[index]), '%') || isNumber(start[index])) {\n          if (index === 0) {\n            startData[index] = `${xScale.scale(start[0]) * 100}%`;\n          } else {\n            startData[index] = `${(1.0 - yScale.scale(start[1])) * 100}%`;\n          }\n        }\n      });\n      each(end, (value, index) => {\n        if (!contains(toArray(end[index]), '%') || isNumber(end[index])) {\n          if (index === 0) {\n            endData[index] = `${xScale.scale(end[0]) * 100}%`;\n          } else {\n            endData[index] = `${(1.0 - yScale.scale(end[1])) * 100}%`;\n          }\n        }\n      });\n      this.config.start = startData;\n      this.config.end = endData;\n    }\n  }\n\n  private getYScale() {\n    const minValue = this._getState('min');\n    const maxValue = this._getState('max');\n    const Scale = getScale('linear');\n    // 重新组织scale并使用scale的min和max来计算guide point的百分比位置，以避免受nice的影响\n    const scale = new Scale(\n      mix(\n        {},\n        {\n          min: this.plot.type === 'column' ? 0 : minValue,\n          max: maxValue,\n          nice: true,\n          values: this.values,\n        },\n        this.plot.config.scales[this.plot.options.yField]\n      )\n    );\n    return scale;\n  }\n\n  private getXScale() {\n    const values = this.extractXValue();\n    if (isString(values[0])) {\n      const Scale = getScale('cat');\n      const scale = new Scale(\n        mix(\n          {},\n          {\n            values: values,\n          },\n          this.plot.config.scales[this.plot.options.xField]\n        )\n      );\n      return scale;\n    } else {\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      const Scale = getScale('linear');\n      const scale = new Scale(\n        mix(\n          {},\n          {\n            min: min,\n            max: max,\n            nice: true,\n            values: values,\n          },\n          this.plot.config.scales[this.plot.options.xField]\n        )\n      );\n      return scale;\n    }\n  }\n\n  private _getState(type) {\n    this.values = this._extractValues();\n    if (type === 'median') {\n      return getMedian(this.values);\n    }\n    if (type === 'mean') {\n      return getMean(this.values);\n    }\n    if (type === 'max') {\n      return Math.max(...this.values);\n    }\n    if (type === 'min') {\n      return Math.min(...this.values);\n    }\n  }\n\n  private _extractValues() {\n    const props = this.plot.options;\n    const field = props.yField;\n    const values = [];\n    const data = this.plot.processData(props.data);\n    each(data, (d) => {\n      if (isArray(d[field])) {\n        values.push(...d[field]);\n      } else {\n        values.push(d[field]);\n      }\n    });\n    return values;\n  }\n\n  private extractXValue() {\n    const props = this.plot.options;\n    const field = props.xField;\n    const values = [];\n    const data = this.plot.processData(props.data);\n    each(data, (d) => {\n      if (isArray(d[field])) {\n        values.push(...d[field]);\n      } else {\n        values.push(d[field]);\n      }\n    });\n    return values;\n  }\n\n  private getDefaultStyle() {\n    this.getDefaultTextAlign();\n    return {\n      line: {\n        style: {\n          lineWidth: 2,\n          stroke: '#333333',\n          opacity: 0.7,\n          lineDash: [0, 0],\n        },\n      },\n      text: {\n        content: '',\n        offsetY: -5,\n        style: {\n          fontSize: 14,\n          stroke: 'white',\n          lineWidth: 2,\n          textAlign: this.getDefaultTextAlign(),\n        },\n      },\n    };\n  }\n\n  private getDefaultTextAlign() {\n    const textConfig = this.cfg.text;\n    if (textConfig) {\n      if (!textConfig.position || textConfig.position === 'start') {\n        return 'left';\n      }\n      if (textConfig.position === 'center') {\n        return 'center';\n      }\n      if (textConfig.position === 'end') {\n        return 'right';\n      }\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}