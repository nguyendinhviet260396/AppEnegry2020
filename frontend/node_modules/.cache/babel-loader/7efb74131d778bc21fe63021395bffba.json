{"ast":null,"code":"import { __assign } from \"tslib\";\n/**\n * @author linhuiw\n * @description 仪表盘形状\n */\n\nimport { clone, deepMix } from '@antv/util';\nimport { registerShape } from '@antv/g2';\nimport { getGlobalTheme } from '../../../../theme';\nimport { sortedLastIndex } from '../../../../util/common';\n/**\n * 仪表盘指针图形\n * 指针主体由梯形和一大一小圆形组成，\n * 中心处由灰色圆底和小白圆加以装饰\n */\n\nvar GaugeShape =\n/** @class */\nfunction () {\n  function GaugeShape(uid) {\n    this.uid = uid;\n  }\n\n  GaugeShape.prototype.setOption = function (type, options) {\n    this.type = type;\n    this.options = options;\n    this.axis = options.axis;\n    this.pivot = options.pivot;\n  };\n\n  GaugeShape.prototype.render = function () {\n    var Gauge = this; // eslint-disable-line @typescript-eslint/no-this-alias\n\n    registerShape('point', 'gauge', {\n      draw: function (cfg, group) {\n        var _a, _b, _c;\n\n        this.gauge = {};\n        this.gauge.options = Gauge.options;\n        this.gauge.axis = Gauge.axis;\n        this.gauge.pivot = Gauge.pivot;\n        this.gauge.type = Gauge.type;\n        var gauge = this.gauge;\n        var type = this.gauge.type;\n        var point = cfg.points[0];\n        var center = this.parsePoint({\n          x: 0,\n          y: 0\n        });\n        var target = this.parsePoint({\n          x: point.x || 0,\n          y: 1\n        });\n        gauge.center = center;\n        gauge.group = group;\n        var r = {\n          x: center.x - target.x,\n          y: center.y - target.y\n        };\n        this.gauge.ringRadius = Math.sqrt(r.x * r.x + r.y * r.y);\n\n        var _d = this.getAngleRange(),\n            starAngle = _d.starAngle,\n            endAngle = _d.endAngle;\n\n        var currentAngle = point.x * (endAngle - starAngle) + starAngle;\n\n        switch (type) {\n          case 'meterGauge':\n            this.drawBarGauge(currentAngle);\n\n            if (this.gauge.axis.visible && ((_a = this.gauge.axis.tickLine) === null || _a === void 0 ? void 0 : _a.visible)) {\n              this.drawInSideAxis();\n            }\n\n            break;\n\n          case 'fanGauge':\n            this.drawGauge(currentAngle);\n\n            if (this.gauge.axis.visible && ((_b = this.gauge.axis.tickLine) === null || _b === void 0 ? void 0 : _b.visible)) {\n              this.drawOutSideAxis();\n            }\n\n            break;\n\n          case 'standardGauge':\n          default:\n            this.drawGauge(currentAngle);\n\n            if (this.gauge.axis.visible && ((_c = this.gauge.axis.tickLine) === null || _c === void 0 ? void 0 : _c.visible)) {\n              this.drawAxis();\n            }\n\n            break;\n        } // 绘制指针\n\n\n        if (this.gauge.pivot.visible) {\n          this.drawPivot(cfg, group);\n        }\n      },\n      drawGauge: function (currentAngle) {\n        var range = this.gauge.options.range;\n        this.drawBottomRing(); // 绘制灰底色\n\n        if (range && range.length) {\n          this.drawRangeColor();\n        } else {\n          this.drawCurrentRing(currentAngle);\n        }\n      },\n      drawRangeColor: function () {\n        var _a = this.gauge.options,\n            min = _a.min,\n            max = _a.max,\n            range = _a.range,\n            color = _a.color,\n            rangeStyle = _a.rangeStyle;\n        var colors = color || getGlobalTheme().colors;\n\n        var _b = this.getAngleRange(),\n            starAngle = _b.starAngle,\n            endAngle = _b.endAngle;\n\n        var config = {\n          min: min,\n          max: max,\n          starAngle: starAngle,\n          endAngle: endAngle\n        };\n\n        for (var i = 0; i < range.length; i++) {\n          var start = this.valueToAngle(range[i], config);\n          var end = this.valueToAngle(range[i + 1], config);\n\n          if (end >= start) {\n            var path2 = this.getPath(start, end);\n            var style = deepMix({\n              fill: colors[i]\n            }, rangeStyle);\n            this.drawRing(path2, style);\n          }\n        }\n      },\n      drawBottomRing: function () {\n        var _a = this.getAngleRange(),\n            starAngle = _a.starAngle,\n            endAngle = _a.endAngle;\n\n        var backgroundStyle = this.gauge.options.rangeBackgroundStyle;\n        var path = this.getPath(starAngle, endAngle);\n        this.drawRing(path, backgroundStyle);\n      },\n      drawCurrentRing: function (current) {\n        var starAngle = this.getAngleRange().starAngle;\n        var rangeStyle = this.gauge.rangeStyle;\n        var path3 = this.getPath(starAngle, current);\n        this.drawRing(path3, rangeStyle);\n      },\n      drawInSideAxis: function () {\n        var _a = this.gauge.options,\n            min = _a.min,\n            max = _a.max,\n            axis = _a.axis;\n\n        var _b = this.getAngleRange(),\n            starAngle = _b.starAngle,\n            endAngle = _b.endAngle;\n\n        var config = {\n          min: min,\n          max: max,\n          starAngle: starAngle,\n          endAngle: endAngle\n        };\n        var interval = (max - min) / axis.tickCount;\n\n        for (var i = 0; i < axis.tickCount; i++) {\n          var startValue = min + i * interval;\n          var angle = this.valueToAngle(startValue + interval / 2, config);\n          this.drawRect(angle, {\n            length: axis.tickLine.length,\n            style: axis.tickLine.style\n          });\n        }\n      },\n      drawAxis: function () {\n        var axis = this.gauge.axis;\n        var _a = this.gauge.options,\n            min = _a.min,\n            max = _a.max;\n\n        var _b = this.getAngleRange(),\n            starAngle = _b.starAngle,\n            endAngle = _b.endAngle;\n\n        var config = {\n          min: min,\n          max: max,\n          starAngle: starAngle,\n          endAngle: endAngle\n        };\n        var interval = (max - min) / (axis.tickCount - 1);\n\n        for (var i = 0; i < axis.tickCount; i++) {\n          var startValue = min + i * interval;\n          var angle = this.valueToAngle(startValue, config);\n          var tickLineStyle = clone(axis.tickLine.style);\n\n          if (i % 5 !== 0) {\n            tickLineStyle.lineWidth = tickLineStyle.lineWidth / 2;\n          }\n\n          this.drawRect(angle, {\n            length: i % 5 === 0 ? axis.tickLine.length : axis.tickLine.length / 2,\n            style: tickLineStyle\n          });\n        }\n      },\n      drawOutSideAxis: function () {\n        var axis = this.gauge.axis;\n        var _a = this.gauge.options,\n            min = _a.min,\n            max = _a.max;\n\n        var _b = this.getAngleRange(),\n            starAngle = _b.starAngle,\n            endAngle = _b.endAngle;\n\n        var config = {\n          min: min,\n          max: max,\n          starAngle: starAngle,\n          endAngle: endAngle\n        };\n        var interval = (max - min) / (axis.tickCount - 1);\n\n        for (var i = 0; i < axis.tickCount; i++) {\n          var startValue = min + i * interval;\n          var angle = this.valueToAngle(startValue, config);\n          this.drawRect(angle, {\n            length: axis.tickLine.length,\n            style: axis.tickLine.style\n          });\n        }\n      },\n      drawBarGauge: function (current) {\n        var _this = this;\n\n        var _a = this.gauge.options,\n            min = _a.min,\n            max = _a.max,\n            range = _a.range,\n            color = _a.color,\n            rangeStyle = _a.rangeStyle,\n            rangeBackgroundStyle = _a.rangeBackgroundStyle;\n        var colors = color || getGlobalTheme().colors;\n\n        var _b = this.getAngleRange(),\n            starAngle = _b.starAngle,\n            endAngle = _b.endAngle;\n\n        var config = {\n          min: min,\n          max: max,\n          starAngle: starAngle,\n          endAngle: endAngle\n        };\n        var interval = (endAngle - starAngle) / (50 - 1);\n        var offset = interval / 3; // 由50个柱子组成\n\n        for (var i = 0; i < 50; i++) {\n          var start = starAngle + i * interval;\n          var path2 = this.getPath(start - offset / 2, start + offset - offset / 2);\n          var style = rangeBackgroundStyle;\n\n          if (range && range.length) {\n            var result1 = range.map(function (item) {\n              return _this.valueToAngle(item, config);\n            });\n            var index = sortedLastIndex(result1, start);\n            /** 最后一个值也在最后一个区间内 */\n\n            var colorIndex = Math.min(index, range.length - 1);\n            style = deepMix({}, {\n              fill: colors[colorIndex - 1]\n            }, rangeStyle) || rangeBackgroundStyle;\n          } else {\n            style = current >= start ? deepMix({}, {\n              fill: color\n            }, rangeStyle) : rangeBackgroundStyle;\n          }\n\n          this.drawRing(path2, style);\n        }\n      },\n      getAngleRange: function () {\n        var angle = this.gauge.options.angle;\n        var angleValue = 90 - (360 - angle) * 0.5;\n        var starAngle = (270 - 90 - angleValue) * Math.PI / 180;\n        var endAngle = (270 + 90 + angleValue) * Math.PI / 180;\n        return {\n          starAngle: starAngle,\n          endAngle: endAngle\n        };\n      },\n      valueToAngle: function (value, config) {\n        var min = config.min,\n            max = config.max,\n            starAngle = config.starAngle,\n            endAngle = config.endAngle;\n\n        if (value === max) {\n          return endAngle;\n        }\n\n        if (value === min) {\n          return starAngle;\n        }\n\n        var ratio = (value - min) / (max - min);\n\n        if (max === min) {\n          ratio = 1;\n        }\n\n        var angle = ratio * (endAngle - starAngle) + starAngle;\n        angle = Math.max(angle, starAngle);\n        angle = Math.min(angle, endAngle);\n        return angle;\n      },\n      drawRing: function (path, style) {\n        this.gauge.group.addShape('path', {\n          attrs: deepMix({}, {\n            path: path\n          }, style)\n        });\n      },\n      drawRect: function (angle, param) {\n        var axis = this.gauge.axis;\n\n        var config = __assign(__assign({}, axis), param);\n\n        var offset = config.offset,\n            length = config.length;\n        var center = this.gauge.center;\n        var radius;\n\n        if (offset < 0) {\n          radius = this.gauge.ringRadius - this.gauge.options.rangeSize + offset;\n        } else {\n          radius = this.gauge.ringRadius + offset;\n        }\n\n        var xA1 = radius * Math.cos(angle) + center.x;\n        var yA1 = radius * Math.sin(angle) + center.y;\n        var xB1 = (radius + length) * Math.cos(angle) + center.x;\n        var yB1 = (radius + length) * Math.sin(angle) + center.y;\n        var line = this.gauge.group.addShape('line', {\n          attrs: deepMix({}, {\n            x1: xA1,\n            y1: yA1,\n            x2: xB1,\n            y2: yB1\n          }, param.style)\n        });\n        line.set('name', 'axis-tickLine');\n      },\n      getPath: function (starAngle, endAngle) {\n        /* const type = this.gauge.type;\n        const height = get(gauge, 'options.height');\n        const width = get(gauge, 'options.width');*/\n        var center = this.gauge.center;\n        var length = this.gauge.ringRadius;\n        /*let thick;\n         const { minThickness, minThickCanvsSize } = this.gauge.ringStyle;\n        const size = Math.min(width, height);\n        if (type === 'fan' && size < minThickCanvsSize) {\n          thick = length - minThickness;\n        } else {*/\n\n        var thick = this.gauge.options.rangeSize; //}\n\n        var xA1 = length * Math.cos(starAngle) + center.x;\n        var yA1 = length * Math.sin(starAngle) + center.y;\n        var xA2 = (length - thick) * Math.cos(starAngle) + center.x;\n        var yA2 = (length - thick) * Math.sin(starAngle) + center.y;\n        var xB1 = length * Math.cos(endAngle) + center.x;\n        var yB1 = length * Math.sin(endAngle) + center.y;\n        var xB2 = (length - thick) * Math.cos(endAngle) + center.x;\n        var yB2 = (length - thick) * Math.sin(endAngle) + center.y;\n        var largeArcFlag = Math.abs(starAngle - endAngle) > Math.PI ? 1 : 0;\n        return [['M', xA1, yA1], ['A', length, length, 0, largeArcFlag, 1, xB1, yB1], ['L', xB2, yB2], ['A', length - thick, length - thick, 0, largeArcFlag, 0, xA2, yA2], ['Z']];\n      },\n      drawPivot: function (cfg) {\n        var _a = this.getAngleRange(),\n            starAngle = _a.starAngle,\n            endAngle = _a.endAngle;\n\n        var _b = this.gauge.options,\n            radius = _b.radius,\n            rangeSize = _b.rangeSize;\n        var pivotConfig = this.gauge.pivot;\n        var bigCircle = pivotConfig.thickness;\n        var smCircle = pivotConfig.thickness / 2.5;\n        var group = this.gauge.group;\n        var point = cfg.points[0];\n        var center = this.parsePoint({\n          x: 0,\n          y: 0\n        }); // radius\n\n        var current = point.x * (endAngle - starAngle) + starAngle;\n        var x = (this.gauge.ringRadius - rangeSize) * radius * Math.cos(current) + this.gauge.center.x;\n        var y = (this.gauge.ringRadius - rangeSize) * radius * Math.sin(current) + this.gauge.center.y;\n        var target = {\n          x: x,\n          y: y\n        }; // 外底色灰圆\n\n        if (pivotConfig.base.visible) {\n          group.addShape('circle', {\n            attrs: deepMix({}, {\n              x: center.x,\n              y: center.y,\n              r: pivotConfig.base.size ? pivotConfig.base.size / 2 : bigCircle * 2.2\n            }, pivotConfig.base.style)\n          });\n        } // 指针\n\n\n        if (pivotConfig.pointer.visible) {\n          var dirVec = {\n            x: center.x - target.x,\n            y: center.y - target.y\n          };\n          var length_1 = Math.sqrt(dirVec.x * dirVec.x + dirVec.y * dirVec.y);\n          dirVec.x *= 1 / length_1;\n          dirVec.y *= 1 / length_1;\n          var angle1 = -Math.PI / 2;\n          var x1 = Math.cos(angle1) * dirVec.x - Math.sin(angle1) * dirVec.y;\n          var y1 = Math.sin(angle1) * dirVec.x + Math.cos(angle1) * dirVec.y;\n          var angle2 = Math.PI / 2;\n          var x2 = Math.cos(angle2) * dirVec.x - Math.sin(angle2) * dirVec.y;\n          var y2 = Math.sin(angle2) * dirVec.x + Math.cos(angle2) * dirVec.y;\n          var path = [['M', target.x + x1 * smCircle, target.y + y1 * smCircle], ['L', center.x + x1 * bigCircle, center.y + y1 * bigCircle], ['L', center.x + x2 * bigCircle, center.y + y2 * bigCircle], ['L', target.x + x2 * smCircle, target.y + y2 * smCircle], ['Z']];\n          group.addShape('path', {\n            attrs: deepMix({}, {\n              path: path\n            }, pivotConfig.pointer.style)\n          });\n          group.addShape('circle', {\n            attrs: {\n              x: target.x,\n              y: target.y,\n              r: smCircle,\n              fill: pivotConfig.pointer.style.fill\n            }\n          });\n          group.addShape('circle', {\n            attrs: {\n              x: center.x,\n              y: center.y,\n              r: bigCircle,\n              fill: pivotConfig.pointer.style.fill\n            }\n          });\n        }\n\n        if (pivotConfig.pin.visible) {\n          // 内部白色小圆\n          group.addShape('circle', {\n            attrs: deepMix({}, {\n              x: center.x,\n              y: center.y,\n              r: smCircle / 1.2\n            }, pivotConfig.pin.style)\n          });\n        }\n      }\n    });\n  };\n\n  return GaugeShape;\n}();\n\nexport { GaugeShape };","map":{"version":3,"sources":["../../../../../src/plots/gauge/geometry/shape/gauge-shape.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @author linhuiw\n * @description 仪表盘形状\n */\nimport { clone, deepMix } from '@antv/util';\nimport { registerShape } from '@antv/g2';\nimport { IGroup } from '@antv/g-base';\nimport { GaugeViewConfig, GaugeAxis, GaugePivot } from '../../interface';\nimport { getGlobalTheme } from '../../../../theme';\nimport { sortedLastIndex } from '../../../../util/common';\n\n/**\n * 仪表盘指针图形\n * 指针主体由梯形和一大一小圆形组成，\n * 中心处由灰色圆底和小白圆加以装饰\n */\nexport class GaugeShape {\n  uid: any;\n\n  ringRadius: number;\n\n  center: any;\n\n  group: any;\n\n  options: GaugeViewConfig;\n\n  axis: GaugeAxis;\n\n  pivot: GaugePivot;\n\n  type: string;\n\n  constructor(uid: any) {\n    this.uid = uid;\n  }\n\n  setOption(type, options: any) {\n    this.type = type;\n    this.options = options;\n    this.axis = options.axis;\n    this.pivot = options.pivot;\n  }\n\n  render() {\n    const Gauge = this; // eslint-disable-line @typescript-eslint/no-this-alias\n    registerShape('point', 'gauge', {\n      draw(cfg: any, group: IGroup) {\n        this.gauge = {} as any;\n        this.gauge.options = Gauge.options;\n        this.gauge.axis = Gauge.axis;\n        this.gauge.pivot = Gauge.pivot;\n        this.gauge.type = Gauge.type;\n        const gauge = this.gauge;\n        const type = this.gauge.type;\n        const point = cfg.points[0];\n        const center = this.parsePoint({\n          x: 0,\n          y: 0,\n        });\n\n        const target = this.parsePoint({\n          x: point.x || 0,\n          y: 1,\n        });\n\n        gauge.center = center;\n        gauge.group = group;\n\n        const r = { x: center.x - target.x, y: center.y - target.y };\n\n        this.gauge.ringRadius = Math.sqrt(r.x * r.x + r.y * r.y);\n\n        const { starAngle, endAngle } = this.getAngleRange();\n        const currentAngle = point.x * (endAngle - starAngle) + starAngle;\n\n        switch (type) {\n          case 'meterGauge':\n            this.drawBarGauge(currentAngle);\n            if (this.gauge.axis.visible && this.gauge.axis.tickLine?.visible) {\n              this.drawInSideAxis();\n            }\n            break;\n          case 'fanGauge':\n            this.drawGauge(currentAngle);\n            if (this.gauge.axis.visible && this.gauge.axis.tickLine?.visible) {\n              this.drawOutSideAxis();\n            }\n            break;\n          case 'standardGauge':\n          default:\n            this.drawGauge(currentAngle);\n            if (this.gauge.axis.visible && this.gauge.axis.tickLine?.visible) {\n              this.drawAxis();\n            }\n            break;\n        }\n\n        // 绘制指针\n        if (this.gauge.pivot.visible) {\n          this.drawPivot(cfg, group);\n        }\n      },\n\n      drawGauge(currentAngle: number) {\n        const { range } = this.gauge.options;\n        this.drawBottomRing(); // 绘制灰底色\n\n        if (range && range.length) {\n          this.drawRangeColor();\n        } else {\n          this.drawCurrentRing(currentAngle);\n        }\n      },\n\n      drawRangeColor() {\n        const { min, max, range, color, rangeStyle } = this.gauge.options;\n        const colors = color || getGlobalTheme().colors;\n        const { starAngle, endAngle } = this.getAngleRange();\n        const config = {\n          min,\n          max,\n          starAngle,\n          endAngle,\n        };\n        for (let i = 0; i < range.length; i++) {\n          const start = this.valueToAngle(range[i], config);\n          const end = this.valueToAngle(range[i + 1], config);\n\n          if (end >= start) {\n            const path2 = this.getPath(start, end);\n            const style = deepMix({ fill: colors[i] }, rangeStyle);\n            this.drawRing(path2, style);\n          }\n        }\n      },\n\n      drawBottomRing() {\n        const { starAngle, endAngle } = this.getAngleRange();\n        const backgroundStyle = this.gauge.options.rangeBackgroundStyle;\n        const path = this.getPath(starAngle, endAngle);\n        this.drawRing(path, backgroundStyle);\n      },\n\n      drawCurrentRing(current: number) {\n        const { starAngle } = this.getAngleRange();\n        const rangeStyle = this.gauge.rangeStyle;\n        const path3 = this.getPath(starAngle, current);\n        this.drawRing(path3, rangeStyle);\n      },\n\n      drawInSideAxis() {\n        const { min, max, axis } = this.gauge.options;\n        const { starAngle, endAngle } = this.getAngleRange();\n        const config = {\n          min,\n          max,\n          starAngle,\n          endAngle,\n        };\n        const interval = (max - min) / axis.tickCount;\n        for (let i = 0; i < axis.tickCount; i++) {\n          const startValue = min + i * interval;\n          const angle = this.valueToAngle(startValue + interval / 2, config);\n          this.drawRect(angle, {\n            length: axis.tickLine.length,\n            style: axis.tickLine.style,\n          });\n        }\n      },\n\n      drawAxis() {\n        const axis = this.gauge.axis;\n        const { min, max } = this.gauge.options;\n        const { starAngle, endAngle } = this.getAngleRange();\n        const config = {\n          min,\n          max,\n          starAngle,\n          endAngle,\n        };\n        const interval = (max - min) / (axis.tickCount - 1);\n        for (let i = 0; i < axis.tickCount; i++) {\n          const startValue = min + i * interval;\n          const angle = this.valueToAngle(startValue, config);\n          const tickLineStyle = clone(axis.tickLine.style);\n          if (i % 5 !== 0) {\n            tickLineStyle.lineWidth = tickLineStyle.lineWidth / 2;\n          }\n          this.drawRect(angle, {\n            length: i % 5 === 0 ? axis.tickLine.length : axis.tickLine.length / 2,\n            style: tickLineStyle,\n          });\n        }\n      },\n\n      drawOutSideAxis() {\n        const { axis } = this.gauge;\n        const { min, max } = this.gauge.options;\n        const { starAngle, endAngle } = this.getAngleRange();\n        const config = {\n          min,\n          max,\n          starAngle,\n          endAngle,\n        };\n        const interval = (max - min) / (axis.tickCount - 1);\n        for (let i = 0; i < axis.tickCount; i++) {\n          const startValue = min + i * interval;\n          const angle = this.valueToAngle(startValue, config);\n          this.drawRect(angle, {\n            length: axis.tickLine.length,\n            style: axis.tickLine.style,\n          });\n        }\n      },\n\n      drawBarGauge(current: number) {\n        const { min, max, range, color, rangeStyle, rangeBackgroundStyle } = this.gauge.options;\n        const colors = color || getGlobalTheme().colors;\n        const { starAngle, endAngle } = this.getAngleRange();\n        const config = {\n          min,\n          max,\n          starAngle,\n          endAngle,\n        };\n        const interval = (endAngle - starAngle) / (50 - 1);\n        const offset = interval / 3;\n\n        // 由50个柱子组成\n        for (let i = 0; i < 50; i++) {\n          const start = starAngle + i * interval;\n          const path2 = this.getPath(start - offset / 2, start + offset - offset / 2);\n\n          let style = rangeBackgroundStyle;\n          if (range && range.length) {\n            const result1 = range.map((item: any) => {\n              return this.valueToAngle(item, config);\n            });\n\n            const index = sortedLastIndex(result1, start);\n            /** 最后一个值也在最后一个区间内 */\n            const colorIndex = Math.min(index, range.length - 1);\n            style = deepMix({}, { fill: colors[colorIndex - 1] }, rangeStyle) || rangeBackgroundStyle;\n          } else {\n            style = current >= start ? deepMix({}, { fill: color }, rangeStyle) : rangeBackgroundStyle;\n          }\n\n          this.drawRing(path2, style);\n        }\n      },\n\n      getAngleRange() {\n        const { angle } = this.gauge.options;\n        const angleValue = 90 - (360 - angle) * 0.5;\n        const starAngle = ((270 - 90 - angleValue) * Math.PI) / 180;\n        const endAngle = ((270 + 90 + angleValue) * Math.PI) / 180;\n\n        return { starAngle, endAngle };\n      },\n\n      valueToAngle(value: number, config: any) {\n        const { min, max, starAngle, endAngle } = config;\n        if (value === max) {\n          return endAngle;\n        }\n        if (value === min) {\n          return starAngle;\n        }\n        let ratio = (value - min) / (max - min);\n        if (max === min) {\n          ratio = 1;\n        }\n        let angle = ratio * (endAngle - starAngle) + starAngle;\n        angle = Math.max(angle, starAngle);\n        angle = Math.min(angle, endAngle);\n\n        return angle;\n      },\n\n      drawRing(path: string, style: any) {\n        this.gauge.group.addShape('path', {\n          attrs: deepMix(\n            {},\n            {\n              path,\n            },\n            style\n          ),\n        });\n      },\n\n      drawRect(angle: number, param?: any) {\n        const { axis } = this.gauge;\n        const config = { ...axis, ...param };\n        const { offset, length } = config;\n        const center = this.gauge.center;\n\n        let radius;\n        if (offset < 0) {\n          radius = this.gauge.ringRadius - this.gauge.options.rangeSize + offset;\n        } else {\n          radius = this.gauge.ringRadius + offset;\n        }\n\n        const xA1 = radius * Math.cos(angle) + center.x;\n        const yA1 = radius * Math.sin(angle) + center.y;\n\n        const xB1 = (radius + length) * Math.cos(angle) + center.x;\n        const yB1 = (radius + length) * Math.sin(angle) + center.y;\n\n        const line = this.gauge.group.addShape('line', {\n          attrs: deepMix(\n            {},\n            {\n              x1: xA1,\n              y1: yA1,\n              x2: xB1,\n              y2: yB1,\n            },\n            param.style\n          ),\n        });\n        line.set('name', 'axis-tickLine');\n      },\n\n      getPath(starAngle: number, endAngle: number) {\n        /* const type = this.gauge.type;\n        const height = get(gauge, 'options.height');\n        const width = get(gauge, 'options.width');*/\n        const center = this.gauge.center;\n        const length = this.gauge.ringRadius;\n        /*let thick;\n         const { minThickness, minThickCanvsSize } = this.gauge.ringStyle;\n        const size = Math.min(width, height);\n        if (type === 'fan' && size < minThickCanvsSize) {\n          thick = length - minThickness;\n        } else {*/\n        const thick = this.gauge.options.rangeSize;\n        //}\n\n        const xA1 = length * Math.cos(starAngle) + center.x;\n        const yA1 = length * Math.sin(starAngle) + center.y;\n        const xA2 = (length - thick) * Math.cos(starAngle) + center.x;\n        const yA2 = (length - thick) * Math.sin(starAngle) + center.y;\n        const xB1 = length * Math.cos(endAngle) + center.x;\n        const yB1 = length * Math.sin(endAngle) + center.y;\n        const xB2 = (length - thick) * Math.cos(endAngle) + center.x;\n        const yB2 = (length - thick) * Math.sin(endAngle) + center.y;\n\n        const largeArcFlag = Math.abs(starAngle - endAngle) > Math.PI ? 1 : 0;\n        return [\n          ['M', xA1, yA1],\n          ['A', length, length, 0, largeArcFlag, 1, xB1, yB1],\n          ['L', xB2, yB2],\n          ['A', length - thick, length - thick, 0, largeArcFlag, 0, xA2, yA2],\n          ['Z'],\n        ];\n      },\n\n      drawPivot(cfg: any) {\n        const { starAngle, endAngle } = this.getAngleRange();\n        const { radius, rangeSize } = this.gauge.options;\n        const pivotConfig = this.gauge.pivot;\n        const bigCircle = pivotConfig.thickness;\n        const smCircle = pivotConfig.thickness / 2.5;\n        const group = this.gauge.group;\n        const point = cfg.points[0];\n        const center = this.parsePoint({\n          x: 0,\n          y: 0,\n        });\n\n        // radius\n        const current = point.x * (endAngle - starAngle) + starAngle;\n        const x = (this.gauge.ringRadius - rangeSize) * radius * Math.cos(current) + this.gauge.center.x;\n        const y = (this.gauge.ringRadius - rangeSize) * radius * Math.sin(current) + this.gauge.center.y;\n\n        const target = {\n          x,\n          y,\n        };\n\n        // 外底色灰圆\n        if (pivotConfig.base.visible) {\n          group.addShape('circle', {\n            attrs: deepMix(\n              {},\n              {\n                x: center.x,\n                y: center.y,\n                r: pivotConfig.base.size ? pivotConfig.base.size / 2 : bigCircle * 2.2,\n              },\n              pivotConfig.base.style\n            ),\n          });\n        }\n        // 指针\n        if (pivotConfig.pointer.visible) {\n          const dirVec = { x: center.x - target.x, y: center.y - target.y };\n\n          const length = Math.sqrt(dirVec.x * dirVec.x + dirVec.y * dirVec.y);\n          dirVec.x *= 1 / length;\n          dirVec.y *= 1 / length;\n\n          const angle1 = -Math.PI / 2;\n          const x1 = Math.cos(angle1) * dirVec.x - Math.sin(angle1) * dirVec.y;\n          const y1 = Math.sin(angle1) * dirVec.x + Math.cos(angle1) * dirVec.y;\n\n          const angle2 = Math.PI / 2;\n          const x2 = Math.cos(angle2) * dirVec.x - Math.sin(angle2) * dirVec.y;\n          const y2 = Math.sin(angle2) * dirVec.x + Math.cos(angle2) * dirVec.y;\n          const path = [\n            ['M', target.x + x1 * smCircle, target.y + y1 * smCircle],\n            ['L', center.x + x1 * bigCircle, center.y + y1 * bigCircle],\n            ['L', center.x + x2 * bigCircle, center.y + y2 * bigCircle],\n            ['L', target.x + x2 * smCircle, target.y + y2 * smCircle],\n            ['Z'],\n          ];\n\n          group.addShape('path', {\n            attrs: deepMix(\n              {},\n              {\n                path,\n              },\n              pivotConfig.pointer.style\n            ),\n          });\n\n          group.addShape('circle', {\n            attrs: {\n              x: target.x,\n              y: target.y,\n              r: smCircle,\n              fill: pivotConfig.pointer.style.fill,\n            },\n          });\n          group.addShape('circle', {\n            attrs: {\n              x: center.x,\n              y: center.y,\n              r: bigCircle,\n              fill: pivotConfig.pointer.style.fill,\n            },\n          });\n        }\n\n        if (pivotConfig.pin.visible) {\n          // 内部白色小圆\n          group.addShape('circle', {\n            attrs: deepMix(\n              {},\n              {\n                x: center.x,\n                y: center.y,\n                r: smCircle / 1.2,\n              },\n              pivotConfig.pin.style\n            ),\n          });\n        }\n      },\n    } as any);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}