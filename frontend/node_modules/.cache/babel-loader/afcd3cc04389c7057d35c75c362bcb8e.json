{"ast":null,"code":"import { each, deepMix, clone, find } from '@antv/util';\nvar DEFAULT_OFFSET = 8;\n\nvar LineLabel =\n/** @class */\nfunction () {\n  function LineLabel(cfg) {\n    this.destroyed = false;\n    this.view = cfg.view;\n    this.plot = cfg.plot;\n    var defaultOptions = this.getDefaultOptions();\n    this.options = deepMix(defaultOptions, cfg, {});\n    this.init();\n  }\n\n  LineLabel.prototype.init = function () {\n    var _this = this;\n\n    this.container = this.getGeometry().labelsContainer;\n    this.view.on('beforerender', function () {\n      _this.clear();\n\n      _this.plot.canvas.draw();\n    });\n  };\n\n  LineLabel.prototype.render = function () {\n    var _this = this;\n\n    var elements = this.getGeometry().elements;\n    each(elements, function (ele) {\n      var shapeInfo = _this.getShapeInfo(ele.shape);\n\n      var _a = _this.options,\n          style = _a.style,\n          offsetX = _a.offsetX,\n          offsetY = _a.offsetY;\n      var formatter = _this.options.formatter;\n      var content = formatter ? formatter(shapeInfo.name) : shapeInfo.name;\n\n      _this.container.addShape('text', {\n        attrs: deepMix({}, {\n          x: shapeInfo.x + offsetX,\n          y: shapeInfo.y + offsetY,\n          text: content,\n          fill: shapeInfo.color,\n          textAlign: 'left',\n          textBaseline: 'middle'\n        }, style),\n        name: 'label'\n      });\n    });\n  };\n\n  LineLabel.prototype.clear = function () {\n    if (this.container) {\n      this.container.clear();\n    }\n  };\n\n  LineLabel.prototype.hide = function () {\n    this.container.set('visible', false);\n    this.plot.canvas.draw();\n  };\n\n  LineLabel.prototype.show = function () {\n    this.container.set('visible', true);\n    this.plot.canvas.draw();\n  };\n\n  LineLabel.prototype.destroy = function () {\n    if (this.container) {\n      this.container.remove();\n    }\n\n    this.destroyed = true;\n  };\n\n  LineLabel.prototype.getBBox = function () {\n    return this.container.getBBox();\n  };\n\n  LineLabel.prototype.getDefaultOptions = function () {\n    var theme = this.plot.theme;\n    var labelStyle = clone(theme.label.style);\n    delete labelStyle.fill;\n    return {\n      offsetX: DEFAULT_OFFSET,\n      offsetY: 0,\n      style: labelStyle\n    };\n  };\n\n  LineLabel.prototype.getGeometry = function () {\n    return find(this.view.geometries, function (geom) {\n      return geom.type === 'line';\n    });\n  };\n\n  LineLabel.prototype.getShapeInfo = function (shape) {\n    var originPoints = shape.get('origin').points;\n    var lastPoint = originPoints[originPoints.length - 1];\n    var color = shape.attr('stroke');\n    var seriesField = this.plot.options.seriesField;\n    var name = shape.get('origin').data[0][seriesField];\n    return {\n      x: lastPoint.x,\n      y: lastPoint.y,\n      color: color,\n      name: name\n    };\n  };\n\n  return LineLabel;\n}();\n\nexport default LineLabel;","map":{"version":3,"sources":["../../../../../src/plots/line/component/label/line-label.ts"],"names":[],"mappings":"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","sourcesContent":["import { each, deepMix, clone, find } from '@antv/util';\nimport { View, IGroup, Geometry } from '../../../../dependents';\n\nconst DEFAULT_OFFSET = 8;\n\nexport interface LineLabelConfig {\n  visible?: boolean;\n  formatter?: (...args: any[]) => string;\n  offsetX?: number;\n  offsetY?: number;\n  style?: any;\n}\n\nexport interface ILineLabel extends LineLabelConfig {\n  view: View;\n  plot: any;\n}\n\nexport default class LineLabel {\n  public options: LineLabelConfig;\n  public destroyed: boolean = false;\n  protected plot: any;\n  protected view: View;\n  private container: IGroup;\n\n  constructor(cfg: ILineLabel) {\n    this.view = cfg.view;\n    this.plot = cfg.plot;\n    const defaultOptions = this.getDefaultOptions();\n    this.options = deepMix(defaultOptions, cfg, {});\n    this.init();\n  }\n\n  protected init() {\n    this.container = this.getGeometry().labelsContainer;\n    this.view.on('beforerender', () => {\n      this.clear();\n      this.plot.canvas.draw();\n    });\n  }\n\n  public render() {\n    const elements = this.getGeometry().elements;\n    each(elements, (ele) => {\n      const shapeInfo = this.getShapeInfo(ele.shape);\n      const { style, offsetX, offsetY } = this.options;\n      const formatter = this.options.formatter;\n      const content = formatter ? formatter(shapeInfo.name) : shapeInfo.name;\n      this.container.addShape('text', {\n        attrs: deepMix(\n          {},\n          {\n            x: shapeInfo.x + offsetX,\n            y: shapeInfo.y + offsetY,\n            text: content,\n            fill: shapeInfo.color,\n            textAlign: 'left',\n            textBaseline: 'middle',\n          },\n          style\n        ),\n        name: 'label',\n      });\n    });\n  }\n\n  public clear() {\n    if (this.container) {\n      this.container.clear();\n    }\n  }\n\n  public hide() {\n    this.container.set('visible', false);\n    this.plot.canvas.draw();\n  }\n\n  public show() {\n    this.container.set('visible', true);\n    this.plot.canvas.draw();\n  }\n\n  public destroy() {\n    if (this.container) {\n      this.container.remove();\n    }\n    this.destroyed = true;\n  }\n\n  public getBBox() {\n    return this.container.getBBox();\n  }\n\n  private getDefaultOptions() {\n    const { theme } = this.plot;\n    const labelStyle = clone(theme.label.style);\n    delete labelStyle.fill;\n    return {\n      offsetX: DEFAULT_OFFSET,\n      offsetY: 0,\n      style: labelStyle,\n    };\n  }\n\n  private getGeometry() {\n    return find(this.view.geometries, (geom) => geom.type === 'line') as Geometry;\n  }\n\n  protected getShapeInfo(shape) {\n    const originPoints = shape.get('origin').points;\n    const lastPoint = originPoints[originPoints.length - 1];\n    const color = shape.attr('stroke');\n    const { seriesField } = this.plot.options;\n    const name = shape.get('origin').data[0][seriesField];\n    return { x: lastPoint.x, y: lastPoint.y, color, name };\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}