{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { mix } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport { getGeom } from '../../geoms/factory';\nimport ProgressLayer from '../progress/layer';\nimport * as EventParser from './event';\nvar DEFAULT_COLOR = ['#55A6F3', '#E8EDF3'];\n\nvar RingProgressLayer =\n/** @class */\nfunction (_super) {\n  __extends(RingProgressLayer, _super);\n\n  function RingProgressLayer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'ringProgrsss';\n    return _this;\n  }\n\n  RingProgressLayer.prototype.processProps = function () {\n    var props = this.options;\n    props.data = this.processData();\n    var cfg = {\n      padding: [0, 0, 0, 0],\n      xField: 'value',\n      yField: '1',\n      stackField: 'type',\n      barStyle: props.progressStyle,\n      color: this.parseColorProps(props) || DEFAULT_COLOR\n    };\n    props = mix(props, cfg);\n  };\n\n  RingProgressLayer.prototype.coord = function () {\n    var coordConfig = {\n      type: 'theta',\n      cfg: {\n        radius: 1.0,\n        innerRadius: this.getThickness(this.options.size)\n      }\n    };\n    this.setConfig('coordinate', coordConfig);\n  };\n\n  RingProgressLayer.prototype.annotation = function () {\n    return;\n  };\n\n  RingProgressLayer.prototype.addGeometry = function () {\n    var props = this.options;\n    this.ring = getGeom('interval', 'main', {\n      positionFields: [props.yField, props.xField],\n      plot: this\n    });\n    this.ring.adjust = [{\n      type: 'stack'\n    }];\n    this.setConfig('geometry', this.ring);\n  };\n\n  RingProgressLayer.prototype.animation = function () {\n    this.ring.animate = {\n      appear: {\n        duration: 1000\n      }\n    };\n  };\n\n  RingProgressLayer.prototype.parseEvents = function () {\n    _super.prototype.parseEvents.call(this, EventParser);\n  };\n\n  RingProgressLayer.prototype.getThickness = function (value) {\n    var width = this.width;\n    var height = this.height;\n    var size = Math.min(width, height);\n\n    if (value) {\n      return 1.0 - value / size;\n    }\n\n    if (size >= 60) {\n      return 1.0 - 20 / size;\n    }\n\n    return 1.0 - 10 / size;\n  };\n\n  return RingProgressLayer;\n}(ProgressLayer);\n\nexport default RingProgressLayer;\nregisterPlotType('ringProgress', RingProgressLayer);","map":{"version":3,"sources":["../../../src/sparkline/ring-progress/layer.ts"],"names":[],"mappings":";AAAA,SAAS,GAAT,QAAoB,YAApB;AACA,SAAS,gBAAT,QAAiC,mBAAjC;AAEA,SAAS,OAAT,QAAwB,qBAAxB;AACA,OAAO,aAAP,MAAkD,mBAAlD;AACA,OAAO,KAAK,WAAZ,MAA6B,SAA7B;AAEA,IAAM,aAAa,GAAG,CAAC,SAAD,EAAY,SAAZ,CAAtB;;AAKA,IAAA,iBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA+C,EAAA,SAAA,CAAA,iBAAA,EAAA,MAAA,CAAA;;AAA/C,WAAA,iBAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;;AAES,IAAA,KAAA,CAAA,IAAA,GAAe,cAAf;;AAuER;;AArEQ,EAAA,iBAAA,CAAA,SAAA,CAAA,YAAA,GAAP,YAAA;AACE,QAAI,KAAK,GAAG,KAAK,OAAjB;AACA,IAAA,KAAK,CAAC,IAAN,GAAa,KAAK,WAAL,EAAb;AACA,QAAM,GAAG,GAAG;AACV,MAAA,OAAO,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CADC;AAEV,MAAA,MAAM,EAAE,OAFE;AAGV,MAAA,MAAM,EAAE,GAHE;AAIV,MAAA,UAAU,EAAE,MAJF;AAKV,MAAA,QAAQ,EAAE,KAAK,CAAC,aALN;AAMV,MAAA,KAAK,EAAE,KAAK,eAAL,CAAqB,KAArB,KAA+B;AAN5B,KAAZ;AAQA,IAAA,KAAK,GAAG,GAAG,CAAC,KAAD,EAAQ,GAAR,CAAX;AACD,GAZM;;AAcG,EAAA,iBAAA,CAAA,SAAA,CAAA,KAAA,GAAV,YAAA;AACE,QAAM,WAAW,GAAQ;AACvB,MAAA,IAAI,EAAE,OADiB;AAEvB,MAAA,GAAG,EAAE;AACH,QAAA,MAAM,EAAE,GADL;AAEH,QAAA,WAAW,EAAE,KAAK,YAAL,CAAkB,KAAK,OAAL,CAAa,IAA/B;AAFV;AAFkB,KAAzB;AAOA,SAAK,SAAL,CAAe,YAAf,EAA6B,WAA7B;AACD,GATS;;AAWA,EAAA,iBAAA,CAAA,SAAA,CAAA,UAAA,GAAV,YAAA;AACE;AACD,GAFS;;AAIA,EAAA,iBAAA,CAAA,SAAA,CAAA,WAAA,GAAV,YAAA;AACE,QAAM,KAAK,GAAG,KAAK,OAAnB;AACA,SAAK,IAAL,GAAY,OAAO,CAAC,UAAD,EAAa,MAAb,EAAqB;AACtC,MAAA,cAAc,EAAE,CAAC,KAAK,CAAC,MAAP,EAAe,KAAK,CAAC,MAArB,CADsB;AAEtC,MAAA,IAAI,EAAE;AAFgC,KAArB,CAAnB;AAIA,SAAK,IAAL,CAAU,MAAV,GAAmB,CACjB;AACE,MAAA,IAAI,EAAE;AADR,KADiB,CAAnB;AAKA,SAAK,SAAL,CAAe,UAAf,EAA2B,KAAK,IAAhC;AACD,GAZS;;AAcA,EAAA,iBAAA,CAAA,SAAA,CAAA,SAAA,GAAV,YAAA;AACE,SAAK,IAAL,CAAU,OAAV,GAAoB;AAClB,MAAA,MAAM,EAAE;AACN,QAAA,QAAQ,EAAE;AADJ;AADU,KAApB;AAKD,GANS;;AAQA,EAAA,iBAAA,CAAA,SAAA,CAAA,WAAA,GAAV,YAAA;AACE,IAAA,MAAA,CAAA,SAAA,CAAM,WAAN,CAAiB,IAAjB,CAAiB,IAAjB,EAAkB,WAAlB;AACD,GAFS;;AAIF,EAAA,iBAAA,CAAA,SAAA,CAAA,YAAA,GAAR,UAAqB,KAArB,EAAmC;AACjC,QAAM,KAAK,GAAG,KAAK,KAAnB;AACA,QAAM,MAAM,GAAG,KAAK,MAApB;AACA,QAAM,IAAI,GAAG,IAAI,CAAC,GAAL,CAAS,KAAT,EAAgB,MAAhB,CAAb;;AAEA,QAAI,KAAJ,EAAW;AACT,aAAO,MAAM,KAAK,GAAG,IAArB;AACD;;AAED,QAAI,IAAI,IAAI,EAAZ,EAAgB;AACd,aAAO,MAAM,KAAK,IAAlB;AACD;;AACD,WAAO,MAAM,KAAK,IAAlB;AACD,GAbO;;AAcV,SAAA,iBAAA;AAAC,CAzED,CAA+C,aAA/C,CAAA;;;AA2EA,gBAAgB,CAAC,cAAD,EAAiB,iBAAjB,CAAhB","sourcesContent":["import { mix } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport { LayerConfig } from '../../base/layer';\nimport { getGeom } from '../../geoms/factory';\nimport ProgressLayer, { ProgressViewConfig } from '../progress/layer';\nimport * as EventParser from './event';\n\nconst DEFAULT_COLOR = ['#55A6F3', '#E8EDF3'];\n\nexport type RingProgressViewConfig = ProgressViewConfig;\nexport interface RingProgressLayerConfig extends RingProgressViewConfig, LayerConfig {}\n\nexport default class RingProgressLayer extends ProgressLayer<RingProgressLayerConfig> {\n  public ring: any;\n  public type: string = 'ringProgrsss';\n\n  public processProps() {\n    let props = this.options;\n    props.data = this.processData();\n    const cfg = {\n      padding: [0, 0, 0, 0],\n      xField: 'value',\n      yField: '1',\n      stackField: 'type',\n      barStyle: props.progressStyle,\n      color: this.parseColorProps(props) || DEFAULT_COLOR,\n    } as any;\n    props = mix(props, cfg);\n  }\n\n  protected coord() {\n    const coordConfig: any = {\n      type: 'theta',\n      cfg: {\n        radius: 1.0,\n        innerRadius: this.getThickness(this.options.size),\n      },\n    };\n    this.setConfig('coordinate', coordConfig);\n  }\n\n  protected annotation() {\n    return;\n  }\n\n  protected addGeometry() {\n    const props = this.options;\n    this.ring = getGeom('interval', 'main', {\n      positionFields: [props.yField, props.xField],\n      plot: this,\n    });\n    this.ring.adjust = [\n      {\n        type: 'stack',\n      },\n    ];\n    this.setConfig('geometry', this.ring);\n  }\n\n  protected animation() {\n    this.ring.animate = {\n      appear: {\n        duration: 1000,\n      },\n    };\n  }\n\n  protected parseEvents() {\n    super.parseEvents(EventParser);\n  }\n\n  private getThickness(value?: number): number {\n    const width = this.width;\n    const height = this.height;\n    const size = Math.min(width, height);\n\n    if (value) {\n      return 1.0 - value / size;\n    }\n\n    if (size >= 60) {\n      return 1.0 - 20 / size;\n    }\n    return 1.0 - 10 / size;\n  }\n}\n\nregisterPlotType('ringProgress', RingProgressLayer);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}