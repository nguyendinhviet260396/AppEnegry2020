{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each } from '@antv/util';\nimport ShapeNodes from '../node/shape-nodes';\nimport Responsive from '../responsive';\nimport ApplyResponsive from './base';\nvar SCALE_MAPPER = {\n  cat: 'category',\n  timeCat: 'category',\n  time: 'dateTime',\n  linear: 'linear'\n};\n\nvar ApplyResponsiveAxis =\n/** @class */\nfunction (_super) {\n  __extends(ApplyResponsiveAxis, _super);\n\n  function ApplyResponsiveAxis() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ApplyResponsiveAxis.prototype.init = function () {\n    this.axisInstance = this.getAxisInstance();\n\n    _super.prototype.init.call(this);\n  };\n\n  ApplyResponsiveAxis.prototype.shouldApply = function () {\n    var options = this.plot.options;\n\n    if (!this.responsiveTheme.axis) {\n      return false;\n    }\n\n    if (this.responsiveTheme.axis[this.dim] && options[this.dim + \"Axis\"].visible && options[this.dim + \"Axis\"].label && options[this.dim + \"Axis\"].label.visible) {\n      return true;\n    }\n\n    return false;\n  };\n\n  ApplyResponsiveAxis.prototype.apply = function () {\n    var _this = this;\n\n    var rawLabels = this.plot.view.backgroundGroup.findAll(function (el) {\n      var name = el.get('name');\n\n      if (name === 'axis-label') {\n        var field = el.get('delegateObject').axis.get('field');\n\n        if (field === _this.plot.options[_this.dim + \"Field\"]) {\n          return el;\n        }\n      }\n    });\n    var shapes = [];\n\n    for (var i = 0; i < rawLabels.length; i++) {\n      shapes.push(rawLabels[i]);\n    }\n\n    var shapeNodes = new ShapeNodes({\n      shapes: shapes\n    });\n    var _a = this.responsiveTheme.axis.x[this.type],\n        constraints = _a.constraints,\n        rules = _a.rules;\n    new Responsive({\n      nodes: shapeNodes,\n      constraints: constraints,\n      region: this.plot.getViewRange(),\n      rules: rules,\n      plot: this.plot,\n      onEnd: function onEnd(nodes) {\n        _this.updateTicks(nodes.origion_nodes);\n      }\n    });\n  };\n\n  ApplyResponsiveAxis.prototype.getType = function () {\n    var props = this.plot.options;\n    var axis = this.dim + \"Axis\";\n    var field = this.dim + \"Field\";\n\n    if (props[axis] && props[axis].type && props[axis].type === 'dateTime') {\n      return 'dateTime';\n    }\n\n    var scaleType = this.plot.view.getScaleByField([props[field]]).type;\n    return SCALE_MAPPER[scaleType];\n  };\n\n  ApplyResponsiveAxis.prototype.getAxisInstance = function () {\n    var _a, _b;\n\n    var axisIndex = this.dim === 'x' ? 0 : 1;\n    var components = (_a = this.plot.view.getController('axis')) === null || _a === void 0 ? void 0 : _a.getComponents();\n\n    if (components) {\n      return (_b = components[axisIndex]) === null || _b === void 0 ? void 0 : _b.component;\n    }\n  };\n\n  ApplyResponsiveAxis.prototype.updateTicks = function (nodes) {\n    var _this = this;\n\n    var tickLineContainer = this.plot.view.backgroundGroup.findAll(function (el) {\n      var name = el.get('name');\n\n      if (name === 'axis-tickline-group') {\n        var field = el.get('delegateObject').axis.get('field');\n\n        if (field === _this.plot.options[_this.dim + \"Field\"]) {\n          return el;\n        }\n      }\n    })[0];\n\n    if (tickLineContainer) {\n      var tickShapes_1 = tickLineContainer.get('children');\n      each(nodes, function (n, index) {\n        if (n.shape.attr('text') === '') {\n          tickShapes_1[index].attr('opacity', 0);\n        }\n      });\n    }\n\n    this.plot.canvas.draw();\n  };\n\n  return ApplyResponsiveAxis;\n}(ApplyResponsive);\n\nexport default ApplyResponsiveAxis;","map":{"version":3,"sources":["../../../../src/util/responsive/apply/axis.ts"],"names":[],"mappings":"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","sourcesContent":["import { Axis } from '../../../dependents';\nimport { each } from '@antv/util';\nimport ShapeNodes from '../node/shape-nodes';\nimport Responsive from '../responsive';\nimport ApplyResponsive from './base';\n\nconst SCALE_MAPPER = {\n  cat: 'category',\n  timeCat: 'category',\n  time: 'dateTime',\n  linear: 'linear',\n};\n\nexport default class ApplyResponsiveAxis extends ApplyResponsive {\n  private dim: string;\n  private axisInstance: Axis.Base;\n\n  protected init() {\n    this.axisInstance = this.getAxisInstance();\n    super.init();\n  }\n\n  protected shouldApply() {\n    const { options } = this.plot;\n    if (!this.responsiveTheme.axis) {\n      return false;\n    }\n    if (\n      this.responsiveTheme.axis[this.dim] &&\n      options[`${this.dim}Axis`].visible &&\n      options[`${this.dim}Axis`].label &&\n      options[`${this.dim}Axis`].label.visible\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  protected apply() {\n    const rawLabels = this.plot.view.backgroundGroup.findAll((el) => {\n      const name = el.get('name');\n      if (name === 'axis-label') {\n        const field = el.get('delegateObject').axis.get('field');\n        if (field === this.plot.options[`${this.dim}Field`]) {\n          return el;\n        }\n      }\n    });\n    const shapes = [];\n    for (let i = 0; i < rawLabels.length; i++) {\n      shapes.push(rawLabels[i]);\n    }\n    const shapeNodes = new ShapeNodes({\n      shapes,\n    });\n    const { constraints, rules } = this.responsiveTheme.axis.x[this.type];\n    new Responsive({\n      nodes: shapeNodes,\n      constraints,\n      region: this.plot.getViewRange(),\n      rules,\n      plot: this.plot,\n      onEnd: (nodes) => {\n        this.updateTicks(nodes.origion_nodes);\n      },\n    });\n  }\n\n  protected getType() {\n    const props = this.plot.options;\n    const axis = `${this.dim}Axis`;\n    const field = `${this.dim}Field`;\n    if (props[axis] && props[axis].type && props[axis].type === 'dateTime') {\n      return 'dateTime';\n    }\n    const scaleType = this.plot.view.getScaleByField([props[field]]).type;\n    return SCALE_MAPPER[scaleType];\n  }\n\n  private getAxisInstance() {\n    const axisIndex = this.dim === 'x' ? 0 : 1;\n    const components = this.plot.view.getController('axis')?.getComponents();\n    if (components) {\n      return components[axisIndex]?.component;\n    }\n  }\n\n  private updateTicks(nodes) {\n    const tickLineContainer = this.plot.view.backgroundGroup.findAll((el) => {\n      const name = el.get('name');\n      if (name === 'axis-tickline-group') {\n        const field = el.get('delegateObject').axis.get('field');\n        if (field === this.plot.options[`${this.dim}Field`]) {\n          return el;\n        }\n      }\n    })[0];\n    if (tickLineContainer) {\n      const tickShapes = tickLineContainer.get('children');\n      each(nodes, (n, index) => {\n        if (n.shape.attr('text') === '') {\n          tickShapes[index].attr('opacity', 0);\n        }\n      });\n    }\n    this.plot.canvas.draw();\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}