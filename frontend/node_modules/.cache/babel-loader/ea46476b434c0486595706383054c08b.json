{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { isEqual, last } from '@antv/util';\nimport BaseInteraction from './base';\nimport { InteractionAction, registerAction, registerInteraction, VIEW_LIFE_CIRCLE, InteractionUtils } from '../dependents';\nimport TooltipIndicator, { EVENTS as TOOLTIP_COMPONENTS_EVENTS } from '../components/tooltip-indicator';\nimport { forEachElement } from '../util/view';\nimport BBox from '../util/bbox';\nvar DEFAULT_PADDING = 8;\n\nvar getValidTooltipIndicatorConfig = function getValidTooltipIndicatorConfig(cfg) {\n  if (cfg === void 0) {\n    cfg = {};\n  }\n\n  var newCfg = __assign({\n    showTotal: false,\n    showPercent: false,\n    padding: [DEFAULT_PADDING, 24, DEFAULT_PADDING, 24],\n    height: cfg.showPercent ? 72 : 54\n  }, cfg);\n\n  return newCfg;\n};\n\nexport var TOOLTIP_INDICATOR_EVENTS;\n\n(function (TOOLTIP_INDICATOR_EVENTS) {\n  TOOLTIP_INDICATOR_EVENTS[\"ACTIVE_ELEMENT\"] = \"tooltip_indicator_active_element\";\n  TOOLTIP_INDICATOR_EVENTS[\"ACTIVE_ELEMENT_BY_X\"] = \"tooltip_indicator_active_element_by_x\";\n})(TOOLTIP_INDICATOR_EVENTS || (TOOLTIP_INDICATOR_EVENTS = {}));\n/**\n * Tooltip Indicator Action 实现\n */\n\n\nvar TooltipIndicationAction =\n/** @class */\nfunction (_super) {\n  __extends(TooltipIndicationAction, _super);\n\n  function TooltipIndicationAction() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = 'selected';\n    _this.isSingle = false;\n    return _this;\n  }\n  /** 交互语法触发点 */\n\n\n  TooltipIndicationAction.prototype.active = function () {\n    var element = InteractionUtils.getCurrentElement(this.context);\n\n    if (element.hasState('selected')) {\n      if (this.isSingle) {\n        this.setStateByX(element);\n      } else {\n        this.setState(element);\n      }\n    } else {\n      this.setStateByX(element);\n    }\n  };\n  /** 单个元素的 enable */\n\n\n  TooltipIndicationAction.prototype.setState = function (element) {\n    var _this = this;\n\n    forEachElement(this.getView(), function (item) {\n      if (item === element) {\n        if (!item.hasState(_this.state)) {\n          item.setState(_this.state, true);\n        }\n      } else {\n        item.setState(_this.state, false);\n      }\n    });\n    this.isSingle = true;\n    this.getView().emit(TOOLTIP_INDICATOR_EVENTS.ACTIVE_ELEMENT, {\n      element: element,\n      isSingle: true\n    });\n  };\n  /** 同 X 的元素的 enable */\n\n\n  TooltipIndicationAction.prototype.setStateByX = function (element) {\n    var _this = this;\n\n    var xField = this.getXField();\n    var xValue = element.getData()[xField];\n    forEachElement(this.getView(), function (item) {\n      if (item.getData()[xField] === xValue) {\n        if (!item.hasState(_this.state)) {\n          item.setState(_this.state, true);\n        }\n      } else {\n        item.setState(_this.state, false);\n      }\n    });\n    this.isSingle = false;\n    this.getView().emit(TOOLTIP_INDICATOR_EVENTS.ACTIVE_ELEMENT_BY_X, {\n      element: element,\n      isSingle: false\n    });\n  };\n  /** 通过字段值来 enable */\n\n\n  TooltipIndicationAction.prototype.setStateByField = function (xFieldValue, groupFieldValue) {\n    var _this = this;\n\n    var xField = this.getView().getXScale().field;\n    var groupField = this.getView().getGroupScales()[0].field;\n    forEachElement(this.getView(), function (element) {\n      var data = element.getData();\n      element.setState(_this.state, data[xField] === xFieldValue && (groupFieldValue === undefined || data[groupField] === groupFieldValue));\n    });\n  };\n\n  TooltipIndicationAction.prototype.getView = function () {\n    return this.context.view;\n  };\n\n  TooltipIndicationAction.prototype.getXField = function () {\n    var view = this.context.view;\n    return view.getXScale().field;\n  };\n\n  return TooltipIndicationAction;\n}(InteractionAction);\n\nexport { TooltipIndicationAction };\nregisterAction('tooltip-indicator', TooltipIndicationAction);\nregisterInteraction('element-tooltip-indicator', {\n  start: [{\n    trigger: 'element:mousemove',\n    action: 'tooltip-indicator:active',\n    throttle: {\n      wait: 50,\n      leading: true,\n      trailing: false\n    }\n  }, {\n    trigger: 'element:touchmove',\n    action: 'tooltip-indicator:active',\n    throttle: {\n      wait: 50,\n      leading: true,\n      trailing: false\n    }\n  }]\n});\n/**\n * 组件 Interaction 实现\n */\n\nvar TooltipIndicatorInteraction =\n/** @class */\nfunction (_super) {\n  __extends(TooltipIndicatorInteraction, _super);\n\n  function TooltipIndicatorInteraction() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.onElementActive = function (_a) {\n      var element = _a.element,\n          isSingle = _a.isSingle;\n\n      var xScale = _this.view.getXScale();\n\n      var xField = _this.view.getXScale().field;\n\n      var groupField = _this.view.getGroupScales()[0].field;\n\n      var data = element.getData();\n      var xValue = data[xField];\n\n      var items = _this.getLegendItems(xValue);\n\n      _this.component.update({\n        items: items,\n        title: {\n          text: xScale.getText(xValue)\n        }\n      });\n\n      _this.component.render();\n\n      if (isSingle) {\n        _this.component.selectItem(data[groupField]);\n      }\n\n      _this.curX = xValue;\n    };\n\n    _this.onSelectTooltipIndicatorItem = function (itemId) {\n      if (_this.component && itemId) {\n        _this.getInteractionAction().setStateByField(_this.curX, itemId);\n      }\n    };\n\n    return _this;\n  }\n\n  TooltipIndicatorInteraction.getInteractionRange = function (layerRange, interaction) {\n    var config = getValidTooltipIndicatorConfig(interaction);\n    var _a = config.padding,\n        paddingTop = _a[0],\n        paddingBottom = _a[2];\n    return new BBox(layerRange.minX, layerRange.minY, layerRange.width, config.height + paddingTop + paddingBottom);\n  };\n\n  TooltipIndicatorInteraction.prototype.clear = function () {\n    if (this.component) {\n      this.component.destroy();\n    }\n\n    if (this.container) {\n      this.container.remove(true);\n    }\n\n    this.component = null;\n    this.container = null;\n  };\n\n  TooltipIndicatorInteraction.prototype.render = function () {\n    var _this = this;\n\n    var view = this.view;\n\n    var callback = function callback() {\n      var xScale = _this.view.getXScale();\n\n      var lastX = last(xScale.getTicks()).tickValue;\n      var padding = _this.view.padding;\n\n      if (!isEqual([0, 0, 0, 0], padding)) {\n        if (_this.component) {\n          _this.updateComponent();\n        } else {\n          _this.createComponent();\n\n          _this.component.on(TOOLTIP_COMPONENTS_EVENTS.ON_SELECT_ITEM, _this.onSelectTooltipIndicatorItem);\n        } // 默认选中最后的 X\n\n\n        _this.curX = lastX;\n\n        _this.component.update({\n          title: {\n            text: xScale.getText(_this.curX)\n          }\n        });\n\n        _this.component.render();\n\n        _this.getInteractionAction().setStateByField(lastX);\n      }\n    }; // 移除冲突/重复的组件和交互\n\n\n    view.legend(false);\n    view.removeInteraction('active-region');\n    view.removeInteraction('tooltip');\n    view.interaction('element-tooltip-indicator'); // 监听 View， 创建/更新组件\n\n    view.on(VIEW_LIFE_CIRCLE.AFTER_PAINT, callback);\n    view.on(VIEW_LIFE_CIRCLE.AFTER_RENDER, callback); // 监听组件事件，更新 action\n\n    view.on(TOOLTIP_INDICATOR_EVENTS.ACTIVE_ELEMENT, this.onElementActive);\n    view.on(TOOLTIP_INDICATOR_EVENTS.ACTIVE_ELEMENT_BY_X, this.onElementActive);\n  };\n\n  TooltipIndicatorInteraction.prototype.getInteractionAction = function () {\n    var interaction = this.view.interactions['element-tooltip-indicator'];\n    return interaction && interaction.context.getAction('tooltip-indicator');\n  };\n\n  TooltipIndicatorInteraction.prototype.createComponent = function () {\n    var padding = getValidTooltipIndicatorConfig(this.getInteractionConfig()).padding;\n    var paddingTop = padding[0],\n        paddingRight = padding[1],\n        paddingBottom = padding[2],\n        paddingLeft = padding[3];\n    var items = this.getLegendItems();\n    var range = this.getRange();\n    var xScale = this.view.getXScale();\n    var lastX = last(xScale.getTicks()).tickValue;\n    this.container = this.canvas.addGroup();\n    this.component = new TooltipIndicator({\n      container: this.container,\n      x: range.x + paddingLeft,\n      y: range.y + paddingTop,\n      width: range.width - paddingLeft - paddingRight,\n      height: range.height - paddingTop - paddingBottom,\n      theme: this.getViewLayer().getPlotTheme(),\n      items: items\n    });\n    this.component.init();\n    this.getInteractionAction().setStateByField(lastX);\n  };\n\n  TooltipIndicatorInteraction.prototype.updateComponent = function () {\n    var items = this.getLegendItems();\n    this.component.update({\n      items: items\n    });\n  };\n\n  TooltipIndicatorInteraction.prototype.getLegendItems = function (xValue) {\n    var view = this.view;\n    var data = view.getData();\n    var defaultColor = view.getTheme().defaultColor;\n    var xScale = view.getXScale();\n    var yScale = view.getYScales()[0];\n    var curX = xValue || last(xScale.getTicks()).tickValue;\n    var groupAttrs = view.getLegendAttributes();\n    var colorAttr = groupAttrs.find(function (attr) {\n      return attr.type === 'color';\n    });\n    var items = []; // 取第一个分组scale，暂不考虑多个分组情况\n\n    var groupScale = view.getGroupScales()[0];\n    var groupField = groupScale.field;\n\n    if (groupScale && groupScale.isCategory) {\n      // 只处理离散情况\n      groupScale.getTicks().forEach(function (tick) {\n        var name = tick.text,\n            value = tick.tickValue;\n        var color = colorAttr.mapping(value).join('') || defaultColor;\n        items.push({\n          id: value,\n          title: name,\n          color: color,\n          values: []\n        });\n      });\n    }\n\n    var selectedData = (data === null || data === void 0 ? void 0 : data.filter(function (datum) {\n      return datum[xScale.field] === curX;\n    })) || [];\n    items.forEach(function (item) {\n      var datum = selectedData.find(function (curDatum) {\n        return curDatum[groupField] === item.id;\n      });\n      item.values.push({\n        value: yScale.formatter ? yScale.formatter(datum[yScale.field]) : datum[yScale.field]\n      });\n    });\n    return items;\n  };\n\n  return TooltipIndicatorInteraction;\n}(BaseInteraction);\n\nexport default TooltipIndicatorInteraction;","map":{"version":3,"sources":["../../src/interaction/tooltip-indicator.ts"],"names":[],"mappings":"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","sourcesContent":["import { isEqual, last } from '@antv/util';\nimport BaseInteraction from './base';\nimport {\n  IGroup,\n  Element,\n  InteractionAction,\n  GrammarInteraction,\n  registerAction,\n  registerInteraction,\n  VIEW_LIFE_CIRCLE,\n  InteractionUtils,\n} from '../dependents';\nimport TooltipIndicator, { IndicatorItem, EVENTS as TOOLTIP_COMPONENTS_EVENTS } from '../components/tooltip-indicator';\nimport { ITooltipIndicatorInteractionConfig } from '../interface/config';\nimport { forEachElement } from '../util/view';\nimport BBox from '../util/bbox';\n\nconst DEFAULT_PADDING = 8;\n\nconst getValidTooltipIndicatorConfig = (\n  cfg: ITooltipIndicatorInteractionConfig = {}\n): Required<ITooltipIndicatorInteractionConfig> => {\n  const newCfg: Required<ITooltipIndicatorInteractionConfig> = {\n    showTotal: false,\n    showPercent: false,\n    padding: [DEFAULT_PADDING, 24, DEFAULT_PADDING, 24],\n    height: cfg.showPercent ? 72 : 54,\n    ...cfg,\n  };\n\n  return newCfg;\n};\n\nexport enum TOOLTIP_INDICATOR_EVENTS {\n  ACTIVE_ELEMENT = 'tooltip_indicator_active_element',\n  ACTIVE_ELEMENT_BY_X = 'tooltip_indicator_active_element_by_x',\n}\n\n/**\n * Tooltip Indicator Action 实现\n */\nexport class TooltipIndicationAction extends InteractionAction {\n  private state = 'selected';\n  private isSingle = false;\n\n  /** 交互语法触发点 */\n  public active() {\n    const element = InteractionUtils.getCurrentElement(this.context);\n    if (element.hasState('selected')) {\n      if (this.isSingle) {\n        this.setStateByX(element);\n      } else {\n        this.setState(element);\n      }\n    } else {\n      this.setStateByX(element);\n    }\n  }\n\n  /** 单个元素的 enable */\n  public setState(element: Element) {\n    forEachElement(this.getView(), (item) => {\n      if (item === element) {\n        if (!item.hasState(this.state)) {\n          item.setState(this.state, true);\n        }\n      } else {\n        item.setState(this.state, false);\n      }\n    });\n    this.isSingle = true;\n    this.getView().emit(TOOLTIP_INDICATOR_EVENTS.ACTIVE_ELEMENT, { element, isSingle: true });\n  }\n\n  /** 同 X 的元素的 enable */\n  public setStateByX(element: Element) {\n    const xField = this.getXField();\n    const xValue = element.getData()[xField];\n    forEachElement(this.getView(), (item) => {\n      if (item.getData()[xField] === xValue) {\n        if (!item.hasState(this.state)) {\n          item.setState(this.state, true);\n        }\n      } else {\n        item.setState(this.state, false);\n      }\n    });\n    this.isSingle = false;\n    this.getView().emit(TOOLTIP_INDICATOR_EVENTS.ACTIVE_ELEMENT_BY_X, { element, isSingle: false });\n  }\n\n  /** 通过字段值来 enable */\n  public setStateByField(xFieldValue: any, groupFieldValue?: any) {\n    const xField = this.getView().getXScale().field;\n    const groupField = this.getView().getGroupScales()[0].field;\n    forEachElement(this.getView(), (element) => {\n      const data = element.getData();\n      element.setState(\n        this.state,\n        data[xField] === xFieldValue && (groupFieldValue === undefined || data[groupField] === groupFieldValue)\n      );\n    });\n  }\n\n  private getView() {\n    return this.context.view;\n  }\n\n  private getXField() {\n    const { view } = this.context;\n    return view.getXScale().field;\n  }\n}\nregisterAction('tooltip-indicator', TooltipIndicationAction);\n\nregisterInteraction('element-tooltip-indicator', {\n  start: [\n    {\n      trigger: 'element:mousemove',\n      action: 'tooltip-indicator:active',\n      throttle: { wait: 50, leading: true, trailing: false },\n    },\n    {\n      trigger: 'element:touchmove',\n      action: 'tooltip-indicator:active',\n      throttle: { wait: 50, leading: true, trailing: false },\n    },\n  ],\n});\n\n/**\n * 组件 Interaction 实现\n */\nexport default class TooltipIndicatorInteraction extends BaseInteraction {\n  public static getInteractionRange(layerRange: BBox, interaction: ITooltipIndicatorInteractionConfig) {\n    const config: Required<ITooltipIndicatorInteractionConfig> = getValidTooltipIndicatorConfig(interaction);\n    const [paddingTop, , paddingBottom] = config.padding;\n\n    return new BBox(layerRange.minX, layerRange.minY, layerRange.width, config.height + paddingTop + paddingBottom);\n  }\n\n  private component: TooltipIndicator;\n  private container: IGroup;\n  private curX: any;\n\n  protected clear(): void {\n    if (this.component) {\n      this.component.destroy();\n    }\n    if (this.container) {\n      this.container.remove(true);\n    }\n    this.component = null;\n    this.container = null;\n  }\n\n  public render(): void {\n    const view = this.view;\n    const callback = () => {\n      const xScale = this.view.getXScale();\n      const lastX = last(xScale.getTicks()).tickValue;\n      const padding = this.view.padding;\n      if (!isEqual([0, 0, 0, 0], padding)) {\n        if (this.component) {\n          this.updateComponent();\n        } else {\n          this.createComponent();\n          this.component.on(TOOLTIP_COMPONENTS_EVENTS.ON_SELECT_ITEM, this.onSelectTooltipIndicatorItem);\n        }\n        // 默认选中最后的 X\n        this.curX = lastX;\n        this.component.update({\n          title: { text: xScale.getText(this.curX) },\n        });\n        this.component.render();\n        this.getInteractionAction().setStateByField(lastX);\n      }\n    };\n\n    // 移除冲突/重复的组件和交互\n    view.legend(false);\n    view.removeInteraction('active-region');\n    view.removeInteraction('tooltip');\n    view.interaction('element-tooltip-indicator');\n\n    // 监听 View， 创建/更新组件\n    view.on(VIEW_LIFE_CIRCLE.AFTER_PAINT, callback);\n    view.on(VIEW_LIFE_CIRCLE.AFTER_RENDER, callback);\n\n    // 监听组件事件，更新 action\n    view.on(TOOLTIP_INDICATOR_EVENTS.ACTIVE_ELEMENT, this.onElementActive);\n    view.on(TOOLTIP_INDICATOR_EVENTS.ACTIVE_ELEMENT_BY_X, this.onElementActive);\n  }\n\n  private getInteractionAction(): TooltipIndicationAction | undefined {\n    const interaction = this.view.interactions['element-tooltip-indicator'] as GrammarInteraction;\n    return interaction && (interaction.context.getAction('tooltip-indicator') as TooltipIndicationAction);\n  }\n\n  private createComponent() {\n    const { padding } = getValidTooltipIndicatorConfig(this.getInteractionConfig());\n    const [paddingTop, paddingRight, paddingBottom, paddingLeft] = padding;\n    const items = this.getLegendItems();\n    const range = this.getRange();\n    const xScale = this.view.getXScale();\n    const lastX = last(xScale.getTicks()).tickValue;\n    this.container = this.canvas.addGroup();\n    this.component = new TooltipIndicator({\n      container: this.container,\n      x: range.x + paddingLeft,\n      y: range.y + paddingTop,\n      width: range.width - paddingLeft - paddingRight,\n      height: range.height - paddingTop - paddingBottom,\n      theme: this.getViewLayer().getPlotTheme(),\n      items,\n    });\n    this.component.init();\n    this.getInteractionAction().setStateByField(lastX);\n  }\n\n  private updateComponent() {\n    const items = this.getLegendItems();\n    this.component.update({\n      items,\n    });\n  }\n\n  private getLegendItems(xValue?: any): IndicatorItem[] {\n    const { view } = this;\n    const data = view.getData();\n    const defaultColor = view.getTheme().defaultColor;\n    const xScale = view.getXScale();\n    const yScale = view.getYScales()[0];\n    const curX = xValue || last(xScale.getTicks()).tickValue;\n    const groupAttrs = view.getLegendAttributes();\n    const colorAttr = groupAttrs.find((attr) => attr.type === 'color');\n    const items: IndicatorItem[] = [];\n\n    // 取第一个分组scale，暂不考虑多个分组情况\n    const groupScale = view.getGroupScales()[0];\n    const groupField = groupScale.field;\n    if (groupScale && groupScale.isCategory) {\n      // 只处理离散情况\n      groupScale.getTicks().forEach((tick) => {\n        const { text: name, tickValue: value } = tick;\n        const color = colorAttr.mapping(value).join('') || defaultColor;\n        items.push({\n          id: value,\n          title: name,\n          color,\n          values: [],\n        });\n      });\n    }\n\n    const selectedData = data?.filter((datum) => datum[xScale.field] === curX) || [];\n    items.forEach((item) => {\n      const datum = selectedData.find((curDatum) => curDatum[groupField] === item.id);\n      item.values.push({\n        value: yScale.formatter ? yScale.formatter(datum[yScale.field]) : datum[yScale.field],\n      });\n    });\n\n    return items;\n  }\n\n  private onElementActive = ({ element, isSingle }: { element: Element; isSingle: boolean }) => {\n    const xScale = this.view.getXScale();\n    const xField = this.view.getXScale().field;\n    const groupField = this.view.getGroupScales()[0].field;\n    const data = element.getData();\n    const xValue = data[xField];\n    const items = this.getLegendItems(xValue);\n    this.component.update({ items, title: { text: xScale.getText(xValue) } });\n    this.component.render();\n    if (isSingle) {\n      this.component.selectItem(data[groupField]);\n    }\n    this.curX = xValue;\n  };\n\n  private onSelectTooltipIndicatorItem = (itemId?: string) => {\n    if (this.component && itemId) {\n      this.getInteractionAction().setStateByField(this.curX, itemId);\n    }\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}