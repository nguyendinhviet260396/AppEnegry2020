{"ast":null,"code":"import { mix, each, isArray, isString } from '@antv/util';\nimport { pointsToPolygon } from '../../util/path';\nimport Global from '../../global';\nimport Shape from '../shape';\nimport { getPathWithBorderRadiusByPolyline, getPolylinePoints, simplifyPolyline } from './polyline-util'; // 折线\n\nShape.registerEdge('polyline', {\n  options: {\n    color: Global.defaultEdge.color,\n    style: {\n      radius: 0,\n      offset: 5,\n      x: 0,\n      y: 0\n    },\n    // 文本样式配置\n    labelCfg: {\n      style: {\n        fill: '#595959'\n      }\n    }\n  },\n  shapeType: 'polyline',\n  // 文本位置\n  labelPosition: 'center',\n  drawShape: function drawShape(cfg, group) {\n    var shapeStyle = this.getShapeStyle(cfg);\n    if (shapeStyle.radius === 0) delete shapeStyle.radius;\n    var keyShape = group.addShape('path', {\n      className: 'edge-shape',\n      name: 'edge-shape',\n      attrs: shapeStyle\n    });\n    return keyShape;\n  },\n  getShapeStyle: function getShapeStyle(cfg) {\n    var defaultStyle = this.options.style;\n    var strokeStyle = {\n      stroke: cfg.color\n    };\n    var style = mix({}, defaultStyle, strokeStyle, cfg.style);\n    cfg = this.getPathPoints(cfg);\n    this.radius = style.radius;\n    this.offset = style.offset;\n    var startPoint = cfg.startPoint,\n        endPoint = cfg.endPoint;\n    var controlPoints = this.getControlPoints(cfg);\n    var points = [startPoint]; // 添加起始点\n    // 添加控制点\n\n    if (controlPoints) {\n      points = points.concat(controlPoints);\n    } // 添加结束点\n\n\n    points.push(endPoint);\n    var source = cfg.sourceNode;\n    var target = cfg.targetNode;\n    var routeCfg = {\n      radius: style.radius\n    };\n\n    if (!controlPoints) {\n      routeCfg = {\n        source: source,\n        target: target,\n        offset: style.offset,\n        radius: style.radius\n      };\n    }\n\n    var path = this.getPath(points, routeCfg);\n\n    if (isArray(path) && path.length <= 1 || isString(path) && path.indexOf('L') === -1) {\n      path = 'M0 0, L0 0';\n    }\n\n    if (isNaN(startPoint.x) || isNaN(startPoint.y) || isNaN(endPoint.x) || isNaN(endPoint.y)) {\n      path = 'M0 0, L0 0';\n    }\n\n    var attrs = mix({}, Global.defaultEdge.style, style, {\n      lineWidth: cfg.size,\n      path: path\n    });\n    return attrs;\n  },\n  getPath: function getPath(points, routeCfg) {\n    var _a = routeCfg,\n        source = _a.source,\n        target = _a.target,\n        offset = _a.offset,\n        radius = _a.radius; // 指定了控制点\n\n    if (!offset || points.length > 2) {\n      if (radius) {\n        return getPathWithBorderRadiusByPolyline(points, radius);\n      }\n\n      var pathArray_1 = [];\n      each(points, function (point, index) {\n        if (index === 0) {\n          pathArray_1.push(['M', point.x, point.y]);\n        } else {\n          pathArray_1.push(['L', point.x, point.y]);\n        }\n      });\n      return pathArray_1;\n    } // 未指定控制点\n\n\n    var polylinePoints;\n\n    if (radius) {\n      polylinePoints = simplifyPolyline(getPolylinePoints(points[0], points[points.length - 1], source, target, offset));\n      var res_1 = getPathWithBorderRadiusByPolyline(polylinePoints, radius);\n      return res_1;\n    }\n\n    polylinePoints = getPolylinePoints(points[0], points[points.length - 1], source, target, offset);\n    var res = pointsToPolygon(polylinePoints);\n    return res;\n  }\n}, 'single-edge');","map":{"version":3,"sources":["C:/Users/vietn/Desktop/AppEnegry2020/frontend/node_modules/@antv/g6/es/shape/edges/polyline.js"],"names":["mix","each","isArray","isString","pointsToPolygon","Global","Shape","getPathWithBorderRadiusByPolyline","getPolylinePoints","simplifyPolyline","registerEdge","options","color","defaultEdge","style","radius","offset","x","y","labelCfg","fill","shapeType","labelPosition","drawShape","cfg","group","shapeStyle","getShapeStyle","keyShape","addShape","className","name","attrs","defaultStyle","strokeStyle","stroke","getPathPoints","startPoint","endPoint","controlPoints","getControlPoints","points","concat","push","source","sourceNode","target","targetNode","routeCfg","path","getPath","length","indexOf","isNaN","lineWidth","size","_a","pathArray_1","point","index","polylinePoints","res_1","res"],"mappings":"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","sourcesContent":["import { mix, each, isArray, isString } from '@antv/util';\nimport { pointsToPolygon } from '../../util/path';\nimport Global from '../../global';\nimport Shape from '../shape';\nimport { getPathWithBorderRadiusByPolyline, getPolylinePoints, simplifyPolyline } from './polyline-util'; // 折线\n\nShape.registerEdge('polyline', {\n  options: {\n    color: Global.defaultEdge.color,\n    style: {\n      radius: 0,\n      offset: 5,\n      x: 0,\n      y: 0\n    },\n    // 文本样式配置\n    labelCfg: {\n      style: {\n        fill: '#595959'\n      }\n    }\n  },\n  shapeType: 'polyline',\n  // 文本位置\n  labelPosition: 'center',\n  drawShape: function drawShape(cfg, group) {\n    var shapeStyle = this.getShapeStyle(cfg);\n    if (shapeStyle.radius === 0) delete shapeStyle.radius;\n    var keyShape = group.addShape('path', {\n      className: 'edge-shape',\n      name: 'edge-shape',\n      attrs: shapeStyle\n    });\n    return keyShape;\n  },\n  getShapeStyle: function getShapeStyle(cfg) {\n    var defaultStyle = this.options.style;\n    var strokeStyle = {\n      stroke: cfg.color\n    };\n    var style = mix({}, defaultStyle, strokeStyle, cfg.style);\n    cfg = this.getPathPoints(cfg);\n    this.radius = style.radius;\n    this.offset = style.offset;\n    var startPoint = cfg.startPoint,\n        endPoint = cfg.endPoint;\n    var controlPoints = this.getControlPoints(cfg);\n    var points = [startPoint]; // 添加起始点\n    // 添加控制点\n\n    if (controlPoints) {\n      points = points.concat(controlPoints);\n    } // 添加结束点\n\n\n    points.push(endPoint);\n    var source = cfg.sourceNode;\n    var target = cfg.targetNode;\n    var routeCfg = {\n      radius: style.radius\n    };\n\n    if (!controlPoints) {\n      routeCfg = {\n        source: source,\n        target: target,\n        offset: style.offset,\n        radius: style.radius\n      };\n    }\n\n    var path = this.getPath(points, routeCfg);\n\n    if (isArray(path) && path.length <= 1 || isString(path) && path.indexOf('L') === -1) {\n      path = 'M0 0, L0 0';\n    }\n\n    if (isNaN(startPoint.x) || isNaN(startPoint.y) || isNaN(endPoint.x) || isNaN(endPoint.y)) {\n      path = 'M0 0, L0 0';\n    }\n\n    var attrs = mix({}, Global.defaultEdge.style, style, {\n      lineWidth: cfg.size,\n      path: path\n    });\n    return attrs;\n  },\n  getPath: function getPath(points, routeCfg) {\n    var _a = routeCfg,\n        source = _a.source,\n        target = _a.target,\n        offset = _a.offset,\n        radius = _a.radius; // 指定了控制点\n\n    if (!offset || points.length > 2) {\n      if (radius) {\n        return getPathWithBorderRadiusByPolyline(points, radius);\n      }\n\n      var pathArray_1 = [];\n      each(points, function (point, index) {\n        if (index === 0) {\n          pathArray_1.push(['M', point.x, point.y]);\n        } else {\n          pathArray_1.push(['L', point.x, point.y]);\n        }\n      });\n      return pathArray_1;\n    } // 未指定控制点\n\n\n    var polylinePoints;\n\n    if (radius) {\n      polylinePoints = simplifyPolyline(getPolylinePoints(points[0], points[points.length - 1], source, target, offset));\n      var res_1 = getPathWithBorderRadiusByPolyline(polylinePoints, radius);\n      return res_1;\n    }\n\n    polylinePoints = getPolylinePoints(points[0], points[points.length - 1], source, target, offset);\n    var res = pointsToPolygon(polylinePoints);\n    return res;\n  }\n}, 'single-edge');"]},"metadata":{},"sourceType":"module"}