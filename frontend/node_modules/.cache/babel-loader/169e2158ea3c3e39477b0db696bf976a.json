{"ast":null,"code":"import { each } from '@antv/util';\nimport fecha from 'fecha';\nvar SECOND = 1000;\nvar MINUTE = 60 * SECOND;\nvar HOUR = 60 * MINUTE;\nvar DAY = 24 * HOUR;\nvar MONTH = 31 * DAY;\nvar YEAR = 365 * DAY;\nexport default function datetimeStringAbbrevaite(shape, option, index, cfg) {\n  var nodes = cfg.nodes.nodes;\n  var campareText;\n\n  if (index === nodes.length - 1) {\n    campareText = nodes[index - 1].shape.get('delegateObject').item.name;\n  } else {\n    campareText = nodes[index + 1].shape.get('delegateObject').item.name;\n  }\n\n  var compare = new Date(campareText);\n  /** 获取时间周期和时间间隔 */\n\n  var text = shape.get('delegateObject').item.name;\n  var current = new Date(text);\n  var startText = nodes[0].shape.get('delegateObject').item.name;\n  var start = new Date(startText);\n  var endText = nodes[nodes.length - 1].shape.get('delegateObject').item.name;\n  var end = new Date(endText);\n  var timeDuration = getDateTimeMode(start, end);\n  var timeCycle = getDateTimeMode(current, compare); // time frequency\n  // 如果duration和frequency在同一区间\n\n  if (timeDuration === timeCycle) {\n    if (index !== 0 && index !== nodes.length - 1) {\n      var formatter = sameSectionFormatter(timeDuration);\n      shape.attr('text', fecha.format(current, formatter));\n    }\n\n    return;\n  }\n\n  if (index !== 0) {\n    var previousText = nodes[index - 1].shape.get('delegateObject').item.name;\n    var previous = new Date(previousText);\n    var isAbbreviate = needAbbrevaite(timeDuration, current, previous);\n\n    if (isAbbreviate) {\n      var formatter = getAbbrevaiteFormatter(timeDuration, timeCycle);\n      shape.attr('text', fecha.format(current, formatter));\n      return;\n    }\n  }\n}\n\nfunction needAbbrevaite(mode, current, previous) {\n  var currentStamp = getTime(current, mode);\n  var previousStamp = getTime(previous, mode);\n\n  if (currentStamp !== previousStamp) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction getDateTimeMode(a, b) {\n  var mode;\n  var dist = Math.abs(a - b);\n  var mapper = {\n    minute: [MINUTE, HOUR],\n    hour: [HOUR, DAY],\n    day: [DAY, MONTH],\n    month: [MONTH, YEAR],\n    year: [YEAR, Infinity]\n  };\n  each(mapper, function (range, key) {\n    if (dist >= range[0] && dist < range[1]) {\n      mode = key;\n    }\n  });\n  return mode;\n}\n\nfunction getAbbrevaiteFormatter(duration, cycle) {\n  var times = ['year', 'month', 'day', 'hour', 'minute'];\n  var formatters = ['YYYY', 'MM', 'DD', 'HH', 'MM'];\n  var startIndex = times.indexOf(duration) + 1;\n  var endIndex = times.indexOf(cycle);\n  var formatter = '';\n\n  for (var i = startIndex; i <= endIndex; i++) {\n    formatter += formatters[i];\n\n    if (i < endIndex) {\n      formatter += '-';\n    }\n  }\n\n  return formatter;\n}\n\nfunction sameSectionFormatter(mode) {\n  var times = ['year', 'month', 'day', 'hour', 'minute'];\n  var formatters = ['YYYY', 'MM', 'DD', 'HH', 'MM'];\n  var index = times.indexOf(mode);\n  var formatter = formatters[index];\n  return formatter;\n}\n\nfunction getTime(date, mode) {\n  if (mode === 'year') {\n    return date.getFullYear();\n  }\n\n  if (mode === 'month') {\n    return date.getMonth() + 1;\n  }\n\n  if (mode === 'day') {\n    return date.getDay() + 1;\n  }\n\n  if (mode === 'hour') {\n    return date.getHours() + 1;\n  }\n\n  if (mode === 'minute') {\n    return date.getMinutes() + 1;\n  }\n}\n/*tslint:disable*/\n\n\nexport function isTime(string) {\n  var hourminExp = /^(?:(?:[0-2][0-3])|(?:[01]\\d)):[0-5]\\d$/;\n  var hourminSecExp = /^(?:(?:[0-2][0-3])|(?:[01]\\d))(?::[0-5]\\d){2}$/;\n  return hourminExp.test(string) || hourminSecExp.test(string);\n}","map":{"version":3,"sources":["../../../../src/util/responsive/rules/datetime-string-abbrevaite.ts"],"names":[],"mappings":"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","sourcesContent":["import { each } from '@antv/util';\nimport fecha from 'fecha';\n\nconst SECOND = 1000;\nconst MINUTE = 60 * SECOND;\nconst HOUR = 60 * MINUTE;\nconst DAY = 24 * HOUR;\nconst MONTH = 31 * DAY;\nconst YEAR = 365 * DAY;\n\ninterface TimeStringAbbrevaiteCfg {\n  keep?: string[];\n}\n\nexport default function datetimeStringAbbrevaite(shape, option: TimeStringAbbrevaiteCfg, index, cfg) {\n  const nodes = cfg.nodes.nodes;\n  let campareText;\n  if (index === nodes.length - 1) {\n    campareText = nodes[index - 1].shape.get('delegateObject').item.name;\n  } else {\n    campareText = nodes[index + 1].shape.get('delegateObject').item.name;\n  }\n  const compare = new Date(campareText);\n  /** 获取时间周期和时间间隔 */\n  const text = shape.get('delegateObject').item.name;\n  const current = new Date(text);\n  const startText = nodes[0].shape.get('delegateObject').item.name;\n  const start = new Date(startText);\n  const endText = nodes[nodes.length - 1].shape.get('delegateObject').item.name;\n  const end = new Date(endText);\n  const timeDuration = getDateTimeMode(start, end);\n  const timeCycle = getDateTimeMode(current, compare); // time frequency\n  // 如果duration和frequency在同一区间\n  if (timeDuration === timeCycle) {\n    if (index !== 0 && index !== nodes.length - 1) {\n      const formatter = sameSectionFormatter(timeDuration);\n      shape.attr('text', fecha.format(current, formatter));\n    }\n    return;\n  }\n  if (index !== 0) {\n    const previousText = nodes[index - 1].shape.get('delegateObject').item.name;\n    const previous = new Date(previousText);\n    const isAbbreviate = needAbbrevaite(timeDuration, current, previous);\n    if (isAbbreviate) {\n      const formatter = getAbbrevaiteFormatter(timeDuration, timeCycle);\n      shape.attr('text', fecha.format(current, formatter));\n      return;\n    }\n  }\n}\n\nfunction needAbbrevaite(mode, current, previous) {\n  const currentStamp = getTime(current, mode);\n  const previousStamp = getTime(previous, mode);\n  if (currentStamp !== previousStamp) {\n    return false;\n  }\n  return true;\n}\n\nfunction getDateTimeMode(a, b) {\n  let mode;\n  const dist = Math.abs(a - b);\n  const mapper = {\n    minute: [MINUTE, HOUR],\n    hour: [HOUR, DAY],\n    day: [DAY, MONTH],\n    month: [MONTH, YEAR],\n    year: [YEAR, Infinity],\n  };\n  each(mapper, (range, key) => {\n    if (dist >= range[0] && dist < range[1]) {\n      mode = key;\n    }\n  });\n  return mode;\n}\n\nfunction getAbbrevaiteFormatter(duration, cycle) {\n  const times = ['year', 'month', 'day', 'hour', 'minute'];\n  const formatters = ['YYYY', 'MM', 'DD', 'HH', 'MM'];\n  const startIndex = times.indexOf(duration) + 1;\n  const endIndex = times.indexOf(cycle);\n  let formatter = '';\n  for (let i = startIndex; i <= endIndex; i++) {\n    formatter += formatters[i];\n    if (i < endIndex) {\n      formatter += '-';\n    }\n  }\n  return formatter;\n}\n\nfunction sameSectionFormatter(mode) {\n  const times = ['year', 'month', 'day', 'hour', 'minute'];\n  const formatters = ['YYYY', 'MM', 'DD', 'HH', 'MM'];\n  const index = times.indexOf(mode);\n  const formatter = formatters[index];\n  return formatter;\n}\n\nfunction getTime(date: Date, mode: string) {\n  if (mode === 'year') {\n    return date.getFullYear();\n  }\n  if (mode === 'month') {\n    return date.getMonth() + 1;\n  }\n  if (mode === 'day') {\n    return date.getDay() + 1;\n  }\n\n  if (mode === 'hour') {\n    return date.getHours() + 1;\n  }\n\n  if (mode === 'minute') {\n    return date.getMinutes() + 1;\n  }\n}\n\n/*tslint:disable*/\nexport function isTime(string) {\n  const hourminExp = /^(?:(?:[0-2][0-3])|(?:[01]\\d)):[0-5]\\d$/;\n  const hourminSecExp = /^(?:(?:[0-2][0-3])|(?:[01]\\d))(?::[0-5]\\d){2}$/;\n  return hourminExp.test(string) || hourminSecExp.test(string);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}