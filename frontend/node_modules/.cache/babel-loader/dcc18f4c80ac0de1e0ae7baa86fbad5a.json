{"ast":null,"code":"import { registerAnimation } from '../../../dependents';\nimport { get, clone } from '@antv/util';\nimport { transform } from '../../../util/g-util';\n\nfunction liquidMoveIn(shape, animateCfg) {\n  var container = shape.get('parent');\n  var box = container.getBBox();\n  var factor = Math.min(Math.max(0, get(animateCfg, 'factor', 0.5)), 1);\n  var delay = get(animateCfg, 'delay', 0);\n  var duration = get(animateCfg, 'duration', 800);\n  var callback = animateCfg.callback;\n  var originX = (box.minX + box.maxX) / 2;\n  var originY = box.maxY;\n  var wrap = container.find(function (shape) {\n    return shape.get('name') == 'wrap';\n  });\n  var wrapTargetOpacity = wrap.attr('opacity');\n  wrap.attr('opacity', 0);\n  wrap.animate({\n    opacity: wrapTargetOpacity\n  }, duration * factor, 'easeLinear', null, delay);\n  var waves = container.find(function (shape) {\n    return shape.get('name') == 'waves';\n  });\n  var wavesTargetMatrix = clone(waves.attr('matrix')) || [1, 0, 0, 0, 1, 0, 0, 0, 1];\n  var transformMatrix = transform(wavesTargetMatrix, [['t', -originX, -originY], ['s', 1, 0], ['t', originX, originY]]);\n  waves.setMatrix(transformMatrix);\n  waves.animate({\n    matrix: wavesTargetMatrix\n  }, duration, animateCfg.easing, function () {\n    return callback && callback(container, wrap, waves);\n  }, delay);\n}\n\nliquidMoveIn.animationName = 'liquidMoveIn';\nregisterAnimation('liquidMoveIn', liquidMoveIn);","map":{"version":3,"sources":["../../../../src/plots/liquid/animation/liquid-move-in.ts"],"names":[],"mappings":"AAAA,SAAS,iBAAT,QAAkC,qBAAlC;AACA,SAAS,GAAT,EAAc,KAAd,QAA2B,YAA3B;AACA,SAAS,SAAT,QAA0B,sBAA1B;;AAEA,SAAS,YAAT,CAAsB,KAAtB,EAA6B,UAA7B,EAAuC;AACrC,MAAM,SAAS,GAAG,KAAK,CAAC,GAAN,CAAU,QAAV,CAAlB;AACA,MAAM,GAAG,GAAG,SAAS,CAAC,OAAV,EAAZ;AACA,MAAM,MAAM,GAAG,IAAI,CAAC,GAAL,CAAS,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,GAAG,CAAC,UAAD,EAAa,QAAb,EAAuB,GAAvB,CAAf,CAAT,EAAsD,CAAtD,CAAf;AACA,MAAM,KAAK,GAAG,GAAG,CAAC,UAAD,EAAa,OAAb,EAAsB,CAAtB,CAAjB;AACA,MAAM,QAAQ,GAAG,GAAG,CAAC,UAAD,EAAa,UAAb,EAAyB,GAAzB,CAApB;AACQ,MAAA,QAAQ,GAAK,UAAU,CAAf,QAAR;AAER,MAAM,OAAO,GAAG,CAAC,GAAG,CAAC,IAAJ,GAAW,GAAG,CAAC,IAAhB,IAAwB,CAAxC;AACA,MAAM,OAAO,GAAG,GAAG,CAAC,IAApB;AAEA,MAAM,IAAI,GAAG,SAAS,CAAC,IAAV,CAAe,UAAC,KAAD,EAAM;AAAK,WAAA,KAAK,CAAC,GAAN,CAAU,MAAV,KAAA,MAAA;AAA2B,GAArD,CAAb;AACA,MAAM,iBAAiB,GAAG,IAAI,CAAC,IAAL,CAAU,SAAV,CAA1B;AACA,EAAA,IAAI,CAAC,IAAL,CAAU,SAAV,EAAqB,CAArB;AACA,EAAA,IAAI,CAAC,OAAL,CAAa;AAAE,IAAA,OAAO,EAAE;AAAX,GAAb,EAA6C,QAAQ,GAAG,MAAxD,EAAgE,YAAhE,EAA8E,IAA9E,EAAoF,KAApF;AACA,MAAM,KAAK,GAAG,SAAS,CAAC,IAAV,CAAe,UAAC,KAAD,EAAM;AAAK,WAAA,KAAK,CAAC,GAAN,CAAU,MAAV,KAAA,OAAA;AAA4B,GAAtD,CAAd;AACA,MAAM,iBAAiB,GAAG,KAAK,CAAC,KAAK,CAAC,IAAN,CAAW,QAAX,CAAD,CAAL,IAA+B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,CAAzD;AACA,MAAM,eAAe,GAAG,SAAS,CAAC,iBAAD,EAAoB,CACnD,CAAC,GAAD,EAAM,CAAC,OAAP,EAAgB,CAAC,OAAjB,CADmD,EAEnD,CAAC,GAAD,EAAM,CAAN,EAAS,CAAT,CAFmD,EAGnD,CAAC,GAAD,EAAM,OAAN,EAAe,OAAf,CAHmD,CAApB,CAAjC;AAKA,EAAA,KAAK,CAAC,SAAN,CAAgB,eAAhB;AACA,EAAA,KAAK,CAAC,OAAN,CACE;AAAE,IAAA,MAAM,EAAE;AAAV,GADF,EAEE,QAFF,EAGE,UAAU,CAAC,MAHb,EAIE,YAAA;AAAM,WAAA,QAAQ,IAAI,QAAQ,CAAC,SAAD,EAAY,IAAZ,EAApB,KAAoB,CAApB;AAA4C,GAJpD,EAKE,KALF;AAOD;;AACD,YAAY,CAAC,aAAb,GAA6B,cAA7B;AACA,iBAAiB,CAAC,cAAD,EAAiB,YAAjB,CAAjB","sourcesContent":["import { registerAnimation } from '../../../dependents';\nimport { get, clone } from '@antv/util';\nimport { transform } from '../../../util/g-util';\n\nfunction liquidMoveIn(shape, animateCfg) {\n  const container = shape.get('parent');\n  const box = container.getBBox();\n  const factor = Math.min(Math.max(0, get(animateCfg, 'factor', 0.5)), 1);\n  const delay = get(animateCfg, 'delay', 0);\n  const duration = get(animateCfg, 'duration', 800);\n  const { callback } = animateCfg;\n\n  const originX = (box.minX + box.maxX) / 2;\n  const originY = box.maxY;\n\n  const wrap = container.find((shape) => shape.get('name') == 'wrap');\n  const wrapTargetOpacity = wrap.attr('opacity');\n  wrap.attr('opacity', 0);\n  wrap.animate({ opacity: wrapTargetOpacity }, duration * factor, 'easeLinear', null, delay);\n  const waves = container.find((shape) => shape.get('name') == 'waves');\n  const wavesTargetMatrix = clone(waves.attr('matrix')) || [1, 0, 0, 0, 1, 0, 0, 0, 1];\n  const transformMatrix = transform(wavesTargetMatrix, [\n    ['t', -originX, -originY],\n    ['s', 1, 0],\n    ['t', originX, originY],\n  ]);\n  waves.setMatrix(transformMatrix);\n  waves.animate(\n    { matrix: wavesTargetMatrix },\n    duration,\n    animateCfg.easing,\n    () => callback && callback(container, wrap, waves),\n    delay\n  );\n}\nliquidMoveIn.animationName = 'liquidMoveIn';\nregisterAnimation('liquidMoveIn', liquidMoveIn);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}