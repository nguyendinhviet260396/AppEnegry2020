{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { deepMix, has, map, each, some } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport ViewLayer from '../../base/view-layer';\nimport { getGeom } from '../../geoms/factory';\nimport { extractScale, trySetScaleMinToZero } from '../../util/scale';\nimport { getPlotOption } from './animation/clipIn-with-data';\nimport responsiveMethods from './apply-responsive';\nimport '../../components/label/point';\nimport '../../components/label/point-auto';\nimport LineLabel from './component/label/line-label';\nimport * as EventParser from './event';\nimport MarkerPoint from '../../components/marker-point';\nimport './theme';\nimport './apply-responsive/theme';\nimport { LineActive, LineSelect } from './interaction/index';\nimport { getGeometryByType } from '../../util/view';\nvar GEOM_MAP = {\n  line: 'line',\n  point: 'point'\n};\n\nvar LineLayer =\n/** @class */\nfunction (_super) {\n  __extends(LineLayer, _super);\n\n  function LineLayer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'line';\n    _this.markerPoints = [];\n    return _this;\n  }\n\n  LineLayer.getDefaultOptions = function () {\n    return deepMix({}, _super.getDefaultOptions.call(this), {\n      connectNulls: false,\n      smooth: false,\n      lineSize: 2,\n      lineStyle: {\n        lineJoin: 'round',\n        lineCap: 'round'\n      },\n      point: {\n        visible: false,\n        size: 3,\n        shape: 'circle'\n      },\n      label: {\n        visible: false,\n        type: 'point'\n      },\n      legend: {\n        visible: true,\n        position: 'top-left',\n        wordSpacing: 4\n      },\n      tooltip: {\n        showContent: true,\n        crosshairs: {\n          line: {\n            style: {\n              stroke: 'rgba(0,0,0,0.45)'\n            }\n          }\n        }\n      },\n      markerPoints: []\n    });\n  };\n\n  LineLayer.prototype.afterRender = function () {\n    var _this = this;\n\n    var options = this.options;\n    this.renderLabel();\n\n    if (options.markerPoints) {\n      // 清空\n      each(this.markerPoints, function (markerPoint) {\n        return markerPoint.destroy();\n      });\n      this.markerPoints = [];\n      options.markerPoints.forEach(function (markerPointOpt) {\n        if (markerPointOpt.visible) {\n          var markerPoint = new MarkerPoint(__assign(__assign({}, markerPointOpt), {\n            view: _this.view\n          }));\n\n          _this.markerPoints.push(markerPoint);\n        }\n      });\n    } // 响应式\n\n\n    if (options.responsive && options.padding !== 'auto') {\n      this.applyResponsive('afterRender');\n    }\n\n    _super.prototype.afterRender.call(this);\n  };\n\n  LineLayer.prototype.getColorScale = function () {\n    var seriesField = this.options.seriesField;\n\n    if (seriesField) {\n      return this.view.getScaleByField(seriesField);\n    }\n  };\n\n  LineLayer.prototype.geometryParser = function (dim, type) {\n    return GEOM_MAP[type];\n  };\n\n  LineLayer.prototype.scale = function () {\n    var props = this.options;\n    var scales = {};\n    /** 配置x-scale */\n\n    scales[props.xField] = {};\n\n    if (has(props, 'xAxis')) {\n      extractScale(scales[props.xField], props.xAxis);\n    }\n    /** 配置y-scale */\n\n\n    scales[props.yField] = {};\n\n    if (has(props, 'yAxis')) {\n      extractScale(scales[props.yField], props.yAxis);\n    }\n\n    this.setConfig('scales', scales);\n    trySetScaleMinToZero(scales[props.yField], map(props.data || [], function (item) {\n      return item[props.yField];\n    }));\n\n    _super.prototype.scale.call(this);\n  };\n\n  LineLayer.prototype.coord = function () {\n    return;\n  };\n\n  LineLayer.prototype.tooltip = function () {\n    // 如果有标注点，则不展示markers\n    if (some(this.options.markerPoints, function (markerPointOpt) {\n      return markerPointOpt.visible;\n    })) {\n      this.options.tooltip.showMarkers = false;\n    }\n\n    _super.prototype.tooltip.call(this);\n  };\n\n  LineLayer.prototype.addGeometry = function () {\n    // 配置线\n    this.addLine(); // 配置数据点\n\n    this.addPoint();\n  };\n\n  LineLayer.prototype.addLine = function () {\n    var props = this.options;\n    this.line = getGeom('line', 'main', {\n      plot: this\n    });\n\n    if (props.tooltip && (props.tooltip.fields || props.tooltip.formatter)) {\n      this.geometryTooltip();\n    }\n\n    this.setConfig('geometry', this.line);\n  };\n\n  LineLayer.prototype.addPoint = function () {\n    var props = this.options;\n    var defaultConfig = {\n      visible: false\n    };\n\n    if (props.point) {\n      props.point = deepMix(defaultConfig, props.point);\n    }\n\n    if (props.point && props.point.visible) {\n      this.point = getGeom('point', 'guide', {\n        plot: this\n      });\n      this.setConfig('geometry', this.point);\n    }\n  };\n\n  LineLayer.prototype.renderLabel = function () {\n    var scales = this.config.scales;\n    var _a = this.options,\n        label = _a.label,\n        yField = _a.yField;\n    var scale = scales[yField];\n\n    if (label.visible) {\n      var geometry = getGeometryByType(this.view, 'line');\n\n      if (label.type === 'line') {\n        // TODO: Line Label 迁移\n        var label_1 = new LineLabel(__assign({\n          view: this.view,\n          plot: this\n        }, this.options.label));\n        label_1.render();\n      } else {\n        this.doRenderLabel(geometry, __assign({\n          type: 'point',\n          formatter: scale.formatter && function (value) {\n            return scale.formatter(value);\n          }\n        }, this.options.label));\n      }\n    }\n  };\n\n  LineLayer.prototype.geometryTooltip = function () {\n    this.line.tooltip = {};\n    var tooltipOptions = this.options.tooltip;\n\n    if (tooltipOptions.fields) {\n      this.line.tooltip.fields = tooltipOptions.fields;\n    }\n\n    if (tooltipOptions.formatter) {\n      this.line.tooltip.callback = tooltipOptions.formatter;\n\n      if (!tooltipOptions.fields) {\n        this.line.tooltip.fields = [this.options.xField, this.options.yField];\n\n        if (this.options.seriesField) {\n          this.line.tooltip.fields.push(this.options.seriesField);\n        }\n      }\n    }\n  };\n\n  LineLayer.prototype.animation = function () {\n    _super.prototype.animation.call(this);\n\n    var props = this.options;\n\n    if (!props.animation) {\n      // 关闭动画\n      this.line.animate = false;\n      if (this.point) this.point.animate = false;\n    } else {\n      getPlotOption({\n        options: this.options,\n        view: this.view\n      });\n      this.line.animate = props.animation;\n    }\n  };\n\n  LineLayer.prototype.applyInteractions = function () {\n    _super.prototype.applyInteractions.call(this);\n\n    this.interactions.push(new LineActive({\n      view: this.view\n    }));\n    this.interactions.push(new LineSelect({\n      view: this.view\n    }));\n  };\n\n  LineLayer.prototype.parseEvents = function () {\n    _super.prototype.parseEvents.call(this, EventParser);\n  };\n\n  LineLayer.prototype.applyResponsive = function (stage) {\n    var _this = this;\n\n    var methods = responsiveMethods[stage];\n    each(methods, function (r) {\n      var responsive = r;\n      responsive.method(_this);\n    });\n  };\n\n  LineLayer.prototype.singleLineLabelCheck = function () {\n    // 不允许单折线设置尾部跟随label\n    return !this.options.seriesField && this.options.label.type && this.options.label.type === 'line';\n  };\n\n  return LineLayer;\n}(ViewLayer);\n\nexport default LineLayer;\nregisterPlotType('line', LineLayer);","map":{"version":3,"sources":["../../../src/plots/line/layer.ts"],"names":[],"mappings":"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","sourcesContent":["import { deepMix, has, map, each, some } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport { LayerConfig } from '../../base/layer';\nimport ViewLayer, { ViewConfig } from '../../base/view-layer';\nimport { getGeom } from '../../geoms/factory';\nimport {\n  ICatAxis,\n  ITimeAxis,\n  IValueAxis,\n  GraphicStyle,\n  LineStyle,\n  ISliderInteractionConfig,\n  IScrollbarInteractionConfig,\n  IInteractions,\n} from '../../interface/config';\nimport { extractScale, trySetScaleMinToZero } from '../../util/scale';\nimport { getPlotOption } from './animation/clipIn-with-data';\nimport responsiveMethods from './apply-responsive';\nimport '../../components/label/point';\nimport '../../components/label/point-auto';\nimport LineLabel from './component/label/line-label';\nimport * as EventParser from './event';\nimport MarkerPoint, { MarkerPointCfg } from '../../components/marker-point';\nimport './theme';\nimport './apply-responsive/theme';\nimport { LooseMap, Maybe } from '../../interface/types';\nimport { LineActive, LineSelect } from './interaction/index';\nimport { getGeometryByType } from '../../util/view';\n\ntype IObject = LooseMap;\n\nconst GEOM_MAP = {\n  line: 'line',\n  point: 'point',\n};\n\ntype LineInteraction =\n  | IInteractions\n  | { type: 'selected-tooltip' }\n  | { type: 'slider'; cfg: ISliderInteractionConfig }\n  | { type: 'scrollbar'; cfg?: IScrollbarInteractionConfig };\n\nexport type PointShape = string | { fields?: []; callback: () => string };\n\nexport interface LineViewConfig extends ViewConfig {\n  /** 分组字段 */\n  seriesField?: string;\n  /** 是否平滑 */\n  smooth?: boolean;\n  /** 是否连接空数据 */\n  connectNulls?: boolean;\n  /** 折线extra图形样式 */\n  lineStyle?: LineStyle | ((...args: any[]) => LineStyle);\n  /** 折线数据点图形样式 */\n  point?: {\n    visible?: boolean;\n    shape?: PointShape;\n    size?: number;\n    color?: string;\n    style?: GraphicStyle;\n  };\n  markerPoints?: (Omit<MarkerPointCfg, 'view'> & {\n    visible?: boolean;\n  })[];\n  xAxis?: IValueAxis | ICatAxis | ITimeAxis;\n  yAxis?: IValueAxis;\n  interactions?: LineInteraction[];\n}\n\nexport interface LineLayerConfig extends LineViewConfig, LayerConfig {}\n\nexport default class LineLayer<T extends LineLayerConfig = LineLayerConfig> extends ViewLayer<T> {\n  public static getDefaultOptions(): Partial<LineLayerConfig> {\n    return deepMix({}, super.getDefaultOptions(), {\n      connectNulls: false,\n      smooth: false,\n      lineSize: 2,\n      lineStyle: {\n        lineJoin: 'round',\n        lineCap: 'round',\n      },\n      point: {\n        visible: false,\n        size: 3,\n        shape: 'circle',\n      },\n      label: {\n        visible: false,\n        type: 'point',\n      },\n      legend: {\n        visible: true,\n        position: 'top-left',\n        wordSpacing: 4,\n      },\n      tooltip: {\n        showContent: true,\n        crosshairs: {\n          line: {\n            style: {\n              stroke: 'rgba(0,0,0,0.45)',\n            },\n          },\n        },\n      },\n      markerPoints: [],\n    });\n  }\n\n  public line: any; // 保存line和point的配置项，用于后续的label、tooltip\n  public point: any;\n  public type: string = 'line';\n  protected markerPoints: MarkerPoint[] = [];\n\n  public afterRender() {\n    const options = this.options;\n    this.renderLabel();\n    if (options.markerPoints) {\n      // 清空\n      each(this.markerPoints, (markerPoint: MarkerPoint) => markerPoint.destroy());\n      this.markerPoints = [];\n      options.markerPoints.forEach((markerPointOpt) => {\n        if (markerPointOpt.visible) {\n          const markerPoint = new MarkerPoint({\n            ...markerPointOpt,\n            view: this.view,\n          });\n          this.markerPoints.push(markerPoint);\n        }\n      });\n    }\n    // 响应式\n    if (options.responsive && options.padding !== 'auto') {\n      this.applyResponsive('afterRender');\n    }\n    super.afterRender();\n  }\n\n  public getColorScale() {\n    const { seriesField } = this.options;\n    if (seriesField) {\n      return this.view.getScaleByField(seriesField);\n    }\n  }\n\n  protected geometryParser(dim, type) {\n    return GEOM_MAP[type];\n  }\n\n  protected scale() {\n    const props = this.options;\n    const scales = {};\n    /** 配置x-scale */\n    scales[props.xField] = {};\n    if (has(props, 'xAxis')) {\n      extractScale(scales[props.xField], props.xAxis);\n    }\n    /** 配置y-scale */\n    scales[props.yField] = {};\n    if (has(props, 'yAxis')) {\n      extractScale(scales[props.yField], props.yAxis);\n    }\n    this.setConfig('scales', scales);\n    trySetScaleMinToZero(\n      scales[props.yField],\n      map(props.data || [], (item) => item[props.yField])\n    );\n    super.scale();\n  }\n\n  protected coord() {\n    return;\n  }\n\n  protected tooltip() {\n    // 如果有标注点，则不展示markers\n    if (some(this.options.markerPoints, (markerPointOpt) => markerPointOpt.visible)) {\n      this.options.tooltip.showMarkers = false;\n    }\n    super.tooltip();\n  }\n\n  protected addGeometry() {\n    // 配置线\n    this.addLine();\n    // 配置数据点\n    this.addPoint();\n  }\n\n  private addLine() {\n    const props: any = this.options;\n    this.line = getGeom('line', 'main', {\n      plot: this,\n    });\n\n    if (props.tooltip && (props.tooltip.fields || props.tooltip.formatter)) {\n      this.geometryTooltip();\n    }\n\n    this.setConfig('geometry', this.line);\n  }\n\n  protected addPoint() {\n    const props = this.options;\n    const defaultConfig = { visible: false };\n    if (props.point) {\n      props.point = deepMix(defaultConfig, props.point);\n    }\n    if (props.point && props.point.visible) {\n      this.point = getGeom('point', 'guide', {\n        plot: this,\n      });\n      this.setConfig('geometry', this.point);\n    }\n  }\n\n  protected renderLabel() {\n    const { scales } = this.config;\n    const { label, yField } = this.options;\n    const scale = scales[yField];\n    if (label.visible) {\n      const geometry = getGeometryByType(this.view, 'line');\n      if (label.type === 'line') {\n        // TODO: Line Label 迁移\n        const label = new LineLabel({\n          view: this.view,\n          plot: this,\n          ...this.options.label,\n        });\n        label.render();\n      } else {\n        this.doRenderLabel(geometry, {\n          type: 'point',\n          formatter: scale.formatter && ((value: Maybe<string | number>) => scale.formatter(value)),\n          ...this.options.label,\n        });\n      }\n    }\n  }\n\n  protected geometryTooltip() {\n    this.line.tooltip = {};\n    const tooltipOptions: any = this.options.tooltip;\n    if (tooltipOptions.fields) {\n      this.line.tooltip.fields = tooltipOptions.fields;\n    }\n    if (tooltipOptions.formatter) {\n      this.line.tooltip.callback = tooltipOptions.formatter;\n      if (!tooltipOptions.fields) {\n        this.line.tooltip.fields = [this.options.xField, this.options.yField];\n        if (this.options.seriesField) {\n          this.line.tooltip.fields.push(this.options.seriesField);\n        }\n      }\n    }\n  }\n\n  protected animation() {\n    super.animation();\n    const props = this.options;\n    if (!props.animation) {\n      // 关闭动画\n      this.line.animate = false;\n      if (this.point) this.point.animate = false;\n    } else {\n      getPlotOption({\n        options: this.options,\n        view: this.view,\n      });\n      this.line.animate = props.animation;\n    }\n  }\n\n  protected applyInteractions() {\n    super.applyInteractions();\n    this.interactions.push(\n      new LineActive({\n        view: this.view,\n      })\n    );\n    this.interactions.push(\n      new LineSelect({\n        view: this.view,\n      })\n    );\n  }\n\n  protected parseEvents() {\n    super.parseEvents(EventParser);\n  }\n\n  private applyResponsive(stage) {\n    const methods = responsiveMethods[stage];\n    each(methods, (r) => {\n      const responsive = r as IObject;\n      responsive.method(this);\n    });\n  }\n\n  private singleLineLabelCheck() {\n    // 不允许单折线设置尾部跟随label\n    return !this.options.seriesField && this.options.label.type && this.options.label.type === 'line';\n  }\n}\n\nregisterPlotType('line', LineLayer);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}