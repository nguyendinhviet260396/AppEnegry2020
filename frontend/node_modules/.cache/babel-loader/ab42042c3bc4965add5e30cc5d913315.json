{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { assign, isArray, each, mix } from '@antv/util';\nimport { breakText } from '../util/common';\nimport BBox from '../util/bbox';\n/**\n * 图表的文字描述，一般用于生成图表的标题和副标题\n */\n\nvar TextDescription =\n/** @class */\nfunction () {\n  function TextDescription(cfg) {\n    this.position = 'top';\n    this.destroyed = false;\n    assign(this, cfg);\n    this.init();\n  }\n\n  TextDescription.prototype.getBBox = function () {\n    var _this = this;\n\n    if (this.shape) {\n      // @ts-ignore\n      var bbox = this.shape.getBBox();\n\n      if (this.index === 0) {\n        return BBox.fromBBoxObject(bbox);\n      }\n\n      var padding_1 = this.plot.theme.description.padding;\n\n      if (isArray(padding_1)) {\n        each(padding_1, function (it, index) {\n          if (typeof padding_1[index] === 'function') {\n            padding_1[index] = padding_1[index](_this.plot.options.legend.position);\n          }\n        });\n      }\n\n      return new BBox(bbox.maxX, bbox.minY, bbox.width, bbox.height);\n    }\n\n    return null;\n  };\n\n  TextDescription.prototype.clear = function () {\n    if (this.shape) {\n      // @ts-ignore\n      this.shape.attr('text', '');\n    }\n  };\n\n  TextDescription.prototype.destroy = function () {\n    if (this.shape) {\n      this.shape.remove();\n    }\n\n    this.destroyed = true;\n  };\n\n  TextDescription.prototype.init = function () {\n    var content = this.textWrapper();\n\n    var _a = this.getPosition(),\n        x = _a.x,\n        y = _a.y;\n\n    this.shape = this.container.addShape('text', {\n      attrs: mix({\n        x: x,\n        y: y,\n        text: content\n      }, this.style, {\n        textAlign: this.getTextAlign()\n      })\n    }); // @ts-ignore\n\n    this.shape.name = this.name;\n  };\n\n  TextDescription.prototype.getPosition = function () {\n    if (this.alignTo === 'left') {\n      return {\n        x: this.leftMargin,\n        y: this.topMargin\n      };\n    } else if (this.alignTo === 'middle') {\n      return {\n        x: this.leftMargin + this.wrapperWidth / 2,\n        y: this.topMargin\n      };\n    } else {\n      return {\n        x: this.rightMargin,\n        y: this.topMargin\n      };\n    }\n  };\n\n  TextDescription.prototype.getTextAlign = function () {\n    if (this.alignTo === 'left') {\n      return 'left';\n    } else if (this.alignTo === 'middle') {\n      return 'center';\n    } else {\n      return 'right';\n    }\n  };\n  /**\n   * 当text过长时，默认换行\n   * 1. 注意初始text带换行符的场景\n   */\n\n\n  TextDescription.prototype.textWrapper = function () {\n    var width = this.wrapperWidth;\n    var style = this.style;\n    var textContent = this.text;\n    var tShape = this.container.addShape('text', {\n      attrs: __assign({\n        text: '',\n        x: 0,\n        y: 0\n      }, style)\n    });\n    var textArr = textContent.split('\\n');\n    var wrappedTextArr = textArr.map(function (wrappedText) {\n      var text = '';\n      var chars = wrappedText.split('');\n      var breakIndex = [];\n\n      for (var i = 0; i < chars.length; i++) {\n        var item = chars[i];\n        tShape.attr('text', text += item);\n        var currentWidth = tShape.getBBox().width - 1;\n\n        if (currentWidth > width) {\n          // 如果是第一个字符就大于宽度不做任何换行处理\n          if (i === 0) {\n            break;\n          }\n\n          breakIndex.push(i);\n          text = '';\n        }\n      }\n\n      return breakText(chars, breakIndex);\n    });\n    tShape.remove();\n    return wrappedTextArr.join('\\n');\n  };\n\n  return TextDescription;\n}();\n\nexport default TextDescription;","map":{"version":3,"sources":["../../src/components/description.ts"],"names":[],"mappings":"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","sourcesContent":["import { IGroup, IShape } from '../dependents';\nimport { assign, isArray, each, mix } from '@antv/util';\nimport { breakText } from '../util/common';\nimport ViewLayer from '../base/view-layer';\nimport BBox from '../util/bbox';\n\ninterface TextConfig {\n  leftMargin: number;\n  topMargin: number;\n  rightMargin: number;\n  text: string;\n  style: any;\n  wrapperWidth: number;\n  container: IGroup;\n  theme: any;\n  index: number;\n  plot: ViewLayer;\n  name: string;\n  alignTo?: 'left' | 'right' | 'middle';\n}\n\n/**\n * 图表的文字描述，一般用于生成图表的标题和副标题\n */\n\nexport default class TextDescription {\n  public shape: IShape;\n  public position: string = 'top';\n  public name: string;\n  public destroyed: boolean = false;\n  private container: IGroup;\n  private topMargin: number;\n  private leftMargin: number;\n  private rightMargin: number;\n  private wrapperWidth: number;\n  private alignTo: string;\n  private text: string;\n  private style: any;\n  private index: number;\n  private plot: ViewLayer | any;\n\n  constructor(cfg: TextConfig) {\n    assign(this as any, cfg);\n    this.init();\n  }\n\n  public getBBox(): BBox | null {\n    if (this.shape) {\n      // @ts-ignore\n      const bbox = this.shape.getBBox();\n      if (this.index === 0) {\n        return BBox.fromBBoxObject(bbox);\n      }\n      const padding = this.plot.theme.description.padding;\n      if (isArray(padding)) {\n        each(padding, (it, index) => {\n          if (typeof padding[index] === 'function') {\n            padding[index] = padding[index](this.plot.options.legend.position);\n          }\n        });\n      }\n      return new BBox(bbox.maxX, bbox.minY, bbox.width, bbox.height);\n    }\n    return null;\n  }\n\n  public clear() {\n    if (this.shape) {\n      // @ts-ignore\n      this.shape.attr('text', '');\n    }\n  }\n\n  public destroy() {\n    if (this.shape) {\n      this.shape.remove();\n    }\n    this.destroyed = true;\n  }\n\n  private init() {\n    const content = this.textWrapper();\n    const { x, y } = this.getPosition();\n    this.shape = this.container.addShape('text', {\n      attrs: mix(\n        {\n          x,\n          y,\n          text: content,\n        },\n        this.style,\n        {\n          textAlign: this.getTextAlign(),\n        }\n      ),\n    }) as IShape;\n    // @ts-ignore\n    this.shape.name = this.name;\n  }\n\n  protected getPosition() {\n    if (this.alignTo === 'left') {\n      return { x: this.leftMargin, y: this.topMargin };\n    } else if (this.alignTo === 'middle') {\n      return { x: this.leftMargin + this.wrapperWidth / 2, y: this.topMargin };\n    } else {\n      return { x: this.rightMargin, y: this.topMargin };\n    }\n  }\n\n  protected getTextAlign() {\n    if (this.alignTo === 'left') {\n      return 'left';\n    } else if (this.alignTo === 'middle') {\n      return 'center';\n    } else {\n      return 'right';\n    }\n  }\n\n  /**\n   * 当text过长时，默认换行\n   * 1. 注意初始text带换行符的场景\n   */\n  private textWrapper() {\n    const width = this.wrapperWidth;\n    const style = this.style;\n    const textContent: string = this.text;\n    const tShape = this.container.addShape('text', {\n      attrs: {\n        text: '',\n        x: 0,\n        y: 0,\n        ...style,\n      },\n    });\n    const textArr = textContent.split('\\n');\n    const wrappedTextArr = textArr.map((wrappedText) => {\n      let text = '';\n      const chars = wrappedText.split('');\n      const breakIndex: number[] = [];\n      for (let i = 0; i < chars.length; i++) {\n        const item = chars[i];\n        tShape.attr('text', (text += item));\n        const currentWidth = tShape.getBBox().width - 1;\n        if (currentWidth > width) {\n          // 如果是第一个字符就大于宽度不做任何换行处理\n          if (i === 0) {\n            break;\n          }\n          breakIndex.push(i);\n          text = '';\n        }\n      }\n\n      return breakText(chars, breakIndex);\n    });\n\n    tShape.remove();\n    return wrappedTextArr.join('\\n');\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}