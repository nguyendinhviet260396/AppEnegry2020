{"ast":null,"code":"import { __assign, __extends, __rest } from \"tslib\";\nimport { contains, deepMix, each, get, isArray, isFunction, isNil, isString, keys, upperFirst } from '@antv/util';\nimport { Annotation as AnnotationComponent } from '../../dependents';\nimport { DEFAULT_ANIMATE_CFG } from '../../animate/';\nimport { COMPONENT_TYPE, DIRECTION, LAYER, VIEW_LIFE_CIRCLE } from '../../constant';\nimport { getAngleByPoint, getDistanceToCenter } from '../../util/coordinate';\nimport { omit } from '../../util/helper';\nimport { Controller } from './base';\n/**\n * Annotation controller, 主要作用:\n * 1. 创建 Annotation: line、text、arc ...\n * 2. 生命周期: init、layout、render、clear、destroy\n */\n\nvar Annotation =\n/** @class */\nfunction (_super) {\n  __extends(Annotation, _super);\n\n  function Annotation(view) {\n    var _this = _super.call(this, view) || this;\n    /* 组件更新的 cache，组件配置 object : 组件 */\n\n\n    _this.cache = new Map();\n    _this.foregroundContainer = _this.view.getLayer(LAYER.FORE).addGroup();\n    _this.backgroundContainer = _this.view.getLayer(LAYER.BG).addGroup();\n    _this.option = [];\n    return _this;\n  }\n\n  Object.defineProperty(Annotation.prototype, \"name\", {\n    get: function () {\n      return 'annotation';\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Annotation.prototype.init = function () {};\n\n  Annotation.prototype.layout = function () {\n    var _this = this;\n\n    var components = this.getComponents();\n\n    var updateComponentFn = function (co) {\n      var component = co.component,\n          extra = co.extra;\n      var type = extra.type;\n\n      var theme = _this.getAnnotationTheme(type);\n\n      component.update(_this.getAnnotationCfg(type, extra, theme));\n    };\n\n    var createComponentFn = function (option) {\n      var co = _this.createAnnotation(option);\n\n      if (co) {\n        co.component.init(); // Note：regionFilter 特殊处理，regionFilter需要取到 Geometry 中的 Shape，需要在 view render 之后处理\n        // 其他组件使用外层的统一 render 逻辑\n\n        if (option.type === 'regionFilter') {\n          co.component.render();\n        } // 缓存起来\n\n\n        _this.cache.set(option, co);\n      }\n    };\n\n    if (components.length) {\n      each(components, function (co) {\n        var component = co.component;\n\n        if (component.get('type') === 'regionFilter') {\n          // regionFilter 依赖绘制后的 Geometry Shapes\n          _this.view.getRootView().once(VIEW_LIFE_CIRCLE.AFTER_RENDER, function () {\n            updateComponentFn(co);\n          });\n        } else {\n          updateComponentFn(co);\n        }\n      });\n    } else {\n      each(this.option, function (option) {\n        if (option.type === 'regionFilter') {\n          _this.view.getRootView().once(VIEW_LIFE_CIRCLE.AFTER_RENDER, function () {\n            // regionFilter 依赖绘制后的 Geometry Shapes\n            createComponentFn(option);\n          });\n        } else {\n          createComponentFn(option);\n        }\n      });\n    }\n  };\n\n  Annotation.prototype.render = function () {// 因为 Annotation 不参与布局，但是渲染的位置依赖于坐标系，所以可以将绘制阶段延迟到 layout() 进行\n  };\n  /**\n   * 更新\n   */\n\n\n  Annotation.prototype.update = function () {\n    var _this = this; // 已经处理过的 legend\n\n\n    var updated = new WeakMap();\n\n    var updateComponentFn = function (option) {\n      var type = option.type;\n\n      var theme = _this.getAnnotationTheme(type);\n\n      var cfg = _this.getAnnotationCfg(type, option, theme);\n\n      var existCo = _this.cache.get(option); // 存在，则更新\n\n\n      if (existCo) {\n        // 忽略掉一些配置\n        omit(cfg, ['container']);\n        existCo.component.update(cfg);\n        updated.set(option, true);\n      } else {\n        // 不存在，则创建\n        var co = _this.createAnnotation(option);\n\n        if (co) {\n          co.component.init(); // Note：regionFilter 特殊处理，regionFilter需要取到 Geometry 中的 Shape，需要在 view render 之后处理\n          // 其他组件使用外层的统一 render 逻辑\n\n          if (option.type === 'regionFilter') {\n            co.component.render();\n          } // 缓存起来\n\n\n          _this.cache.set(option, co);\n\n          updated.set(option, true);\n        }\n      }\n    };\n\n    this.view.once(VIEW_LIFE_CIRCLE.AFTER_RENDER, function () {\n      // 先看是否有 regionFilter 要更新\n      each(_this.option, function (option) {\n        if (option.type === 'regionFilter') {\n          updateComponentFn(option);\n        }\n      }); // 处理完成之后，销毁删除的\n      // 不在处理中的\n\n      var newCache = new Map();\n\n      _this.cache.forEach(function (value, key) {\n        if (updated.has(key)) {\n          newCache.set(key, value);\n        } else {\n          // 不存在，则是所有需要被销毁的组件\n          value.component.destroy();\n        }\n      }); // 更新缓存\n\n\n      _this.cache = newCache;\n    });\n    each(this.option, function (option) {\n      if (option.type !== 'regionFilter') {\n        updateComponentFn(option);\n      }\n    });\n  };\n  /**\n   * 清空\n   * @param includeOption 是否清空 option 配置项\n   */\n\n\n  Annotation.prototype.clear = function (includeOption) {\n    if (includeOption === void 0) {\n      includeOption = false;\n    }\n\n    _super.prototype.clear.call(this);\n\n    this.cache.clear();\n    this.foregroundContainer.clear();\n    this.backgroundContainer.clear(); // clear all option\n\n    if (includeOption) {\n      this.option = [];\n    }\n  };\n\n  Annotation.prototype.destroy = function () {\n    this.clear(true);\n    this.foregroundContainer.remove(true);\n    this.backgroundContainer.remove(true);\n  };\n  /**\n   * 复写基类的方法\n   */\n\n\n  Annotation.prototype.getComponents = function () {\n    var co = [];\n    this.cache.forEach(function (value) {\n      co.push(value);\n    });\n    return co;\n  };\n\n  Annotation.prototype.createAnnotation = function (option) {\n    var type = option.type;\n    var Ctor = AnnotationComponent[upperFirst(type)];\n\n    if (Ctor) {\n      var theme = this.getAnnotationTheme(type);\n      var cfg = this.getAnnotationCfg(type, option, theme);\n      var annotation = new Ctor(cfg);\n      return {\n        component: annotation,\n        layer: this.isTop(cfg) ? LAYER.FORE : LAYER.BG,\n        direction: DIRECTION.NONE,\n        type: COMPONENT_TYPE.ANNOTATION,\n        extra: option\n      };\n    }\n  }; // APIs for creating annotation component\n\n\n  Annotation.prototype.annotation = function (option) {\n    this.option.push(option);\n  };\n  /**\n   * 创建 Arc\n   * @param option\n   * @returns AnnotationController\n   */\n\n\n  Annotation.prototype.arc = function (option) {\n    this.annotation(__assign({\n      type: 'arc'\n    }, option));\n    return this;\n  };\n  /**\n   * 创建 image\n   * @param option\n   * @returns AnnotationController\n   */\n\n\n  Annotation.prototype.image = function (option) {\n    this.annotation(__assign({\n      type: 'image'\n    }, option));\n    return this;\n  };\n  /**\n   * 创建 Line\n   * @param option\n   * @returns AnnotationController\n   */\n\n\n  Annotation.prototype.line = function (option) {\n    this.annotation(__assign({\n      type: 'line'\n    }, option));\n    return this;\n  };\n  /**\n   * 创建 Region\n   * @param option\n   * @returns AnnotationController\n   */\n\n\n  Annotation.prototype.region = function (option) {\n    this.annotation(__assign({\n      type: 'region'\n    }, option));\n    return this;\n  };\n  /**\n   * 创建 Text\n   * @param option\n   * @returns AnnotationController\n   */\n\n\n  Annotation.prototype.text = function (option) {\n    this.annotation(__assign({\n      type: 'text'\n    }, option));\n    return this;\n  };\n  /**\n   * 创建 DataMarker\n   * @param option\n   * @returns AnnotationController\n   */\n\n\n  Annotation.prototype.dataMarker = function (option) {\n    this.annotation(__assign({\n      type: 'dataMarker'\n    }, option));\n    return this;\n  };\n  /**\n   * 创建 DataRegion\n   * @param option\n   * @returns AnnotationController\n   */\n\n\n  Annotation.prototype.dataRegion = function (option) {\n    this.annotation(__assign({\n      type: 'dataRegion'\n    }, option));\n  };\n  /**\n   * 创建 RegionFilter\n   * @param option\n   * @returns AnnotationController\n   */\n\n\n  Annotation.prototype.regionFilter = function (option) {\n    this.annotation(__assign({\n      type: 'regionFilter'\n    }, option));\n  }; // end API\n\n  /**\n   * parse the point position to [x, y]\n   * @param p Position\n   * @returns { x, y }\n   */\n\n\n  Annotation.prototype.parsePosition = function (p) {\n    var xScale = this.view.getXScale(); // 转成 object\n\n    var yScales = this.view.getScalesByDim('y');\n    var position = isFunction(p) ? p.call(null, xScale, yScales) : p;\n    var x = 0;\n    var y = 0; // 入参是 [24, 24] 这类时\n\n    if (isArray(position)) {\n      var xPos = position[0],\n          yPos = position[1]; // 如果数据格式是 ['50%', '50%'] 的格式\n      // fix: 原始数据中可能会包含 'xxx5%xxx' 这样的数据，需要判断下 https://github.com/antvis/f2/issues/590\n      // @ts-ignore\n\n      if (isString(xPos) && xPos.indexOf('%') !== -1 && !isNaN(xPos.slice(0, -1))) {\n        return this.parsePercentPosition(position);\n      }\n\n      x = this.getNormalizedValue(xPos, xScale);\n      y = this.getNormalizedValue(yPos, Object.values(yScales)[0]);\n    } else if (!isNil(position)) {\n      // 入参是 object 结构，数据点\n      for (var _i = 0, _a = keys(position); _i < _a.length; _i++) {\n        var key = _a[_i];\n        var value = position[key];\n\n        if (key === xScale.field) {\n          x = this.getNormalizedValue(value, xScale);\n        }\n\n        if (yScales[key]) {\n          y = this.getNormalizedValue(value, yScales[key]);\n        }\n      }\n    }\n\n    return this.view.getCoordinate().convert({\n      x: x,\n      y: y\n    });\n  };\n  /**\n   * parse all the points between start and end\n   * @param start\n   * @param end\n   * @return Point[]\n   */\n\n\n  Annotation.prototype.getRegionPoints = function (start, end) {\n    var _this = this;\n\n    var xScale = this.view.getXScale();\n    var yScales = this.view.getScalesByDim('y');\n    var yScale = Object.values(yScales)[0];\n    var xField = xScale.field;\n    var viewData = this.view.getData();\n    var startXValue = isArray(start) ? start[0] : start[xField];\n    var endXValue = isArray(end) ? end[0] : end[xField];\n    var arr = [];\n    var startIndex;\n    each(viewData, function (item, idx) {\n      if (item[xField] === startXValue) {\n        startIndex = idx;\n      }\n\n      if (idx >= startIndex) {\n        var point = _this.parsePosition([item[xField], item[yScale.field]]);\n\n        if (point) {\n          arr.push(point);\n        }\n      }\n\n      if (item[xField] === endXValue) {\n        return false;\n      }\n    });\n    return arr;\n  };\n  /**\n   * parse the value position\n   * @param val\n   * @param scale\n   */\n\n\n  Annotation.prototype.getNormalizedValue = function (val, scale) {\n    var result;\n    var scaled;\n\n    switch (val) {\n      case 'start':\n        result = 0;\n        break;\n\n      case 'end':\n        result = 1;\n        break;\n\n      case 'median':\n        {\n          scaled = scale.isCategory ? (scale.values.length - 1) / 2 : (scale.min + scale.max) / 2;\n          result = scale.scale(scaled);\n          break;\n        }\n\n      case 'min':\n      case 'max':\n        if (scale.isCategory) {\n          scaled = val === 'min' ? 0 : scale.values.length - 1;\n        } else {\n          scaled = scale[val];\n        }\n\n        result = scale.scale(scaled);\n        break;\n\n      default:\n        result = scale.scale(val);\n    }\n\n    return result;\n  };\n  /**\n   * parse percent position\n   * @param position\n   */\n\n\n  Annotation.prototype.parsePercentPosition = function (position) {\n    var xPercent = parseFloat(position[0]) / 100;\n    var yPercent = parseFloat(position[1]) / 100;\n    var coordinate = this.view.getCoordinate();\n    var start = coordinate.start,\n        end = coordinate.end;\n    var topLeft = {\n      x: Math.min(start.x, end.x),\n      y: Math.min(start.y, end.y)\n    };\n    var x = coordinate.getWidth() * xPercent + topLeft.x;\n    var y = coordinate.getHeight() * yPercent + topLeft.y;\n    return {\n      x: x,\n      y: y\n    };\n  };\n  /**\n   * get coordinate bbox\n   */\n\n\n  Annotation.prototype.getCoordinateBBox = function () {\n    var coordinate = this.view.getCoordinate();\n    var start = coordinate.start,\n        end = coordinate.end;\n    var width = coordinate.getWidth();\n    var height = coordinate.getHeight();\n    var topLeft = {\n      x: Math.min(start.x, end.x),\n      y: Math.min(start.y, end.y)\n    };\n    return {\n      x: topLeft.x,\n      y: topLeft.y,\n      minX: topLeft.x,\n      minY: topLeft.y,\n      maxX: topLeft.x + width,\n      maxY: topLeft.y + height,\n      width: width,\n      height: height\n    };\n  };\n  /**\n   * get annotation component config by different type\n   * @param type\n   * @param option 用户的配置\n   * @param theme\n   */\n\n\n  Annotation.prototype.getAnnotationCfg = function (type, option, theme) {\n    var coordinate = this.view.getCoordinate();\n    var o = {};\n\n    if (isNil(option)) {\n      return null;\n    }\n\n    if (type === 'arc') {\n      var _a = option,\n          start = _a.start,\n          end = _a.end;\n      var sp = this.parsePosition(start);\n      var ep = this.parsePosition(end);\n      var startAngle = getAngleByPoint(coordinate, sp);\n      var endAngle = getAngleByPoint(coordinate, ep);\n\n      if (startAngle > endAngle) {\n        endAngle = Math.PI * 2 + endAngle;\n      }\n\n      o = {\n        center: coordinate.getCenter(),\n        radius: getDistanceToCenter(coordinate, sp),\n        startAngle: startAngle,\n        endAngle: endAngle\n      };\n    } else if (type === 'image') {\n      var _b = option,\n          start = _b.start,\n          end = _b.end;\n      o = {\n        start: this.parsePosition(start),\n        end: this.parsePosition(end),\n        src: option.src\n      };\n    } else if (type === 'line') {\n      var _c = option,\n          start = _c.start,\n          end = _c.end;\n      o = {\n        start: this.parsePosition(start),\n        end: this.parsePosition(end),\n        text: get(option, 'text', null)\n      };\n    } else if (type === 'region') {\n      var _d = option,\n          start = _d.start,\n          end = _d.end;\n      o = {\n        start: this.parsePosition(start),\n        end: this.parsePosition(end)\n      };\n    } else if (type === 'text') {\n      var filteredData = this.view.getData();\n\n      var _e = option,\n          position = _e.position,\n          content = _e.content,\n          rest = __rest(_e, [\"position\", \"content\"]);\n\n      var textContent = content;\n\n      if (isFunction(content)) {\n        textContent = content(filteredData);\n      }\n\n      o = __assign(__assign(__assign({}, this.parsePosition(position)), rest), {\n        content: textContent\n      });\n    } else if (type === 'dataMarker') {\n      var _f = option,\n          position = _f.position,\n          point = _f.point,\n          line = _f.line,\n          text = _f.text,\n          autoAdjust = _f.autoAdjust,\n          direction = _f.direction;\n      o = __assign(__assign({}, this.parsePosition(position)), {\n        coordinateBBox: this.getCoordinateBBox(),\n        point: point,\n        line: line,\n        text: text,\n        autoAdjust: autoAdjust,\n        direction: direction\n      });\n    } else if (type === 'dataRegion') {\n      var _g = option,\n          start = _g.start,\n          end = _g.end,\n          region = _g.region,\n          text = _g.text,\n          lineLength = _g.lineLength;\n      o = {\n        points: this.getRegionPoints(start, end),\n        region: region,\n        text: text,\n        lineLength: lineLength\n      };\n    } else if (type === 'regionFilter') {\n      var _h = option,\n          start = _h.start,\n          end = _h.end,\n          apply_1 = _h.apply,\n          color = _h.color;\n      var geometries = this.view.geometries;\n      var shapes_1 = [];\n\n      var addShapes_1 = function (item) {\n        if (!item) {\n          return;\n        }\n\n        if (item.isGroup()) {\n          item.getChildren().forEach(function (child) {\n            return addShapes_1(child);\n          });\n        } else {\n          shapes_1.push(item);\n        }\n      };\n\n      each(geometries, function (geom) {\n        if (apply_1) {\n          if (contains(apply_1, geom.type)) {\n            each(geom.elements, function (elem) {\n              addShapes_1(elem.shape);\n            });\n          }\n        } else {\n          each(geom.elements, function (elem) {\n            addShapes_1(elem.shape);\n          });\n        }\n      });\n      o = {\n        color: color,\n        shapes: shapes_1,\n        start: this.parsePosition(start),\n        end: this.parsePosition(end)\n      };\n    } // 合并主题，用户配置优先级高于默认主题\n\n\n    var cfg = deepMix({}, theme, __assign(__assign({}, o), {\n      top: option.top,\n      style: option.style,\n      offsetX: option.offsetX,\n      offsetY: option.offsetY\n    }));\n    cfg.container = this.getComponentContainer(cfg);\n    cfg.animate = this.view.getOptions().animate && cfg.animate && get(option, 'animate', cfg.animate); // 如果 view 关闭动画，则不执行\n\n    cfg.animateOption = deepMix({}, DEFAULT_ANIMATE_CFG, cfg.animateOption, option.animateOption);\n    return cfg;\n  };\n  /**\n   * is annotation render on top\n   * @param option\n   * @return whethe on top\n   */\n\n\n  Annotation.prototype.isTop = function (option) {\n    return get(option, 'top', true);\n  };\n  /**\n   * get the container by option.top\n   * default is on top\n   * @param option\n   * @returns the container\n   */\n\n\n  Annotation.prototype.getComponentContainer = function (option) {\n    return this.isTop(option) ? this.foregroundContainer : this.backgroundContainer;\n  };\n\n  Annotation.prototype.getAnnotationTheme = function (type) {\n    return get(this.view.getTheme(), ['components', 'annotation', type], {});\n  };\n\n  return Annotation;\n}(Controller);\n\nexport default Annotation;","map":{"version":3,"sources":["../../../src/chart/controller/annotation.ts"],"names":[],"mappings":"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","sourcesContent":["import { contains, deepMix, each, get, isArray, isFunction, isNil, isString, keys, upperFirst } from '@antv/util';\n\nimport { Annotation as AnnotationComponent, IElement, IGroup, Scale } from '../../dependents';\nimport {\n  AnnotationBaseOption as BaseOption,\n  AnnotationPosition as Position,\n  ArcOption,\n  ComponentOption,\n  Data,\n  DataMarkerOption,\n  DataRegionOption,\n  ImageOption,\n  LineOption,\n  Point,\n  RegionFilterOption,\n  RegionOption,\n  RegionPositionBaseOption,\n  TextOption,\n} from '../../interface';\n\nimport { DEFAULT_ANIMATE_CFG } from '../../animate/';\nimport { COMPONENT_TYPE, DIRECTION, LAYER, VIEW_LIFE_CIRCLE } from '../../constant';\n\nimport Geometry from '../../geometry/base';\nimport Element from '../../geometry/element';\nimport { getAngleByPoint, getDistanceToCenter } from '../../util/coordinate';\nimport { omit } from '../../util/helper';\nimport View from '../view';\nimport { Controller } from './base';\n\n/**\n * Annotation controller, 主要作用:\n * 1. 创建 Annotation: line、text、arc ...\n * 2. 生命周期: init、layout、render、clear、destroy\n */\nexport default class Annotation extends Controller<BaseOption[]> {\n  private foregroundContainer: IGroup;\n  private backgroundContainer: IGroup;\n\n  /* 组件更新的 cache，组件配置 object : 组件 */\n  private cache = new Map<BaseOption, ComponentOption>();\n\n  constructor(view: View) {\n    super(view);\n\n    this.foregroundContainer = this.view.getLayer(LAYER.FORE).addGroup();\n    this.backgroundContainer = this.view.getLayer(LAYER.BG).addGroup();\n\n    this.option = [];\n  }\n\n  public get name(): string {\n    return 'annotation';\n  }\n\n  public init() {}\n\n  public layout() {\n    const components = this.getComponents();\n    const updateComponentFn = (co: ComponentOption) => {\n      const { component, extra } = co;\n      const { type } = extra;\n      const theme = this.getAnnotationTheme(type);\n\n      component.update(this.getAnnotationCfg(type, extra, theme));\n    };\n    const createComponentFn = (option: BaseOption) => {\n      const co = this.createAnnotation(option);\n      if (co) {\n        co.component.init();\n        // Note：regionFilter 特殊处理，regionFilter需要取到 Geometry 中的 Shape，需要在 view render 之后处理\n        // 其他组件使用外层的统一 render 逻辑\n        if (option.type === 'regionFilter') {\n          co.component.render();\n        }\n        // 缓存起来\n        this.cache.set(option, co);\n      }\n    };\n\n    if (components.length) {\n      each(components, (co: ComponentOption) => {\n        const { component } = co;\n\n        if (component.get('type') === 'regionFilter') {\n          // regionFilter 依赖绘制后的 Geometry Shapes\n          this.view.getRootView().once(VIEW_LIFE_CIRCLE.AFTER_RENDER, () => {\n            updateComponentFn(co);\n          });\n        } else {\n          updateComponentFn(co);\n        }\n      });\n    } else {\n      each(this.option, (option: BaseOption) => {\n        if (option.type === 'regionFilter') {\n          this.view.getRootView().once(VIEW_LIFE_CIRCLE.AFTER_RENDER, () => {\n            // regionFilter 依赖绘制后的 Geometry Shapes\n            createComponentFn(option);\n          });\n        } else {\n          createComponentFn(option);\n        }\n      });\n    }\n  }\n\n  public render() {\n    // 因为 Annotation 不参与布局，但是渲染的位置依赖于坐标系，所以可以将绘制阶段延迟到 layout() 进行\n  }\n\n  /**\n   * 更新\n   */\n  public update() {\n    // 已经处理过的 legend\n    const updated = new WeakMap<BaseOption, true>();\n\n    const updateComponentFn = (option: BaseOption) => {\n      const { type } = option;\n      const theme = this.getAnnotationTheme(type);\n      const cfg = this.getAnnotationCfg(type, option, theme);\n\n      const existCo = this.cache.get(option);\n\n      // 存在，则更新\n      if (existCo) {\n        // 忽略掉一些配置\n        omit(cfg, ['container']);\n\n        existCo.component.update(cfg);\n        updated.set(option, true);\n      } else {\n        // 不存在，则创建\n        const co = this.createAnnotation(option);\n        if (co) {\n          co.component.init();\n          // Note：regionFilter 特殊处理，regionFilter需要取到 Geometry 中的 Shape，需要在 view render 之后处理\n          // 其他组件使用外层的统一 render 逻辑\n          if (option.type === 'regionFilter') {\n            co.component.render();\n          }\n          // 缓存起来\n          this.cache.set(option, co);\n          updated.set(option, true);\n        }\n      }\n    };\n\n    this.view.once(VIEW_LIFE_CIRCLE.AFTER_RENDER, () => {\n      // 先看是否有 regionFilter 要更新\n      each(this.option, (option: BaseOption) => {\n        if (option.type === 'regionFilter') {\n          updateComponentFn(option);\n        }\n      });\n\n      // 处理完成之后，销毁删除的\n      // 不在处理中的\n      const newCache = new Map<BaseOption, ComponentOption>();\n\n      this.cache.forEach((value: ComponentOption, key: BaseOption) => {\n        if (updated.has(key)) {\n          newCache.set(key, value);\n        } else {\n          // 不存在，则是所有需要被销毁的组件\n          value.component.destroy();\n        }\n      });\n\n      // 更新缓存\n      this.cache = newCache;\n    });\n\n    each(this.option, (option: BaseOption) => {\n      if (option.type !== 'regionFilter') {\n        updateComponentFn(option);\n      }\n    });\n  }\n\n  /**\n   * 清空\n   * @param includeOption 是否清空 option 配置项\n   */\n  public clear(includeOption = false) {\n    super.clear();\n\n    this.cache.clear();\n    this.foregroundContainer.clear();\n    this.backgroundContainer.clear();\n    // clear all option\n    if (includeOption) {\n      this.option = [];\n    }\n  }\n\n  public destroy() {\n    this.clear(true);\n\n    this.foregroundContainer.remove(true);\n    this.backgroundContainer.remove(true);\n  }\n\n  /**\n   * 复写基类的方法\n   */\n  public getComponents(): ComponentOption[] {\n    const co = [];\n\n    this.cache.forEach((value: ComponentOption) => {\n      co.push(value);\n    });\n\n    return co;\n  }\n\n  private createAnnotation(option: BaseOption) {\n    const { type } = option;\n\n    const Ctor = AnnotationComponent[upperFirst(type)];\n    if (Ctor) {\n      const theme = this.getAnnotationTheme(type);\n      const cfg = this.getAnnotationCfg(type, option, theme);\n      const annotation = new Ctor(cfg);\n\n      return {\n        component: annotation,\n        layer: this.isTop(cfg) ? LAYER.FORE : LAYER.BG,\n        direction: DIRECTION.NONE,\n        type: COMPONENT_TYPE.ANNOTATION,\n        extra: option,\n      };\n    }\n  }\n\n  // APIs for creating annotation component\n  public annotation(option: any) {\n    this.option.push(option);\n  }\n\n  /**\n   * 创建 Arc\n   * @param option\n   * @returns AnnotationController\n   */\n  public arc(option: ArcOption) {\n    this.annotation({\n      type: 'arc',\n      ...option,\n    });\n\n    return this;\n  }\n\n  /**\n   * 创建 image\n   * @param option\n   * @returns AnnotationController\n   */\n  public image(option: ImageOption) {\n    this.annotation({\n      type: 'image',\n      ...option,\n    });\n\n    return this;\n  }\n\n  /**\n   * 创建 Line\n   * @param option\n   * @returns AnnotationController\n   */\n  public line(option: LineOption) {\n    this.annotation({\n      type: 'line',\n      ...option,\n    });\n\n    return this;\n  }\n\n  /**\n   * 创建 Region\n   * @param option\n   * @returns AnnotationController\n   */\n  public region(option: RegionOption) {\n    this.annotation({\n      type: 'region',\n      ...option,\n    });\n\n    return this;\n  }\n\n  /**\n   * 创建 Text\n   * @param option\n   * @returns AnnotationController\n   */\n  public text(option: TextOption) {\n    this.annotation({\n      type: 'text',\n      ...option,\n    });\n\n    return this;\n  }\n\n  /**\n   * 创建 DataMarker\n   * @param option\n   * @returns AnnotationController\n   */\n  public dataMarker(option: DataMarkerOption) {\n    this.annotation({\n      type: 'dataMarker',\n      ...option,\n    });\n\n    return this;\n  }\n\n  /**\n   * 创建 DataRegion\n   * @param option\n   * @returns AnnotationController\n   */\n  public dataRegion(option: DataRegionOption) {\n    this.annotation({\n      type: 'dataRegion',\n      ...option,\n    });\n  }\n\n  /**\n   * 创建 RegionFilter\n   * @param option\n   * @returns AnnotationController\n   */\n  public regionFilter(option: RegionFilterOption) {\n    this.annotation({\n      type: 'regionFilter',\n      ...option,\n    });\n  }\n  // end API\n\n  /**\n   * parse the point position to [x, y]\n   * @param p Position\n   * @returns { x, y }\n   */\n  private parsePosition(p: Position): Point {\n    const xScale = this.view.getXScale();\n    // 转成 object\n    const yScales = this.view.getScalesByDim('y');\n\n    const position: Position = isFunction(p) ? p.call(null, xScale, yScales) : p;\n\n    let x = 0;\n    let y = 0;\n\n    // 入参是 [24, 24] 这类时\n    if (isArray(position)) {\n      const [xPos, yPos] = position;\n      // 如果数据格式是 ['50%', '50%'] 的格式\n      // fix: 原始数据中可能会包含 'xxx5%xxx' 这样的数据，需要判断下 https://github.com/antvis/f2/issues/590\n      // @ts-ignore\n      if (isString(xPos) && xPos.indexOf('%') !== -1 && !isNaN(xPos.slice(0, -1))) {\n        return this.parsePercentPosition(position as [string, string]);\n      }\n\n      x = this.getNormalizedValue(xPos, xScale);\n      y = this.getNormalizedValue(yPos, Object.values(yScales)[0]);\n    } else if (!isNil(position)) {\n      // 入参是 object 结构，数据点\n      for (const key of keys(position)) {\n        const value = position[key];\n        if (key === xScale.field) {\n          x = this.getNormalizedValue(value, xScale);\n        }\n        if (yScales[key]) {\n          y = this.getNormalizedValue(value, yScales[key]);\n        }\n      }\n    }\n\n    return this.view.getCoordinate().convert({ x, y });\n  }\n\n  /**\n   * parse all the points between start and end\n   * @param start\n   * @param end\n   * @return Point[]\n   */\n  private getRegionPoints(start: Position | Data, end: Position | Data): Point[] {\n    const xScale = this.view.getXScale();\n    const yScales = this.view.getScalesByDim('y');\n    const yScale = Object.values(yScales)[0];\n    const xField = xScale.field;\n    const viewData = this.view.getData();\n    const startXValue = isArray(start) ? start[0] : start[xField];\n    const endXValue = isArray(end) ? end[0] : end[xField];\n    const arr = [];\n\n    let startIndex;\n    each(viewData, (item, idx) => {\n      if (item[xField] === startXValue) {\n        startIndex = idx;\n      }\n      if (idx >= startIndex) {\n        const point = this.parsePosition([item[xField], item[yScale.field]]);\n        if (point) {\n          arr.push(point);\n        }\n      }\n      if (item[xField] === endXValue) {\n        return false;\n      }\n    });\n\n    return arr;\n  }\n\n  /**\n   * parse the value position\n   * @param val\n   * @param scale\n   */\n  private getNormalizedValue(val: number | string, scale: Scale) {\n    let result: number;\n    let scaled: number;\n\n    switch (val) {\n      case 'start':\n        result = 0;\n        break;\n      case 'end':\n        result = 1;\n        break;\n      case 'median': {\n        scaled = scale.isCategory ? (scale.values.length - 1) / 2 : (scale.min + scale.max) / 2;\n        result = scale.scale(scaled);\n        break;\n      }\n      case 'min':\n      case 'max':\n        if (scale.isCategory) {\n          scaled = val === 'min' ? 0 : scale.values.length - 1;\n        } else {\n          scaled = scale[val];\n        }\n        result = scale.scale(scaled);\n        break;\n      default:\n        result = scale.scale(val);\n    }\n\n    return result;\n  }\n\n  /**\n   * parse percent position\n   * @param position\n   */\n  private parsePercentPosition(position: [string, string]): Point {\n    const xPercent = parseFloat(position[0]) / 100;\n    const yPercent = parseFloat(position[1]) / 100;\n    const coordinate = this.view.getCoordinate();\n    const { start, end } = coordinate;\n\n    const topLeft = {\n      x: Math.min(start.x, end.x),\n      y: Math.min(start.y, end.y),\n    };\n    const x = coordinate.getWidth() * xPercent + topLeft.x;\n    const y = coordinate.getHeight() * yPercent + topLeft.y;\n    return { x, y };\n  }\n\n  /**\n   * get coordinate bbox\n   */\n  private getCoordinateBBox() {\n    const coordinate = this.view.getCoordinate();\n    const { start, end } = coordinate;\n\n    const width = coordinate.getWidth();\n    const height = coordinate.getHeight();\n    const topLeft = {\n      x: Math.min(start.x, end.x),\n      y: Math.min(start.y, end.y),\n    };\n\n    return {\n      x: topLeft.x,\n      y: topLeft.y,\n      minX: topLeft.x,\n      minY: topLeft.y,\n      maxX: topLeft.x + width,\n      maxY: topLeft.y + height,\n      width,\n      height,\n    };\n  }\n\n  /**\n   * get annotation component config by different type\n   * @param type\n   * @param option 用户的配置\n   * @param theme\n   */\n  private getAnnotationCfg(type: string, option: any, theme: object): object {\n    const coordinate = this.view.getCoordinate();\n    let o = {};\n\n    if (isNil(option)) {\n      return null;\n    }\n\n    if (type === 'arc') {\n      const { start, end } = option as ArcOption;\n      const sp = this.parsePosition(start);\n      const ep = this.parsePosition(end);\n      const startAngle = getAngleByPoint(coordinate, sp);\n      let endAngle = getAngleByPoint(coordinate, ep);\n      if (startAngle > endAngle) {\n        endAngle = Math.PI * 2 + endAngle;\n      }\n\n      o = {\n        center: coordinate.getCenter(),\n        radius: getDistanceToCenter(coordinate, sp),\n        startAngle,\n        endAngle,\n      };\n    } else if (type === 'image') {\n      const { start, end } = option as ImageOption;\n      o = {\n        start: this.parsePosition(start),\n        end: this.parsePosition(end),\n        src: option.src,\n      };\n    } else if (type === 'line') {\n      const { start, end } = option as LineOption;\n      o = {\n        start: this.parsePosition(start),\n        end: this.parsePosition(end),\n        text: get(option, 'text', null),\n      };\n    } else if (type === 'region') {\n      const { start, end } = option as RegionPositionBaseOption;\n      o = {\n        start: this.parsePosition(start),\n        end: this.parsePosition(end),\n      };\n    } else if (type === 'text') {\n      const filteredData = this.view.getData();\n      const { position, content, ...rest } = option as TextOption;\n      let textContent = content;\n      if (isFunction(content)) {\n        textContent = content(filteredData);\n      }\n      o = {\n        ...this.parsePosition(position),\n        ...rest,\n        content: textContent,\n      };\n    } else if (type === 'dataMarker') {\n      const { position, point, line, text, autoAdjust, direction } = option as DataMarkerOption;\n      o = {\n        ...this.parsePosition(position),\n        coordinateBBox: this.getCoordinateBBox(),\n        point,\n        line,\n        text,\n        autoAdjust,\n        direction,\n      };\n    } else if (type === 'dataRegion') {\n      const { start, end, region, text, lineLength } = option as DataRegionOption;\n      o = {\n        points: this.getRegionPoints(start, end),\n        region,\n        text,\n        lineLength,\n      };\n    } else if (type === 'regionFilter') {\n      const { start, end, apply, color } = option as RegionFilterOption;\n      const geometries: Geometry[] = this.view.geometries;\n      const shapes = [];\n      const addShapes = (item?: IElement) => {\n        if (!item) {\n          return;\n        }\n        if (item.isGroup()) {\n          (item as IGroup).getChildren().forEach((child) => addShapes(child));\n        } else {\n          shapes.push(item);\n        }\n      };\n      each(geometries, (geom: Geometry) => {\n        if (apply) {\n          if (contains(apply, geom.type)) {\n            each(geom.elements, (elem: Element) => {\n              addShapes(elem.shape);\n            });\n          }\n        } else {\n          each(geom.elements, (elem: Element) => {\n            addShapes(elem.shape);\n          });\n        }\n      });\n      o = {\n        color,\n        shapes,\n        start: this.parsePosition(start),\n        end: this.parsePosition(end),\n      };\n    }\n    // 合并主题，用户配置优先级高于默认主题\n    const cfg = deepMix({}, theme, {\n      ...o,\n      top: option.top,\n      style: option.style,\n      offsetX: option.offsetX,\n      offsetY: option.offsetY,\n    });\n    cfg.container = this.getComponentContainer(cfg);\n    cfg.animate = this.view.getOptions().animate && cfg.animate && get(option, 'animate', cfg.animate); // 如果 view 关闭动画，则不执行\n    cfg.animateOption = deepMix({}, DEFAULT_ANIMATE_CFG, cfg.animateOption, option.animateOption);\n\n    return cfg;\n  }\n\n  /**\n   * is annotation render on top\n   * @param option\n   * @return whethe on top\n   */\n  private isTop(option: any): boolean {\n    return get(option, 'top', true);\n  }\n\n  /**\n   * get the container by option.top\n   * default is on top\n   * @param option\n   * @returns the container\n   */\n  private getComponentContainer(option: any) {\n    return this.isTop(option) ? this.foregroundContainer : this.backgroundContainer;\n  }\n\n  private getAnnotationTheme(type: string) {\n    return get(this.view.getTheme(), ['components', 'annotation', type], {});\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}