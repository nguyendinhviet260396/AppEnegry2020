{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { isEqual, last } from '@antv/util';\nimport { InteractionAction, TooltipController, registerComponentController } from '../../../dependents'; // @ts-ignore\n\nvar SelectedTooltipController =\n/** @class */\nfunction (_super) {\n  __extends(SelectedTooltipController, _super);\n\n  function SelectedTooltipController() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(SelectedTooltipController.prototype, \"name\", {\n    get: function () {\n      return 'selected-tooltip';\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  SelectedTooltipController.prototype.getTooltipCfg = function () {\n    // @ts-ignore\n    var cfg = _super.prototype.getTooltipCfg.call(this);\n\n    return __assign(__assign({}, cfg), {\n      showContent: false,\n      showCrosshairs: true,\n      showMarkers: true,\n      shared: true\n    });\n  };\n\n  return SelectedTooltipController;\n}(TooltipController);\n\nexport { SelectedTooltipController };\nregisterComponentController('selected-tooltip', SelectedTooltipController);\n\nvar SelectedTooltipAction =\n/** @class */\nfunction (_super) {\n  __extends(SelectedTooltipAction, _super);\n\n  function SelectedTooltipAction() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  SelectedTooltipAction.prototype.show = function () {\n    var curLocation = this.getPoint();\n\n    if (!isEqual(curLocation, this.location)) {\n      this.location = curLocation;\n      this.showTooltip(curLocation);\n    }\n  };\n\n  SelectedTooltipAction.prototype.hide = function () {\n    var controller = this.getTooltipController();\n    controller.hideTooltip();\n  };\n\n  SelectedTooltipAction.prototype.showTooltip = function (point) {\n    var controller = this.getTooltipController();\n    controller.showTooltip(point);\n  };\n\n  SelectedTooltipAction.prototype.getPoint = function () {\n    var ev = this.context.event;\n    return ev ? {\n      x: ev.x,\n      y: ev.y\n    } : this.getLastXPoint();\n  };\n\n  SelectedTooltipAction.prototype.getLastXPoint = function () {\n    var view = this.getView();\n    var xScale = view.getXScale();\n    var yScale = view.getYScales()[0];\n    var coordinate = view.getCoordinate();\n    var lastX = last(xScale.getTicks()).value;\n    return coordinate.convert({\n      x: lastX,\n      y: (yScale.range[0] + yScale.range[1]) / 2\n    });\n  };\n\n  SelectedTooltipAction.prototype.getView = function () {\n    return this.context.view;\n  };\n\n  SelectedTooltipAction.prototype.getTooltipController = function () {\n    return this.getView().getController('selected-tooltip');\n  };\n\n  return SelectedTooltipAction;\n}(InteractionAction);\n\nexport { SelectedTooltipAction };","map":{"version":3,"sources":["../../../../src/plots/line/interaction/selected-tooltip.ts"],"names":[],"mappings":"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","sourcesContent":["import { isEqual, last } from '@antv/util';\nimport { InteractionAction, View, TooltipController, Point, registerComponentController } from '../../../dependents';\n\n// @ts-ignore\nexport class SelectedTooltipController extends TooltipController {\n  public get name(): string {\n    return 'selected-tooltip';\n  }\n\n  protected getTooltipCfg() {\n    // @ts-ignore\n    const cfg = super.getTooltipCfg();\n    return { ...cfg, showContent: false, showCrosshairs: true, showMarkers: true, shared: true };\n  }\n}\nregisterComponentController('selected-tooltip', SelectedTooltipController);\n\nexport class SelectedTooltipAction extends InteractionAction {\n  private location: Point;\n\n  public show() {\n    const curLocation = this.getPoint();\n    if (!isEqual(curLocation, this.location)) {\n      this.location = curLocation;\n      this.showTooltip(curLocation);\n    }\n  }\n\n  public hide() {\n    const controller = this.getTooltipController();\n    controller.hideTooltip();\n  }\n\n  public showTooltip(point: Point) {\n    const controller = this.getTooltipController();\n    controller.showTooltip(point);\n  }\n\n  private getPoint() {\n    const ev = this.context.event;\n\n    return ev ? { x: ev.x, y: ev.y } : this.getLastXPoint();\n  }\n\n  private getLastXPoint() {\n    const view = this.getView();\n    const xScale = view.getXScale();\n    const yScale = view.getYScales()[0];\n    const coordinate = view.getCoordinate();\n    const lastX = last(xScale.getTicks()).value;\n\n    return coordinate.convert({ x: lastX, y: (yScale.range[0] + yScale.range[1]) / 2 });\n  }\n\n  private getView(): View {\n    return this.context.view;\n  }\n\n  private getTooltipController() {\n    return this.getView().getController('selected-tooltip') as TooltipController;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}