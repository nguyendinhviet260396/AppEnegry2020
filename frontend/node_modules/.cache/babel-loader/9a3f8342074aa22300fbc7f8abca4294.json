{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport Breadcrumb from '../../../components/breadcrumb';\nimport BaseInteraction from '../../../interaction/base';\nimport BBox from '../../../util/bbox';\nimport { each, hasKey, isFunction, clone } from '@antv/util';\nimport { drillingDown, rollingUp } from './animation';\nvar DEFAULT_ITEM_WIDTH = 100;\nvar DEFAULT_ITEM_HEIGHT = 30;\nvar PADDING_TOP = 10;\n\nvar getValidBreadcrumbConfig = function getValidBreadcrumbConfig(cfg) {\n  if (cfg === void 0) {\n    cfg = {};\n  }\n\n  var _cfg = __assign({\n    x: 0,\n    y: 0,\n    startNode: {\n      name: 'root'\n    },\n    itemWidth: DEFAULT_ITEM_WIDTH,\n    itemHeight: DEFAULT_ITEM_HEIGHT,\n    padding: [0, 0, 0, 0]\n  }, cfg);\n\n  return _cfg;\n};\n\nvar DrillDownInteraction =\n/** @class */\nfunction (_super) {\n  __extends(DrillDownInteraction, _super);\n\n  function DrillDownInteraction() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  DrillDownInteraction.getInteractionRange = function (layerRange, interaction) {\n    var config = getValidBreadcrumbConfig(interaction);\n    var _a = config.padding,\n        paddingTop = _a[0],\n        paddingBottom = _a[1];\n\n    if (layerRange) {\n      return new BBox(layerRange.minX, layerRange.maxY - config.itemHeight - paddingTop - paddingBottom, layerRange.width, config.itemHeight + paddingTop + paddingBottom);\n    }\n  };\n\n  DrillDownInteraction.prototype.start = function (ev) {\n    var _this = this;\n\n    var data = ev.data.data;\n\n    if (data.children) {\n      this.parentNode = {\n        color: ev.target.attr('fill'),\n        shape: ev.target,\n        data: {\n          name: clone(this.currentNode.name),\n          value: clone(this.currentNode.value)\n        },\n        depth: clone(this.currentDepth)\n      };\n      this.currentDepth++;\n      drillingDown(ev.target, this.view, function () {\n        _this.update(data);\n      });\n    }\n  };\n\n  DrillDownInteraction.prototype.update = function (data) {\n    if (!hasKey(this.cache, data.name)) {\n      this.cache[data.name] = data;\n    }\n\n    var tempoData = this.plot.getTreemapData(data, data.depth);\n    this.view.changeData(tempoData);\n    this.adjustScale(this.currentDepth);\n    this.currentNode = data;\n    this.render();\n  };\n\n  DrillDownInteraction.prototype.render = function () {\n    if (this.breadcrumb) {\n      var items = this.getItems();\n      this.breadcrumb.update({\n        items: items\n      });\n      this.breadcrumb.render();\n      this.layout();\n    } else {\n      this.initGeometry();\n      this.cache = {};\n      this.saveOriginMapping();\n      this.container = this.plot.canvas.addGroup();\n\n      if (!this.startNode) {\n        this.startNode = {\n          name: 'root'\n        };\n      }\n\n      if (this.startNode.name === 'root') {\n        this.startNodeName = hasKey(this.plot.options.data, 'name') ? this.plot.options.data.name : 'root';\n        this.currentNode = this.plot.options.data;\n        this.currentDepth = 1;\n      } else {\n        this.startNodeName = this.startNode.name;\n        this.currentNode = this.startNode;\n      }\n\n      this.y = this.view.coordinateBBox.maxY + PADDING_TOP;\n      this.breadcrumb = new Breadcrumb({\n        container: this.container,\n        x: 0,\n        y: this.y,\n        items: this.getItems()\n      });\n      this.breadcrumb.init();\n      this.breadcrumb.render();\n      this.plot.canvas.draw();\n      this.layout();\n    }\n\n    this.onInteraction();\n  };\n\n  DrillDownInteraction.prototype.clear = function () {\n    return;\n  };\n\n  DrillDownInteraction.prototype.layout = function () {\n    var currentWidth = this.container.getBBox().width;\n    var x = (this.plot.width - currentWidth) / 2;\n    this.breadcrumb.update({\n      x: x,\n      y: this.y\n    });\n    this.breadcrumb.render();\n  };\n\n  DrillDownInteraction.prototype.getItems = function () {\n    var items = [];\n\n    if (this.currentNode.name && this.currentNode.name === this.startNodeName) {\n      var rootItem = this.getRootItem();\n      items.push(rootItem);\n    } else {\n      items = [];\n      var parents = [];\n      this.findParent(this.currentNode, parents);\n      items.push(this.getRootItem());\n      each(parents, function (p, index) {\n        items.push({\n          key: String(index + 2),\n          text: p.name,\n          data: p\n        });\n      });\n      items.push({\n        key: String(parents.length + 2),\n        text: this.currentNode.name,\n        data: this.currentNode\n      });\n    }\n\n    return items;\n  };\n\n  DrillDownInteraction.prototype.findParent = function (data, parents) {\n    if (data.parent) {\n      if (hasKey(this.cache, data.parent.name)) {\n        parents.push(this.cache[data.parent.name]);\n      } else {\n        parents.push(data.parent);\n      }\n\n      this.findParent(data.parent, parents);\n    } else {\n      return;\n    }\n  };\n\n  DrillDownInteraction.prototype.onInteraction = function () {\n    var _this = this;\n\n    this.container.on('click', function (ev) {\n      var targetParent = ev.target.get('parent');\n\n      if (targetParent && targetParent.get('class') === 'item-group') {\n        var data_1 = targetParent.get('data');\n\n        if (data_1.data) {\n          if (data_1.text === _this.startNodeName) {\n            var targetDepth = 1; //只有前后depth相邻才执行上卷动画，否则直接更新\n\n            if (_this.currentDepth - 1 === targetDepth) {\n              rollingUp(_this.currentNode.name, _this.view, function () {\n                _this.updateRoot(data_1);\n              });\n            } else {\n              _this.updateRoot(data_1);\n            }\n\n            _this.currentDepth = 1;\n          } else if (_this.currentNode === data_1.data) {\n            return;\n          } else {\n            var previousDepth = clone(_this.currentDepth);\n            _this.currentDepth = parseInt(data_1.key);\n\n            if (previousDepth - 1 === _this.currentDepth) {\n              rollingUp(_this.currentNode.name, _this.view, function () {\n                _this.update(data_1.data);\n              });\n            } else {\n              _this.update(data_1.data);\n            }\n          }\n        }\n      }\n    });\n  };\n\n  DrillDownInteraction.prototype.getRootItem = function () {\n    var rootData = this.plot.options.data;\n    var rootName = hasKey(rootData, 'name') ? rootData.name : 'root';\n    return {\n      key: '1',\n      text: rootName,\n      data: this.plot.rootData\n    };\n  };\n\n  DrillDownInteraction.prototype.saveOriginMapping = function () {\n    var _a = this.plot.options,\n        colorField = _a.colorField,\n        colors = _a.colors;\n    var mappingInfo = {\n      field: colorField,\n      values: colors\n    };\n    this.originMapping = mappingInfo;\n  };\n\n  DrillDownInteraction.prototype.adjustScale = function (index) {\n    var view = this.view; // 根据当前层级确定mapping配置项\n\n    if (this.mapping && hasKey(this.mapping, String(index))) {\n      var mappingCfg = clone(this.mapping[index]);\n\n      if (mappingCfg.values && isFunction(mappingCfg.values)) {\n        var values = mappingCfg.values(this.parentNode, this.currentNode);\n        mappingCfg.values = values;\n      }\n\n      this.view.geometries[0].color(mappingCfg.field, mappingCfg.values);\n    } else {\n      var mappingCfg = clone(this.originMapping);\n      this.view.geometries[0].color(mappingCfg.field, mappingCfg.values);\n    }\n\n    view.render();\n  };\n\n  DrillDownInteraction.prototype.initGeometry = function () {\n    this.geometry = this.view.geometries[0];\n    var viewRange = this.view.viewBBox;\n    var container = this.geometry.container;\n    container.setClip({\n      type: 'rect',\n      attrs: {\n        x: viewRange.minX,\n        y: viewRange.minY,\n        width: viewRange.width,\n        height: viewRange.height\n      }\n    });\n  };\n\n  DrillDownInteraction.prototype.updateRoot = function (data) {\n    this.view.changeData(data.data);\n    this.adjustScale(1);\n    this.currentNode = this.plot.options.data;\n    this.render();\n  };\n\n  return DrillDownInteraction;\n}(BaseInteraction);\n\nexport default DrillDownInteraction;\nBaseInteraction.registerInteraction('drilldown', DrillDownInteraction);","map":{"version":3,"sources":["../../../../src/plots/treemap/interaction/drillDown.ts"],"names":[],"mappings":"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","sourcesContent":["import Breadcrumb from '../../../components/breadcrumb';\nimport BaseInteraction from '../../../interaction/base';\nimport { IGroup } from '@antv/g-base';\nimport BBox from '../../../util/bbox';\nimport TreemapLayer from '../layer';\nimport { each, hasKey, isFunction, clone } from '@antv/util';\nimport { drillingDown, rollingUp } from './animation';\n\nconst DEFAULT_ITEM_WIDTH = 100;\nconst DEFAULT_ITEM_HEIGHT = 30;\nconst PADDING_TOP = 10;\n\ninterface IStartNode {\n  name?: string;\n}\n\ninterface IMapping {\n  [key: string]: IMappingConfig;\n}\n\ninterface IMappingConfig {\n  field: string;\n  values?: string[] | Function;\n}\n\ninterface IDrillDownInteractionConfig {\n  x?: number;\n  y?: number;\n  startNode?: IStartNode;\n  itemWidth?: number;\n  itemHeight?: number;\n  padding?: number[];\n}\n\nexport type IDrillDown = {\n  mapping?: {\n    [key: string]: IMappingConfig;\n  };\n};\n\nconst getValidBreadcrumbConfig = (cfg: IDrillDownInteractionConfig = {}): Required<IDrillDownInteractionConfig> => {\n  const _cfg: Required<IDrillDownInteractionConfig> = {\n    x: 0,\n    y: 0,\n    startNode: { name: 'root' },\n    itemWidth: DEFAULT_ITEM_WIDTH,\n    itemHeight: DEFAULT_ITEM_HEIGHT,\n    padding: [0, 0, 0, 0],\n    ...cfg,\n  };\n  return _cfg;\n};\n\nexport default class DrillDownInteraction extends BaseInteraction {\n  public static getInteractionRange(layerRange: BBox, interaction: IDrillDownInteractionConfig) {\n    const config: Required<IDrillDownInteractionConfig> = getValidBreadcrumbConfig(interaction);\n    const [paddingTop, paddingBottom] = config.padding;\n    if (layerRange) {\n      return new BBox(\n        layerRange.minX,\n        layerRange.maxY - config.itemHeight - paddingTop - paddingBottom,\n        layerRange.width,\n        config.itemHeight + paddingTop + paddingBottom\n      );\n    }\n  }\n\n  private container: IGroup;\n  private breadcrumb: Breadcrumb;\n  private plot: TreemapLayer;\n  private startNode: IStartNode;\n  private parentNode: any;\n  private currentNode: any;\n  private currentDepth: number;\n  private startNodeName: string;\n  private cache: any;\n  private mapping: IMapping;\n  private originMapping: IMappingConfig;\n  private y: number;\n  private geometry: any;\n\n  public start(ev) {\n    const data = ev.data.data;\n    if (data.children) {\n      this.parentNode = {\n        color: ev.target.attr('fill'),\n        shape: ev.target,\n        data: {\n          name: clone(this.currentNode.name),\n          value: clone(this.currentNode.value),\n        },\n        depth: clone(this.currentDepth),\n      };\n      this.currentDepth++;\n      drillingDown(ev.target, this.view, () => {\n        this.update(data);\n      });\n    }\n  }\n\n  protected update(data) {\n    if (!hasKey(this.cache, data.name)) {\n      this.cache[data.name] = data;\n    }\n    const tempoData = this.plot.getTreemapData(data, data.depth);\n    this.view.changeData(tempoData);\n    this.adjustScale(this.currentDepth);\n    this.currentNode = data;\n    this.render();\n  }\n\n  public render() {\n    if (this.breadcrumb) {\n      const items = this.getItems();\n      this.breadcrumb.update({\n        items,\n      });\n      this.breadcrumb.render();\n      this.layout();\n    } else {\n      this.initGeometry();\n      this.cache = {};\n      this.saveOriginMapping();\n      this.container = this.plot.canvas.addGroup();\n      if (!this.startNode) {\n        this.startNode = {\n          name: 'root',\n        };\n      }\n      if (this.startNode.name === 'root') {\n        this.startNodeName = hasKey(this.plot.options.data, 'name') ? this.plot.options.data.name : 'root';\n        this.currentNode = this.plot.options.data;\n        this.currentDepth = 1;\n      } else {\n        this.startNodeName = this.startNode.name;\n        this.currentNode = this.startNode;\n      }\n      this.y = this.view.coordinateBBox.maxY + PADDING_TOP;\n      this.breadcrumb = new Breadcrumb({\n        container: this.container,\n        x: 0,\n        y: this.y,\n        items: this.getItems(),\n      });\n      this.breadcrumb.init();\n      this.breadcrumb.render();\n      this.plot.canvas.draw();\n      this.layout();\n    }\n    this.onInteraction();\n  }\n\n  protected clear() {\n    return;\n  }\n\n  private layout() {\n    const currentWidth = this.container.getBBox().width;\n    const x = (this.plot.width - currentWidth) / 2;\n    this.breadcrumb.update({\n      x,\n      y: this.y,\n    });\n    this.breadcrumb.render();\n  }\n\n  private getItems() {\n    let items = [];\n    if (this.currentNode.name && this.currentNode.name === this.startNodeName) {\n      const rootItem = this.getRootItem();\n      items.push(rootItem);\n    } else {\n      items = [];\n      const parents = [];\n      this.findParent(this.currentNode, parents);\n      items.push(this.getRootItem());\n      each(parents, (p, index) => {\n        items.push({ key: String(index + 2), text: p.name, data: p });\n      });\n      items.push({ key: String(parents.length + 2), text: this.currentNode.name, data: this.currentNode });\n    }\n    return items;\n  }\n\n  private findParent(data, parents) {\n    if (data.parent) {\n      if (hasKey(this.cache, data.parent.name)) {\n        parents.push(this.cache[data.parent.name]);\n      } else {\n        parents.push(data.parent);\n      }\n      this.findParent(data.parent, parents);\n    } else {\n      return;\n    }\n  }\n\n  private onInteraction() {\n    this.container.on('click', (ev) => {\n      const targetParent = ev.target.get('parent');\n      if (targetParent && targetParent.get('class') === 'item-group') {\n        const data = targetParent.get('data');\n        if (data.data) {\n          if (data.text === this.startNodeName) {\n            const targetDepth = 1;\n            //只有前后depth相邻才执行上卷动画，否则直接更新\n            if (this.currentDepth - 1 === targetDepth) {\n              rollingUp(this.currentNode.name, this.view, () => {\n                this.updateRoot(data);\n              });\n            } else {\n              this.updateRoot(data);\n            }\n            this.currentDepth = 1;\n          } else if (this.currentNode === data.data) {\n            return;\n          } else {\n            const previousDepth = clone(this.currentDepth);\n            this.currentDepth = parseInt(data.key);\n            if (previousDepth - 1 === this.currentDepth) {\n              rollingUp(this.currentNode.name, this.view, () => {\n                this.update(data.data);\n              });\n            } else {\n              this.update(data.data);\n            }\n          }\n        }\n      }\n    });\n  }\n\n  private getRootItem() {\n    const rootData = this.plot.options.data;\n    const rootName = hasKey(rootData, 'name') ? rootData.name : 'root';\n    return { key: '1', text: rootName, data: this.plot.rootData };\n  }\n\n  private saveOriginMapping() {\n    const { colorField, colors } = this.plot.options;\n    const mappingInfo = { field: colorField, values: colors };\n    this.originMapping = mappingInfo;\n  }\n\n  private adjustScale(index) {\n    const { view } = this;\n    // 根据当前层级确定mapping配置项\n    if (this.mapping && hasKey(this.mapping, String(index))) {\n      const mappingCfg = clone(this.mapping[index]);\n      if (mappingCfg.values && isFunction(mappingCfg.values)) {\n        const values = mappingCfg.values(this.parentNode, this.currentNode);\n        mappingCfg.values = values;\n      }\n      this.view.geometries[0].color(mappingCfg.field, mappingCfg.values);\n    } else {\n      const mappingCfg = clone(this.originMapping);\n      this.view.geometries[0].color(mappingCfg.field, mappingCfg.values);\n    }\n    view.render();\n  }\n\n  private initGeometry() {\n    this.geometry = this.view.geometries[0];\n    const viewRange = this.view.viewBBox;\n    const container = this.geometry.container;\n    container.setClip({\n      type: 'rect',\n      attrs: {\n        x: viewRange.minX,\n        y: viewRange.minY,\n        width: viewRange.width,\n        height: viewRange.height,\n      },\n    });\n  }\n\n  private updateRoot(data) {\n    this.view.changeData(data.data);\n    this.adjustScale(1);\n    this.currentNode = this.plot.options.data;\n    this.render();\n  }\n}\n\nBaseInteraction.registerInteraction('drilldown', DrillDownInteraction);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}