{"ast":null,"code":"import { filter, each, isArray, clone } from '@antv/util';\nimport BBox from '../../util/bbox';\nimport { getLegendComponents, getAxisComponents } from '../../util/common';\n/**\n * 处理图表padding的逻辑：\n * 注册参与padding的自定义组件\n */\n\nvar PaddingController =\n/** @class */\nfunction () {\n  function PaddingController(cfg) {\n    this.innerPaddingComponents = [];\n    this.outerPaddingComponents = [];\n    this.plot = cfg.plot;\n  }\n\n  PaddingController.prototype.registerPadding = function (component, type, checkIfExist) {\n    if (type === void 0) {\n      type = 'outer';\n    }\n\n    if (checkIfExist === void 0) {\n      checkIfExist = false;\n    }\n\n    if (type === 'inner') {\n      if (checkIfExist) {\n        if (!this.innerPaddingComponents.find(function (c) {\n          return c == component;\n        })) {\n          this.innerPaddingComponents.push(component);\n        }\n      } else {\n        this.innerPaddingComponents.push(component);\n      }\n    } else {\n      if (checkIfExist) {\n        if (!this.outerPaddingComponents.find(function (c) {\n          return c == component;\n        })) {\n          this.outerPaddingComponents.push(component);\n        }\n      } else {\n        this.outerPaddingComponents.push(component);\n      }\n    }\n  };\n\n  PaddingController.prototype.getPaddingComponents = function (type) {\n    if (type === void 0) {\n      type = 'outer';\n    }\n\n    return (type === 'outer' ? this.outerPaddingComponents : this.innerPaddingComponents) || [];\n  };\n  /**\n   * 清除已经注册的元素\n   */\n\n\n  PaddingController.prototype.clear = function () {\n    this.innerPaddingComponents = []; // 一些组件是在view渲染完成之后渲染初始化的\n    // TODO: afterRender的什么时候清除\n\n    this.outerPaddingComponents = filter(this.outerPaddingComponents, function (component) {\n      return component.afterRender;\n    });\n  };\n\n  PaddingController.prototype.clearOuterComponents = function () {\n    each(this.outerPaddingComponents, function (component) {\n      if (component.afterRender) {\n        component.destroy();\n      }\n    });\n    this.outerPaddingComponents = [];\n  };\n\n  PaddingController.prototype.getPadding = function () {\n    var props = this.plot.options;\n    var padding = props.padding ? props.padding : this.plot.config.theme.padding;\n\n    if (padding === 'auto') {\n      return [0, 0, 0, 1];\n    }\n\n    return padding;\n  };\n  /** view层的padding计算 */\n\n\n  PaddingController.prototype.processAutoPadding = function () {\n    var padding = this._getInnerAutoPadding();\n\n    this.plot.updateConfig({\n      padding: padding\n    });\n    this.plot.render();\n  };\n\n  PaddingController.prototype.processOuterPadding = function () {\n    if (!this.plot.layerBBox) {\n      this.plot.layerBBox = new BBox(this.plot.x, this.plot.y, this.plot.width, this.plot.height);\n    }\n\n    var viewMinX = this.plot.layerBBox.minX;\n    var viewMaxX = this.plot.layerBBox.maxX;\n    var viewMinY = this.plot.layerBBox.minY;\n    var viewMaxY = this.plot.layerBBox.maxY;\n    each(this.outerPaddingComponents, function (component) {\n      var position = component.position;\n\n      if (component.destroyed) {\n        return;\n      }\n\n      var _a = component.getBBox(),\n          minX = _a.minX,\n          maxX = _a.maxX,\n          minY = _a.minY,\n          maxY = _a.maxY;\n\n      if (maxY >= viewMinY && maxY <= viewMaxY && position === 'top') {\n        viewMinY = maxY;\n      }\n\n      if (minY >= viewMinY && minY <= viewMaxY && position === 'bottom') {\n        viewMaxY = minY;\n      }\n\n      if (maxX > viewMinX && maxX <= viewMaxX && position === 'left') {\n        viewMinX = maxX;\n      }\n\n      if (minX >= viewMinX && maxX <= viewMaxX && position === 'right') {\n        viewMaxX = minX;\n      }\n    });\n    return new BBox(viewMinX, viewMinY, viewMaxX - viewMinX, viewMaxY - viewMinY);\n  };\n\n  PaddingController.prototype._getInnerAutoPadding = function () {\n    var _a;\n\n    var props = this.plot.options;\n    var view = this.plot.view;\n    var viewRange = view.coordinateBBox;\n    var maxX = viewRange.maxX,\n        maxY = viewRange.maxY,\n        minY = viewRange.minY,\n        minX = viewRange.minX;\n    var bleeding = this.plot.config.theme.bleeding;\n\n    if (isArray(bleeding)) {\n      each(bleeding, function (it, index) {\n        if (typeof bleeding[index] === 'function') {\n          bleeding[index] = bleeding[index](props);\n        }\n      });\n    }\n\n    this.bleeding = clone(bleeding); // 参与auto padding的components: axis legend label annotation\n\n    var components_bbox = [new BBox(viewRange.minX, viewRange.minY, viewRange.width, viewRange.height)];\n\n    if (((_a = this.plot.config.coordinate) === null || _a === void 0 ? void 0 : _a.type) === 'cartesian') {\n      this._getCartesianAxis(view, components_bbox[0], components_bbox);\n    }\n\n    var box = this._mergeBBox(components_bbox);\n\n    this._getLegend(view, box, components_bbox);\n\n    box = this._mergeBBox(components_bbox); // 参与auto padding的自定义组件\n\n    var components = this.innerPaddingComponents;\n    each(components, function (obj) {\n      var component = obj;\n      var bbox = component.getBBox();\n      components_bbox.push(bbox);\n    });\n    box = this._mergeBBox(components_bbox);\n    var padding = [minY - box.minY + this.bleeding[0], box.maxX - maxX + this.bleeding[1], box.maxY - maxY + this.bleeding[2], minX - box.minX + this.bleeding[3]]; // label、annotation等\n\n    var panelPadding = this._getPanel(view);\n\n    padding[0] += panelPadding[0];\n    padding[1] += panelPadding[1];\n    padding[2] += panelPadding[2];\n    padding[3] += panelPadding[3];\n    return padding;\n  };\n\n  PaddingController.prototype._getCartesianAxis = function (view, globalBBox, bboxes) {\n    var axes = getAxisComponents(view);\n    var isTransposed = view.getCoordinate().isTransposed;\n    each(axes, function (axis) {\n      if (axis.get('group').get('children').length === 0) {\n        return;\n      }\n\n      var position = axis.get('position');\n\n      var _a = axis.getLayoutBBox(),\n          minX = _a.minX,\n          minY = _a.minY,\n          width = _a.width,\n          height = _a.height;\n\n      if (!isTransposed) {\n        if (position === 'left') {\n          bboxes.push(new BBox(globalBBox.minX - width, minY, width, height));\n        } else if (position === 'bottom') {\n          bboxes.push(new BBox(minX, globalBBox.maxY, width, height));\n        } else if (position === 'right') {\n          bboxes.push(new BBox(globalBBox.maxX, minY, width, height));\n        }\n      } else {\n        if (position === 'bottom') {\n          bboxes.push(new BBox(globalBBox.minX - width, minY, width, height));\n        } else if (position === 'left') {\n          bboxes.push(new BBox(minX, globalBBox.maxY, width, height));\n        } else if (position === 'top') {\n          bboxes.push(new BBox(globalBBox.maxX, minY, width, height));\n        }\n      }\n    });\n  };\n\n  PaddingController.prototype._getLegend = function (view, globalBBox, bboxes) {\n    var legends = getLegendComponents(view);\n    each(legends, function (legend) {\n      var position = legend.get('position').split('-')[0];\n\n      var _a = legend.getLayoutBBox(),\n          minX = _a.minX,\n          minY = _a.minY,\n          width = _a.width,\n          height = _a.height;\n\n      if (position === 'top') {\n        bboxes.push(new BBox(minX, globalBBox.minY - height, width, height));\n      } else if (position === 'bottom') {\n        bboxes.push(new BBox(minX, globalBBox.maxY, width, height));\n      } else if (position === 'left') {\n        bboxes.push(new BBox(globalBBox.minX - width, minY, width, height));\n      } else {\n        bboxes.push(new BBox(globalBBox.maxX, minY, width, height));\n      }\n    });\n  };\n\n  PaddingController.prototype._getPanel = function (view) {\n    var groups = [];\n    var geoms = view.geometries;\n    each(geoms, function (geom) {\n      if (geom.labelsContainer) {\n        groups.push(geom.labelsContainer);\n      }\n    });\n    var minX = Infinity;\n    var maxX = -Infinity;\n    var minY = Infinity;\n    var maxY = -Infinity;\n    each(groups, function (group) {\n      var children = group.get('children');\n      children.forEach(function (child) {\n        if (child.type === 'group' && child.get('children').length === 0) {\n          return;\n        }\n\n        var bbox = child.getBBox();\n\n        if (bbox.minX < minX) {\n          minX = bbox.minX;\n        }\n\n        if (bbox.maxX > maxX) {\n          maxX = bbox.maxX;\n        }\n\n        if (bbox.minY < minY) {\n          minY = bbox.minY;\n        }\n\n        if (bbox.maxY > maxY) {\n          maxY = bbox.maxY;\n        }\n      });\n    });\n    var panelRange = view.coordinateBBox; //right\n\n    var rightDist = Math.max(maxX - parseFloat(panelRange.maxX), 0);\n\n    if (rightDist > 0) {\n      var ratio = panelRange.width / (panelRange.width + rightDist);\n      rightDist *= ratio;\n    } //left\n\n\n    var leftDist = Math.max(parseFloat(panelRange.minX) - minX, 0);\n\n    if (leftDist > 0) {\n      var ratio = panelRange.width / (panelRange.width + leftDist);\n      leftDist *= ratio;\n    } //top\n\n\n    var topDist = Math.max(parseFloat(panelRange.minY) - minY, 0);\n\n    if (topDist > 0) {\n      var ratio = panelRange.height / (panelRange.height + topDist);\n      topDist *= ratio;\n    } //bottom\n\n\n    var bottomDist = Math.max(maxY - parseFloat(panelRange.maxY), 0);\n\n    if (bottomDist > 0) {\n      var ratio = panelRange.height / (panelRange.height + bottomDist);\n      bottomDist *= ratio;\n    }\n\n    return [topDist, rightDist, bottomDist, leftDist];\n  };\n\n  PaddingController.prototype._mergeBBox = function (bboxes) {\n    var minX = Infinity;\n    var maxX = -Infinity;\n    var minY = Infinity;\n    var maxY = -Infinity;\n    each(bboxes, function (bbox) {\n      var box = bbox;\n      minX = Math.min(box.minX, minX);\n      maxX = Math.max(box.maxX, maxX);\n      minY = Math.min(box.minY, minY);\n      maxY = Math.max(box.maxY, maxY);\n    });\n    return {\n      minX: minX,\n      maxX: maxX,\n      minY: minY,\n      maxY: maxY\n    };\n  };\n\n  return PaddingController;\n}();\n\nexport default PaddingController;","map":{"version":3,"sources":["../../../src/base/controller/padding.ts"],"names":[],"mappings":"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","sourcesContent":["import { filter, each, isArray, clone } from '@antv/util';\nimport ViewLayer from '../view-layer';\nimport BBox from '../../util/bbox';\nimport { getLegendComponents, getAxisComponents } from '../../util/common';\nimport { View, Axis, Legend } from '../../dependents';\n\ninterface ControllerConfig {\n  plot: ViewLayer;\n}\n\n/**\n * 处理图表padding的逻辑：\n * 注册参与padding的自定义组件\n */\n\nexport default class PaddingController {\n  private plot: ViewLayer;\n  private bleeding: number[];\n\n  private innerPaddingComponents: any[] = [];\n  private outerPaddingComponents: any[] = [];\n\n  constructor(cfg: ControllerConfig) {\n    this.plot = cfg.plot;\n  }\n\n  public registerPadding(component: any, type: 'outer' | 'inner' = 'outer', checkIfExist: boolean = false) {\n    if (type === 'inner') {\n      if (checkIfExist) {\n        if (!this.innerPaddingComponents.find((c) => c == component)) {\n          this.innerPaddingComponents.push(component);\n        }\n      } else {\n        this.innerPaddingComponents.push(component);\n      }\n    } else {\n      if (checkIfExist) {\n        if (!this.outerPaddingComponents.find((c) => c == component)) {\n          this.outerPaddingComponents.push(component);\n        }\n      } else {\n        this.outerPaddingComponents.push(component);\n      }\n    }\n  }\n\n  public getPaddingComponents(type: 'outer' | 'inner' = 'outer') {\n    return (type === 'outer' ? this.outerPaddingComponents : this.innerPaddingComponents) || [];\n  }\n\n  /**\n   * 清除已经注册的元素\n   */\n  public clear() {\n    this.innerPaddingComponents = [];\n    // 一些组件是在view渲染完成之后渲染初始化的\n    // TODO: afterRender的什么时候清除\n    this.outerPaddingComponents = filter(this.outerPaddingComponents, (component) => component.afterRender);\n  }\n\n  public clearOuterComponents() {\n    each(this.outerPaddingComponents, (component) => {\n      if (component.afterRender) {\n        component.destroy();\n      }\n    });\n    this.outerPaddingComponents = [];\n  }\n\n  public getPadding() {\n    const props = this.plot.options;\n    const padding = props.padding ? props.padding : this.plot.config.theme.padding;\n    if (padding === 'auto') {\n      return [0, 0, 0, 1];\n    }\n    return padding;\n  }\n\n  /** view层的padding计算 */\n  public processAutoPadding() {\n    const padding = this._getInnerAutoPadding();\n    this.plot.updateConfig({\n      padding,\n    });\n    this.plot.render();\n  }\n\n  public processOuterPadding() {\n    if (!this.plot.layerBBox) {\n      this.plot.layerBBox = new BBox(this.plot.x, this.plot.y, this.plot.width, this.plot.height);\n    }\n    let viewMinX = this.plot.layerBBox.minX;\n    let viewMaxX = this.plot.layerBBox.maxX;\n    let viewMinY = this.plot.layerBBox.minY;\n    let viewMaxY = this.plot.layerBBox.maxY;\n    each(this.outerPaddingComponents, (component) => {\n      const { position } = component;\n      if (component.destroyed) {\n        return;\n      }\n      const { minX, maxX, minY, maxY } = component.getBBox();\n      if (maxY >= viewMinY && maxY <= viewMaxY && position === 'top') {\n        viewMinY = maxY;\n      }\n      if (minY >= viewMinY && minY <= viewMaxY && position === 'bottom') {\n        viewMaxY = minY;\n      }\n      if (maxX > viewMinX && maxX <= viewMaxX && position === 'left') {\n        viewMinX = maxX;\n      }\n      if (minX >= viewMinX && maxX <= viewMaxX && position === 'right') {\n        viewMaxX = minX;\n      }\n    });\n    return new BBox(viewMinX, viewMinY, viewMaxX - viewMinX, viewMaxY - viewMinY);\n  }\n\n  private _getInnerAutoPadding() {\n    const props = this.plot.options;\n    const view = this.plot.view;\n    const viewRange = view.coordinateBBox;\n    const { maxX, maxY, minY, minX } = viewRange;\n    const bleeding = this.plot.config.theme.bleeding;\n    if (isArray(bleeding)) {\n      each(bleeding, (it, index) => {\n        if (typeof bleeding[index] === 'function') {\n          bleeding[index] = bleeding[index](props);\n        }\n      });\n    }\n    this.bleeding = clone(bleeding);\n    // 参与auto padding的components: axis legend label annotation\n    const components_bbox = [new BBox(viewRange.minX, viewRange.minY, viewRange.width, viewRange.height)];\n    if (this.plot.config.coordinate?.type === 'cartesian') {\n      this._getCartesianAxis(view, components_bbox[0], components_bbox);\n    }\n    let box = this._mergeBBox(components_bbox);\n    this._getLegend(view, box, components_bbox);\n    box = this._mergeBBox(components_bbox);\n    // 参与auto padding的自定义组件\n    const components = this.innerPaddingComponents;\n    each(components, (obj) => {\n      const component = obj;\n      const bbox = component.getBBox();\n      components_bbox.push(bbox);\n    });\n    box = this._mergeBBox(components_bbox);\n    const padding = [\n      minY - box.minY + this.bleeding[0], // 上面超出的部分\n      box.maxX - maxX + this.bleeding[1], // 右边超出的部分\n      box.maxY - maxY + this.bleeding[2], // 下边超出的部分\n      minX - box.minX + this.bleeding[3],\n    ];\n    // label、annotation等\n    const panelPadding = this._getPanel(view);\n    padding[0] += panelPadding[0];\n    padding[1] += panelPadding[1];\n    padding[2] += panelPadding[2];\n    padding[3] += panelPadding[3];\n    return padding;\n  }\n\n  private _getCartesianAxis(view: View, globalBBox, bboxes: BBox[]) {\n    const axes = getAxisComponents(view);\n    const { isTransposed } = view.getCoordinate();\n    each(axes, (axis: Axis.Base) => {\n      if (axis.get('group').get('children').length === 0) {\n        return;\n      }\n      const position = axis.get('position');\n      const { minX, minY, width, height } = axis.getLayoutBBox();\n      if (!isTransposed) {\n        if (position === 'left') {\n          bboxes.push(new BBox(globalBBox.minX - width, minY, width, height));\n        } else if (position === 'bottom') {\n          bboxes.push(new BBox(minX, globalBBox.maxY, width, height));\n        } else if (position === 'right') {\n          bboxes.push(new BBox(globalBBox.maxX, minY, width, height));\n        }\n      } else {\n        if (position === 'bottom') {\n          bboxes.push(new BBox(globalBBox.minX - width, minY, width, height));\n        } else if (position === 'left') {\n          bboxes.push(new BBox(minX, globalBBox.maxY, width, height));\n        } else if (position === 'top') {\n          bboxes.push(new BBox(globalBBox.maxX, minY, width, height));\n        }\n      }\n    });\n  }\n\n  private _getLegend(view, globalBBox, bboxes) {\n    const legends = getLegendComponents(view);\n    each(legends, (legend: Legend.Base) => {\n      const position = legend.get('position').split('-')[0];\n      const { minX, minY, width, height } = legend.getLayoutBBox();\n      if (position === 'top') {\n        bboxes.push(new BBox(minX, globalBBox.minY - height, width, height));\n      } else if (position === 'bottom') {\n        bboxes.push(new BBox(minX, globalBBox.maxY, width, height));\n      } else if (position === 'left') {\n        bboxes.push(new BBox(globalBBox.minX - width, minY, width, height));\n      } else {\n        bboxes.push(new BBox(globalBBox.maxX, minY, width, height));\n      }\n    });\n  }\n\n  private _getPanel(view) {\n    const groups = [];\n    const geoms = view.geometries;\n    each(geoms, (geom) => {\n      if (geom.labelsContainer) {\n        groups.push(geom.labelsContainer);\n      }\n    });\n    let minX = Infinity;\n    let maxX = -Infinity;\n    let minY = Infinity;\n    let maxY = -Infinity;\n    each(groups, (group) => {\n      const children = group.get('children');\n      children.forEach((child) => {\n        if (child.type === 'group' && child.get('children').length === 0) {\n          return;\n        }\n        const bbox = child.getBBox();\n        if (bbox.minX < minX) {\n          minX = bbox.minX;\n        }\n        if (bbox.maxX > maxX) {\n          maxX = bbox.maxX;\n        }\n        if (bbox.minY < minY) {\n          minY = bbox.minY;\n        }\n        if (bbox.maxY > maxY) {\n          maxY = bbox.maxY;\n        }\n      });\n    });\n    const panelRange = view.coordinateBBox;\n    //right\n    let rightDist = Math.max(maxX - parseFloat(panelRange.maxX), 0);\n    if (rightDist > 0) {\n      const ratio = panelRange.width / (panelRange.width + rightDist);\n      rightDist *= ratio;\n    }\n    //left\n    let leftDist = Math.max(parseFloat(panelRange.minX) - minX, 0);\n    if (leftDist > 0) {\n      const ratio = panelRange.width / (panelRange.width + leftDist);\n      leftDist *= ratio;\n    }\n    //top\n    let topDist = Math.max(parseFloat(panelRange.minY) - minY, 0);\n    if (topDist > 0) {\n      const ratio = panelRange.height / (panelRange.height + topDist);\n      topDist *= ratio;\n    }\n    //bottom\n    let bottomDist = Math.max(maxY - parseFloat(panelRange.maxY), 0);\n    if (bottomDist > 0) {\n      const ratio = panelRange.height / (panelRange.height + bottomDist);\n      bottomDist *= ratio;\n    }\n\n    return [topDist, rightDist, bottomDist, leftDist];\n  }\n\n  private _mergeBBox(bboxes) {\n    let minX = Infinity;\n    let maxX = -Infinity;\n    let minY = Infinity;\n    let maxY = -Infinity;\n\n    each(bboxes, (bbox) => {\n      const box = bbox;\n      minX = Math.min(box.minX, minX);\n      maxX = Math.max(box.maxX, maxX);\n      minY = Math.min(box.minY, minY);\n      maxY = Math.max(box.maxY, maxY);\n    });\n\n    return { minX, maxX, minY, maxY };\n  }\n\n  /* private adjustAxisPadding(view: View, padding: MarginPadding) {\n    // 3.6.x Axis组件的 autoRotate padding 修正\n    const xAxis = view.get('axisController').axes[0];\n    if (!xAxis || !xAxis.get('autoRotateLabel') || !xAxis.getOffsetByRotateAngle) {\n      return;\n    }\n    const labelRenderer = xAxis.get('labelRenderer');\n    const labels = labelRenderer.getLabels();\n    const curOffset = xAxis.getOffsetByRotateAngle(xAxis.get('autoRotateAngle'));\n    const curTotalWidth = Math.abs(xAxis.get('end').x - xAxis.get('start').x);\n    // 如果只有一项数据, 平均宽度 = 总宽\n    let curAvgWidth = curTotalWidth;\n    // 当多项数据时，根据 label 位置计算均宽\n    if (labels.length > 1) {\n      curAvgWidth = Math.abs(labels[1].attr('x') - labels[0].attr('x'));\n    }\n    const newTotalWidth = curTotalWidth - padding[1] - padding[3];\n    const newAvgWidth = (curAvgWidth * newTotalWidth) / curTotalWidth;\n    const newOffset = xAxis.getOffsetByRotateAngle(xAxis.getAutoRotateAngleByAvgWidth(newAvgWidth));\n\n    if (newOffset > curOffset) {\n      padding[2] += newOffset - curOffset;\n    }\n  }*/\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}