{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { deepMix, isFunction, get, forIn, isNumber } from '@antv/util';\nimport { modifyCSS } from '@antv/dom-util';\nimport BBox from '../../util/bbox';\nimport { registerPlotType } from '../../base/global';\nimport ViewLayer from '../../base/view-layer';\nimport { getGeom } from '../../geoms/factory';\nimport { extractScale } from '../../util/scale';\nimport { rgb2arr } from '../../util/color';\nimport LiquidStatistic from './component/liquid-statistic';\nimport * as EventParser from './event';\nimport './geometry/shape/liquid';\nimport './animation/liquid-move-in';\nvar G2_GEOM_MAP = {\n  column: 'interval'\n};\nvar PLOT_GEOM_MAP = {\n  interval: 'liquid'\n};\n\nvar LiquidLayer =\n/** @class */\nfunction (_super) {\n  __extends(LiquidLayer, _super);\n\n  function LiquidLayer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'liquid';\n    _this.shouldFadeInAnnotation = true;\n    return _this;\n  }\n\n  LiquidLayer.getDefaultOptions = function () {\n    var cfg = {\n      padding: [0, 0, 0, 0],\n      animation: {\n        factor: 0.4,\n        easing: 'easeExpOut',\n        duration: 800\n      },\n      liquidStyle: {\n        lineWidth: 2\n      },\n      color: '#6a99f9',\n      interactions: [],\n      statistic: {\n        visible: true\n      }\n    };\n    return deepMix({}, _super.getDefaultOptions.call(this), cfg);\n  };\n\n  LiquidLayer.prototype.beforeInit = function () {\n    var _a = this.options,\n        min = _a.min,\n        max = _a.max,\n        value = _a.value;\n\n    if (!isNumber(min)) {\n      throw new Error('The min value of Liquid is required, and the type of min must be Number.');\n    }\n\n    if (!isNumber(max)) {\n      throw new Error('The max value of Liquid is required, and the type of max must be Number.');\n    }\n\n    if (!isNumber(value)) {\n      throw new Error('The value of Liquid is required, and the type of value must be Number.');\n    }\n  };\n\n  LiquidLayer.prototype.init = function () {\n    this.options.data = [{}];\n\n    _super.prototype.init.call(this);\n  };\n\n  LiquidLayer.prototype.coord = function () {\n    return;\n  };\n\n  LiquidLayer.prototype.scale = function () {\n    var props = this.options;\n    var min = props.min,\n        max = props.max;\n    var scales = {\n      value: {}\n    };\n    extractScale(scales.value, {\n      min: Math.min(min, max),\n      max: Math.max(min, max)\n    }); // @ts-ignore\n\n    this.setConfig('scales', scales);\n\n    _super.prototype.scale.call(this);\n  };\n\n  LiquidLayer.prototype.axis = function () {\n    this.setConfig('axes', false);\n  };\n\n  LiquidLayer.prototype.adjustLiquid = function (liquid) {\n    var props = this.options;\n    liquid.shape = {\n      values: ['liquid-fill-gauge']\n    };\n    liquid.tooltip = false;\n    var liquidStyle = props.liquidStyle;\n    if (isFunction(liquidStyle)) liquidStyle = liquidStyle();\n\n    if (liquidStyle) {\n      liquid.style = liquidStyle;\n    }\n  };\n\n  LiquidLayer.prototype.addGeometry = function () {\n    var liquid = getGeom('interval', 'main', {\n      positionFields: [1, 'value'],\n      plot: this\n    });\n    this.adjustLiquid(liquid);\n    var viewRange = this.getViewRange();\n    var defaultSize = Math.min(viewRange.width, viewRange.height) * 0.8;\n    var liquidSize = this.options.liquidSize ? this.options.liquidSize : defaultSize;\n    liquid.size = {\n      values: [liquidSize]\n    };\n    this.liquid = liquid;\n    this.setConfig('geometry', liquid);\n  };\n\n  LiquidLayer.prototype.animation = function () {\n    var props = this.options;\n\n    if (props.animation === false) {\n      /** 关闭动画 */\n      this.liquid.animate = false;\n    } else {\n      var factor = get(props, 'animation.factor');\n      var easing = get(props, 'animation.easing');\n      var duration = get(props, 'animation.duration');\n      this.liquid.animate = {\n        appear: {\n          animation: 'liquidMoveIn',\n          factor: factor,\n          easing: easing,\n          duration: duration\n        }\n      };\n    }\n  };\n\n  LiquidLayer.prototype.geometryParser = function (dim, type) {\n    if (dim === 'g2') {\n      return G2_GEOM_MAP[type];\n    }\n\n    return PLOT_GEOM_MAP[type];\n  };\n\n  LiquidLayer.prototype.annotation = function () {\n    var annotationConfigs = [];\n    var statisticConfig = this.extractStatistic();\n    annotationConfigs.push(statisticConfig);\n    this.setConfig('annotations', annotationConfigs);\n  }; // 新增 htmlContent 支持，兼容旧功能\n\n\n  LiquidLayer.prototype.useHtmlContent = function () {\n    var props = this.options;\n    var statistic = props.statistic || {};\n    return isFunction(statistic.htmlContent);\n  };\n\n  LiquidLayer.prototype.extractStatistic = function () {\n    if (this.useHtmlContent()) {\n      return;\n    }\n\n    var props = this.options;\n    var statistic = props.statistic || {};\n    var content;\n\n    if (isFunction(statistic.formatter)) {\n      content = statistic.formatter(props.value);\n    } else {\n      content = \"\" + props.value;\n    }\n\n    var fontSize;\n    var shadowBlur;\n\n    if (content) {\n      var contentWidth = Math.min(this.width, this.height);\n      fontSize = contentWidth / content.length * 0.5;\n      shadowBlur = Math.max(1, Math.ceil(0.025 * fontSize));\n    }\n\n    var opacity;\n\n    if (statistic.visible === false) {\n      return;\n    }\n\n    var statisticConfig = deepMix({\n      style: {\n        fontSize: fontSize,\n        shadowBlur: shadowBlur\n      }\n    }, {\n      top: true,\n      content: content,\n      type: 'text',\n      position: ['50%', '50%'],\n      style: {\n        opacity: opacity,\n        fill: 'transparent',\n        shadowColor: 'transparent',\n        textAlign: 'center'\n      }\n    }, statistic);\n    delete statisticConfig.visible;\n    delete statisticConfig.formatter;\n    delete statisticConfig.adjustColor;\n    return statisticConfig;\n  };\n\n  LiquidLayer.prototype.parseEvents = function () {\n    _super.prototype.parseEvents.call(this, EventParser);\n  };\n\n  LiquidLayer.prototype.afterRender = function () {\n    var _a;\n\n    if (((_a = this.options.statistic) === null || _a === void 0 ? void 0 : _a.visible) && !this.useHtmlContent()) {\n      this.fadeInAnnotation();\n    }\n\n    var options = this.options;\n    var padding = options.padding ? options.padding : this.config.theme.padding;\n    /** defaultState */\n\n    if (options.defaultState && padding !== 'auto') {\n      this.stateController.defaultStates(options.defaultState);\n    }\n    /** autopadding */\n\n\n    if (padding === 'auto') {\n      this.paddingController.processAutoPadding();\n    }\n\n    if (this.useHtmlContent()) {\n      var container = this.canvas.get('container');\n\n      if (this.statistic) {\n        container.removeChild(this.statistic.wrapperNode);\n      }\n      /**图中心文本 */\n\n\n      if (this.options.statistic && this.options.statistic.visible) {\n        var container_1 = this.canvas.get('container');\n        modifyCSS(container_1, {\n          position: 'relative'\n        });\n        this.statistic = new LiquidStatistic(__assign({\n          container: container_1,\n          view: this.view,\n          plot: this\n        }, this.options.statistic));\n        this.statistic.render();\n      }\n\n      _super.prototype.afterRender.call(this);\n    }\n  };\n\n  LiquidLayer.prototype.processData = function () {\n    var props = this.options;\n    return [{\n      _: '_',\n      value: props.value\n    }];\n  };\n\n  LiquidLayer.prototype.changeValue = function (value) {\n    var props = this.options;\n    props.value = value;\n    this.changeData([]);\n  };\n\n  LiquidLayer.prototype.fadeInAnnotation = function () {\n    var _this = this;\n\n    var props = this.options;\n    var textShape = this.view.foregroundGroup.findAll(function (el) {\n      return el.get('name') === 'annotation-text';\n    })[0];\n    var animation = props.animation || {};\n    var colorStyle = this.calcAnnotationColorStyle();\n\n    if (this.shouldFadeInAnnotation) {\n      textShape.animate(colorStyle, animation.duration * Math.min(1, 1.5 * animation.factor), null, function () {\n        _this.shouldFadeInAnnotation = false;\n      });\n    } else {\n      forIn(colorStyle, function (v, k) {\n        return textShape.attr(k, v);\n      });\n    }\n  };\n\n  LiquidLayer.prototype.calcAnnotationColorStyle = function () {\n    var props = this.options;\n    var lightColorStyle = {\n      fill: '#f6f6f6',\n      shadowColor: 'black'\n    };\n    var darkColorStyle = {\n      fill: '#303030',\n      shadowColor: 'white'\n    };\n\n    if (get(props, 'statistic.adjustColor') === false) {\n      return {\n        fill: get(props, 'statistic.style.fill', darkColorStyle.fill),\n        shadowColor: get(props, 'statistic.style.shadowColor', darkColorStyle.shadowColor)\n      };\n    }\n\n    var min = props.min,\n        max = props.max;\n    var value = props.value;\n    min = Math.min(min, max);\n    max = Math.max(min, max);\n    var percent;\n\n    if (min == max) {\n      percent = 1;\n    } else {\n      percent = (value - min) / (max - min);\n    }\n\n    if (percent > 0.55) {\n      var waveColor = this.options.color;\n      var waveOpacity = 0.8;\n      var rgb = rgb2arr(waveColor);\n      var gray = Math.round(rgb[0] * 0.299 + rgb[1] * 0.587 + rgb[2] * 0.114) / waveOpacity;\n      return gray < 156 ? lightColorStyle : darkColorStyle;\n    }\n\n    return darkColorStyle;\n  };\n\n  LiquidLayer.prototype.updateConfig = function (cfg) {\n    _super.prototype.updateConfig.call(this, cfg);\n\n    this.shouldFadeInAnnotation = true;\n  };\n\n  LiquidLayer.prototype.getViewRange = function () {\n    var viewRange = _super.prototype.getViewRange.call(this);\n\n    var liquidStyle = this.options.liquidStyle;\n    var strokeWidth = liquidStyle.lineWidth ? liquidStyle.lineWidth : 2;\n    var minX = viewRange.minX,\n        minY = viewRange.minY,\n        width = viewRange.width,\n        height = viewRange.height;\n    var size = Math.min(width, height) - strokeWidth * 2;\n    var cx = minX + width / 2;\n    var cy = minY + height / 2;\n    var x = cx - size / 2;\n    var y = cy - size / 2;\n    return new BBox(x, y, size, size);\n  };\n\n  return LiquidLayer;\n}(ViewLayer);\n\nexport default LiquidLayer;\nregisterPlotType('liquid', LiquidLayer);","map":{"version":3,"sources":["../../../src/plots/liquid/layer.ts"],"names":[],"mappings":"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","sourcesContent":["import { deepMix, isFunction, get, forIn, isNumber } from '@antv/util';\nimport { modifyCSS } from '@antv/dom-util';\nimport BBox from '../../util/bbox';\nimport { registerPlotType } from '../../base/global';\nimport { LayerConfig } from '../../base/layer';\nimport ViewLayer, { ViewConfig } from '../../base/view-layer';\nimport { getGeom } from '../../geoms/factory';\nimport { extractScale } from '../../util/scale';\nimport { DataItem, TextStyle } from '../../interface/config';\nimport { rgb2arr } from '../../util/color';\nimport LiquidStatistic from './component/liquid-statistic';\nimport * as EventParser from './event';\nimport './geometry/shape/liquid';\nimport './animation/liquid-move-in';\n\nconst G2_GEOM_MAP = {\n  column: 'interval',\n};\n\nconst PLOT_GEOM_MAP = {\n  interval: 'liquid',\n};\n\nexport interface LiquidStyle {}\n\ninterface LiquidStatisticStyle {\n  visible?: boolean;\n  formatter?: (value) => string;\n  style?: TextStyle;\n  adjustColor?: boolean;\n  htmlContent?: (...args: any) => HTMLDivElement | string;\n}\n\nexport interface LiquidViewConfig extends Partial<ViewConfig> {\n  statistic?: LiquidStatisticStyle;\n  liquidSize?: number;\n  min: number;\n  max: number;\n  value: number;\n  liquidStyle?: LiquidStyle | ((...args: any[]) => LiquidStyle);\n}\n\nexport interface LiquidLayerConfig extends LiquidViewConfig, LayerConfig {\n  data: DataItem[];\n}\n\nexport default class LiquidLayer<T extends LiquidLayerConfig = LiquidLayerConfig> extends ViewLayer<T> {\n  private statistic: any; // 保存指标卡实例用于响应交互\n\n  public static getDefaultOptions(): Partial<LiquidViewConfig> {\n    const cfg: Partial<LiquidViewConfig> = {\n      padding: [0, 0, 0, 0],\n      animation: {\n        factor: 0.4,\n        easing: 'easeExpOut',\n        duration: 800,\n      },\n      liquidStyle: {\n        lineWidth: 2,\n      },\n      color: '#6a99f9',\n      interactions: [],\n      statistic: {\n        visible: true,\n      },\n    };\n    return deepMix({}, super.getDefaultOptions(), cfg);\n  }\n\n  public liquid: any;\n  public type: string = 'liquid';\n  private shouldFadeInAnnotation: boolean = true;\n\n  public beforeInit() {\n    const { min, max, value } = this.options;\n    if (!isNumber(min)) {\n      throw new Error('The min value of Liquid is required, and the type of min must be Number.');\n    }\n    if (!isNumber(max)) {\n      throw new Error('The max value of Liquid is required, and the type of max must be Number.');\n    }\n    if (!isNumber(value)) {\n      throw new Error('The value of Liquid is required, and the type of value must be Number.');\n    }\n  }\n\n  public init() {\n    this.options.data = [{}];\n    super.init();\n  }\n\n  protected coord() {\n    return;\n  }\n\n  protected scale() {\n    const props = this.options;\n    const { min, max } = props;\n    const scales = {\n      value: {},\n    };\n    extractScale(scales.value, {\n      min: Math.min(min, max),\n      max: Math.max(min, max),\n    });\n    // @ts-ignore\n    this.setConfig('scales', scales);\n    super.scale();\n  }\n\n  protected axis(): void {\n    this.setConfig('axes', false);\n  }\n\n  protected adjustLiquid(liquid) {\n    const { options: props } = this;\n\n    liquid.shape = {\n      values: ['liquid-fill-gauge'],\n    };\n\n    liquid.tooltip = false;\n\n    let liquidStyle = props.liquidStyle;\n    if (isFunction(liquidStyle)) liquidStyle = liquidStyle();\n    if (liquidStyle) {\n      liquid.style = liquidStyle;\n    }\n  }\n\n  protected addGeometry(): void {\n    const liquid = getGeom('interval', 'main', {\n      positionFields: [1, 'value'],\n      plot: this,\n    });\n    this.adjustLiquid(liquid);\n    const viewRange = this.getViewRange();\n    const defaultSize = Math.min(viewRange.width, viewRange.height) * 0.8;\n    const liquidSize = this.options.liquidSize ? this.options.liquidSize : defaultSize;\n    liquid.size = { values: [liquidSize] };\n    this.liquid = liquid;\n    this.setConfig('geometry', liquid);\n  }\n\n  protected animation() {\n    const props = this.options;\n    if (props.animation === false) {\n      /** 关闭动画 */\n      this.liquid.animate = false;\n    } else {\n      const factor = get(props, 'animation.factor');\n      const easing = get(props, 'animation.easing');\n      const duration = get(props, 'animation.duration');\n      this.liquid.animate = {\n        appear: {\n          animation: 'liquidMoveIn',\n          factor,\n          easing,\n          duration,\n        },\n      };\n    }\n  }\n\n  protected geometryParser(dim: string, type: string): string {\n    if (dim === 'g2') {\n      return G2_GEOM_MAP[type];\n    }\n    return PLOT_GEOM_MAP[type];\n  }\n\n  protected annotation() {\n    const annotationConfigs = [];\n\n    const statisticConfig = this.extractStatistic();\n    annotationConfigs.push(statisticConfig);\n    this.setConfig('annotations', annotationConfigs);\n  }\n\n  // 新增 htmlContent 支持，兼容旧功能\n  protected useHtmlContent(): boolean {\n    const props = this.options;\n    const statistic: any = props.statistic || {};\n    return isFunction(statistic.htmlContent);\n  }\n\n  protected extractStatistic() {\n    if (this.useHtmlContent()) {\n      return;\n    }\n    const props = this.options;\n    const statistic: any = props.statistic || {};\n\n    let content;\n    if (isFunction(statistic.formatter)) {\n      content = statistic.formatter(props.value);\n    } else {\n      content = `${props.value}`;\n    }\n\n    let fontSize;\n    let shadowBlur;\n    if (content) {\n      const contentWidth = Math.min(this.width, this.height);\n      fontSize = (contentWidth / content.length) * 0.5;\n      shadowBlur = Math.max(1, Math.ceil(0.025 * fontSize));\n    }\n    let opacity;\n    if (statistic.visible === false) {\n      return;\n    }\n\n    const statisticConfig = deepMix(\n      {\n        style: {\n          fontSize,\n          shadowBlur,\n        },\n      },\n      {\n        top: true,\n        content,\n        type: 'text',\n        position: ['50%', '50%'],\n        style: {\n          opacity,\n          fill: 'transparent',\n          shadowColor: 'transparent',\n          textAlign: 'center',\n        },\n      },\n      statistic\n    );\n    delete statisticConfig.visible;\n    delete statisticConfig.formatter;\n    delete statisticConfig.adjustColor;\n    return statisticConfig;\n  }\n\n  protected parseEvents() {\n    super.parseEvents(EventParser);\n  }\n\n  public afterRender() {\n    if (this.options.statistic?.visible && !this.useHtmlContent()) {\n      this.fadeInAnnotation();\n    }\n    const { options } = this;\n    const padding = options.padding ? options.padding : this.config.theme.padding;\n    /** defaultState */\n    if (options.defaultState && padding !== 'auto') {\n      this.stateController.defaultStates(options.defaultState);\n    }\n    /** autopadding */\n    if (padding === 'auto') {\n      this.paddingController.processAutoPadding();\n    }\n    if (this.useHtmlContent()) {\n      const container = this.canvas.get('container');\n      if (this.statistic) {\n        container.removeChild(this.statistic.wrapperNode);\n      }\n      /**图中心文本 */\n      if (this.options.statistic && this.options.statistic.visible) {\n        const container = this.canvas.get('container');\n        modifyCSS(container, { position: 'relative' });\n        this.statistic = new LiquidStatistic({\n          container,\n          view: this.view,\n          plot: this,\n          ...this.options.statistic,\n        });\n        this.statistic.render();\n      }\n      super.afterRender();\n    }\n  }\n\n  protected processData(): DataItem[] | undefined {\n    const props = this.options;\n    return [{ _: '_', value: props.value }];\n  }\n\n  public changeValue(value: number): void {\n    const props = this.options;\n    props.value = value;\n    this.changeData([]);\n  }\n  protected fadeInAnnotation() {\n    const props = this.options;\n    const textShape = this.view.foregroundGroup.findAll((el) => {\n      return el.get('name') === 'annotation-text';\n    })[0];\n    const animation: any = props.animation || {};\n    const colorStyle = this.calcAnnotationColorStyle();\n    if (this.shouldFadeInAnnotation) {\n      textShape.animate(colorStyle, animation.duration * Math.min(1, 1.5 * animation.factor), null, () => {\n        this.shouldFadeInAnnotation = false;\n      });\n    } else {\n      forIn(colorStyle, (v, k) => textShape.attr(k, v));\n    }\n  }\n\n  protected calcAnnotationColorStyle() {\n    const { options: props } = this;\n\n    const lightColorStyle = { fill: '#f6f6f6', shadowColor: 'black' };\n    const darkColorStyle = { fill: '#303030', shadowColor: 'white' };\n    if (get(props, 'statistic.adjustColor') === false) {\n      return {\n        fill: get(props, 'statistic.style.fill', darkColorStyle.fill),\n        shadowColor: get(props, 'statistic.style.shadowColor', darkColorStyle.shadowColor),\n      };\n    }\n\n    let { min, max } = props;\n    const { value } = props;\n    min = Math.min(min, max);\n    max = Math.max(min, max);\n    let percent;\n    if (min == max) {\n      percent = 1;\n    } else {\n      percent = (value - min) / (max - min);\n    }\n\n    if (percent > 0.55) {\n      const waveColor = this.options.color as string;\n      const waveOpacity = 0.8;\n      const rgb = rgb2arr(waveColor);\n      const gray = Math.round(rgb[0] * 0.299 + rgb[1] * 0.587 + rgb[2] * 0.114) / waveOpacity;\n      return gray < 156 ? lightColorStyle : darkColorStyle;\n    }\n    return darkColorStyle;\n  }\n\n  public updateConfig(cfg: Partial<T>): void {\n    super.updateConfig(cfg);\n    this.shouldFadeInAnnotation = true;\n  }\n\n  protected getViewRange() {\n    const viewRange = super.getViewRange();\n    const liquidStyle: any = this.options.liquidStyle;\n    const strokeWidth = liquidStyle.lineWidth ? liquidStyle.lineWidth : 2;\n    const { minX, minY, width, height } = viewRange;\n    const size = Math.min(width, height) - strokeWidth * 2;\n    const cx = minX + width / 2;\n    const cy = minY + height / 2;\n    const x = cx - size / 2;\n    const y = cy - size / 2;\n    return new BBox(x, y, size, size);\n  }\n}\n\nregisterPlotType('liquid', LiquidLayer);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}