{"ast":null,"code":"import { registerShape } from '../../dependents';\nimport { deepMix } from '@antv/util';\nexport function getRectPath(cx, cy, width, height, size) {\n  var w = width * size;\n  var h = height * size;\n  var path = [['M', cx - w / 2, cy + h / 2], ['Q', cx - w / 2, cy, cx - w / 2, cy - h / 2], ['Q', cx, cy - h / 2, cx + w / 2, cy - h / 2], ['Q', cx + w / 2, cy, cx + w / 2, cy + h / 2], ['Q', cx, cy + h / 2, cx - w / 2, cy + h / 2], ['Z']];\n  return path;\n}\nexport function getCirclePath(x, y, size) {\n  var path = [['M', x, y], ['l', -size, 0], ['a', size, size, 0, 1, 0, size * 2, 0], ['a', size, size, 0, 1, 0, -(size * 2), 0], ['Z']];\n  return path;\n}\nexport function getCircleCurve(x, y, size) {\n  // 计算四个角和中点\n  var path = [['M', x - size, y], ['Q', x - size, y - size, x, y - size], ['Q', x + size, y - size, x + size, y], ['Q', x + size, y + size, x, y + size], ['Q', x - size, y + size, x - size, y], ['Z']];\n  return path;\n}\nregisterShape('polygon', 'rect', {\n  draw: function draw(cfg, container) {\n    var points = this.parsePoints(cfg.points);\n    var width = points[2].x - points[0].x;\n    var height = points[0].y - points[1].y;\n    var centerX = points[0].x + width / 2;\n    var centerY = points[1].y + height / 2;\n    /*\n        const path = [\n          ['M', centerX - w / 2, centerY + h / 2],\n          ['L', centerX - w / 2, centerY - h / 2],\n          ['L', centerX + w / 2, centerY - h / 2],\n          ['L', centerX + w / 2, centerY + h / 2],\n          ['Z'],\n        ];\n        */\n\n    var path = getRectPath(centerX, centerY, width, height, cfg.size);\n    return container.addShape('path', {\n      attrs: deepMix({}, {\n        path: path,\n        fill: cfg.color,\n        opacity: 1\n      }, cfg.style)\n    });\n  }\n});\nregisterShape('point', 'curvePoint', {\n  draw: function draw(cfg, container) {\n    var path = getCirclePath(cfg.x, cfg.y, cfg.size);\n    return container.addShape('path', {\n      attrs: deepMix({}, {\n        path: path,\n        fill: cfg.color,\n        opacity: 1\n      }, cfg.style)\n    });\n  }\n});","map":{"version":3,"sources":["../../../src/plots/heatmap/shape.ts"],"names":[],"mappings":"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","sourcesContent":["import { registerShape } from '../../dependents';\nimport { deepMix } from '@antv/util';\n\nexport function getRectPath(cx, cy, width, height, size) {\n  const w = width * size;\n  const h = height * size;\n  const path = [\n    ['M', cx - w / 2, cy + h / 2],\n    ['Q', cx - w / 2, cy, cx - w / 2, cy - h / 2],\n    ['Q', cx, cy - h / 2, cx + w / 2, cy - h / 2],\n    ['Q', cx + w / 2, cy, cx + w / 2, cy + h / 2],\n    ['Q', cx, cy + h / 2, cx - w / 2, cy + h / 2],\n    ['Z'],\n  ];\n  return path;\n}\n\nexport function getCirclePath(x, y, size) {\n  const path = [\n    ['M', x, y],\n    ['l', -size, 0],\n    ['a', size, size, 0, 1, 0, size * 2, 0],\n    ['a', size, size, 0, 1, 0, -(size * 2), 0],\n    ['Z'],\n  ];\n  return path;\n}\n\nexport function getCircleCurve(x, y, size) {\n  // 计算四个角和中点\n  const path = [\n    ['M', x - size, y],\n    ['Q', x - size, y - size, x, y - size],\n    ['Q', x + size, y - size, x + size, y],\n    ['Q', x + size, y + size, x, y + size],\n    ['Q', x - size, y + size, x - size, y],\n    ['Z'],\n  ];\n  return path;\n}\n\nregisterShape('polygon', 'rect', {\n  draw(cfg, container) {\n    const points = this.parsePoints(cfg.points);\n    const width = points[2].x - points[0].x;\n    const height = points[0].y - points[1].y;\n    const centerX = points[0].x + width / 2;\n    const centerY = points[1].y + height / 2;\n    /*\n        const path = [\n          ['M', centerX - w / 2, centerY + h / 2],\n          ['L', centerX - w / 2, centerY - h / 2],\n          ['L', centerX + w / 2, centerY - h / 2],\n          ['L', centerX + w / 2, centerY + h / 2],\n          ['Z'],\n        ];\n        */\n    const path = getRectPath(centerX, centerY, width, height, cfg.size);\n    return container.addShape('path', {\n      attrs: deepMix(\n        {},\n        {\n          path,\n          fill: cfg.color,\n          opacity: 1,\n        },\n        cfg.style\n      ),\n    });\n  },\n});\n\nregisterShape('point', 'curvePoint', {\n  draw(cfg, container) {\n    const path = getCirclePath(cfg.x, cfg.y, cfg.size);\n    return container.addShape('path', {\n      attrs: deepMix(\n        {},\n        {\n          path,\n          fill: cfg.color,\n          opacity: 1,\n        },\n        cfg.style\n      ),\n    });\n  },\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}