{"ast":null,"code":"import { wrapBehavior, each, contains } from '@antv/util';\n\nfunction isSameShape(shape1, shape2) {\n  if (shape1 && shape2 && shape1 === shape2) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction isPointInBBox(point, bbox) {\n  if (point.x >= bbox.minX && point.x <= bbox.maxX && point.y >= bbox.minY && point.y <= bbox.maxY) {\n    return true;\n  }\n\n  return false;\n}\n\nvar EventController =\n/** @class */\nfunction () {\n  function EventController(cfg) {\n    this.plot = cfg.plot;\n    this.canvas = cfg.canvas;\n    this.eventHandlers = [];\n  }\n\n  EventController.prototype.bindEvents = function () {\n    this.addEvent(this.canvas, 'mousedown', wrapBehavior(this, 'onEvents'));\n    this.addEvent(this.canvas, 'mousemove', wrapBehavior(this, 'onMove'));\n    this.addEvent(this.canvas, 'mouseup', wrapBehavior(this, 'onEvents'));\n    this.addEvent(this.canvas, 'click', wrapBehavior(this, 'onEvents'));\n    this.addEvent(this.canvas, 'dblclick', wrapBehavior(this, 'onEvents'));\n    this.addEvent(this.canvas, 'contextmenu', wrapBehavior(this, 'onEvents'));\n    this.addEvent(this.canvas, 'wheel', wrapBehavior(this, 'onEvents'));\n  };\n\n  EventController.prototype.clearEvents = function () {\n    var eventHandlers = this.eventHandlers;\n    each(eventHandlers, function (eh) {\n      eh.target.off(eh.type, eh.handler);\n    });\n  };\n\n  EventController.prototype.addEvent = function (target, eventType, handler) {\n    target.on(eventType, handler);\n    this.eventHandlers.push({\n      target: target,\n      type: eventType,\n      handler: handler\n    });\n  };\n\n  EventController.prototype.onEvents = function (ev) {\n    var eventObj = this.getEventObj(ev);\n    var target = ev.target; // 判断是否拾取到view以外的shape\n\n    if (!this.isShapeInView(target) && target.name) {\n      this.plot.emit(target.name + \":\" + ev.type, ev);\n    }\n\n    this.plot.emit(\"\" + ev.type, eventObj); // layer事件\n\n    var layers = this.plot.getLayers();\n\n    if (layers.length > 0) {\n      this.onLayerEvent(layers, eventObj, ev.type);\n    }\n  };\n\n  EventController.prototype.onMove = function (ev) {\n    var target = ev.target;\n    var eventObj = this.getEventObj(ev); // shape的mouseenter, mouseleave和mousemove事件\n\n    if (!this.isShapeInView(target) && target.name) {\n      this.plot.emit(target.name + \":\" + ev.type, eventObj); // mouseleave & mouseenter\n\n      if (this.lastShape && !isSameShape(target, this.lastShape)) {\n        if (this.lastShape) {\n          this.plot.emit(this.lastShape.name + \":mouseleave\", eventObj);\n        }\n\n        this.plot.emit(target.name + \":mouseenter\", eventObj);\n      }\n\n      this.lastShape = target;\n    }\n\n    this.plot.emit('mousemove', eventObj); // layer事件\n\n    var layers = this.plot.getLayers();\n\n    if (layers.length > 0) {\n      this.onLayerEvent(layers, eventObj, 'mousemove');\n    }\n  };\n\n  EventController.prototype.isShapeInView = function (shape) {\n    var groupName = ['frontgroundGroup', 'backgroundGroup', 'panelGroup'];\n    var parent = shape.get('parent');\n\n    while (parent) {\n      var parentName = parent.get('name');\n\n      if (parentName && contains(groupName, parentName)) {\n        return true;\n      }\n\n      parent = parent.get('parent');\n    }\n\n    return false;\n  };\n\n  EventController.prototype.getEventObj = function (ev) {\n    var obj = {\n      clientX: ev.clientX,\n      clientY: ev.clientY,\n      x: ev.x,\n      y: ev.y,\n      plot: this.plot,\n      data: ev.data ? ev.data.data : null,\n      canvas: this.canvas,\n      target: ev.target,\n      gEvent: ev\n    };\n    return obj;\n  };\n\n  EventController.prototype.onLayerEvent = function (layers, eventObj, eventName) {\n    var _this = this;\n\n    each(layers, function (layer) {\n      var bbox = layer.getGlobalBBox();\n\n      if (isPointInBBox({\n        x: eventObj.x,\n        y: eventObj.y\n      }, bbox)) {\n        layer.emit(\"\" + eventName, eventObj);\n        var subLayers = layer.layers;\n\n        if (subLayers.length > 0) {\n          _this.onLayerEvent(subLayers, eventObj, eventName);\n        }\n      }\n    });\n  };\n\n  return EventController;\n}();\n\nexport default EventController;","map":{"version":3,"sources":["../../../src/base/controller/event.ts"],"names":[],"mappings":"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","sourcesContent":["import { wrapBehavior, each, contains } from '@antv/util';\nimport { ICanvas, IShape } from '../../dependents';\nimport BBox from '../../util/bbox';\nimport BasePlot from '../plot';\nimport Layer from '../layer';\nimport { Point } from '../../interface/config';\n\ninterface ControllerConfig {\n  canvas: ICanvas;\n  plot: BasePlot;\n}\n\ninterface IEventHandler {\n  target: ICanvas;\n  type: string;\n  handler: Function;\n}\n\ninterface EventObj {\n  x: number;\n  y: number;\n  clientX: number;\n  clientY: number;\n  target: any;\n  data: any;\n  gEvent: object;\n}\n\nfunction isSameShape(shape1: IShape, shape2: IShape) {\n  if (shape1 && shape2 && shape1 === shape2) {\n    return true;\n  }\n  return false;\n}\n\nfunction isPointInBBox(point: Point, bbox: BBox) {\n  if (point.x >= bbox.minX && point.x <= bbox.maxX && point.y >= bbox.minY && point.y <= bbox.maxY) {\n    return true;\n  }\n  return false;\n}\n\nexport default class EventController {\n  private plot: BasePlot;\n  private canvas: ICanvas;\n  private eventHandlers: IEventHandler[];\n  private lastShape: any;\n\n  constructor(cfg: ControllerConfig) {\n    this.plot = cfg.plot;\n    this.canvas = cfg.canvas;\n    this.eventHandlers = [];\n  }\n\n  public bindEvents() {\n    this.addEvent(this.canvas, 'mousedown', wrapBehavior(this, 'onEvents'));\n    this.addEvent(this.canvas, 'mousemove', wrapBehavior(this, 'onMove'));\n    this.addEvent(this.canvas, 'mouseup', wrapBehavior(this, 'onEvents'));\n    this.addEvent(this.canvas, 'click', wrapBehavior(this, 'onEvents'));\n    this.addEvent(this.canvas, 'dblclick', wrapBehavior(this, 'onEvents'));\n    this.addEvent(this.canvas, 'contextmenu', wrapBehavior(this, 'onEvents'));\n    this.addEvent(this.canvas, 'wheel', wrapBehavior(this, 'onEvents'));\n  }\n\n  public clearEvents() {\n    const eventHandlers = this.eventHandlers;\n    each(eventHandlers, (eh) => {\n      eh.target.off(eh.type, eh.handler);\n    });\n  }\n\n  private addEvent(target: ICanvas, eventType: string, handler: Function) {\n    target.on(eventType, handler);\n    this.eventHandlers.push({ target, type: eventType, handler });\n  }\n\n  private onEvents(ev) {\n    const eventObj = this.getEventObj(ev);\n    const target: any = ev.target;\n    // 判断是否拾取到view以外的shape\n    if (!this.isShapeInView(target) && target.name) {\n      this.plot.emit(`${target.name}:${ev.type}`, ev);\n    }\n    this.plot.emit(`${ev.type}`, eventObj);\n    // layer事件\n    const layers = this.plot.getLayers();\n    if (layers.length > 0) {\n      this.onLayerEvent(layers, eventObj, ev.type);\n    }\n  }\n\n  private onMove(ev) {\n    const target: any = ev.target;\n    const eventObj = this.getEventObj(ev);\n    // shape的mouseenter, mouseleave和mousemove事件\n    if (!this.isShapeInView(target) && target.name) {\n      this.plot.emit(`${target.name}:${ev.type}`, eventObj);\n      // mouseleave & mouseenter\n      if (this.lastShape && !isSameShape(target, this.lastShape)) {\n        if (this.lastShape) {\n          this.plot.emit(`${this.lastShape.name}:mouseleave`, eventObj);\n        }\n        this.plot.emit(`${target.name}:mouseenter`, eventObj);\n      }\n      this.lastShape = target;\n    }\n    this.plot.emit('mousemove', eventObj);\n    // layer事件\n    const layers = this.plot.getLayers();\n    if (layers.length > 0) {\n      this.onLayerEvent(layers, eventObj, 'mousemove');\n    }\n  }\n\n  private isShapeInView(shape: IShape) {\n    const groupName = ['frontgroundGroup', 'backgroundGroup', 'panelGroup'];\n    let parent = shape.get('parent');\n    while (parent) {\n      const parentName = parent.get('name');\n      if (parentName && contains(groupName, parentName)) {\n        return true;\n      }\n      parent = parent.get('parent');\n    }\n    return false;\n  }\n\n  private getEventObj(ev) {\n    const obj = {\n      clientX: ev.clientX,\n      clientY: ev.clientY,\n      x: ev.x,\n      y: ev.y,\n      plot: this.plot,\n      data: ev.data ? ev.data.data : null,\n      canvas: this.canvas,\n      target: ev.target,\n      gEvent: ev, // g事件的event\n    };\n    return obj;\n  }\n\n  private onLayerEvent(layers: Layer[], eventObj: EventObj, eventName: string) {\n    each(layers, (layer) => {\n      const bbox = layer.getGlobalBBox();\n      if (isPointInBBox({ x: eventObj.x, y: eventObj.y }, bbox)) {\n        layer.emit(`${eventName}`, eventObj);\n        const subLayers = layer.layers;\n        if (subLayers.length > 0) {\n          this.onLayerEvent(subLayers, eventObj, eventName);\n        }\n      }\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}