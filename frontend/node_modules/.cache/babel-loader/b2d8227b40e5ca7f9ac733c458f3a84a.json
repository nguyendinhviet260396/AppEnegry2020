{"ast":null,"code":"import _possibleConstructorReturn from \"C:\\\\Users\\\\vietn\\\\Desktop\\\\AppEnegry2020\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\vietn\\\\Desktop\\\\AppEnegry2020\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\vietn\\\\Desktop\\\\AppEnegry2020\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\vietn\\\\Desktop\\\\AppEnegry2020\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"C:\\\\Users\\\\vietn\\\\Desktop\\\\AppEnegry2020\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\vietn\\\\Desktop\\\\AppEnegry2020\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport rescale from 'ml-array-rescale';\nimport { inspectMatrix, inspectMatrixWithOptions } from './inspect';\nimport { installMathOperations } from './mathOperations';\nimport { sumByRow, sumByColumn, sumAll, productByRow, productByColumn, productAll, varianceByRow, varianceByColumn, varianceAll, centerByRow, centerByColumn, centerAll, scaleByRow, scaleByColumn, scaleAll, getScaleByRow, getScaleByColumn, getScaleAll } from './stat';\nimport { checkRowVector, checkRowIndex, checkColumnIndex, checkColumnVector, checkRange, checkIndices } from './util';\nexport var AbstractMatrix = /*#__PURE__*/function () {\n  function AbstractMatrix() {\n    _classCallCheck(this, AbstractMatrix);\n  }\n\n  _createClass(AbstractMatrix, [{\n    key: \"apply\",\n    value: function apply(callback) {\n      if (typeof callback !== 'function') {\n        throw new TypeError('callback must be a function');\n      }\n\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          callback.call(this, i, j);\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"to1DArray\",\n    value: function to1DArray() {\n      var array = [];\n\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          array.push(this.get(i, j));\n        }\n      }\n\n      return array;\n    }\n  }, {\n    key: \"to2DArray\",\n    value: function to2DArray() {\n      var copy = [];\n\n      for (var i = 0; i < this.rows; i++) {\n        copy.push([]);\n\n        for (var j = 0; j < this.columns; j++) {\n          copy[i].push(this.get(i, j));\n        }\n      }\n\n      return copy;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.to2DArray();\n    }\n  }, {\n    key: \"isRowVector\",\n    value: function isRowVector() {\n      return this.rows === 1;\n    }\n  }, {\n    key: \"isColumnVector\",\n    value: function isColumnVector() {\n      return this.columns === 1;\n    }\n  }, {\n    key: \"isVector\",\n    value: function isVector() {\n      return this.rows === 1 || this.columns === 1;\n    }\n  }, {\n    key: \"isSquare\",\n    value: function isSquare() {\n      return this.rows === this.columns;\n    }\n  }, {\n    key: \"isSymmetric\",\n    value: function isSymmetric() {\n      if (this.isSquare()) {\n        for (var i = 0; i < this.rows; i++) {\n          for (var j = 0; j <= i; j++) {\n            if (this.get(i, j) !== this.get(j, i)) {\n              return false;\n            }\n          }\n        }\n\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"isEchelonForm\",\n    value: function isEchelonForm() {\n      var i = 0;\n      var j = 0;\n      var previousColumn = -1;\n      var isEchelonForm = true;\n      var checked = false;\n\n      while (i < this.rows && isEchelonForm) {\n        j = 0;\n        checked = false;\n\n        while (j < this.columns && checked === false) {\n          if (this.get(i, j) === 0) {\n            j++;\n          } else if (this.get(i, j) === 1 && j > previousColumn) {\n            checked = true;\n            previousColumn = j;\n          } else {\n            isEchelonForm = false;\n            checked = true;\n          }\n        }\n\n        i++;\n      }\n\n      return isEchelonForm;\n    }\n  }, {\n    key: \"isReducedEchelonForm\",\n    value: function isReducedEchelonForm() {\n      var i = 0;\n      var j = 0;\n      var previousColumn = -1;\n      var isReducedEchelonForm = true;\n      var checked = false;\n\n      while (i < this.rows && isReducedEchelonForm) {\n        j = 0;\n        checked = false;\n\n        while (j < this.columns && checked === false) {\n          if (this.get(i, j) === 0) {\n            j++;\n          } else if (this.get(i, j) === 1 && j > previousColumn) {\n            checked = true;\n            previousColumn = j;\n          } else {\n            isReducedEchelonForm = false;\n            checked = true;\n          }\n        }\n\n        for (var k = j + 1; k < this.rows; k++) {\n          if (this.get(i, k) !== 0) {\n            isReducedEchelonForm = false;\n          }\n        }\n\n        i++;\n      }\n\n      return isReducedEchelonForm;\n    }\n  }, {\n    key: \"echelonForm\",\n    value: function echelonForm() {\n      var result = this.clone();\n      var h = 0;\n      var k = 0;\n\n      while (h < result.rows && k < result.columns) {\n        var iMax = h;\n\n        for (var i = h; i < result.rows; i++) {\n          if (result.get(i, k) > result.get(iMax, k)) {\n            iMax = i;\n          }\n        }\n\n        if (result.get(iMax, k) === 0) {\n          k++;\n        } else {\n          result.swapRows(h, iMax);\n          var tmp = result.get(h, k);\n\n          for (var j = k; j < result.columns; j++) {\n            result.set(h, j, result.get(h, j) / tmp);\n          }\n\n          for (var _i = h + 1; _i < result.rows; _i++) {\n            var factor = result.get(_i, k) / result.get(h, k);\n            result.set(_i, k, 0);\n\n            for (var _j = k + 1; _j < result.columns; _j++) {\n              result.set(_i, _j, result.get(_i, _j) - result.get(h, _j) * factor);\n            }\n          }\n\n          h++;\n          k++;\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"reducedEchelonForm\",\n    value: function reducedEchelonForm() {\n      var result = this.echelonForm();\n      var m = result.columns;\n      var n = result.rows;\n      var h = n - 1;\n\n      while (h >= 0) {\n        if (result.maxRow(h) === 0) {\n          h--;\n        } else {\n          var p = 0;\n          var pivot = false;\n\n          while (p < n && pivot === false) {\n            if (result.get(h, p) === 1) {\n              pivot = true;\n            } else {\n              p++;\n            }\n          }\n\n          for (var i = 0; i < h; i++) {\n            var factor = result.get(i, p);\n\n            for (var j = p; j < m; j++) {\n              var tmp = result.get(i, j) - factor * result.get(h, j);\n              result.set(i, j, tmp);\n            }\n          }\n\n          h--;\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"set\",\n    value: function set() {\n      throw new Error('set method is unimplemented');\n    }\n  }, {\n    key: \"get\",\n    value: function get() {\n      throw new Error('get method is unimplemented');\n    }\n  }, {\n    key: \"repeat\",\n    value: function repeat() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (typeof options !== 'object') {\n        throw new TypeError('options must be an object');\n      }\n\n      var _options$rows = options.rows,\n          rows = _options$rows === void 0 ? 1 : _options$rows,\n          _options$columns = options.columns,\n          columns = _options$columns === void 0 ? 1 : _options$columns;\n\n      if (!Number.isInteger(rows) || rows <= 0) {\n        throw new TypeError('rows must be a positive integer');\n      }\n\n      if (!Number.isInteger(columns) || columns <= 0) {\n        throw new TypeError('columns must be a positive integer');\n      }\n\n      var matrix = new Matrix(this.rows * rows, this.columns * columns);\n\n      for (var i = 0; i < rows; i++) {\n        for (var j = 0; j < columns; j++) {\n          matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n        }\n      }\n\n      return matrix;\n    }\n  }, {\n    key: \"fill\",\n    value: function fill(value) {\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          this.set(i, j, value);\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"neg\",\n    value: function neg() {\n      return this.mulS(-1);\n    }\n  }, {\n    key: \"getRow\",\n    value: function getRow(index) {\n      checkRowIndex(this, index);\n      var row = [];\n\n      for (var i = 0; i < this.columns; i++) {\n        row.push(this.get(index, i));\n      }\n\n      return row;\n    }\n  }, {\n    key: \"getRowVector\",\n    value: function getRowVector(index) {\n      return Matrix.rowVector(this.getRow(index));\n    }\n  }, {\n    key: \"setRow\",\n    value: function setRow(index, array) {\n      checkRowIndex(this, index);\n      array = checkRowVector(this, array);\n\n      for (var i = 0; i < this.columns; i++) {\n        this.set(index, i, array[i]);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"swapRows\",\n    value: function swapRows(row1, row2) {\n      checkRowIndex(this, row1);\n      checkRowIndex(this, row2);\n\n      for (var i = 0; i < this.columns; i++) {\n        var temp = this.get(row1, i);\n        this.set(row1, i, this.get(row2, i));\n        this.set(row2, i, temp);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"getColumn\",\n    value: function getColumn(index) {\n      checkColumnIndex(this, index);\n      var column = [];\n\n      for (var i = 0; i < this.rows; i++) {\n        column.push(this.get(i, index));\n      }\n\n      return column;\n    }\n  }, {\n    key: \"getColumnVector\",\n    value: function getColumnVector(index) {\n      return Matrix.columnVector(this.getColumn(index));\n    }\n  }, {\n    key: \"setColumn\",\n    value: function setColumn(index, array) {\n      checkColumnIndex(this, index);\n      array = checkColumnVector(this, array);\n\n      for (var i = 0; i < this.rows; i++) {\n        this.set(i, index, array[i]);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"swapColumns\",\n    value: function swapColumns(column1, column2) {\n      checkColumnIndex(this, column1);\n      checkColumnIndex(this, column2);\n\n      for (var i = 0; i < this.rows; i++) {\n        var temp = this.get(i, column1);\n        this.set(i, column1, this.get(i, column2));\n        this.set(i, column2, temp);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"addRowVector\",\n    value: function addRowVector(vector) {\n      vector = checkRowVector(this, vector);\n\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          this.set(i, j, this.get(i, j) + vector[j]);\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"subRowVector\",\n    value: function subRowVector(vector) {\n      vector = checkRowVector(this, vector);\n\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          this.set(i, j, this.get(i, j) - vector[j]);\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"mulRowVector\",\n    value: function mulRowVector(vector) {\n      vector = checkRowVector(this, vector);\n\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          this.set(i, j, this.get(i, j) * vector[j]);\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"divRowVector\",\n    value: function divRowVector(vector) {\n      vector = checkRowVector(this, vector);\n\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          this.set(i, j, this.get(i, j) / vector[j]);\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"addColumnVector\",\n    value: function addColumnVector(vector) {\n      vector = checkColumnVector(this, vector);\n\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          this.set(i, j, this.get(i, j) + vector[i]);\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"subColumnVector\",\n    value: function subColumnVector(vector) {\n      vector = checkColumnVector(this, vector);\n\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          this.set(i, j, this.get(i, j) - vector[i]);\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"mulColumnVector\",\n    value: function mulColumnVector(vector) {\n      vector = checkColumnVector(this, vector);\n\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          this.set(i, j, this.get(i, j) * vector[i]);\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"divColumnVector\",\n    value: function divColumnVector(vector) {\n      vector = checkColumnVector(this, vector);\n\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          this.set(i, j, this.get(i, j) / vector[i]);\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"mulRow\",\n    value: function mulRow(index, value) {\n      checkRowIndex(this, index);\n\n      for (var i = 0; i < this.columns; i++) {\n        this.set(index, i, this.get(index, i) * value);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"mulColumn\",\n    value: function mulColumn(index, value) {\n      checkColumnIndex(this, index);\n\n      for (var i = 0; i < this.rows; i++) {\n        this.set(i, index, this.get(i, index) * value);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"max\",\n    value: function max() {\n      var v = this.get(0, 0);\n\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          if (this.get(i, j) > v) {\n            v = this.get(i, j);\n          }\n        }\n      }\n\n      return v;\n    }\n  }, {\n    key: \"maxIndex\",\n    value: function maxIndex() {\n      var v = this.get(0, 0);\n      var idx = [0, 0];\n\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          if (this.get(i, j) > v) {\n            v = this.get(i, j);\n            idx[0] = i;\n            idx[1] = j;\n          }\n        }\n      }\n\n      return idx;\n    }\n  }, {\n    key: \"min\",\n    value: function min() {\n      var v = this.get(0, 0);\n\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          if (this.get(i, j) < v) {\n            v = this.get(i, j);\n          }\n        }\n      }\n\n      return v;\n    }\n  }, {\n    key: \"minIndex\",\n    value: function minIndex() {\n      var v = this.get(0, 0);\n      var idx = [0, 0];\n\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          if (this.get(i, j) < v) {\n            v = this.get(i, j);\n            idx[0] = i;\n            idx[1] = j;\n          }\n        }\n      }\n\n      return idx;\n    }\n  }, {\n    key: \"maxRow\",\n    value: function maxRow(row) {\n      checkRowIndex(this, row);\n      var v = this.get(row, 0);\n\n      for (var i = 1; i < this.columns; i++) {\n        if (this.get(row, i) > v) {\n          v = this.get(row, i);\n        }\n      }\n\n      return v;\n    }\n  }, {\n    key: \"maxRowIndex\",\n    value: function maxRowIndex(row) {\n      checkRowIndex(this, row);\n      var v = this.get(row, 0);\n      var idx = [row, 0];\n\n      for (var i = 1; i < this.columns; i++) {\n        if (this.get(row, i) > v) {\n          v = this.get(row, i);\n          idx[1] = i;\n        }\n      }\n\n      return idx;\n    }\n  }, {\n    key: \"minRow\",\n    value: function minRow(row) {\n      checkRowIndex(this, row);\n      var v = this.get(row, 0);\n\n      for (var i = 1; i < this.columns; i++) {\n        if (this.get(row, i) < v) {\n          v = this.get(row, i);\n        }\n      }\n\n      return v;\n    }\n  }, {\n    key: \"minRowIndex\",\n    value: function minRowIndex(row) {\n      checkRowIndex(this, row);\n      var v = this.get(row, 0);\n      var idx = [row, 0];\n\n      for (var i = 1; i < this.columns; i++) {\n        if (this.get(row, i) < v) {\n          v = this.get(row, i);\n          idx[1] = i;\n        }\n      }\n\n      return idx;\n    }\n  }, {\n    key: \"maxColumn\",\n    value: function maxColumn(column) {\n      checkColumnIndex(this, column);\n      var v = this.get(0, column);\n\n      for (var i = 1; i < this.rows; i++) {\n        if (this.get(i, column) > v) {\n          v = this.get(i, column);\n        }\n      }\n\n      return v;\n    }\n  }, {\n    key: \"maxColumnIndex\",\n    value: function maxColumnIndex(column) {\n      checkColumnIndex(this, column);\n      var v = this.get(0, column);\n      var idx = [0, column];\n\n      for (var i = 1; i < this.rows; i++) {\n        if (this.get(i, column) > v) {\n          v = this.get(i, column);\n          idx[0] = i;\n        }\n      }\n\n      return idx;\n    }\n  }, {\n    key: \"minColumn\",\n    value: function minColumn(column) {\n      checkColumnIndex(this, column);\n      var v = this.get(0, column);\n\n      for (var i = 1; i < this.rows; i++) {\n        if (this.get(i, column) < v) {\n          v = this.get(i, column);\n        }\n      }\n\n      return v;\n    }\n  }, {\n    key: \"minColumnIndex\",\n    value: function minColumnIndex(column) {\n      checkColumnIndex(this, column);\n      var v = this.get(0, column);\n      var idx = [0, column];\n\n      for (var i = 1; i < this.rows; i++) {\n        if (this.get(i, column) < v) {\n          v = this.get(i, column);\n          idx[0] = i;\n        }\n      }\n\n      return idx;\n    }\n  }, {\n    key: \"diag\",\n    value: function diag() {\n      var min = Math.min(this.rows, this.columns);\n      var diag = [];\n\n      for (var i = 0; i < min; i++) {\n        diag.push(this.get(i, i));\n      }\n\n      return diag;\n    }\n  }, {\n    key: \"norm\",\n    value: function norm() {\n      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'frobenius';\n      var result = 0;\n\n      if (type === 'max') {\n        return this.max();\n      } else if (type === 'frobenius') {\n        for (var i = 0; i < this.rows; i++) {\n          for (var j = 0; j < this.columns; j++) {\n            result = result + this.get(i, j) * this.get(i, j);\n          }\n        }\n\n        return Math.sqrt(result);\n      } else {\n        throw new RangeError(\"unknown norm type: \".concat(type));\n      }\n    }\n  }, {\n    key: \"cumulativeSum\",\n    value: function cumulativeSum() {\n      var sum = 0;\n\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          sum += this.get(i, j);\n          this.set(i, j, sum);\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"dot\",\n    value: function dot(vector2) {\n      if (AbstractMatrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n      var vector1 = this.to1DArray();\n\n      if (vector1.length !== vector2.length) {\n        throw new RangeError('vectors do not have the same size');\n      }\n\n      var dot = 0;\n\n      for (var i = 0; i < vector1.length; i++) {\n        dot += vector1[i] * vector2[i];\n      }\n\n      return dot;\n    }\n  }, {\n    key: \"mmul\",\n    value: function mmul(other) {\n      other = Matrix.checkMatrix(other);\n      var m = this.rows;\n      var n = this.columns;\n      var p = other.columns;\n      var result = new Matrix(m, p);\n      var Bcolj = new Float64Array(n);\n\n      for (var j = 0; j < p; j++) {\n        for (var k = 0; k < n; k++) {\n          Bcolj[k] = other.get(k, j);\n        }\n\n        for (var i = 0; i < m; i++) {\n          var s = 0;\n\n          for (var _k = 0; _k < n; _k++) {\n            s += this.get(i, _k) * Bcolj[_k];\n          }\n\n          result.set(i, j, s);\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"strassen2x2\",\n    value: function strassen2x2(other) {\n      other = Matrix.checkMatrix(other);\n      var result = new Matrix(2, 2);\n      var a11 = this.get(0, 0);\n      var b11 = other.get(0, 0);\n      var a12 = this.get(0, 1);\n      var b12 = other.get(0, 1);\n      var a21 = this.get(1, 0);\n      var b21 = other.get(1, 0);\n      var a22 = this.get(1, 1);\n      var b22 = other.get(1, 1); // Compute intermediate values.\n\n      var m1 = (a11 + a22) * (b11 + b22);\n      var m2 = (a21 + a22) * b11;\n      var m3 = a11 * (b12 - b22);\n      var m4 = a22 * (b21 - b11);\n      var m5 = (a11 + a12) * b22;\n      var m6 = (a21 - a11) * (b11 + b12);\n      var m7 = (a12 - a22) * (b21 + b22); // Combine intermediate values into the output.\n\n      var c00 = m1 + m4 - m5 + m7;\n      var c01 = m3 + m5;\n      var c10 = m2 + m4;\n      var c11 = m1 - m2 + m3 + m6;\n      result.set(0, 0, c00);\n      result.set(0, 1, c01);\n      result.set(1, 0, c10);\n      result.set(1, 1, c11);\n      return result;\n    }\n  }, {\n    key: \"strassen3x3\",\n    value: function strassen3x3(other) {\n      other = Matrix.checkMatrix(other);\n      var result = new Matrix(3, 3);\n      var a00 = this.get(0, 0);\n      var a01 = this.get(0, 1);\n      var a02 = this.get(0, 2);\n      var a10 = this.get(1, 0);\n      var a11 = this.get(1, 1);\n      var a12 = this.get(1, 2);\n      var a20 = this.get(2, 0);\n      var a21 = this.get(2, 1);\n      var a22 = this.get(2, 2);\n      var b00 = other.get(0, 0);\n      var b01 = other.get(0, 1);\n      var b02 = other.get(0, 2);\n      var b10 = other.get(1, 0);\n      var b11 = other.get(1, 1);\n      var b12 = other.get(1, 2);\n      var b20 = other.get(2, 0);\n      var b21 = other.get(2, 1);\n      var b22 = other.get(2, 2);\n      var m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n      var m2 = (a00 - a10) * (-b01 + b11);\n      var m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n      var m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n      var m5 = (a10 + a11) * (-b00 + b01);\n      var m6 = a00 * b00;\n      var m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n      var m8 = (-a00 + a20) * (b02 - b12);\n      var m9 = (a20 + a21) * (-b00 + b02);\n      var m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n      var m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n      var m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n      var m13 = (a02 - a22) * (b11 - b21);\n      var m14 = a02 * b20;\n      var m15 = (a21 + a22) * (-b20 + b21);\n      var m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n      var m17 = (a02 - a12) * (b12 - b22);\n      var m18 = (a11 + a12) * (-b20 + b22);\n      var m19 = a01 * b10;\n      var m20 = a12 * b21;\n      var m21 = a10 * b02;\n      var m22 = a20 * b01;\n      var m23 = a22 * b22;\n      var c00 = m6 + m14 + m19;\n      var c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n      var c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n      var c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n      var c11 = m2 + m4 + m5 + m6 + m20;\n      var c12 = m14 + m16 + m17 + m18 + m21;\n      var c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n      var c21 = m12 + m13 + m14 + m15 + m22;\n      var c22 = m6 + m7 + m8 + m9 + m23;\n      result.set(0, 0, c00);\n      result.set(0, 1, c01);\n      result.set(0, 2, c02);\n      result.set(1, 0, c10);\n      result.set(1, 1, c11);\n      result.set(1, 2, c12);\n      result.set(2, 0, c20);\n      result.set(2, 1, c21);\n      result.set(2, 2, c22);\n      return result;\n    }\n  }, {\n    key: \"mmulStrassen\",\n    value: function mmulStrassen(y) {\n      y = Matrix.checkMatrix(y);\n      var x = this.clone();\n      var r1 = x.rows;\n      var c1 = x.columns;\n      var r2 = y.rows;\n      var c2 = y.columns;\n\n      if (c1 !== r2) {\n        // eslint-disable-next-line no-console\n        console.warn(\"Multiplying \".concat(r1, \" x \").concat(c1, \" and \").concat(r2, \" x \").concat(c2, \" matrix: dimensions do not match.\"));\n      } // Put a matrix into the top left of a matrix of zeros.\n      // `rows` and `cols` are the dimensions of the output matrix.\n\n\n      function embed(mat, rows, cols) {\n        var r = mat.rows;\n        var c = mat.columns;\n\n        if (r === rows && c === cols) {\n          return mat;\n        } else {\n          var resultat = AbstractMatrix.zeros(rows, cols);\n          resultat = resultat.setSubMatrix(mat, 0, 0);\n          return resultat;\n        }\n      } // Make sure both matrices are the same size.\n      // This is exclusively for simplicity:\n      // this algorithm can be implemented with matrices of different sizes.\n\n\n      var r = Math.max(r1, r2);\n      var c = Math.max(c1, c2);\n      x = embed(x, r, c);\n      y = embed(y, r, c); // Our recursive multiplication function.\n\n      function blockMult(a, b, rows, cols) {\n        // For small matrices, resort to naive multiplication.\n        if (rows <= 512 || cols <= 512) {\n          return a.mmul(b); // a is equivalent to this\n        } // Apply dynamic padding.\n\n\n        if (rows % 2 === 1 && cols % 2 === 1) {\n          a = embed(a, rows + 1, cols + 1);\n          b = embed(b, rows + 1, cols + 1);\n        } else if (rows % 2 === 1) {\n          a = embed(a, rows + 1, cols);\n          b = embed(b, rows + 1, cols);\n        } else if (cols % 2 === 1) {\n          a = embed(a, rows, cols + 1);\n          b = embed(b, rows, cols + 1);\n        }\n\n        var halfRows = parseInt(a.rows / 2, 10);\n        var halfCols = parseInt(a.columns / 2, 10); // Subdivide input matrices.\n\n        var a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n        var b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n        var a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n        var b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n        var a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n        var b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n        var a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n        var b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1); // Compute intermediate values.\n\n        var m1 = blockMult(AbstractMatrix.add(a11, a22), AbstractMatrix.add(b11, b22), halfRows, halfCols);\n        var m2 = blockMult(AbstractMatrix.add(a21, a22), b11, halfRows, halfCols);\n        var m3 = blockMult(a11, AbstractMatrix.sub(b12, b22), halfRows, halfCols);\n        var m4 = blockMult(a22, AbstractMatrix.sub(b21, b11), halfRows, halfCols);\n        var m5 = blockMult(AbstractMatrix.add(a11, a12), b22, halfRows, halfCols);\n        var m6 = blockMult(AbstractMatrix.sub(a21, a11), AbstractMatrix.add(b11, b12), halfRows, halfCols);\n        var m7 = blockMult(AbstractMatrix.sub(a12, a22), AbstractMatrix.add(b21, b22), halfRows, halfCols); // Combine intermediate values into the output.\n\n        var c11 = AbstractMatrix.add(m1, m4);\n        c11.sub(m5);\n        c11.add(m7);\n        var c12 = AbstractMatrix.add(m3, m5);\n        var c21 = AbstractMatrix.add(m2, m4);\n        var c22 = AbstractMatrix.sub(m1, m2);\n        c22.add(m3);\n        c22.add(m6); // Crop output to the desired size (undo dynamic padding).\n\n        var resultat = AbstractMatrix.zeros(2 * c11.rows, 2 * c11.columns);\n        resultat = resultat.setSubMatrix(c11, 0, 0);\n        resultat = resultat.setSubMatrix(c12, c11.rows, 0);\n        resultat = resultat.setSubMatrix(c21, 0, c11.columns);\n        resultat = resultat.setSubMatrix(c22, c11.rows, c11.columns);\n        return resultat.subMatrix(0, rows - 1, 0, cols - 1);\n      }\n\n      return blockMult(x, y, r, c);\n    }\n  }, {\n    key: \"scaleRows\",\n    value: function scaleRows() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (typeof options !== 'object') {\n        throw new TypeError('options must be an object');\n      }\n\n      var _options$min = options.min,\n          min = _options$min === void 0 ? 0 : _options$min,\n          _options$max = options.max,\n          max = _options$max === void 0 ? 1 : _options$max;\n      if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n      if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n      if (min >= max) throw new RangeError('min must be smaller than max');\n      var newMatrix = new Matrix(this.rows, this.columns);\n\n      for (var i = 0; i < this.rows; i++) {\n        var row = this.getRow(i);\n        rescale(row, {\n          min: min,\n          max: max,\n          output: row\n        });\n        newMatrix.setRow(i, row);\n      }\n\n      return newMatrix;\n    }\n  }, {\n    key: \"scaleColumns\",\n    value: function scaleColumns() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (typeof options !== 'object') {\n        throw new TypeError('options must be an object');\n      }\n\n      var _options$min2 = options.min,\n          min = _options$min2 === void 0 ? 0 : _options$min2,\n          _options$max2 = options.max,\n          max = _options$max2 === void 0 ? 1 : _options$max2;\n      if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n      if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n      if (min >= max) throw new RangeError('min must be smaller than max');\n      var newMatrix = new Matrix(this.rows, this.columns);\n\n      for (var i = 0; i < this.columns; i++) {\n        var column = this.getColumn(i);\n        rescale(column, {\n          min: min,\n          max: max,\n          output: column\n        });\n        newMatrix.setColumn(i, column);\n      }\n\n      return newMatrix;\n    }\n  }, {\n    key: \"flipRows\",\n    value: function flipRows() {\n      var middle = Math.ceil(this.columns / 2);\n\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < middle; j++) {\n          var first = this.get(i, j);\n          var last = this.get(i, this.columns - 1 - j);\n          this.set(i, j, last);\n          this.set(i, this.columns - 1 - j, first);\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"flipColumns\",\n    value: function flipColumns() {\n      var middle = Math.ceil(this.rows / 2);\n\n      for (var j = 0; j < this.columns; j++) {\n        for (var i = 0; i < middle; i++) {\n          var first = this.get(i, j);\n          var last = this.get(this.rows - 1 - i, j);\n          this.set(i, j, last);\n          this.set(this.rows - 1 - i, j, first);\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"kroneckerProduct\",\n    value: function kroneckerProduct(other) {\n      other = Matrix.checkMatrix(other);\n      var m = this.rows;\n      var n = this.columns;\n      var p = other.rows;\n      var q = other.columns;\n      var result = new Matrix(m * p, n * q);\n\n      for (var i = 0; i < m; i++) {\n        for (var j = 0; j < n; j++) {\n          for (var k = 0; k < p; k++) {\n            for (var l = 0; l < q; l++) {\n              result.set(p * i + k, q * j + l, this.get(i, j) * other.get(k, l));\n            }\n          }\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"transpose\",\n    value: function transpose() {\n      var result = new Matrix(this.columns, this.rows);\n\n      for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n          result.set(j, i, this.get(i, j));\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"sortRows\",\n    value: function sortRows() {\n      var compareFunction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : compareNumbers;\n\n      for (var i = 0; i < this.rows; i++) {\n        this.setRow(i, this.getRow(i).sort(compareFunction));\n      }\n\n      return this;\n    }\n  }, {\n    key: \"sortColumns\",\n    value: function sortColumns() {\n      var compareFunction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : compareNumbers;\n\n      for (var i = 0; i < this.columns; i++) {\n        this.setColumn(i, this.getColumn(i).sort(compareFunction));\n      }\n\n      return this;\n    }\n  }, {\n    key: \"subMatrix\",\n    value: function subMatrix(startRow, endRow, startColumn, endColumn) {\n      checkRange(this, startRow, endRow, startColumn, endColumn);\n      var newMatrix = new Matrix(endRow - startRow + 1, endColumn - startColumn + 1);\n\n      for (var i = startRow; i <= endRow; i++) {\n        for (var j = startColumn; j <= endColumn; j++) {\n          newMatrix.set(i - startRow, j - startColumn, this.get(i, j));\n        }\n      }\n\n      return newMatrix;\n    }\n  }, {\n    key: \"subMatrixRow\",\n    value: function subMatrixRow(indices, startColumn, endColumn) {\n      if (startColumn === undefined) startColumn = 0;\n      if (endColumn === undefined) endColumn = this.columns - 1;\n\n      if (startColumn > endColumn || startColumn < 0 || startColumn >= this.columns || endColumn < 0 || endColumn >= this.columns) {\n        throw new RangeError('Argument out of range');\n      }\n\n      var newMatrix = new Matrix(indices.length, endColumn - startColumn + 1);\n\n      for (var i = 0; i < indices.length; i++) {\n        for (var j = startColumn; j <= endColumn; j++) {\n          if (indices[i] < 0 || indices[i] >= this.rows) {\n            throw new RangeError(\"Row index out of range: \".concat(indices[i]));\n          }\n\n          newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n        }\n      }\n\n      return newMatrix;\n    }\n  }, {\n    key: \"subMatrixColumn\",\n    value: function subMatrixColumn(indices, startRow, endRow) {\n      if (startRow === undefined) startRow = 0;\n      if (endRow === undefined) endRow = this.rows - 1;\n\n      if (startRow > endRow || startRow < 0 || startRow >= this.rows || endRow < 0 || endRow >= this.rows) {\n        throw new RangeError('Argument out of range');\n      }\n\n      var newMatrix = new Matrix(endRow - startRow + 1, indices.length);\n\n      for (var i = 0; i < indices.length; i++) {\n        for (var j = startRow; j <= endRow; j++) {\n          if (indices[i] < 0 || indices[i] >= this.columns) {\n            throw new RangeError(\"Column index out of range: \".concat(indices[i]));\n          }\n\n          newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n        }\n      }\n\n      return newMatrix;\n    }\n  }, {\n    key: \"setSubMatrix\",\n    value: function setSubMatrix(matrix, startRow, startColumn) {\n      matrix = Matrix.checkMatrix(matrix);\n      var endRow = startRow + matrix.rows - 1;\n      var endColumn = startColumn + matrix.columns - 1;\n      checkRange(this, startRow, endRow, startColumn, endColumn);\n\n      for (var i = 0; i < matrix.rows; i++) {\n        for (var j = 0; j < matrix.columns; j++) {\n          this.set(startRow + i, startColumn + j, matrix.get(i, j));\n        }\n      }\n\n      return this;\n    }\n  }, {\n    key: \"selection\",\n    value: function selection(rowIndices, columnIndices) {\n      var indices = checkIndices(this, rowIndices, columnIndices);\n      var newMatrix = new Matrix(rowIndices.length, columnIndices.length);\n\n      for (var i = 0; i < indices.row.length; i++) {\n        var rowIndex = indices.row[i];\n\n        for (var j = 0; j < indices.column.length; j++) {\n          var columnIndex = indices.column[j];\n          newMatrix.set(i, j, this.get(rowIndex, columnIndex));\n        }\n      }\n\n      return newMatrix;\n    }\n  }, {\n    key: \"trace\",\n    value: function trace() {\n      var min = Math.min(this.rows, this.columns);\n      var trace = 0;\n\n      for (var i = 0; i < min; i++) {\n        trace += this.get(i, i);\n      }\n\n      return trace;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var newMatrix = new Matrix(this.rows, this.columns);\n\n      for (var row = 0; row < this.rows; row++) {\n        for (var column = 0; column < this.columns; column++) {\n          newMatrix.set(row, column, this.get(row, column));\n        }\n      }\n\n      return newMatrix;\n    }\n  }, {\n    key: \"sum\",\n    value: function sum(by) {\n      switch (by) {\n        case 'row':\n          return sumByRow(this);\n\n        case 'column':\n          return sumByColumn(this);\n\n        case undefined:\n          return sumAll(this);\n\n        default:\n          throw new Error(\"invalid option: \".concat(by));\n      }\n    }\n  }, {\n    key: \"product\",\n    value: function product(by) {\n      switch (by) {\n        case 'row':\n          return productByRow(this);\n\n        case 'column':\n          return productByColumn(this);\n\n        case undefined:\n          return productAll(this);\n\n        default:\n          throw new Error(\"invalid option: \".concat(by));\n      }\n    }\n  }, {\n    key: \"mean\",\n    value: function mean(by) {\n      var sum = this.sum(by);\n\n      switch (by) {\n        case 'row':\n          {\n            for (var i = 0; i < this.rows; i++) {\n              sum[i] /= this.columns;\n            }\n\n            return sum;\n          }\n\n        case 'column':\n          {\n            for (var _i2 = 0; _i2 < this.columns; _i2++) {\n              sum[_i2] /= this.rows;\n            }\n\n            return sum;\n          }\n\n        case undefined:\n          return sum / this.size;\n\n        default:\n          throw new Error(\"invalid option: \".concat(by));\n      }\n    }\n  }, {\n    key: \"variance\",\n    value: function variance(by) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (typeof by === 'object') {\n        options = by;\n        by = undefined;\n      }\n\n      if (typeof options !== 'object') {\n        throw new TypeError('options must be an object');\n      }\n\n      var _options = options,\n          _options$unbiased = _options.unbiased,\n          unbiased = _options$unbiased === void 0 ? true : _options$unbiased,\n          _options$mean = _options.mean,\n          mean = _options$mean === void 0 ? this.mean(by) : _options$mean;\n\n      if (typeof unbiased !== 'boolean') {\n        throw new TypeError('unbiased must be a boolean');\n      }\n\n      switch (by) {\n        case 'row':\n          {\n            if (!Array.isArray(mean)) {\n              throw new TypeError('mean must be an array');\n            }\n\n            return varianceByRow(this, unbiased, mean);\n          }\n\n        case 'column':\n          {\n            if (!Array.isArray(mean)) {\n              throw new TypeError('mean must be an array');\n            }\n\n            return varianceByColumn(this, unbiased, mean);\n          }\n\n        case undefined:\n          {\n            if (typeof mean !== 'number') {\n              throw new TypeError('mean must be a number');\n            }\n\n            return varianceAll(this, unbiased, mean);\n          }\n\n        default:\n          throw new Error(\"invalid option: \".concat(by));\n      }\n    }\n  }, {\n    key: \"standardDeviation\",\n    value: function standardDeviation(by, options) {\n      if (typeof by === 'object') {\n        options = by;\n        by = undefined;\n      }\n\n      var variance = this.variance(by, options);\n\n      if (by === undefined) {\n        return Math.sqrt(variance);\n      } else {\n        for (var i = 0; i < variance.length; i++) {\n          variance[i] = Math.sqrt(variance[i]);\n        }\n\n        return variance;\n      }\n    }\n  }, {\n    key: \"center\",\n    value: function center(by) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (typeof by === 'object') {\n        options = by;\n        by = undefined;\n      }\n\n      if (typeof options !== 'object') {\n        throw new TypeError('options must be an object');\n      }\n\n      var _options2 = options,\n          _options2$center = _options2.center,\n          center = _options2$center === void 0 ? this.mean(by) : _options2$center;\n\n      switch (by) {\n        case 'row':\n          {\n            if (!Array.isArray(center)) {\n              throw new TypeError('center must be an array');\n            }\n\n            centerByRow(this, center);\n            return this;\n          }\n\n        case 'column':\n          {\n            if (!Array.isArray(center)) {\n              throw new TypeError('center must be an array');\n            }\n\n            centerByColumn(this, center);\n            return this;\n          }\n\n        case undefined:\n          {\n            if (typeof center !== 'number') {\n              throw new TypeError('center must be a number');\n            }\n\n            centerAll(this, center);\n            return this;\n          }\n\n        default:\n          throw new Error(\"invalid option: \".concat(by));\n      }\n    }\n  }, {\n    key: \"scale\",\n    value: function scale(by) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (typeof by === 'object') {\n        options = by;\n        by = undefined;\n      }\n\n      if (typeof options !== 'object') {\n        throw new TypeError('options must be an object');\n      }\n\n      var scale = options.scale;\n\n      switch (by) {\n        case 'row':\n          {\n            if (scale === undefined) {\n              scale = getScaleByRow(this);\n            } else if (!Array.isArray(scale)) {\n              throw new TypeError('scale must be an array');\n            }\n\n            scaleByRow(this, scale);\n            return this;\n          }\n\n        case 'column':\n          {\n            if (scale === undefined) {\n              scale = getScaleByColumn(this);\n            } else if (!Array.isArray(scale)) {\n              throw new TypeError('scale must be an array');\n            }\n\n            scaleByColumn(this, scale);\n            return this;\n          }\n\n        case undefined:\n          {\n            if (scale === undefined) {\n              scale = getScaleAll(this);\n            } else if (typeof scale !== 'number') {\n              throw new TypeError('scale must be a number');\n            }\n\n            scaleAll(this, scale);\n            return this;\n          }\n\n        default:\n          throw new Error(\"invalid option: \".concat(by));\n      }\n    }\n  }, {\n    key: \"toString\",\n    value: function toString(options) {\n      return inspectMatrixWithOptions(this, options);\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.rows * this.columns;\n    }\n  }], [{\n    key: \"from1DArray\",\n    value: function from1DArray(newRows, newColumns, newData) {\n      var length = newRows * newColumns;\n\n      if (length !== newData.length) {\n        throw new RangeError('data length does not match given dimensions');\n      }\n\n      var newMatrix = new Matrix(newRows, newColumns);\n\n      for (var row = 0; row < newRows; row++) {\n        for (var column = 0; column < newColumns; column++) {\n          newMatrix.set(row, column, newData[row * newColumns + column]);\n        }\n      }\n\n      return newMatrix;\n    }\n  }, {\n    key: \"rowVector\",\n    value: function rowVector(newData) {\n      var vector = new Matrix(1, newData.length);\n\n      for (var i = 0; i < newData.length; i++) {\n        vector.set(0, i, newData[i]);\n      }\n\n      return vector;\n    }\n  }, {\n    key: \"columnVector\",\n    value: function columnVector(newData) {\n      var vector = new Matrix(newData.length, 1);\n\n      for (var i = 0; i < newData.length; i++) {\n        vector.set(i, 0, newData[i]);\n      }\n\n      return vector;\n    }\n  }, {\n    key: \"zeros\",\n    value: function zeros(rows, columns) {\n      return new Matrix(rows, columns);\n    }\n  }, {\n    key: \"ones\",\n    value: function ones(rows, columns) {\n      return new Matrix(rows, columns).fill(1);\n    }\n  }, {\n    key: \"rand\",\n    value: function rand(rows, columns) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      if (typeof options !== 'object') {\n        throw new TypeError('options must be an object');\n      }\n\n      var _options$random = options.random,\n          random = _options$random === void 0 ? Math.random : _options$random;\n      var matrix = new Matrix(rows, columns);\n\n      for (var i = 0; i < rows; i++) {\n        for (var j = 0; j < columns; j++) {\n          matrix.set(i, j, random());\n        }\n      }\n\n      return matrix;\n    }\n  }, {\n    key: \"randInt\",\n    value: function randInt(rows, columns) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      if (typeof options !== 'object') {\n        throw new TypeError('options must be an object');\n      }\n\n      var _options$min3 = options.min,\n          min = _options$min3 === void 0 ? 0 : _options$min3,\n          _options$max3 = options.max,\n          max = _options$max3 === void 0 ? 1000 : _options$max3,\n          _options$random2 = options.random,\n          random = _options$random2 === void 0 ? Math.random : _options$random2;\n      if (!Number.isInteger(min)) throw new TypeError('min must be an integer');\n      if (!Number.isInteger(max)) throw new TypeError('max must be an integer');\n      if (min >= max) throw new RangeError('min must be smaller than max');\n      var interval = max - min;\n      var matrix = new Matrix(rows, columns);\n\n      for (var i = 0; i < rows; i++) {\n        for (var j = 0; j < columns; j++) {\n          var value = min + Math.round(random() * interval);\n          matrix.set(i, j, value);\n        }\n      }\n\n      return matrix;\n    }\n  }, {\n    key: \"eye\",\n    value: function eye(rows, columns, value) {\n      if (columns === undefined) columns = rows;\n      if (value === undefined) value = 1;\n      var min = Math.min(rows, columns);\n      var matrix = this.zeros(rows, columns);\n\n      for (var i = 0; i < min; i++) {\n        matrix.set(i, i, value);\n      }\n\n      return matrix;\n    }\n  }, {\n    key: \"diag\",\n    value: function diag(data, rows, columns) {\n      var l = data.length;\n      if (rows === undefined) rows = l;\n      if (columns === undefined) columns = rows;\n      var min = Math.min(l, rows, columns);\n      var matrix = this.zeros(rows, columns);\n\n      for (var i = 0; i < min; i++) {\n        matrix.set(i, i, data[i]);\n      }\n\n      return matrix;\n    }\n  }, {\n    key: \"min\",\n    value: function min(matrix1, matrix2) {\n      matrix1 = this.checkMatrix(matrix1);\n      matrix2 = this.checkMatrix(matrix2);\n      var rows = matrix1.rows;\n      var columns = matrix1.columns;\n      var result = new Matrix(rows, columns);\n\n      for (var i = 0; i < rows; i++) {\n        for (var j = 0; j < columns; j++) {\n          result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"max\",\n    value: function max(matrix1, matrix2) {\n      matrix1 = this.checkMatrix(matrix1);\n      matrix2 = this.checkMatrix(matrix2);\n      var rows = matrix1.rows;\n      var columns = matrix1.columns;\n      var result = new this(rows, columns);\n\n      for (var i = 0; i < rows; i++) {\n        for (var j = 0; j < columns; j++) {\n          result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: \"checkMatrix\",\n    value: function checkMatrix(value) {\n      return AbstractMatrix.isMatrix(value) ? value : new Matrix(value);\n    }\n  }, {\n    key: \"isMatrix\",\n    value: function isMatrix(value) {\n      return value != null && value.klass === 'Matrix';\n    }\n  }]);\n\n  return AbstractMatrix;\n}();\nAbstractMatrix.prototype.klass = 'Matrix';\n\nif (typeof Symbol !== 'undefined') {\n  AbstractMatrix.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspectMatrix;\n}\n\nfunction compareNumbers(a, b) {\n  return a - b;\n} // Synonyms\n\n\nAbstractMatrix.random = AbstractMatrix.rand;\nAbstractMatrix.randomInt = AbstractMatrix.randInt;\nAbstractMatrix.diagonal = AbstractMatrix.diag;\nAbstractMatrix.prototype.diagonal = AbstractMatrix.prototype.diag;\nAbstractMatrix.identity = AbstractMatrix.eye;\nAbstractMatrix.prototype.negate = AbstractMatrix.prototype.neg;\nAbstractMatrix.prototype.tensorProduct = AbstractMatrix.prototype.kroneckerProduct;\n\nvar Matrix = /*#__PURE__*/function (_AbstractMatrix) {\n  _inherits(Matrix, _AbstractMatrix);\n\n  var _super = _createSuper(Matrix);\n\n  function Matrix(nRows, nColumns) {\n    var _this;\n\n    _classCallCheck(this, Matrix);\n\n    _this = _super.call(this);\n\n    if (Matrix.isMatrix(nRows)) {\n      return _possibleConstructorReturn(_this, nRows.clone());\n    } else if (Number.isInteger(nRows) && nRows > 0) {\n      // Create an empty matrix\n      _this.data = [];\n\n      if (Number.isInteger(nColumns) && nColumns > 0) {\n        for (var i = 0; i < nRows; i++) {\n          _this.data.push(new Float64Array(nColumns));\n        }\n      } else {\n        throw new TypeError('nColumns must be a positive integer');\n      }\n    } else if (Array.isArray(nRows)) {\n      // Copy the values from the 2D array\n      var arrayData = nRows;\n      nRows = arrayData.length;\n      nColumns = arrayData[0].length;\n\n      if (typeof nColumns !== 'number' || nColumns === 0) {\n        throw new TypeError('Data must be a 2D array with at least one element');\n      }\n\n      _this.data = [];\n\n      for (var _i3 = 0; _i3 < nRows; _i3++) {\n        if (arrayData[_i3].length !== nColumns) {\n          throw new RangeError('Inconsistent array dimensions');\n        }\n\n        _this.data.push(Float64Array.from(arrayData[_i3]));\n      }\n    } else {\n      throw new TypeError('First argument must be a positive number or an array');\n    }\n\n    _this.rows = nRows;\n    _this.columns = nColumns;\n    return _possibleConstructorReturn(_this, _assertThisInitialized(_this));\n  }\n\n  _createClass(Matrix, [{\n    key: \"set\",\n    value: function set(rowIndex, columnIndex, value) {\n      this.data[rowIndex][columnIndex] = value;\n      return this;\n    }\n  }, {\n    key: \"get\",\n    value: function get(rowIndex, columnIndex) {\n      return this.data[rowIndex][columnIndex];\n    }\n  }, {\n    key: \"removeRow\",\n    value: function removeRow(index) {\n      checkRowIndex(this, index);\n\n      if (this.rows === 1) {\n        throw new RangeError('A matrix cannot have less than one row');\n      }\n\n      this.data.splice(index, 1);\n      this.rows -= 1;\n      return this;\n    }\n  }, {\n    key: \"addRow\",\n    value: function addRow(index, array) {\n      if (array === undefined) {\n        array = index;\n        index = this.rows;\n      }\n\n      checkRowIndex(this, index, true);\n      array = Float64Array.from(checkRowVector(this, array, true));\n      this.data.splice(index, 0, array);\n      this.rows += 1;\n      return this;\n    }\n  }, {\n    key: \"removeColumn\",\n    value: function removeColumn(index) {\n      checkColumnIndex(this, index);\n\n      if (this.columns === 1) {\n        throw new RangeError('A matrix cannot have less than one column');\n      }\n\n      for (var i = 0; i < this.rows; i++) {\n        var newRow = new Float64Array(this.columns - 1);\n\n        for (var j = 0; j < index; j++) {\n          newRow[j] = this.data[i][j];\n        }\n\n        for (var _j2 = index + 1; _j2 < this.columns; _j2++) {\n          newRow[_j2 - 1] = this.data[i][_j2];\n        }\n\n        this.data[i] = newRow;\n      }\n\n      this.columns -= 1;\n      return this;\n    }\n  }, {\n    key: \"addColumn\",\n    value: function addColumn(index, array) {\n      if (typeof array === 'undefined') {\n        array = index;\n        index = this.columns;\n      }\n\n      checkColumnIndex(this, index, true);\n      array = checkColumnVector(this, array);\n\n      for (var i = 0; i < this.rows; i++) {\n        var newRow = new Float64Array(this.columns + 1);\n        var j = 0;\n\n        for (; j < index; j++) {\n          newRow[j] = this.data[i][j];\n        }\n\n        newRow[j++] = array[i];\n\n        for (; j < this.columns + 1; j++) {\n          newRow[j] = this.data[i][j - 1];\n        }\n\n        this.data[i] = newRow;\n      }\n\n      this.columns += 1;\n      return this;\n    }\n  }]);\n\n  return Matrix;\n}(AbstractMatrix);\n\nexport { Matrix as default };\ninstallMathOperations(AbstractMatrix, Matrix);","map":{"version":3,"sources":["C:/Users/vietn/Desktop/AppEnegry2020/frontend/node_modules/ml-matrix/src/matrix.js"],"names":["rescale","inspectMatrix","inspectMatrixWithOptions","installMathOperations","sumByRow","sumByColumn","sumAll","productByRow","productByColumn","productAll","varianceByRow","varianceByColumn","varianceAll","centerByRow","centerByColumn","centerAll","scaleByRow","scaleByColumn","scaleAll","getScaleByRow","getScaleByColumn","getScaleAll","checkRowVector","checkRowIndex","checkColumnIndex","checkColumnVector","checkRange","checkIndices","AbstractMatrix","callback","TypeError","i","rows","j","columns","call","array","push","get","copy","to2DArray","isSquare","previousColumn","isEchelonForm","checked","isReducedEchelonForm","k","result","clone","h","iMax","swapRows","tmp","set","factor","echelonForm","m","n","maxRow","p","pivot","Error","options","Number","isInteger","matrix","Matrix","setSubMatrix","value","mulS","index","row","rowVector","getRow","row1","row2","temp","column","columnVector","getColumn","column1","column2","vector","v","idx","min","Math","diag","type","max","sqrt","RangeError","sum","vector2","isMatrix","to1DArray","vector1","length","dot","other","checkMatrix","Bcolj","Float64Array","s","a11","b11","a12","b12","a21","b21","a22","b22","m1","m2","m3","m4","m5","m6","m7","c00","c01","c10","c11","a00","a01","a02","a10","a20","b00","b01","b02","b10","b20","m8","m9","m10","m11","m12","m13","m14","m15","m16","m17","m18","m19","m20","m21","m22","m23","c02","c12","c20","c21","c22","y","x","r1","c1","r2","c2","console","warn","embed","mat","cols","r","c","resultat","zeros","blockMult","a","b","mmul","halfRows","parseInt","halfCols","subMatrix","add","sub","isFinite","newMatrix","output","setRow","setColumn","middle","ceil","first","last","q","l","compareFunction","compareNumbers","sort","startRow","endRow","startColumn","endColumn","indices","undefined","rowIndices","columnIndices","rowIndex","columnIndex","trace","by","size","unbiased","mean","Array","isArray","variance","center","scale","newRows","newColumns","newData","fill","random","interval","round","data","matrix1","matrix2","klass","prototype","Symbol","for","rand","randomInt","randInt","diagonal","identity","eye","negate","neg","tensorProduct","kroneckerProduct","nRows","nColumns","arrayData","from","splice","newRow"],"mappings":"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","sourcesContent":["import rescale from 'ml-array-rescale';\n\nimport { inspectMatrix, inspectMatrixWithOptions } from './inspect';\nimport { installMathOperations } from './mathOperations';\nimport {\n  sumByRow,\n  sumByColumn,\n  sumAll,\n  productByRow,\n  productByColumn,\n  productAll,\n  varianceByRow,\n  varianceByColumn,\n  varianceAll,\n  centerByRow,\n  centerByColumn,\n  centerAll,\n  scaleByRow,\n  scaleByColumn,\n  scaleAll,\n  getScaleByRow,\n  getScaleByColumn,\n  getScaleAll,\n} from './stat';\nimport {\n  checkRowVector,\n  checkRowIndex,\n  checkColumnIndex,\n  checkColumnVector,\n  checkRange,\n  checkIndices,\n} from './util';\n\nexport class AbstractMatrix {\n  static from1DArray(newRows, newColumns, newData) {\n    let length = newRows * newColumns;\n    if (length !== newData.length) {\n      throw new RangeError('data length does not match given dimensions');\n    }\n    let newMatrix = new Matrix(newRows, newColumns);\n    for (let row = 0; row < newRows; row++) {\n      for (let column = 0; column < newColumns; column++) {\n        newMatrix.set(row, column, newData[row * newColumns + column]);\n      }\n    }\n    return newMatrix;\n  }\n\n  static rowVector(newData) {\n    let vector = new Matrix(1, newData.length);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(0, i, newData[i]);\n    }\n    return vector;\n  }\n\n  static columnVector(newData) {\n    let vector = new Matrix(newData.length, 1);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(i, 0, newData[i]);\n    }\n    return vector;\n  }\n\n  static zeros(rows, columns) {\n    return new Matrix(rows, columns);\n  }\n\n  static ones(rows, columns) {\n    return new Matrix(rows, columns).fill(1);\n  }\n\n  static rand(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { random = Math.random } = options;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.set(i, j, random());\n      }\n    }\n    return matrix;\n  }\n\n  static randInt(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1000, random = Math.random } = options;\n    if (!Number.isInteger(min)) throw new TypeError('min must be an integer');\n    if (!Number.isInteger(max)) throw new TypeError('max must be an integer');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let interval = max - min;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        let value = min + Math.round(random() * interval);\n        matrix.set(i, j, value);\n      }\n    }\n    return matrix;\n  }\n\n  static eye(rows, columns, value) {\n    if (columns === undefined) columns = rows;\n    if (value === undefined) value = 1;\n    let min = Math.min(rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, value);\n    }\n    return matrix;\n  }\n\n  static diag(data, rows, columns) {\n    let l = data.length;\n    if (rows === undefined) rows = l;\n    if (columns === undefined) columns = rows;\n    let min = Math.min(l, rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, data[i]);\n    }\n    return matrix;\n  }\n\n  static min(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static max(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new this(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static checkMatrix(value) {\n    return AbstractMatrix.isMatrix(value) ? value : new Matrix(value);\n  }\n\n  static isMatrix(value) {\n    return value != null && value.klass === 'Matrix';\n  }\n\n  get size() {\n    return this.rows * this.columns;\n  }\n\n  apply(callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be a function');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        callback.call(this, i, j);\n      }\n    }\n    return this;\n  }\n\n  to1DArray() {\n    let array = [];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        array.push(this.get(i, j));\n      }\n    }\n    return array;\n  }\n\n  to2DArray() {\n    let copy = [];\n    for (let i = 0; i < this.rows; i++) {\n      copy.push([]);\n      for (let j = 0; j < this.columns; j++) {\n        copy[i].push(this.get(i, j));\n      }\n    }\n    return copy;\n  }\n\n  toJSON() {\n    return this.to2DArray();\n  }\n\n  isRowVector() {\n    return this.rows === 1;\n  }\n\n  isColumnVector() {\n    return this.columns === 1;\n  }\n\n  isVector() {\n    return this.rows === 1 || this.columns === 1;\n  }\n\n  isSquare() {\n    return this.rows === this.columns;\n  }\n\n  isSymmetric() {\n    if (this.isSquare()) {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j <= i; j++) {\n          if (this.get(i, j) !== this.get(j, i)) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  isEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isEchelonForm = false;\n          checked = true;\n        }\n      }\n      i++;\n    }\n    return isEchelonForm;\n  }\n\n  isReducedEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isReducedEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isReducedEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isReducedEchelonForm = false;\n          checked = true;\n        }\n      }\n      for (let k = j + 1; k < this.rows; k++) {\n        if (this.get(i, k) !== 0) {\n          isReducedEchelonForm = false;\n        }\n      }\n      i++;\n    }\n    return isReducedEchelonForm;\n  }\n\n  echelonForm() {\n    let result = this.clone();\n    let h = 0;\n    let k = 0;\n    while (h < result.rows && k < result.columns) {\n      let iMax = h;\n      for (let i = h; i < result.rows; i++) {\n        if (result.get(i, k) > result.get(iMax, k)) {\n          iMax = i;\n        }\n      }\n      if (result.get(iMax, k) === 0) {\n        k++;\n      } else {\n        result.swapRows(h, iMax);\n        let tmp = result.get(h, k);\n        for (let j = k; j < result.columns; j++) {\n          result.set(h, j, result.get(h, j) / tmp);\n        }\n        for (let i = h + 1; i < result.rows; i++) {\n          let factor = result.get(i, k) / result.get(h, k);\n          result.set(i, k, 0);\n          for (let j = k + 1; j < result.columns; j++) {\n            result.set(i, j, result.get(i, j) - result.get(h, j) * factor);\n          }\n        }\n        h++;\n        k++;\n      }\n    }\n    return result;\n  }\n\n  reducedEchelonForm() {\n    let result = this.echelonForm();\n    let m = result.columns;\n    let n = result.rows;\n    let h = n - 1;\n    while (h >= 0) {\n      if (result.maxRow(h) === 0) {\n        h--;\n      } else {\n        let p = 0;\n        let pivot = false;\n        while (p < n && pivot === false) {\n          if (result.get(h, p) === 1) {\n            pivot = true;\n          } else {\n            p++;\n          }\n        }\n        for (let i = 0; i < h; i++) {\n          let factor = result.get(i, p);\n          for (let j = p; j < m; j++) {\n            let tmp = result.get(i, j) - factor * result.get(h, j);\n            result.set(i, j, tmp);\n          }\n        }\n        h--;\n      }\n    }\n    return result;\n  }\n\n  set() {\n    throw new Error('set method is unimplemented');\n  }\n\n  get() {\n    throw new Error('get method is unimplemented');\n  }\n\n  repeat(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { rows = 1, columns = 1 } = options;\n    if (!Number.isInteger(rows) || rows <= 0) {\n      throw new TypeError('rows must be a positive integer');\n    }\n    if (!Number.isInteger(columns) || columns <= 0) {\n      throw new TypeError('columns must be a positive integer');\n    }\n    let matrix = new Matrix(this.rows * rows, this.columns * columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n      }\n    }\n    return matrix;\n  }\n\n  fill(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, value);\n      }\n    }\n    return this;\n  }\n\n  neg() {\n    return this.mulS(-1);\n  }\n\n  getRow(index) {\n    checkRowIndex(this, index);\n    let row = [];\n    for (let i = 0; i < this.columns; i++) {\n      row.push(this.get(index, i));\n    }\n    return row;\n  }\n\n  getRowVector(index) {\n    return Matrix.rowVector(this.getRow(index));\n  }\n\n  setRow(index, array) {\n    checkRowIndex(this, index);\n    array = checkRowVector(this, array);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, array[i]);\n    }\n    return this;\n  }\n\n  swapRows(row1, row2) {\n    checkRowIndex(this, row1);\n    checkRowIndex(this, row2);\n    for (let i = 0; i < this.columns; i++) {\n      let temp = this.get(row1, i);\n      this.set(row1, i, this.get(row2, i));\n      this.set(row2, i, temp);\n    }\n    return this;\n  }\n\n  getColumn(index) {\n    checkColumnIndex(this, index);\n    let column = [];\n    for (let i = 0; i < this.rows; i++) {\n      column.push(this.get(i, index));\n    }\n    return column;\n  }\n\n  getColumnVector(index) {\n    return Matrix.columnVector(this.getColumn(index));\n  }\n\n  setColumn(index, array) {\n    checkColumnIndex(this, index);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, array[i]);\n    }\n    return this;\n  }\n\n  swapColumns(column1, column2) {\n    checkColumnIndex(this, column1);\n    checkColumnIndex(this, column2);\n    for (let i = 0; i < this.rows; i++) {\n      let temp = this.get(i, column1);\n      this.set(i, column1, this.get(i, column2));\n      this.set(i, column2, temp);\n    }\n    return this;\n  }\n\n  addRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[j]);\n      }\n    }\n    return this;\n  }\n\n  subRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[j]);\n      }\n    }\n    return this;\n  }\n\n  mulRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[j]);\n      }\n    }\n    return this;\n  }\n\n  divRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[j]);\n      }\n    }\n    return this;\n  }\n\n  addColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[i]);\n      }\n    }\n    return this;\n  }\n\n  subColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[i]);\n      }\n    }\n    return this;\n  }\n\n  divColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulRow(index, value) {\n    checkRowIndex(this, index);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, this.get(index, i) * value);\n    }\n    return this;\n  }\n\n  mulColumn(index, value) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, this.get(i, index) * value);\n    }\n    return this;\n  }\n\n  max() {\n    let v = this.get(0, 0);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n        }\n      }\n    }\n    return v;\n  }\n\n  maxIndex() {\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  min() {\n    let v = this.get(0, 0);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n        }\n      }\n    }\n    return v;\n  }\n\n  minIndex() {\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  maxRow(row) {\n    checkRowIndex(this, row);\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  maxRowIndex(row) {\n    checkRowIndex(this, row);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  minRow(row) {\n    checkRowIndex(this, row);\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  minRowIndex(row) {\n    checkRowIndex(this, row);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  maxColumn(column) {\n    checkColumnIndex(this, column);\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  maxColumnIndex(column) {\n    checkColumnIndex(this, column);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  minColumn(column) {\n    checkColumnIndex(this, column);\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  minColumnIndex(column) {\n    checkColumnIndex(this, column);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  diag() {\n    let min = Math.min(this.rows, this.columns);\n    let diag = [];\n    for (let i = 0; i < min; i++) {\n      diag.push(this.get(i, i));\n    }\n    return diag;\n  }\n\n  norm(type = 'frobenius') {\n    let result = 0;\n    if (type === 'max') {\n      return this.max();\n    } else if (type === 'frobenius') {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j < this.columns; j++) {\n          result = result + this.get(i, j) * this.get(i, j);\n        }\n      }\n      return Math.sqrt(result);\n    } else {\n      throw new RangeError(`unknown norm type: ${type}`);\n    }\n  }\n\n  cumulativeSum() {\n    let sum = 0;\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        sum += this.get(i, j);\n        this.set(i, j, sum);\n      }\n    }\n    return this;\n  }\n\n  dot(vector2) {\n    if (AbstractMatrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n    let vector1 = this.to1DArray();\n    if (vector1.length !== vector2.length) {\n      throw new RangeError('vectors do not have the same size');\n    }\n    let dot = 0;\n    for (let i = 0; i < vector1.length; i++) {\n      dot += vector1[i] * vector2[i];\n    }\n    return dot;\n  }\n\n  mmul(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.columns;\n\n    let result = new Matrix(m, p);\n\n    let Bcolj = new Float64Array(n);\n    for (let j = 0; j < p; j++) {\n      for (let k = 0; k < n; k++) {\n        Bcolj[k] = other.get(k, j);\n      }\n\n      for (let i = 0; i < m; i++) {\n        let s = 0;\n        for (let k = 0; k < n; k++) {\n          s += this.get(i, k) * Bcolj[k];\n        }\n\n        result.set(i, j, s);\n      }\n    }\n    return result;\n  }\n\n  strassen2x2(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(2, 2);\n    const a11 = this.get(0, 0);\n    const b11 = other.get(0, 0);\n    const a12 = this.get(0, 1);\n    const b12 = other.get(0, 1);\n    const a21 = this.get(1, 0);\n    const b21 = other.get(1, 0);\n    const a22 = this.get(1, 1);\n    const b22 = other.get(1, 1);\n\n    // Compute intermediate values.\n    const m1 = (a11 + a22) * (b11 + b22);\n    const m2 = (a21 + a22) * b11;\n    const m3 = a11 * (b12 - b22);\n    const m4 = a22 * (b21 - b11);\n    const m5 = (a11 + a12) * b22;\n    const m6 = (a21 - a11) * (b11 + b12);\n    const m7 = (a12 - a22) * (b21 + b22);\n\n    // Combine intermediate values into the output.\n    const c00 = m1 + m4 - m5 + m7;\n    const c01 = m3 + m5;\n    const c10 = m2 + m4;\n    const c11 = m1 - m2 + m3 + m6;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    return result;\n  }\n\n  strassen3x3(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(3, 3);\n\n    const a00 = this.get(0, 0);\n    const a01 = this.get(0, 1);\n    const a02 = this.get(0, 2);\n    const a10 = this.get(1, 0);\n    const a11 = this.get(1, 1);\n    const a12 = this.get(1, 2);\n    const a20 = this.get(2, 0);\n    const a21 = this.get(2, 1);\n    const a22 = this.get(2, 2);\n\n    const b00 = other.get(0, 0);\n    const b01 = other.get(0, 1);\n    const b02 = other.get(0, 2);\n    const b10 = other.get(1, 0);\n    const b11 = other.get(1, 1);\n    const b12 = other.get(1, 2);\n    const b20 = other.get(2, 0);\n    const b21 = other.get(2, 1);\n    const b22 = other.get(2, 2);\n\n    const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n    const m2 = (a00 - a10) * (-b01 + b11);\n    const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n    const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n    const m5 = (a10 + a11) * (-b00 + b01);\n    const m6 = a00 * b00;\n    const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n    const m8 = (-a00 + a20) * (b02 - b12);\n    const m9 = (a20 + a21) * (-b00 + b02);\n    const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n    const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n    const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n    const m13 = (a02 - a22) * (b11 - b21);\n    const m14 = a02 * b20;\n    const m15 = (a21 + a22) * (-b20 + b21);\n    const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n    const m17 = (a02 - a12) * (b12 - b22);\n    const m18 = (a11 + a12) * (-b20 + b22);\n    const m19 = a01 * b10;\n    const m20 = a12 * b21;\n    const m21 = a10 * b02;\n    const m22 = a20 * b01;\n    const m23 = a22 * b22;\n\n    const c00 = m6 + m14 + m19;\n    const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n    const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n    const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n    const c11 = m2 + m4 + m5 + m6 + m20;\n    const c12 = m14 + m16 + m17 + m18 + m21;\n    const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n    const c21 = m12 + m13 + m14 + m15 + m22;\n    const c22 = m6 + m7 + m8 + m9 + m23;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(0, 2, c02);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    result.set(1, 2, c12);\n    result.set(2, 0, c20);\n    result.set(2, 1, c21);\n    result.set(2, 2, c22);\n    return result;\n  }\n\n  mmulStrassen(y) {\n    y = Matrix.checkMatrix(y);\n    let x = this.clone();\n    let r1 = x.rows;\n    let c1 = x.columns;\n    let r2 = y.rows;\n    let c2 = y.columns;\n    if (c1 !== r2) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`,\n      );\n    }\n\n    // Put a matrix into the top left of a matrix of zeros.\n    // `rows` and `cols` are the dimensions of the output matrix.\n    function embed(mat, rows, cols) {\n      let r = mat.rows;\n      let c = mat.columns;\n      if (r === rows && c === cols) {\n        return mat;\n      } else {\n        let resultat = AbstractMatrix.zeros(rows, cols);\n        resultat = resultat.setSubMatrix(mat, 0, 0);\n        return resultat;\n      }\n    }\n\n    // Make sure both matrices are the same size.\n    // This is exclusively for simplicity:\n    // this algorithm can be implemented with matrices of different sizes.\n\n    let r = Math.max(r1, r2);\n    let c = Math.max(c1, c2);\n    x = embed(x, r, c);\n    y = embed(y, r, c);\n\n    // Our recursive multiplication function.\n    function blockMult(a, b, rows, cols) {\n      // For small matrices, resort to naive multiplication.\n      if (rows <= 512 || cols <= 512) {\n        return a.mmul(b); // a is equivalent to this\n      }\n\n      // Apply dynamic padding.\n      if (rows % 2 === 1 && cols % 2 === 1) {\n        a = embed(a, rows + 1, cols + 1);\n        b = embed(b, rows + 1, cols + 1);\n      } else if (rows % 2 === 1) {\n        a = embed(a, rows + 1, cols);\n        b = embed(b, rows + 1, cols);\n      } else if (cols % 2 === 1) {\n        a = embed(a, rows, cols + 1);\n        b = embed(b, rows, cols + 1);\n      }\n\n      let halfRows = parseInt(a.rows / 2, 10);\n      let halfCols = parseInt(a.columns / 2, 10);\n      // Subdivide input matrices.\n      let a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n      let b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n\n      let a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n      let b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n\n      let a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n      let b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n\n      let a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n      let b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);\n\n      // Compute intermediate values.\n      let m1 = blockMult(\n        AbstractMatrix.add(a11, a22),\n        AbstractMatrix.add(b11, b22),\n        halfRows,\n        halfCols,\n      );\n      let m2 = blockMult(AbstractMatrix.add(a21, a22), b11, halfRows, halfCols);\n      let m3 = blockMult(a11, AbstractMatrix.sub(b12, b22), halfRows, halfCols);\n      let m4 = blockMult(a22, AbstractMatrix.sub(b21, b11), halfRows, halfCols);\n      let m5 = blockMult(AbstractMatrix.add(a11, a12), b22, halfRows, halfCols);\n      let m6 = blockMult(\n        AbstractMatrix.sub(a21, a11),\n        AbstractMatrix.add(b11, b12),\n        halfRows,\n        halfCols,\n      );\n      let m7 = blockMult(\n        AbstractMatrix.sub(a12, a22),\n        AbstractMatrix.add(b21, b22),\n        halfRows,\n        halfCols,\n      );\n\n      // Combine intermediate values into the output.\n      let c11 = AbstractMatrix.add(m1, m4);\n      c11.sub(m5);\n      c11.add(m7);\n      let c12 = AbstractMatrix.add(m3, m5);\n      let c21 = AbstractMatrix.add(m2, m4);\n      let c22 = AbstractMatrix.sub(m1, m2);\n      c22.add(m3);\n      c22.add(m6);\n\n      // Crop output to the desired size (undo dynamic padding).\n      let resultat = AbstractMatrix.zeros(2 * c11.rows, 2 * c11.columns);\n      resultat = resultat.setSubMatrix(c11, 0, 0);\n      resultat = resultat.setSubMatrix(c12, c11.rows, 0);\n      resultat = resultat.setSubMatrix(c21, 0, c11.columns);\n      resultat = resultat.setSubMatrix(c22, c11.rows, c11.columns);\n      return resultat.subMatrix(0, rows - 1, 0, cols - 1);\n    }\n    return blockMult(x, y, r, c);\n  }\n\n  scaleRows(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.rows; i++) {\n      const row = this.getRow(i);\n      rescale(row, { min, max, output: row });\n      newMatrix.setRow(i, row);\n    }\n    return newMatrix;\n  }\n\n  scaleColumns(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.columns; i++) {\n      const column = this.getColumn(i);\n      rescale(column, {\n        min: min,\n        max: max,\n        output: column,\n      });\n      newMatrix.setColumn(i, column);\n    }\n    return newMatrix;\n  }\n\n  flipRows() {\n    const middle = Math.ceil(this.columns / 2);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < middle; j++) {\n        let first = this.get(i, j);\n        let last = this.get(i, this.columns - 1 - j);\n        this.set(i, j, last);\n        this.set(i, this.columns - 1 - j, first);\n      }\n    }\n    return this;\n  }\n\n  flipColumns() {\n    const middle = Math.ceil(this.rows / 2);\n    for (let j = 0; j < this.columns; j++) {\n      for (let i = 0; i < middle; i++) {\n        let first = this.get(i, j);\n        let last = this.get(this.rows - 1 - i, j);\n        this.set(i, j, last);\n        this.set(this.rows - 1 - i, j, first);\n      }\n    }\n    return this;\n  }\n\n  kroneckerProduct(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.rows;\n    let q = other.columns;\n\n    let result = new Matrix(m * p, n * q);\n    for (let i = 0; i < m; i++) {\n      for (let j = 0; j < n; j++) {\n        for (let k = 0; k < p; k++) {\n          for (let l = 0; l < q; l++) {\n            result.set(p * i + k, q * j + l, this.get(i, j) * other.get(k, l));\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n  transpose() {\n    let result = new Matrix(this.columns, this.rows);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        result.set(j, i, this.get(i, j));\n      }\n    }\n    return result;\n  }\n\n  sortRows(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.rows; i++) {\n      this.setRow(i, this.getRow(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  sortColumns(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.columns; i++) {\n      this.setColumn(i, this.getColumn(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  subMatrix(startRow, endRow, startColumn, endColumn) {\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    let newMatrix = new Matrix(\n      endRow - startRow + 1,\n      endColumn - startColumn + 1,\n    );\n    for (let i = startRow; i <= endRow; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        newMatrix.set(i - startRow, j - startColumn, this.get(i, j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixRow(indices, startColumn, endColumn) {\n    if (startColumn === undefined) startColumn = 0;\n    if (endColumn === undefined) endColumn = this.columns - 1;\n    if (\n      startColumn > endColumn ||\n      startColumn < 0 ||\n      startColumn >= this.columns ||\n      endColumn < 0 ||\n      endColumn >= this.columns\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(indices.length, endColumn - startColumn + 1);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        if (indices[i] < 0 || indices[i] >= this.rows) {\n          throw new RangeError(`Row index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixColumn(indices, startRow, endRow) {\n    if (startRow === undefined) startRow = 0;\n    if (endRow === undefined) endRow = this.rows - 1;\n    if (\n      startRow > endRow ||\n      startRow < 0 ||\n      startRow >= this.rows ||\n      endRow < 0 ||\n      endRow >= this.rows\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(endRow - startRow + 1, indices.length);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startRow; j <= endRow; j++) {\n        if (indices[i] < 0 || indices[i] >= this.columns) {\n          throw new RangeError(`Column index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n      }\n    }\n    return newMatrix;\n  }\n\n  setSubMatrix(matrix, startRow, startColumn) {\n    matrix = Matrix.checkMatrix(matrix);\n    let endRow = startRow + matrix.rows - 1;\n    let endColumn = startColumn + matrix.columns - 1;\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    for (let i = 0; i < matrix.rows; i++) {\n      for (let j = 0; j < matrix.columns; j++) {\n        this.set(startRow + i, startColumn + j, matrix.get(i, j));\n      }\n    }\n    return this;\n  }\n\n  selection(rowIndices, columnIndices) {\n    let indices = checkIndices(this, rowIndices, columnIndices);\n    let newMatrix = new Matrix(rowIndices.length, columnIndices.length);\n    for (let i = 0; i < indices.row.length; i++) {\n      let rowIndex = indices.row[i];\n      for (let j = 0; j < indices.column.length; j++) {\n        let columnIndex = indices.column[j];\n        newMatrix.set(i, j, this.get(rowIndex, columnIndex));\n      }\n    }\n    return newMatrix;\n  }\n\n  trace() {\n    let min = Math.min(this.rows, this.columns);\n    let trace = 0;\n    for (let i = 0; i < min; i++) {\n      trace += this.get(i, i);\n    }\n    return trace;\n  }\n\n  clone() {\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let row = 0; row < this.rows; row++) {\n      for (let column = 0; column < this.columns; column++) {\n        newMatrix.set(row, column, this.get(row, column));\n      }\n    }\n    return newMatrix;\n  }\n\n  sum(by) {\n    switch (by) {\n      case 'row':\n        return sumByRow(this);\n      case 'column':\n        return sumByColumn(this);\n      case undefined:\n        return sumAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  product(by) {\n    switch (by) {\n      case 'row':\n        return productByRow(this);\n      case 'column':\n        return productByColumn(this);\n      case undefined:\n        return productAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  mean(by) {\n    const sum = this.sum(by);\n    switch (by) {\n      case 'row': {\n        for (let i = 0; i < this.rows; i++) {\n          sum[i] /= this.columns;\n        }\n        return sum;\n      }\n      case 'column': {\n        for (let i = 0; i < this.columns; i++) {\n          sum[i] /= this.rows;\n        }\n        return sum;\n      }\n      case undefined:\n        return sum / this.size;\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  variance(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { unbiased = true, mean = this.mean(by) } = options;\n    if (typeof unbiased !== 'boolean') {\n      throw new TypeError('unbiased must be a boolean');\n    }\n    switch (by) {\n      case 'row': {\n        if (!Array.isArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByRow(this, unbiased, mean);\n      }\n      case 'column': {\n        if (!Array.isArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByColumn(this, unbiased, mean);\n      }\n      case undefined: {\n        if (typeof mean !== 'number') {\n          throw new TypeError('mean must be a number');\n        }\n        return varianceAll(this, unbiased, mean);\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  standardDeviation(by, options) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    const variance = this.variance(by, options);\n    if (by === undefined) {\n      return Math.sqrt(variance);\n    } else {\n      for (let i = 0; i < variance.length; i++) {\n        variance[i] = Math.sqrt(variance[i]);\n      }\n      return variance;\n    }\n  }\n\n  center(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { center = this.mean(by) } = options;\n    switch (by) {\n      case 'row': {\n        if (!Array.isArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByRow(this, center);\n        return this;\n      }\n      case 'column': {\n        if (!Array.isArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByColumn(this, center);\n        return this;\n      }\n      case undefined: {\n        if (typeof center !== 'number') {\n          throw new TypeError('center must be a number');\n        }\n        centerAll(this, center);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  scale(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    let scale = options.scale;\n    switch (by) {\n      case 'row': {\n        if (scale === undefined) {\n          scale = getScaleByRow(this);\n        } else if (!Array.isArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByRow(this, scale);\n        return this;\n      }\n      case 'column': {\n        if (scale === undefined) {\n          scale = getScaleByColumn(this);\n        } else if (!Array.isArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByColumn(this, scale);\n        return this;\n      }\n      case undefined: {\n        if (scale === undefined) {\n          scale = getScaleAll(this);\n        } else if (typeof scale !== 'number') {\n          throw new TypeError('scale must be a number');\n        }\n        scaleAll(this, scale);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  toString(options) {\n    return inspectMatrixWithOptions(this, options);\n  }\n}\n\nAbstractMatrix.prototype.klass = 'Matrix';\nif (typeof Symbol !== 'undefined') {\n  AbstractMatrix.prototype[\n    Symbol.for('nodejs.util.inspect.custom')\n  ] = inspectMatrix;\n}\n\nfunction compareNumbers(a, b) {\n  return a - b;\n}\n\n// Synonyms\nAbstractMatrix.random = AbstractMatrix.rand;\nAbstractMatrix.randomInt = AbstractMatrix.randInt;\nAbstractMatrix.diagonal = AbstractMatrix.diag;\nAbstractMatrix.prototype.diagonal = AbstractMatrix.prototype.diag;\nAbstractMatrix.identity = AbstractMatrix.eye;\nAbstractMatrix.prototype.negate = AbstractMatrix.prototype.neg;\nAbstractMatrix.prototype.tensorProduct =\n  AbstractMatrix.prototype.kroneckerProduct;\n\nexport default class Matrix extends AbstractMatrix {\n  constructor(nRows, nColumns) {\n    super();\n    if (Matrix.isMatrix(nRows)) {\n      return nRows.clone();\n    } else if (Number.isInteger(nRows) && nRows > 0) {\n      // Create an empty matrix\n      this.data = [];\n      if (Number.isInteger(nColumns) && nColumns > 0) {\n        for (let i = 0; i < nRows; i++) {\n          this.data.push(new Float64Array(nColumns));\n        }\n      } else {\n        throw new TypeError('nColumns must be a positive integer');\n      }\n    } else if (Array.isArray(nRows)) {\n      // Copy the values from the 2D array\n      const arrayData = nRows;\n      nRows = arrayData.length;\n      nColumns = arrayData[0].length;\n      if (typeof nColumns !== 'number' || nColumns === 0) {\n        throw new TypeError(\n          'Data must be a 2D array with at least one element',\n        );\n      }\n      this.data = [];\n      for (let i = 0; i < nRows; i++) {\n        if (arrayData[i].length !== nColumns) {\n          throw new RangeError('Inconsistent array dimensions');\n        }\n        this.data.push(Float64Array.from(arrayData[i]));\n      }\n    } else {\n      throw new TypeError(\n        'First argument must be a positive number or an array',\n      );\n    }\n    this.rows = nRows;\n    this.columns = nColumns;\n    return this;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n\n  removeRow(index) {\n    checkRowIndex(this, index);\n    if (this.rows === 1) {\n      throw new RangeError('A matrix cannot have less than one row');\n    }\n    this.data.splice(index, 1);\n    this.rows -= 1;\n    return this;\n  }\n\n  addRow(index, array) {\n    if (array === undefined) {\n      array = index;\n      index = this.rows;\n    }\n    checkRowIndex(this, index, true);\n    array = Float64Array.from(checkRowVector(this, array, true));\n    this.data.splice(index, 0, array);\n    this.rows += 1;\n    return this;\n  }\n\n  removeColumn(index) {\n    checkColumnIndex(this, index);\n    if (this.columns === 1) {\n      throw new RangeError('A matrix cannot have less than one column');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns - 1);\n      for (let j = 0; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      for (let j = index + 1; j < this.columns; j++) {\n        newRow[j - 1] = this.data[i][j];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns -= 1;\n    return this;\n  }\n\n  addColumn(index, array) {\n    if (typeof array === 'undefined') {\n      array = index;\n      index = this.columns;\n    }\n    checkColumnIndex(this, index, true);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns + 1);\n      let j = 0;\n      for (; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      newRow[j++] = array[i];\n      for (; j < this.columns + 1; j++) {\n        newRow[j] = this.data[i][j - 1];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns += 1;\n    return this;\n  }\n}\n\ninstallMathOperations(AbstractMatrix, Matrix);\n"]},"metadata":{},"sourceType":"module"}