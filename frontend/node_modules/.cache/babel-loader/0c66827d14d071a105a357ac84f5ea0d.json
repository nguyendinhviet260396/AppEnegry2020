{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { deepMix, isNil, map, get } from '@antv/util';\nimport fecha from 'fecha';\nimport ViewLayer from '../../base/view-layer';\nimport { DAY_FIELD, FORMATTER, MONTHS, WEEK_FIELD, WEEKS } from './constant';\nimport { generateCalendarData, getMonthCenterWeek } from './util';\nimport { registerPlotType } from '../../base/global';\nimport { getDateRange } from '../../util/date';\nimport { getComponent } from '../../components/factory';\nimport * as EventParser from './event';\n/**\n * 日历图\n */\n\nvar CalendarLayer =\n/** @class */\nfunction (_super) {\n  __extends(CalendarLayer, _super);\n\n  function CalendarLayer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'calendar';\n    return _this;\n  }\n\n  CalendarLayer.getDefaultOptions = function () {\n    var _a;\n\n    return deepMix({}, _super.getDefaultOptions.call(this), {\n      xAxis: {\n        line: {\n          visible: false\n        },\n        grid: {\n          visible: false\n        },\n        tickLine: {\n          visible: false\n        },\n        label: {\n          visible: true,\n          autoRotate: false,\n          autoHide: false\n        }\n      },\n      yAxis: {\n        line: {\n          visible: false\n        },\n        grid: {\n          visible: false\n        },\n        tickLine: {\n          visible: false\n        },\n        label: {\n          visible: true,\n          autoRotate: false,\n          autoHide: false\n        }\n      },\n      legend: {\n        visible: false\n      },\n      meta: (_a = {}, _a[DAY_FIELD] = {\n        type: 'cat',\n        alias: 'Day',\n        values: [0, 1, 2, 3, 4, 5, 6]\n      }, _a[WEEK_FIELD] = {\n        type: 'cat',\n        alias: 'Month'\n      }, _a),\n      tooltip: {\n        visible: true,\n        showTitle: true,\n        showCrosshairs: false,\n        showMarkers: false,\n        title: 'date'\n      }\n    });\n  };\n  /**\n   * 复写父类的数据处理类，主要完成：\n   * 1. 生成 polygon 的 x y field（虚拟的，无需用户传入）\n   *\n   * @param data\n   */\n\n\n  CalendarLayer.prototype.processData = function (data) {\n    var dateField = this.options.dateField;\n    var dateRange = this.options.dateRange; // 给与默认值是当前这一年\n\n    if (isNil(dateRange)) {\n      var dates = map(data, function (datum) {\n        return fecha.parse(\"\" + datum[dateField], FORMATTER);\n      });\n      dateRange = getDateRange(dates);\n    }\n\n    return generateCalendarData(data, dateRange, dateField);\n  };\n\n  CalendarLayer.prototype.addGeometry = function () {\n    var _a = this.options,\n        valueField = _a.valueField,\n        colors = _a.colors,\n        tooltip = _a.tooltip;\n    var polygonConfig = {\n      type: 'polygon',\n      position: {\n        fields: [WEEK_FIELD, DAY_FIELD]\n      },\n      shape: {\n        values: ['calendar-polygon']\n      },\n      color: {\n        fields: [valueField],\n        values: colors\n      },\n      label: this.extractLabel()\n    };\n\n    if (tooltip && (tooltip.fields || tooltip.formatter)) {\n      this.geometryTooltip(polygonConfig);\n    }\n\n    this.setConfig('geometry', polygonConfig);\n  };\n\n  CalendarLayer.prototype.geometryTooltip = function (geomConfig) {\n    geomConfig.tooltip = {};\n    var tooltipOptions = this.options.tooltip;\n\n    if (tooltipOptions.fields) {\n      geomConfig.tooltip.fields = tooltipOptions.fields;\n    }\n\n    if (tooltipOptions.formatter) {\n      geomConfig.tooltip.callback = tooltipOptions.formatter;\n\n      if (!tooltipOptions.fields) {\n        geomConfig.tooltip.fields = [WEEK_FIELD, DAY_FIELD];\n      }\n    }\n  };\n\n  CalendarLayer.prototype.extractLabel = function () {\n    var props = this.options;\n    var label = props.label;\n\n    if (label && label.visible === false) {\n      return false;\n    }\n\n    var valueField = this.options.valueField;\n    return getComponent('label', __assign({\n      plot: this,\n      fields: [valueField],\n      position: 'top',\n      offset: 0\n    }, label));\n  };\n  /**\n   * 写入坐标系配置，默认增加镜像\n   */\n\n\n  CalendarLayer.prototype.coord = function () {\n    // 默认做镜像处理\n    var coordinateConfig = {\n      type: 'rect',\n      cfg: {},\n      actions: [['reflect', 'y']]\n    };\n    this.setConfig('coordinate', coordinateConfig);\n  };\n  /**\n   * 无需 geometry parser，直接使用 polygon 即可\n   */\n\n\n  CalendarLayer.prototype.geometryParser = function () {\n    return '';\n  };\n\n  CalendarLayer.prototype.axis = function () {\n    var xAxis_parser = getComponent('axis', {\n      plot: this,\n      dim: 'x'\n    });\n    var yAxis_parser = getComponent('axis', {\n      plot: this,\n      dim: 'y'\n    });\n    var axesConfig = {};\n    axesConfig[WEEK_FIELD] = xAxis_parser;\n    axesConfig[DAY_FIELD] = yAxis_parser;\n    /** 存储坐标轴配置项到config */\n\n    this.setConfig('axes', axesConfig);\n  };\n\n  CalendarLayer.prototype.scale = function () {\n    _super.prototype.scale.call(this);\n\n    var monthWeek = getMonthCenterWeek(this.options.dateRange); // 拿出 scale 二次加工，主要是配置 x y 中的标题显示\n\n    var scales = this.config.scales;\n    var _a = this.options,\n        _b = _a.weeks,\n        weeks = _b === void 0 ? WEEKS : _b,\n        _c = _a.months,\n        months = _c === void 0 ? MONTHS : _c;\n    var x = scales[WEEK_FIELD];\n    var y = scales[DAY_FIELD]; // 1. 设置 formatter\n\n    x.formatter = function (v) {\n      var m = monthWeek[v];\n      return m !== undefined ? months[m] : '';\n    };\n\n    y.formatter = function (v) {\n      return weeks[v] || '';\n    }; // 2. 设置 alias\n\n\n    var _d = this.options,\n        xAxis = _d.xAxis,\n        yAxis = _d.yAxis;\n    x.alias = get(xAxis, ['title', 'text'], x.alias);\n    y.alias = get(yAxis, ['title', 'text'], y.alias);\n    this.setConfig('scales', scales);\n  };\n\n  CalendarLayer.prototype.parseEvents = function () {\n    _super.prototype.parseEvents.call(this, EventParser);\n  };\n\n  return CalendarLayer;\n}(ViewLayer);\n\nexport default CalendarLayer; // 注册到池子中\n\nregisterPlotType('calendar', CalendarLayer);","map":{"version":3,"sources":["../../../src/plots/calendar/layer.ts"],"names":[],"mappings":"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","sourcesContent":["import { deepMix, isNil, map, get } from '@antv/util';\nimport fecha from 'fecha';\nimport { DataItem, LayerConfig, ViewConfig } from '../..';\nimport ViewLayer from '../../base/view-layer';\nimport { DAY_FIELD, FORMATTER, MONTHS, WEEK_FIELD, WEEKS } from './constant';\nimport { generateCalendarData, getMonthCenterWeek } from './util';\nimport { registerPlotType } from '../../base/global';\nimport { getDateRange } from '../../util/date';\nimport { getComponent } from '../../components/factory';\nimport * as EventParser from './event';\n\n/** 日历图配置定义 */\nexport interface CalendarViewConfig extends ViewConfig {\n  /** 字段信息 */\n  readonly dateField: string; // YYYY-MM-DD\n  /** 映射的颜色值字段 */\n  readonly valueField: string;\n  /** 日历图的起止时间：[2019-10, 2020-03] */\n  readonly dateRange?: string[];\n  // 映射的颜色色板\n  readonly colors?: string[] | string;\n  // 对应的月份枚举\n  readonly months?: string[];\n  // 对应的星期枚举值\n  readonly weeks?: string[];\n}\n\ninterface CalendarLayerConfig extends CalendarViewConfig, LayerConfig {}\n\n/**\n * 日历图\n */\nexport default class CalendarLayer extends ViewLayer<CalendarLayerConfig> {\n  public type: string = 'calendar';\n\n  public static getDefaultOptions(): Partial<CalendarLayerConfig> {\n    return deepMix({}, super.getDefaultOptions(), {\n      xAxis: {\n        line: {\n          visible: false,\n        },\n        grid: {\n          visible: false,\n        },\n        tickLine: {\n          visible: false,\n        },\n        label: {\n          visible: true,\n          autoRotate: false,\n          autoHide: false,\n        },\n      },\n      yAxis: {\n        line: {\n          visible: false,\n        },\n        grid: {\n          visible: false,\n        },\n        tickLine: {\n          visible: false,\n        },\n        label: {\n          visible: true,\n          autoRotate: false,\n          autoHide: false,\n        },\n      },\n      legend: { visible: false },\n      meta: {\n        [DAY_FIELD]: {\n          type: 'cat',\n          alias: 'Day',\n          values: [0, 1, 2, 3, 4, 5, 6],\n        },\n        [WEEK_FIELD]: {\n          type: 'cat',\n          alias: 'Month',\n        },\n      },\n      tooltip: {\n        visible: true,\n        showTitle: true,\n        showCrosshairs: false,\n        showMarkers: false,\n        title: 'date',\n      },\n    });\n  }\n\n  /**\n   * 复写父类的数据处理类，主要完成：\n   * 1. 生成 polygon 的 x y field（虚拟的，无需用户传入）\n   *\n   * @param data\n   */\n  protected processData(data?: DataItem[]): DataItem[] | undefined {\n    const { dateField } = this.options;\n    let { dateRange } = this.options;\n\n    // 给与默认值是当前这一年\n    if (isNil(dateRange)) {\n      const dates = map(data, (datum: DataItem) => fecha.parse(`${datum[dateField]}`, FORMATTER));\n      dateRange = getDateRange(dates);\n    }\n\n    return generateCalendarData(data, dateRange, dateField);\n  }\n\n  protected addGeometry(): void {\n    const { valueField, colors, tooltip } = this.options;\n    const polygonConfig: any = {\n      type: 'polygon',\n      position: {\n        fields: [WEEK_FIELD, DAY_FIELD],\n      },\n      shape: {\n        values: ['calendar-polygon'],\n      },\n      color: {\n        fields: [valueField],\n        values: colors,\n      },\n      label: this.extractLabel(),\n    };\n\n    if (tooltip && (tooltip.fields || tooltip.formatter)) {\n      this.geometryTooltip(polygonConfig);\n    }\n\n    this.setConfig('geometry', polygonConfig);\n  }\n\n  protected geometryTooltip(geomConfig) {\n    geomConfig.tooltip = {};\n    const tooltipOptions: any = this.options.tooltip;\n    if (tooltipOptions.fields) {\n      geomConfig.tooltip.fields = tooltipOptions.fields;\n    }\n    if (tooltipOptions.formatter) {\n      geomConfig.tooltip.callback = tooltipOptions.formatter;\n      if (!tooltipOptions.fields) {\n        geomConfig.tooltip.fields = [WEEK_FIELD, DAY_FIELD];\n      }\n    }\n  }\n\n  private extractLabel() {\n    const props = this.options;\n    const label = props.label;\n    if (label && label.visible === false) {\n      return false;\n    }\n    const { valueField } = this.options;\n\n    return getComponent('label', {\n      plot: this,\n      fields: [valueField],\n      position: 'top',\n      offset: 0,\n      ...label,\n    });\n  }\n\n  /**\n   * 写入坐标系配置，默认增加镜像\n   */\n  protected coord(): void {\n    // 默认做镜像处理\n    const coordinateConfig = {\n      type: 'rect',\n      cfg: {},\n      actions: [['reflect', 'y']],\n    } as any;\n    this.setConfig('coordinate', coordinateConfig);\n  }\n\n  /**\n   * 无需 geometry parser，直接使用 polygon 即可\n   */\n  protected geometryParser(): string {\n    return '';\n  }\n\n  protected axis(): void {\n    const xAxis_parser = getComponent('axis', {\n      plot: this,\n      dim: 'x',\n    });\n    const yAxis_parser = getComponent('axis', {\n      plot: this,\n      dim: 'y',\n    });\n    const axesConfig = {};\n    axesConfig[WEEK_FIELD] = xAxis_parser;\n    axesConfig[DAY_FIELD] = yAxis_parser;\n    /** 存储坐标轴配置项到config */\n    this.setConfig('axes', axesConfig);\n  }\n\n  protected scale(): void {\n    super.scale();\n\n    const monthWeek = getMonthCenterWeek(this.options.dateRange);\n\n    // 拿出 scale 二次加工，主要是配置 x y 中的标题显示\n    const scales = this.config.scales;\n    const { weeks = WEEKS, months = MONTHS } = this.options;\n\n    const x = scales[WEEK_FIELD];\n    const y = scales[DAY_FIELD];\n    // 1. 设置 formatter\n    x.formatter = (v) => {\n      const m = monthWeek[v];\n      return m !== undefined ? months[m] : '';\n    };\n\n    y.formatter = (v) => weeks[v] || '';\n\n    // 2. 设置 alias\n    const { xAxis, yAxis } = this.options;\n    x.alias = get(xAxis, ['title', 'text'], x.alias);\n    y.alias = get(yAxis, ['title', 'text'], y.alias);\n\n    this.setConfig('scales', scales);\n  }\n\n  protected parseEvents() {\n    super.parseEvents(EventParser);\n  }\n}\n\n// 注册到池子中\nregisterPlotType('calendar', CalendarLayer);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}