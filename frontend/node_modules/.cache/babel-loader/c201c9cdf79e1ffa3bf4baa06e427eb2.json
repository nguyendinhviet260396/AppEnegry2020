{"ast":null,"code":"import { isFunction, assign, each, isArray, mix, clone } from '@antv/util';\nimport { getComponentStateMethod } from '../../components/factory';\nimport { onEvent } from '../../util/event';\nimport StateManager from '../../util/state-manager';\nexport function compare(origin, condition) {\n  if (!isFunction(condition)) {\n    var name_1 = condition.name,\n        exp = condition.exp;\n\n    if (isFunction(exp)) {\n      return exp(origin[name_1]);\n    }\n\n    return origin[name_1] === exp;\n  }\n\n  return condition(origin);\n}\n\nvar StateController =\n/** @class */\nfunction () {\n  function StateController(cfg) {\n    this.shapeContainers = [];\n    assign(this, cfg);\n  }\n\n  StateController.prototype.createStateManager = function () {\n    this.stateManager = new StateManager();\n  };\n\n  StateController.prototype.bindStateManager = function (manager, cfg) {\n    this.stateManager = manager;\n\n    if (cfg.setState) {\n      this._updateStateProcess(cfg.setState);\n    }\n\n    if (cfg.onStateChange) {\n      this._stateChangeProcess(cfg.onStateChange);\n    }\n  };\n\n  StateController.prototype.defaultStates = function (states) {\n    var _this = this;\n\n    each(states, function (state, type) {\n      var condition = state.condition,\n          related = state.related;\n\n      _this.setState({\n        type: type,\n        condition: condition,\n        related: related\n      });\n    });\n  };\n\n  StateController.prototype.setState = function (cfg) {\n    var _this = this;\n\n    var type = cfg.type,\n        condition = cfg.condition,\n        related = cfg.related;\n    this.shapes = this._getShapes();\n    this.originAttrs = this._getOriginAttrs(); // this.resetZIndex();\n\n    each(this.shapes, function (shape, index) {\n      var shapeOrigin = shape.get('origin').data;\n      var origin = isArray(shapeOrigin) ? shapeOrigin[0] : shapeOrigin;\n\n      if (compare(origin, condition)) {\n        var stateStyle = cfg.style ? cfg.style : _this._getDefaultStateStyle(type, shape);\n        var originAttr = _this.originAttrs[index];\n        var attrs = void 0;\n\n        if (isFunction(stateStyle)) {\n          attrs = stateStyle(originAttr);\n        } else {\n          attrs = mix({}, originAttr, stateStyle);\n        }\n\n        shape.attr(attrs);\n\n        _this.setZIndex(type, shape); // const canvas = this.plot.canvas;\n        // canvas.draw();\n\n      }\n    }); // 组件与图形对状态量的响应不一定同步\n\n    if (related) {\n      this._parserRelated(type, related, condition);\n    }\n\n    this.plot.canvas.draw();\n  };\n\n  StateController.prototype._updateStateProcess = function (setStateCfg) {\n    var _this = this;\n\n    each(setStateCfg, function (cfg) {\n      var state = cfg.state;\n      var handler;\n\n      if (isFunction(state)) {\n        handler = function (e) {\n          var s = state(e);\n\n          _this.stateManager.setState(s.name, s.exp);\n        };\n      } else {\n        handler = function () {\n          _this.stateManager.setState(state.name, state.exp);\n        };\n      }\n\n      if (cfg.event) {\n        onEvent(_this.plot, _this._eventParser(cfg.event), handler);\n      } else {\n        handler();\n      }\n    });\n  };\n\n  StateController.prototype._stateChangeProcess = function (onChangeCfg) {\n    var _this = this;\n\n    each(onChangeCfg, function (cfg) {\n      _this.stateManager.on(cfg.name + \":change\", function (props) {\n        cfg.callback(props, _this.plot);\n      });\n    });\n  };\n\n  StateController.prototype._getShapes = function () {\n    var _this = this;\n\n    var shapes = [];\n    var geoms = this.plot.view.geometries;\n    each(geoms, function (geom) {\n      var shapeContainer = geom.container;\n\n      _this.shapeContainers.push(shapeContainer);\n\n      if (!geom.destroyed) {\n        shapes.push.apply(shapes, geom.getShapes());\n      }\n    });\n    return shapes;\n  };\n\n  StateController.prototype._getOriginAttrs = function () {\n    var attrs = [];\n    each(this.shapes, function (shape) {\n      attrs.push(clone(shape.attr()));\n    });\n    return attrs;\n  }; // 将g2 geomtry转为plot层geometry\n\n\n  StateController.prototype._eventParser = function (event) {\n    var eventCfg = event.split(':');\n    var eventTarget = this.plot.geometryParser('g2', eventCfg[0]);\n    var eventName = eventCfg[1];\n    return eventTarget + \":\" + eventName;\n  };\n\n  StateController.prototype._getDefaultStateStyle = function (type, shape) {\n    var theme = this.plot.theme;\n    var plotGeomType = this.plot.geometryParser('plot', shape.name);\n    var styleField = plotGeomType + \"Style\";\n\n    if (theme[styleField]) {\n      var style = theme[styleField][type];\n\n      if (isFunction(style)) {\n        style = style(shape.attr());\n      }\n\n      return style;\n    }\n\n    return {};\n  };\n\n  StateController.prototype._parserRelated = function (type, related, condition) {\n    var _this = this;\n\n    each(related, function (r) {\n      if (_this.plot[r]) {\n        // fixme: 自定义组件\n        // this.plot[r].setState(type, condition);\n        var method = getComponentStateMethod(r, type);\n        method(_this.plot, condition);\n      }\n    });\n  }; // private set\n\n\n  StateController.prototype.setZIndex = function (stateType, shape) {\n    if (stateType === 'active' || stateType === 'selected') {\n      // shape.setZIndex(1);\n      var children = shape.get('parent').get('children');\n      children[children.length - 1].setZIndex(0);\n      shape.setZIndex(1);\n    }\n  };\n\n  StateController.prototype.resetZIndex = function () {\n    each(this.shapeContainers, function (container) {\n      var children = container.get('children');\n      children.sort(function (obj1, obj2) {\n        return obj1._INDEX - obj2._INDEX;\n      });\n    });\n  };\n\n  return StateController;\n}();\n\nexport default StateController;","map":{"version":3,"sources":["../../../src/base/controller/state.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * stateManager负责stateManager的创建/绑定，对状态量更新的响应\n */\nimport { IGroup, IShape } from '../../dependents';\nimport { isFunction, assign, each, isArray, mix, clone } from '@antv/util';\nimport { getComponentStateMethod } from '../../components/factory';\nimport { onEvent } from '../../util/event';\nimport StateManager from '../../util/state-manager';\n\nexport function compare(origin, condition) {\n  if (!isFunction(condition)) {\n    const { name, exp } = condition;\n    if (isFunction(exp)) {\n      return exp(origin[name]);\n    }\n    return origin[name] === exp;\n  }\n  return condition(origin);\n}\n\nexport default class StateController {\n  private plot: any;\n  private stateManager: StateManager;\n  private shapes: IShape[];\n  private originAttrs: any[]; // 缓存图形的原始属性\n  private shapeContainers: IGroup[] = [];\n\n  constructor(cfg) {\n    assign(this, cfg);\n  }\n\n  public createStateManager() {\n    this.stateManager = new StateManager();\n  }\n\n  public bindStateManager(manager: StateManager, cfg) {\n    this.stateManager = manager;\n    if (cfg.setState) {\n      this._updateStateProcess(cfg.setState);\n    }\n    if (cfg.onStateChange) {\n      this._stateChangeProcess(cfg.onStateChange);\n    }\n  }\n\n  public defaultStates(states) {\n    each(states, (state, type) => {\n      const { condition, related } = state;\n      this.setState({ type, condition, related });\n    });\n  }\n\n  public setState(cfg) {\n    const { type, condition, related } = cfg;\n    this.shapes = this._getShapes();\n    this.originAttrs = this._getOriginAttrs();\n    // this.resetZIndex();\n    each(this.shapes, (shape, index) => {\n      const shapeOrigin = shape.get('origin').data;\n      const origin = isArray(shapeOrigin) ? shapeOrigin[0] : shapeOrigin;\n      if (compare(origin, condition)) {\n        const stateStyle = cfg.style ? cfg.style : this._getDefaultStateStyle(type, shape);\n        const originAttr = this.originAttrs[index];\n        let attrs;\n        if (isFunction(stateStyle)) {\n          attrs = stateStyle(originAttr);\n        } else {\n          attrs = mix({}, originAttr, stateStyle);\n        }\n        shape.attr(attrs);\n        this.setZIndex(type, shape);\n        // const canvas = this.plot.canvas;\n        // canvas.draw();\n      }\n    });\n    // 组件与图形对状态量的响应不一定同步\n    if (related) {\n      this._parserRelated(type, related, condition);\n    }\n    this.plot.canvas.draw();\n  }\n\n  private _updateStateProcess(setStateCfg) {\n    each(setStateCfg, (cfg: any) => {\n      const state = cfg.state;\n      let handler;\n      if (isFunction(state)) {\n        handler = (e) => {\n          const s = state(e);\n          this.stateManager.setState(s.name, s.exp);\n        };\n      } else {\n        handler = () => {\n          this.stateManager.setState(state.name, state.exp);\n        };\n      }\n      if (cfg.event) {\n        onEvent(this.plot, this._eventParser(cfg.event), handler);\n      } else {\n        handler();\n      }\n    });\n  }\n\n  private _stateChangeProcess(onChangeCfg) {\n    each(onChangeCfg, (cfg: any) => {\n      this.stateManager.on(`${cfg.name}:change`, (props) => {\n        cfg.callback(props, this.plot);\n      });\n    });\n  }\n\n  private _getShapes() {\n    const shapes = [];\n    const geoms = this.plot.view.geometries;\n    each(geoms, (geom: any) => {\n      const shapeContainer = geom.container;\n      this.shapeContainers.push(shapeContainer);\n      if (!geom.destroyed) {\n        shapes.push(...geom.getShapes());\n      }\n    });\n    return shapes;\n  }\n\n  private _getOriginAttrs() {\n    const attrs = [];\n    each(this.shapes, (shape) => {\n      attrs.push(clone(shape.attr()));\n    });\n    return attrs;\n  }\n\n  // 将g2 geomtry转为plot层geometry\n  private _eventParser(event) {\n    const eventCfg = event.split(':');\n    const eventTarget = this.plot.geometryParser('g2', eventCfg[0]);\n    const eventName = eventCfg[1];\n    return `${eventTarget}:${eventName}`;\n  }\n\n  private _getDefaultStateStyle(type, shape) {\n    const theme = this.plot.theme;\n    const plotGeomType = this.plot.geometryParser('plot', shape.name);\n    const styleField = `${plotGeomType}Style`;\n    if (theme[styleField]) {\n      let style = theme[styleField][type];\n      if (isFunction(style)) {\n        style = style(shape.attr());\n      }\n      return style;\n    }\n    return {};\n  }\n\n  private _parserRelated(type, related, condition) {\n    each(related, (r) => {\n      if (this.plot[r]) {\n        // fixme: 自定义组件\n        // this.plot[r].setState(type, condition);\n        const method = getComponentStateMethod(r, type);\n        method(this.plot, condition);\n      }\n    });\n  }\n\n  // private set\n  private setZIndex(stateType: string, shape: IShape | any) {\n    if (stateType === 'active' || stateType === 'selected') {\n      // shape.setZIndex(1);\n      const children = shape.get('parent').get('children');\n      children[children.length - 1].setZIndex(0);\n      shape.setZIndex(1);\n    }\n  }\n\n  private resetZIndex() {\n    each(this.shapeContainers, (container) => {\n      const children = container.get('children');\n      children.sort((obj1, obj2) => {\n        return obj1._INDEX - obj2._INDEX;\n      });\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}