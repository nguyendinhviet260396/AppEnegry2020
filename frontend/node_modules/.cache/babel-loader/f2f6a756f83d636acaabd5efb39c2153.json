{"ast":null,"code":"import datetimeStringAbbrevaite, { isTime } from './datetime-string-abbrevaite';\nimport digitsAbbreviate from './digits-abbreviate';\nimport textAbbreviate from './text-abbreviate';\nexport default function robustAbbrevaite(shape, option, index, cfg) {\n  var nodes = cfg.nodes.nodes;\n  var text = shape.attr('text');\n  /** 判断text类型： 数字、时间、文本 */\n\n  var isnum = /^\\d+$/.test(text);\n\n  if (isnum) {\n    digitsAbbreviate(shape, option, index, nodes);\n  } else if (isTime(text)) {\n    datetimeStringAbbrevaite(shape, option, index, nodes);\n  } else {\n    textAbbreviate(shape, option);\n  }\n}","map":{"version":3,"sources":["../../../../src/util/responsive/rules/robust-abbrevaite.ts"],"names":[],"mappings":"AAEA,OAAO,wBAAP,IAAmC,MAAnC,QAAiD,8BAAjD;AACA,OAAO,gBAAP,MAA6B,qBAA7B;AACA,OAAO,cAAP,MAA2B,mBAA3B;AASA,eAAc,SAAU,gBAAV,CAA2B,KAA3B,EAA0C,MAA1C,EAAuE,KAAvE,EAA8E,GAA9E,EAAiF;AAC7F,MAAM,KAAK,GAAG,GAAG,CAAC,KAAJ,CAAU,KAAxB;AACA,MAAM,IAAI,GAAG,KAAK,CAAC,IAAN,CAAW,MAAX,CAAb;AACA;;AACA,MAAM,KAAK,GAAG,QAAQ,IAAR,CAAa,IAAb,CAAd;;AACA,MAAI,KAAJ,EAAW;AACT,IAAA,gBAAgB,CAAC,KAAD,EAAQ,MAAR,EAAgB,KAAhB,EAAuB,KAAvB,CAAhB;AACD,GAFD,MAEO,IAAI,MAAM,CAAC,IAAD,CAAV,EAAkB;AACvB,IAAA,wBAAwB,CAAC,KAAD,EAAQ,MAAR,EAAgB,KAAhB,EAAuB,KAAvB,CAAxB;AACD,GAFM,MAEA;AACL,IAAA,cAAc,CAAC,KAAD,EAAQ,MAAR,CAAd;AACD;AACF","sourcesContent":["import { IShape } from '@antv/g-base';\n\nimport datetimeStringAbbrevaite, { isTime } from './datetime-string-abbrevaite';\nimport digitsAbbreviate from './digits-abbreviate';\nimport textAbbreviate from './text-abbreviate';\n\ninterface RobustAbbrevaiteCfg {\n  keep?: string[];\n  abbreviateBy?: 'start' | 'middle' | 'end';\n  unit?: 'k' | 'm' | 'b' | 't' | 'auto';\n  decimal?: number;\n}\n\nexport default function robustAbbrevaite(shape: IShape, option: RobustAbbrevaiteCfg, index, cfg) {\n  const nodes = cfg.nodes.nodes;\n  const text = shape.attr('text');\n  /** 判断text类型： 数字、时间、文本 */\n  const isnum = /^\\d+$/.test(text);\n  if (isnum) {\n    digitsAbbreviate(shape, option, index, nodes);\n  } else if (isTime(text)) {\n    datetimeStringAbbrevaite(shape, option, index, nodes);\n  } else {\n    textAbbreviate(shape, option);\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}