{"ast":null,"code":"import { each, deepMix, clone } from '@antv/util';\nimport { rgb2arr, mappingColor } from '../../../util/color';\n\nvar MatrixLabel =\n/** @class */\nfunction () {\n  function MatrixLabel(cfg) {\n    this.destroyed = false;\n    this.view = cfg.view;\n    this.plot = cfg.plot;\n    var defaultOptions = this.getDefaultOptions();\n    this.options = deepMix(defaultOptions, cfg, {});\n    this.init();\n  }\n\n  MatrixLabel.prototype.init = function () {\n    var _this = this;\n\n    this.container = this.view.geometries[0].labelsContainer;\n    this.view.on('beforerender', function () {\n      _this.clear();\n\n      _this.plot.canvas.draw();\n    });\n  };\n\n  MatrixLabel.prototype.render = function () {\n    var _this = this;\n\n    var elements = this.view.geometries[0].elements;\n    each(elements, function (ele) {\n      var shape = ele.shape;\n      var _a = _this.options,\n          style = _a.style,\n          offsetX = _a.offsetX,\n          offsetY = _a.offsetY;\n      var formatter = _this.options.formatter;\n      var content = formatter ? formatter(_this.getContent(shape)) : _this.getContent(shape);\n\n      var position = _this.getPosition(shape);\n\n      var color = _this.getTextColor(shape);\n\n      var label = _this.container.addShape('text', {\n        attrs: deepMix({}, style, {\n          x: position.x + offsetX,\n          y: position.y + offsetY,\n          text: content,\n          fill: color,\n          textAlign: 'center',\n          textBaseline: 'middle'\n        }),\n        name: 'label'\n      });\n\n      if (_this.options.adjustPosition) {\n        _this.adjustLabel(label, shape);\n      }\n    });\n  };\n\n  MatrixLabel.prototype.clear = function () {\n    if (this.container) {\n      this.container.clear();\n    }\n  };\n\n  MatrixLabel.prototype.hide = function () {\n    this.container.set('visible', false);\n    this.plot.canvas.draw();\n  };\n\n  MatrixLabel.prototype.show = function () {\n    this.container.set('visible', true);\n    this.plot.canvas.draw();\n  };\n\n  MatrixLabel.prototype.destroy = function () {\n    if (this.container) {\n      this.container.remove();\n    }\n\n    this.destroyed = true;\n  };\n\n  MatrixLabel.prototype.getBBox = function () {\n    return this.container.getBBox();\n  };\n\n  MatrixLabel.prototype.getDefaultOptions = function () {\n    var theme = this.plot.theme;\n    var labelStyle = theme.label.style;\n    return {\n      offsetX: 0,\n      offsetY: 0,\n      style: clone(labelStyle)\n    };\n  };\n\n  MatrixLabel.prototype.getContent = function (shape) {\n    var data = shape.get('origin').data;\n    var field = this.plot.options.colorField;\n    return data[field];\n  };\n\n  MatrixLabel.prototype.getPosition = function (shape) {\n    var bbox = shape.getBBox();\n    return {\n      x: bbox.minX + bbox.width / 2,\n      y: bbox.minY + bbox.height / 2\n    };\n  };\n\n  MatrixLabel.prototype.getTextColor = function (shape) {\n    if (this.options.adjustColor) {\n      var shapeColor = shape.attr('fill');\n      var shapeOpacity = shape.attr('opacity') ? shape.attr('opacity') : 1;\n      var rgb = rgb2arr(shapeColor);\n      var gray = Math.round(rgb[0] * 0.299 + rgb[1] * 0.587 + rgb[2] * 0.114) / shapeOpacity;\n      var colorBand = [{\n        from: 0,\n        to: 85,\n        color: 'white'\n      }, {\n        from: 85,\n        to: 170,\n        color: '#F6F6F6'\n      }, {\n        from: 170,\n        to: 255,\n        color: 'black'\n      }];\n      var reflect = mappingColor(colorBand, gray);\n      return reflect;\n    }\n\n    var defaultColor = this.options.style.fill;\n    return defaultColor;\n  };\n\n  MatrixLabel.prototype.adjustLabel = function (label, shape) {\n    var labelRange = label.getBBox();\n    var shapeRange = shape.getBBox();\n\n    if (labelRange.width > shapeRange.width || labelRange.height > shapeRange.height) {\n      label.attr('text', '');\n    }\n  };\n\n  return MatrixLabel;\n}();\n\nexport default MatrixLabel;","map":{"version":3,"sources":["../../../../src/plots/heatmap/component/label.ts"],"names":[],"mappings":"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","sourcesContent":["import { each, deepMix, clone } from '@antv/util';\nimport { View, IGroup } from '../../../dependents';\nimport { rgb2arr, mappingColor } from '../../../util/color';\n\nexport interface MatrixLabelConfig {\n  visible: boolean;\n  formatter?: (...args: any[]) => string;\n  offsetX?: number;\n  offsetY?: number;\n  style?: any;\n  adjustColor?: boolean;\n  adjustPosition?: boolean;\n}\n\nexport interface IMatrixLabel extends MatrixLabelConfig {\n  view: View;\n  plot: any;\n}\n\nexport default class MatrixLabel {\n  public options: MatrixLabelConfig;\n  public destroyed: boolean = false;\n  protected plot: any;\n  protected view: View;\n  private container: IGroup;\n\n  constructor(cfg: IMatrixLabel) {\n    this.view = cfg.view;\n    this.plot = cfg.plot;\n    const defaultOptions = this.getDefaultOptions();\n    this.options = deepMix(defaultOptions, cfg, {});\n    this.init();\n  }\n\n  protected init() {\n    this.container = this.view.geometries[0].labelsContainer;\n    this.view.on('beforerender', () => {\n      this.clear();\n      this.plot.canvas.draw();\n    });\n  }\n\n  public render() {\n    const elements = this.view.geometries[0].elements;\n    each(elements, (ele) => {\n      const { shape } = ele;\n      const { style, offsetX, offsetY } = this.options;\n      const formatter = this.options.formatter;\n      const content = formatter ? formatter(this.getContent(shape)) : this.getContent(shape);\n      const position = this.getPosition(shape);\n      const color = this.getTextColor(shape);\n      const label = this.container.addShape('text', {\n        attrs: deepMix({}, style, {\n          x: position.x + offsetX,\n          y: position.y + offsetY,\n          text: content,\n          fill: color,\n          textAlign: 'center',\n          textBaseline: 'middle',\n        }),\n        name: 'label',\n      });\n      if (this.options.adjustPosition) {\n        this.adjustLabel(label, shape);\n      }\n    });\n  }\n\n  public clear() {\n    if (this.container) {\n      this.container.clear();\n    }\n  }\n\n  public hide() {\n    this.container.set('visible', false);\n    this.plot.canvas.draw();\n  }\n\n  public show() {\n    this.container.set('visible', true);\n    this.plot.canvas.draw();\n  }\n\n  public destroy() {\n    if (this.container) {\n      this.container.remove();\n    }\n    this.destroyed = true;\n  }\n\n  public getBBox() {\n    return this.container.getBBox();\n  }\n\n  private getDefaultOptions() {\n    const { theme } = this.plot;\n    const labelStyle = theme.label.style;\n    return {\n      offsetX: 0,\n      offsetY: 0,\n      style: clone(labelStyle),\n    };\n  }\n\n  protected getContent(shape) {\n    const data = shape.get('origin').data;\n    const field = this.plot.options.colorField;\n    return data[field];\n  }\n\n  protected getPosition(shape) {\n    const bbox = shape.getBBox();\n    return {\n      x: bbox.minX + bbox.width / 2,\n      y: bbox.minY + bbox.height / 2,\n    };\n  }\n\n  protected getTextColor(shape) {\n    if (this.options.adjustColor) {\n      const shapeColor = shape.attr('fill');\n      const shapeOpacity = shape.attr('opacity') ? shape.attr('opacity') : 1;\n      const rgb = rgb2arr(shapeColor);\n      const gray = Math.round(rgb[0] * 0.299 + rgb[1] * 0.587 + rgb[2] * 0.114) / shapeOpacity;\n      const colorBand = [\n        { from: 0, to: 85, color: 'white' },\n        { from: 85, to: 170, color: '#F6F6F6' },\n        { from: 170, to: 255, color: 'black' },\n      ];\n      const reflect = mappingColor(colorBand, gray);\n      return reflect;\n    }\n    const defaultColor = this.options.style.fill;\n    return defaultColor;\n  }\n\n  protected adjustLabel(label, shape) {\n    const labelRange = label.getBBox();\n    const shapeRange = shape.getBBox();\n    if (labelRange.width > shapeRange.width || labelRange.height > shapeRange.height) {\n      label.attr('text', '');\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}