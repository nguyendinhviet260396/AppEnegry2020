{"ast":null,"code":"import { __assign } from \"tslib\";\nimport fecha from 'fecha';\nimport { head, last, find } from '@antv/util';\nimport { DATE_FIELD, DAY_FIELD, FORMATTER, WEEK_FIELD } from './constant';\nimport { advanceBy, DAY_MS, getDay, getWeek } from '../../util/date';\n/**\n * 解析日期\n * @param dateRange\n */\n\nfunction parseDateRange(dateRange) {\n  var _a;\n\n  var from = dateRange[0],\n      to = dateRange[1];\n  var fromDate = fecha.parse(from, FORMATTER);\n  var toDate = fecha.parse(to, FORMATTER); // 交换顺序\n\n  if (fromDate > toDate) {\n    _a = [fromDate, toDate], toDate = _a[0], fromDate = _a[1];\n  }\n\n  return [fromDate, toDate];\n}\n/**\n * 根据 range 补齐日历图的数据\n * @param data 传入数据\n * @param dateRange 日期区间\n * @param dateField 日期字段\n */\n\n\nexport function generateCalendarData(data, dateRange, dateField) {\n  var all = [];\n\n  var _a = parseDateRange(dateRange),\n      fromDate = _a[0],\n      toDate = _a[1]; // copy 一份\n\n\n  var curr = new Date(fromDate);\n\n  var _loop_1 = function _loop_1() {\n    var _a;\n\n    var dateString = fecha.format(curr, FORMATTER); // 找到对应的数据\n\n    var datum = find(data, function (datum) {\n      return datum[dateField] === dateString;\n    });\n    all.push(__assign((_a = {}, _a[DAY_FIELD] = getDay(curr), _a[WEEK_FIELD] = \"\" + getWeek(curr), _a[dateField] = dateString, _a[DATE_FIELD] = new Date(curr), _a), datum)); // 向前移动一天\n\n    advanceBy(curr, DAY_MS);\n  };\n\n  while (curr <= toDate) {\n    _loop_1();\n  }\n\n  return all;\n}\n/**\n * 计算每个月的中间周。\n */\n\nexport function getMonthCenterWeek(dateRange) {\n  var _a = parseDateRange(dateRange),\n      fromDate = _a[0],\n      toDate = _a[1];\n\n  var monthWeekMap = new Map();\n\n  function append(current) {\n    var month = current.getMonth(); // 从 0 开始\n\n    var week = getWeek(current);\n\n    if (!monthWeekMap.has(month)) {\n      monthWeekMap.set(month, []);\n    }\n\n    monthWeekMap.get(month).push(week);\n  } // copy 一份\n\n\n  var curr = new Date(fromDate);\n\n  while (curr <= toDate) {\n    // 设置到 map 中\n    append(curr); // 向前移动 7 天（一周）\n\n    advanceBy(curr, DAY_MS * 7);\n  } // 增加最后一个日期的计算\n\n\n  if (toDate < curr) {\n    append(toDate);\n  } // 处理数据，返回结果\n\n\n  var result = {}; // week -> month\n\n  monthWeekMap.forEach(function (v, k) {\n    var w = Math.ceil((head(v) + last(v)) / 2); // 取平均值\n\n    result[w] = k;\n  });\n  return result;\n}","map":{"version":3,"sources":["../../../src/plots/calendar/util.ts"],"names":[],"mappings":"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","sourcesContent":["import fecha from 'fecha';\nimport { head, last, find } from '@antv/util';\nimport { DataItem } from '../..';\nimport { DATE_FIELD, DAY_FIELD, FORMATTER, WEEK_FIELD } from './constant';\nimport { advanceBy, DAY_MS, getDay, getWeek } from '../../util/date';\n\n/**\n * 解析日期\n * @param dateRange\n */\nfunction parseDateRange(dateRange: string[]): Date[] {\n  const [from, to] = dateRange;\n\n  let fromDate = fecha.parse(from, FORMATTER);\n  let toDate = fecha.parse(to, FORMATTER);\n\n  // 交换顺序\n  if (fromDate > toDate) {\n    [toDate, fromDate] = [fromDate, toDate];\n  }\n\n  return [fromDate, toDate];\n}\n\n/**\n * 根据 range 补齐日历图的数据\n * @param data 传入数据\n * @param dateRange 日期区间\n * @param dateField 日期字段\n */\nexport function generateCalendarData(data: DataItem[], dateRange: string[], dateField: string): DataItem[] {\n  const all = [];\n\n  const [fromDate, toDate] = parseDateRange(dateRange);\n  // copy 一份\n  const curr = new Date(fromDate);\n  while (curr <= toDate) {\n    const dateString = fecha.format(curr, FORMATTER);\n    // 找到对应的数据\n    const datum = find(data, (datum: DataItem) => datum[dateField] === dateString);\n\n    all.push({\n      [DAY_FIELD]: getDay(curr),\n      [WEEK_FIELD]: `${getWeek(curr)}`,\n      [dateField]: dateString,\n      [DATE_FIELD]: new Date(curr), // copy\n      ...datum,\n    });\n\n    // 向前移动一天\n    advanceBy(curr, DAY_MS);\n  }\n\n  return all;\n}\n\n/**\n * 计算每个月的中间周。\n */\nexport function getMonthCenterWeek(dateRange: string[]): Record<number, number> {\n  const [fromDate, toDate] = parseDateRange(dateRange);\n\n  const monthWeekMap = new Map<number, number[]>();\n\n  function append(current: Date) {\n    const month = current.getMonth(); // 从 0 开始\n    const week = getWeek(current);\n\n    if (!monthWeekMap.has(month)) {\n      monthWeekMap.set(month, []);\n    }\n\n    monthWeekMap.get(month).push(week);\n  }\n\n  // copy 一份\n  const curr = new Date(fromDate);\n  while (curr <= toDate) {\n    // 设置到 map 中\n    append(curr);\n\n    // 向前移动 7 天（一周）\n    advanceBy(curr, DAY_MS * 7);\n  }\n\n  // 增加最后一个日期的计算\n  if (toDate < curr) {\n    append(toDate);\n  }\n\n  // 处理数据，返回结果\n  const result: Record<number, number> = {}; // week -> month\n\n  monthWeekMap.forEach((v: number[], k: number) => {\n    const w = Math.ceil((head(v) + last(v)) / 2); // 取平均值\n    result[w] = k;\n  });\n\n  return result;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}