{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { clock } from '../utils/clock';\nimport { Gesture } from './gesture';\nvar SWIPE_TIME_GAP = 100;\n\nvar Swipe =\n/** @class */\nfunction (_super) {\n  __extends(Swipe, _super);\n\n  function Swipe() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.EVENT = 'swipe'; // 最后一次 move 的事件，用于区分 swipe 和 pan\n\n    _this.latestMoveTime = 0; // 最后交互的时间，用于计算速度\n\n    _this.ms = 0; // 最后的 move 速度，用于touchend 之后做惯性\n\n    _this.speedX = 0;\n    _this.speedY = 0; // 最后 move 的 x，y 位置\n\n    _this.preX = 0;\n    _this.preY = 0;\n    return _this;\n  }\n\n  Swipe.prototype.onTouchCancel = function (ev) {};\n\n  Swipe.prototype.onTouchEnd = function (ev) {\n    var speedX = this.speedX;\n    var speedY = this.speedY;\n\n    if (clock.now() - this.latestMoveTime < SWIPE_TIME_GAP) {\n      var x = ev.x,\n          y = ev.y; // 抛出事件\n\n      this.emit({\n        x: x,\n        y: y,\n        speedX: speedX,\n        speedY: speedY,\n        event: ev\n      });\n    }\n  };\n\n  Swipe.prototype.onTouchMove = function (ev) {\n    var x = ev.x,\n        y = ev.y;\n    var ms = clock.now(); // 1. 计算 wheel 偏移\n\n    var deltaX = x - this.preX;\n    var deltaY = y - this.preY;\n    var deltaTime = ms - this.ms; // 2. 计算速度（简版吧）\n\n    this.speedX = deltaX / deltaTime;\n    this.speedY = deltaY / deltaTime; // 记录最后一次移动事件\n\n    this.latestMoveTime = ms;\n  };\n\n  Swipe.prototype.onTouchStart = function (ev) {\n    var x = ev.x,\n        y = ev.y; // 初始化\n\n    this.speedX = this.speedY = 0;\n    this.preX = x;\n    this.preY = y;\n    this.ms = clock.now();\n  };\n\n  return Swipe;\n}(Gesture);\n\nexport { Swipe };","map":{"version":3,"sources":["../../src/gestures/swipe.ts"],"names":[],"mappings":";AAKA,SAAS,KAAT,QAAsB,gBAAtB;AACA,SAAS,OAAT,QAAwB,WAAxB;AAEA,IAAM,cAAc,GAAG,GAAvB;;AAEA,IAAA,KAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA2B,EAAA,SAAA,CAAA,KAAA,EAAA,MAAA,CAAA;;AAA3B,WAAA,KAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;;AACY,IAAA,KAAA,CAAA,KAAA,GAAgB,OAAhB,CADZ,CAGE;;AACQ,IAAA,KAAA,CAAA,cAAA,GAAyB,CAAzB,CAJV,CAME;;AACQ,IAAA,KAAA,CAAA,EAAA,GAAa,CAAb,CAPV,CAQE;;AACQ,IAAA,KAAA,CAAA,MAAA,GAAiB,CAAjB;AACA,IAAA,KAAA,CAAA,MAAA,GAAiB,CAAjB,CAVV,CAWE;;AACQ,IAAA,KAAA,CAAA,IAAA,GAAe,CAAf;AACA,IAAA,KAAA,CAAA,IAAA,GAAe,CAAf;;AA0CT;;AAxCW,EAAA,KAAA,CAAA,SAAA,CAAA,aAAA,GAAV,UAAwB,EAAxB,EAAiC,CAAI,CAA3B;;AAEA,EAAA,KAAA,CAAA,SAAA,CAAA,UAAA,GAAV,UAAqB,EAArB,EAA8B;AAC5B,QAAM,MAAM,GAAG,KAAK,MAApB;AACA,QAAM,MAAM,GAAG,KAAK,MAApB;;AAEA,QAAI,KAAK,CAAC,GAAN,KAAc,KAAK,cAAnB,GAAoC,cAAxC,EAAwD;AAC9C,UAAA,CAAA,GAAA,EAAA,CAAA,CAAA;AAAA,UAAG,CAAA,GAAA,EAAA,CAAA,CAAH,CAD8C,CAGtD;;AACA,WAAK,IAAL,CAAU;AAAE,QAAA,CAAC,EAAA,CAAH;AAAK,QAAA,CAAC,EAAA,CAAN;AAAQ,QAAA,MAAM,EAAA,MAAd;AAAgB,QAAA,MAAM,EAAA,MAAtB;AAAwB,QAAA,KAAK,EAAE;AAA/B,OAAV;AACD;AACF,GAVS;;AAYA,EAAA,KAAA,CAAA,SAAA,CAAA,WAAA,GAAV,UAAsB,EAAtB,EAA+B;AACrB,QAAA,CAAA,GAAA,EAAA,CAAA,CAAA;AAAA,QAAG,CAAA,GAAA,EAAA,CAAA,CAAH;AAER,QAAM,EAAE,GAAG,KAAK,CAAC,GAAN,EAAX,CAH6B,CAI7B;;AACA,QAAM,MAAM,GAAG,CAAC,GAAG,KAAK,IAAxB;AACA,QAAM,MAAM,GAAG,CAAC,GAAG,KAAK,IAAxB;AACA,QAAM,SAAS,GAAG,EAAE,GAAG,KAAK,EAA5B,CAP6B,CAS7B;;AACA,SAAK,MAAL,GAAc,MAAM,GAAG,SAAvB;AACA,SAAK,MAAL,GAAc,MAAM,GAAG,SAAvB,CAX6B,CAa7B;;AACA,SAAK,cAAL,GAAsB,EAAtB;AACD,GAfS;;AAiBA,EAAA,KAAA,CAAA,SAAA,CAAA,YAAA,GAAV,UAAuB,EAAvB,EAAgC;AACtB,QAAA,CAAA,GAAA,EAAA,CAAA,CAAA;AAAA,QAAG,CAAA,GAAA,EAAA,CAAA,CAAH,CADsB,CAG9B;;AACA,SAAK,MAAL,GAAc,KAAK,MAAL,GAAc,CAA5B;AACA,SAAK,IAAL,GAAY,CAAZ;AACA,SAAK,IAAL,GAAY,CAAZ;AACA,SAAK,EAAL,GAAU,KAAK,CAAC,GAAN,EAAV;AACD,GARS;;AASZ,SAAA,KAAA;AAAC,CAvDD,CAA2B,OAA3B,CAAA","sourceRoot":"","sourcesContent":["import { __extends } from \"tslib\";\nimport { clock } from '../utils/clock';\nimport { Gesture } from './gesture';\nvar SWIPE_TIME_GAP = 100;\nvar Swipe = /** @class */ (function (_super) {\n    __extends(Swipe, _super);\n    function Swipe() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.EVENT = 'swipe';\n        // 最后一次 move 的事件，用于区分 swipe 和 pan\n        _this.latestMoveTime = 0;\n        // 最后交互的时间，用于计算速度\n        _this.ms = 0;\n        // 最后的 move 速度，用于touchend 之后做惯性\n        _this.speedX = 0;\n        _this.speedY = 0;\n        // 最后 move 的 x，y 位置\n        _this.preX = 0;\n        _this.preY = 0;\n        return _this;\n    }\n    Swipe.prototype.onTouchCancel = function (ev) { };\n    Swipe.prototype.onTouchEnd = function (ev) {\n        var speedX = this.speedX;\n        var speedY = this.speedY;\n        if (clock.now() - this.latestMoveTime < SWIPE_TIME_GAP) {\n            var x = ev.x, y = ev.y;\n            // 抛出事件\n            this.emit({ x: x, y: y, speedX: speedX, speedY: speedY, event: ev });\n        }\n    };\n    Swipe.prototype.onTouchMove = function (ev) {\n        var x = ev.x, y = ev.y;\n        var ms = clock.now();\n        // 1. 计算 wheel 偏移\n        var deltaX = x - this.preX;\n        var deltaY = y - this.preY;\n        var deltaTime = ms - this.ms;\n        // 2. 计算速度（简版吧）\n        this.speedX = deltaX / deltaTime;\n        this.speedY = deltaY / deltaTime;\n        // 记录最后一次移动事件\n        this.latestMoveTime = ms;\n    };\n    Swipe.prototype.onTouchStart = function (ev) {\n        var x = ev.x, y = ev.y;\n        // 初始化\n        this.speedX = this.speedY = 0;\n        this.preX = x;\n        this.preY = y;\n        this.ms = clock.now();\n    };\n    return Swipe;\n}(Gesture));\nexport { Swipe };\n//# sourceMappingURL=swipe.js.map"]},"metadata":{},"sourceType":"module"}