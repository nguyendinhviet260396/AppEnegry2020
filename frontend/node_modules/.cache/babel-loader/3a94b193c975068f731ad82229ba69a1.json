{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { firstValue, get, isEmpty, isNil, isNumber, isString, valuesOfKey } from '@antv/util';\nimport { getScale } from '../dependents';\nvar dateRegex = /^(?:(?!0000)[0-9]{4}([-/.]+)(?:(?:0?[1-9]|1[0-2])\\1(?:0?[1-9]|1[0-9]|2[0-8])|(?:0?[13-9]|1[0-2])\\1(?:29|30)|(?:0?[13578]|1[02])\\1(?:31))|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)([-/.]+)0?2\\2(?:29))(\\s+([01]|([01][0-9]|2[0-3])):([0-9]|[0-5][0-9]):([0-9]|[0-5][0-9]))?$/;\n/**\n * 获取字段对应数据的类型\n * @param field 数据字段名\n * @param data 数据源\n * @returns default type 返回对应的数据类型\n */\n\nfunction getDefaultType(value) {\n  var type = 'linear';\n\n  if (dateRegex.test(value)) {\n    type = 'time';\n  } else if (isString(value)) {\n    type = 'cat';\n  }\n\n  return type;\n}\n/**\n * @ignore\n * 为指定的 `field` 字段数据创建 scale\n * @param field 字段名\n * @param [data] 数据集，可为空\n * @param [scaleDef] 列定义，可为空\n * @returns scale 返回创建的 Scale 实例\n */\n\n\nexport function createScaleByField(field, data, scaleDef) {\n  var validData = data || [];\n\n  if (isNumber(field) || isNil(firstValue(validData, field)) && isEmpty(scaleDef)) {\n    var Identity = getScale('identity');\n    return new Identity({\n      field: field.toString(),\n      values: [field]\n    });\n  }\n\n  var values = valuesOfKey(validData, field); // 如果已经定义过这个度量\n\n  var type = get(scaleDef, 'type', getDefaultType(values[0]));\n  var ScaleCtor = getScale(type);\n  return new ScaleCtor(__assign({\n    field: field,\n    values: values\n  }, scaleDef));\n}\n/**\n * @ignore\n * 同步 scale\n * @todo 是否可以通过 scale.update() 方法进行更新\n * @param scale 需要同步的 scale 实例\n * @param newScale 同步源 Scale\n */\n\nexport function syncScale(scale, newScale) {\n  if (scale.type !== 'identity' && newScale.type !== 'identity') {\n    var obj = {};\n\n    for (var k in newScale) {\n      if (Object.prototype.hasOwnProperty.call(newScale, k)) {\n        obj[k] = newScale[k];\n      }\n    }\n\n    scale.change(obj);\n  }\n}\n/**\n * @ignore\n * get the scale name, if alias exist, return alias, or else field\n * @param scale\n * @returns the name of field\n */\n\nexport function getName(scale) {\n  return scale.alias || scale.field;\n}","map":{"version":3,"sources":["../../src/util/scale.ts"],"names":[],"mappings":";AAAA,SAAS,UAAT,EAAqB,GAArB,EAA0B,OAA1B,EAAmC,KAAnC,EAA0C,QAA1C,EAAoD,QAApD,EAA8D,WAA9D,QAAiF,YAAjF;AACA,SAAS,QAAT,QAAgC,eAAhC;AAGA,IAAM,SAAS,GAAG,sTAAlB;AAEA;;;;;;;AAMA,SAAS,cAAT,CAAwB,KAAxB,EAAkC;AAChC,MAAI,IAAI,GAAG,QAAX;;AACA,MAAI,SAAS,CAAC,IAAV,CAAe,KAAf,CAAJ,EAA2B;AACzB,IAAA,IAAI,GAAG,MAAP;AACD,GAFD,MAEO,IAAI,QAAQ,CAAC,KAAD,CAAZ,EAAqB;AAC1B,IAAA,IAAI,GAAG,KAAP;AACD;;AACD,SAAO,IAAP;AACD;AAED;;;;;;;;;;AAQA,OAAM,SAAU,kBAAV,CAA6B,KAA7B,EAAqD,IAArD,EAAgF,QAAhF,EAAsG;AAC1G,MAAM,SAAS,GAAG,IAAI,IAAI,EAA1B;;AAEA,MAAI,QAAQ,CAAC,KAAD,CAAR,IAAoB,KAAK,CAAC,UAAU,CAAC,SAAD,EAAY,KAAZ,CAAX,CAAL,IAAuC,OAAO,CAAC,QAAD,CAAtE,EAAmF;AACjF,QAAM,QAAQ,GAAG,QAAQ,CAAC,UAAD,CAAzB;AACA,WAAO,IAAI,QAAJ,CAAa;AAClB,MAAA,KAAK,EAAE,KAAK,CAAC,QAAN,EADW;AAElB,MAAA,MAAM,EAAE,CAAC,KAAD;AAFU,KAAb,CAAP;AAID;;AAED,MAAM,MAAM,GAAG,WAAW,CAAC,SAAD,EAAY,KAAZ,CAA1B,CAX0G,CAa1G;;AACA,MAAM,IAAI,GAAG,GAAG,CAAC,QAAD,EAAW,MAAX,EAAmB,cAAc,CAAC,MAAM,CAAC,CAAD,CAAP,CAAjC,CAAhB;AACA,MAAM,SAAS,GAAG,QAAQ,CAAC,IAAD,CAA1B;AACA,SAAO,IAAI,SAAJ,CAAa,QAAA,CAAA;AAClB,IAAA,KAAK,EAAA,KADa;AAElB,IAAA,MAAM,EAAA;AAFY,GAAA,EAGf,QAHe,CAAb,CAAP;AAKD;AAED;;;;;;;;AAOA,OAAM,SAAU,SAAV,CAAoB,KAApB,EAAkC,QAAlC,EAAiD;AACrD,MAAI,KAAK,CAAC,IAAN,KAAe,UAAf,IAA6B,QAAQ,CAAC,IAAT,KAAkB,UAAnD,EAA+D;AAC7D,QAAM,GAAG,GAAG,EAAZ;;AACA,SAAK,IAAM,CAAX,IAAgB,QAAhB,EAA0B;AACxB,UAAI,MAAM,CAAC,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,QAArC,EAA+C,CAA/C,CAAJ,EAAuD;AACrD,QAAA,GAAG,CAAC,CAAD,CAAH,GAAS,QAAQ,CAAC,CAAD,CAAjB;AACD;AACF;;AAED,IAAA,KAAK,CAAC,MAAN,CAAa,GAAb;AACD;AACF;AAED;;;;;;;AAMA,OAAM,SAAU,OAAV,CAAkB,KAAlB,EAA8B;AAClC,SAAO,KAAK,CAAC,KAAN,IAAe,KAAK,CAAC,KAA5B;AACD","sourcesContent":["import { firstValue, get, isEmpty, isNil, isNumber, isString, valuesOfKey } from '@antv/util';\nimport { getScale, Scale } from '../dependents';\nimport { LooseObject, ScaleOption } from '../interface';\n\nconst dateRegex = /^(?:(?!0000)[0-9]{4}([-/.]+)(?:(?:0?[1-9]|1[0-2])\\1(?:0?[1-9]|1[0-9]|2[0-8])|(?:0?[13-9]|1[0-2])\\1(?:29|30)|(?:0?[13578]|1[02])\\1(?:31))|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)([-/.]+)0?2\\2(?:29))(\\s+([01]|([01][0-9]|2[0-3])):([0-9]|[0-5][0-9]):([0-9]|[0-5][0-9]))?$/;\n\n/**\n * 获取字段对应数据的类型\n * @param field 数据字段名\n * @param data 数据源\n * @returns default type 返回对应的数据类型\n */\nfunction getDefaultType(value: any): string {\n  let type = 'linear';\n  if (dateRegex.test(value)) {\n    type = 'time';\n  } else if (isString(value)) {\n    type = 'cat';\n  }\n  return type;\n}\n\n/**\n * @ignore\n * 为指定的 `field` 字段数据创建 scale\n * @param field 字段名\n * @param [data] 数据集，可为空\n * @param [scaleDef] 列定义，可为空\n * @returns scale 返回创建的 Scale 实例\n */\nexport function createScaleByField(field: string | number, data?: LooseObject[] | [], scaleDef?: ScaleOption): Scale {\n  const validData = data || [];\n\n  if (isNumber(field) || (isNil(firstValue(validData, field)) && isEmpty(scaleDef))) {\n    const Identity = getScale('identity');\n    return new Identity({\n      field: field.toString(),\n      values: [field],\n    });\n  }\n\n  const values = valuesOfKey(validData, field);\n\n  // 如果已经定义过这个度量\n  const type = get(scaleDef, 'type', getDefaultType(values[0]));\n  const ScaleCtor = getScale(type);\n  return new ScaleCtor({\n    field,\n    values,\n    ...scaleDef,\n  });\n}\n\n/**\n * @ignore\n * 同步 scale\n * @todo 是否可以通过 scale.update() 方法进行更新\n * @param scale 需要同步的 scale 实例\n * @param newScale 同步源 Scale\n */\nexport function syncScale(scale: Scale, newScale: Scale) {\n  if (scale.type !== 'identity' && newScale.type !== 'identity') {\n    const obj = {};\n    for (const k in newScale) {\n      if (Object.prototype.hasOwnProperty.call(newScale, k)) {\n        obj[k] = newScale[k];\n      }\n    }\n\n    scale.change(obj);\n  }\n}\n\n/**\n * @ignore\n * get the scale name, if alias exist, return alias, or else field\n * @param scale\n * @returns the name of field\n */\nexport function getName(scale: Scale): string {\n  return scale.alias || scale.field;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}