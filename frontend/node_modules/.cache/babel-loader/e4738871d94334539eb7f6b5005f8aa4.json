{"ast":null,"code":"import { __spreadArrays } from \"tslib\";\nimport { head, last } from '@antv/util';\nimport fecha from 'fecha';\nimport { FORMATTER } from '../plots/calendar/constant';\n/**\n * 一天多少 ms\n */\n\nexport var DAY_MS = 86400000;\n/**\n * 获取最大最小日期范围\n * @param dates\n */\n\nexport function getDateRange(dates) {\n  var ds = __spreadArrays(dates).sort(function (a, b) {\n    return a.getTime() - b.getTime();\n  });\n\n  return [fecha.format(head(ds), FORMATTER), fecha.format(last(ds), FORMATTER)];\n}\n/**\n * 日期对应年的范围\n * @param date\n */\n\nexport function getYearRange(date) {\n  var curr = date ? date : new Date();\n  return [fecha.format(new Date(curr.getFullYear(), 0, 1), FORMATTER), fecha.format(new Date(curr.getFullYear(), 11, 30), FORMATTER)];\n}\n/**\n * 是否当前月的最后一周\n */\n\nexport function isLastWeekOfMonth(date) {\n  // 偏移 7 天之后，月份是否一样\n  return date.getMonth() !== advanceBy(new Date(date), 7 * DAY_MS).getMonth();\n}\n/**\n * 是否是当月的最后一天\n */\n\nexport function isLastDayOfMonth(date) {\n  // 偏移 1 天之后，月份是否一样\n  return date.getMonth() !== advanceBy(new Date(date), DAY_MS).getMonth();\n}\n/**\n * 获取 date 对应的周索引（国际标准：一年的第一个周四为第一周）\n * @param date\n */\n\nexport function getWeek(date) {\n  // 当年的第一天\n  var oneJan = new Date(date.getFullYear(), 0, 1);\n  return Math.ceil(((date.getTime() - oneJan.getTime()) / DAY_MS + oneJan.getDay() + 1) / 7);\n}\n/**\n * 获得一周的第几天（周日第 0 天）\n * @param date\n */\n\nexport function getDay(date) {\n  return date.getDay();\n}\n/**\n * 将 Date 前进 ms 时间\n * @param d\n * @param ms\n */\n\nexport function advanceBy(d, ms) {\n  d.setMilliseconds(d.getMilliseconds() + ms);\n  return d;\n}","map":{"version":3,"sources":["../../src/util/date.ts"],"names":[],"mappings":";AAAA,SAAS,IAAT,EAAe,IAAf,QAA2B,YAA3B;AACA,OAAO,KAAP,MAAkB,OAAlB;AACA,SAAS,SAAT,QAA0B,4BAA1B;AAEA;;;;AAGA,OAAO,IAAM,MAAM,GAAG,QAAf;AAEP;;;;;AAIA,OAAM,SAAU,YAAV,CAAuB,KAAvB,EAAoC;AACxC,MAAM,EAAE,GAAG,cAAA,CAAI,KAAJ,CAAA,CAAW,IAAX,CAAgB,UAAC,CAAD,EAAU,CAAV,EAAiB;AAAK,WAAA,CAAC,CAAC,OAAF,KAAc,CAAC,CAAf,OAAc,EAAd;AAAyB,GAA/D,CAAX;;AAEA,SAAO,CAAC,KAAK,CAAC,MAAN,CAAa,IAAI,CAAC,EAAD,CAAjB,EAAuB,SAAvB,CAAD,EAAoC,KAAK,CAAC,MAAN,CAAa,IAAI,CAAC,EAAD,CAAjB,EAAuB,SAAvB,CAApC,CAAP;AACD;AAED;;;;;AAIA,OAAM,SAAU,YAAV,CAAuB,IAAvB,EAAkC;AACtC,MAAM,IAAI,GAAG,IAAI,GAAG,IAAH,GAAU,IAAI,IAAJ,EAA3B;AAEA,SAAO,CACL,KAAK,CAAC,MAAN,CAAa,IAAI,IAAJ,CAAS,IAAI,CAAC,WAAL,EAAT,EAA6B,CAA7B,EAAgC,CAAhC,CAAb,EAAiD,SAAjD,CADK,EAEL,KAAK,CAAC,MAAN,CAAa,IAAI,IAAJ,CAAS,IAAI,CAAC,WAAL,EAAT,EAA6B,EAA7B,EAAiC,EAAjC,CAAb,EAAmD,SAAnD,CAFK,CAAP;AAID;AAED;;;;AAGA,OAAM,SAAU,iBAAV,CAA4B,IAA5B,EAAsC;AAC1C;AACA,SAAO,IAAI,CAAC,QAAL,OAAoB,SAAS,CAAC,IAAI,IAAJ,CAAS,IAAT,CAAD,EAAiB,IAAI,MAArB,CAAT,CAAsC,QAAtC,EAA3B;AACD;AAED;;;;AAGA,OAAM,SAAU,gBAAV,CAA2B,IAA3B,EAAqC;AACzC;AACA,SAAO,IAAI,CAAC,QAAL,OAAoB,SAAS,CAAC,IAAI,IAAJ,CAAS,IAAT,CAAD,EAAiB,MAAjB,CAAT,CAAkC,QAAlC,EAA3B;AACD;AAED;;;;;AAIA,OAAM,SAAU,OAAV,CAAkB,IAAlB,EAA4B;AAChC;AACA,MAAM,MAAM,GAAG,IAAI,IAAJ,CAAS,IAAI,CAAC,WAAL,EAAT,EAA6B,CAA7B,EAAgC,CAAhC,CAAf;AAEA,SAAO,IAAI,CAAC,IAAL,CAAU,CAAC,CAAC,IAAI,CAAC,OAAL,KAAiB,MAAM,CAAC,OAAP,EAAlB,IAAsC,MAAtC,GAA+C,MAAM,CAAC,MAAP,EAA/C,GAAiE,CAAlE,IAAuE,CAAjF,CAAP;AACD;AAED;;;;;AAIA,OAAM,SAAU,MAAV,CAAiB,IAAjB,EAA2B;AAC/B,SAAO,IAAI,CAAC,MAAL,EAAP;AACD;AAED;;;;;;AAKA,OAAM,SAAU,SAAV,CAAoB,CAApB,EAA6B,EAA7B,EAAuC;AAC3C,EAAA,CAAC,CAAC,eAAF,CAAkB,CAAC,CAAC,eAAF,KAAsB,EAAxC;AACA,SAAO,CAAP;AACD","sourcesContent":["import { head, last } from '@antv/util';\nimport fecha from 'fecha';\nimport { FORMATTER } from '../plots/calendar/constant';\n\n/**\n * 一天多少 ms\n */\nexport const DAY_MS = 86400000;\n\n/**\n * 获取最大最小日期范围\n * @param dates\n */\nexport function getDateRange(dates: Date[]): string[] {\n  const ds = [...dates].sort((a: Date, b: Date) => a.getTime() - b.getTime());\n\n  return [fecha.format(head(ds), FORMATTER), fecha.format(last(ds), FORMATTER)];\n}\n\n/**\n * 日期对应年的范围\n * @param date\n */\nexport function getYearRange(date?: Date): string[] {\n  const curr = date ? date : new Date();\n\n  return [\n    fecha.format(new Date(curr.getFullYear(), 0, 1), FORMATTER),\n    fecha.format(new Date(curr.getFullYear(), 11, 30), FORMATTER),\n  ];\n}\n\n/**\n * 是否当前月的最后一周\n */\nexport function isLastWeekOfMonth(date: Date): boolean {\n  // 偏移 7 天之后，月份是否一样\n  return date.getMonth() !== advanceBy(new Date(date), 7 * DAY_MS).getMonth();\n}\n\n/**\n * 是否是当月的最后一天\n */\nexport function isLastDayOfMonth(date: Date): boolean {\n  // 偏移 1 天之后，月份是否一样\n  return date.getMonth() !== advanceBy(new Date(date), DAY_MS).getMonth();\n}\n\n/**\n * 获取 date 对应的周索引（国际标准：一年的第一个周四为第一周）\n * @param date\n */\nexport function getWeek(date: Date): number {\n  // 当年的第一天\n  const oneJan = new Date(date.getFullYear(), 0, 1);\n\n  return Math.ceil(((date.getTime() - oneJan.getTime()) / DAY_MS + oneJan.getDay() + 1) / 7);\n}\n\n/**\n * 获得一周的第几天（周日第 0 天）\n * @param date\n */\nexport function getDay(date: Date): number {\n  return date.getDay();\n}\n\n/**\n * 将 Date 前进 ms 时间\n * @param d\n * @param ms\n */\nexport function advanceBy(d: Date, ms: number): Date {\n  d.setMilliseconds(d.getMilliseconds() + ms);\n  return d;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}