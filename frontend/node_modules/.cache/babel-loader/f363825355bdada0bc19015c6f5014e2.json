{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { each, map, filter, last } from '@antv/util';\nimport { registerLabelComponent } from '../../../../components/label/base';\nimport PointAutoLabel from '../../../../components/label/point-auto';\nimport { getGeometryShapes, getGeometryByType } from '../../../../util/view';\nimport { getStrokePoints } from '../../../../util/math';\nimport { isContrastColorWhite } from '../../../../util/color';\n\nvar AreaPointAutoLabel =\n/** @class */\nfunction (_super) {\n  __extends(AreaPointAutoLabel, _super);\n\n  function AreaPointAutoLabel() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  AreaPointAutoLabel.prototype.layoutLabels = function (geometry, labels) {\n    _super.prototype.layoutLabels.call(this, geometry, labels);\n\n    this.adjustAreaLabelsStyle(labels);\n  };\n\n  AreaPointAutoLabel.prototype.adjustAreaLabelsStyle = function (labels) {\n    var view = this.view;\n    var _a = this.options,\n        darkStyle = _a.darkStyle,\n        lightStyle = _a.lightStyle;\n    var areaGeometry = getGeometryByType(view, 'area');\n    var areas = getGeometryShapes(areaGeometry).sort(function (left, right) {\n      return right.getBBox().height - left.getBBox().height;\n    });\n    each(labels, function (label) {\n      var labelBBox = label.getBBox();\n      var points = getStrokePoints(labelBBox.x, labelBBox.y, labelBBox.width, labelBBox.height);\n      var match = map(areas, function (area) {\n        return {\n          area: area,\n          matches: filter(points, function (point) {\n            return !!area.isHit(point[0], point[1]);\n          }).length\n        };\n      }).sort(function (left, right) {\n        return left.matches - right.matches;\n      });\n\n      if (last(match).matches > 0) {\n        var bgColor = last(match).area.attr('fill');\n        var fillWhite = isContrastColorWhite(bgColor);\n        label.attr({\n          fill: fillWhite ? lightStyle === null || lightStyle === void 0 ? void 0 : lightStyle.fill : darkStyle === null || darkStyle === void 0 ? void 0 : darkStyle.fill,\n          fillOpacity: fillWhite ? lightStyle.fillOpacity : darkStyle.fillOpacity,\n          stroke: fillWhite ? lightStyle === null || lightStyle === void 0 ? void 0 : lightStyle.stroke : darkStyle === null || darkStyle === void 0 ? void 0 : darkStyle.stroke\n        });\n      }\n    });\n  };\n\n  return AreaPointAutoLabel;\n}(PointAutoLabel);\n\nexport default AreaPointAutoLabel;\nregisterLabelComponent('area-point-auto', AreaPointAutoLabel);","map":{"version":3,"sources":["../../../../../src/plots/area/component/label/area-point-auto.ts"],"names":[],"mappings":"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","sourcesContent":["import { each, map, filter, last } from '@antv/util';\nimport { registerLabelComponent } from '../../../../components/label/base';\nimport PointAutoLabel from '../../../../components/label/point-auto';\nimport { Geometry, IShape, IElement } from '../../../../dependents';\nimport { getGeometryShapes, getGeometryByType } from '../../../../util/view';\nimport { getStrokePoints } from '../../../../util/math';\nimport { isContrastColorWhite } from '../../../../util/color';\nimport { IAreaPointAutoLabel } from '../../interface';\n\nexport default class AreaPointAutoLabel extends PointAutoLabel<IAreaPointAutoLabel> {\n  protected layoutLabels(geometry: Geometry, labels: IShape[]) {\n    super.layoutLabels(geometry, labels);\n    this.adjustAreaLabelsStyle(labels);\n  }\n\n  protected adjustAreaLabelsStyle(labels: IShape[]) {\n    const { view } = this;\n    const { darkStyle, lightStyle } = this.options;\n    const areaGeometry = getGeometryByType(view, 'area');\n    const areas = getGeometryShapes(areaGeometry).sort((left: IElement, right: IElement) => {\n      return right.getBBox().height - left.getBBox().height;\n    }) as IShape[];\n\n    each(labels, (label: IShape) => {\n      const labelBBox = label.getBBox();\n      const points = getStrokePoints(labelBBox.x, labelBBox.y, labelBBox.width, labelBBox.height);\n      const match = map(areas, (area) => ({\n        area,\n        matches: filter(points, (point) => !!area.isHit(point[0], point[1])).length,\n      })).sort((left, right) => left.matches - right.matches);\n      if (last(match).matches > 0) {\n        const bgColor = last(match).area.attr('fill');\n        const fillWhite = isContrastColorWhite(bgColor);\n        label.attr({\n          fill: fillWhite ? lightStyle?.fill : darkStyle?.fill,\n          fillOpacity: fillWhite ? lightStyle.fillOpacity : darkStyle.fillOpacity,\n          stroke: fillWhite ? lightStyle?.stroke : darkStyle?.stroke,\n        });\n      }\n    });\n  }\n}\n\nregisterLabelComponent('area-point-auto', AreaPointAutoLabel);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}