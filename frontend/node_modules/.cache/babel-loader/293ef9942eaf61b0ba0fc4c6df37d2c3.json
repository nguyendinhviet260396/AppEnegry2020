{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { registerGeometry, Geometry } from '../../dependents';\nimport { isNumber, get } from '@antv/util';\nimport * as colorUtil from '../../util/color';\nvar GAUSS_COEF = 0.3989422804014327;\nvar ZERO = 1.0 / 255.0 / 16.0;\nvar ORIGIN_FIELD = '_origin';\n\nvar LinearHeatmap =\n/** @class */\nfunction (_super) {\n  __extends(LinearHeatmap, _super);\n\n  function LinearHeatmap(cfg) {\n    var _this = _super.call(this, cfg) || this;\n\n    _this.type = 'heatmap';\n    _this.paletteCache = {};\n    _this.intensity = cfg.intensity;\n    _this.radius = cfg.radius;\n    return _this;\n  }\n\n  LinearHeatmap.prototype.createElements = function (mappingData\n  /*index: number, isUpdate: boolean = false*/\n  ) {\n    var range = this.prepareRange(mappingData);\n    this.prepareSize();\n    this.prepareBlur();\n    this.prepareGreyScaleBlurredCircle(this.radius);\n    this.drawWithRange(mappingData, range);\n    return null;\n  };\n\n  LinearHeatmap.prototype.clear = function () {\n    this.clearShadowCanvasCtx();\n\n    _super.prototype.clear.call(this);\n  };\n\n  LinearHeatmap.prototype.prepareRange = function (data) {\n    var colorAttr = this.getAttribute('color');\n    var colorField = colorAttr.getFields()[0];\n    var min = Infinity;\n    var max = -Infinity;\n    data.forEach(function (row) {\n      var value = row[ORIGIN_FIELD][colorField];\n\n      if (value > max) {\n        max = value;\n      }\n\n      if (value < min) {\n        min = value;\n      }\n    });\n\n    if (min === max) {\n      min = max - 1;\n    }\n\n    return [min, max];\n  };\n\n  LinearHeatmap.prototype.prepareSize = function () {\n    var radius = this.radius;\n\n    if (!this.radius) {\n      radius = this.getDefaultValue('size');\n\n      if (!isNumber(radius)) {\n        radius = this.getDefaultSize();\n      }\n\n      this.radius = radius;\n    }\n  };\n\n  LinearHeatmap.prototype.prepareBlur = function () {\n    var blur = get(this.styleOption, ['style', 'shadowBlur']);\n\n    if (!isNumber(blur)) {\n      blur = this.radius / 2;\n    }\n\n    this.blur = blur;\n  };\n\n  LinearHeatmap.prototype.getDefaultSize = function () {\n    var position = this.getAttribute('position');\n    var coord = this.coordinate;\n    var radius = Math.min(coord.getWidth() / (position.scales[0].ticks.length * 4), coord.getHeight() / (position.scales[1].ticks.length * 4));\n    return radius;\n  };\n\n  LinearHeatmap.prototype.colorize = function (img) {\n    var colorAttr = this.getAttribute('color');\n    var pixels = img.data;\n    var paletteCache = this.paletteCache;\n\n    for (var i = 3; i < pixels.length; i += 4) {\n      var alpha = pixels[i]; // get gradient color from opacity value\n\n      if (alpha) {\n        var palette = void 0;\n\n        if (paletteCache[alpha]) {\n          palette = paletteCache[alpha];\n        } else {\n          palette = colorUtil.rgb2arr(colorAttr.gradient(alpha / 256));\n          paletteCache[alpha] = palette;\n        } // const palette = colorUtil.rgb2arr(colorAttr.gradient(alpha / 256));\n\n\n        pixels[i - 3] = palette[0];\n        pixels[i - 2] = palette[1];\n        pixels[i - 1] = palette[2];\n        pixels[i] = alpha;\n      }\n    }\n  };\n\n  LinearHeatmap.prototype.prepareGreyScaleBlurredCircle = function (r) {\n    var circleCanvas = this.grayScaleCanvas;\n\n    if (!circleCanvas) {\n      circleCanvas = document.createElement('canvas');\n      this.grayScaleCanvas = circleCanvas;\n    }\n\n    var intensity = this.intensity ? this.intensity : 2;\n    var circleRadius = Math.sqrt(-2.0 * Math.log(ZERO / r / intensity / GAUSS_COEF)) / 3.0 * r;\n    var blur = circleRadius - r;\n    var r2 = circleRadius + blur;\n    var ctx = circleCanvas.getContext('2d');\n    circleCanvas.width = circleCanvas.height = r2 * 2;\n    ctx.clearRect(0, 0, circleCanvas.width, circleCanvas.height);\n    ctx.shadowOffsetX = ctx.shadowOffsetY = r2 * 2;\n    ctx.shadowBlur = blur;\n    ctx.shadowColor = 'black';\n    ctx.beginPath();\n    ctx.arc(-r2, -r2, r, 0, Math.PI * 2, true);\n    ctx.closePath();\n    ctx.fill();\n  };\n\n  LinearHeatmap.prototype.drawGrayScaleBlurredCircle = function (x, y, r, alpha, ctx) {\n    var circleCanvas = this.grayScaleCanvas;\n    ctx.globalAlpha = alpha;\n    ctx.drawImage(circleCanvas, x - r, y - r);\n  };\n\n  LinearHeatmap.prototype.getShadowCanvasCtx = function () {\n    var canvas = this.shadowCanvas;\n\n    if (!canvas) {\n      canvas = document.createElement('canvas');\n      this.shadowCanvas = canvas;\n    }\n\n    canvas.width = this.coordinate.getWidth();\n    canvas.height = this.coordinate.getHeight();\n    var context = canvas.getContext('2d');\n    context.globalCompositeOperation = 'lighter';\n    return context;\n  };\n\n  LinearHeatmap.prototype.clearShadowCanvasCtx = function () {\n    var ctx = this.getShadowCanvasCtx();\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n  };\n\n  LinearHeatmap.prototype.getImageShape = function () {\n    var imageShape = this.imageShape;\n\n    if (imageShape) {\n      return imageShape;\n    }\n\n    var container = this.container;\n    imageShape = container.addShape({\n      type: 'image',\n      attrs: {}\n    });\n    this.imageShape = imageShape;\n  };\n\n  LinearHeatmap.prototype.drawWithRange = function (data, range) {\n    // canvas size\n    var _a = this.coordinate,\n        start = _a.start,\n        end = _a.end;\n    var width = this.coordinate.getWidth();\n    var height = this.coordinate.getHeight(); // value, range, etc\n\n    var colorAttr = this.getAttribute('color');\n    var valueField = colorAttr.getFields()[0]; // prepare shadow canvas context\n\n    this.clearShadowCanvasCtx();\n    var ctx = this.getShadowCanvasCtx(); // filter data\n\n    if (range) {\n      data = data.filter(function (row) {\n        return row[ORIGIN_FIELD][valueField] <= range[1] && row[ORIGIN_FIELD][valueField] >= range[0];\n      });\n    } // step1. draw points with shadow\n\n\n    var scale = this.scales[valueField];\n\n    for (var i = 0; i < data.length; i++) {\n      var obj = data[i];\n      var cfg = this.getDrawCfg(obj);\n      var alpha = scale.scale(obj[ORIGIN_FIELD][valueField]); // @ts-ignore\n\n      this.drawGrayScaleBlurredCircle(cfg.x - start.x, cfg.y - end.y, this.radius + this.blur, alpha, ctx);\n    } // step2. convert pixels\n\n\n    var colored = ctx.getImageData(0, 0, width, height);\n    this.clearShadowCanvasCtx();\n    this.colorize(colored);\n    ctx.putImageData(colored, 0, 0);\n    var image = new Image();\n    image.src = ctx.canvas.toDataURL('image/png');\n    this.getImageShape();\n    this.imageShape.attr('x', start.x);\n    this.imageShape.attr('y', end.y);\n    this.imageShape.attr('width', width);\n    this.imageShape.attr('height', height);\n    this.imageShape.attr('img', ctx.canvas);\n    this.imageShape.set('origin', this.getShapeInfo(data)); // 存储绘图信息数据\n  };\n\n  LinearHeatmap.prototype.getShapeInfo = function (mappingData) {\n    var shapeCfg = this.getDrawCfg(mappingData[0]);\n    return __assign(__assign({}, shapeCfg), {\n      mappingData: mappingData,\n      data: this.getData(mappingData)\n    });\n  };\n\n  LinearHeatmap.prototype.getData = function (mappingData) {\n    return mappingData.map(function (obj) {\n      return obj[ORIGIN_FIELD];\n    });\n  };\n\n  return LinearHeatmap;\n}(Geometry);\n\nregisterGeometry('linearHeatmap', LinearHeatmap);","map":{"version":3,"sources":["../../../src/geoms/heatmap/linear.ts"],"names":[],"mappings":"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","sourcesContent":["import { registerGeometry, Geometry, MappingDatum } from '../../dependents';\nimport { isNumber, get } from '@antv/util';\nimport * as colorUtil from '../../util/color';\n\nconst GAUSS_COEF = 0.3989422804014327;\nconst ZERO = 1.0 / 255.0 / 16.0;\n\nconst ORIGIN_FIELD = '_origin';\n\nclass LinearHeatmap extends Geometry {\n  public readonly type: string = 'heatmap';\n  private intensity: number;\n  private radius: number;\n  private blur: number;\n  private grayScaleCanvas: any;\n  private shadowCanvas: any;\n  private paletteCache: any = {};\n  private imageShape: any;\n\n  constructor(cfg) {\n    super(cfg);\n    this.intensity = cfg.intensity;\n    this.radius = cfg.radius;\n  }\n\n  protected createElements(mappingData: MappingDatum[] /*index: number, isUpdate: boolean = false*/) {\n    const range = this.prepareRange(mappingData);\n    this.prepareSize();\n    this.prepareBlur();\n    this.prepareGreyScaleBlurredCircle(this.radius);\n    this.drawWithRange(mappingData, range);\n    return null;\n  }\n\n  public clear() {\n    this.clearShadowCanvasCtx();\n    super.clear();\n  }\n\n  private prepareRange(data) {\n    const colorAttr = this.getAttribute('color');\n    const colorField = colorAttr.getFields()[0];\n    let min = Infinity;\n    let max = -Infinity;\n    data.forEach((row) => {\n      const value = row[ORIGIN_FIELD][colorField];\n      if (value > max) {\n        max = value;\n      }\n      if (value < min) {\n        min = value;\n      }\n    });\n    if (min === max) {\n      min = max - 1;\n    }\n    return [min, max];\n  }\n\n  private prepareSize() {\n    let radius = this.radius;\n    if (!this.radius) {\n      radius = this.getDefaultValue('size');\n      if (!isNumber(radius)) {\n        radius = this.getDefaultSize();\n      }\n      this.radius = radius;\n    }\n  }\n\n  private prepareBlur() {\n    let blur = get(this.styleOption, ['style', 'shadowBlur']);\n    if (!isNumber(blur)) {\n      blur = this.radius / 2;\n    }\n    this.blur = blur;\n  }\n\n  private getDefaultSize() {\n    const position = this.getAttribute('position');\n    const coord = this.coordinate;\n    const radius = Math.min(\n      coord.getWidth() / (position.scales[0].ticks.length * 4),\n      coord.getHeight() / (position.scales[1].ticks.length * 4)\n    );\n    return radius;\n  }\n\n  private colorize(img) {\n    const colorAttr = this.getAttribute('color') as any;\n    const pixels = img.data;\n    const paletteCache = this.paletteCache;\n    for (let i = 3; i < pixels.length; i += 4) {\n      const alpha = pixels[i]; // get gradient color from opacity value\n      if (alpha) {\n        let palette;\n        if (paletteCache[alpha]) {\n          palette = paletteCache[alpha];\n        } else {\n          palette = colorUtil.rgb2arr(colorAttr.gradient(alpha / 256));\n          paletteCache[alpha] = palette;\n        }\n        // const palette = colorUtil.rgb2arr(colorAttr.gradient(alpha / 256));\n        pixels[i - 3] = palette[0];\n        pixels[i - 2] = palette[1];\n        pixels[i - 1] = palette[2];\n        pixels[i] = alpha;\n      }\n    }\n  }\n\n  private prepareGreyScaleBlurredCircle(r) {\n    let circleCanvas = this.grayScaleCanvas;\n    if (!circleCanvas) {\n      circleCanvas = document.createElement('canvas');\n      this.grayScaleCanvas = circleCanvas;\n    }\n    const intensity = this.intensity ? this.intensity : 2;\n    const circleRadius = (Math.sqrt(-2.0 * Math.log(ZERO / r / intensity / GAUSS_COEF)) / 3.0) * r;\n    const blur = circleRadius - r;\n    const r2 = circleRadius + blur;\n    const ctx = circleCanvas.getContext('2d');\n    circleCanvas.width = circleCanvas.height = r2 * 2;\n    ctx.clearRect(0, 0, circleCanvas.width, circleCanvas.height);\n    ctx.shadowOffsetX = ctx.shadowOffsetY = r2 * 2;\n    ctx.shadowBlur = blur;\n    ctx.shadowColor = 'black';\n\n    ctx.beginPath();\n    ctx.arc(-r2, -r2, r, 0, Math.PI * 2, true);\n    ctx.closePath();\n    ctx.fill();\n  }\n\n  private drawGrayScaleBlurredCircle(x, y, r, alpha, ctx) {\n    const circleCanvas = this.grayScaleCanvas;\n    ctx.globalAlpha = alpha;\n    ctx.drawImage(circleCanvas, x - r, y - r);\n  }\n\n  private getShadowCanvasCtx() {\n    let canvas = this.shadowCanvas;\n    if (!canvas) {\n      canvas = document.createElement('canvas');\n      this.shadowCanvas = canvas;\n    }\n    canvas.width = this.coordinate.getWidth();\n    canvas.height = this.coordinate.getHeight();\n    const context = canvas.getContext('2d');\n    context.globalCompositeOperation = 'lighter';\n    return context;\n  }\n\n  private clearShadowCanvasCtx() {\n    const ctx = this.getShadowCanvasCtx();\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n  }\n\n  private getImageShape() {\n    let imageShape = this.imageShape;\n    if (imageShape) {\n      return imageShape;\n    }\n    const container = this.container;\n    imageShape = container.addShape({\n      type: 'image',\n      attrs: {},\n    });\n    this.imageShape = imageShape;\n  }\n\n  private drawWithRange(data, range) {\n    // canvas size\n    const { start, end } = this.coordinate;\n    const width = this.coordinate.getWidth();\n    const height = this.coordinate.getHeight();\n\n    // value, range, etc\n    const colorAttr = this.getAttribute('color');\n    const valueField = colorAttr.getFields()[0];\n\n    // prepare shadow canvas context\n    this.clearShadowCanvasCtx();\n    const ctx = this.getShadowCanvasCtx();\n    // filter data\n    if (range) {\n      data = data.filter((row) => {\n        return row[ORIGIN_FIELD][valueField] <= range[1] && row[ORIGIN_FIELD][valueField] >= range[0];\n      });\n    }\n\n    // step1. draw points with shadow\n    const scale = this.scales[valueField];\n    for (let i = 0; i < data.length; i++) {\n      const obj = data[i];\n      const cfg = this.getDrawCfg(obj);\n      const alpha = scale.scale(obj[ORIGIN_FIELD][valueField]);\n      // @ts-ignore\n      this.drawGrayScaleBlurredCircle(cfg.x - start.x, cfg.y - end.y, this.radius + this.blur, alpha, ctx);\n    }\n\n    // step2. convert pixels\n    const colored = ctx.getImageData(0, 0, width, height);\n    this.clearShadowCanvasCtx();\n    this.colorize(colored);\n    ctx.putImageData(colored, 0, 0);\n    const image = new Image();\n    image.src = ctx.canvas.toDataURL('image/png');\n    this.getImageShape();\n    this.imageShape.attr('x', start.x);\n    this.imageShape.attr('y', end.y);\n    this.imageShape.attr('width', width);\n    this.imageShape.attr('height', height);\n    this.imageShape.attr('img', ctx.canvas);\n    this.imageShape.set('origin', this.getShapeInfo(data)); // 存储绘图信息数据\n  }\n\n  private getShapeInfo(mappingData) {\n    const shapeCfg = this.getDrawCfg(mappingData[0]);\n\n    return {\n      ...shapeCfg,\n      mappingData,\n      data: this.getData(mappingData),\n    };\n  }\n\n  private getData(mappingData) {\n    return mappingData.map((obj) => {\n      return obj[ORIGIN_FIELD];\n    });\n  }\n}\n\nregisterGeometry('linearHeatmap', LinearHeatmap);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}