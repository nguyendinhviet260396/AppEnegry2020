{"ast":null,"code":"import { dotProduct2D } from '../../math';\n/** 图形在水平或垂直方向抖开 */\n\nexport default function nodeJitter(shape, index, cfg) {\n  var nodes = cfg.nodes.nodes;\n\n  if (index === nodes.length - 1) {\n    return;\n  }\n\n  var current = nodes[index];\n  var next = nodes[index + 1];\n  var dir = alignDirection(current, next).dir;\n  var startPoint = shape.get('startPoint');\n\n  if (dir === 'x') {\n    shape.attr('y', startPoint.y + 20);\n  }\n}\n\nfunction alignDirection(nodeA, nodeB) {\n  var dir;\n  /** 计算两个node 中心点向量的角度 */\n\n  var vector = {\n    x: nodeB.centerX - nodeA.centerX,\n    y: nodeB.centerY - nodeA.centerY\n  };\n  var mag = Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n  var vector_horizontal = {\n    x: 10,\n    y: 0\n  }; // 水平方向向量\n\n  /*tslint:disable*/\n\n  var mag_horizontal = Math.sqrt(vector_horizontal.x * vector_horizontal.x + vector_horizontal.y * vector_horizontal.y);\n  var dot = dotProduct2D(vector, vector_horizontal);\n  var angle = dot / (mag * mag_horizontal) * 180 / Math.PI;\n  if (angle < 0) angle = 360 - angle;\n  angle = adjustAngle(angle); // 将角度从0-360转换到0-90\n\n  /** 计算两个node在x、y两个方向上的距离 */\n\n  var distX = Math.abs(nodeA.centerX - nodeB.centerX);\n  var distY = Math.abs(nodeA.centerY - nodeB.centerY);\n\n  if (angle > 45) {\n    dir = 'x';\n  } else if (angle < 45) {\n    dir = 'y';\n  }\n\n  return {\n    dir: dir,\n    distX: distX,\n    distY: distY\n  };\n}\n\nfunction adjustAngle(angle) {\n  if (angle > 90 && angle <= 180) {\n    return 180 - angle;\n  }\n\n  if (angle > 180 && angle < 270) {\n    return angle - 180;\n  }\n\n  return 360 - angle;\n}","map":{"version":3,"sources":["../../../../src/util/responsive/rules/node-jitter.ts"],"names":[],"mappings":"AACA,SAAS,YAAT,QAA6B,YAA7B;AAEA;;AACA,eAAc,SAAU,UAAV,CAAqB,KAArB,EAAoC,KAApC,EAA2C,GAA3C,EAA8C;AAC1D,MAAM,KAAK,GAAG,GAAG,CAAC,KAAJ,CAAU,KAAxB;;AACA,MAAI,KAAK,KAAK,KAAK,CAAC,MAAN,GAAe,CAA7B,EAAgC;AAC9B;AACD;;AACD,MAAM,OAAO,GAAG,KAAK,CAAC,KAAD,CAArB;AACA,MAAM,IAAI,GAAG,KAAK,CAAC,KAAK,GAAG,CAAT,CAAlB;AACQ,MAAA,GAAG,GAAK,cAAc,CAAC,OAAD,EAAU,IAAV,CAAd,CAAL,GAAH;AACR,MAAM,UAAU,GAAG,KAAK,CAAC,GAAN,CAAU,YAAV,CAAnB;;AACA,MAAI,GAAG,KAAK,GAAZ,EAAiB;AACf,IAAA,KAAK,CAAC,IAAN,CAAW,GAAX,EAAgB,UAAU,CAAC,CAAX,GAAe,EAA/B;AACD;AACF;;AAED,SAAS,cAAT,CAAwB,KAAxB,EAA+B,KAA/B,EAAoC;AAClC,MAAI,GAAJ;AACA;;AACA,MAAM,MAAM,GAAG;AAAE,IAAA,CAAC,EAAE,KAAK,CAAC,OAAN,GAAgB,KAAK,CAAC,OAA3B;AAAoC,IAAA,CAAC,EAAE,KAAK,CAAC,OAAN,GAAgB,KAAK,CAAC;AAA7D,GAAf;AACA,MAAM,GAAG,GAAG,IAAI,CAAC,IAAL,CAAU,MAAM,CAAC,CAAP,GAAW,MAAM,CAAC,CAAlB,GAAsB,MAAM,CAAC,CAAP,GAAW,MAAM,CAAC,CAAlD,CAAZ;AACA,MAAM,iBAAiB,GAAG;AAAE,IAAA,CAAC,EAAE,EAAL;AAAS,IAAA,CAAC,EAAE;AAAZ,GAA1B,CALkC,CAKS;;AAC3C;;AACA,MAAM,cAAc,GAAG,IAAI,CAAC,IAAL,CACrB,iBAAiB,CAAC,CAAlB,GAAsB,iBAAiB,CAAC,CAAxC,GAA4C,iBAAiB,CAAC,CAAlB,GAAsB,iBAAiB,CAAC,CAD/D,CAAvB;AAGA,MAAM,GAAG,GAAG,YAAY,CAAC,MAAD,EAAS,iBAAT,CAAxB;AACA,MAAI,KAAK,GAAK,GAAG,IAAI,GAAG,GAAG,cAAV,CAAJ,GAAiC,GAAlC,GAAyC,IAAI,CAAC,EAA1D;AACA,MAAI,KAAK,GAAG,CAAZ,EAAe,KAAK,GAAG,MAAM,KAAd;AACf,EAAA,KAAK,GAAG,WAAW,CAAC,KAAD,CAAnB,CAbkC,CAaN;;AAE5B;;AACA,MAAM,KAAK,GAAG,IAAI,CAAC,GAAL,CAAS,KAAK,CAAC,OAAN,GAAgB,KAAK,CAAC,OAA/B,CAAd;AACA,MAAM,KAAK,GAAG,IAAI,CAAC,GAAL,CAAS,KAAK,CAAC,OAAN,GAAgB,KAAK,CAAC,OAA/B,CAAd;;AAEA,MAAI,KAAK,GAAG,EAAZ,EAAgB;AACd,IAAA,GAAG,GAAG,GAAN;AACD,GAFD,MAEO,IAAI,KAAK,GAAG,EAAZ,EAAgB;AACrB,IAAA,GAAG,GAAG,GAAN;AACD;;AAED,SAAO;AAAE,IAAA,GAAG,EAAA,GAAL;AAAO,IAAA,KAAK,EAAA,KAAZ;AAAc,IAAA,KAAK,EAAA;AAAnB,GAAP;AACD;;AAED,SAAS,WAAT,CAAqB,KAArB,EAA0B;AACxB,MAAI,KAAK,GAAG,EAAR,IAAc,KAAK,IAAI,GAA3B,EAAgC;AAC9B,WAAO,MAAM,KAAb;AACD;;AACD,MAAI,KAAK,GAAG,GAAR,IAAe,KAAK,GAAG,GAA3B,EAAgC;AAC9B,WAAO,KAAK,GAAG,GAAf;AACD;;AACD,SAAO,MAAM,KAAb;AACD","sourcesContent":["import { IShape } from '@antv/g-base';\nimport { dotProduct2D } from '../../math';\n\n/** 图形在水平或垂直方向抖开 */\nexport default function nodeJitter(shape: IShape, index, cfg) {\n  const nodes = cfg.nodes.nodes;\n  if (index === nodes.length - 1) {\n    return;\n  }\n  const current = nodes[index];\n  const next = nodes[index + 1];\n  const { dir } = alignDirection(current, next);\n  const startPoint = shape.get('startPoint');\n  if (dir === 'x') {\n    shape.attr('y', startPoint.y + 20);\n  }\n}\n\nfunction alignDirection(nodeA, nodeB) {\n  let dir;\n  /** 计算两个node 中心点向量的角度 */\n  const vector = { x: nodeB.centerX - nodeA.centerX, y: nodeB.centerY - nodeA.centerY };\n  const mag = Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n  const vector_horizontal = { x: 10, y: 0 }; // 水平方向向量\n  /*tslint:disable*/\n  const mag_horizontal = Math.sqrt(\n    vector_horizontal.x * vector_horizontal.x + vector_horizontal.y * vector_horizontal.y\n  );\n  const dot = dotProduct2D(vector, vector_horizontal);\n  let angle = ((dot / (mag * mag_horizontal)) * 180) / Math.PI;\n  if (angle < 0) angle = 360 - angle;\n  angle = adjustAngle(angle); // 将角度从0-360转换到0-90\n\n  /** 计算两个node在x、y两个方向上的距离 */\n  const distX = Math.abs(nodeA.centerX - nodeB.centerX);\n  const distY = Math.abs(nodeA.centerY - nodeB.centerY);\n\n  if (angle > 45) {\n    dir = 'x';\n  } else if (angle < 45) {\n    dir = 'y';\n  }\n\n  return { dir, distX, distY };\n}\n\nfunction adjustAngle(angle) {\n  if (angle > 90 && angle <= 180) {\n    return 180 - angle;\n  }\n  if (angle > 180 && angle < 270) {\n    return angle - 180;\n  }\n  return 360 - angle;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}