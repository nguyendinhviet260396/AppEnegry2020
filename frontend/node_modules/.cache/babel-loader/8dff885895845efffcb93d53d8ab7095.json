{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { getScale } from '@antv/scale';\nimport { clone, deepMix, sortBy, valuesOfKey, getRange, each } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport { sturges } from '../../util/math';\nimport Area from '../area/layer';\nvar kernels = {\n  epanechnikov: function epanechnikov(dist) {\n    return Math.abs(dist) <= 1 ? 0.75 * (1 - dist * dist) : 0;\n  },\n  gaussian: function gaussian(dist) {\n    return 1 / Math.sqrt(Math.PI * 2) * Math.exp(-0.5 * Math.pow(dist, 2));\n  },\n  uniform: function uniform(dist) {\n    return Math.abs(dist) <= 1 ? 0.5 : 0;\n  },\n  triangle: function triangle(dist) {\n    return Math.abs(dist) <= 1 ? 1 - Math.abs(dist) : 0;\n  },\n  quartic: function quartic(dist) {\n    var v = 1 - dist * dist;\n    return Math.abs(dist) <= 1 ? 15 / 16 * v * v : 0;\n  },\n  triweight: function triweight(dist) {\n    var v = 1 - dist * dist;\n    return Math.abs(dist) <= 1 ? 15 / 16 * Math.pow(v, 3) : 0;\n  },\n  cosinus: function cosinus(dist) {\n    var v = Math.PI / 4 * Math.cos(0.5 * Math.PI * dist);\n    return Math.abs(dist) <= 1 ? v : 0;\n  }\n};\n\nvar DensityLayer =\n/** @class */\nfunction (_super) {\n  __extends(DensityLayer, _super);\n\n  function DensityLayer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'density';\n    return _this;\n  }\n\n  DensityLayer.prototype.init = function () {\n    var originXAxisConfig = this.options.xAxis ? clone(this.options.xAxis) : {};\n    this.options.xField = 'value';\n    this.options.yField = 'density';\n    this.options.xAxis = deepMix({}, originXAxisConfig, {\n      type: 'linear'\n    });\n    this.options.smooth = true;\n\n    _super.prototype.init.call(this);\n  };\n\n  DensityLayer.prototype.processData = function (originData) {\n    var _this = this;\n\n    var _a = this.options,\n        binField = _a.binField,\n        binWidth = _a.binWidth,\n        binNumber = _a.binNumber,\n        kernel = _a.kernel;\n\n    var _kernel = kernel ? kernel : 'epanechnikov';\n\n    var kernelFunc = kernels[_kernel];\n    var originDataCopy = clone(originData);\n    sortBy(originDataCopy, binField); // 计算分箱，直方图分箱的计算基于binWidth，如配置了binNumber则将其转为binWidth进行计算\n\n    var values = valuesOfKey(originDataCopy, binField);\n    var range = getRange(values);\n    var rangeWidth = range.max - range.min;\n    var _binNumber = binNumber;\n    var _binWidth = binWidth;\n\n    if (!binNumber && binWidth) {\n      _binNumber = Math.floor(rangeWidth / binWidth);\n    }\n\n    if (!binWidth && binNumber) {\n      _binWidth = rangeWidth / binNumber;\n    } // 当binWidth和binNumber都没有指定的情况，采用Sturges formula自动生成binWidth\n\n\n    if (!binNumber && !binWidth) {\n      _binNumber = sturges(values);\n      _binWidth = rangeWidth / binNumber;\n    } // 根据binNumber获取samples\n\n\n    var LinearScale = getScale('linear');\n    var scale = new LinearScale({\n      min: range.min,\n      max: range.max,\n      tickCount: _binNumber,\n      nice: false\n    });\n    var samples = scale.getTicks(); // 计算KDE\n\n    var densities = [];\n    each(samples, function (s) {\n      var density = _this.kernelDensityEstimator(_binWidth, kernelFunc, s, values);\n\n      densities.push({\n        value: s.text,\n        density: density\n      });\n    });\n    return densities;\n  };\n\n  DensityLayer.prototype.kernelDensityEstimator = function (binWidth, kernelFunc, x, values) {\n    var sum = 0;\n    each(values, function (v) {\n      var dist = (x.tickValue - v) / binWidth;\n      sum += kernelFunc(dist);\n    });\n    return values.length === 0 ? 0 : sum / values.length;\n  };\n\n  return DensityLayer;\n}(Area);\n\nexport default DensityLayer;\nregisterPlotType('density', DensityLayer);","map":{"version":3,"sources":["../../../src/plots/density/layer.ts"],"names":[],"mappings":"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","sourcesContent":["import { getScale } from '@antv/scale';\nimport { clone, deepMix, sortBy, valuesOfKey, getRange, each } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport { LayerConfig } from '../../base/layer';\nimport { sturges } from '../../util/math';\nimport Area from '../area/layer';\nimport { AreaViewConfig } from '../area/interface';\nimport { DataItem } from '../../interface/config';\nimport { LooseMap } from '../../interface/types';\n\nexport interface DensityViewConfig extends AreaViewConfig {\n  binField: string;\n  binWidth?: number;\n  binNumber?: number;\n  kernel?: 'uniform' | 'triangle' | 'epanechnikov' | 'quartic' | 'triweight' | 'gaussian' | 'cosinus';\n}\n\nexport interface DensityLayerConfig extends DensityViewConfig, LayerConfig {}\n\nconst kernels = {\n  epanechnikov: (dist: number) => {\n    return Math.abs(dist) <= 1 ? 0.75 * (1 - dist * dist) : 0;\n  },\n  gaussian: (dist: number) => {\n    return (1 / Math.sqrt(Math.PI * 2)) * Math.exp(-0.5 * Math.pow(dist, 2));\n  },\n  uniform: (dist: number) => {\n    return Math.abs(dist) <= 1 ? 0.5 : 0;\n  },\n  triangle: (dist: number) => {\n    return Math.abs(dist) <= 1 ? 1 - Math.abs(dist) : 0;\n  },\n  quartic: (dist: number) => {\n    const v = 1 - dist * dist;\n    return Math.abs(dist) <= 1 ? (15 / 16) * v * v : 0;\n  },\n  triweight: (dist: number) => {\n    const v = 1 - dist * dist;\n    return Math.abs(dist) <= 1 ? (15 / 16) * Math.pow(v, 3) : 0;\n  },\n  cosinus: (dist: number) => {\n    const v = (Math.PI / 4) * Math.cos(0.5 * Math.PI * dist);\n    return Math.abs(dist) <= 1 ? v : 0;\n  },\n};\n\nexport default class DensityLayer<T extends DensityLayerConfig = DensityLayerConfig> extends Area<T> {\n  public type: string = 'density';\n\n  public init() {\n    const originXAxisConfig = this.options.xAxis ? clone(this.options.xAxis) : {};\n    this.options.xField = 'value';\n    this.options.yField = 'density';\n    this.options.xAxis = deepMix({}, originXAxisConfig, { type: 'linear' });\n    this.options.smooth = true;\n    super.init();\n  }\n\n  protected processData(originData?: DataItem[]) {\n    const { binField, binWidth, binNumber, kernel } = this.options;\n    const _kernel = kernel ? kernel : 'epanechnikov';\n    const kernelFunc = kernels[_kernel];\n    const originDataCopy = clone(originData);\n    sortBy(originDataCopy, binField);\n    // 计算分箱，直方图分箱的计算基于binWidth，如配置了binNumber则将其转为binWidth进行计算\n    const values = valuesOfKey(originDataCopy, binField);\n    const range = getRange(values);\n    const rangeWidth = range.max - range.min;\n    let _binNumber = binNumber;\n    let _binWidth = binWidth;\n    if (!binNumber && binWidth) {\n      _binNumber = Math.floor(rangeWidth / binWidth);\n    }\n    if (!binWidth && binNumber) {\n      _binWidth = rangeWidth / binNumber;\n    }\n    // 当binWidth和binNumber都没有指定的情况，采用Sturges formula自动生成binWidth\n    if (!binNumber && !binWidth) {\n      _binNumber = sturges(values);\n      _binWidth = rangeWidth / binNumber;\n    }\n    // 根据binNumber获取samples\n    const LinearScale = getScale('linear');\n    const scale = new LinearScale({\n      min: range.min,\n      max: range.max,\n      tickCount: _binNumber,\n      nice: false,\n    });\n    const samples = scale.getTicks();\n    // 计算KDE\n    const densities = [];\n    each(samples, (s) => {\n      const density = this.kernelDensityEstimator(_binWidth, kernelFunc, s, values);\n      densities.push({ value: s.text, density });\n    });\n\n    return densities;\n  }\n\n  private kernelDensityEstimator(\n    binWidth: number,\n    kernelFunc: (dist: number) => number,\n    x: LooseMap,\n    values: number[]\n  ) {\n    let sum = 0;\n    each(values, (v) => {\n      const dist = (x.tickValue - v) / binWidth;\n      sum += kernelFunc(dist);\n    });\n    return values.length === 0 ? 0 : sum / values.length;\n  }\n}\n\nregisterPlotType('density', DensityLayer);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}