{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { mix } from '@antv/util';\nimport Global from '../../global';\nimport Shape from '../shape';\n/**\n * 基本的椭圆，可以添加文本，默认文本居中\n */\n\nShape.registerNode('ellipse', {\n  // 自定义节点时的配置\n  options: {\n    size: [120, 60],\n    style: {\n      x: 0,\n      y: 0,\n      stroke: Global.defaultShapeStrokeColor,\n      fill: Global.defaultShapeFillColor,\n      lineWidth: 1\n    },\n    // 文本样式配置\n    labelCfg: {\n      style: {\n        fill: '#595959'\n      }\n    },\n    // 节点上左右上下四个方向上的链接circle配置\n    linkPoints: {\n      top: false,\n      right: false,\n      bottom: false,\n      left: false,\n      // circle的大小\n      size: 10,\n      lineWidth: 1,\n      fill: '#72CC4A',\n      stroke: '#72CC4A'\n    },\n    // 节点中icon配置\n    icon: {\n      // 是否显示icon，值为 false 则不渲染icon\n      show: false,\n      // icon的地址，字符串类型\n      img: 'https://gw.alipayobjects.com/zos/basement_prod/012bcf4f-423b-4922-8c24-32a89f8c41ce.svg',\n      width: 36,\n      height: 36\n    }\n  },\n  shapeType: 'ellipse',\n  // 文本位置\n  labelPosition: 'center',\n  drawShape: function drawShape(cfg, group) {\n    var _a = this.getOptions(cfg).icon,\n        icon = _a === void 0 ? {} : _a;\n    var style = this.getShapeStyle(cfg);\n    var keyShape = group.addShape('ellipse', {\n      attrs: style,\n      className: 'ellipse-keyShape',\n      name: 'ellipse-keyShape',\n      draggable: true\n    });\n    var width = icon.width,\n        height = icon.height,\n        show = icon.show;\n\n    if (show) {\n      var image = group.addShape('image', {\n        attrs: __assign({\n          x: -width / 2,\n          y: -height / 2\n        }, icon),\n        className: this.type + \"-icon\",\n        name: this.type + \"-icon\",\n        draggable: true\n      });\n    }\n\n    this.drawLinkPoints(cfg, group);\n    return keyShape;\n  },\n\n  /**\n   * 绘制节点上的LinkPoints\n   * @param {Object} cfg data数据配置项\n   * @param {Group} group Group实例\n   */\n  drawLinkPoints: function drawLinkPoints(cfg, group) {\n    var _a = this.getOptions(cfg).linkPoints,\n        linkPoints = _a === void 0 ? {} : _a;\n\n    var top = linkPoints.top,\n        left = linkPoints.left,\n        right = linkPoints.right,\n        bottom = linkPoints.bottom,\n        markSize = linkPoints.size,\n        markR = linkPoints.r,\n        markStyle = __rest(linkPoints, [\"top\", \"left\", \"right\", \"bottom\", \"size\", \"r\"]);\n\n    var size = this.getSize(cfg);\n    var rx = size[0] / 2;\n    var ry = size[1] / 2;\n\n    if (left) {\n      // left circle\n      group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: -rx,\n          y: 0,\n          r: markSize / 2 || markR || 5\n        }),\n        className: 'link-point-left',\n        name: 'link-point-left',\n        isAnchorPoint: true\n      });\n    }\n\n    if (right) {\n      // right circle\n      group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: rx,\n          y: 0,\n          r: markSize / 2 || markR || 5\n        }),\n        className: 'link-point-right',\n        name: 'link-point-right',\n        isAnchorPoint: true\n      });\n    }\n\n    if (top) {\n      // top circle\n      group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: 0,\n          y: -ry,\n          r: markSize / 2 || markR || 5\n        }),\n        className: 'link-point-top',\n        name: 'link-point-top',\n        isAnchorPoint: true\n      });\n    }\n\n    if (bottom) {\n      // bottom circle\n      group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: 0,\n          y: ry,\n          r: markSize / 2 || markR || 5\n        }),\n        className: 'link-point-bottom',\n        name: 'link-point-bottom',\n        isAnchorPoint: true\n      });\n    }\n  },\n\n  /**\n   * 获取节点的样式，供基于该节点自定义时使用\n   * @param {Object} cfg 节点数据模型\n   * @return {Object} 节点的样式\n   */\n  getShapeStyle: function getShapeStyle(cfg) {\n    var defaultStyle = this.getOptions(cfg).style;\n    var strokeStyle = {\n      stroke: cfg.color\n    }; // 如果设置了color，则覆盖默认的stroke属性\n\n    var style = mix({}, defaultStyle, strokeStyle);\n    var size = this.getSize(cfg);\n    var rx = size[0] / 2;\n    var ry = size[1] / 2;\n\n    var styles = __assign({\n      x: 0,\n      y: 0,\n      rx: rx,\n      ry: ry\n    }, style);\n\n    return styles;\n  },\n  update: function update(cfg, item) {\n    var group = item.getContainer(); // 这里不传 cfg 参数是因为 cfg.style 需要最后覆盖样式\n\n    var defaultStyle = this.getOptions({}).style;\n    var size = this.getSize(cfg);\n    var strokeStyle = {\n      stroke: cfg.color,\n      rx: size[0] / 2,\n      ry: size[1] / 2\n    }; // 与 getShapeStyle 不同在于，update 时需要获取到当前的 style 进行融合。即新传入的配置项中没有涉及的属性，保留当前的配置。\n\n    var keyShape = item.get('keyShape');\n    var style = mix({}, defaultStyle, keyShape.attr(), strokeStyle);\n    style = mix(style, cfg.style);\n    this.updateShape(cfg, item, style, true);\n    this.updateLinkPoints(cfg, group);\n  }\n}, 'single-node');","map":{"version":3,"sources":["C:/Users/vietn/Desktop/AppEnegry2020/frontend/node_modules/@antv/g6/es/shape/nodes/ellipse.js"],"names":["__assign","__rest","mix","Global","Shape","registerNode","options","size","style","x","y","stroke","defaultShapeStrokeColor","fill","defaultShapeFillColor","lineWidth","labelCfg","linkPoints","top","right","bottom","left","icon","show","img","width","height","shapeType","labelPosition","drawShape","cfg","group","_a","getOptions","getShapeStyle","keyShape","addShape","attrs","className","name","draggable","image","type","drawLinkPoints","markSize","markR","r","markStyle","getSize","rx","ry","isAnchorPoint","defaultStyle","strokeStyle","color","styles","update","item","getContainer","get","attr","updateShape","updateLinkPoints"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,MAAnB,QAAiC,OAAjC;AACA,SAASC,GAAT,QAAoB,YAApB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA;;;;AAIAA,KAAK,CAACC,YAAN,CAAmB,SAAnB,EAA8B;AAC5B;AACAC,EAAAA,OAAO,EAAE;AACPC,IAAAA,IAAI,EAAE,CAAC,GAAD,EAAM,EAAN,CADC;AAEPC,IAAAA,KAAK,EAAE;AACLC,MAAAA,CAAC,EAAE,CADE;AAELC,MAAAA,CAAC,EAAE,CAFE;AAGLC,MAAAA,MAAM,EAAER,MAAM,CAACS,uBAHV;AAILC,MAAAA,IAAI,EAAEV,MAAM,CAACW,qBAJR;AAKLC,MAAAA,SAAS,EAAE;AALN,KAFA;AASP;AACAC,IAAAA,QAAQ,EAAE;AACRR,MAAAA,KAAK,EAAE;AACLK,QAAAA,IAAI,EAAE;AADD;AADC,KAVH;AAeP;AACAI,IAAAA,UAAU,EAAE;AACVC,MAAAA,GAAG,EAAE,KADK;AAEVC,MAAAA,KAAK,EAAE,KAFG;AAGVC,MAAAA,MAAM,EAAE,KAHE;AAIVC,MAAAA,IAAI,EAAE,KAJI;AAKV;AACAd,MAAAA,IAAI,EAAE,EANI;AAOVQ,MAAAA,SAAS,EAAE,CAPD;AAQVF,MAAAA,IAAI,EAAE,SARI;AASVF,MAAAA,MAAM,EAAE;AATE,KAhBL;AA2BP;AACAW,IAAAA,IAAI,EAAE;AACJ;AACAC,MAAAA,IAAI,EAAE,KAFF;AAGJ;AACAC,MAAAA,GAAG,EAAE,yFAJD;AAKJC,MAAAA,KAAK,EAAE,EALH;AAMJC,MAAAA,MAAM,EAAE;AANJ;AA5BC,GAFmB;AAuC5BC,EAAAA,SAAS,EAAE,SAvCiB;AAwC5B;AACAC,EAAAA,aAAa,EAAE,QAzCa;AA0C5BC,EAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBC,GAAnB,EAAwBC,KAAxB,EAA+B;AACxC,QAAIC,EAAE,GAAG,KAAKC,UAAL,CAAgBH,GAAhB,EAAqBR,IAA9B;AAAA,QACIA,IAAI,GAAGU,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EADhC;AAEA,QAAIxB,KAAK,GAAG,KAAK0B,aAAL,CAAmBJ,GAAnB,CAAZ;AACA,QAAIK,QAAQ,GAAGJ,KAAK,CAACK,QAAN,CAAe,SAAf,EAA0B;AACvCC,MAAAA,KAAK,EAAE7B,KADgC;AAEvC8B,MAAAA,SAAS,EAAE,kBAF4B;AAGvCC,MAAAA,IAAI,EAAE,kBAHiC;AAIvCC,MAAAA,SAAS,EAAE;AAJ4B,KAA1B,CAAf;AAMA,QAAIf,KAAK,GAAGH,IAAI,CAACG,KAAjB;AAAA,QACIC,MAAM,GAAGJ,IAAI,CAACI,MADlB;AAAA,QAEIH,IAAI,GAAGD,IAAI,CAACC,IAFhB;;AAIA,QAAIA,IAAJ,EAAU;AACR,UAAIkB,KAAK,GAAGV,KAAK,CAACK,QAAN,CAAe,OAAf,EAAwB;AAClCC,QAAAA,KAAK,EAAErC,QAAQ,CAAC;AACdS,UAAAA,CAAC,EAAE,CAACgB,KAAD,GAAS,CADE;AAEdf,UAAAA,CAAC,EAAE,CAACgB,MAAD,GAAU;AAFC,SAAD,EAGZJ,IAHY,CADmB;AAKlCgB,QAAAA,SAAS,EAAE,KAAKI,IAAL,GAAY,OALW;AAMlCH,QAAAA,IAAI,EAAE,KAAKG,IAAL,GAAY,OANgB;AAOlCF,QAAAA,SAAS,EAAE;AAPuB,OAAxB,CAAZ;AASD;;AAED,SAAKG,cAAL,CAAoBb,GAApB,EAAyBC,KAAzB;AACA,WAAOI,QAAP;AACD,GAtE2B;;AAwE5B;;;;;AAKAQ,EAAAA,cAAc,EAAE,SAASA,cAAT,CAAwBb,GAAxB,EAA6BC,KAA7B,EAAoC;AAClD,QAAIC,EAAE,GAAG,KAAKC,UAAL,CAAgBH,GAAhB,EAAqBb,UAA9B;AAAA,QACIA,UAAU,GAAGe,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EADtC;;AAGA,QAAId,GAAG,GAAGD,UAAU,CAACC,GAArB;AAAA,QACIG,IAAI,GAAGJ,UAAU,CAACI,IADtB;AAAA,QAEIF,KAAK,GAAGF,UAAU,CAACE,KAFvB;AAAA,QAGIC,MAAM,GAAGH,UAAU,CAACG,MAHxB;AAAA,QAIIwB,QAAQ,GAAG3B,UAAU,CAACV,IAJ1B;AAAA,QAKIsC,KAAK,GAAG5B,UAAU,CAAC6B,CALvB;AAAA,QAMIC,SAAS,GAAG9C,MAAM,CAACgB,UAAD,EAAa,CAAC,KAAD,EAAQ,MAAR,EAAgB,OAAhB,EAAyB,QAAzB,EAAmC,MAAnC,EAA2C,GAA3C,CAAb,CANtB;;AAQA,QAAIV,IAAI,GAAG,KAAKyC,OAAL,CAAalB,GAAb,CAAX;AACA,QAAImB,EAAE,GAAG1C,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAnB;AACA,QAAI2C,EAAE,GAAG3C,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAnB;;AAEA,QAAIc,IAAJ,EAAU;AACR;AACAU,MAAAA,KAAK,CAACK,QAAN,CAAe,QAAf,EAAyB;AACvBC,QAAAA,KAAK,EAAErC,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAK+C,SAAL,CAAT,EAA0B;AACvCtC,UAAAA,CAAC,EAAE,CAACwC,EADmC;AAEvCvC,UAAAA,CAAC,EAAE,CAFoC;AAGvCoC,UAAAA,CAAC,EAAEF,QAAQ,GAAG,CAAX,IAAgBC,KAAhB,IAAyB;AAHW,SAA1B,CADQ;AAMvBP,QAAAA,SAAS,EAAE,iBANY;AAOvBC,QAAAA,IAAI,EAAE,iBAPiB;AAQvBY,QAAAA,aAAa,EAAE;AARQ,OAAzB;AAUD;;AAED,QAAIhC,KAAJ,EAAW;AACT;AACAY,MAAAA,KAAK,CAACK,QAAN,CAAe,QAAf,EAAyB;AACvBC,QAAAA,KAAK,EAAErC,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAK+C,SAAL,CAAT,EAA0B;AACvCtC,UAAAA,CAAC,EAAEwC,EADoC;AAEvCvC,UAAAA,CAAC,EAAE,CAFoC;AAGvCoC,UAAAA,CAAC,EAAEF,QAAQ,GAAG,CAAX,IAAgBC,KAAhB,IAAyB;AAHW,SAA1B,CADQ;AAMvBP,QAAAA,SAAS,EAAE,kBANY;AAOvBC,QAAAA,IAAI,EAAE,kBAPiB;AAQvBY,QAAAA,aAAa,EAAE;AARQ,OAAzB;AAUD;;AAED,QAAIjC,GAAJ,EAAS;AACP;AACAa,MAAAA,KAAK,CAACK,QAAN,CAAe,QAAf,EAAyB;AACvBC,QAAAA,KAAK,EAAErC,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAK+C,SAAL,CAAT,EAA0B;AACvCtC,UAAAA,CAAC,EAAE,CADoC;AAEvCC,UAAAA,CAAC,EAAE,CAACwC,EAFmC;AAGvCJ,UAAAA,CAAC,EAAEF,QAAQ,GAAG,CAAX,IAAgBC,KAAhB,IAAyB;AAHW,SAA1B,CADQ;AAMvBP,QAAAA,SAAS,EAAE,gBANY;AAOvBC,QAAAA,IAAI,EAAE,gBAPiB;AAQvBY,QAAAA,aAAa,EAAE;AARQ,OAAzB;AAUD;;AAED,QAAI/B,MAAJ,EAAY;AACV;AACAW,MAAAA,KAAK,CAACK,QAAN,CAAe,QAAf,EAAyB;AACvBC,QAAAA,KAAK,EAAErC,QAAQ,CAACA,QAAQ,CAAC,EAAD,EAAK+C,SAAL,CAAT,EAA0B;AACvCtC,UAAAA,CAAC,EAAE,CADoC;AAEvCC,UAAAA,CAAC,EAAEwC,EAFoC;AAGvCJ,UAAAA,CAAC,EAAEF,QAAQ,GAAG,CAAX,IAAgBC,KAAhB,IAAyB;AAHW,SAA1B,CADQ;AAMvBP,QAAAA,SAAS,EAAE,mBANY;AAOvBC,QAAAA,IAAI,EAAE,mBAPiB;AAQvBY,QAAAA,aAAa,EAAE;AARQ,OAAzB;AAUD;AACF,GApJ2B;;AAsJ5B;;;;;AAKAjB,EAAAA,aAAa,EAAE,SAASA,aAAT,CAAuBJ,GAAvB,EAA4B;AACzC,QAAIsB,YAAY,GAAG,KAAKnB,UAAL,CAAgBH,GAAhB,EAAqBtB,KAAxC;AACA,QAAI6C,WAAW,GAAG;AAChB1C,MAAAA,MAAM,EAAEmB,GAAG,CAACwB;AADI,KAAlB,CAFyC,CAItC;;AAEH,QAAI9C,KAAK,GAAGN,GAAG,CAAC,EAAD,EAAKkD,YAAL,EAAmBC,WAAnB,CAAf;AACA,QAAI9C,IAAI,GAAG,KAAKyC,OAAL,CAAalB,GAAb,CAAX;AACA,QAAImB,EAAE,GAAG1C,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAnB;AACA,QAAI2C,EAAE,GAAG3C,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAnB;;AAEA,QAAIgD,MAAM,GAAGvD,QAAQ,CAAC;AACpBS,MAAAA,CAAC,EAAE,CADiB;AAEpBC,MAAAA,CAAC,EAAE,CAFiB;AAGpBuC,MAAAA,EAAE,EAAEA,EAHgB;AAIpBC,MAAAA,EAAE,EAAEA;AAJgB,KAAD,EAKlB1C,KALkB,CAArB;;AAOA,WAAO+C,MAAP;AACD,GA9K2B;AA+K5BC,EAAAA,MAAM,EAAE,SAASA,MAAT,CAAgB1B,GAAhB,EAAqB2B,IAArB,EAA2B;AACjC,QAAI1B,KAAK,GAAG0B,IAAI,CAACC,YAAL,EAAZ,CADiC,CACA;;AAEjC,QAAIN,YAAY,GAAG,KAAKnB,UAAL,CAAgB,EAAhB,EAAoBzB,KAAvC;AACA,QAAID,IAAI,GAAG,KAAKyC,OAAL,CAAalB,GAAb,CAAX;AACA,QAAIuB,WAAW,GAAG;AAChB1C,MAAAA,MAAM,EAAEmB,GAAG,CAACwB,KADI;AAEhBL,MAAAA,EAAE,EAAE1C,IAAI,CAAC,CAAD,CAAJ,GAAU,CAFE;AAGhB2C,MAAAA,EAAE,EAAE3C,IAAI,CAAC,CAAD,CAAJ,GAAU;AAHE,KAAlB,CALiC,CAS9B;;AAEH,QAAI4B,QAAQ,GAAGsB,IAAI,CAACE,GAAL,CAAS,UAAT,CAAf;AACA,QAAInD,KAAK,GAAGN,GAAG,CAAC,EAAD,EAAKkD,YAAL,EAAmBjB,QAAQ,CAACyB,IAAT,EAAnB,EAAoCP,WAApC,CAAf;AACA7C,IAAAA,KAAK,GAAGN,GAAG,CAACM,KAAD,EAAQsB,GAAG,CAACtB,KAAZ,CAAX;AACA,SAAKqD,WAAL,CAAiB/B,GAAjB,EAAsB2B,IAAtB,EAA4BjD,KAA5B,EAAmC,IAAnC;AACA,SAAKsD,gBAAL,CAAsBhC,GAAtB,EAA2BC,KAA3B;AACD;AA/L2B,CAA9B,EAgMG,aAhMH","sourcesContent":["import { __assign, __rest } from \"tslib\";\nimport { mix } from '@antv/util';\nimport Global from '../../global';\nimport Shape from '../shape';\n/**\n * 基本的椭圆，可以添加文本，默认文本居中\n */\n\nShape.registerNode('ellipse', {\n  // 自定义节点时的配置\n  options: {\n    size: [120, 60],\n    style: {\n      x: 0,\n      y: 0,\n      stroke: Global.defaultShapeStrokeColor,\n      fill: Global.defaultShapeFillColor,\n      lineWidth: 1\n    },\n    // 文本样式配置\n    labelCfg: {\n      style: {\n        fill: '#595959'\n      }\n    },\n    // 节点上左右上下四个方向上的链接circle配置\n    linkPoints: {\n      top: false,\n      right: false,\n      bottom: false,\n      left: false,\n      // circle的大小\n      size: 10,\n      lineWidth: 1,\n      fill: '#72CC4A',\n      stroke: '#72CC4A'\n    },\n    // 节点中icon配置\n    icon: {\n      // 是否显示icon，值为 false 则不渲染icon\n      show: false,\n      // icon的地址，字符串类型\n      img: 'https://gw.alipayobjects.com/zos/basement_prod/012bcf4f-423b-4922-8c24-32a89f8c41ce.svg',\n      width: 36,\n      height: 36\n    }\n  },\n  shapeType: 'ellipse',\n  // 文本位置\n  labelPosition: 'center',\n  drawShape: function drawShape(cfg, group) {\n    var _a = this.getOptions(cfg).icon,\n        icon = _a === void 0 ? {} : _a;\n    var style = this.getShapeStyle(cfg);\n    var keyShape = group.addShape('ellipse', {\n      attrs: style,\n      className: 'ellipse-keyShape',\n      name: 'ellipse-keyShape',\n      draggable: true\n    });\n    var width = icon.width,\n        height = icon.height,\n        show = icon.show;\n\n    if (show) {\n      var image = group.addShape('image', {\n        attrs: __assign({\n          x: -width / 2,\n          y: -height / 2\n        }, icon),\n        className: this.type + \"-icon\",\n        name: this.type + \"-icon\",\n        draggable: true\n      });\n    }\n\n    this.drawLinkPoints(cfg, group);\n    return keyShape;\n  },\n\n  /**\n   * 绘制节点上的LinkPoints\n   * @param {Object} cfg data数据配置项\n   * @param {Group} group Group实例\n   */\n  drawLinkPoints: function drawLinkPoints(cfg, group) {\n    var _a = this.getOptions(cfg).linkPoints,\n        linkPoints = _a === void 0 ? {} : _a;\n\n    var top = linkPoints.top,\n        left = linkPoints.left,\n        right = linkPoints.right,\n        bottom = linkPoints.bottom,\n        markSize = linkPoints.size,\n        markR = linkPoints.r,\n        markStyle = __rest(linkPoints, [\"top\", \"left\", \"right\", \"bottom\", \"size\", \"r\"]);\n\n    var size = this.getSize(cfg);\n    var rx = size[0] / 2;\n    var ry = size[1] / 2;\n\n    if (left) {\n      // left circle\n      group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: -rx,\n          y: 0,\n          r: markSize / 2 || markR || 5\n        }),\n        className: 'link-point-left',\n        name: 'link-point-left',\n        isAnchorPoint: true\n      });\n    }\n\n    if (right) {\n      // right circle\n      group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: rx,\n          y: 0,\n          r: markSize / 2 || markR || 5\n        }),\n        className: 'link-point-right',\n        name: 'link-point-right',\n        isAnchorPoint: true\n      });\n    }\n\n    if (top) {\n      // top circle\n      group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: 0,\n          y: -ry,\n          r: markSize / 2 || markR || 5\n        }),\n        className: 'link-point-top',\n        name: 'link-point-top',\n        isAnchorPoint: true\n      });\n    }\n\n    if (bottom) {\n      // bottom circle\n      group.addShape('circle', {\n        attrs: __assign(__assign({}, markStyle), {\n          x: 0,\n          y: ry,\n          r: markSize / 2 || markR || 5\n        }),\n        className: 'link-point-bottom',\n        name: 'link-point-bottom',\n        isAnchorPoint: true\n      });\n    }\n  },\n\n  /**\n   * 获取节点的样式，供基于该节点自定义时使用\n   * @param {Object} cfg 节点数据模型\n   * @return {Object} 节点的样式\n   */\n  getShapeStyle: function getShapeStyle(cfg) {\n    var defaultStyle = this.getOptions(cfg).style;\n    var strokeStyle = {\n      stroke: cfg.color\n    }; // 如果设置了color，则覆盖默认的stroke属性\n\n    var style = mix({}, defaultStyle, strokeStyle);\n    var size = this.getSize(cfg);\n    var rx = size[0] / 2;\n    var ry = size[1] / 2;\n\n    var styles = __assign({\n      x: 0,\n      y: 0,\n      rx: rx,\n      ry: ry\n    }, style);\n\n    return styles;\n  },\n  update: function update(cfg, item) {\n    var group = item.getContainer(); // 这里不传 cfg 参数是因为 cfg.style 需要最后覆盖样式\n\n    var defaultStyle = this.getOptions({}).style;\n    var size = this.getSize(cfg);\n    var strokeStyle = {\n      stroke: cfg.color,\n      rx: size[0] / 2,\n      ry: size[1] / 2\n    }; // 与 getShapeStyle 不同在于，update 时需要获取到当前的 style 进行融合。即新传入的配置项中没有涉及的属性，保留当前的配置。\n\n    var keyShape = item.get('keyShape');\n    var style = mix({}, defaultStyle, keyShape.attr(), strokeStyle);\n    style = mix(style, cfg.style);\n    this.updateShape(cfg, item, style, true);\n    this.updateLinkPoints(cfg, group);\n  }\n}, 'single-node');"]},"metadata":{},"sourceType":"module"}