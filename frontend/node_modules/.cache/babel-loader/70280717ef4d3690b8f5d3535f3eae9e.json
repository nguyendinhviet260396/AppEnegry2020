{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { deepMix, valuesOfKey, each, isObject, isFunction } from '@antv/util';\nimport { getScale } from '@antv/scale';\nimport { registerPlotType } from '../../base/global';\nimport ViewLayer from '../../base/view-layer';\nimport { getRectPath, getCirclePath, getCircleCurve } from './shape';\nimport { getPlotComponents } from './component';\n\nvar HeatmapLayer =\n/** @class */\nfunction (_super) {\n  __extends(HeatmapLayer, _super);\n\n  function HeatmapLayer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'heatmap';\n    _this.gridSize = [];\n    _this.plotComponents = [];\n    return _this;\n  }\n\n  HeatmapLayer.getDefaultOptions = function () {\n    return deepMix({}, _super.getDefaultOptions.call(this), {\n      shapeType: 'rect',\n      legend: {\n        visible: true,\n        position: 'right-center'\n      },\n      tooltip: {\n        shared: false,\n        showCrosshairs: false,\n        showMarkers: false\n      },\n      xAxis: {\n        visible: true,\n        gridAlign: 'center',\n        grid: {\n          visible: true\n        },\n        tickLine: {\n          visible: true\n        },\n        line: {\n          visible: false\n        },\n        label: {\n          visible: true,\n          autoHide: true,\n          autoRotate: true\n        }\n      },\n      yAxis: {\n        visible: true,\n        gridAlign: 'center',\n        grid: {\n          visible: true,\n          align: 'center'\n        },\n        tickLine: {\n          visible: true\n        },\n        label: {\n          autoHide: true,\n          autoRotate: false\n        }\n      },\n      color: ['#9ae3d5', '#66cdbb', '#e7a744', '#f1e066', '#f27664', '#e7c1a2'],\n      label: {\n        visible: true,\n        adjustColor: true,\n        adjustPosition: true,\n        offset: 0,\n        style: {\n          stroke: 'rgba(255,255,255,0)',\n          lineWidth: 0\n        }\n      },\n      interactions: [{\n        type: 'tooltip'\n      }]\n    });\n  };\n\n  HeatmapLayer.prototype.afterRender = function () {\n    this.renderPlotComponents();\n\n    _super.prototype.afterRender.call(this);\n  };\n\n  HeatmapLayer.prototype.changeShape = function (type) {\n    if (this.options.shapeType === type) {\n      return;\n    }\n\n    this.options.shapeType = type;\n\n    if (type === 'rect') {\n      var shapes = this.getShape();\n      this.circleToRect(shapes);\n    } else if (type === 'circle') {\n      var shapes = this.getShape();\n      this.rectToCircle(shapes);\n    }\n  };\n\n  HeatmapLayer.prototype.mappingSize = function (field) {\n    if (this.options.sizeField && this.options.sizeField === field) {\n      return;\n    }\n\n    this.options.sizeField = field; // 创建scale\n\n    var values = valuesOfKey(this.options.data, field);\n    var min = Math.min.apply(Math, values);\n    var max = Math.max.apply(Math, values);\n    var LinearScale = getScale('linear');\n    var scale = new LinearScale({\n      min: min,\n      max: max\n    });\n    var shapes = this.getShape();\n\n    if (this.options.shapeType === 'rect') {\n      this.rectSizeMapping(shapes, scale, field);\n    } else if (this.options.shapeType === 'circle') {\n      this.circleSizeMapping(shapes, scale, field);\n    }\n  };\n\n  HeatmapLayer.prototype.disableMappingSize = function () {\n    var shapes = this.getShape();\n\n    if (this.options.shapeType === 'rect') {\n      this.rectDisableSizeMapping(shapes);\n    } else if (this.options.shapeType === 'circle') {\n      this.circleDisableSizeMapping(shapes);\n    }\n  };\n\n  HeatmapLayer.prototype.destroy = function () {\n    each(this.plotComponents, function (component) {\n      component.destroy();\n    });\n\n    _super.prototype.destroy.call(this);\n  };\n\n  HeatmapLayer.prototype.getSizeScale = function () {\n    var sizeField = this.options.sizeField;\n\n    if (sizeField) {\n      this.view.getScaleByField(sizeField);\n    }\n  };\n\n  HeatmapLayer.prototype.geometryParser = function () {\n    return '';\n  };\n\n  HeatmapLayer.prototype.coord = function () {\n    return;\n  };\n\n  HeatmapLayer.prototype.legend = function () {\n    this.setConfig('legends', false);\n  };\n\n  HeatmapLayer.prototype.addGeometry = function () {\n    this.gridSize = this.getGridSize();\n    var geomConfig;\n\n    if (this.options.shapeType === 'rect') {\n      geomConfig = this.addRect();\n    } else {\n      var circle = this.addCircle();\n      geomConfig = circle;\n    }\n\n    if (this.options.shapeStyle) {\n      var styleConfig = {};\n\n      if (isFunction(this.options.shapeStyle)) {\n        styleConfig.fields = [this.options.colorField, this.options.xField, this.options.yField, this.options.sizeField];\n        styleConfig.callback = this.options.shapeStyle;\n      } else if (isObject(this.options.shapeStyle)) {\n        styleConfig.cfg = this.options.shapeStyle;\n      }\n\n      geomConfig.style = styleConfig;\n    }\n\n    if (this.options.tooltip && (this.options.tooltip.fields || this.options.tooltip.formatter)) {\n      this.geometryTooltip(geomConfig);\n    }\n\n    this.setConfig('geometry', geomConfig);\n  };\n\n  HeatmapLayer.prototype.addRect = function () {\n    // 如果用户设置了size，将size数值转换为[0,1]区间\n    var size = [0.3, 0.9];\n\n    if (this.options.shapeSize) {\n      size[0] = this.options.shapeSize[0] / this.gridSize[0];\n      size[1] = this.options.shapeSize[1] / this.gridSize[1];\n    }\n\n    var rect = {\n      type: 'polygon',\n      position: {\n        fields: [this.options.xField, this.options.yField]\n      },\n      color: {\n        fields: [this.options.colorField],\n        values: this.options.color\n      },\n      shape: {\n        values: ['rect']\n      },\n      label: false\n    };\n\n    if (this.options.sizeField) {\n      rect.size = {\n        fields: [this.options.sizeField],\n        values: size\n      };\n    } else {\n      rect.size = {\n        values: [1]\n      };\n    }\n\n    return rect;\n  };\n\n  HeatmapLayer.prototype.addCircle = function () {\n    var size = [0.3, 0.9];\n\n    if (this.options.shapeSize) {\n      size = this.options.shapeSize;\n    } else {\n      size[0] = this.gridSize[0] * size[0] * 0.5;\n      size[1] = this.gridSize[1] * size[1] * 0.5;\n    }\n\n    var circle = {\n      type: 'point',\n      position: {\n        fields: [this.options.xField, this.options.yField]\n      },\n      color: {\n        fields: [this.options.colorField],\n        values: this.options.color\n      },\n      shape: {\n        values: ['curvePoint']\n      },\n      label: false\n    };\n\n    if (this.options.sizeField) {\n      circle.size = {\n        fields: [this.options.sizeField],\n        values: size\n      };\n    } else {\n      circle.size = {\n        values: [Math.min(this.gridSize[0], this.gridSize[1]) * 0.5 * 0.9]\n      };\n    }\n\n    return circle;\n  };\n\n  HeatmapLayer.prototype.geometryTooltip = function (config) {\n    config.tooltip = {};\n    var tooltipOptions = this.options.tooltip;\n\n    if (tooltipOptions.fields) {\n      config.tooltip.fields = tooltipOptions.fields;\n    }\n\n    if (tooltipOptions.formatter) {\n      config.tooltip.callback = tooltipOptions.formatter;\n\n      if (!tooltipOptions.fields) {\n        config.tooltip.fields = [this.options.xField, this.options.yField];\n\n        if (this.options.colorField) {\n          config.tooltip.fields.push(this.options.colorField);\n        }\n      }\n    }\n  };\n\n  HeatmapLayer.prototype.getGridSize = function () {\n    if (this.options.padding === 'auto') {\n      return [0, 0];\n    } else {\n      var viewRange = this.getViewRange();\n      var _a = this.options,\n          padding = _a.padding,\n          xField = _a.xField,\n          yField = _a.yField,\n          data = _a.data;\n      var width = viewRange.width - padding[1] - padding[3];\n      var height = viewRange.height - padding[0] - padding[2];\n      var xCount = valuesOfKey(data, xField).length;\n      var yCount = valuesOfKey(data, yField).length;\n      return [width / xCount, height / yCount];\n    }\n  };\n\n  HeatmapLayer.prototype.circleToRect = function (shapes) {\n    var _this = this;\n\n    var gridSize = this.gridSize;\n    each(shapes, function (shape) {\n      var _a = shape.get('origin'),\n          x = _a.x,\n          y = _a.y,\n          size = _a.size;\n\n      var sizeRatio = size * 2 / Math.min(gridSize[0], gridSize[1]);\n\n      if (!_this.options.sizeField) {\n        sizeRatio = 1;\n      }\n\n      var curvePath = getCircleCurve(x, y, size);\n      var rectPath = getRectPath(x, y, gridSize[0], gridSize[1], sizeRatio);\n      shape.stopAnimate();\n      shape.attr('path', curvePath);\n      shape.animate({\n        path: rectPath\n      }, 500, 'easeLinear');\n    });\n  };\n\n  HeatmapLayer.prototype.rectToCircle = function (shapes) {\n    var _this = this;\n\n    each(shapes, function (shape) {\n      var coord = shape.get('coord');\n      var points = shape.get('origin').points;\n      var ps = [];\n      each(points, function (p) {\n        ps.push(coord.convertPoint(p));\n      });\n      var bbox = shape.getBBox();\n      var width = bbox.width;\n      var height = bbox.height;\n      var centerX = bbox.minX + width / 2;\n      var centerY = bbox.minY + height / 2;\n      var offsetRatio = _this.options.sizeField ? 1 : 0.9;\n      var curvePath = getCircleCurve(centerX, centerY, Math.min(width, height) / 2 * offsetRatio);\n      var circlePath = getCirclePath(centerX, centerY, Math.min(width, height) / 2 * offsetRatio);\n      shape.stopAnimate();\n      shape.animate({\n        path: curvePath\n      }, 500, 'easeLinear', function () {\n        shape.attr('path', circlePath);\n      });\n    });\n  };\n\n  HeatmapLayer.prototype.rectSizeMapping = function (shapes, scale, field) {\n    each(shapes, function (shape) {\n      var data = shape.get('origin').data;\n      var ratio = 0.3 + scale.scale(data[field]) * 0.6;\n      shape.get('origin').size = ratio;\n      var bbox = shape.getBBox();\n      var width = bbox.width;\n      var height = bbox.height;\n      var centerX = bbox.minX + width / 2;\n      var centerY = bbox.minY + height / 2;\n      var path = getRectPath(centerX, centerY, width, height, ratio);\n      shape.stopAnimate();\n      shape.animate({\n        path: path\n      }, 500, 'easeLinear');\n    });\n  };\n\n  HeatmapLayer.prototype.circleSizeMapping = function (shapes, scale, field) {\n    each(shapes, function (shape) {\n      var data = shape.get('origin').data;\n      var ratio = 0.3 + scale.scale(data[field]) * 0.6;\n\n      var _a = shape.get('origin'),\n          x = _a.x,\n          y = _a.y,\n          size = _a.size;\n\n      var path = getCirclePath(x, y, size * ratio);\n      shape.get('origin').size = size * ratio;\n      shape.stopAnimate();\n      shape.animate({\n        path: path\n      }, 500, 'easeLinear');\n    });\n  };\n\n  HeatmapLayer.prototype.circleDisableSizeMapping = function (shapes) {\n    var _this = this;\n\n    this.options.sizeField = null;\n    each(shapes, function (shape) {\n      var _a = shape.get('origin'),\n          x = _a.x,\n          y = _a.y;\n\n      var size = Math.min(_this.gridSize[0], _this.gridSize[1]) * 0.9;\n      shape.get('origin').size = size / 2;\n      var path = getCirclePath(x, y, size / 2);\n      shape.stopAnimate();\n      shape.animate({\n        path: path\n      }, 500, 'easeLinear');\n    });\n  };\n\n  HeatmapLayer.prototype.rectDisableSizeMapping = function (shapes) {\n    var _this = this;\n\n    this.options.sizeField = null;\n    each(shapes, function (shape) {\n      var bbox = shape.getBBox();\n      var width = bbox.width;\n      var height = bbox.height;\n      var centerX = bbox.minX + width / 2;\n      var centerY = bbox.minY + height / 2;\n      var path = getRectPath(centerX, centerY, _this.gridSize[0], _this.gridSize[1], 1);\n      shape.get('origin').size = 1;\n      shape.stopAnimate();\n      shape.animate({\n        path: path\n      }, 500, 'easeLinear');\n    });\n  };\n\n  HeatmapLayer.prototype.getShape = function () {\n    var elements = this.view.geometries[0].elements;\n    var shapes = [];\n    each(elements, function (ele) {\n      shapes.push(ele.shape);\n    });\n    return shapes;\n  };\n\n  HeatmapLayer.prototype.renderPlotComponents = function () {\n    var _this = this;\n\n    each(this.plotComponents, function (component) {\n      component.destroy();\n    });\n    this.plotComponents = [];\n    var componentsType = ['label', 'legend'];\n    each(componentsType, function (t) {\n      var cfg = __assign({\n        view: _this.view,\n        plot: _this\n      }, _this.options[t]);\n\n      var component = getPlotComponents(_this, t, cfg);\n\n      if (component) {\n        component.render();\n\n        _this.plotComponents.push(component);\n      }\n    });\n  };\n\n  return HeatmapLayer;\n}(ViewLayer);\n\nexport default HeatmapLayer;\nregisterPlotType('heatmap', HeatmapLayer);","map":{"version":3,"sources":["../../../src/plots/heatmap/layer.ts"],"names":[],"mappings":"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","sourcesContent":["import { deepMix, valuesOfKey, each, isObject, isFunction } from '@antv/util';\nimport { getScale } from '@antv/scale';\nimport { registerPlotType } from '../../base/global';\nimport { LayerConfig } from '../../base/layer';\nimport ViewLayer, { ViewConfig } from '../../base/view-layer';\nimport { MatrixLegendConfig } from './component/legend';\nimport { getRectPath, getCirclePath, getCircleCurve } from './shape';\nimport { getPlotComponents } from './component';\nimport { GraphicStyle } from '../../interface/config';\n\nexport interface HeatmapViewConfig extends ViewConfig {\n  sizeField?: string;\n  colorField?: string;\n  shapeSize?: number[];\n  shapeType?: string;\n  shapeStyle?: GraphicStyle;\n  color?: string[];\n  legend?: MatrixLegendConfig;\n}\n\nexport interface HeatmapLayerConfig extends HeatmapViewConfig, LayerConfig {}\n\nexport default class HeatmapLayer<T extends HeatmapLayerConfig = HeatmapLayerConfig> extends ViewLayer<T> {\n  public static getDefaultOptions(): any {\n    return deepMix({}, super.getDefaultOptions(), {\n      shapeType: 'rect',\n      legend: {\n        visible: true,\n        position: 'right-center',\n      },\n      tooltip: {\n        shared: false,\n        showCrosshairs: false,\n        showMarkers: false,\n      },\n      xAxis: {\n        visible: true,\n        gridAlign: 'center',\n        grid: {\n          visible: true,\n        },\n        tickLine: {\n          visible: true,\n        },\n        line: {\n          visible: false,\n        },\n        label: {\n          visible: true,\n          autoHide: true,\n          autoRotate: true,\n        },\n      },\n      yAxis: {\n        visible: true,\n        gridAlign: 'center',\n        grid: {\n          visible: true,\n          align: 'center',\n        },\n        tickLine: {\n          visible: true,\n        },\n        label: {\n          autoHide: true,\n          autoRotate: false,\n        },\n      },\n      color: ['#9ae3d5', '#66cdbb', '#e7a744', '#f1e066', '#f27664', '#e7c1a2'],\n      label: {\n        visible: true,\n        adjustColor: true,\n        adjustPosition: true,\n        offset: 0,\n        style: {\n          stroke: 'rgba(255,255,255,0)',\n          lineWidth: 0,\n        },\n      },\n      interactions: [{ type: 'tooltip' }],\n    });\n  }\n\n  public type: string = 'heatmap';\n  protected gridSize: number[] = [];\n  protected plotComponents: any[] = [];\n\n  public afterRender() {\n    this.renderPlotComponents();\n    super.afterRender();\n  }\n\n  public changeShape(type: string) {\n    if (this.options.shapeType === type) {\n      return;\n    }\n    this.options.shapeType = type;\n    if (type === 'rect') {\n      const shapes = this.getShape();\n      this.circleToRect(shapes);\n    } else if (type === 'circle') {\n      const shapes = this.getShape();\n      this.rectToCircle(shapes);\n    }\n  }\n\n  public mappingSize(field: string) {\n    if (this.options.sizeField && this.options.sizeField === field) {\n      return;\n    }\n    this.options.sizeField = field;\n    // 创建scale\n    const values = valuesOfKey(this.options.data, field);\n    const min = Math.min(...values);\n    const max = Math.max(...values);\n    const LinearScale = getScale('linear');\n    const scale = new LinearScale({\n      min,\n      max,\n    });\n    const shapes = this.getShape();\n    if (this.options.shapeType === 'rect') {\n      this.rectSizeMapping(shapes, scale, field);\n    } else if (this.options.shapeType === 'circle') {\n      this.circleSizeMapping(shapes, scale, field);\n    }\n  }\n\n  public disableMappingSize() {\n    const shapes = this.getShape();\n    if (this.options.shapeType === 'rect') {\n      this.rectDisableSizeMapping(shapes);\n    } else if (this.options.shapeType === 'circle') {\n      this.circleDisableSizeMapping(shapes);\n    }\n  }\n\n  public destroy() {\n    each(this.plotComponents, (component) => {\n      component.destroy();\n    });\n    super.destroy();\n  }\n\n  public getSizeScale() {\n    const { sizeField } = this.options;\n    if (sizeField) {\n      this.view.getScaleByField(sizeField);\n    }\n  }\n\n  protected geometryParser() {\n    return '';\n  }\n\n  protected coord() {\n    return;\n  }\n\n  protected legend() {\n    this.setConfig('legends', false);\n  }\n\n  protected addGeometry() {\n    this.gridSize = this.getGridSize();\n    let geomConfig;\n    if (this.options.shapeType === 'rect') {\n      geomConfig = this.addRect();\n    } else {\n      const circle = this.addCircle();\n      geomConfig = circle;\n    }\n    if (this.options.shapeStyle) {\n      const styleConfig: any = {};\n      if (isFunction(this.options.shapeStyle)) {\n        styleConfig.fields = [\n          this.options.colorField,\n          this.options.xField,\n          this.options.yField,\n          this.options.sizeField,\n        ];\n        styleConfig.callback = this.options.shapeStyle;\n      } else if (isObject(this.options.shapeStyle)) {\n        styleConfig.cfg = this.options.shapeStyle;\n      }\n      geomConfig.style = styleConfig;\n    }\n    if (this.options.tooltip && (this.options.tooltip.fields || this.options.tooltip.formatter)) {\n      this.geometryTooltip(geomConfig);\n    }\n\n    this.setConfig('geometry', geomConfig);\n  }\n\n  protected addRect() {\n    // 如果用户设置了size，将size数值转换为[0,1]区间\n    const size = [0.3, 0.9];\n    if (this.options.shapeSize) {\n      size[0] = this.options.shapeSize[0] / this.gridSize[0];\n      size[1] = this.options.shapeSize[1] / this.gridSize[1];\n    }\n    const rect: any = {\n      type: 'polygon',\n      position: {\n        fields: [this.options.xField, this.options.yField],\n      },\n      color: {\n        fields: [this.options.colorField],\n        values: this.options.color,\n      },\n      shape: {\n        values: ['rect'],\n      },\n      label: false,\n    };\n    if (this.options.sizeField) {\n      rect.size = {\n        fields: [this.options.sizeField],\n        values: size,\n      };\n    } else {\n      rect.size = {\n        values: [1],\n      };\n    }\n    return rect;\n  }\n\n  protected addCircle() {\n    let size = [0.3, 0.9];\n    if (this.options.shapeSize) {\n      size = this.options.shapeSize;\n    } else {\n      size[0] = this.gridSize[0] * size[0] * 0.5;\n      size[1] = this.gridSize[1] * size[1] * 0.5;\n    }\n    const circle: any = {\n      type: 'point',\n      position: {\n        fields: [this.options.xField, this.options.yField],\n      },\n      color: {\n        fields: [this.options.colorField],\n        values: this.options.color,\n      },\n      shape: {\n        values: ['curvePoint'],\n      },\n      label: false,\n    };\n    if (this.options.sizeField) {\n      circle.size = {\n        fields: [this.options.sizeField],\n        values: size,\n      };\n    } else {\n      circle.size = {\n        values: [Math.min(this.gridSize[0], this.gridSize[1]) * 0.5 * 0.9],\n      };\n    }\n    return circle;\n  }\n\n  protected geometryTooltip(config) {\n    config.tooltip = {};\n    const tooltipOptions: any = this.options.tooltip;\n    if (tooltipOptions.fields) {\n      config.tooltip.fields = tooltipOptions.fields;\n    }\n    if (tooltipOptions.formatter) {\n      config.tooltip.callback = tooltipOptions.formatter;\n      if (!tooltipOptions.fields) {\n        config.tooltip.fields = [this.options.xField, this.options.yField];\n        if (this.options.colorField) {\n          config.tooltip.fields.push(this.options.colorField);\n        }\n      }\n    }\n  }\n\n  private getGridSize() {\n    if (this.options.padding === 'auto') {\n      return [0, 0];\n    } else {\n      const viewRange = this.getViewRange();\n      const { padding, xField, yField, data } = this.options;\n      const width = viewRange.width - padding[1] - padding[3];\n      const height = viewRange.height - padding[0] - padding[2];\n      const xCount = valuesOfKey(data, xField).length;\n      const yCount = valuesOfKey(data, yField).length;\n      return [width / xCount, height / yCount];\n    }\n  }\n\n  private circleToRect(shapes) {\n    const gridSize = this.gridSize;\n    each(shapes, (shape) => {\n      const { x, y, size } = shape.get('origin');\n      let sizeRatio = (size * 2) / Math.min(gridSize[0], gridSize[1]);\n      if (!this.options.sizeField) {\n        sizeRatio = 1;\n      }\n      const curvePath = getCircleCurve(x, y, size);\n      const rectPath = getRectPath(x, y, gridSize[0], gridSize[1], sizeRatio);\n      shape.stopAnimate();\n      shape.attr('path', curvePath);\n      shape.animate(\n        {\n          path: rectPath,\n        },\n        500,\n        'easeLinear'\n      );\n    });\n  }\n\n  private rectToCircle(shapes) {\n    each(shapes, (shape) => {\n      const coord = shape.get('coord');\n      const { points } = shape.get('origin');\n      const ps = [];\n      each(points, (p) => {\n        ps.push(coord.convertPoint(p));\n      });\n      const bbox = shape.getBBox();\n      const width = bbox.width;\n      const height = bbox.height;\n      const centerX = bbox.minX + width / 2;\n      const centerY = bbox.minY + height / 2;\n      const offsetRatio = this.options.sizeField ? 1 : 0.9;\n      const curvePath = getCircleCurve(centerX, centerY, (Math.min(width, height) / 2) * offsetRatio);\n      const circlePath = getCirclePath(centerX, centerY, (Math.min(width, height) / 2) * offsetRatio);\n      shape.stopAnimate();\n      shape.animate(\n        {\n          path: curvePath,\n        },\n        500,\n        'easeLinear',\n        () => {\n          shape.attr('path', circlePath);\n        }\n      );\n    });\n  }\n\n  private rectSizeMapping(shapes, scale, field) {\n    each(shapes, (shape) => {\n      const data = shape.get('origin').data;\n      const ratio = 0.3 + scale.scale(data[field]) * 0.6;\n      shape.get('origin').size = ratio;\n      const bbox = shape.getBBox();\n      const width = bbox.width;\n      const height = bbox.height;\n      const centerX = bbox.minX + width / 2;\n      const centerY = bbox.minY + height / 2;\n      const path = getRectPath(centerX, centerY, width, height, ratio);\n      shape.stopAnimate();\n      shape.animate(\n        {\n          path: path,\n        },\n        500,\n        'easeLinear'\n      );\n    });\n  }\n\n  private circleSizeMapping(shapes, scale, field) {\n    each(shapes, (shape) => {\n      const data = shape.get('origin').data;\n      const ratio = 0.3 + scale.scale(data[field]) * 0.6;\n      const { x, y, size } = shape.get('origin');\n      const path = getCirclePath(x, y, size * ratio);\n      shape.get('origin').size = size * ratio;\n      shape.stopAnimate();\n      shape.animate(\n        {\n          path: path,\n        },\n        500,\n        'easeLinear'\n      );\n    });\n  }\n\n  private circleDisableSizeMapping(shapes) {\n    this.options.sizeField = null;\n    each(shapes, (shape) => {\n      const { x, y } = shape.get('origin');\n      const size = Math.min(this.gridSize[0], this.gridSize[1]) * 0.9;\n      shape.get('origin').size = size / 2;\n      const path = getCirclePath(x, y, size / 2);\n      shape.stopAnimate();\n      shape.animate(\n        {\n          path: path,\n        },\n        500,\n        'easeLinear'\n      );\n    });\n  }\n\n  private rectDisableSizeMapping(shapes) {\n    this.options.sizeField = null;\n    each(shapes, (shape) => {\n      const bbox = shape.getBBox();\n      const width = bbox.width;\n      const height = bbox.height;\n      const centerX = bbox.minX + width / 2;\n      const centerY = bbox.minY + height / 2;\n      const path = getRectPath(centerX, centerY, this.gridSize[0], this.gridSize[1], 1);\n      shape.get('origin').size = 1;\n      shape.stopAnimate();\n      shape.animate(\n        {\n          path: path,\n        },\n        500,\n        'easeLinear'\n      );\n    });\n  }\n\n  private getShape() {\n    const elements = this.view.geometries[0].elements;\n    const shapes = [];\n    each(elements, (ele) => {\n      shapes.push(ele.shape);\n    });\n    return shapes;\n  }\n\n  protected renderPlotComponents() {\n    each(this.plotComponents, (component) => {\n      component.destroy();\n    });\n    this.plotComponents = [];\n    const componentsType = ['label', 'legend'];\n    each(componentsType, (t) => {\n      const cfg = {\n        view: this.view,\n        plot: this,\n        ...this.options[t],\n      };\n      const component = getPlotComponents(this, t, cfg);\n      if (component) {\n        component.render();\n        this.plotComponents.push(component);\n      }\n    });\n  }\n}\n\nregisterPlotType('heatmap', HeatmapLayer);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}