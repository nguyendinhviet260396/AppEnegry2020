{"ast":null,"code":"import { modifyCSS } from '@antv/dom-util';\nimport { Canvas, SVG } from '../../dependents';\nimport { debounce, get } from '@antv/util';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { getGlobalTheme } from '../../theme/global';\nimport ThemeController from './theme';\n/**\n * Canvas controller\n * 1. create G.Canvas, destroy G.Canvas\n * 2. process auto fit container\n * 3. API for G.Canvas\n */\n\nvar CanvasController =\n/** @class */\nfunction () {\n  function CanvasController(cfg) {\n    var _this = this;\n    /**\n     * when the container size changed, trigger it after 300ms.\n     */\n\n\n    this.onResize = debounce(function () {\n      if (_this.plot.destroyed) {\n        return;\n      }\n\n      var _a = _this.getCanvasSize(),\n          width = _a.width,\n          height = _a.height;\n      /** height measure不准导致重复 forceFit */\n\n\n      if (_this.width === width && _this.height === height) {\n        return;\n      } // got new width, height, re-render the plot\n\n\n      _this.width = width;\n      _this.height = height;\n\n      _this.plot.updateConfig({\n        width: width,\n        height: height\n      });\n\n      _this.plot.render();\n    }, 300);\n    var containerDOM = cfg.containerDOM,\n        plot = cfg.plot;\n    this.containerDOM = containerDOM;\n    this.plot = plot;\n    this.init();\n  }\n  /**\n   * get canvas size from props.\n   * @returns the width, height of canvas\n   */\n\n\n  CanvasController.prototype.getCanvasSize = function () {\n    var theme = getGlobalTheme();\n    var width = this.plot.width ? this.plot.width : theme.width;\n    var height = this.plot.height ? this.plot.height : theme.height; // if forceFit = true, then use the container's size as default.\n\n    if (this.plot.forceFit) {\n      width = this.containerDOM.offsetWidth ? this.containerDOM.offsetWidth : width;\n      height = this.containerDOM.offsetHeight ? this.containerDOM.offsetHeight : height;\n    }\n\n    return {\n      width: width,\n      height: height\n    };\n  };\n  /**\n   * get the canvas dom\n   * @returns Canvas DOM\n   */\n\n\n  CanvasController.prototype.getCanvasDOM = function () {\n    return this.canvas.get('container');\n  };\n  /**\n   * update the plot size\n   */\n\n\n  CanvasController.prototype.updateCanvasSize = function () {\n    var _a = this.getCanvasSize(),\n        width = _a.width,\n        height = _a.height;\n\n    this.width = width;\n    this.height = height;\n    this.canvas.changeSize(width, height); // this.plot.updateRange();\n  };\n  /**\n   * 根据主题调整canvas样式\n   */\n\n\n  CanvasController.prototype.updateCanvasTheme = function () {\n    var theme = this.plot.theme;\n    var globalTheme = ThemeController.getGlobalTheme(theme);\n    var fill = get(globalTheme, 'backgroundStyle.fill');\n\n    if (fill) {\n      this.updateCanvasStyle({\n        backgroundColor: fill\n      });\n    }\n  };\n  /**\n   * update the canvas dom styles\n   * @param styles\n   */\n\n\n  CanvasController.prototype.updateCanvasStyle = function (styles) {\n    // 修改容器的样式\n    modifyCSS(this.getCanvasDOM(), styles); // 修改 canvas 的样式\n\n    modifyCSS(this.canvas.get('el'), {\n      display: 'inline-block',\n      verticalAlign: 'middle'\n    });\n  };\n  /**\n   * destroy the plot, remove resize event.\n   */\n\n\n  CanvasController.prototype.destroy = function () {\n    // remove event\n    if (this.resizeObserver) {\n      this.resizeObserver.unobserve(this.containerDOM);\n      this.resizeObserver.disconnect();\n      this.containerDOM = null;\n    } // remove G.Canvas\n\n\n    this.canvas.destroy();\n  };\n  /**\n   * when forceFit = true, then bind the event to listen the container size change\n   */\n\n\n  CanvasController.prototype.bindForceFit = function () {\n    var forceFit = this.plot.forceFit; // use ResizeObserver to listen the container size change.\n\n    if (forceFit) {\n      this.resizeObserver = new ResizeObserver(this.onResize);\n      this.resizeObserver.observe(this.containerDOM);\n    }\n  };\n  /**\n   * init life circle\n   */\n\n\n  CanvasController.prototype.init = function () {\n    this.initGCanvas();\n    this.bindForceFit(); // 追加容器的 css 样式，防止 tooltip 的位置参考点不正确\n\n    this.updateCanvasStyle({\n      position: 'relative'\n    });\n  };\n  /**\n   * init G.Canvas instance\n   */\n\n\n  CanvasController.prototype.initGCanvas = function () {\n    /** 创建canvas */\n    var _a = this.plot,\n        _b = _a.renderer,\n        renderer = _b === void 0 ? 'canvas' : _b,\n        pixelRatio = _a.pixelRatio,\n        _c = _a.localRefresh,\n        localRefresh = _c === void 0 ? false : _c;\n\n    var _d = this.getCanvasSize(),\n        width = _d.width,\n        height = _d.height;\n\n    var G = renderer === 'canvas' ? Canvas : SVG;\n    this.canvas = new G({\n      localRefresh: localRefresh,\n      container: this.containerDOM,\n      width: width,\n      height: height,\n      pixelRatio: pixelRatio\n    });\n    this.width = width;\n    this.height = height;\n    this.updateCanvasTheme();\n  };\n\n  return CanvasController;\n}();\n\nexport default CanvasController;","map":{"version":3,"sources":["../../../src/base/controller/canvas.ts"],"names":[],"mappings":"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","sourcesContent":["import { modifyCSS } from '@antv/dom-util';\nimport { Canvas, SVG, ICanvas } from '../../dependents';\nimport { debounce, get } from '@antv/util';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { getGlobalTheme } from '../../theme/global';\nimport BasePlot from '../plot';\nimport ThemeController from './theme';\n\nexport interface CanvasControllerCfg {\n  readonly containerDOM: HTMLElement;\n  readonly plot: BasePlot;\n}\n\ntype ICanvasCtor = new (...cfg: any) => ICanvas;\n\n/**\n * Canvas controller\n * 1. create G.Canvas, destroy G.Canvas\n * 2. process auto fit container\n * 3. API for G.Canvas\n */\n\nexport default class CanvasController {\n  public width: number;\n  public height: number;\n  public canvas: ICanvas;\n\n  private containerDOM: HTMLElement;\n  private plot: BasePlot; // temp\n  private resizeObserver: any;\n\n  /**\n   * when the container size changed, trigger it after 300ms.\n   */\n  private onResize = debounce(() => {\n    if (this.plot.destroyed) {\n      return;\n    }\n    const { width, height } = this.getCanvasSize();\n    /** height measure不准导致重复 forceFit */\n    if (this.width === width && this.height === height) {\n      return;\n    }\n    // got new width, height, re-render the plot\n    this.width = width;\n    this.height = height;\n    this.plot.updateConfig({ width, height });\n    this.plot.render();\n  }, 300);\n\n  constructor(cfg: CanvasControllerCfg) {\n    const { containerDOM, plot } = cfg;\n    this.containerDOM = containerDOM;\n    this.plot = plot;\n    this.init();\n  }\n\n  /**\n   * get canvas size from props.\n   * @returns the width, height of canvas\n   */\n  public getCanvasSize() {\n    const theme = getGlobalTheme();\n    let width = this.plot.width ? this.plot.width : theme.width;\n    let height = this.plot.height ? this.plot.height : theme.height;\n\n    // if forceFit = true, then use the container's size as default.\n    if (this.plot.forceFit) {\n      width = this.containerDOM.offsetWidth ? this.containerDOM.offsetWidth : width;\n      height = this.containerDOM.offsetHeight ? this.containerDOM.offsetHeight : height;\n    }\n    return { width, height };\n  }\n\n  /**\n   * get the canvas dom\n   * @returns Canvas DOM\n   */\n  public getCanvasDOM() {\n    return this.canvas.get('container');\n  }\n\n  /**\n   * update the plot size\n   */\n  public updateCanvasSize() {\n    const { width, height } = this.getCanvasSize();\n\n    this.width = width;\n    this.height = height;\n    this.canvas.changeSize(width, height);\n    // this.plot.updateRange();\n  }\n\n  /**\n   * 根据主题调整canvas样式\n   */\n  public updateCanvasTheme() {\n    const { theme } = this.plot;\n    const globalTheme = ThemeController.getGlobalTheme(theme);\n    const fill: string = get(globalTheme, 'backgroundStyle.fill');\n    if (fill) {\n      this.updateCanvasStyle({\n        backgroundColor: fill,\n      });\n    }\n  }\n\n  /**\n   * update the canvas dom styles\n   * @param styles\n   */\n  private updateCanvasStyle(styles: Record<string, string | number>) {\n    // 修改容器的样式\n    modifyCSS(this.getCanvasDOM(), styles);\n\n    // 修改 canvas 的样式\n    modifyCSS(this.canvas.get('el'), {\n      display: 'inline-block',\n      verticalAlign: 'middle',\n    });\n  }\n\n  /**\n   * destroy the plot, remove resize event.\n   */\n  public destroy() {\n    // remove event\n    if (this.resizeObserver) {\n      this.resizeObserver.unobserve(this.containerDOM);\n      this.resizeObserver.disconnect();\n      this.containerDOM = null;\n    }\n    // remove G.Canvas\n    this.canvas.destroy();\n  }\n\n  /**\n   * when forceFit = true, then bind the event to listen the container size change\n   */\n  private bindForceFit() {\n    const { forceFit } = this.plot;\n\n    // use ResizeObserver to listen the container size change.\n    if (forceFit) {\n      this.resizeObserver = new ResizeObserver(this.onResize);\n      this.resizeObserver.observe(this.containerDOM);\n    }\n  }\n\n  /**\n   * init life circle\n   */\n  private init() {\n    this.initGCanvas();\n\n    this.bindForceFit();\n\n    // 追加容器的 css 样式，防止 tooltip 的位置参考点不正确\n    this.updateCanvasStyle({ position: 'relative' });\n  }\n\n  /**\n   * init G.Canvas instance\n   */\n  private initGCanvas() {\n    /** 创建canvas */\n    const { renderer = 'canvas', pixelRatio, localRefresh = false } = this.plot;\n    const { width, height } = this.getCanvasSize();\n\n    const G: ICanvasCtor = renderer === 'canvas' ? Canvas : SVG;\n\n    this.canvas = new G({\n      localRefresh,\n      container: this.containerDOM,\n      width,\n      height,\n      pixelRatio,\n    });\n    this.width = width;\n    this.height = height;\n    this.updateCanvasTheme();\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}