{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { get, deepMix } from '@antv/util';\nimport Layer from '../../base/layer';\nimport WordCloudTooltips from './word-cloud-tooltips';\nimport WordCloud from './wordcloud2';\n\nvar WordCloudLayer =\n/** @class */\nfunction (_super) {\n  __extends(WordCloudLayer, _super);\n\n  function WordCloudLayer(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._toolTipsAction = function (item, dimension, evt, start) {\n      if (dimension) {\n        _this._toolTips.update({\n          items: [{\n            color: item.color || 'red',\n            name: item.word,\n            value: item.weight\n          }],\n          x: evt.offsetX,\n          y: evt.offsetY\n        });\n\n        _this._toolTips.show();\n      } else {\n        _this._toolTips.hide();\n      }\n\n      _this._toolTips.render();\n\n      _this._configHoverAction && _this._configHoverAction(item, dimension, evt, start);\n    };\n\n    _this._configHoverAction = props.onWordCloudHover;\n    _this._enableToolTips = get(props, 'tooltip.visible', true);\n    _this.options = deepMix({}, {\n      width: 400,\n      height: 400,\n      enableToolTips: true\n    }, props, // replace use config's hover action if needed, and trigger later\n    {\n      onWordCloudHover: _this._enableToolTips ? _this._toolTipsAction : _this._configHoverAction\n    });\n    return _this;\n  }\n\n  WordCloudLayer.prototype.init = function () {\n    _super.prototype.init.call(this);\n\n    this._initToolTips();\n  };\n\n  WordCloudLayer.prototype.render = function () {\n    _super.prototype.render.call(this);\n\n    this._render();\n  };\n\n  WordCloudLayer.prototype._initToolTips = function () {\n    this._toolTips = new WordCloudTooltips({\n      showTitle: false,\n      visible: false,\n      parent: this.options.container,\n      follow: true,\n      inPanel: false,\n      items: []\n    });\n\n    this._toolTips.init();\n  };\n\n  WordCloudLayer.prototype._render = function () {\n    this._targetCanvas = this.canvas.get('el');\n\n    if (this.options.maskImage) {\n      this._handleMaskImage();\n    } else {\n      // mask image not exist\n      this._start();\n    }\n  };\n\n  WordCloudLayer.prototype._handleMaskImage = function () {\n    var _this = this;\n\n    var image = new Image();\n    image.src = this.options.maskImage + '?' + new Date().getTime();\n    image.crossOrigin = 'Anonymous';\n\n    image.onload = function () {\n      if (image.naturalHeight + image.naturalWidth === 0 || image.width + image.height === 0) {\n        _this._start();\n      } else {\n        // handle no-zero image silhouette\n        _this._startWithMaskImage(image);\n      }\n    };\n\n    image.onerror = function () {\n      console.error('image %s load failed !!!', _this.options.maskImage); // load image error, ignore this mask\n\n      _this._start();\n    };\n  };\n\n  WordCloudLayer.prototype._start = function () {\n    this._handleG2PlotConfig();\n\n    var targetCtx = this._targetCanvas.getContext('2d'); // it's a trick, because 「g」 use context to scale canvas by pixelRatio,\n    // but here i need scale it back\n\n\n    var pixelRatio = this.canvas.get('width') / this.canvas.get('el').width;\n    targetCtx.scale(pixelRatio, pixelRatio);\n    WordCloud(this._targetCanvas, this.options);\n  };\n\n  WordCloudLayer.prototype._handleG2PlotConfig = function () {\n    var fontSize = this.options.wordStyle.fontSize || [10, 60];\n    var rotation = this.options.wordStyle.rotation || [-Math.PI / 2, Math.PI / 2];\n    var active, shadowColor, shadowBlur;\n\n    if (this.options.wordStyle.active) {\n      active = true;\n      shadowColor = this.options.wordStyle.active.shadowColor || '#333';\n      shadowBlur = this.options.wordStyle.active.shadowBlur || 10;\n    } else {\n      active = false;\n    }\n\n    this.options = deepMix({}, this.options, {\n      minFontSize: fontSize[0],\n      maxFontSize: fontSize[1],\n      minRotation: rotation[0],\n      maxRotation: rotation[1],\n      active: active,\n      shadowColor: shadowColor,\n      shadowBlur: shadowBlur\n    });\n  };\n\n  WordCloudLayer.prototype._startWithMaskImage = function (image) {\n    var _a = this._scaleMaskImageCanvas(this._transformWhite2BlackPixels(image)),\n        maskImageCanvas = _a.maskImageCanvas,\n        maskImageContext = _a.maskImageContext;\n    /* Determine bgPixel by creating\n     another canvas and fill the specified background color. */\n\n\n    var bctx = document.createElement('canvas').getContext('2d');\n    bctx.fillStyle = this.options.backgroundColor || '#fff';\n    bctx.fillRect(0, 0, 1, 1);\n    var bgPixel = bctx.getImageData(0, 0, 1, 1).data;\n    var imageData = maskImageContext.getImageData(0, 0, maskImageCanvas.width, maskImageCanvas.height);\n    var newImageData = maskImageContext.createImageData(imageData);\n\n    for (var i = 0; i < imageData.data.length; i += 4) {\n      if (imageData.data[i + 3] > 128) {\n        // keep this area's data the same as pixel color\n        newImageData.data[i] = bgPixel[0];\n        newImageData.data[i + 1] = bgPixel[1];\n        newImageData.data[i + 2] = bgPixel[2];\n        newImageData.data[i + 3] = bgPixel[3];\n      } else {\n        // This color must not be the same as the bgPixel.\n        // check wordcloud2.js#1192 's condition\n        newImageData.data[i] = bgPixel[0];\n        newImageData.data[i + 1] = bgPixel[1];\n        newImageData.data[i + 2] = bgPixel[2];\n        newImageData.data[i + 3] = 254; // just for not same as the bg color\n      }\n    }\n\n    maskImageContext.putImageData(newImageData, 0, 0);\n\n    var targetCtx = this._targetCanvas.getContext('2d');\n\n    targetCtx.drawImage(maskImageCanvas, 0, 0);\n    this.options = deepMix({}, this.options, {\n      clearCanvas: false\n    });\n\n    this._start();\n  };\n\n  WordCloudLayer.prototype._scaleMaskImageCanvas = function (maskImageCanvas) {\n    var maskCanvasScaled = document.createElement('canvas'); // get real canvas determined by pixelRatio\n\n    maskCanvasScaled.width = this.canvas.get('width');\n    maskCanvasScaled.height = this.canvas.get('height');\n    var ctx = maskCanvasScaled.getContext('2d'); // keep scale smooth\n\n    ctx.imageSmoothingEnabled = true; // ctx.mozImageSmoothingEnabled = true;\n    // ctx.webkitImageSmoothingEnabled = true;\n    // ctx.msImageSmoothingEnabled = true;\n\n    ctx.drawImage(maskImageCanvas, 0, 0, maskImageCanvas.width, maskImageCanvas.height, 0, 0, maskCanvasScaled.width, maskCanvasScaled.height);\n    return {\n      maskImageCanvas: maskCanvasScaled,\n      maskImageContext: ctx\n    };\n  };\n\n  WordCloudLayer.prototype._transformWhite2BlackPixels = function (image) {\n    var maskImageCanvas = document.createElement('canvas');\n    maskImageCanvas.width = image.width;\n    maskImageCanvas.height = image.height;\n    var ctx = maskImageCanvas.getContext('2d');\n    ctx.drawImage(image, 0, 0, image.width, image.height);\n    var imageData = ctx.getImageData(0, 0, maskImageCanvas.width, maskImageCanvas.height);\n    var SINGLE_COMPONENT_SIZE = 4;\n    var BLACK_PIXEL = 0;\n    var FULL_PIXEL = 255; // R - G - B - A\n\n    for (var i = 0; i < imageData.data.length; i += SINGLE_COMPONENT_SIZE) {\n      var rgb = imageData.data[i] + imageData.data[i + 1] + imageData.data[i + 2];\n      var alpha = imageData.data[i + 3];\n\n      if (alpha < 128 || rgb > 250 * 3) {\n        // white area(not to draw)\n        imageData.data[i] = FULL_PIXEL;\n        imageData.data[i + 1] = FULL_PIXEL;\n        imageData.data[i + 2] = FULL_PIXEL;\n        imageData.data[i + 3] = BLACK_PIXEL;\n      } else {\n        // black area wait to draw(image black silhouette)\n        imageData.data[i] = BLACK_PIXEL;\n        imageData.data[i + 1] = BLACK_PIXEL;\n        imageData.data[i + 2] = BLACK_PIXEL;\n        imageData.data[i + 3] = FULL_PIXEL;\n      }\n    }\n\n    ctx.putImageData(imageData, 0, 0);\n    return maskImageCanvas;\n  };\n\n  return WordCloudLayer;\n}(Layer);\n\nexport default WordCloudLayer;","map":{"version":3,"sources":["../../../src/plots/word-cloud/layer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Create By Bruce Too\n * On 2020-02-14\n */\nimport { LayerConfig } from '../..';\nimport { get, deepMix } from '@antv/util';\nimport Layer from '../../base/layer';\nimport WordCloudTooltips from './word-cloud-tooltips';\n\nimport WordCloud from './wordcloud2';\nimport { WordCloudPlotConfig } from './index';\nimport { TooltipCfg } from '../../dependents';\n\nexport type CloudShape =\n  | 'circle'\n  | 'square'\n  | 'cardioid'\n  | 'diamond'\n  | 'triangle'\n  | 'triangle-forward'\n  | 'triangle-backward'\n  | 'triangle-up'\n  | 'triangle-down'\n  | 'pentagon'\n  | 'star';\nexport type Dimension = {\n  x: number;\n  y: number;\n  w: number;\n  h: number;\n};\n\ntype MaskImage = {\n  maskImageCanvas: HTMLCanvasElement;\n  maskImageContext: CanvasRenderingContext2D;\n};\n\nexport type WordCloudData = {\n  word: string;\n  weight: number;\n  id: number; // index in data array. treat as unique id\n  color?: string; // cloud's color\n};\n\n/**\n * Inner start function, refresh canvas immediately(no any delay draw all 'cloud'\n * nearly at same time) with specific id\n */\nexport type InnerStartFunction = (selected: number) => void;\n\nexport type Active = {\n  shadowColor?: string;\n  shadowBlur?: number;\n};\n\nexport type WordStyle = {\n  fontFamily?: string;\n  // normal, lighter, bold, bolder, 100~900\n  fontWeight?: string | ((word: string, weight: number) => string);\n  color?: string | ((word: string, weight: number) => string);\n\n  active?: Active;\n  animatable?: boolean;\n\n  // [min, max] ->  random by steps(each step (max - min) / steps))\n  rotation?: [number, number];\n  rotationSteps?: number;\n  // the ratio of rotate\n  rotateRatio?: number;\n\n  // font's max and min size(determine by cloud's weight)\n  fontSize?: [number, number];\n\n  gridSize?: number;\n  drawOutOfBound?: boolean;\n\n  // scale 1/4 font weight each time till fit in\n  // shrinkToFit?: boolean;\n  // reset cloud's [x,y]\n  // origin?: [number, number];\n};\n\nexport interface WordCloudViewConfig extends WordCloudPlotConfig {\n  data: Array<WordCloudData> | Function;\n  // mask image, black-white pixel image will be better\n  maskImage?: string;\n  backgroundColor?: string;\n  wordStyle?: WordStyle;\n  shuffle?: boolean;\n  selected?: number;\n  tooltip?: {\n    visible: boolean;\n  } & TooltipCfg;\n  shape?: CloudShape | Function;\n\n  animatable?: boolean;\n\n  onWordCloudHover?: (item: WordCloudData, dimension: Dimension, evt: MouseEvent, start: InnerStartFunction) => {};\n  onWordCloudClick?: (item: WordCloudData, dimension: Dimension, evt: MouseEvent) => {};\n\n  // clear before start\n  // clearCanvas?: boolean;\n  // wait milliseconds before next item show\n  // wait?: number;\n  // If the call with in the loop takes more than x milliseconds (and blocks the browser), abort immediately.\n  // abortThreshold?: number;\n  // abort callback\n  // abort?: () => {};\n  // shape's ellipticity [0,1]\n  // ellipticity?: number;\n  // ONLY FOR DEBUG, DON'T USE US\n  // drawMask?: boolean;\n  // maskColor?: string;\n  // maskGapWidth?: number;\n  // hide for now\n  // classes?: (word: string, weight: number) => string;\n}\n\ninterface WordCloudLayerConfig extends WordCloudViewConfig, LayerConfig {}\n\nexport default class WordCloudLayer extends Layer<WordCloudLayerConfig> {\n  private _targetCanvas: HTMLCanvasElement;\n  private _toolTips: WordCloudTooltips;\n  private readonly _configHoverAction: Function;\n  private readonly _enableToolTips: boolean;\n\n  constructor(props: WordCloudLayerConfig) {\n    super(props);\n    this._configHoverAction = props.onWordCloudHover;\n    this._enableToolTips = get(props, 'tooltip.visible', true);\n    this.options = deepMix(\n      {},\n      {\n        width: 400,\n        height: 400,\n        enableToolTips: true,\n      },\n      props,\n      // replace use config's hover action if needed, and trigger later\n      {\n        onWordCloudHover: this._enableToolTips ? this._toolTipsAction : this._configHoverAction,\n      }\n    );\n  }\n\n  public init() {\n    super.init();\n    this._initToolTips();\n  }\n\n  public render() {\n    super.render();\n    this._render();\n  }\n\n  private _toolTipsAction = (item: WordCloudData, dimension: Dimension, evt: MouseEvent, start: InnerStartFunction) => {\n    if (dimension) {\n      this._toolTips.update({\n        items: [\n          {\n            color: item.color || 'red',\n            name: item.word,\n            value: item.weight,\n          },\n        ],\n        x: evt.offsetX,\n        y: evt.offsetY,\n      });\n      this._toolTips.show();\n    } else {\n      this._toolTips.hide();\n    }\n    this._toolTips.render();\n    this._configHoverAction && this._configHoverAction(item, dimension, evt, start);\n  };\n\n  private _initToolTips() {\n    this._toolTips = new WordCloudTooltips({\n      showTitle: false,\n      visible: false,\n      parent: this.options.container,\n      follow: true,\n      inPanel: false, // must be false\n      items: [],\n    });\n    this._toolTips.init();\n  }\n\n  private _render() {\n    this._targetCanvas = this.canvas.get('el');\n    if (this.options.maskImage) {\n      this._handleMaskImage();\n    } else {\n      // mask image not exist\n      this._start();\n    }\n  }\n\n  private _handleMaskImage() {\n    const image = new Image();\n    image.src = this.options.maskImage + '?' + new Date().getTime();\n    image.crossOrigin = 'Anonymous';\n    image.onload = () => {\n      if (image.naturalHeight + image.naturalWidth === 0 || image.width + image.height === 0) {\n        this._start();\n      } else {\n        // handle no-zero image silhouette\n        this._startWithMaskImage(image);\n      }\n    };\n    image.onerror = () => {\n      console.error('image %s load failed !!!', this.options.maskImage);\n      // load image error, ignore this mask\n      this._start();\n    };\n  }\n\n  private _start() {\n    this._handleG2PlotConfig();\n    const targetCtx = this._targetCanvas.getContext('2d');\n    // it's a trick, because 「g」 use context to scale canvas by pixelRatio,\n    // but here i need scale it back\n    const pixelRatio = this.canvas.get('width') / this.canvas.get('el').width;\n    targetCtx.scale(pixelRatio, pixelRatio);\n    WordCloud(this._targetCanvas, this.options);\n  }\n\n  private _handleG2PlotConfig() {\n    const fontSize = this.options.wordStyle.fontSize || [10, 60];\n    const rotation = this.options.wordStyle.rotation || [-Math.PI / 2, Math.PI / 2];\n    let active, shadowColor, shadowBlur;\n    if (this.options.wordStyle.active) {\n      active = true;\n      shadowColor = this.options.wordStyle.active.shadowColor || '#333';\n      shadowBlur = this.options.wordStyle.active.shadowBlur || 10;\n    } else {\n      active = false;\n    }\n    this.options = deepMix({}, this.options, {\n      minFontSize: fontSize[0],\n      maxFontSize: fontSize[1],\n      minRotation: rotation[0],\n      maxRotation: rotation[1],\n      active,\n      shadowColor,\n      shadowBlur,\n    });\n  }\n\n  private _startWithMaskImage(image: HTMLImageElement) {\n    const { maskImageCanvas, maskImageContext } = this._scaleMaskImageCanvas(this._transformWhite2BlackPixels(image));\n    /* Determine bgPixel by creating\n     another canvas and fill the specified background color. */\n    const bctx = document.createElement('canvas').getContext('2d');\n\n    bctx.fillStyle = this.options.backgroundColor || '#fff';\n    bctx.fillRect(0, 0, 1, 1);\n    const bgPixel = bctx.getImageData(0, 0, 1, 1).data;\n\n    const imageData = maskImageContext.getImageData(0, 0, maskImageCanvas.width, maskImageCanvas.height);\n    const newImageData = maskImageContext.createImageData(imageData);\n    for (let i = 0; i < imageData.data.length; i += 4) {\n      if (imageData.data[i + 3] > 128) {\n        // keep this area's data the same as pixel color\n        newImageData.data[i] = bgPixel[0];\n        newImageData.data[i + 1] = bgPixel[1];\n        newImageData.data[i + 2] = bgPixel[2];\n        newImageData.data[i + 3] = bgPixel[3];\n      } else {\n        // This color must not be the same as the bgPixel.\n        // check wordcloud2.js#1192 's condition\n        newImageData.data[i] = bgPixel[0];\n        newImageData.data[i + 1] = bgPixel[1];\n        newImageData.data[i + 2] = bgPixel[2];\n        newImageData.data[i + 3] = 254; // just for not same as the bg color\n      }\n    }\n\n    maskImageContext.putImageData(newImageData, 0, 0);\n\n    const targetCtx = this._targetCanvas.getContext('2d');\n    targetCtx.drawImage(maskImageCanvas, 0, 0);\n    this.options = deepMix({}, this.options, { clearCanvas: false });\n\n    this._start();\n  }\n\n  private _scaleMaskImageCanvas(maskImageCanvas: HTMLCanvasElement): MaskImage {\n    const maskCanvasScaled = document.createElement('canvas');\n    // get real canvas determined by pixelRatio\n    maskCanvasScaled.width = this.canvas.get('width');\n    maskCanvasScaled.height = this.canvas.get('height');\n    const ctx = maskCanvasScaled.getContext('2d');\n    // keep scale smooth\n    ctx.imageSmoothingEnabled = true;\n    // ctx.mozImageSmoothingEnabled = true;\n    // ctx.webkitImageSmoothingEnabled = true;\n    // ctx.msImageSmoothingEnabled = true;\n    ctx.drawImage(\n      maskImageCanvas,\n      0,\n      0,\n      maskImageCanvas.width,\n      maskImageCanvas.height,\n      0,\n      0,\n      maskCanvasScaled.width,\n      maskCanvasScaled.height\n    );\n    return {\n      maskImageCanvas: maskCanvasScaled,\n      maskImageContext: ctx,\n    };\n  }\n\n  private _transformWhite2BlackPixels(image: HTMLImageElement): HTMLCanvasElement {\n    const maskImageCanvas = document.createElement('canvas');\n    maskImageCanvas.width = image.width;\n    maskImageCanvas.height = image.height;\n    const ctx = maskImageCanvas.getContext('2d');\n    ctx.drawImage(image, 0, 0, image.width, image.height);\n    const imageData = ctx.getImageData(0, 0, maskImageCanvas.width, maskImageCanvas.height);\n    const SINGLE_COMPONENT_SIZE = 4;\n    const BLACK_PIXEL = 0;\n    const FULL_PIXEL = 255;\n    // R - G - B - A\n    for (let i = 0; i < imageData.data.length; i += SINGLE_COMPONENT_SIZE) {\n      const rgb = imageData.data[i] + imageData.data[i + 1] + imageData.data[i + 2];\n      const alpha = imageData.data[i + 3];\n\n      if (alpha < 128 || rgb > 250 * 3) {\n        // white area(not to draw)\n        imageData.data[i] = FULL_PIXEL;\n        imageData.data[i + 1] = FULL_PIXEL;\n        imageData.data[i + 2] = FULL_PIXEL;\n        imageData.data[i + 3] = BLACK_PIXEL;\n      } else {\n        // black area wait to draw(image black silhouette)\n        imageData.data[i] = BLACK_PIXEL;\n        imageData.data[i + 1] = BLACK_PIXEL;\n        imageData.data[i + 2] = BLACK_PIXEL;\n        imageData.data[i + 3] = FULL_PIXEL;\n      }\n    }\n\n    ctx.putImageData(imageData, 0, 0);\n    return maskImageCanvas;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}