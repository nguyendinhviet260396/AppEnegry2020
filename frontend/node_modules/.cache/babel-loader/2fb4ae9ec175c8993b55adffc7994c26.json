{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { get } from '@antv/util';\nimport GeometryLabel from './base';\n/**\n * 柱状图 label\n */\n\nvar IntervalLabel =\n/** @class */\nfunction (_super) {\n  __extends(IntervalLabel, _super);\n\n  function IntervalLabel() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  IntervalLabel.prototype.setLabelPosition = function (labelPointCfg, mappingData, index, position) {\n    var coordinate = this.getCoordinate();\n    var transposed = coordinate.isTransposed;\n    var shapePoints = mappingData.points;\n    var point0 = coordinate.convert(shapePoints[0]);\n    var point1 = coordinate.convert(shapePoints[2]);\n    var flag = transposed ? -1 : 1;\n    var width = (point0.x - point1.x) / 2 * flag;\n    var height = (point0.y - point1.y) / 2 * flag;\n\n    switch (position) {\n      case 'right':\n        if (!transposed) {\n          labelPointCfg.x -= width;\n          labelPointCfg.y += height;\n        }\n\n        labelPointCfg.textAlign = get(labelPointCfg, 'textAlign', 'left');\n        break;\n\n      case 'left':\n        if (transposed) {\n          labelPointCfg.x -= width * 2;\n        } else {\n          labelPointCfg.x += width;\n          labelPointCfg.y += height;\n        }\n\n        labelPointCfg.textAlign = get(labelPointCfg, 'textAlign', 'right');\n        break;\n\n      case 'bottom':\n        if (transposed) {\n          labelPointCfg.x -= width;\n          labelPointCfg.y -= height;\n        } else {\n          labelPointCfg.y += height * 2;\n        }\n\n        labelPointCfg.textAlign = get(labelPointCfg, 'textAlign', 'center');\n        labelPointCfg.textBaseline = get(labelPointCfg, 'textBaseline', 'top');\n        break;\n\n      case 'middle':\n        if (transposed) {\n          labelPointCfg.x -= width;\n        } else {\n          labelPointCfg.y += height;\n        }\n\n        labelPointCfg.textAlign = get(labelPointCfg, 'textAlign', 'center');\n        break;\n\n      case 'top':\n        if (transposed) {\n          labelPointCfg.x -= width;\n          labelPointCfg.y += height;\n        }\n\n        labelPointCfg.textAlign = get(labelPointCfg, 'textAlign', 'center');\n        labelPointCfg.textBaseline = get(labelPointCfg, 'textBaseline', 'bottom');\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  return IntervalLabel;\n}(GeometryLabel);\n\nexport default IntervalLabel;","map":{"version":3,"sources":["../../../src/geometry/label/interval.ts"],"names":[],"mappings":"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","sourcesContent":["import { get } from '@antv/util';\n\nimport { MappingDatum, Point } from '../../interface';\nimport GeometryLabel from './base';\nimport { LabelPointCfg } from './interface';\n\n/**\n * 柱状图 label\n */\nexport default class IntervalLabel extends GeometryLabel {\n  protected setLabelPosition(labelPointCfg: LabelPointCfg, mappingData: MappingDatum, index: number, position: string) {\n    const coordinate = this.getCoordinate();\n    const transposed = coordinate.isTransposed;\n    const shapePoints = mappingData.points as Point[];\n    const point0 = coordinate.convert(shapePoints[0]);\n    const point1 = coordinate.convert(shapePoints[2]);\n    const flag = transposed ? -1 : 1;\n    const width = ((point0.x - point1.x) / 2) * flag;\n    const height = ((point0.y - point1.y) / 2) * flag;\n\n    switch (position) {\n      case 'right':\n        if (!transposed) {\n          labelPointCfg.x -= width;\n          labelPointCfg.y += height;\n        }\n        labelPointCfg.textAlign = get(labelPointCfg, 'textAlign', 'left');\n        break;\n      case 'left':\n        if (transposed) {\n          labelPointCfg.x -= width * 2;\n        } else {\n          labelPointCfg.x += width;\n          labelPointCfg.y += height;\n        }\n        labelPointCfg.textAlign = get(labelPointCfg, 'textAlign', 'right');\n        break;\n      case 'bottom':\n        if (transposed) {\n          labelPointCfg.x -= width;\n          labelPointCfg.y -= height;\n        } else {\n          labelPointCfg.y += height * 2;\n        }\n        labelPointCfg.textAlign = get(labelPointCfg, 'textAlign', 'center');\n        labelPointCfg.textBaseline = get(labelPointCfg, 'textBaseline', 'top');\n        break;\n      case 'middle':\n        if (transposed) {\n          labelPointCfg.x -= width;\n        } else {\n          labelPointCfg.y += height;\n        }\n        labelPointCfg.textAlign = get(labelPointCfg, 'textAlign', 'center');\n        break;\n      case 'top':\n        if (transposed) {\n          labelPointCfg.x -= width;\n          labelPointCfg.y += height;\n        }\n        labelPointCfg.textAlign = get(labelPointCfg, 'textAlign', 'center');\n        labelPointCfg.textBaseline = get(labelPointCfg, 'textBaseline', 'bottom');\n        break;\n      default:\n        break;\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}