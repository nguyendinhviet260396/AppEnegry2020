{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { deepMix, get, isObject, size } from '@antv/util';\nimport { COMPONENT_TYPE, DIRECTION, LAYER } from '../../constant';\nimport { Slider as SliderComponent } from '../../dependents';\nimport { BBox } from '../../util/bbox';\nimport { directionToPosition } from '../../util/direction';\nimport { isBetween, omit } from '../../util/helper';\nimport { Controller } from './base';\n/**\n * @ignore\n * slider Controller\n */\n\nvar Slider =\n/** @class */\nfunction (_super) {\n  __extends(Slider, _super);\n\n  function Slider(view) {\n    var _this = _super.call(this, view) || this;\n    /**\n     * 滑块滑动的时候出发\n     * @param v\n     */\n\n\n    _this.onValueChanged = function (v) {\n      var min = v[0],\n          max = v[1];\n\n      _this.updateMinMaxText(min, max);\n\n      _this.view.render(true);\n    };\n\n    _this.container = _this.view.getLayer(LAYER.FORE).addGroup();\n    return _this;\n  }\n\n  Object.defineProperty(Slider.prototype, \"name\", {\n    get: function () {\n      return 'slider';\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * 初始化\n   */\n\n  Slider.prototype.init = function () {};\n  /**\n   * 渲染\n   */\n\n\n  Slider.prototype.render = function () {\n    this.option = this.view.getOptions().slider;\n\n    if (this.option) {\n      if (this.slider) {\n        // exist, update\n        this.slider = this.updateSlider();\n      } else {\n        // not exist, create\n        this.slider = this.createSlider(); // 监听事件，绑定交互\n\n        this.slider.component.on('sliderchange', this.onValueChanged);\n      } // changeData 的时候同样需要更新\n      // 设置初始的 text\n\n\n      var min = this.slider.component.get('start') || 0;\n      var max = this.slider.component.get('end') || 1;\n      this.updateMinMaxText(min, max);\n    } else {\n      if (this.slider) {\n        // exist, destroy\n        this.slider.component.destroy();\n        this.slider = undefined;\n      } else {// do nothing\n      }\n    }\n  };\n  /**\n   * 布局\n   */\n\n\n  Slider.prototype.layout = function () {\n    if (this.slider) {\n      var width = this.view.coordinateBBox.width; // 获取组件的 layout bbox\n\n      var bboxObject = this.slider.component.getLayoutBBox();\n      var bbox = new BBox(bboxObject.x, bboxObject.y, Math.min(bboxObject.width, width), bboxObject.height);\n\n      var _a = directionToPosition(this.view.viewBBox, bbox, DIRECTION.BOTTOM),\n          x1 = _a[0],\n          y1 = _a[1];\n\n      var _b = directionToPosition(this.view.coordinateBBox, bbox, DIRECTION.BOTTOM),\n          x2 = _b[0],\n          y2 = _b[1]; // 默认放在 bottom\n\n\n      this.slider.component.update({\n        x: x2,\n        y: y1,\n        width: width\n      });\n    }\n  };\n  /**\n   * 更新\n   */\n\n\n  Slider.prototype.update = function () {\n    // 逻辑和 render 保持一致\n    this.render();\n  };\n  /**\n   * 创建 slider 组件\n   */\n\n\n  Slider.prototype.createSlider = function () {\n    var cfg = this.getSliderCfg(); // 添加 slider 组件\n\n    var component = new SliderComponent(__assign({\n      container: this.container\n    }, cfg));\n    component.init();\n    return {\n      component: component,\n      layer: LAYER.FORE,\n      direction: DIRECTION.BOTTOM,\n      type: COMPONENT_TYPE.OTHER\n    };\n  };\n  /**\n   * 更新配置\n   */\n\n\n  Slider.prototype.updateSlider = function () {\n    var cfg = this.getSliderCfg();\n    omit(cfg, ['x', 'y', 'width', 'start', 'end', 'minText', 'maxText']);\n    this.slider.component.update(cfg);\n    return this.slider;\n  };\n  /**\n   * 生成 slider 配置\n   */\n\n\n  Slider.prototype.getSliderCfg = function () {\n    if (isObject(this.option)) {\n      // 用户配置的数据，优先级更高\n      var trendCfg = __assign({\n        data: this.getData()\n      }, get(this.option, 'trendCfg', {})); // 初始的位置大小信息\n\n\n      var x = 0;\n      var y = 0;\n      var width = this.view.coordinateBBox.width; // 因为有样式，所以深层覆盖\n\n      var cfg = deepMix({}, {\n        x: x,\n        y: y,\n        width: width\n      }, this.option); // trendCfg 因为有数据数组，所以使用浅替换\n\n      return __assign(__assign({}, cfg), {\n        trendCfg: trendCfg\n      });\n    }\n\n    return {};\n  };\n  /**\n   * 从 view 中获取数据，缩略轴使用全量的数据\n   */\n\n\n  Slider.prototype.getData = function () {\n    var data = this.view.getOptions().data;\n    var yScale = this.view.getYScales()[0];\n    var groupScales = this.view.getGroupScales();\n\n    if (groupScales.length) {\n      var _a = groupScales[0],\n          field_1 = _a.field,\n          ticks_1 = _a.ticks;\n      return data.reduce(function (pre, cur) {\n        if (cur[field_1] === ticks_1[0]) {\n          pre.push(cur[yScale.field]);\n        }\n\n        return pre;\n      }, []);\n    }\n\n    return data.map(function (datum) {\n      return datum[yScale.field] || 0;\n    });\n  };\n\n  Slider.prototype.updateMinMaxText = function (min, max) {\n    var data = this.view.getOptions().data;\n    var xScale = this.view.getXScale();\n    var dataSize = size(data);\n\n    if (!xScale || !dataSize) {\n      return;\n    }\n\n    var x = xScale.field; // x 轴刻度\n\n    var xTicks = data.reduce(function (pre, datum) {\n      if (!pre.includes(datum[x])) pre.push(datum[x]);\n      return pre;\n    }, []);\n    var xTickCount = size(xTicks);\n    var minIndex = Math.floor(min * (xTickCount - 1));\n    var maxIndex = Math.floor(max * (xTickCount - 1));\n    var minText = get(xTicks, [minIndex]);\n    var maxText = get(xTicks, [maxIndex]);\n    var formatter = this.getSliderCfg().formatter;\n\n    if (formatter) {\n      minText = formatter(minText, data[minIndex], minIndex);\n      maxText = formatter(maxText, data[maxIndex], maxIndex);\n    } // 更新文本\n\n\n    this.slider.component.update({\n      minText: minText,\n      maxText: maxText,\n      start: min,\n      end: max\n    }); // 增加 x 轴的过滤器\n\n    this.view.filter(xScale.field, function (value, datum) {\n      var idx = xTicks.indexOf(value);\n      return idx > -1 ? isBetween(idx, minIndex, maxIndex) : true;\n    });\n  };\n  /**\n   * 覆写父类方法\n   */\n\n\n  Slider.prototype.getComponents = function () {\n    return this.slider ? [this.slider] : [];\n  };\n\n  return Slider;\n}(Controller);\n\nexport default Slider;","map":{"version":3,"sources":["../../../src/chart/controller/slider.ts"],"names":[],"mappings":"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","sourcesContent":["import { deepMix, get, isObject, size } from '@antv/util';\nimport { COMPONENT_TYPE, DIRECTION, LAYER } from '../../constant';\nimport { IGroup, Slider as SliderComponent, TrendCfg } from '../../dependents';\nimport { ComponentOption, Datum } from '../../interface';\nimport { BBox } from '../../util/bbox';\nimport { directionToPosition } from '../../util/direction';\nimport { isBetween, omit } from '../../util/helper';\nimport View from '../view';\nimport { Controller } from './base';\n\nexport type SliderFormatterType = (val: any, datum: Datum, idx: number) => any;\n/** Slider 配置 */\nexport interface SliderOption {\n  /** slider 高度 */\n  readonly height?: number;\n\n  /** 滑块背景区域配置 */\n  readonly trendCfg?: TrendCfg;\n  /** 滑块背景样式 */\n  readonly backgroundStyle?: any;\n  /** 滑块前景样式 */\n  readonly foregroundStyle?: any;\n  /** 滑块两个操作块样式 */\n  readonly handlerStyle?: any;\n  /** 文本样式 */\n  readonly textStyle?: any;\n  /** 允许滑动位置的最小值 */\n  readonly minLimit?: number;\n  /** 允许滑动位置的最大值 */\n  readonly maxLimit?: number;\n  /** 滑块初始化的起始位置 */\n  readonly start?: number;\n  /** 滑块初始化的结束位置 */\n  readonly end?: number;\n  /** 滑块文本格式化函数 */\n  formatter?: SliderFormatterType;\n}\n\ntype Option = SliderOption | boolean;\n\n/**\n * @ignore\n * slider Controller\n */\nexport default class Slider extends Controller<Option> {\n  private slider: ComponentOption;\n  private container: IGroup;\n\n  constructor(view: View) {\n    super(view);\n\n    this.container = this.view.getLayer(LAYER.FORE).addGroup();\n  }\n\n  get name(): string {\n    return 'slider';\n  }\n\n  /**\n   * 初始化\n   */\n  public init() {}\n\n  /**\n   * 渲染\n   */\n  public render() {\n    this.option = this.view.getOptions().slider;\n\n    if (this.option) {\n      if (this.slider) {\n        // exist, update\n        this.slider = this.updateSlider();\n      } else {\n        // not exist, create\n        this.slider = this.createSlider();\n        // 监听事件，绑定交互\n        this.slider.component.on('sliderchange', this.onValueChanged);\n      }\n      // changeData 的时候同样需要更新\n      // 设置初始的 text\n      const min = this.slider.component.get('start') || 0;\n      const max = this.slider.component.get('end') || 1;\n\n      this.updateMinMaxText(min, max);\n    } else {\n      if (this.slider) {\n        // exist, destroy\n        this.slider.component.destroy();\n        this.slider = undefined;\n      } else {\n        // do nothing\n      }\n    }\n  }\n\n  /**\n   * 布局\n   */\n  public layout() {\n    if (this.slider) {\n      const width = this.view.coordinateBBox.width;\n      // 获取组件的 layout bbox\n      const bboxObject = this.slider.component.getLayoutBBox();\n      const bbox = new BBox(bboxObject.x, bboxObject.y, Math.min(bboxObject.width, width), bboxObject.height);\n\n      const [x1, y1] = directionToPosition(this.view.viewBBox, bbox, DIRECTION.BOTTOM);\n      const [x2, y2] = directionToPosition(this.view.coordinateBBox, bbox, DIRECTION.BOTTOM);\n\n      // 默认放在 bottom\n      this.slider.component.update({\n        x: x2,\n        y: y1,\n        width,\n      });\n    }\n  }\n\n  /**\n   * 更新\n   */\n  public update() {\n    // 逻辑和 render 保持一致\n    this.render();\n  }\n\n  /**\n   * 创建 slider 组件\n   */\n  private createSlider(): ComponentOption {\n    const cfg = this.getSliderCfg();\n    // 添加 slider 组件\n    const component = new SliderComponent({\n      container: this.container,\n      ...cfg,\n    });\n\n    component.init();\n\n    return {\n      component,\n      layer: LAYER.FORE,\n      direction: DIRECTION.BOTTOM,\n      type: COMPONENT_TYPE.OTHER,\n    };\n  }\n\n  /**\n   * 更新配置\n   */\n  private updateSlider() {\n    const cfg = this.getSliderCfg();\n    omit(cfg, ['x', 'y', 'width', 'start', 'end', 'minText', 'maxText']);\n\n    this.slider.component.update(cfg);\n\n    return this.slider;\n  }\n\n  /**\n   * 生成 slider 配置\n   */\n  private getSliderCfg() {\n    if (isObject(this.option)) {\n      // 用户配置的数据，优先级更高\n      const trendCfg = {\n        data: this.getData(),\n        ...get(this.option, 'trendCfg', {}),\n      };\n\n      // 初始的位置大小信息\n      const x = 0;\n      const y = 0;\n      const width = this.view.coordinateBBox.width;\n\n      // 因为有样式，所以深层覆盖\n      const cfg = deepMix({}, { x, y, width }, this.option);\n\n      // trendCfg 因为有数据数组，所以使用浅替换\n      return { ...cfg, trendCfg };\n    }\n\n    return {};\n  }\n\n  /**\n   * 从 view 中获取数据，缩略轴使用全量的数据\n   */\n  private getData(): number[] {\n    const data = this.view.getOptions().data;\n    const [yScale] = this.view.getYScales();\n    const groupScales = this.view.getGroupScales();\n    if (groupScales.length) {\n      const { field, ticks } = groupScales[0];\n      return data.reduce((pre, cur) => {\n        if (cur[field] === ticks[0]) {\n          pre.push(cur[yScale.field] as number);\n        }\n        return pre;\n      }, []) as number[];\n    }\n\n    return data.map((datum) => datum[yScale.field] || 0);\n  }\n\n  /**\n   * 滑块滑动的时候出发\n   * @param v\n   */\n  private onValueChanged = (v: any) => {\n    const [min, max] = v;\n\n    this.updateMinMaxText(min, max);\n\n    this.view.render(true);\n  };\n\n  private updateMinMaxText(min: number, max: number) {\n    const data = this.view.getOptions().data;\n    const xScale = this.view.getXScale();\n    const dataSize = size(data);\n\n    if (!xScale || !dataSize) {\n      return;\n    }\n\n    const x = xScale.field;\n\n    // x 轴刻度\n    const xTicks = data.reduce((pre, datum) => {\n      if (!pre.includes(datum[x])) pre.push(datum[x]);\n      return pre;\n    }, []);\n\n    const xTickCount = size(xTicks);\n\n    const minIndex = Math.floor(min * (xTickCount - 1));\n    const maxIndex = Math.floor(max * (xTickCount - 1));\n\n    let minText = get(xTicks, [minIndex]);\n    let maxText = get(xTicks, [maxIndex]);\n\n    const formatter = this.getSliderCfg().formatter as SliderFormatterType;\n    if (formatter) {\n      minText = formatter(minText, data[minIndex], minIndex);\n      maxText = formatter(maxText, data[maxIndex], maxIndex);\n    }\n\n    // 更新文本\n    this.slider.component.update({\n      minText,\n      maxText,\n      start: min,\n      end: max,\n    });\n\n    // 增加 x 轴的过滤器\n    this.view.filter(xScale.field, (value: any, datum: Datum) => {\n      const idx: number = xTicks.indexOf(value);\n      return idx > -1 ? isBetween(idx, minIndex, maxIndex) : true;\n    });\n  }\n\n  /**\n   * 覆写父类方法\n   */\n  public getComponents() {\n    return this.slider ? [this.slider] : [];\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}