{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\n/**\n * Create By Bruce Too\n * On 2020-02-14\n */\n\nimport { deepMix, has } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport ViewLayer from '../../base/view-layer';\nimport { getComponent } from '../../components/factory';\nimport { getGeom } from '../../geoms/factory';\nimport { extractScale } from '../../util/scale';\nimport * as EventParser from './event';\nimport './theme';\nvar GEOM_MAP = {\n  area: 'area',\n  line: 'line',\n  point: 'point'\n};\n\nvar RadarLayer =\n/** @class */\nfunction (_super) {\n  __extends(RadarLayer, _super);\n\n  function RadarLayer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'radar';\n    return _this;\n  }\n\n  RadarLayer.getDefaultOptions = function () {\n    return deepMix({}, _super.getDefaultOptions.call(this), {\n      width: 400,\n      height: 400,\n      title: {\n        visible: false\n      },\n      description: {\n        visible: false\n      },\n      forceFit: true,\n      padding: 'auto',\n      radius: 0.8,\n      smooth: false,\n      line: {\n        visible: true,\n        size: 2,\n        style: {\n          opacity: 1\n        }\n      },\n      area: {\n        visible: true,\n        style: {\n          opacity: 0.25\n        }\n      },\n      point: {\n        visible: false,\n        size: 4,\n        shape: 'point',\n        style: {\n          opacity: 1\n        }\n      },\n      angleAxis: {\n        visible: true,\n        autoRotateTitle: true,\n        line: {\n          visible: false\n        },\n        tickLine: {\n          visible: false\n        },\n        grid: {\n          visible: true,\n          line: {\n            style: {\n              lineDash: [0, 0]\n            }\n          }\n        },\n        label: {\n          visible: true,\n          offset: 16,\n          autoRotate: true,\n          autoHide: true\n        },\n        title: {\n          visible: false\n        }\n      },\n      radiusAxis: {\n        min: 0,\n        visible: true,\n\n        /** G2 4.0 默认 nice 不生效，需要手动添加 */\n        nice: true,\n        autoRotateTitle: true,\n        line: {\n          visible: true\n        },\n        tickLine: {\n          visible: true\n        },\n        gridType: 'line',\n        grid: {\n          visible: true,\n          line: {\n            style: {\n              lineDash: [0, 0]\n            }\n          }\n        },\n        label: {\n          visible: true,\n          autoHide: true,\n          autoRotate: true\n        },\n        title: {\n          visible: false\n        }\n      },\n      label: {\n        visible: false,\n        type: 'point'\n      },\n      legend: {\n        visible: true,\n        position: 'left-top'\n      },\n      tooltip: {\n        visible: true,\n        shared: true,\n        showCrosshairs: false\n      }\n    });\n  };\n\n  RadarLayer.prototype.init = function () {\n    var props = this.options;\n    props.xField = props.angleField;\n    props.yField = props.radiusField;\n\n    _super.prototype.init.call(this);\n  };\n\n  RadarLayer.prototype.getAngleScale = function () {\n    var angleField = this.options.angleField;\n    return this.view.getScaleByField(angleField);\n  };\n\n  RadarLayer.prototype.getRadiusScale = function () {\n    var radiusField = this.options.radiusField;\n    return this.view.getScaleByField(radiusField);\n  };\n\n  RadarLayer.prototype.getColorScale = function () {\n    var seriesField = this.options.seriesField;\n    return this.view.getScaleByField(seriesField);\n  };\n\n  RadarLayer.prototype.geometryParser = function (dim, type) {\n    return GEOM_MAP[type];\n  };\n\n  RadarLayer.prototype.scale = function () {\n    var props = this.options;\n    var scales = {};\n    /** 配置x-scale */\n\n    scales[props.angleField] = {};\n\n    if (has(props, 'angleAxis')) {\n      extractScale(scales[props.angleField], props.angleAxis);\n    }\n    /** 配置y-scale */\n\n\n    scales[props.radiusField] = {};\n\n    if (has(props, 'radiusAxis')) {\n      extractScale(scales[props.radiusField], props.radiusAxis);\n    }\n\n    this.setConfig('scales', scales);\n\n    _super.prototype.scale.call(this);\n  };\n\n  RadarLayer.prototype.coord = function () {\n    var props = this.options;\n    var coordConfig = {\n      type: 'polar',\n      cfg: {\n        radius: props.radius\n      }\n    };\n    this.setConfig('coordinate', coordConfig);\n  };\n\n  RadarLayer.prototype.axis = function () {\n    var props = this.options;\n    var xAxis_parser = getComponent('axis', {\n      plot: this,\n      dim: 'angle'\n    });\n    var yAxis_parser = getComponent('axis', {\n      plot: this,\n      dim: 'radius'\n    });\n    var axesConfig = {};\n    axesConfig[props.angleField] = xAxis_parser;\n    axesConfig[props.radiusField] = yAxis_parser;\n    /** 存储坐标轴配置项到config */\n\n    this.setConfig('axes', axesConfig);\n  };\n\n  RadarLayer.prototype.addGeometry = function () {\n    var props = this.options;\n    /** 配置面积 */\n\n    if (props.area.visible) {\n      var area = getGeom('area', 'main', {\n        plot: this\n      });\n      this.setConfig('geometry', area);\n      this.area = area;\n    }\n    /** 配置线 */\n\n\n    if (props.line && props.line.visible) {\n      var line = getGeom('line', 'main', {\n        plot: this\n      });\n      this.setConfig('geometry', line);\n      this.line = line;\n    }\n    /** 配置点 */\n\n\n    if (props.point && props.point.visible) {\n      var point = getGeom('point', 'guide', {\n        plot: this\n      });\n      this.setConfig('geometry', point);\n      this.point = point;\n    }\n\n    if (props.label) {\n      this.label();\n    }\n\n    if (props.tooltip && (props.tooltip.fields || props.tooltip.formatter)) {\n      this.geometryTooltip();\n    }\n  };\n\n  RadarLayer.prototype.geometryTooltip = function () {\n    var geomConfig = this.line ? this.line : this.area;\n    geomConfig.tooltip = {};\n    var tooltipOptions = this.options.tooltip;\n\n    if (tooltipOptions.fields) {\n      geomConfig.tooltip.fields = tooltipOptions.fields;\n    }\n\n    if (tooltipOptions.formatter) {\n      geomConfig.tooltip.callback = tooltipOptions.formatter;\n\n      if (!tooltipOptions.fields) {\n        geomConfig.tooltip.fields = [this.options.angleField, this.options.radiusField];\n      }\n\n      if (this.options.seriesField) {\n        geomConfig.tooltip.fields.push(this.options.seriesField);\n      }\n    }\n  };\n\n  RadarLayer.prototype.label = function () {\n    var props = this.options;\n\n    if (props.label.visible === false) {\n      if (this.point) {\n        this.point.label = false;\n      }\n\n      if (this.line) {\n        this.line.label = false;\n      }\n\n      if (this.area) {\n        this.area.label = false;\n      }\n\n      return;\n    } // @Todo 雷达图标签布局算法后续补充\n\n\n    var label = getComponent('label', __assign({\n      fields: [props.radiusField],\n      cfg: {\n        type: 'polar',\n        autoRotate: false\n      },\n      plot: this\n    }, props.label));\n\n    if (this.point) {\n      this.point.label = label;\n    } else if (this.line) {\n      this.line.label = label;\n    } else if (this.area) {\n      this.area.label = label;\n    }\n  };\n\n  RadarLayer.prototype.annotation = function () {\n    return;\n  };\n\n  RadarLayer.prototype.animation = function () {\n    _super.prototype.animation.call(this);\n\n    var props = this.options;\n\n    if (props.animation === false) {\n      // 关闭动画\n      if (this.area) this.area.animate = false;\n      if (this.line) this.line.animate = false;\n      if (this.point) this.point.animate = false;\n    }\n  };\n\n  RadarLayer.prototype.parseEvents = function () {\n    _super.prototype.parseEvents.call(this, EventParser);\n  };\n\n  return RadarLayer;\n}(ViewLayer);\n\nexport default RadarLayer;\nregisterPlotType('radar', RadarLayer);","map":{"version":3,"sources":["../../../src/plots/radar/layer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Create By Bruce Too\n * On 2020-02-14\n */\nimport { deepMix, has } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport { LayerConfig } from '../../base/layer';\nimport ViewLayer, { ViewConfig } from '../../base/view-layer';\nimport { getComponent } from '../../components/factory';\nimport { getGeom } from '../../geoms/factory';\nimport { extractScale } from '../../util/scale';\nimport * as EventParser from './event';\nimport { IValueAxis, ICatAxis, GraphicStyle, LineStyle } from '../../interface/config';\nimport './theme';\n\nexport interface RadarViewConfig extends ViewConfig {\n  /** 角度字段 */\n  angleField: string;\n  /** 径向字段 */\n  radiusField: string;\n  /** 分组字段 */\n  seriesField?: string;\n  /** 是否平滑 */\n  smooth?: boolean;\n  /** 折线图形样式 */\n  line?: {\n    visible?: boolean;\n    size?: number;\n    color?: string;\n    style?: LineStyle | ((...args: any[]) => LineStyle);\n  };\n  /** 数据点图形样式 */\n  point?: {\n    visible?: boolean;\n    shape?: string;\n    size?: number;\n    color?: string;\n    style?: GraphicStyle | ((...args: any[]) => GraphicStyle);\n  };\n  /** area图形样式 */\n  area?: {\n    visible?: boolean;\n    style?: GraphicStyle | ((...args: any[]) => GraphicStyle);\n  };\n  /** 角度轴配置 */\n  angleAxis?: ICatAxis;\n  /** 径向轴配置 */\n  radiusAxis?: IValueAxis;\n  /** 雷达图半径 */\n  radius?: number;\n}\n\nexport interface RadarLayerConfig extends RadarViewConfig, LayerConfig {}\n\nconst GEOM_MAP = {\n  area: 'area',\n  line: 'line',\n  point: 'point',\n};\n\nexport default class RadarLayer extends ViewLayer<RadarLayerConfig> {\n  public static getDefaultOptions(): any {\n    return deepMix({}, super.getDefaultOptions(), {\n      width: 400,\n      height: 400,\n      title: {\n        visible: false,\n      },\n      description: {\n        visible: false,\n      },\n      forceFit: true,\n      padding: 'auto',\n      radius: 0.8,\n      smooth: false,\n      line: {\n        visible: true,\n        size: 2,\n        style: {\n          opacity: 1,\n        },\n      },\n      area: {\n        visible: true,\n        style: {\n          opacity: 0.25,\n        },\n      },\n      point: {\n        visible: false,\n        size: 4,\n        shape: 'point',\n        style: {\n          opacity: 1,\n        },\n      },\n      angleAxis: {\n        visible: true,\n        autoRotateTitle: true,\n        line: {\n          visible: false,\n        },\n        tickLine: {\n          visible: false,\n        },\n        grid: {\n          visible: true,\n          line: {\n            style: {\n              lineDash: [0, 0],\n            },\n          },\n        },\n        label: {\n          visible: true,\n          offset: 16,\n          autoRotate: true,\n          autoHide: true,\n        },\n        title: {\n          visible: false,\n        },\n      },\n      radiusAxis: {\n        min: 0,\n        visible: true,\n        /** G2 4.0 默认 nice 不生效，需要手动添加 */\n        nice: true,\n        autoRotateTitle: true,\n        line: {\n          visible: true,\n        },\n        tickLine: {\n          visible: true,\n        },\n        gridType: 'line',\n        grid: {\n          visible: true,\n          line: {\n            style: {\n              lineDash: [0, 0],\n            },\n          },\n        },\n        label: {\n          visible: true,\n          autoHide: true,\n          autoRotate: true,\n        },\n        title: {\n          visible: false,\n        },\n      },\n      label: {\n        visible: false,\n        type: 'point',\n      },\n      legend: {\n        visible: true,\n        position: 'left-top',\n      },\n      tooltip: {\n        visible: true,\n        shared: true,\n        showCrosshairs: false,\n      },\n    });\n  }\n  public type: string = 'radar';\n  public line: any;\n  public point: any;\n  public area: any;\n  public baseElement: any;\n  public lineElement: any; // 保存line、area、point的配置项，用于后续的label、tooltip\n  public pointElement: any;\n  public areaElement: any;\n\n  public init() {\n    const props = this.options;\n    props.xField = props.angleField;\n    props.yField = props.radiusField;\n    super.init();\n  }\n\n  public getAngleScale() {\n    const { angleField } = this.options;\n    return this.view.getScaleByField(angleField);\n  }\n\n  public getRadiusScale() {\n    const { radiusField } = this.options;\n    return this.view.getScaleByField(radiusField);\n  }\n\n  public getColorScale() {\n    const { seriesField } = this.options;\n    return this.view.getScaleByField(seriesField);\n  }\n\n  protected geometryParser(dim, type) {\n    return GEOM_MAP[type];\n  }\n\n  protected scale() {\n    const props = this.options;\n    const scales = {};\n    /** 配置x-scale */\n    scales[props.angleField] = {};\n    if (has(props, 'angleAxis')) {\n      extractScale(scales[props.angleField], props.angleAxis);\n    }\n    /** 配置y-scale */\n    scales[props.radiusField] = {};\n    if (has(props, 'radiusAxis')) {\n      extractScale(scales[props.radiusField], props.radiusAxis);\n    }\n    this.setConfig('scales', scales);\n    super.scale();\n  }\n\n  protected coord() {\n    const props = this.options;\n    const coordConfig: any = {\n      type: 'polar',\n      cfg: {\n        radius: props.radius,\n      },\n    };\n    this.setConfig('coordinate', coordConfig);\n  }\n\n  protected axis(): void {\n    const props = this.options;\n    const xAxis_parser = getComponent('axis', {\n      plot: this,\n      dim: 'angle',\n    });\n    const yAxis_parser = getComponent('axis', {\n      plot: this,\n      dim: 'radius',\n    });\n    const axesConfig = {};\n    axesConfig[props.angleField] = xAxis_parser;\n    axesConfig[props.radiusField] = yAxis_parser;\n    /** 存储坐标轴配置项到config */\n    this.setConfig('axes', axesConfig);\n  }\n\n  protected addGeometry() {\n    const props = this.options;\n    /** 配置面积 */\n    if (props.area.visible) {\n      const area = getGeom('area', 'main', {\n        plot: this,\n      });\n      this.setConfig('geometry', area);\n      this.area = area;\n    }\n    /** 配置线 */\n    if (props.line && props.line.visible) {\n      const line = getGeom('line', 'main', {\n        plot: this,\n      });\n      this.setConfig('geometry', line);\n      this.line = line;\n    }\n    /** 配置点 */\n    if (props.point && props.point.visible) {\n      const point = getGeom('point', 'guide', {\n        plot: this,\n      });\n      this.setConfig('geometry', point);\n      this.point = point;\n    }\n    if (props.label) {\n      this.label();\n    }\n    if (props.tooltip && (props.tooltip.fields || props.tooltip.formatter)) {\n      this.geometryTooltip();\n    }\n  }\n\n  protected geometryTooltip() {\n    const geomConfig = this.line ? this.line : this.area;\n    geomConfig.tooltip = {};\n    const tooltipOptions: any = this.options.tooltip;\n    if (tooltipOptions.fields) {\n      geomConfig.tooltip.fields = tooltipOptions.fields;\n    }\n    if (tooltipOptions.formatter) {\n      geomConfig.tooltip.callback = tooltipOptions.formatter;\n      if (!tooltipOptions.fields) {\n        geomConfig.tooltip.fields = [this.options.angleField, this.options.radiusField];\n      }\n      if (this.options.seriesField) {\n        geomConfig.tooltip.fields.push(this.options.seriesField);\n      }\n    }\n  }\n\n  protected label() {\n    const props = this.options;\n\n    if (props.label.visible === false) {\n      if (this.point) {\n        this.point.label = false;\n      }\n      if (this.line) {\n        this.line.label = false;\n      }\n      if (this.area) {\n        this.area.label = false;\n      }\n      return;\n    }\n\n    // @Todo 雷达图标签布局算法后续补充\n    const label = getComponent('label', {\n      fields: [props.radiusField],\n      cfg: {\n        type: 'polar',\n        autoRotate: false,\n      },\n      plot: this,\n      ...props.label,\n    });\n\n    if (this.point) {\n      this.point.label = label;\n    } else if (this.line) {\n      this.line.label = label;\n    } else if (this.area) {\n      this.area.label = label;\n    }\n  }\n\n  protected annotation() {\n    return;\n  }\n\n  protected animation() {\n    super.animation();\n    const props = this.options;\n    if (props.animation === false) {\n      // 关闭动画\n      if (this.area) this.area.animate = false;\n      if (this.line) this.line.animate = false;\n      if (this.point) this.point.animate = false;\n    }\n  }\n\n  protected parseEvents() {\n    super.parseEvents(EventParser);\n  }\n}\n\nregisterPlotType('radar', RadarLayer);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}