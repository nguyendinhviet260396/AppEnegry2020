{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { debounce, each, isString } from '@antv/util';\nimport { GROUP_Z_INDEX } from '../constant';\nimport { getEngine } from '../engine';\nimport { createDom, getChartSize, removeDom, modifyCSS } from '../util/dom';\nimport View from './view';\n/**\n * Chart 类，是使用 G2 进行绘图的入口。\n */\n\nvar Chart =\n/** @class */\nfunction (_super) {\n  __extends(Chart, _super); // @ts-ignore\n\n\n  function Chart(props) {\n    var _this = this;\n\n    var container = props.container,\n        width = props.width,\n        height = props.height,\n        _a = props.autoFit,\n        autoFit = _a === void 0 ? false : _a,\n        padding = props.padding,\n        appendPadding = props.appendPadding,\n        _b = props.renderer,\n        renderer = _b === void 0 ? 'canvas' : _b,\n        pixelRatio = props.pixelRatio,\n        _c = props.localRefresh,\n        localRefresh = _c === void 0 ? true : _c,\n        _d = props.visible,\n        visible = _d === void 0 ? true : _d,\n        _e = props.defaultInteractions,\n        defaultInteractions = _e === void 0 ? ['tooltip', 'legend-filter', 'legend-active', 'continuous-filter', 'ellipsis-text'] : _e,\n        options = props.options,\n        limitInPlot = props.limitInPlot,\n        theme = props.theme;\n    var ele = isString(container) ? document.getElementById(container) : container; // 生成内部正式绘制的 div 元素\n\n    var wrapperElement = createDom('<div style=\"position:relative;\"></div>');\n    ele.appendChild(wrapperElement); // if autoFit, use the container size, to avoid the graph render twice.\n\n    var size = getChartSize(ele, autoFit, width, height);\n    var G = getEngine(renderer);\n    var canvas = new G.Canvas(__assign({\n      container: wrapperElement,\n      pixelRatio: pixelRatio,\n      localRefresh: localRefresh\n    }, size)); // 调用 view 的创建\n\n    _this = _super.call(this, {\n      parent: null,\n      canvas: canvas,\n      // create 3 group layers for views.\n      backgroundGroup: canvas.addGroup({\n        zIndex: GROUP_Z_INDEX.BG\n      }),\n      middleGroup: canvas.addGroup({\n        zIndex: GROUP_Z_INDEX.MID\n      }),\n      foregroundGroup: canvas.addGroup({\n        zIndex: GROUP_Z_INDEX.FORE\n      }),\n      padding: padding,\n      appendPadding: appendPadding,\n      visible: visible,\n      options: options,\n      limitInPlot: limitInPlot,\n      theme: theme\n    }) || this;\n    /**\n     * when container size changed, change chart size props, and re-render.\n     */\n\n    _this.onResize = debounce(function () {\n      _this.forceFit();\n    }, 300);\n    _this.ele = ele;\n    _this.canvas = canvas;\n    _this.width = size.width;\n    _this.height = size.height;\n    _this.autoFit = autoFit;\n    _this.localRefresh = localRefresh;\n    _this.renderer = renderer;\n    _this.wrapperElement = wrapperElement; // 自适应大小\n\n    _this.updateCanvasStyle();\n\n    _this.bindAutoFit();\n\n    _this.initDefaultInteractions(defaultInteractions);\n\n    return _this;\n  }\n\n  Chart.prototype.initDefaultInteractions = function (interactions) {\n    var _this = this;\n\n    each(interactions, function (interaction) {\n      _this.interaction(interaction);\n    });\n  };\n  /**\n   * 改变图表大小，同时重新渲染。\n   * @param width 图表宽度\n   * @param height 图表高度\n   * @returns\n   */\n\n\n  Chart.prototype.changeSize = function (width, height) {\n    // 如果宽高一致，那么 changeSize 不执行任何操作\n    if (this.width === width && this.height === height) {\n      return this;\n    }\n\n    this.width = width;\n    this.height = height;\n    this.canvas.changeSize(width, height); // 重新渲染\n\n    this.render(true);\n    return this;\n  };\n  /**\n   * 销毁图表，同时解绑事件，销毁创建的 G.Canvas 实例。\n   * @returns void\n   */\n\n\n  Chart.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n\n    this.unbindAutoFit();\n    this.canvas.destroy();\n    removeDom(this.wrapperElement);\n    this.wrapperElement = null;\n  };\n  /**\n   * 显示或隐藏图表\n   * @param visible 是否可见，true 表示显示，false 表示隐藏\n   * @returns\n   */\n\n\n  Chart.prototype.changeVisible = function (visible) {\n    _super.prototype.changeVisible.call(this, visible); // 需要更新 visible 变量\n\n\n    this.wrapperElement.style.display = visible ? '' : 'none';\n    return this;\n  };\n  /**\n   * 自动根据容器大小 resize 画布\n   */\n\n\n  Chart.prototype.forceFit = function () {\n    // skip if already destroyed\n    if (!this.destroyed) {\n      // 注意第二参数用 true，意思是即时 autoFit = false，forceFit() 调用之后一样是适配容器\n      var _a = getChartSize(this.ele, true, this.width, this.height),\n          width = _a.width,\n          height = _a.height;\n\n      this.changeSize(width, height);\n    }\n  };\n\n  Chart.prototype.updateCanvasStyle = function () {\n    modifyCSS(this.canvas.get('el'), {\n      display: 'inline-block',\n      verticalAlign: 'middle'\n    });\n  };\n\n  Chart.prototype.bindAutoFit = function () {\n    if (this.autoFit) {\n      window.addEventListener('resize', this.onResize);\n    }\n  };\n\n  Chart.prototype.unbindAutoFit = function () {\n    if (this.autoFit) {\n      window.removeEventListener('resize', this.onResize);\n    }\n  };\n\n  return Chart;\n}(View);\n\nexport default Chart;","map":{"version":3,"sources":["../../src/chart/chart.ts"],"names":[],"mappings":"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","sourcesContent":["import { debounce, each, isString, get } from '@antv/util';\nimport { ChartCfg } from '../interface';\nimport { GROUP_Z_INDEX } from '../constant';\nimport { getEngine } from '../engine';\nimport { createDom, getChartSize, removeDom, modifyCSS } from '../util/dom';\nimport View from './view';\n\n/**\n * Chart 类，是使用 G2 进行绘图的入口。\n */\nexport default class Chart extends View {\n  /** Chart 的 DOM 容器 */\n  public ele: HTMLElement;\n\n  /** 图表宽度 */\n  public width: number;\n  /** 图表高度 */\n  public height: number;\n  /** 是否开启局部刷新 */\n  public localRefresh: boolean;\n  /** 是否自适应 DOM 容器宽高，默认为 false，需要用户手动指定宽高 */\n  public autoFit: boolean;\n  /** 图表渲染引擎 */\n  public renderer: 'canvas' | 'svg';\n\n  private wrapperElement: HTMLElement;\n\n  // @ts-ignore\n  constructor(props: ChartCfg) {\n    const {\n      container,\n      width,\n      height,\n      autoFit = false,\n      padding,\n      appendPadding,\n      renderer = 'canvas',\n      pixelRatio,\n      localRefresh = true,\n      visible = true,\n      defaultInteractions = ['tooltip', 'legend-filter', 'legend-active', 'continuous-filter', 'ellipsis-text'],\n      options,\n      limitInPlot,\n      theme,\n    } = props;\n\n    const ele: HTMLElement = isString(container) ? document.getElementById(container) : container;\n\n    // 生成内部正式绘制的 div 元素\n    const wrapperElement = createDom('<div style=\"position:relative;\"></div>');\n    ele.appendChild(wrapperElement);\n\n    // if autoFit, use the container size, to avoid the graph render twice.\n    const size = getChartSize(ele, autoFit, width, height);\n\n    const G = getEngine(renderer);\n\n    const canvas = new G.Canvas({\n      container: wrapperElement,\n      pixelRatio,\n      localRefresh,\n      ...size,\n    });\n\n    // 调用 view 的创建\n    super({\n      parent: null,\n      canvas,\n      // create 3 group layers for views.\n      backgroundGroup: canvas.addGroup({ zIndex: GROUP_Z_INDEX.BG }),\n      middleGroup: canvas.addGroup({ zIndex: GROUP_Z_INDEX.MID }),\n      foregroundGroup: canvas.addGroup({ zIndex: GROUP_Z_INDEX.FORE }),\n      padding,\n      appendPadding,\n      visible,\n      options,\n      limitInPlot,\n      theme,\n    });\n\n    this.ele = ele;\n    this.canvas = canvas;\n    this.width = size.width;\n    this.height = size.height;\n    this.autoFit = autoFit;\n    this.localRefresh = localRefresh;\n    this.renderer = renderer;\n    this.wrapperElement = wrapperElement;\n\n    // 自适应大小\n    this.updateCanvasStyle();\n    this.bindAutoFit();\n    this.initDefaultInteractions(defaultInteractions);\n  }\n\n  private initDefaultInteractions(interactions) {\n    each(interactions, (interaction) => {\n      this.interaction(interaction);\n    });\n  }\n\n  /**\n   * 改变图表大小，同时重新渲染。\n   * @param width 图表宽度\n   * @param height 图表高度\n   * @returns\n   */\n  public changeSize(width: number, height: number) {\n    // 如果宽高一致，那么 changeSize 不执行任何操作\n    if (this.width === width && this.height === height) {\n      return this;\n    }\n\n    this.width = width;\n    this.height = height;\n    this.canvas.changeSize(width, height);\n\n    // 重新渲染\n    this.render(true);\n\n    return this;\n  }\n\n  /**\n   * 销毁图表，同时解绑事件，销毁创建的 G.Canvas 实例。\n   * @returns void\n   */\n  public destroy() {\n    super.destroy();\n\n    this.unbindAutoFit();\n    this.canvas.destroy();\n\n    removeDom(this.wrapperElement);\n    this.wrapperElement = null;\n  }\n\n  /**\n   * 显示或隐藏图表\n   * @param visible 是否可见，true 表示显示，false 表示隐藏\n   * @returns\n   */\n  public changeVisible(visible: boolean) {\n    super.changeVisible(visible); // 需要更新 visible 变量\n    this.wrapperElement.style.display = visible ? '' : 'none';\n\n    return this;\n  }\n\n  /**\n   * 自动根据容器大小 resize 画布\n   */\n  public forceFit() {\n    // skip if already destroyed\n    if (!this.destroyed) {\n      // 注意第二参数用 true，意思是即时 autoFit = false，forceFit() 调用之后一样是适配容器\n      const { width, height } = getChartSize(this.ele, true, this.width, this.height);\n      this.changeSize(width, height);\n    }\n  }\n\n  private updateCanvasStyle() {\n    modifyCSS(this.canvas.get('el'), {\n      display: 'inline-block',\n      verticalAlign: 'middle',\n    });\n  }\n\n  private bindAutoFit() {\n    if (this.autoFit) {\n      window.addEventListener('resize', this.onResize);\n    }\n  }\n\n  private unbindAutoFit() {\n    if (this.autoFit) {\n      window.removeEventListener('resize', this.onResize);\n    }\n  }\n\n  /**\n   * when container size changed, change chart size props, and re-render.\n   */\n  private onResize = debounce(() => {\n    this.forceFit();\n  }, 300);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}