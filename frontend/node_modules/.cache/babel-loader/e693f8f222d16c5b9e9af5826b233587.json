{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { get } from '@antv/util';\nimport { registerShape } from '@antv/g2';\nimport { getStyle } from '@antv/g2/lib/geometry/shape/util/get-style';\n\nfunction lerp(a, b, factor) {\n  return (1 - factor) * a + factor * b;\n} // 根据矩形关键点绘制 path\n\n\nfunction _getRectPath(points, _a) {\n  var reverse = _a.reverse,\n      ratioUpper = _a.ratioUpper,\n      ratioLower = _a.ratioLower;\n  var path = [];\n  var firstPoint = points[0];\n  var originX = (points[1].x + points[2].x) / 2;\n  var factorTop = 1.2;\n  var factorBottom = 0.6;\n\n  if (reverse) {\n    var tmp = ratioLower;\n    ratioLower = ratioUpper;\n    ratioUpper = tmp;\n  }\n\n  var firstPointX = (firstPoint.x - originX) * lerp(factorBottom, factorTop, ratioLower) + originX;\n  path.push(['M', firstPointX, firstPoint.y]);\n\n  for (var i = 1, len = points.length; i < len; i++) {\n    var pointX = points[i].x;\n\n    switch (i) {\n      case 1:\n      case 2:\n        pointX = (pointX - originX) * lerp(factorBottom, factorTop, ratioUpper) + originX;\n        break;\n\n      case 3:\n        pointX = (pointX - originX) * lerp(factorBottom, factorTop, ratioLower) + originX;\n        break;\n    }\n\n    path.push(['L', pointX, points[i].y]);\n  }\n\n  path.push(['L', firstPointX, firstPoint.y]); // 需要闭合\n\n  path.push(['z']);\n  return path;\n}\n\nregisterShape('interval', 'funnel-dynamic-rect', {\n  draw: function (cfg, container) {\n    var style = getStyle(cfg, false, true);\n    var custom = get(cfg, 'data.__custom__');\n    var path = this.parsePath(_getRectPath(cfg.points, custom));\n    return container.addShape('path', {\n      attrs: __assign(__assign({}, style), {\n        path: path\n      })\n    });\n  },\n  getMarker: function (markerCfg) {\n    var color = markerCfg.color,\n        isInPolar = markerCfg.isInPolar;\n    return {\n      symbol: isInPolar ? 'circle' : 'square',\n      style: {\n        r: isInPolar ? 4.5 : 4,\n        fill: color\n      }\n    };\n  }\n});","map":{"version":3,"sources":["../../../../../src/plots/funnel/geometry/shape/funnel-dynamic-rect.ts"],"names":[],"mappings":"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","sourcesContent":["import { get } from '@antv/util';\nimport { IGroup } from '@antv/g-canvas';\nimport { registerShape } from '@antv/g2';\nimport { ShapeMarkerCfg, ShapeInfo } from '@antv/g2/lib/interface';\nimport { getStyle } from '@antv/g2/lib/geometry/shape/util/get-style';\n\nfunction lerp(a, b, factor) {\n  return (1 - factor) * a + factor * b;\n}\n\n// 根据矩形关键点绘制 path\nfunction _getRectPath(points, { reverse, ratioUpper, ratioLower }) {\n  const path = [];\n  const firstPoint = points[0];\n\n  const originX = (points[1].x + points[2].x) / 2;\n  const factorTop = 1.2;\n  const factorBottom = 0.6;\n\n  if (reverse) {\n    const tmp = ratioLower;\n    ratioLower = ratioUpper;\n    ratioUpper = tmp;\n  }\n\n  const firstPointX = (firstPoint.x - originX) * lerp(factorBottom, factorTop, ratioLower) + originX;\n  path.push(['M', firstPointX, firstPoint.y]);\n\n  for (let i = 1, len = points.length; i < len; i++) {\n    let pointX = points[i].x;\n    switch (i) {\n      case 1:\n      case 2:\n        pointX = (pointX - originX) * lerp(factorBottom, factorTop, ratioUpper) + originX;\n        break;\n\n      case 3:\n        pointX = (pointX - originX) * lerp(factorBottom, factorTop, ratioLower) + originX;\n        break;\n    }\n    path.push(['L', pointX, points[i].y]);\n  }\n  path.push(['L', firstPointX, firstPoint.y]); // 需要闭合\n  path.push(['z']);\n  return path;\n}\n\nregisterShape('interval', 'funnel-dynamic-rect', {\n  draw(cfg: ShapeInfo, container: IGroup) {\n    const style = getStyle(cfg, false, true);\n    const custom = get(cfg, 'data.__custom__');\n    const path = this.parsePath(_getRectPath(cfg.points, custom));\n\n    return container.addShape('path', {\n      attrs: {\n        ...style,\n        path,\n      },\n    });\n  },\n\n  getMarker(markerCfg: ShapeMarkerCfg) {\n    const { color, isInPolar } = markerCfg;\n    return {\n      symbol: isInPolar ? 'circle' : 'square',\n      style: {\n        r: isInPolar ? 4.5 : 4,\n        fill: color,\n      },\n    };\n  },\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}