{"ast":null,"code":"import { flatten, groupBy, map } from '@antv/util';\n/**\n * 按照scale字段values中的start和end信息从全部数据中取出对应的部分\n *\n * @param field scale field\n * @param values scale values\n * @param data original data\n * @param range range start & end\n */\n\nexport var getDataByScaleRange = function (field, values, data, _a, vertical) {\n  var start = _a[0],\n      end = _a[1];\n\n  if (vertical === void 0) {\n    vertical = false;\n  }\n\n  var groupedData = groupBy(data, field);\n  var newValues = vertical ? values.slice(values.length - end, values.length - start) : values.slice(start, end);\n  return flatten(map(newValues, function (value) {\n    return groupedData[value] || [];\n  }));\n};","map":{"version":3,"sources":["../../../src/interaction/helper/data-range.ts"],"names":[],"mappings":"AAAA,SAAS,OAAT,EAAkB,OAAlB,EAA2B,GAA3B,QAAsC,YAAtC;AAEA;;;;;;;;;AAQA,OAAO,IAAM,mBAAmB,GAAG,UACjC,KADiC,EAEjC,MAFiC,EAGjC,IAHiC,EAIjC,EAJiC,EAKjC,QALiC,EAKR;MADxB,KAAK,GAAA,EAAA,CAAA,CAAA,C;MAAE,GAAG,GAAA,EAAA,CAAA,CAAA,C;;AACX,MAAA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,QAAA,GAAA,KAAA;AAAyB;;AAEzB,MAAM,WAAW,GAAG,OAAO,CAAC,IAAD,EAAO,KAAP,CAA3B;AACA,MAAM,SAAS,GAAG,QAAQ,GAAG,MAAM,CAAC,KAAP,CAAa,MAAM,CAAC,MAAP,GAAgB,GAA7B,EAAkC,MAAM,CAAC,MAAP,GAAgB,KAAlD,CAAH,GAA8D,MAAM,CAAC,KAAP,CAAa,KAAb,EAAoB,GAApB,CAAxF;AAEA,SAAO,OAAO,CAAC,GAAG,CAAC,SAAD,EAAY,UAAC,KAAD,EAAc;AAAK,WAAA,WAAW,CAAC,KAAD,CAAX,IAAA,EAAA;AAAwB,GAAvD,CAAJ,CAAd;AACD,CAXM","sourcesContent":["import { flatten, groupBy, map } from '@antv/util';\n\n/**\n * 按照scale字段values中的start和end信息从全部数据中取出对应的部分\n *\n * @param field scale field\n * @param values scale values\n * @param data original data\n * @param range range start & end\n */\nexport const getDataByScaleRange = (\n  field: string,\n  values: string[],\n  data: object[],\n  [start, end]: [number, number],\n  vertical: boolean = false\n): object[] => {\n  const groupedData = groupBy(data, field);\n  const newValues = vertical ? values.slice(values.length - end, values.length - start) : values.slice(start, end);\n\n  return flatten(map(newValues, (value: string) => groupedData[value] || []));\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}