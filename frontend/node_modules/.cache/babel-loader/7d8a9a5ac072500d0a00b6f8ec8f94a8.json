{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { deepMix, has, each } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport ViewLayer from '../../base/view-layer';\nimport { getGeom } from '../../geoms/factory';\nimport './component/label/area-point';\nimport './component/label/area-point-auto';\nimport { extractScale } from '../../util/scale';\nimport responsiveMethods from './apply-responsive';\nimport * as EventParser from './event';\nimport './theme';\nimport { getGeometryByType } from '../../util/view';\nvar GEOM_MAP = {\n  area: 'area',\n  line: 'line',\n  point: 'point'\n};\n\nvar AreaLayer =\n/** @class */\nfunction (_super) {\n  __extends(AreaLayer, _super);\n\n  function AreaLayer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'area';\n    return _this;\n  }\n\n  AreaLayer.getDefaultOptions = function () {\n    return deepMix({}, _super.getDefaultOptions.call(this), {\n      smooth: false,\n      areaStyle: {\n        opacity: 0.25\n      },\n      line: {\n        visible: true,\n        size: 2,\n        style: {\n          opacity: 1,\n          lineJoin: 'round',\n          lineCap: 'round'\n        }\n      },\n      point: {\n        visible: false,\n        size: 4,\n        shape: 'point'\n      },\n      label: {\n        visible: false,\n        type: 'point'\n      },\n      legend: {\n        visible: true,\n        position: 'top-left',\n        wordSpacing: 4\n      },\n      tooltip: {\n        visible: true,\n        shared: true,\n        showCrosshairs: true,\n        crosshairs: {\n          type: 'x'\n        },\n        offset: 20\n      }\n    });\n  };\n\n  AreaLayer.prototype.beforeInit = function () {\n    _super.prototype.beforeInit.call(this);\n    /** 响应式图形 */\n\n\n    if (this.options.responsive && this.options.padding !== 'auto') {\n      this.applyResponsive('preRender');\n    }\n  };\n\n  AreaLayer.prototype.afterRender = function () {\n    this.renderLabel();\n    /** 响应式 */\n\n    if (this.options.responsive && this.options.padding !== 'auto') {\n      this.applyResponsive('afterRender');\n    }\n\n    _super.prototype.afterRender.call(this);\n  };\n\n  AreaLayer.prototype.geometryParser = function (dim, type) {\n    return GEOM_MAP[type];\n  };\n\n  AreaLayer.prototype.scale = function () {\n    var props = this.options;\n    var scales = {};\n    /** 配置x-scale */\n\n    scales[props.xField] = {\n      type: 'cat'\n    };\n\n    if (has(props, 'xAxis')) {\n      extractScale(scales[props.xField], props.xAxis);\n    }\n    /** 配置y-scale */\n\n\n    scales[props.yField] = {};\n\n    if (has(props, 'yAxis')) {\n      extractScale(scales[props.yField], props.yAxis);\n    }\n\n    this.setConfig('scales', scales);\n\n    _super.prototype.scale.call(this);\n  };\n\n  AreaLayer.prototype.coord = function () {\n    return null;\n  };\n\n  AreaLayer.prototype.addGeometry = function () {\n    var props = this.options;\n    var area = getGeom('area', 'main', {\n      plot: this\n    });\n    this.area = area;\n\n    if (props.label) {\n      this.label();\n    }\n\n    if (props.tooltip && (props.tooltip.fields || props.tooltip.formatter)) {\n      this.geometryTooltip();\n    }\n\n    this.adjustArea(area);\n    this.setConfig('geometry', area);\n    this.addLine();\n    this.addPoint();\n  }; //eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  AreaLayer.prototype.adjustArea = function (area) {\n    return;\n  }; //eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  AreaLayer.prototype.adjustLine = function (line) {\n    return;\n  }; //eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  AreaLayer.prototype.adjustPoint = function (point) {\n    return;\n  };\n\n  AreaLayer.prototype.addLine = function () {\n    var props = this.options;\n    var lineConfig = deepMix({}, props.line);\n\n    if (lineConfig.visible) {\n      var line = getGeom('line', 'guide', {\n        type: 'line',\n        plot: this,\n        line: lineConfig\n      });\n      this.adjustLine(line);\n      this.setConfig('geometry', line);\n      this.line = line;\n    }\n  };\n\n  AreaLayer.prototype.addPoint = function () {\n    var props = this.options;\n    var pointConfig = deepMix({}, props.point);\n\n    if (pointConfig.visible) {\n      var point = getGeom('point', 'guide', {\n        plot: this\n      });\n      this.adjustPoint(point);\n      this.setConfig('geometry', point);\n      this.point = point;\n    }\n  };\n\n  AreaLayer.prototype.renderLabel = function () {\n    var scales = this.config.scales;\n    var _a = this.options,\n        label = _a.label,\n        yField = _a.yField;\n    var scale = scales[yField];\n\n    if (label.visible) {\n      var geometry = getGeometryByType(this.view, 'area');\n      this.doRenderLabel(geometry, __assign({\n        type: 'area-point',\n        formatter: scale.formatter && function (value) {\n          return scale.formatter(value);\n        }\n      }, this.options.label));\n    }\n  };\n\n  AreaLayer.prototype.animation = function () {\n    _super.prototype.animation.call(this);\n\n    var props = this.options;\n\n    if (props.animation === false) {\n      // 关闭动画\n      this.area.animate = false;\n      if (this.line) this.line.animate = false;\n      if (this.point) this.point.animate = false;\n    }\n  };\n\n  AreaLayer.prototype.label = function () {\n    return;\n  };\n\n  AreaLayer.prototype.geometryTooltip = function () {\n    this.area.tooltip = {};\n    var tooltipOptions = this.options.tooltip;\n\n    if (tooltipOptions.fields) {\n      this.area.tooltip.fields = tooltipOptions.fields;\n    }\n\n    if (tooltipOptions.formatter) {\n      this.area.tooltip.callback = tooltipOptions.formatter;\n\n      if (!tooltipOptions.fields) {\n        this.area.tooltip.fields = [this.options.xField, this.options.yField];\n\n        if (this.options.seriesField) {\n          this.area.tooltip.fields.push(this.options.seriesField);\n        }\n      }\n    }\n  };\n\n  AreaLayer.prototype.parseEvents = function () {\n    _super.prototype.parseEvents.call(this, EventParser);\n  };\n\n  AreaLayer.prototype.applyResponsive = function (stage) {\n    var _this = this;\n\n    var methods = responsiveMethods[stage];\n    each(methods, function (r) {\n      var responsive = r;\n      responsive.method(_this);\n    });\n  };\n\n  return AreaLayer;\n}(ViewLayer);\n\nexport default AreaLayer;\nregisterPlotType('area', AreaLayer);","map":{"version":3,"sources":["../../../src/plots/area/layer.ts"],"names":[],"mappings":"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","sourcesContent":["import { deepMix, has, each } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport { LayerConfig } from '../../base/layer';\nimport ViewLayer from '../../base/view-layer';\nimport { getGeom } from '../../geoms/factory';\nimport { ElementOption } from '../../interface/config';\nimport './component/label/area-point';\nimport './component/label/area-point-auto';\nimport { extractScale } from '../../util/scale';\nimport responsiveMethods from './apply-responsive';\nimport * as EventParser from './event';\nimport './theme';\nimport { getGeometryByType } from '../../util/view';\nimport { AreaViewConfig } from './interface';\nimport { Maybe } from '../../interface/types';\n\nconst GEOM_MAP = {\n  area: 'area',\n  line: 'line',\n  point: 'point',\n};\n\nexport interface AreaLayerConfig extends AreaViewConfig, LayerConfig {}\n\nexport default class AreaLayer<T extends AreaLayerConfig = AreaLayerConfig> extends ViewLayer<T> {\n  public static getDefaultOptions(): any {\n    return deepMix({}, super.getDefaultOptions(), {\n      smooth: false,\n      areaStyle: {\n        opacity: 0.25,\n      },\n      line: {\n        visible: true,\n        size: 2,\n        style: {\n          opacity: 1,\n          lineJoin: 'round',\n          lineCap: 'round',\n        },\n      },\n      point: {\n        visible: false,\n        size: 4,\n        shape: 'point',\n      },\n      label: {\n        visible: false,\n        type: 'point',\n      },\n      legend: {\n        visible: true,\n        position: 'top-left',\n        wordSpacing: 4,\n      },\n      tooltip: {\n        visible: true,\n        shared: true,\n        showCrosshairs: true,\n        crosshairs: {\n          type: 'x',\n        },\n        offset: 20,\n      },\n    });\n  }\n\n  public line: any;\n  public point: any;\n  public area: any;\n  public type: string = 'area';\n\n  public beforeInit() {\n    super.beforeInit();\n    /** 响应式图形 */\n    if (this.options.responsive && this.options.padding !== 'auto') {\n      this.applyResponsive('preRender');\n    }\n  }\n\n  public afterRender() {\n    this.renderLabel();\n    /** 响应式 */\n    if (this.options.responsive && this.options.padding !== 'auto') {\n      this.applyResponsive('afterRender');\n    }\n    super.afterRender();\n  }\n\n  protected geometryParser(dim, type) {\n    return GEOM_MAP[type];\n  }\n\n  protected scale() {\n    const props = this.options;\n    const scales = {};\n    /** 配置x-scale */\n    scales[props.xField] = {\n      type: 'cat',\n    };\n    if (has(props, 'xAxis')) {\n      extractScale(scales[props.xField], props.xAxis);\n    }\n    /** 配置y-scale */\n    scales[props.yField] = {};\n    if (has(props, 'yAxis')) {\n      extractScale(scales[props.yField], props.yAxis);\n    }\n    this.setConfig('scales', scales);\n    super.scale();\n  }\n\n  protected coord() {\n    return null;\n  }\n\n  protected addGeometry() {\n    const props: any = this.options;\n    const area = getGeom('area', 'main', {\n      plot: this,\n    });\n    this.area = area;\n\n    if (props.label) {\n      this.label();\n    }\n\n    if (props.tooltip && (props.tooltip.fields || props.tooltip.formatter)) {\n      this.geometryTooltip();\n    }\n\n    this.adjustArea(area);\n    this.setConfig('geometry', area);\n\n    this.addLine();\n\n    this.addPoint();\n  }\n\n  //eslint-disable-next-line @typescript-eslint/no-unused-vars\n  protected adjustArea(area: ElementOption) {\n    return;\n  }\n\n  //eslint-disable-next-line @typescript-eslint/no-unused-vars\n  protected adjustLine(line?: ElementOption) {\n    return;\n  }\n\n  //eslint-disable-next-line @typescript-eslint/no-unused-vars\n  protected adjustPoint(point?: ElementOption) {\n    return;\n  }\n\n  protected addLine() {\n    const props: any = this.options;\n    const lineConfig = deepMix({}, props.line);\n    if (lineConfig.visible) {\n      const line = getGeom('line', 'guide', {\n        type: 'line',\n        plot: this,\n        line: lineConfig,\n      });\n      this.adjustLine(line);\n      this.setConfig('geometry', line);\n      this.line = line;\n    }\n  }\n\n  protected addPoint() {\n    const props = this.options;\n    const pointConfig = deepMix({}, props.point);\n    if (pointConfig.visible) {\n      const point = getGeom('point', 'guide', {\n        plot: this,\n      });\n      this.adjustPoint(point);\n      this.setConfig('geometry', point);\n      this.point = point;\n    }\n  }\n\n  protected renderLabel() {\n    const { scales } = this.config;\n    const { label, yField } = this.options;\n    const scale = scales[yField];\n    if (label.visible) {\n      const geometry = getGeometryByType(this.view, 'area');\n      this.doRenderLabel(geometry, {\n        type: 'area-point',\n        formatter: scale.formatter && ((value: Maybe<string | number>) => scale.formatter(value)),\n        ...this.options.label,\n      });\n    }\n  }\n\n  protected animation() {\n    super.animation();\n    const props = this.options;\n    if (props.animation === false) {\n      // 关闭动画\n      this.area.animate = false;\n      if (this.line) this.line.animate = false;\n      if (this.point) this.point.animate = false;\n    }\n  }\n\n  protected label() {\n    return;\n  }\n\n  protected geometryTooltip() {\n    this.area.tooltip = {};\n    const tooltipOptions: any = this.options.tooltip;\n    if (tooltipOptions.fields) {\n      this.area.tooltip.fields = tooltipOptions.fields;\n    }\n    if (tooltipOptions.formatter) {\n      this.area.tooltip.callback = tooltipOptions.formatter;\n      if (!tooltipOptions.fields) {\n        this.area.tooltip.fields = [this.options.xField, this.options.yField];\n        if (this.options.seriesField) {\n          this.area.tooltip.fields.push(this.options.seriesField);\n        }\n      }\n    }\n  }\n\n  protected parseEvents() {\n    super.parseEvents(EventParser);\n  }\n\n  private applyResponsive(stage) {\n    const methods = responsiveMethods[stage];\n    each(methods, (r) => {\n      const responsive = r as any;\n      responsive.method(this);\n    });\n  }\n}\n\nregisterPlotType('area', AreaLayer);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}