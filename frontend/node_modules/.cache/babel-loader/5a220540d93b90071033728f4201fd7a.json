{"ast":null,"code":"/**\n * @file 基于 G 的播放轴组件\n * @author blackganglion\n */\nimport { __extends } from \"tslib\";\nimport { deepMix, findIndex, get } from '@antv/util';\nimport Button from './button';\nimport BaseComponent from '../base';\nvar TIMELINE_START = 'timelinestart';\nvar TIMELINE_CHANGE = 'timelinechange';\nvar TIMELINE_END = 'timelineend';\nvar TIMELINE_UPDATE = 'timelineupdate';\nvar PADDING_LEFT = 20;\nvar PADDING_RIGHT = 20;\n/**\n * 参考示例\n * https://www.gapminder.org/tools/#$state$time$value=1870&delay:100;;&chart-type=bubbles\n */\n\nvar TimeLine =\n/** @class */\nfunction (_super) {\n  __extends(TimeLine, _super);\n\n  function TimeLine(cfg) {\n    var _this = _super.call(this, deepMix({}, {\n      speed: 1,\n      loop: false\n    }, cfg)) || this;\n\n    _this.onTimeSelectMouseMove = function (e) {\n      e.stopPropagation();\n      e.preventDefault();\n      var x = get(e, 'touches.0.pageX', e.pageX);\n      var offsetX = x - _this.prevX;\n\n      _this.setTimeSelectX(offsetX);\n\n      _this.prevX = x;\n    };\n\n    _this.onTimeSelectMouseUp = function () {\n      _this.syncCurrnentTick();\n\n      _this.emit(TIMELINE_END, null); // 取消事件\n\n\n      var containerDOM = _this.getCanvas().get('container');\n\n      if (containerDOM) {\n        containerDOM.removeEventListener('mousemove', _this.onTimeSelectMouseMove);\n        containerDOM.removeEventListener('mouseup', _this.onTimeSelectMouseUp); // 防止滑动到 canvas 外部之后，状态丢失\n\n        containerDOM.removeEventListener('mouseleave', _this.onTimeSelectMouseUp); // 移动端事件\n\n        containerDOM.removeEventListener('touchmove', _this.onTimeSelectMouseMove);\n        containerDOM.removeEventListener('touchend', _this.onTimeSelectMouseUp);\n        containerDOM.removeEventListener('touchcancel', _this.onTimeSelectMouseUp);\n      }\n    };\n\n    _this.onTimeSelectMouseDown = function (e) {\n      // 取出原生事件\n      var event = e.originalEvent;\n      event.stopPropagation();\n      event.preventDefault();\n\n      if (_this.isPlay === false) {\n        _this.emit(TIMELINE_START, null);\n      } else {\n        // 取消播放状态\n        _this.isPlay = false; // 拖动过程中的播放暂停不需要调整 tick 位置，防止偏移\n\n        _this.changePlayStatus(false);\n      }\n\n      _this.prevX = get(event, 'touches.0.pageX', event.pageX); // 开始滑动的时候，绑定 move 和 up 事件\n\n      var containerDOM = _this.getCanvas().get('container');\n\n      containerDOM.addEventListener('mousemove', _this.onTimeSelectMouseMove);\n      containerDOM.addEventListener('mouseup', _this.onTimeSelectMouseUp);\n      containerDOM.addEventListener('mouseleave', _this.onTimeSelectMouseUp); // 移动端事件\n\n      containerDOM.addEventListener('touchmove', _this.onTimeSelectMouseMove);\n      containerDOM.addEventListener('touchend', _this.onTimeSelectMouseUp);\n      containerDOM.addEventListener('touchcancel', _this.onTimeSelectMouseUp);\n    };\n\n    return _this;\n  }\n\n  TimeLine.prototype.renderInner = function (group) {\n    var _a = this.config,\n        ticks = _a.ticks,\n        defaultCurrentTick = _a.defaultCurrentTick;\n\n    if (ticks && ticks.length) {\n      this.currentTick = this.config.ticks.includes(defaultCurrentTick) ? defaultCurrentTick : ticks[0];\n      this.renderPlayButton(group);\n      this.renderTimeLine(group);\n      this.renderTimeSelect(group, this.currentTick);\n      this.initEvent();\n    }\n  }; // 更新配置\n\n\n  TimeLine.prototype.update = function (cfg) {\n    _super.prototype.update.call(this, cfg); // 更新时需要触发一次，来过滤数据\n\n\n    this.emit(TIMELINE_UPDATE, this.currentTick);\n  };\n\n  TimeLine.prototype.destroy = function () {\n    _super.prototype.destroy.call(this);\n\n    this.timeLineButton.destroy();\n    this.timeLineButton.off();\n    this.timeSelect.off();\n\n    if (this.playHandler) {\n      window.cancelAnimationFrame(this.playHandler);\n    }\n  };\n\n  TimeLine.prototype.renderPlayButton = function (group) {\n    var _a = this.config,\n        height = _a.height,\n        x = _a.x,\n        y = _a.y;\n    var ratio = 0.8;\n    var r = height / 2 * ratio;\n\n    if (this.timeLineButton) {\n      this.timeLineButton.update({\n        x: x + r,\n        y: y + r + height * (1 - ratio) / 2,\n        r: r\n      });\n    } else {\n      this.timeLineButton = new Button({\n        container: group,\n        x: x + r,\n        y: y + r + height * (1 - ratio) / 2,\n        r: r,\n        isPlay: this.isPlay\n      });\n      this.timeLineButton.init();\n    }\n\n    this.timeLineButton.render();\n  };\n\n  TimeLine.prototype.getTimeLinePath = function () {\n    var _a = this.timeLine,\n        x = _a.x,\n        y = _a.y,\n        width = _a.width,\n        height = _a.height;\n    var r = height / 2;\n\n    if (width > 0) {\n      return \"M\" + x + \", \" + y + (\"A\" + r + \",\" + r + \" 90 0,0 \" + x + \",\" + (y + height)) + (\"L\" + (x + width) + \", \" + (y + height)) + (\"A\" + r + \",\" + r + \" 90 0,0 \" + (x + width) + \",\" + y) + (\"L\" + x + \", \" + y);\n    }\n\n    return [];\n  };\n\n  TimeLine.prototype.renderTimeLine = function (group) {\n    var _this = this;\n\n    var _a = this.config,\n        width = _a.width,\n        height = _a.height,\n        ticks = _a.ticks,\n        x = _a.x,\n        y = _a.y;\n\n    if (!this.timeLine) {\n      this.timeLine = {};\n    }\n    /** 默认高度是真实高度 15% */\n\n\n    this.timeLine.height = height * 0.15;\n    this.timeLine.x = x + height + PADDING_LEFT;\n    this.timeLine.y = y + (height / 2 - this.timeLine.height / 2);\n    this.timeLine.width = width - this.timeLine.x - PADDING_RIGHT;\n\n    if (this.timeLine && this.timeLine.shape) {\n      this.timeLine.shape.attr('path', this.getTimeLinePath());\n    } else {\n      this.timeLine.shape = group.addShape('path', {\n        attrs: {\n          path: this.getTimeLinePath(),\n          fill: '#607889',\n          opacity: 0.2\n        }\n      });\n    }\n\n    var interval = this.timeLine.width / (ticks.length - 1);\n    this.tickPosList = [];\n\n    if (this.timeLine.textList && this.timeLine.textList.length) {\n      this.timeLine.textList.forEach(function (text) {\n        text.destroy();\n      });\n    }\n\n    var lastX = -Infinity;\n    this.timeLine.textList = ticks.map(function (tick, index) {\n      _this.tickPosList.push(_this.timeLine.x + index * interval);\n\n      var text = group.addShape('text', {\n        attrs: {\n          x: _this.timeLine.x + index * interval,\n          y: _this.timeLine.y + _this.timeLine.height + 5,\n          text: tick,\n          textAlign: 'center',\n          textBaseline: 'top',\n          fill: '#607889',\n          opacity: 0.35\n        }\n      });\n      var bbox = text.getBBox(); // 抽样，标签与标签间距不小于 10\n\n      if (bbox.minX > lastX) {\n        text.show();\n        lastX = bbox.minX + bbox.width + 10;\n      } else {\n        text.hide();\n      }\n\n      return text;\n    });\n  };\n\n  TimeLine.prototype.renderTimeSelect = function (group, tickValue) {\n    var _a = this.config,\n        ticks = _a.ticks,\n        height = _a.height;\n    var interval = this.timeLine.width / (ticks.length - 1);\n    var index = findIndex(ticks, function (tick) {\n      return tick === tickValue;\n    });\n    var x = this.timeLine.x + index * interval;\n    var y = this.config.y + height / 2;\n    var r = height * 0.15;\n\n    if (this.timeSelect) {\n      this.timeSelect.attr('x', x);\n      this.timeSelect.attr('y', y);\n      this.timeSelect.attr('r', r);\n    } else {\n      this.timeSelect = group.addShape('circle', {\n        attrs: {\n          x: x,\n          y: y,\n          r: r,\n          fill: '#607889'\n        }\n      });\n    }\n\n    if (this.timeSelectText) {\n      this.timeSelectText.attr('x', x);\n      this.timeSelectText.attr('y', y - height * 0.15 - 14);\n      this.timeSelectText.attr('text', this.currentTick);\n    } else {\n      this.timeSelectText = group.addShape('text', {\n        attrs: {\n          x: x,\n          y: y - height * 0.15 - 14,\n          text: this.currentTick,\n          textAlign: 'center',\n          textBaseline: 'top',\n          fill: '#607889'\n        }\n      });\n    }\n  };\n  /** 输入当前圆点位置，输出离哪个 tick 的位置最近 */\n\n\n  TimeLine.prototype.adjustTickIndex = function (timeSelectX) {\n    for (var i = 0; i < this.tickPosList.length - 1; i++) {\n      if (this.tickPosList[i] <= timeSelectX && timeSelectX <= this.tickPosList[i + 1]) {\n        return Math.abs(this.tickPosList[i] - timeSelectX) < Math.abs(timeSelectX - this.tickPosList[i + 1]) ? i : i + 1;\n      }\n    }\n  };\n  /** 拖动或自动播放过程中，设置 TimeSelect 的位置 */\n\n\n  TimeLine.prototype.setTimeSelectX = function (offsetX) {\n    var timeSelectX = this.timeSelect.attr('x') + offsetX; // 防止左右溢出\n\n    if (timeSelectX < this.timeLine.x) {\n      timeSelectX = this.timeLine.x;\n    }\n\n    if (timeSelectX > this.timeLine.x + this.timeLine.width) {\n      timeSelectX = this.timeLine.x + this.timeLine.width; // 正在播放场景\n\n      if (this.isPlay) {\n        // 如果是循环\n        if (this.config.loop) {\n          // 当前滑动点已经处于最后一个 tick 上，才能重置回去，继续循环\n          if (this.timeSelect.attr('x') === this.timeLine.x + this.timeLine.width) {\n            timeSelectX = this.timeLine.x;\n          }\n        } else {\n          this.isPlay = false;\n          this.changePlayStatus();\n        }\n      }\n    }\n\n    this.timeSelect.attr('x', timeSelectX);\n    this.timeSelectText.attr('x', timeSelectX);\n    var index = this.adjustTickIndex(timeSelectX);\n\n    if (this.currentTick !== this.config.ticks[index]) {\n      this.currentTick = this.config.ticks[index];\n      this.timeSelectText.attr('text', this.currentTick);\n      this.emit(TIMELINE_CHANGE, this.currentTick);\n    }\n\n    this.getCanvas().draw();\n  };\n  /** 同步圆点到 currnentTick */\n\n\n  TimeLine.prototype.syncCurrnentTick = function () {\n    var _this = this;\n\n    var ticks = this.config.ticks;\n    var interval = this.timeLine.width / (ticks.length - 1);\n    var index = findIndex(ticks, function (tick) {\n      return tick === _this.currentTick;\n    });\n    var x = this.timeLine.x + index * interval;\n    this.timeSelect.attr('x', x);\n    this.timeSelectText.attr('x', x);\n    this.getCanvas().draw();\n  };\n\n  TimeLine.prototype.startPlay = function () {\n    var _this = this;\n\n    return window.requestAnimationFrame(function () {\n      var _a = _this.config,\n          speed = _a.speed,\n          ticks = _a.ticks;\n      var width = _this.timeLine.width;\n      var tickInterval = width / ticks.length;\n      var offsetX = tickInterval / (speed * 1000 / 60);\n\n      _this.setTimeSelectX(offsetX);\n\n      if (_this.isPlay) {\n        _this.playHandler = _this.startPlay();\n      }\n    });\n  };\n\n  TimeLine.prototype.changePlayStatus = function (isSync) {\n    if (isSync === void 0) {\n      isSync = true;\n    }\n\n    this.timeLineButton.update({\n      isPlay: this.isPlay\n    });\n\n    if (this.isPlay) {\n      // 开始播放\n      this.playHandler = this.startPlay();\n      this.emit(TIMELINE_START, null);\n    } else {\n      // 结束播放\n      if (this.playHandler) {\n        window.cancelAnimationFrame(this.playHandler);\n\n        if (isSync) {\n          this.syncCurrnentTick();\n          this.emit(TIMELINE_END, null);\n        }\n      }\n    }\n\n    this.getCanvas().draw();\n  };\n\n  TimeLine.prototype.initEvent = function () {\n    var _this = this;\n    /** 播放/暂停事件 */\n\n\n    this.timeLineButton.off('click');\n    this.timeLineButton.on('click', function () {\n      _this.isPlay = !_this.isPlay;\n\n      _this.changePlayStatus();\n    });\n    /** 播放轴上圆点滑动事件 */\n\n    this.timeSelect.off('mousedown');\n    this.timeSelect.on('mousedown', function (event) {\n      _this.onTimeSelectMouseDown(event);\n    });\n  };\n\n  return TimeLine;\n}(BaseComponent);\n\nexport default TimeLine;","map":{"version":3,"sources":["../../../src/components/timeline/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @file 基于 G 的播放轴组件\n * @author blackganglion\n */\n\nimport { IShape, Event, IGroup } from '@antv/g-base';\nimport { deepMix, findIndex, get } from '@antv/util';\nimport Button from './button';\nimport BaseComponent, { BaseComponentConfig } from '../base';\n\nconst TIMELINE_START = 'timelinestart';\nconst TIMELINE_CHANGE = 'timelinechange';\nconst TIMELINE_END = 'timelineend';\nconst TIMELINE_UPDATE = 'timelineupdate';\n\nconst PADDING_LEFT = 20;\nconst PADDING_RIGHT = 20;\n\n/** 播放轴配置项 */\ninterface TimeLineCfg extends BaseComponentConfig {\n  /** 播放轴位置数据 */\n  readonly x: number;\n  readonly y: number;\n  readonly width: number;\n  readonly height: number;\n  /** 刻度值 */\n  readonly ticks: string[];\n  /** 播放速度，1 个 tick 花费时间 */\n  readonly speed?: number;\n  /** 默认当前刻度值 */\n  readonly defaultCurrentTick?: string;\n  /** 是否循环播放 */\n  readonly loop?: boolean;\n}\n\n/**\n * 参考示例\n * https://www.gapminder.org/tools/#$state$time$value=1870&delay:100;;&chart-type=bubbles\n */\nexport default class TimeLine extends BaseComponent<TimeLineCfg> {\n  /** 是否处于播放状态 */\n  public isPlay: boolean;\n  /** 当前处于刻度值 */\n  private currentTick: string;\n  /** 刻度位置预处理 */\n  private tickPosList: number[];\n\n  /** 组件 */\n  private timeLineButton: Button;\n  private timeLine: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    shape: IShape;\n    textList: IShape[];\n  };\n  private timeSelect: IShape;\n  private timeSelectText: IShape;\n\n  /** 偏移量 */\n  private prevX: number;\n\n  /** 动画 id */\n  private playHandler: number;\n\n  constructor(cfg: TimeLineCfg) {\n    super(\n      deepMix(\n        {},\n        {\n          speed: 1,\n          loop: false,\n        },\n        cfg\n      )\n    );\n  }\n\n  protected renderInner(group: IGroup) {\n    const { ticks, defaultCurrentTick } = this.config;\n\n    if (ticks && ticks.length) {\n      this.currentTick = this.config.ticks.includes(defaultCurrentTick) ? defaultCurrentTick : ticks[0];\n      this.renderPlayButton(group);\n      this.renderTimeLine(group);\n      this.renderTimeSelect(group, this.currentTick);\n      this.initEvent();\n    }\n  }\n\n  // 更新配置\n  public update(cfg: Partial<TimeLineCfg>) {\n    super.update(cfg);\n    // 更新时需要触发一次，来过滤数据\n    this.emit(TIMELINE_UPDATE, this.currentTick);\n  }\n\n  public destroy() {\n    super.destroy();\n    this.timeLineButton.destroy();\n    this.timeLineButton.off();\n    this.timeSelect.off();\n    if (this.playHandler) {\n      window.cancelAnimationFrame(this.playHandler);\n    }\n  }\n\n  private renderPlayButton(group: IGroup) {\n    const { height, x, y } = this.config;\n    const ratio = 0.8;\n    const r = (height / 2) * ratio;\n    if (this.timeLineButton) {\n      this.timeLineButton.update({\n        x: x + r,\n        y: y + r + (height * (1 - ratio)) / 2,\n        r,\n      });\n    } else {\n      this.timeLineButton = new Button({\n        container: group,\n        x: x + r,\n        y: y + r + (height * (1 - ratio)) / 2,\n        r,\n        isPlay: this.isPlay,\n      });\n      this.timeLineButton.init();\n    }\n    this.timeLineButton.render();\n  }\n\n  private getTimeLinePath() {\n    const { x, y, width, height } = this.timeLine;\n    const r = height / 2;\n\n    if (width > 0) {\n      return (\n        `M${x}, ${y}` +\n        `A${r},${r} 90 0,0 ${x},${y + height}` +\n        `L${x + width}, ${y + height}` +\n        `A${r},${r} 90 0,0 ${x + width},${y}` +\n        `L${x}, ${y}`\n      );\n    }\n\n    return [];\n  }\n\n  private renderTimeLine(group: IGroup) {\n    const { width, height, ticks, x, y } = this.config;\n\n    if (!this.timeLine) {\n      this.timeLine = {} as any;\n    }\n\n    /** 默认高度是真实高度 15% */\n    this.timeLine.height = height * 0.15;\n    this.timeLine.x = x + height + PADDING_LEFT;\n    this.timeLine.y = y + (height / 2 - this.timeLine.height / 2);\n    this.timeLine.width = width - this.timeLine.x - PADDING_RIGHT;\n\n    if (this.timeLine && this.timeLine.shape) {\n      this.timeLine.shape.attr('path', this.getTimeLinePath());\n    } else {\n      this.timeLine.shape = group.addShape('path', {\n        attrs: {\n          path: this.getTimeLinePath(),\n          fill: '#607889',\n          opacity: 0.2,\n        },\n      });\n    }\n\n    const interval = this.timeLine.width / (ticks.length - 1);\n    this.tickPosList = [];\n    if (this.timeLine.textList && this.timeLine.textList.length) {\n      this.timeLine.textList.forEach((text) => {\n        text.destroy();\n      });\n    }\n    let lastX = -Infinity;\n    this.timeLine.textList = ticks.map((tick, index) => {\n      this.tickPosList.push(this.timeLine.x + index * interval);\n\n      const text = group.addShape('text', {\n        attrs: {\n          x: this.timeLine.x + index * interval,\n          y: this.timeLine.y + this.timeLine.height + 5,\n          text: tick,\n          textAlign: 'center',\n          textBaseline: 'top',\n          fill: '#607889',\n          opacity: 0.35,\n        },\n      });\n\n      const bbox = text.getBBox();\n\n      // 抽样，标签与标签间距不小于 10\n      if (bbox.minX > lastX) {\n        text.show();\n        lastX = bbox.minX + bbox.width + 10;\n      } else {\n        text.hide();\n      }\n\n      return text;\n    });\n  }\n\n  private renderTimeSelect(group: IGroup, tickValue: string) {\n    const { ticks, height } = this.config;\n    const interval = this.timeLine.width / (ticks.length - 1);\n    const index = findIndex(ticks, (tick) => tick === tickValue);\n    const x = this.timeLine.x + index * interval;\n    const y = this.config.y + height / 2;\n    const r = height * 0.15;\n\n    if (this.timeSelect) {\n      this.timeSelect.attr('x', x);\n      this.timeSelect.attr('y', y);\n      this.timeSelect.attr('r', r);\n    } else {\n      this.timeSelect = group.addShape('circle', {\n        attrs: {\n          x,\n          y,\n          r,\n          fill: '#607889',\n        },\n      });\n    }\n\n    if (this.timeSelectText) {\n      this.timeSelectText.attr('x', x);\n      this.timeSelectText.attr('y', y - height * 0.15 - 14);\n      this.timeSelectText.attr('text', this.currentTick);\n    } else {\n      this.timeSelectText = group.addShape('text', {\n        attrs: {\n          x,\n          y: y - height * 0.15 - 14,\n          text: this.currentTick,\n          textAlign: 'center',\n          textBaseline: 'top',\n          fill: '#607889',\n        },\n      });\n    }\n  }\n\n  /** 输入当前圆点位置，输出离哪个 tick 的位置最近 */\n  private adjustTickIndex(timeSelectX: number) {\n    for (let i = 0; i < this.tickPosList.length - 1; i++) {\n      if (this.tickPosList[i] <= timeSelectX && timeSelectX <= this.tickPosList[i + 1]) {\n        return Math.abs(this.tickPosList[i] - timeSelectX) < Math.abs(timeSelectX - this.tickPosList[i + 1])\n          ? i\n          : i + 1;\n      }\n    }\n  }\n\n  /** 拖动或自动播放过程中，设置 TimeSelect 的位置 */\n  private setTimeSelectX(offsetX: number) {\n    let timeSelectX = this.timeSelect.attr('x') + offsetX;\n    // 防止左右溢出\n    if (timeSelectX < this.timeLine.x) {\n      timeSelectX = this.timeLine.x;\n    }\n    if (timeSelectX > this.timeLine.x + this.timeLine.width) {\n      timeSelectX = this.timeLine.x + this.timeLine.width;\n      // 正在播放场景\n      if (this.isPlay) {\n        // 如果是循环\n        if (this.config.loop) {\n          // 当前滑动点已经处于最后一个 tick 上，才能重置回去，继续循环\n          if (this.timeSelect.attr('x') === this.timeLine.x + this.timeLine.width) {\n            timeSelectX = this.timeLine.x;\n          }\n        } else {\n          this.isPlay = false;\n          this.changePlayStatus();\n        }\n      }\n    }\n    this.timeSelect.attr('x', timeSelectX);\n    this.timeSelectText.attr('x', timeSelectX);\n\n    const index = this.adjustTickIndex(timeSelectX);\n    if (this.currentTick !== this.config.ticks[index]) {\n      this.currentTick = this.config.ticks[index];\n      this.timeSelectText.attr('text', this.currentTick);\n      this.emit(TIMELINE_CHANGE, this.currentTick);\n    }\n\n    this.getCanvas().draw();\n  }\n\n  /** 同步圆点到 currnentTick */\n  private syncCurrnentTick() {\n    const { ticks } = this.config;\n    const interval = this.timeLine.width / (ticks.length - 1);\n    const index = findIndex(ticks, (tick) => tick === this.currentTick);\n    const x = this.timeLine.x + index * interval;\n    this.timeSelect.attr('x', x);\n    this.timeSelectText.attr('x', x);\n    this.getCanvas().draw();\n  }\n\n  private onTimeSelectMouseMove = (e: MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n\n    const x = get(e, 'touches.0.pageX', e.pageX);\n    const offsetX = x - this.prevX;\n\n    this.setTimeSelectX(offsetX);\n\n    this.prevX = x;\n  };\n\n  private onTimeSelectMouseUp = () => {\n    this.syncCurrnentTick();\n\n    this.emit(TIMELINE_END, null);\n\n    // 取消事件\n    const containerDOM = this.getCanvas().get('container');\n    if (containerDOM) {\n      containerDOM.removeEventListener('mousemove', this.onTimeSelectMouseMove);\n      containerDOM.removeEventListener('mouseup', this.onTimeSelectMouseUp);\n      // 防止滑动到 canvas 外部之后，状态丢失\n      containerDOM.removeEventListener('mouseleave', this.onTimeSelectMouseUp);\n      // 移动端事件\n      containerDOM.removeEventListener('touchmove', this.onTimeSelectMouseMove);\n      containerDOM.removeEventListener('touchend', this.onTimeSelectMouseUp);\n      containerDOM.removeEventListener('touchcancel', this.onTimeSelectMouseUp);\n    }\n  };\n\n  private onTimeSelectMouseDown = (e: Event) => {\n    // 取出原生事件\n    const event = e.originalEvent as MouseEvent;\n\n    event.stopPropagation();\n    event.preventDefault();\n\n    if (this.isPlay === false) {\n      this.emit(TIMELINE_START, null);\n    } else {\n      // 取消播放状态\n      this.isPlay = false;\n      // 拖动过程中的播放暂停不需要调整 tick 位置，防止偏移\n      this.changePlayStatus(false);\n    }\n\n    this.prevX = get(event, 'touches.0.pageX', event.pageX);\n\n    // 开始滑动的时候，绑定 move 和 up 事件\n    const containerDOM = this.getCanvas().get('container');\n    containerDOM.addEventListener('mousemove', this.onTimeSelectMouseMove);\n    containerDOM.addEventListener('mouseup', this.onTimeSelectMouseUp);\n    containerDOM.addEventListener('mouseleave', this.onTimeSelectMouseUp);\n    // 移动端事件\n    containerDOM.addEventListener('touchmove', this.onTimeSelectMouseMove);\n    containerDOM.addEventListener('touchend', this.onTimeSelectMouseUp);\n    containerDOM.addEventListener('touchcancel', this.onTimeSelectMouseUp);\n  };\n\n  private startPlay() {\n    return window.requestAnimationFrame(() => {\n      const { speed, ticks } = this.config;\n      const { width } = this.timeLine;\n\n      const tickInterval = width / ticks.length;\n      const offsetX = tickInterval / ((speed * 1000) / 60);\n\n      this.setTimeSelectX(offsetX);\n\n      if (this.isPlay) {\n        this.playHandler = this.startPlay();\n      }\n    });\n  }\n\n  public changePlayStatus(isSync = true) {\n    this.timeLineButton.update({\n      isPlay: this.isPlay,\n    });\n    if (this.isPlay) {\n      // 开始播放\n      this.playHandler = this.startPlay();\n      this.emit(TIMELINE_START, null);\n    } else {\n      // 结束播放\n      if (this.playHandler) {\n        window.cancelAnimationFrame(this.playHandler);\n        if (isSync) {\n          this.syncCurrnentTick();\n          this.emit(TIMELINE_END, null);\n        }\n      }\n    }\n    this.getCanvas().draw();\n  }\n\n  private initEvent() {\n    /** 播放/暂停事件 */\n    this.timeLineButton.off('click');\n    this.timeLineButton.on('click', () => {\n      this.isPlay = !this.isPlay;\n      this.changePlayStatus();\n    });\n\n    /** 播放轴上圆点滑动事件 */\n    this.timeSelect.off('mousedown');\n    this.timeSelect.on('mousedown', (event) => {\n      this.onTimeSelectMouseDown(event);\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}