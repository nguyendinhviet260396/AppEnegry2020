{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar g_base_1 = require(\"@antv/g-base\");\n\nvar util_1 = require(\"@antv/util\");\n\nvar LOCATION_FIELD_MAP = {\n  none: [],\n  point: ['x', 'y'],\n  region: ['start', 'end'],\n  points: ['points'],\n  circle: ['center', 'radius', 'startAngle', 'endAngle']\n};\n\nvar Component =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Component, _super);\n\n  function Component(cfg) {\n    var _this = _super.call(this, cfg) || this;\n\n    _this.initCfg();\n\n    return _this;\n  }\n  /**\n   * @protected\n   * 默认的配置项\n   * @returns {object} 默认的配置项\n   */\n\n\n  Component.prototype.getDefaultCfg = function () {\n    return {\n      id: '',\n      name: '',\n      type: '',\n      locationType: 'none',\n      offsetX: 0,\n      offsetY: 0,\n      animate: false,\n      capture: true,\n      updateAutoRender: false,\n      animateOption: {\n        appear: null,\n        update: {\n          duration: 400,\n          easing: 'easeQuadInOut'\n        },\n        enter: {\n          duration: 400,\n          easing: 'easeQuadInOut'\n        },\n        leave: {\n          duration: 350,\n          easing: 'easeQuadIn'\n        }\n      },\n      events: null,\n      defaultCfg: {},\n      visible: true\n    };\n  };\n  /**\n   * 清理组件的内容，一般配合 render 使用\n   * @example\n   * axis.clear();\n   * axis.render();\n   */\n\n\n  Component.prototype.clear = function () {};\n  /**\n   * 更新组件\n   * @param {object} cfg 更新属性\n   */\n\n\n  Component.prototype.update = function (cfg) {\n    var _this = this;\n\n    var defaultCfg = this.get('defaultCfg');\n    util_1.each(cfg, function (value, name) {\n      var originCfg = _this.get(name);\n\n      var newCfg = value;\n\n      if (originCfg !== value) {\n        // 判断两者是否相等，主要是进行 null 的判定\n        if (util_1.isObject(value) && defaultCfg[name]) {\n          // 新设置的属性与默认值进行合并\n          newCfg = util_1.deepMix({}, defaultCfg[name], value);\n        }\n\n        _this.set(name, newCfg);\n      }\n    });\n    this.updateInner(cfg);\n    this.afterUpdate(cfg);\n  }; // 更新内部\n\n\n  Component.prototype.updateInner = function (cfg) {};\n\n  Component.prototype.afterUpdate = function (cfg) {\n    // 更新时考虑显示、隐藏\n    if (util_1.hasKey(cfg, 'visible')) {\n      if (cfg.visible) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    } // 更新时考虑capture\n\n\n    if (util_1.hasKey(cfg, 'capture')) {\n      this.setCapture(cfg.capture);\n    }\n  };\n\n  Component.prototype.getLayoutBBox = function () {\n    return this.getBBox(); // 默认返回 getBBox，不同的组件内部单独实现\n  };\n\n  Component.prototype.getLocationType = function () {\n    return this.get('locationType');\n  };\n\n  Component.prototype.getOffset = function () {\n    return {\n      offsetX: this.get('offsetX'),\n      offsetY: this.get('offsetY')\n    };\n  }; // 默认使用 update\n\n\n  Component.prototype.setOffset = function (offsetX, offsetY) {\n    this.update({\n      offsetX: offsetX,\n      offsetY: offsetY\n    });\n  };\n\n  Component.prototype.setLocation = function (cfg) {\n    var location = tslib_1.__assign({}, cfg);\n\n    this.update(location);\n  }; // 实现 ILocation 接口的 getLocation\n\n\n  Component.prototype.getLocation = function () {\n    var _this = this;\n\n    var location = {};\n    var locationType = this.get('locationType');\n    var fields = LOCATION_FIELD_MAP[locationType];\n    util_1.each(fields, function (field) {\n      location[field] = _this.get(field);\n    });\n    return location;\n  };\n\n  Component.prototype.isList = function () {\n    return false;\n  };\n\n  Component.prototype.isSlider = function () {\n    return false;\n  };\n  /**\n   * @protected\n   * 初始化，用于具体的组件继承\n   */\n\n\n  Component.prototype.init = function () {}; // 将组件默认的配置项设置合并到传入的配置项\n\n\n  Component.prototype.initCfg = function () {\n    var _this = this;\n\n    var defaultCfg = this.get('defaultCfg');\n    util_1.each(defaultCfg, function (value, name) {\n      var cfg = _this.get(name);\n\n      if (util_1.isObject(cfg)) {\n        var newCfg = util_1.deepMix({}, value, cfg);\n\n        _this.set(name, newCfg);\n      }\n    });\n  };\n\n  return Component;\n}(g_base_1.Base);\n\nexports.default = Component;","map":{"version":3,"sources":["../../src/abstract/component.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar g_base_1 = require(\"@antv/g-base\");\nvar util_1 = require(\"@antv/util\");\nvar LOCATION_FIELD_MAP = {\n    none: [],\n    point: ['x', 'y'],\n    region: ['start', 'end'],\n    points: ['points'],\n    circle: ['center', 'radius', 'startAngle', 'endAngle'],\n};\nvar Component = /** @class */ (function (_super) {\n    tslib_1.__extends(Component, _super);\n    function Component(cfg) {\n        var _this = _super.call(this, cfg) || this;\n        _this.initCfg();\n        return _this;\n    }\n    /**\n     * @protected\n     * 默认的配置项\n     * @returns {object} 默认的配置项\n     */\n    Component.prototype.getDefaultCfg = function () {\n        return {\n            id: '',\n            name: '',\n            type: '',\n            locationType: 'none',\n            offsetX: 0,\n            offsetY: 0,\n            animate: false,\n            capture: true,\n            updateAutoRender: false,\n            animateOption: {\n                appear: null,\n                update: {\n                    duration: 400,\n                    easing: 'easeQuadInOut',\n                },\n                enter: {\n                    duration: 400,\n                    easing: 'easeQuadInOut',\n                },\n                leave: {\n                    duration: 350,\n                    easing: 'easeQuadIn',\n                },\n            },\n            events: null,\n            defaultCfg: {},\n            visible: true,\n        };\n    };\n    /**\n     * 清理组件的内容，一般配合 render 使用\n     * @example\n     * axis.clear();\n     * axis.render();\n     */\n    Component.prototype.clear = function () { };\n    /**\n     * 更新组件\n     * @param {object} cfg 更新属性\n     */\n    Component.prototype.update = function (cfg) {\n        var _this = this;\n        var defaultCfg = this.get('defaultCfg');\n        util_1.each(cfg, function (value, name) {\n            var originCfg = _this.get(name);\n            var newCfg = value;\n            if (originCfg !== value) {\n                // 判断两者是否相等，主要是进行 null 的判定\n                if (util_1.isObject(value) && defaultCfg[name]) {\n                    // 新设置的属性与默认值进行合并\n                    newCfg = util_1.deepMix({}, defaultCfg[name], value);\n                }\n                _this.set(name, newCfg);\n            }\n        });\n        this.updateInner(cfg);\n        this.afterUpdate(cfg);\n    };\n    // 更新内部\n    Component.prototype.updateInner = function (cfg) {\n    };\n    Component.prototype.afterUpdate = function (cfg) {\n        // 更新时考虑显示、隐藏\n        if (util_1.hasKey(cfg, 'visible')) {\n            if (cfg.visible) {\n                this.show();\n            }\n            else {\n                this.hide();\n            }\n        }\n        // 更新时考虑capture\n        if (util_1.hasKey(cfg, 'capture')) {\n            this.setCapture(cfg.capture);\n        }\n    };\n    Component.prototype.getLayoutBBox = function () {\n        return this.getBBox(); // 默认返回 getBBox，不同的组件内部单独实现\n    };\n    Component.prototype.getLocationType = function () {\n        return this.get('locationType');\n    };\n    Component.prototype.getOffset = function () {\n        return {\n            offsetX: this.get('offsetX'),\n            offsetY: this.get('offsetY'),\n        };\n    };\n    // 默认使用 update\n    Component.prototype.setOffset = function (offsetX, offsetY) {\n        this.update({\n            offsetX: offsetX,\n            offsetY: offsetY,\n        });\n    };\n    Component.prototype.setLocation = function (cfg) {\n        var location = tslib_1.__assign({}, cfg);\n        this.update(location);\n    };\n    // 实现 ILocation 接口的 getLocation\n    Component.prototype.getLocation = function () {\n        var _this = this;\n        var location = {};\n        var locationType = this.get('locationType');\n        var fields = LOCATION_FIELD_MAP[locationType];\n        util_1.each(fields, function (field) {\n            location[field] = _this.get(field);\n        });\n        return location;\n    };\n    Component.prototype.isList = function () {\n        return false;\n    };\n    Component.prototype.isSlider = function () {\n        return false;\n    };\n    /**\n     * @protected\n     * 初始化，用于具体的组件继承\n     */\n    Component.prototype.init = function () { };\n    // 将组件默认的配置项设置合并到传入的配置项\n    Component.prototype.initCfg = function () {\n        var _this = this;\n        var defaultCfg = this.get('defaultCfg');\n        util_1.each(defaultCfg, function (value, name) {\n            var cfg = _this.get(name);\n            if (util_1.isObject(cfg)) {\n                var newCfg = util_1.deepMix({}, value, cfg);\n                _this.set(name, newCfg);\n            }\n        });\n    };\n    return Component;\n}(g_base_1.Base));\nexports.default = Component;\n//# sourceMappingURL=component.js.map"]},"metadata":{},"sourceType":"script"}