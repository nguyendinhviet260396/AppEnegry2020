{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { mix, each } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport { getGeom } from '../../geoms/factory';\nimport TinyLayer from '../tiny-layer';\nimport * as EventParser from './event';\nvar WIDTH_RATIO = 0.6;\nvar G2_GEOM_MAP = {\n  column: 'interval'\n};\nvar PLOT_GEOM_MAP = {\n  interval: 'column'\n};\n\nvar TinyColumnLayer =\n/** @class */\nfunction (_super) {\n  __extends(TinyColumnLayer, _super);\n\n  function TinyColumnLayer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'tinyColumn';\n    return _this;\n  }\n\n  TinyColumnLayer.prototype.init = function () {\n    this.processProps();\n\n    _super.prototype.init.call(this);\n  };\n\n  TinyColumnLayer.prototype.geometryParser = function (dim, type) {\n    if (dim === 'g2') {\n      return G2_GEOM_MAP[type];\n    }\n\n    return PLOT_GEOM_MAP[type];\n  };\n\n  TinyColumnLayer.prototype.scale = function () {\n    var options = this.options;\n    var scales = {};\n    /** 配置x-scale */\n\n    scales[options.xField] = {\n      type: 'cat'\n    };\n    this.setConfig('scales', scales);\n  };\n\n  TinyColumnLayer.prototype.addGeometry = function () {\n    var props = this.options;\n    var column = getGeom('interval', 'main', {\n      positionFields: [props.xField, props.yField],\n      plot: this\n    });\n    this.setConfig('geometry', column);\n  };\n\n  TinyColumnLayer.prototype.parseEvents = function () {\n    _super.prototype.parseEvents.call(this, EventParser);\n  };\n\n  TinyColumnLayer.prototype.processProps = function () {\n    var cfg = {\n      padding: [0, 0, 0, 0],\n      columnSize: this.getSize()\n    };\n    this.options = mix(this.options, cfg);\n  };\n\n  TinyColumnLayer.prototype.getSize = function () {\n    var props = this.options;\n    var columnNumber = this.getColumnNum(props.data, props.xField);\n    var width = this.width;\n    return width / columnNumber * WIDTH_RATIO;\n  };\n\n  TinyColumnLayer.prototype.getColumnNum = function (data, field) {\n    var values = [];\n    each(data, function (d) {\n      var v = d[field];\n\n      if (values.indexOf(v) < 0) {\n        values.push(v);\n      }\n    });\n    return values.length;\n  };\n\n  return TinyColumnLayer;\n}(TinyLayer);\n\nexport default TinyColumnLayer;\nregisterPlotType('tinyColumn', TinyColumnLayer);","map":{"version":3,"sources":["../../../src/sparkline/tiny-column/layer.ts"],"names":[],"mappings":"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","sourcesContent":["import { mix, each } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport { LayerConfig } from '../../base/layer';\nimport { getGeom } from '../../geoms/factory';\nimport TinyLayer, { TinyViewConfig } from '../tiny-layer';\nimport * as EventParser from './event';\nimport { IStyle } from '../../interface/config';\n\nconst WIDTH_RATIO = 0.6;\n\nconst G2_GEOM_MAP = {\n  column: 'interval',\n};\n\nconst PLOT_GEOM_MAP = {\n  interval: 'column',\n};\n\nexport interface TinyColumnViewConfig extends TinyViewConfig {\n  columnStyle?: IStyle;\n}\nexport interface TinyColumnLayerConfig extends TinyColumnViewConfig, LayerConfig {}\n\nexport default class TinyColumnLayer extends TinyLayer<TinyColumnLayerConfig> {\n  public line: any;\n  public area: any;\n  public type: string = 'tinyColumn';\n\n  public init() {\n    this.processProps();\n    super.init();\n  }\n\n  protected geometryParser(dim: string, type: string): string {\n    if (dim === 'g2') {\n      return G2_GEOM_MAP[type];\n    }\n    return PLOT_GEOM_MAP[type];\n  }\n\n  protected scale() {\n    const { options } = this;\n    const scales = {};\n    /** 配置x-scale */\n    scales[options.xField] = { type: 'cat' };\n    this.setConfig('scales', scales);\n  }\n\n  protected addGeometry() {\n    const props = this.options;\n    const column = getGeom('interval', 'main', {\n      positionFields: [props.xField, props.yField],\n      plot: this,\n    });\n    this.setConfig('geometry', column);\n  }\n\n  protected parseEvents() {\n    super.parseEvents(EventParser);\n  }\n\n  private processProps() {\n    const cfg = {\n      padding: [0, 0, 0, 0],\n      columnSize: this.getSize(),\n    } as any;\n    this.options = mix(this.options, cfg);\n  }\n\n  private getSize() {\n    const props = this.options;\n    const columnNumber = this.getColumnNum(props.data, props.xField);\n    const width = this.width;\n    return (width / columnNumber) * WIDTH_RATIO;\n  }\n\n  private getColumnNum(data, field) {\n    const values = [];\n    each(data, (d) => {\n      const v = d[field];\n      if (values.indexOf(v) < 0) {\n        values.push(v);\n      }\n    });\n    return values.length;\n  }\n}\n\nregisterPlotType('tinyColumn', TinyColumnLayer);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}