{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { deepMix } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport StackedColumn from '../stacked-column/layer';\nimport { transformDataPercentage } from '../../util/data';\n\nvar PercentStackedColumnLayer =\n/** @class */\nfunction (_super) {\n  __extends(PercentStackedColumnLayer, _super);\n\n  function PercentStackedColumnLayer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'percentStackedColumn';\n    return _this;\n  }\n\n  PercentStackedColumnLayer.getDefaultOptions = function () {\n    return deepMix({}, _super.getDefaultOptions.call(this), {\n      label: {\n        visible: true,\n        position: 'middle',\n        offset: 0\n      },\n      yAxis: {\n        visible: true,\n        tick: {\n          visible: false\n        },\n        grid: {\n          visible: false\n        },\n        title: {\n          visible: true\n        },\n        label: {\n          visible: false\n        }\n      }\n    });\n  };\n\n  PercentStackedColumnLayer.prototype.processData = function (originData) {\n    var _a = this.options,\n        xField = _a.xField,\n        yField = _a.yField;\n    return transformDataPercentage(originData || [], xField, [yField]);\n  };\n\n  PercentStackedColumnLayer.prototype.scale = function () {\n    var metaConfig = {};\n    var yField = this.options.yField;\n    metaConfig[yField] = {\n      tickCount: 6,\n      alias: yField + \" (%)\",\n      min: 0,\n      max: 1,\n      formatter: function (v) {\n        var formattedValue = (v * 100).toFixed(1);\n        return formattedValue + \"%\";\n      }\n    };\n    this.options.meta = deepMix({}, this.options.meta, metaConfig);\n\n    _super.prototype.scale.call(this);\n  };\n\n  return PercentStackedColumnLayer;\n}(StackedColumn);\n\nexport default PercentStackedColumnLayer;\nregisterPlotType('percentStackedColumn', PercentStackedColumnLayer);","map":{"version":3,"sources":["../../../src/plots/percent-stacked-column/layer.ts"],"names":[],"mappings":";AAAA,SAAS,OAAT,QAAwB,YAAxB;AACA,SAAS,gBAAT,QAAiC,mBAAjC;AAEA,OAAO,aAAP,MAAuD,yBAAvD;AACA,SAAS,uBAAT,QAAwC,iBAAxC;;AAMA,IAAA,yBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAuD,EAAA,SAAA,CAAA,yBAAA,EAAA,MAAA,CAAA;;AAAvD,WAAA,yBAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;;AAyBS,IAAA,KAAA,CAAA,IAAA,GAAe,sBAAf;;AAuBR;;AA/Ce,EAAA,yBAAA,CAAA,iBAAA,GAAd,YAAA;AACE,WAAO,OAAO,CAAC,EAAD,EAAK,MAAA,CAAM,iBAAN,CAAuB,IAAvB,CAAuB,IAAvB,CAAL,EAAgC;AAC5C,MAAA,KAAK,EAAE;AACL,QAAA,OAAO,EAAE,IADJ;AAEL,QAAA,QAAQ,EAAE,QAFL;AAGL,QAAA,MAAM,EAAE;AAHH,OADqC;AAM5C,MAAA,KAAK,EAAE;AACL,QAAA,OAAO,EAAE,IADJ;AAEL,QAAA,IAAI,EAAE;AACJ,UAAA,OAAO,EAAE;AADL,SAFD;AAKL,QAAA,IAAI,EAAE;AACJ,UAAA,OAAO,EAAE;AADL,SALD;AAQL,QAAA,KAAK,EAAE;AACL,UAAA,OAAO,EAAE;AADJ,SARF;AAWL,QAAA,KAAK,EAAE;AACL,UAAA,OAAO,EAAE;AADJ;AAXF;AANqC,KAAhC,CAAd;AAsBD,GAvBa;;AA0BJ,EAAA,yBAAA,CAAA,SAAA,CAAA,WAAA,GAAV,UAAsB,UAAtB,EAA6C;AACrC,QAAA,EAAA,GAAqB,KAAK,OAA1B;AAAA,QAAE,MAAM,GAAA,EAAA,CAAA,MAAR;AAAA,QAAU,MAAM,GAAA,EAAA,CAAA,MAAhB;AACN,WAAO,uBAAuB,CAAC,UAAU,IAAI,EAAf,EAAmB,MAAnB,EAA2B,CAAC,MAAD,CAA3B,CAA9B;AACD,GAHS;;AAKA,EAAA,yBAAA,CAAA,SAAA,CAAA,KAAA,GAAV,YAAA;AACE,QAAM,UAAU,GAAG,EAAnB;AACQ,QAAA,MAAM,GAAK,KAAK,OAAL,CAAL,MAAN;AACR,IAAA,UAAU,CAAC,MAAD,CAAV,GAAqB;AACnB,MAAA,SAAS,EAAE,CADQ;AAEnB,MAAA,KAAK,EAAK,MAAM,GAAA,MAFG;AAGnB,MAAA,GAAG,EAAE,CAHc;AAInB,MAAA,GAAG,EAAE,CAJc;AAKnB,MAAA,SAAS,EAAE,UAAC,CAAD,EAAE;AACX,YAAM,cAAc,GAAG,CAAC,CAAC,GAAG,GAAL,EAAU,OAAV,CAAkB,CAAlB,CAAvB;AACA,eAAU,cAAc,GAAA,GAAxB;AACD;AARkB,KAArB;AAUA,SAAK,OAAL,CAAa,IAAb,GAAoB,OAAO,CAAC,EAAD,EAAK,KAAK,OAAL,CAAa,IAAlB,EAAwB,UAAxB,CAA3B;;AACA,IAAA,MAAA,CAAA,SAAA,CAAM,KAAN,CAAW,IAAX,CAAW,IAAX;AACD,GAfS;;AAgBZ,SAAA,yBAAA;AAAC,CAhDD,CAAuD,aAAvD,CAAA;;;AAkDA,gBAAgB,CAAC,sBAAD,EAAyB,yBAAzB,CAAhB","sourcesContent":["import { deepMix } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport { LayerConfig } from '../../base/layer';\nimport StackedColumn, { StackedColumnViewConfig } from '../stacked-column/layer';\nimport { transformDataPercentage } from '../../util/data';\nimport { DataItem } from '../../interface/config';\n\nexport type PercentStackedColumnViewConfig = StackedColumnViewConfig;\nexport interface PercentStackedColumnLayerConfig extends PercentStackedColumnViewConfig, LayerConfig {}\n\nexport default class PercentStackedColumnLayer extends StackedColumn<PercentStackedColumnLayerConfig> {\n  public static getDefaultOptions(): any {\n    return deepMix({}, super.getDefaultOptions(), {\n      label: {\n        visible: true,\n        position: 'middle',\n        offset: 0,\n      },\n      yAxis: {\n        visible: true,\n        tick: {\n          visible: false,\n        },\n        grid: {\n          visible: false,\n        },\n        title: {\n          visible: true,\n        },\n        label: {\n          visible: false,\n        },\n      },\n    });\n  }\n  public type: string = 'percentStackedColumn';\n\n  protected processData(originData?: DataItem[]) {\n    const { xField, yField } = this.options;\n    return transformDataPercentage(originData || [], xField, [yField]);\n  }\n\n  protected scale() {\n    const metaConfig = {};\n    const { yField } = this.options;\n    metaConfig[yField] = {\n      tickCount: 6,\n      alias: `${yField} (%)`,\n      min: 0,\n      max: 1,\n      formatter: (v) => {\n        const formattedValue = (v * 100).toFixed(1);\n        return `${formattedValue}%`;\n      },\n    };\n    this.options.meta = deepMix({}, this.options.meta, metaConfig);\n    super.scale();\n  }\n}\n\nregisterPlotType('percentStackedColumn', PercentStackedColumnLayer);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}