{"ast":null,"code":"import { deepMix, each } from '@antv/util';\nimport * as MathUtil from '../../math';\n\nvar ShapeNodes =\n/** @class */\nfunction () {\n  function ShapeNodes(cfg) {\n    this.type = 'shape';\n    this.shapes = cfg.shapes;\n    this.nodes = [];\n\n    this._parserNodes();\n\n    this.origion_nodes = deepMix([], this.nodes);\n  }\n\n  ShapeNodes.prototype.measure = function (shape) {\n    var node = deepMix({}, MathUtil.bboxOnRotate(shape), {\n      shape: shape\n    });\n    return node;\n  };\n\n  ShapeNodes.prototype.measureNodes = function () {\n    var _this = this;\n\n    var nodes = [];\n    var shapes = [];\n    each(this.shapes, function (shape, index) {\n      var node = deepMix({}, _this.nodes[index], _this.measure(shape));\n\n      if (node.width !== 0 && node.height !== 0) {\n        nodes.push(node);\n        shapes.push(shape);\n      } // this.nodes[index] = node;\n\n    });\n    this.nodes = nodes;\n    this.shapes = shapes;\n  };\n\n  ShapeNodes.prototype._parserNodes = function () {\n    var _this = this;\n\n    each(this.shapes, function (shape) {\n      var node = _this.measure(shape);\n\n      _this.nodes.push(node);\n    });\n  };\n\n  return ShapeNodes;\n}();\n\nexport default ShapeNodes;","map":{"version":3,"sources":["../../../../src/util/responsive/node/shape-nodes.ts"],"names":[],"mappings":"AAEA,SAAS,OAAT,EAAkB,IAAlB,QAA8B,YAA9B;AACA,OAAO,KAAK,QAAZ,MAA0B,YAA1B;;AAqBA,IAAA,UAAA;AAAA;AAAA,YAAA;AAKE,WAAA,UAAA,CAAY,GAAZ,EAAyB;AADlB,SAAA,IAAA,GAAe,OAAf;AAEL,SAAK,MAAL,GAAc,GAAG,CAAC,MAAlB;AACA,SAAK,KAAL,GAAa,EAAb;;AACA,SAAK,YAAL;;AACA,SAAK,aAAL,GAAqB,OAAO,CAAC,EAAD,EAAK,KAAK,KAAV,CAA5B;AACD;;AAEM,EAAA,UAAA,CAAA,SAAA,CAAA,OAAA,GAAP,UAAe,KAAf,EAAoB;AAClB,QAAM,IAAI,GAAG,OAAO,CAAC,EAAD,EAAK,QAAQ,CAAC,YAAT,CAAsB,KAAtB,CAAL,EAAmC;AAAE,MAAA,KAAK,EAAA;AAAP,KAAnC,CAApB;AACA,WAAO,IAAP;AACD,GAHM;;AAKA,EAAA,UAAA,CAAA,SAAA,CAAA,YAAA,GAAP,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACE,QAAM,KAAK,GAAG,EAAd;AACA,QAAM,MAAM,GAAG,EAAf;AACA,IAAA,IAAI,CAAC,KAAK,MAAN,EAAc,UAAC,KAAD,EAAQ,KAAR,EAAa;AAC7B,UAAM,IAAI,GAAG,OAAO,CAAC,EAAD,EAAK,KAAI,CAAC,KAAL,CAAW,KAAX,CAAL,EAAwB,KAAI,CAAC,OAAL,CAAa,KAAb,CAAxB,CAApB;;AACA,UAAI,IAAI,CAAC,KAAL,KAAe,CAAf,IAAoB,IAAI,CAAC,MAAL,KAAgB,CAAxC,EAA2C;AACzC,QAAA,KAAK,CAAC,IAAN,CAAW,IAAX;AACA,QAAA,MAAM,CAAC,IAAP,CAAY,KAAZ;AACD,OAL4B,CAM7B;;AACD,KAPG,CAAJ;AAQA,SAAK,KAAL,GAAa,KAAb;AACA,SAAK,MAAL,GAAc,MAAd;AACD,GAbM;;AAeC,EAAA,UAAA,CAAA,SAAA,CAAA,YAAA,GAAR,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACE,IAAA,IAAI,CAAC,KAAK,MAAN,EAAc,UAAC,KAAD,EAAM;AACtB,UAAM,IAAI,GAAG,KAAI,CAAC,OAAL,CAAa,KAAb,CAAb;;AACA,MAAA,KAAI,CAAC,KAAL,CAAW,IAAX,CAAgB,IAAhB;AACD,KAHG,CAAJ;AAID,GALO;;AAMV,SAAA,UAAA;AAAC,CAtCD,EAAA","sourcesContent":["/** 负责将shape数据转为node，使shape根据node数据进行update */\nimport { IShape } from '@antv/g-base';\nimport { deepMix, each } from '@antv/util';\nimport * as MathUtil from '../../math';\n\ninterface NodesCfg {\n  shapes: IShape[];\n}\nexport interface IShapeNode {\n  width: number;\n  height: number;\n  centerX: number;\n  centerY: number;\n  top: number;\n  bottom: number;\n  left: number;\n  right: number;\n  topLeft?: {};\n  topRight?: {};\n  bottomLeft?: {};\n  bottomRight?: {};\n  shape?: IShape;\n}\n\nexport default class ShapeNodes {\n  public shapes: IShape[];\n  public nodes: IShapeNode[];\n  public origion_nodes: IShapeNode[];\n  public type: string = 'shape';\n  constructor(cfg: NodesCfg) {\n    this.shapes = cfg.shapes;\n    this.nodes = [];\n    this._parserNodes();\n    this.origion_nodes = deepMix([], this.nodes);\n  }\n\n  public measure(shape) {\n    const node = deepMix({}, MathUtil.bboxOnRotate(shape), { shape });\n    return node;\n  }\n\n  public measureNodes() {\n    const nodes = [];\n    const shapes = [];\n    each(this.shapes, (shape, index) => {\n      const node = deepMix({}, this.nodes[index], this.measure(shape));\n      if (node.width !== 0 && node.height !== 0) {\n        nodes.push(node);\n        shapes.push(shape);\n      }\n      // this.nodes[index] = node;\n    });\n    this.nodes = nodes;\n    this.shapes = shapes;\n  }\n\n  private _parserNodes() {\n    each(this.shapes, (shape) => {\n      const node = this.measure(shape);\n      this.nodes.push(node);\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}