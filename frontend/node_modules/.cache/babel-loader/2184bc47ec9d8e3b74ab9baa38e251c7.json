{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { Legend } from '@antv/component';\nimport { registerPlotType } from '../../base/global';\nimport ComboViewLayer from '../base';\nimport LineLayer from '../../plots/line/layer';\nimport ColumnLayer from '../../plots/column/layer';\nimport { deepMix, clone, each, contains, pull, isArray, get } from '@antv/util';\nimport { getGlobalTheme } from '../../theme';\nvar defaultLineConfig = {\n  color: '#f5bc32',\n  lineSize: 4,\n  connectNull: true,\n  point: {\n    visible: false,\n    size: 3,\n    shape: 'circle',\n    style: {\n      stroke: '#fff'\n    }\n  },\n  label: {\n    visible: false\n  }\n};\nvar defaultColumnConfig = {\n  color: '#5B8FF9'\n};\nvar defaultYAxisConfig = {\n  visible: true,\n  colorMapping: true,\n  grid: {\n    visible: true\n  },\n  line: {\n    visible: false\n  },\n  tickLine: {\n    visible: false\n  },\n  label: {\n    visible: true,\n    autoHide: true,\n    autoRotate: false\n  },\n  title: {\n    autoRotate: true,\n    visible: false,\n    spacing: 12\n  }\n};\n\nvar ColumnLineLayer =\n/** @class */\nfunction (_super) {\n  __extends(ColumnLineLayer, _super);\n\n  function ColumnLineLayer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'columnLine';\n    _this.legends = [];\n    return _this;\n  }\n\n  ColumnLineLayer.getDefaultOptions = function () {\n    return deepMix({}, _super.getDefaultOptions.call(this), {\n      yAxis: {\n        leftConfig: defaultYAxisConfig,\n        rightConfig: defaultYAxisConfig\n      },\n      lineConfig: defaultLineConfig,\n      columnConfig: defaultColumnConfig,\n      legend: {\n        visible: true\n      }\n    });\n  };\n\n  ColumnLineLayer.prototype.beforeInit = function () {\n    var _a, _b;\n\n    var _c = this,\n        options = _c.options,\n        initialOptions = _c.initialOptions;\n\n    if (options.lineSeriesField) {\n      options.yAxis.rightConfig.colorMapping = false;\n\n      if (!((_a = initialOptions.lineConfig) === null || _a === void 0 ? void 0 : _a.lineSize)) {\n        options.lineConfig.lineSize = 3;\n      }\n\n      if (!((_b = initialOptions.lineConfig) === null || _b === void 0 ? void 0 : _b.color)) {\n        var _d = getGlobalTheme(),\n            colors = _d.colors,\n            colors_20 = _d.colors_20;\n\n        var seriesValue = this.getValueBySeriesField();\n        var colorSeries_1 = seriesValue.length > colors.length ? colors_20 : colors;\n        var colorPlates_1 = [];\n        each(seriesValue, function (v, index) {\n          colorPlates_1.push(colorSeries_1[index + 1]);\n        });\n        options.lineConfig.color = colorPlates_1;\n      }\n    }\n  };\n\n  ColumnLineLayer.prototype.init = function () {\n    _super.prototype.init.call(this);\n\n    if (!this.checkData()) {\n      return;\n    }\n\n    var _a = this.options,\n        data = _a.data,\n        meta = _a.meta,\n        xField = _a.xField,\n        yField = _a.yField,\n        lineSeriesField = _a.lineSeriesField,\n        legend = _a.legend,\n        lineConfig = _a.lineConfig,\n        columnConfig = _a.columnConfig,\n        events = _a.events;\n    this.colors = [columnConfig.color, lineConfig.color]; // draw column\n\n    this.drawColumn(); //draw line\n\n    var metaInfo = {};\n    metaInfo[yField[1]] = {\n      ticks: this.getTicks()\n    };\n    var line = this.createLayer(LineLayer, data[1], __assign({\n      xField: xField,\n      yField: yField[1],\n      seriesField: lineSeriesField,\n      meta: deepMix({}, meta, metaInfo),\n      xAxis: {\n        visible: false\n      },\n      yAxis: deepMix({}, this.yAxis(1), {\n        position: 'right',\n        grid: {\n          visible: false\n        },\n        nice: true\n      }),\n      tooltip: {\n        visible: false\n      },\n      legend: {\n        visible: false\n      },\n      events: events\n    }, lineConfig));\n    line.render();\n\n    if (legend.visible) {\n      this.customLegend();\n    }\n\n    this.adjustLayout();\n  };\n\n  ColumnLineLayer.prototype.drawColumn = function () {\n    var _this = this;\n\n    var _a = this.options,\n        data = _a.data,\n        xField = _a.xField,\n        yField = _a.yField,\n        xAxis = _a.xAxis,\n        tooltip = _a.tooltip,\n        columnConfig = _a.columnConfig,\n        meta = _a.meta,\n        events = _a.events;\n    var column = this.createLayer(ColumnLayer, data[0], __assign({\n      xField: xField,\n      yField: yField[0],\n      meta: meta,\n      xAxis: xAxis,\n      yAxis: deepMix({}, this.yAxis(0), {\n        grid: {\n          visible: true\n        },\n        nice: true\n      }),\n      tooltip: deepMix({}, tooltip, {\n        showMarkers: false,\n        custom: {\n          onChange: function onChange(containerDom, ev) {\n            _this.tooltip(containerDom, ev);\n          }\n        }\n      }),\n      events: events\n    }, columnConfig));\n    column.render();\n  };\n\n  ColumnLineLayer.prototype.tooltip = function (dom, ev) {\n    var _this = this;\n\n    var _a = this.options,\n        xField = _a.xField,\n        yField = _a.yField,\n        tooltip = _a.tooltip;\n    var originItem = clone(ev.items[0]);\n    var dataItemsA = this.getDataByXField(ev.title, 1);\n    var formatter = get(tooltip, 'formatter');\n\n    if (dataItemsA) {\n      each(dataItemsA, function (d, index) {\n        var seriesField = _this.geomLayers[1].options.seriesField;\n        var name = seriesField ? d[seriesField] : yField[1]; // 如果有 formatter 就执行 formatter，否则不处理\n\n        var item = formatter ? formatter(d[xField], d[yField[1]], d[seriesField]) : {\n          name: name,\n          value: d[yField[1]]\n        };\n        ev.items.push(__assign(__assign(__assign(__assign({}, originItem), {\n          mappingData: deepMix({}, originItem.mappingData, {\n            _origin: dataItemsA\n          }),\n          data: d\n        }), item), {\n          color: isArray(_this.colors[1]) ? _this.colors[1][index] : _this.colors[1]\n        }));\n      });\n    }\n\n    if (this.options.legend.visible) {\n      var unCheckedValue_1 = this.getUnCheckedValue();\n      var totalItems = this.legends[0].get('items').length + this.legends[1].get('items').length; // 如果legend全部是unchecked的状态，tooltip不显示\n\n      if (unCheckedValue_1.length === totalItems) {\n        dom.style.display = 'none';\n        return;\n      } else {\n        dom.style.display = 'block';\n      } // legend部分checked的时候，根据checked状态filter items\n\n\n      var uniqKeys_1 = [];\n      var uniqItems_1 = [];\n      each(ev.items, function (item) {\n        var name = item.name;\n\n        if (!contains(uniqKeys_1, name) && !contains(unCheckedValue_1, name)) {\n          uniqKeys_1.push(name);\n          uniqItems_1.push(item);\n        }\n      });\n      each(ev.items, function (item, index) {\n        if (index < uniqItems_1.length) {\n          ev.items[index] = uniqItems_1[index];\n        } else {\n          ev.items.pop();\n        }\n      });\n    }\n  };\n\n  ColumnLineLayer.prototype.customLegend = function () {\n    var _this = this;\n\n    var _a = this.options,\n        yField = _a.yField,\n        legend = _a.legend;\n    var colors = this.colors;\n    var container = this.container.addGroup();\n    var legendCfg = legend;\n    var symbols = ['square', 'circle'];\n    each(this.geomLayers, function (geom, index) {\n      var legend;\n\n      if (geom.options.seriesField) {\n        var values = _this.getValueBySeriesField();\n\n        legend = _this.createNormalLegend(values, symbols[index], colors[index], legendCfg, container);\n      } else {\n        legend = _this.createSingleLegend(yField[index], symbols[index], colors[index], legendCfg, container);\n      }\n\n      _this.legends.push(legend);\n    }); // 使用legend做图层筛选\n\n    each(this.geomLayers, function (geom, index) {\n      if (geom.options.seriesField) {\n        _this.multipleLegendFilter(index, geom.options.seriesField);\n      } else {\n        _this.legendFilter(index);\n      }\n    });\n  };\n\n  ColumnLineLayer.prototype.createSingleLegend = function (name, symbol, color, cfg, container) {\n    var markerCfg = deepMix({}, {\n      symbol: symbol,\n      style: {\n        r: 4,\n        fill: color\n      }\n    }, cfg.marker);\n    var items = [{\n      name: name,\n      unchecked: false,\n      marker: markerCfg\n    }];\n    var legend = new Legend.Category({\n      id: this.type,\n      container: container,\n      x: 0,\n      y: 0,\n      items: items,\n      updateAutoRender: true,\n      itemBackground: null,\n      itemName: cfg.text\n    });\n    legend.init();\n    legend.render();\n    return legend;\n  };\n\n  ColumnLineLayer.prototype.createNormalLegend = function (values, symbol, color, cfg, container) {\n    var legendItems = [];\n    each(values, function (v, index) {\n      legendItems.push({\n        name: v,\n        unchecked: false,\n        marker: {\n          symbol: symbol,\n          style: {\n            r: 4,\n            fill: color[index]\n          }\n        }\n      });\n    });\n    var legend = new Legend.Category({\n      id: this.type,\n      container: container,\n      x: 0,\n      y: 0,\n      items: legendItems,\n      updateAutoRender: true,\n      itemBackground: null,\n      itemName: cfg.text,\n      offsetX: 0\n    });\n    legend.init();\n    legend.render();\n    return legend;\n  };\n\n  ColumnLineLayer.prototype.multipleLegendFilter = function (index, field) {\n    var _this = this;\n\n    var legend = this.legends[index];\n    var filteredValue = [];\n    var legend_group = legend.get('group');\n    var layerHide = false;\n    legend_group.on('click', function (ev) {\n      var view = _this.geomLayers[index].view;\n      var item = ev.target.get('delegateObject').item;\n\n      if (item.unchecked) {\n        if (layerHide === true) {\n          _this.showLayer(index);\n\n          layerHide = false;\n        }\n\n        pull(filteredValue, item.name);\n        view.filter(item.value, function (f) {\n          return !contains(filteredValue, f);\n        });\n        view.render();\n        legend.setItemState(item, 'unchecked', false);\n      } else {\n        legend.setItemState(item, 'unchecked', true);\n        filteredValue.push(item.name);\n\n        if (filteredValue.length === _this.legends[index].get('items').length) {\n          // 如果分组分类全部被uncheck了，直接隐藏图层，这样仍然可以trigger tooltip\n          _this.hideLayer(index);\n\n          layerHide = true;\n        } else {\n          view.filter(field, function (f) {\n            return !contains(filteredValue, f);\n          });\n          view.render();\n        }\n      }\n\n      _this.canvas.draw();\n    });\n  };\n\n  ColumnLineLayer.prototype.getValueBySeriesField = function () {\n    var _a = this.options,\n        lineSeriesField = _a.lineSeriesField,\n        data = _a.data;\n    var lineData = data[1];\n    var values = [];\n    each(lineData, function (d) {\n      var v = d[lineSeriesField];\n\n      if (!contains(values, v)) {\n        values.push(v);\n      }\n    });\n    return values;\n  };\n\n  return ColumnLineLayer;\n}(ComboViewLayer);\n\nexport default ColumnLineLayer;\nregisterPlotType('columnLine', ColumnLineLayer);","map":{"version":3,"sources":["../../../src/combo/column-line/layer.ts"],"names":[],"mappings":"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","sourcesContent":["import { Legend } from '@antv/component';\nimport { registerPlotType } from '../../base/global';\nimport ComboViewLayer from '../base';\nimport { LayerConfig } from '../../base/layer';\nimport LineLayer from '../../plots/line/layer';\nimport ColumnLayer from '../../plots/column/layer';\nimport { IColumnLabel } from '../../plots/column/interface';\nimport { deepMix, clone, each, contains, pull, isArray, get } from '@antv/util';\nimport { ICatAxis, GraphicStyle } from '../../interface/config';\nimport { ComboViewConfig, LineConfig } from '../util/interface';\nimport { getGlobalTheme } from '../../theme';\n\nexport interface ColumnConfig {\n  color?: string | string[]; //兼容groupedColumn和stackedColumn类型\n  columnSize?: number;\n  columnStyle?: GraphicStyle | ((...args: any[]) => GraphicStyle);\n  label?: IColumnLabel;\n}\n\nexport interface ColumnLineViewConfig extends ComboViewConfig {\n  xAxis?: ICatAxis;\n  tooltip?: any;\n  lineSeriesField?: string;\n  lineConfig?: LineConfig;\n  columnConfig?: ColumnConfig;\n}\n\nconst defaultLineConfig = {\n  color: '#f5bc32',\n  lineSize: 4,\n  connectNull: true,\n  point: {\n    visible: false,\n    size: 3,\n    shape: 'circle',\n    style: {\n      stroke: '#fff',\n    },\n  },\n  label: {\n    visible: false,\n  },\n};\n\nconst defaultColumnConfig = {\n  color: '#5B8FF9',\n};\n\nconst defaultYAxisConfig = {\n  visible: true,\n  colorMapping: true,\n  grid: {\n    visible: true,\n  },\n  line: {\n    visible: false,\n  },\n  tickLine: {\n    visible: false,\n  },\n  label: {\n    visible: true,\n    autoHide: true,\n    autoRotate: false,\n  },\n  title: {\n    autoRotate: true,\n    visible: false,\n    spacing: 12,\n  },\n};\n\ninterface ColumnLineLayerConfig extends ColumnLineViewConfig, LayerConfig {}\n\nexport default class ColumnLineLayer<T extends ColumnLineLayerConfig = ColumnLineLayerConfig> extends ComboViewLayer<\n  T\n> {\n  public static getDefaultOptions(): Partial<ColumnLineLayerConfig> {\n    return deepMix({}, super.getDefaultOptions(), {\n      yAxis: {\n        leftConfig: defaultYAxisConfig,\n        rightConfig: defaultYAxisConfig,\n      },\n      lineConfig: defaultLineConfig,\n      columnConfig: defaultColumnConfig,\n      legend: {\n        visible: true,\n      },\n    });\n  }\n\n  public type: string = 'columnLine';\n  protected colors: string[];\n  protected legends: any[] = [];\n\n  public beforeInit() {\n    const { options, initialOptions } = this;\n    if (options.lineSeriesField) {\n      options.yAxis.rightConfig.colorMapping = false;\n      if (!initialOptions.lineConfig?.lineSize) {\n        options.lineConfig.lineSize = 3;\n      }\n      if (!initialOptions.lineConfig?.color) {\n        const { colors, colors_20 } = getGlobalTheme();\n        const seriesValue = this.getValueBySeriesField();\n        const colorSeries = seriesValue.length > colors.length ? colors_20 : colors;\n        const colorPlates = [];\n        each(seriesValue, (v, index) => {\n          colorPlates.push(colorSeries[index + 1]);\n        });\n        options.lineConfig.color = colorPlates;\n      }\n    }\n  }\n\n  public init() {\n    super.init();\n    if (!this.checkData()) {\n      return;\n    }\n    const { data, meta, xField, yField, lineSeriesField, legend, lineConfig, columnConfig, events } = this.options;\n    this.colors = [columnConfig.color as string, lineConfig.color as any];\n    // draw column\n    this.drawColumn();\n    //draw line\n    const metaInfo = {};\n    metaInfo[yField[1]] = { ticks: this.getTicks() };\n    const line = this.createLayer(LineLayer, data[1], {\n      xField,\n      yField: yField[1],\n      seriesField: lineSeriesField,\n      meta: deepMix({}, meta, metaInfo),\n      xAxis: {\n        visible: false,\n      },\n      yAxis: deepMix({}, this.yAxis(1), {\n        position: 'right',\n        grid: {\n          visible: false,\n        },\n        nice: true,\n      }),\n      tooltip: {\n        visible: false,\n      },\n      legend: {\n        visible: false,\n      },\n      events,\n      ...lineConfig,\n    });\n    line.render();\n    if (legend.visible) {\n      this.customLegend();\n    }\n    this.adjustLayout();\n  }\n\n  protected drawColumn() {\n    const { data, xField, yField, xAxis, tooltip, columnConfig, meta, events } = this.options;\n    const column = this.createLayer(ColumnLayer, data[0], {\n      xField,\n      yField: yField[0],\n      meta,\n      xAxis,\n      yAxis: deepMix({}, this.yAxis(0), {\n        grid: {\n          visible: true,\n        },\n        nice: true,\n      }),\n      tooltip: deepMix({}, tooltip, {\n        showMarkers: false,\n        custom: {\n          onChange: (containerDom, ev) => {\n            this.tooltip(containerDom, ev);\n          },\n        },\n      }),\n      events,\n      ...columnConfig,\n    });\n    column.render();\n  }\n\n  protected tooltip(dom, ev) {\n    const { xField, yField, tooltip } = this.options;\n    const originItem = clone(ev.items[0]);\n    const dataItemsA = this.getDataByXField(ev.title, 1);\n    const formatter = get(tooltip, 'formatter');\n    if (dataItemsA) {\n      each(dataItemsA, (d, index) => {\n        const { seriesField } = this.geomLayers[1].options as any;\n        const name = seriesField ? d[seriesField] : yField[1];\n\n        // 如果有 formatter 就执行 formatter，否则不处理\n        const item = formatter\n          ? formatter(d[xField], d[yField[1]], d[seriesField])\n          : {\n              name,\n              value: d[yField[1]],\n            };\n\n        ev.items.push({\n          ...originItem,\n          mappingData: deepMix({}, originItem.mappingData, { _origin: dataItemsA }),\n          data: d,\n          ...item,\n          color: isArray(this.colors[1]) ? this.colors[1][index] : this.colors[1],\n        });\n      });\n    }\n\n    if (this.options.legend.visible) {\n      const unCheckedValue = this.getUnCheckedValue();\n      const totalItems = this.legends[0].get('items').length + this.legends[1].get('items').length;\n      // 如果legend全部是unchecked的状态，tooltip不显示\n      if (unCheckedValue.length === totalItems) {\n        dom.style.display = 'none';\n        return;\n      } else {\n        dom.style.display = 'block';\n      }\n      // legend部分checked的时候，根据checked状态filter items\n      const uniqKeys = [];\n      const uniqItems = [];\n      each(ev.items, (item) => {\n        const { name } = item;\n        if (!contains(uniqKeys, name) && !contains(unCheckedValue, name)) {\n          uniqKeys.push(name);\n          uniqItems.push(item);\n        }\n      });\n      each(ev.items, (item, index) => {\n        if (index < uniqItems.length) {\n          ev.items[index] = uniqItems[index];\n        } else {\n          ev.items.pop();\n        }\n      });\n    }\n  }\n\n  protected customLegend() {\n    const { yField, legend } = this.options;\n    const { colors } = this;\n    const container = this.container.addGroup();\n    const legendCfg = legend;\n    const symbols = ['square', 'circle'];\n    each(this.geomLayers, (geom, index) => {\n      let legend;\n      if (geom.options.seriesField) {\n        const values = this.getValueBySeriesField();\n        legend = this.createNormalLegend(values, symbols[index], colors[index], legendCfg, container);\n      } else {\n        legend = this.createSingleLegend(yField[index], symbols[index], colors[index], legendCfg, container);\n      }\n      this.legends.push(legend);\n    });\n    // 使用legend做图层筛选\n    each(this.geomLayers, (geom, index) => {\n      if (geom.options.seriesField) {\n        this.multipleLegendFilter(index, geom.options.seriesField);\n      } else {\n        this.legendFilter(index);\n      }\n    });\n  }\n\n  protected createSingleLegend(name, symbol, color, cfg, container) {\n    const markerCfg = deepMix(\n      {},\n      {\n        symbol,\n        style: {\n          r: 4,\n          fill: color,\n        },\n      },\n      cfg.marker\n    );\n    const items = [\n      {\n        name,\n        unchecked: false,\n        marker: markerCfg,\n      },\n    ];\n    const legend = new Legend.Category({\n      id: this.type,\n      container,\n      x: 0,\n      y: 0,\n      items: items,\n      updateAutoRender: true,\n      itemBackground: null,\n      itemName: cfg.text,\n    });\n    legend.init();\n    legend.render();\n    return legend;\n  }\n\n  protected createNormalLegend(values, symbol, color, cfg, container) {\n    const legendItems = [];\n    each(values, (v, index) => {\n      legendItems.push({\n        name: v,\n        unchecked: false,\n        marker: {\n          symbol,\n          style: {\n            r: 4,\n            fill: color[index],\n          },\n        },\n      });\n    });\n    const legend = new Legend.Category({\n      id: this.type,\n      container,\n      x: 0,\n      y: 0,\n      items: legendItems,\n      updateAutoRender: true,\n      itemBackground: null,\n      itemName: cfg.text,\n      offsetX: 0,\n    });\n    legend.init();\n    legend.render();\n    return legend;\n  }\n\n  protected multipleLegendFilter(index, field) {\n    const legend = this.legends[index];\n    const filteredValue = [];\n    const legend_group = legend.get('group');\n    let layerHide = false;\n    legend_group.on('click', (ev) => {\n      const view = this.geomLayers[index].view;\n      const item = ev.target.get('delegateObject').item;\n      if (item.unchecked) {\n        if (layerHide === true) {\n          this.showLayer(index);\n          layerHide = false;\n        }\n        pull(filteredValue, item.name);\n        view.filter(item.value, (f) => {\n          return !contains(filteredValue, f);\n        });\n        view.render();\n        legend.setItemState(item, 'unchecked', false);\n      } else {\n        legend.setItemState(item, 'unchecked', true);\n        filteredValue.push(item.name);\n        if (filteredValue.length === this.legends[index].get('items').length) {\n          // 如果分组分类全部被uncheck了，直接隐藏图层，这样仍然可以trigger tooltip\n          this.hideLayer(index);\n          layerHide = true;\n        } else {\n          view.filter(field, (f) => {\n            return !contains(filteredValue, f);\n          });\n          view.render();\n        }\n      }\n      this.canvas.draw();\n    });\n  }\n\n  protected getValueBySeriesField() {\n    const { lineSeriesField, data } = this.options;\n    const lineData = data[1];\n    const values = [];\n    each(lineData, (d) => {\n      const v = d[lineSeriesField];\n      if (!contains(values, v)) {\n        values.push(v);\n      }\n    });\n    return values;\n  }\n}\n\nregisterPlotType('columnLine', ColumnLineLayer);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}