{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { assign, isFunction, deepMix, get, each, has } from '@antv/util';\nimport { combineFormatter, getNoopFormatter, getPrecisionFormatter, getSuffixFormatter } from '../../util/formatter';\n\nvar LabelParser =\n/** @class */\nfunction () {\n  function LabelParser(cfg) {\n    this.config = {};\n\n    var plot = cfg.plot,\n        rest = __rest(cfg, [\"plot\"]);\n\n    this.plot = plot;\n    this.originConfig = rest;\n    this.init(cfg);\n  }\n\n  LabelParser.prototype.getConfig = function () {\n    return this.config;\n  };\n\n  LabelParser.prototype.init = function (cfg) {\n    var _this = this;\n\n    assign(this.config, cfg);\n\n    this.config.callback = function (val) {\n      return _this.parseCallBack(val);\n    };\n  };\n\n  LabelParser.prototype.parseCallBack = function (val) {\n    var labelProps = this.originConfig;\n    var theme = this.plot.getPlotTheme();\n\n    var config = __assign({}, labelProps);\n\n    this.parseOffset(labelProps, config);\n\n    if (labelProps.position) {\n      if (isFunction(labelProps.position)) {\n        config.position = labelProps.position(val);\n      } else {\n        config.position = labelProps.position;\n      }\n    }\n\n    this.parseFormatter(config);\n\n    if (labelProps.style) {\n      if (isFunction(labelProps.style)) {\n        config.textStyle = labelProps.style(val);\n      } else {\n        config.textStyle = labelProps.style;\n      }\n    }\n\n    config.textStyle = deepMix({}, get(theme, 'label.style'), config.textStyle);\n\n    if (labelProps.autoRotate) {\n      config.autoRotate = labelProps.autoRotate;\n    }\n\n    return config;\n  };\n\n  LabelParser.prototype.parseOffset = function (props, config) {\n    var mapper = ['offset', 'offsetX', 'offsetY'];\n    var count = 0;\n    each(mapper, function (m) {\n      if (has(props, m)) {\n        config[m] = props[m];\n        count++;\n      }\n    }); // 如用户没有设置offset，而label position又为middle时，则默认设置offset为0\n\n    if (count === 0 && get(props, 'position') === 'middle') {\n      config.offset = 0;\n    }\n  };\n\n  LabelParser.prototype.parseFormatter = function (config) {\n    var labelProps = this.originConfig;\n\n    config.content = function (data, index) {\n      // @ts-ignore\n      var text = data[labelProps.fields[0]];\n      return combineFormatter(getNoopFormatter(), getPrecisionFormatter(labelProps.precision), getSuffixFormatter(labelProps.suffix), labelProps.formatter ? labelProps.formatter : getNoopFormatter())(text, data, index);\n    };\n  };\n\n  return LabelParser;\n}();\n\nexport default LabelParser;","map":{"version":3,"sources":["../../../src/components/label/parser.ts"],"names":[],"mappings":"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","sourcesContent":["import { assign, isFunction, deepMix, get, each, has } from '@antv/util';\nimport { Label } from '../../interface/config';\nimport { combineFormatter, getNoopFormatter, getPrecisionFormatter, getSuffixFormatter } from '../../util/formatter';\nimport { LooseMap } from '../../interface/types';\n\nexport default class LabelParser {\n  public config: LooseMap = {};\n  protected plot: any;\n  protected originConfig: Label;\n\n  constructor(cfg) {\n    const { plot, ...rest } = cfg;\n    this.plot = plot;\n    this.originConfig = rest;\n    this.init(cfg);\n  }\n\n  public getConfig() {\n    return this.config;\n  }\n\n  protected init(cfg) {\n    assign(this.config, cfg);\n    this.config.callback = (val) => {\n      return this.parseCallBack(val);\n    };\n  }\n\n  protected parseCallBack(val) {\n    const labelProps = this.originConfig;\n    const theme = this.plot.getPlotTheme();\n    const config: LooseMap = { ...labelProps };\n    this.parseOffset(labelProps, config);\n    if (labelProps.position) {\n      if (isFunction(labelProps.position)) {\n        config.position = labelProps.position(val);\n      } else {\n        config.position = labelProps.position;\n      }\n    }\n    this.parseFormatter(config);\n    if (labelProps.style) {\n      if (isFunction(labelProps.style)) {\n        config.textStyle = labelProps.style(val);\n      } else {\n        config.textStyle = labelProps.style;\n      }\n    }\n    config.textStyle = deepMix({}, get(theme, 'label.style'), config.textStyle);\n    if (labelProps.autoRotate) {\n      config.autoRotate = labelProps.autoRotate;\n    }\n\n    return config;\n  }\n\n  protected parseOffset(props, config) {\n    const mapper = ['offset', 'offsetX', 'offsetY'];\n    let count = 0;\n    each(mapper, (m) => {\n      if (has(props, m)) {\n        config[m] = props[m];\n        count++;\n      }\n    });\n    // 如用户没有设置offset，而label position又为middle时，则默认设置offset为0\n    if (count === 0 && get(props, 'position') === 'middle') {\n      config.offset = 0;\n    }\n  }\n\n  protected parseFormatter(config: LooseMap) {\n    const labelProps = this.originConfig;\n    config.content = (data, index) => {\n      // @ts-ignore\n      const text = data[labelProps.fields[0]];\n      return combineFormatter(\n        getNoopFormatter(),\n        getPrecisionFormatter(labelProps.precision),\n        getSuffixFormatter(labelProps.suffix),\n        (labelProps.formatter as (text: string, item: any, idx: number) => string)\n          ? labelProps.formatter\n          : getNoopFormatter()\n      )(text, data, index);\n    };\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}