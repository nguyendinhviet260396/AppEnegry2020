{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.doGroupAppearAnimate = exports.doAnimate = exports.getDefaultAnimateCfg = exports.DEFAULT_ANIMATE_CFG = void 0;\n\nvar tslib_1 = require(\"tslib\");\n\nvar util_1 = require(\"@antv/util\");\n\nvar constant_1 = require(\"../constant\");\n\nvar animation_1 = require(\"./animation\"); // 默认的动画参数配置\n\n\nexports.DEFAULT_ANIMATE_CFG = {\n  appear: {\n    duration: 450,\n    easing: 'easeQuadOut'\n  },\n  update: {\n    duration: 400,\n    easing: 'easeQuadInOut'\n  },\n  enter: {\n    duration: 400,\n    easing: 'easeQuadInOut'\n  },\n  leave: {\n    duration: 350,\n    easing: 'easeQuadIn'\n  }\n}; // 各个 Geometry 默认的动画执行函数\n\nvar GEOMETRY_ANIMATE_CFG = {\n  interval: function interval(coordinate) {\n    return {\n      enter: {\n        animation: coordinate.isRect ? coordinate.isTransposed ? 'scale-in-x' : 'scale-in-y' : 'fade-in'\n      },\n      update: {\n        animation: coordinate.isPolar && coordinate.isTransposed ? 'sector-path-update' : null\n      },\n      leave: {\n        animation: 'fade-out'\n      }\n    };\n  },\n  line: {\n    enter: {\n      animation: 'fade-in'\n    },\n    leave: {\n      animation: 'fade-out'\n    }\n  },\n  path: {\n    enter: {\n      animation: 'fade-in'\n    },\n    leave: {\n      animation: 'fade-out'\n    }\n  },\n  point: {\n    appear: {\n      animation: 'zoom-in'\n    },\n    enter: {\n      animation: 'zoom-in'\n    },\n    leave: {\n      animation: 'zoom-out'\n    }\n  },\n  area: {\n    enter: {\n      animation: 'fade-in'\n    },\n    leave: {\n      animation: 'fade-out'\n    }\n  },\n  polygon: {\n    enter: {\n      animation: 'fade-in'\n    },\n    leave: {\n      animation: 'fade-out'\n    }\n  },\n  schema: {\n    enter: {\n      animation: 'fade-in'\n    },\n    leave: {\n      animation: 'fade-out'\n    }\n  },\n  edge: {\n    enter: {\n      animation: 'fade-in'\n    },\n    leave: {\n      animation: 'fade-out'\n    }\n  },\n  label: {\n    appear: {\n      animation: 'fade-in',\n      delay: 450\n    },\n    enter: {\n      animation: 'fade-in'\n    },\n    update: {\n      animation: 'position-update'\n    },\n    leave: {\n      animation: 'fade-out'\n    }\n  }\n}; // 各个 Geometry 默认的群组出场动画\n\nvar GEOMETRY_GROUP_APPEAR_ANIMATION = {\n  line: function line() {\n    return {\n      animation: 'wave-in'\n    };\n  },\n  area: function area() {\n    return {\n      animation: 'wave-in'\n    };\n  },\n  path: function path() {\n    return {\n      animation: 'fade-in'\n    };\n  },\n  interval: function interval(coordinate) {\n    var animation;\n\n    if (coordinate.isRect) {\n      animation = coordinate.isTransposed ? 'grow-in-x' : 'grow-in-y';\n    } else {\n      animation = 'grow-in-xy';\n\n      if (coordinate.isPolar && coordinate.isTransposed) {\n        // pie chart\n        animation = 'wave-in';\n      }\n    }\n\n    return {\n      animation: animation\n    };\n  },\n  schema: function schema(coordinate) {\n    var animation;\n\n    if (coordinate.isRect) {\n      animation = coordinate.isTransposed ? 'grow-in-x' : 'grow-in-y';\n    } else {\n      animation = 'grow-in-xy';\n    }\n\n    return {\n      animation: animation\n    };\n  },\n  polygon: function polygon() {\n    return {\n      animation: 'fade-in',\n      duration: 500\n    };\n  },\n  edge: function edge() {\n    return {\n      animation: 'fade-in'\n    };\n  }\n}; // 解析用户的动画配置\n\nfunction parseAnimateConfig(animateCfg, data) {\n  return {\n    delay: util_1.isFunction(animateCfg.delay) ? animateCfg.delay(data) : animateCfg.delay,\n    easing: util_1.isFunction(animateCfg.easing) ? animateCfg.easing(data) : animateCfg.easing,\n    duration: util_1.isFunction(animateCfg.duration) ? animateCfg.duration(data) : animateCfg.duration,\n    callback: animateCfg.callback\n  };\n}\n/**\n * @ignore\n * 获取 elementName 对应的动画配置，当声明了 `animateType`，则返回 `animateType` 对应的动画配置\n * @param elementName 元素名称\n * @param coordinate 做表弟类型\n * @param animateType 可选，动画类型\n */\n\n\nfunction getDefaultAnimateCfg(elementName, coordinate, animateType) {\n  var animateCfg = GEOMETRY_ANIMATE_CFG[elementName];\n\n  if (animateCfg) {\n    if (util_1.isFunction(animateCfg)) {\n      animateCfg = animateCfg(coordinate);\n    }\n\n    animateCfg = util_1.deepMix({}, exports.DEFAULT_ANIMATE_CFG, animateCfg);\n\n    if (animateType) {\n      return animateCfg[animateType];\n    }\n  }\n\n  return animateCfg;\n}\n\nexports.getDefaultAnimateCfg = getDefaultAnimateCfg;\n/**\n * @ignore\n * 工具函数\n * 根据用户传入的配置为 shape 执行动画\n * @param shape 执行动画的图形元素\n * @param animateCfg 动画配置\n * @param cfg 额外的信息\n */\n\nfunction doAnimate(shape, animateCfg, cfg) {\n  var data = util_1.get(shape.get('origin'), 'data', constant_1.FIELD_ORIGIN);\n  var animation = animateCfg.animation; // 获取动画执行函数\n\n  var parsedAnimateCfg = parseAnimateConfig(animateCfg, data);\n\n  if (animation) {\n    // 用户声明了动画执行函数\n    var animateFunction = animation_1.getAnimation(animation);\n\n    if (animateFunction) {\n      animateFunction(shape, parsedAnimateCfg, cfg);\n    }\n  } else {\n    // 没有声明，则根据 toAttrs 做差值动画\n    shape.animate(cfg.toAttrs, parsedAnimateCfg);\n  }\n}\n\nexports.doAnimate = doAnimate;\n/**\n * @ignore\n * 执行 Geometry 群组入场动画\n * @param container 执行群组动画的图形元素\n * @param animateCfg 动画配置\n * @param geometryType geometry 类型\n * @param coordinate 坐标系对象\n * @param minYPoint y 轴最小值对应的画布坐标点\n */\n\nfunction doGroupAppearAnimate(container, animateCfg, geometryType, coordinate, minYPoint) {\n  if (GEOMETRY_GROUP_APPEAR_ANIMATION[geometryType]) {\n    var defaultCfg = GEOMETRY_GROUP_APPEAR_ANIMATION[geometryType](coordinate);\n    var animation = animation_1.getAnimation(util_1.get(defaultCfg, 'animation', ''));\n\n    if (animation) {\n      var cfg = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, exports.DEFAULT_ANIMATE_CFG.appear), defaultCfg), animateCfg);\n\n      container.stopAnimate(); // 先结束当前 container 动画\n\n      animation(container, cfg, {\n        coordinate: coordinate,\n        minYPoint: minYPoint,\n        toAttrs: null\n      });\n    }\n  }\n}\n\nexports.doGroupAppearAnimate = doGroupAppearAnimate;","map":{"version":3,"sources":["../../src/animate/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { deepMix, get, isFunction } from '@antv/util';\nimport { FIELD_ORIGIN } from '../constant';\nimport { Coordinate, IGroup, IShape } from '../dependents';\nimport { AnimateCfg, Data, Datum, GAnimateCfg, Point } from '../interface';\nimport { AnimateExtraCfg } from './interface';\n\nimport { getAnimation } from './animation';\n\n// 默认的动画参数配置\nexport const DEFAULT_ANIMATE_CFG = {\n  appear: {\n    duration: 450,\n    easing: 'easeQuadOut',\n  }, // 初始入场动画配置\n  update: {\n    duration: 400,\n    easing: 'easeQuadInOut',\n  }, // 更新时发生变更的动画配置\n  enter: {\n    duration: 400,\n    easing: 'easeQuadInOut',\n  }, // 更新时新增元素的入场动画配置\n  leave: {\n    duration: 350,\n    easing: 'easeQuadIn',\n  }, // 更新时销毁动画配置\n};\n\n// 各个 Geometry 默认的动画执行函数\nconst GEOMETRY_ANIMATE_CFG = {\n  interval: (coordinate: Coordinate) => {\n    return {\n      enter: {\n        animation: coordinate.isRect ? (coordinate.isTransposed ? 'scale-in-x' : 'scale-in-y') : 'fade-in',\n      },\n      update: {\n        animation: coordinate.isPolar && coordinate.isTransposed ? 'sector-path-update' : null,\n      },\n      leave: {\n        animation: 'fade-out',\n      },\n    };\n  },\n  line: {\n    enter: {\n      animation: 'fade-in',\n    },\n    leave: {\n      animation: 'fade-out',\n    },\n  },\n  path: {\n    enter: {\n      animation: 'fade-in',\n    },\n    leave: {\n      animation: 'fade-out',\n    },\n  },\n  point: {\n    appear: {\n      animation: 'zoom-in',\n    },\n    enter: {\n      animation: 'zoom-in',\n    },\n    leave: {\n      animation: 'zoom-out',\n    },\n  },\n  area: {\n    enter: {\n      animation: 'fade-in',\n    },\n    leave: {\n      animation: 'fade-out',\n    },\n  },\n  polygon: {\n    enter: {\n      animation: 'fade-in',\n    },\n    leave: {\n      animation: 'fade-out',\n    },\n  },\n  schema: {\n    enter: {\n      animation: 'fade-in',\n    },\n    leave: {\n      animation: 'fade-out',\n    },\n  },\n  edge: {\n    enter: {\n      animation: 'fade-in',\n    },\n    leave: {\n      animation: 'fade-out',\n    },\n  },\n  label: {\n    appear: {\n      animation: 'fade-in',\n      delay: 450,\n    },\n    enter: {\n      animation: 'fade-in',\n    },\n    update: {\n      animation: 'position-update',\n    },\n    leave: {\n      animation: 'fade-out',\n    },\n  },\n};\n\n// 各个 Geometry 默认的群组出场动画\nconst GEOMETRY_GROUP_APPEAR_ANIMATION = {\n  line: () => {\n    return {\n      animation: 'wave-in',\n    };\n  },\n  area: () => {\n    return {\n      animation: 'wave-in',\n    };\n  },\n  path: () => {\n    return {\n      animation: 'fade-in',\n    };\n  },\n  interval(coordinate: Coordinate) {\n    let animation;\n\n    if (coordinate.isRect) {\n      animation = coordinate.isTransposed ? 'grow-in-x' : 'grow-in-y';\n    } else {\n      animation = 'grow-in-xy';\n      if (coordinate.isPolar && coordinate.isTransposed) {\n        // pie chart\n        animation = 'wave-in';\n      }\n    }\n    return {\n      animation,\n    };\n  },\n  schema: (coordinate) => {\n    let animation;\n    if (coordinate.isRect) {\n      animation = coordinate.isTransposed ? 'grow-in-x' : 'grow-in-y';\n    } else {\n      animation = 'grow-in-xy';\n    }\n    return {\n      animation,\n    };\n  },\n  polygon: () => {\n    return {\n      animation: 'fade-in',\n      duration: 500,\n    };\n  },\n  edge: () => {\n    return {\n      animation: 'fade-in',\n    };\n  },\n};\n\n// 解析用户的动画配置\nfunction parseAnimateConfig(animateCfg: AnimateCfg, data: Data | Datum): GAnimateCfg {\n  return {\n    delay: isFunction(animateCfg.delay) ? animateCfg.delay(data) : animateCfg.delay,\n    easing: isFunction(animateCfg.easing) ? animateCfg.easing(data) : animateCfg.easing,\n    duration: isFunction(animateCfg.duration) ? animateCfg.duration(data) : animateCfg.duration,\n    callback: animateCfg.callback,\n  };\n}\n\n/**\n * @ignore\n * 获取 elementName 对应的动画配置，当声明了 `animateType`，则返回 `animateType` 对应的动画配置\n * @param elementName 元素名称\n * @param coordinate 做表弟类型\n * @param animateType 可选，动画类型\n */\nexport function getDefaultAnimateCfg(elementName: string, coordinate: Coordinate, animateType?: string) {\n  let animateCfg = GEOMETRY_ANIMATE_CFG[elementName];\n\n  if (animateCfg) {\n    if (isFunction(animateCfg)) {\n      animateCfg = animateCfg(coordinate);\n    }\n    animateCfg = deepMix({}, DEFAULT_ANIMATE_CFG, animateCfg);\n\n    if (animateType) {\n      return animateCfg[animateType];\n    }\n  }\n  return animateCfg;\n}\n\n/**\n * @ignore\n * 工具函数\n * 根据用户传入的配置为 shape 执行动画\n * @param shape 执行动画的图形元素\n * @param animateCfg 动画配置\n * @param cfg 额外的信息\n */\nexport function doAnimate(shape: IGroup | IShape, animateCfg: AnimateCfg, cfg: AnimateExtraCfg) {\n  const data = get(shape.get('origin'), 'data', FIELD_ORIGIN);\n  const animation = animateCfg.animation; // 获取动画执行函数\n  const parsedAnimateCfg = parseAnimateConfig(animateCfg, data);\n  if (animation) {\n    // 用户声明了动画执行函数\n    const animateFunction = getAnimation(animation);\n    if (animateFunction) {\n      animateFunction(shape, parsedAnimateCfg, cfg);\n    }\n  } else {\n    // 没有声明，则根据 toAttrs 做差值动画\n    shape.animate(cfg.toAttrs, parsedAnimateCfg);\n  }\n}\n\n/**\n * @ignore\n * 执行 Geometry 群组入场动画\n * @param container 执行群组动画的图形元素\n * @param animateCfg 动画配置\n * @param geometryType geometry 类型\n * @param coordinate 坐标系对象\n * @param minYPoint y 轴最小值对应的画布坐标点\n */\nexport function doGroupAppearAnimate(\n  container: IGroup,\n  animateCfg: AnimateCfg,\n  geometryType: string,\n  coordinate: Coordinate,\n  minYPoint: Point\n) {\n  if (GEOMETRY_GROUP_APPEAR_ANIMATION[geometryType]) {\n    const defaultCfg = GEOMETRY_GROUP_APPEAR_ANIMATION[geometryType](coordinate);\n    const animation = getAnimation(get(defaultCfg, 'animation', ''));\n    if (animation) {\n      const cfg = {\n        ...DEFAULT_ANIMATE_CFG.appear,\n        ...defaultCfg,\n        ...animateCfg,\n      };\n      container.stopAnimate(); // 先结束当前 container 动画\n      animation(container, cfg, {\n        coordinate,\n        minYPoint,\n        toAttrs: null,\n      });\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}