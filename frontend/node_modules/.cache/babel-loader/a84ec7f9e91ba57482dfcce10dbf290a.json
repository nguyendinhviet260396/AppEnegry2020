{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { isType } from '@antv/util';\nimport StatisticHtml from '../../../components/statistic';\nimport { getTemplate } from './statistic-template';\nimport { debounce, each } from '@antv/util';\n\nvar RingStatistic =\n/** @class */\nfunction (_super) {\n  __extends(RingStatistic, _super);\n\n  function RingStatistic(cfg) {\n    var _this = _super.call(this, cfg) || this;\n\n    _this.view = cfg.view;\n    _this.plot = cfg.plot;\n    _this.statisticClass = cfg.statisticClass;\n\n    _this.adjustOptions();\n\n    return _this;\n  }\n\n  RingStatistic.prototype.triggerOn = function () {\n    var _this = this;\n\n    var triggerOnEvent = this.options.triggerOn;\n    this.view.on(\"interval:\" + triggerOnEvent, debounce(function (e) {\n      var displayData = _this.parseStatisticData('item', e.data.data, e.data.color);\n\n      var htmlString = _this.getStatisticHtmlString(displayData);\n\n      _this.updateHtml(htmlString);\n    }, 150));\n    var triggerOffEvent = this.options.triggerOff ? this.options.triggerOff : 'mouseleave';\n    this.view.on(\"interval:\" + triggerOffEvent, debounce(function () {\n      var htmlString = _this.getTotalHtmlString();\n\n      _this.updateHtml(htmlString);\n    }, 150));\n  };\n\n  RingStatistic.prototype.getTotalHtmlString = function () {\n    var displayData;\n\n    if (this.options.content) {\n      displayData = this.options.content;\n    } else {\n      /** 用户没有指定文本内容时，默认显示总计 */\n      var data = this.getTotalValue();\n      displayData = this.parseStatisticData('total', data);\n    }\n    /** 中心文本显示 */\n\n\n    var htmlContent;\n\n    if (this.options.htmlContent) {\n      htmlContent = this.options.htmlContent(displayData, this.getStatisticSize());\n    } else {\n      htmlContent = this.getStatisticTemplate(displayData);\n    }\n\n    var statisticContainer = document.createElement('div');\n\n    if (isType(htmlContent, 'HTMLDivElement')) {\n      // @ts-ignore\n      statisticContainer.appendChild(htmlContent);\n    } else {\n      statisticContainer.innerHTML = htmlContent;\n    }\n\n    return statisticContainer;\n  };\n\n  RingStatistic.prototype.adjustOptions = function () {\n    this.html = this.getTotalHtmlString();\n    var _a = this.view.coordinateBBox,\n        minX = _a.minX,\n        minY = _a.minY,\n        width = _a.width,\n        height = _a.height;\n    this.x = minX + width / 2;\n    this.y = minY + height / 2;\n  };\n\n  RingStatistic.prototype.getTotalValue = function () {\n    var _a;\n\n    var total = 0;\n    var _b = this.plot.options,\n        angleField = _b.angleField,\n        colorField = _b.colorField;\n    var totalLabel = this.options.totalLabel;\n    each(this.plot.options.data, function (item) {\n      if (typeof item[angleField] === 'number') {\n        total += item[angleField];\n      }\n    });\n    var data = (_a = {}, _a[angleField] = total, _a[colorField] = totalLabel, _a);\n    return data;\n  };\n\n  RingStatistic.prototype.parseStatisticData = function (type, data, color) {\n    var plot = this.plot;\n    var _a = plot.options,\n        angleField = _a.angleField,\n        colorField = _a.colorField;\n    var angleScale = plot.getScaleByField(angleField);\n    var colorScale = plot.getScaleByField(colorField);\n    var statisticData = {\n      name: colorScale ? colorScale.getText(data[colorField]) : null,\n      value: angleScale.getText(data[angleField])\n    };\n\n    if (type === 'item') {\n      // 每一个扇形区域的数据\n      statisticData.itemData = data;\n      statisticData.color = color;\n    }\n\n    return statisticData;\n  };\n\n  RingStatistic.prototype.getStatisticTemplate = function (data) {\n    var size = this.getStatisticSize();\n    var htmlString = getTemplate(data.name, data.value, this.statisticClass, size);\n    /** 更为复杂的文本要求用户自行制定html模板 */\n\n    return htmlString;\n  };\n\n  RingStatistic.prototype.getStatisticSize = function () {\n    var viewRange = this.plot.view.coordinateBBox;\n    var _a = this.plot.options,\n        radius = _a.radius,\n        innerRadius = _a.innerRadius;\n    var minContainerSize = Math.min(viewRange.width, viewRange.height);\n    var size = minContainerSize * radius * innerRadius;\n    return size;\n  };\n\n  RingStatistic.prototype.getStatisticHtmlString = function (data) {\n    var htmlContent = this.options.htmlContent;\n    var htmlString;\n\n    if (htmlContent) {\n      htmlString = htmlContent(data, this.getStatisticSize());\n    } else {\n      htmlString = this.getStatisticTemplate(data);\n    }\n\n    return htmlString;\n  };\n\n  return RingStatistic;\n}(StatisticHtml);\n\nexport default RingStatistic;","map":{"version":3,"sources":["../../../../src/plots/donut/component/ring-statistic.ts"],"names":[],"mappings":"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","sourcesContent":["import { isType } from '@antv/util';\nimport { View } from '../../../dependents';\nimport StatisticHtml, { IStatisticHtml } from '../../../components/statistic';\nimport { getTemplate } from './statistic-template';\nimport { debounce, each } from '@antv/util';\nimport Ring, { DonutViewConfig } from '../layer';\nimport { LooseMap } from '../../../interface/types';\n\ninterface IRingStatistic extends IStatisticHtml {\n  view: View;\n  plot: any;\n}\n\ninterface StatisticData {\n  name: string;\n  value: string;\n  itemData?: LooseMap;\n  color?: string;\n}\n\nexport default class RingStatistic extends StatisticHtml {\n  protected view: View;\n  protected plot: Ring;\n  protected statisticClass: string;\n  protected options: DonutViewConfig['statistic'];\n\n  constructor(cfg: IRingStatistic) {\n    super(cfg);\n    this.view = cfg.view;\n    this.plot = cfg.plot;\n    this.statisticClass = cfg.statisticClass;\n    this.adjustOptions();\n  }\n\n  public triggerOn() {\n    const triggerOnEvent = this.options.triggerOn;\n    this.view.on(\n      `interval:${triggerOnEvent}`,\n      debounce((e) => {\n        const displayData = this.parseStatisticData('item', e.data.data, e.data.color);\n        const htmlString = this.getStatisticHtmlString(displayData);\n        this.updateHtml(htmlString);\n      }, 150)\n    );\n    const triggerOffEvent = this.options.triggerOff ? this.options.triggerOff : 'mouseleave';\n    this.view.on(\n      `interval:${triggerOffEvent}`,\n      debounce(() => {\n        const htmlString = this.getTotalHtmlString();\n        this.updateHtml(htmlString);\n      }, 150)\n    );\n  }\n\n  protected getTotalHtmlString(): HTMLDivElement {\n    let displayData;\n    if (this.options.content) {\n      displayData = this.options.content;\n    } else {\n      /** 用户没有指定文本内容时，默认显示总计 */\n      const data = this.getTotalValue();\n      displayData = this.parseStatisticData('total', data);\n    }\n    /** 中心文本显示 */\n    let htmlContent;\n    if (this.options.htmlContent) {\n      htmlContent = this.options.htmlContent(displayData, this.getStatisticSize());\n    } else {\n      htmlContent = this.getStatisticTemplate(displayData);\n    }\n    const statisticContainer = document.createElement('div');\n    if (isType(htmlContent, 'HTMLDivElement')) {\n      // @ts-ignore\n      statisticContainer.appendChild(htmlContent);\n    } else {\n      statisticContainer.innerHTML = htmlContent;\n    }\n    return statisticContainer;\n  }\n\n  protected adjustOptions() {\n    this.html = this.getTotalHtmlString();\n    const { minX, minY, width, height } = this.view.coordinateBBox;\n    this.x = minX + width / 2;\n    this.y = minY + height / 2;\n  }\n\n  private getTotalValue() {\n    let total = 0;\n    const { angleField, colorField } = this.plot.options;\n    const { totalLabel } = this.options;\n    each(this.plot.options.data, (item) => {\n      if (typeof item[angleField] === 'number') {\n        total += item[angleField];\n      }\n    });\n    const data = {\n      [angleField]: total,\n      [colorField]: totalLabel,\n    };\n    return data;\n  }\n\n  private parseStatisticData(type: string, data, color?: string) {\n    const plot = this.plot;\n    const { angleField, colorField } = plot.options;\n    const angleScale = plot.getScaleByField(angleField);\n    const colorScale = plot.getScaleByField(colorField);\n\n    const statisticData: StatisticData = {\n      name: colorScale ? colorScale.getText(data[colorField]) : null,\n      value: angleScale.getText(data[angleField]),\n    };\n\n    if (type === 'item') {\n      // 每一个扇形区域的数据\n      statisticData.itemData = data;\n      statisticData.color = color;\n    }\n\n    return statisticData;\n  }\n\n  private getStatisticTemplate(data) {\n    const size = this.getStatisticSize();\n    const htmlString = getTemplate(data.name, data.value, this.statisticClass, size);\n    /** 更为复杂的文本要求用户自行制定html模板 */\n    return htmlString;\n  }\n\n  private getStatisticSize() {\n    const viewRange = this.plot.view.coordinateBBox;\n    const { radius, innerRadius } = this.plot.options;\n    const minContainerSize = Math.min(viewRange.width, viewRange.height);\n    const size = minContainerSize * radius * innerRadius;\n    return size;\n  }\n\n  private getStatisticHtmlString(data): string | HTMLDivElement {\n    const htmlContent = this.options.htmlContent;\n    let htmlString: string | HTMLDivElement;\n    if (htmlContent) {\n      htmlString = htmlContent(data, this.getStatisticSize());\n    } else {\n      htmlString = this.getStatisticTemplate(data);\n    }\n\n    return htmlString;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}