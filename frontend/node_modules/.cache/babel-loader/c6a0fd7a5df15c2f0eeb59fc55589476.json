{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { deepMix } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport ConnectedArea from '../../components/connected-area';\nimport BaseColumnLayer from '../column/layer';\nimport './theme';\nimport './component/label';\nimport './component/label-auto';\nimport { getGeometryByType } from '../../util/view';\n\nvar StackedColumnLayer =\n/** @class */\nfunction (_super) {\n  __extends(StackedColumnLayer, _super);\n\n  function StackedColumnLayer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'stackedColumn';\n    _this.baseType = 'column';\n    return _this;\n  }\n\n  StackedColumnLayer.getDefaultOptions = function () {\n    return deepMix({}, _super.getDefaultOptions.call(this), {\n      legend: {\n        visible: true,\n        position: 'right-top'\n      },\n      label: {\n        visible: false,\n        position: 'middle',\n        offset: 0,\n        adjustColor: true\n      },\n      connectedArea: {\n        visible: false,\n        triggerOn: 'mouseenter'\n      }\n    });\n  };\n\n  StackedColumnLayer.prototype.init = function () {\n    if (this.options.connectedArea.visible) {\n      this.options.tooltip.crosshairs = null;\n    }\n\n    _super.prototype.init.call(this);\n  };\n\n  StackedColumnLayer.prototype.afterRender = function () {\n    var props = this.options; // 绘制区域连接组件\n\n    if (props.connectedArea.visible) {\n      this.connectedArea = new ConnectedArea(__assign({\n        view: this.view,\n        field: props.stackField,\n        animation: props.animation === false ? false : true\n      }, props.connectedArea));\n    }\n\n    _super.prototype.afterRender.call(this);\n  };\n\n  StackedColumnLayer.prototype.getColorScale = function () {\n    var stackField = this.options.stackField;\n    return this.view.getScaleByField(stackField);\n  };\n\n  StackedColumnLayer.prototype.adjustColumn = function (column) {\n    column.adjust = [{\n      type: 'stack'\n    }];\n  };\n\n  StackedColumnLayer.prototype.renderLabel = function () {\n    var scales = this.config.scales;\n    var _a = this.options,\n        label = _a.label,\n        yField = _a.yField;\n    var scale = scales[yField];\n\n    if (label && label.visible) {\n      var geometry = getGeometryByType(this.view, 'interval');\n      this.doRenderLabel(geometry, __assign({\n        type: 'stacked-column',\n        formatter: scale.formatter && function (value) {\n          return scale.formatter(value);\n        }\n      }, this.options.label));\n    }\n  };\n\n  StackedColumnLayer.prototype.geometryTooltip = function () {\n    this.column.tooltip = {};\n    var tooltipOptions = this.options.tooltip;\n\n    if (tooltipOptions.fields) {\n      this.column.tooltip.fields = tooltipOptions.fields;\n    }\n\n    if (tooltipOptions.formatter) {\n      this.column.tooltip.callback = tooltipOptions.formatter;\n\n      if (!tooltipOptions.fields) {\n        this.column.tooltip.fields = [this.options.xField, this.options.yField, this.options.stackField];\n      }\n    }\n  };\n\n  return StackedColumnLayer;\n}(BaseColumnLayer);\n\nexport default StackedColumnLayer;\nregisterPlotType('stackedColumn', StackedColumnLayer);","map":{"version":3,"sources":["../../../src/plots/stacked-column/layer.ts"],"names":[],"mappings":"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","sourcesContent":["import { deepMix } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport { LayerConfig } from '../../base/layer';\nimport ConnectedArea from '../../components/connected-area';\nimport { ElementOption } from '../../interface/config';\nimport BaseColumnLayer from '../column/layer';\nimport { ColumnViewConfig } from '../column/interface';\nimport './theme';\nimport './component/label';\nimport './component/label-auto';\nimport { getGeometryByType } from '../../util/view';\nimport { Maybe } from '../../interface/types';\n\nexport interface StackedColumnViewConfig extends ColumnViewConfig {\n  stackField: string;\n  connectedArea?: any;\n}\n\nexport interface StackedColumnLayerConfig extends StackedColumnViewConfig, LayerConfig {}\n\nexport default class StackedColumnLayer<\n  T extends StackedColumnLayerConfig = StackedColumnLayerConfig\n> extends BaseColumnLayer<T> {\n  public static getDefaultOptions() {\n    return deepMix({}, super.getDefaultOptions(), {\n      legend: {\n        visible: true,\n        position: 'right-top',\n      },\n      label: {\n        visible: false,\n        position: 'middle',\n        offset: 0,\n        adjustColor: true,\n      },\n      connectedArea: {\n        visible: false,\n        triggerOn: 'mouseenter',\n      },\n    });\n  }\n\n  public type: string = 'stackedColumn';\n  public baseType: string = 'column';\n\n  public connectedArea: any;\n\n  public init() {\n    if (this.options.connectedArea.visible) {\n      this.options.tooltip.crosshairs = null;\n    }\n    super.init();\n  }\n\n  public afterRender() {\n    const props = this.options;\n    // 绘制区域连接组件\n    if (props.connectedArea.visible) {\n      this.connectedArea = new ConnectedArea({\n        view: this.view,\n        field: props.stackField,\n        animation: props.animation === false ? false : true,\n        ...props.connectedArea,\n      });\n    }\n    super.afterRender();\n  }\n\n  public getColorScale() {\n    const { stackField } = this.options;\n    return this.view.getScaleByField(stackField);\n  }\n\n  protected adjustColumn(column: ElementOption) {\n    column.adjust = [\n      {\n        type: 'stack',\n      },\n    ];\n  }\n\n  protected renderLabel() {\n    const { scales } = this.config;\n    const { label, yField } = this.options;\n    const scale = scales[yField];\n    if (label && label.visible) {\n      const geometry = getGeometryByType(this.view, 'interval');\n      this.doRenderLabel(geometry, {\n        type: 'stacked-column',\n        formatter: scale.formatter && ((value: Maybe<string | number>) => scale.formatter(value)),\n        ...this.options.label,\n      });\n    }\n  }\n\n  protected geometryTooltip() {\n    this.column.tooltip = {};\n    const tooltipOptions: any = this.options.tooltip;\n    if (tooltipOptions.fields) {\n      this.column.tooltip.fields = tooltipOptions.fields;\n    }\n    if (tooltipOptions.formatter) {\n      this.column.tooltip.callback = tooltipOptions.formatter;\n      if (!tooltipOptions.fields) {\n        this.column.tooltip.fields = [this.options.xField, this.options.yField, this.options.stackField];\n      }\n    }\n  }\n}\n\nregisterPlotType('stackedColumn', StackedColumnLayer);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}