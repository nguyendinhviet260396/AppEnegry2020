{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { registerPlotType } from '../../base/global';\nimport { deepMix, each, contains } from '@antv/util';\nimport ColumnLineLayer from '../column-line/layer';\nimport GroupedColumnLayer from '../../plots/grouped-column/layer';\nimport { getGlobalTheme } from '../../theme';\nvar defaultLineConfig = {\n  color: '#f5bc32',\n  lineSize: 4,\n  connectNull: true,\n  point: {\n    visible: false,\n    size: 3,\n    shape: 'circle',\n    style: {\n      stroke: '#fff'\n    }\n  },\n  label: {\n    visible: false\n  }\n};\nvar defaultColumnConfig = {\n  color: ['#5B8FF9', '#5AD8A6', '#5D7092', '#F6BD16', '#E8684A', '#6DC8EC', '#9270CA', '#FF9D4D', '#269A99', '#FF99C3']\n};\nvar defaultYAxisConfig = {\n  visible: true,\n  colorMapping: true,\n  grid: {\n    visible: true\n  },\n  line: {\n    visible: false\n  },\n  tickLine: {\n    visible: false\n  },\n  label: {\n    visible: true,\n    autoHide: true,\n    autoRotate: false\n  },\n  title: {\n    autoRotate: true,\n    visible: false,\n    spacing: 12\n  }\n};\n\nvar GroupedColumnLineLayer =\n/** @class */\nfunction (_super) {\n  __extends(GroupedColumnLineLayer, _super);\n\n  function GroupedColumnLineLayer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'groupedColumnLine';\n    _this.requiredField = ['xField', 'yField', 'columnGroupField'];\n    return _this;\n  }\n\n  GroupedColumnLineLayer.getDefaultOptions = function () {\n    return deepMix({}, _super.getDefaultOptions.call(this), {\n      yAxis: {\n        leftConfig: deepMix({}, defaultYAxisConfig, {\n          colorMapping: false\n        }),\n        rightConfig: defaultYAxisConfig\n      },\n      lineConfig: defaultLineConfig,\n      columnConfig: defaultColumnConfig,\n      legend: {\n        visible: true\n      }\n    });\n  };\n\n  GroupedColumnLineLayer.prototype.beforeInit = function () {\n    var _a, _b;\n\n    var _c = this,\n        options = _c.options,\n        initialOptions = _c.initialOptions;\n\n    var groupedValue = this.getValueByGroupField();\n\n    if (options.lineSeriesField) {\n      options.yAxis.rightConfig.colorMapping = false;\n\n      if (!((_a = initialOptions.lineConfig) === null || _a === void 0 ? void 0 : _a.lineSize)) {\n        options.lineConfig.lineSize = 3;\n      }\n\n      if (!((_b = initialOptions.lineConfig) === null || _b === void 0 ? void 0 : _b.color)) {\n        var _d = getGlobalTheme(),\n            colors = _d.colors,\n            colors_20 = _d.colors_20;\n\n        var seriesValue = this.getValueBySeriesField();\n        var colorSeries_1 = seriesValue.length > colors.length ? colors_20 : colors;\n        var colorPlates_1 = [];\n        var startIndex_1 = groupedValue.length;\n        each(seriesValue, function (v, index) {\n          colorPlates_1.push(colorSeries_1[index + startIndex_1]);\n        });\n        options.lineConfig.color = colorPlates_1;\n      }\n    }\n\n    var color = this.options.columnConfig.color;\n    this.options.columnConfig.color = color.slice(0, groupedValue.length);\n  };\n\n  GroupedColumnLineLayer.prototype.drawColumn = function () {\n    var _this = this;\n\n    var _a = this.options,\n        data = _a.data,\n        xField = _a.xField,\n        yField = _a.yField,\n        columnGroupField = _a.columnGroupField,\n        xAxis = _a.xAxis,\n        tooltip = _a.tooltip,\n        columnConfig = _a.columnConfig,\n        events = _a.events;\n    var column = this.createLayer(GroupedColumnLayer, data[0], __assign({\n      xField: xField,\n      yField: yField[0],\n      groupField: columnGroupField,\n      xAxis: xAxis,\n      yAxis: deepMix({}, this.yAxis(0), {\n        grid: {\n          visible: true\n        },\n        nice: true\n      }),\n      legend: {\n        visible: false\n      },\n      tooltip: deepMix({}, tooltip, {\n        showMarkers: false,\n        custom: {\n          onChange: function (containerDom, ev) {\n            _this.tooltip(containerDom, ev);\n          }\n        }\n      }),\n      events: events\n    }, columnConfig));\n    column.render();\n  };\n\n  GroupedColumnLineLayer.prototype.customLegend = function () {\n    var _this = this;\n\n    var _a = this.options,\n        yField = _a.yField,\n        legend = _a.legend;\n    var colors = this.colors;\n    var container = this.container.addGroup();\n    var legendCfg = legend;\n    var symbols = ['square', 'circle'];\n    each(this.geomLayers, function (geom, index) {\n      var legend;\n\n      if (geom.options.seriesField) {\n        var values = _this.getValueBySeriesField();\n\n        legend = _this.createNormalLegend(values, symbols[index], colors[index], legendCfg, container);\n      } else if (geom.options.groupField) {\n        var values = _this.getValueByGroupField();\n\n        legend = _this.createNormalLegend(values, symbols[index], colors[index], legendCfg, container);\n      } else {\n        legend = _this.createSingleLegend(yField[index], symbols[index], colors[index], legendCfg, container);\n      }\n\n      _this.legends.push(legend);\n    }); // 使用legend做图层筛选\n\n    each(this.geomLayers, function (geom, index) {\n      if (geom.options.seriesField) {\n        _this.multipleLegendFilter(index, geom.options.seriesField);\n      } else if (geom.options.groupField) {\n        _this.multipleLegendFilter(index, geom.options.groupField);\n      } else {\n        _this.legendFilter(index);\n      }\n    });\n  };\n\n  GroupedColumnLineLayer.prototype.getValueByGroupField = function () {\n    var _a = this.options,\n        columnGroupField = _a.columnGroupField,\n        data = _a.data;\n    var columnData = data[0];\n    var values = [];\n    each(columnData, function (d) {\n      var v = d[columnGroupField];\n\n      if (!contains(values, v)) {\n        values.push(v);\n      }\n    });\n    return values;\n  };\n\n  GroupedColumnLineLayer.prototype.getMockData = function (index) {\n    var _a = this.options,\n        xField = _a.xField,\n        yField = _a.yField,\n        columnGroupField = _a.columnGroupField;\n    var mockA = {};\n    mockA[xField] = 'null_1';\n    mockA[yField[index]] = 0;\n    mockA[columnGroupField] = 'null_a';\n    var mockB = {};\n    mockB[xField] = 'null_1';\n    mockB[yField[index]] = 1;\n    mockB[columnGroupField] = 'null_a';\n    return [mockA, mockB];\n  };\n\n  return GroupedColumnLineLayer;\n}(ColumnLineLayer);\n\nexport default GroupedColumnLineLayer;\nregisterPlotType('groupedColumnLine', GroupedColumnLineLayer);","map":{"version":3,"sources":["../../../src/combo/groupedColumn-line/layer.ts"],"names":[],"mappings":"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","sourcesContent":["import { registerPlotType } from '../../base/global';\nimport { deepMix, each, contains } from '@antv/util';\nimport { LayerConfig } from '../../base/layer';\nimport ColumnLineLayer, { ColumnLineViewConfig } from '../column-line/layer';\nimport GroupedColumnLayer from '../../plots/grouped-column/layer';\nimport { getGlobalTheme } from '../../theme';\n\nexport interface GroupedColumnLineViewConfig extends ColumnLineViewConfig {\n  columnGroupField?: string;\n}\n\ninterface GroupedColumnLineLayerConfig extends GroupedColumnLineViewConfig, LayerConfig {}\n\nconst defaultLineConfig = {\n  color: '#f5bc32',\n  lineSize: 4,\n  connectNull: true,\n  point: {\n    visible: false,\n    size: 3,\n    shape: 'circle',\n    style: {\n      stroke: '#fff',\n    },\n  },\n  label: {\n    visible: false,\n  },\n};\n\nconst defaultColumnConfig = {\n  color: ['#5B8FF9', '#5AD8A6', '#5D7092', '#F6BD16', '#E8684A', '#6DC8EC', '#9270CA', '#FF9D4D', '#269A99', '#FF99C3'],\n};\n\nconst defaultYAxisConfig = {\n  visible: true,\n  colorMapping: true,\n  grid: {\n    visible: true,\n  },\n  line: {\n    visible: false,\n  },\n  tickLine: {\n    visible: false,\n  },\n  label: {\n    visible: true,\n    autoHide: true,\n    autoRotate: false,\n  },\n  title: {\n    autoRotate: true,\n    visible: false,\n    spacing: 12,\n  },\n};\n\nexport default class GroupedColumnLineLayer<\n  T extends GroupedColumnLineLayerConfig = GroupedColumnLineLayerConfig\n> extends ColumnLineLayer<T> {\n  public static getDefaultOptions(): Partial<GroupedColumnLineLayerConfig> {\n    return deepMix({}, super.getDefaultOptions(), {\n      yAxis: {\n        leftConfig: deepMix({}, defaultYAxisConfig, { colorMapping: false }),\n        rightConfig: defaultYAxisConfig,\n      },\n      lineConfig: defaultLineConfig,\n      columnConfig: defaultColumnConfig,\n      legend: {\n        visible: true,\n      },\n    });\n  }\n\n  public type: string = 'groupedColumnLine';\n  protected requiredField: string[] = ['xField', 'yField', 'columnGroupField'];\n\n  public beforeInit() {\n    const { options, initialOptions } = this;\n    const groupedValue = this.getValueByGroupField();\n    if (options.lineSeriesField) {\n      options.yAxis.rightConfig.colorMapping = false;\n      if (!initialOptions.lineConfig?.lineSize) {\n        options.lineConfig.lineSize = 3;\n      }\n      if (!initialOptions.lineConfig?.color) {\n        const { colors, colors_20 } = getGlobalTheme();\n        const seriesValue = this.getValueBySeriesField();\n        const colorSeries = seriesValue.length > colors.length ? colors_20 : colors;\n        const colorPlates = [];\n        const startIndex = groupedValue.length;\n        each(seriesValue, (v, index) => {\n          colorPlates.push(colorSeries[index + startIndex]);\n        });\n        options.lineConfig.color = colorPlates;\n      }\n    }\n    const { color } = this.options.columnConfig;\n    this.options.columnConfig.color = color.slice(0, groupedValue.length);\n  }\n\n  protected drawColumn() {\n    const { data, xField, yField, columnGroupField, xAxis, tooltip, columnConfig, events } = this.options;\n    const column = this.createLayer(GroupedColumnLayer, data[0], {\n      xField,\n      yField: yField[0],\n      groupField: columnGroupField,\n      xAxis,\n      yAxis: deepMix({}, this.yAxis(0), {\n        grid: {\n          visible: true,\n        },\n        nice: true,\n      }),\n      legend: {\n        visible: false,\n      },\n      tooltip: deepMix({}, tooltip, {\n        showMarkers: false,\n        custom: {\n          onChange: (containerDom, ev) => {\n            this.tooltip(containerDom, ev);\n          },\n        },\n      }),\n      events,\n      ...columnConfig,\n    });\n    column.render();\n  }\n\n  protected customLegend() {\n    const { yField, legend } = this.options;\n    const { colors } = this;\n    const container = this.container.addGroup();\n    const legendCfg = legend;\n    const symbols = ['square', 'circle'];\n    each(this.geomLayers, (geom, index) => {\n      let legend;\n      if (geom.options.seriesField) {\n        const values = this.getValueBySeriesField();\n        legend = this.createNormalLegend(values, symbols[index], colors[index], legendCfg, container);\n      } else if (geom.options.groupField) {\n        const values = this.getValueByGroupField();\n        legend = this.createNormalLegend(values, symbols[index], colors[index], legendCfg, container);\n      } else {\n        legend = this.createSingleLegend(yField[index], symbols[index], colors[index], legendCfg, container);\n      }\n      this.legends.push(legend);\n    });\n    // 使用legend做图层筛选\n    each(this.geomLayers, (geom, index) => {\n      if (geom.options.seriesField) {\n        this.multipleLegendFilter(index, geom.options.seriesField);\n      } else if (geom.options.groupField) {\n        this.multipleLegendFilter(index, geom.options.groupField);\n      } else {\n        this.legendFilter(index);\n      }\n    });\n  }\n\n  protected getValueByGroupField() {\n    const { columnGroupField, data } = this.options;\n    const columnData = data[0];\n    const values = [];\n    each(columnData, (d) => {\n      const v = d[columnGroupField];\n      if (!contains(values, v)) {\n        values.push(v);\n      }\n    });\n    return values;\n  }\n\n  protected getMockData(index: number) {\n    const { xField, yField, columnGroupField } = this.options as any;\n    const mockA = {};\n    mockA[xField] = 'null_1';\n    mockA[yField[index]] = 0;\n    mockA[columnGroupField] = 'null_a';\n    const mockB = {};\n    mockB[xField] = 'null_1';\n    mockB[yField[index]] = 1;\n    mockB[columnGroupField] = 'null_a';\n    return [mockA, mockB];\n  }\n}\n\nregisterPlotType('groupedColumnLine', GroupedColumnLineLayer);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}