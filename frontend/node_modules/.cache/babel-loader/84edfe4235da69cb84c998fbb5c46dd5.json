{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { isArray } from '@antv/util';\nimport { registerShape } from '../base';\nimport { getStyle } from '../util/get-style';\nimport { getRectPath } from './util'; // 根据数据点生成 Line 的两个关键点\n\nfunction getLinePoints(pointInfo) {\n  var x = pointInfo.x,\n      y = pointInfo.y,\n      y0 = pointInfo.y0;\n\n  if (isArray(y)) {\n    return y.map(function (yItem, idx) {\n      return {\n        x: isArray(x) ? x[idx] : x,\n        y: yItem\n      };\n    });\n  } // 起始点从 y0 开始\n\n\n  return [{\n    x: x,\n    y: y0\n  }, {\n    x: x,\n    y: y\n  }];\n}\n\nregisterShape('interval', 'line', {\n  getPoints: function (shapePoint) {\n    return getLinePoints(shapePoint);\n  },\n  draw: function (cfg, container) {\n    var style = getStyle(cfg, true, false, 'lineWidth');\n    var path = this.parsePath(getRectPath(cfg.points, false));\n    var shape = container.addShape('path', {\n      attrs: __assign(__assign({}, style), {\n        path: path\n      }),\n      name: 'interval'\n    });\n    return shape;\n  },\n  getMarker: function (markerCfg) {\n    var color = markerCfg.color;\n    return {\n      symbol: function (x, y, r) {\n        return [['M', x, y - r], ['L', x, y + r]];\n      },\n      style: {\n        r: 5,\n        stroke: color\n      }\n    };\n  }\n});","map":{"version":3,"sources":["../../../../src/geometry/shape/interval/line.ts"],"names":[],"mappings":";AAAA,SAAS,OAAT,QAAwB,YAAxB;AAIA,SAAS,aAAT,QAA8B,SAA9B;AACA,SAAS,QAAT,QAAyB,mBAAzB;AACA,SAAS,WAAT,QAA4B,QAA5B,C,CAEA;;AACA,SAAS,aAAT,CAAuB,SAAvB,EAA4C;AAClC,MAAA,CAAC,GAAY,SAAS,CAArB,CAAD;AAAA,MAAG,CAAC,GAAS,SAAS,CAAlB,CAAJ;AAAA,MAAM,EAAE,GAAK,SAAS,CAAd,EAAR;;AAER,MAAI,OAAO,CAAC,CAAD,CAAX,EAAgB;AACd,WAAO,CAAC,CAAC,GAAF,CAAM,UAAC,KAAD,EAAQ,GAAR,EAAW;AACtB,aAAO;AACL,QAAA,CAAC,EAAE,OAAO,CAAC,CAAD,CAAP,GAAa,CAAC,CAAC,GAAD,CAAd,GAAsB,CADpB;AAEL,QAAA,CAAC,EAAE;AAFE,OAAP;AAID,KALM,CAAP;AAMD,GAVyC,CAY1C;;;AACA,SAAO,CACL;AAAE,IAAA,CAAC,EAAE,CAAL;AAAkB,IAAA,CAAC,EAAE;AAArB,GADK,EAEL;AAAE,IAAA,CAAC,EAAE,CAAL;AAAkB,IAAA,CAAC,EAAA;AAAnB,GAFK,CAAP;AAID;;AAED,aAAa,CAAC,UAAD,EAAa,MAAb,EAAqB;AAChC,EAAA,SAAS,EAAT,UAAU,UAAV,EAAgC;AAC9B,WAAO,aAAa,CAAC,UAAD,CAApB;AACD,GAH+B;AAIhC,EAAA,IAAI,EAAJ,UAAK,GAAL,EAAqB,SAArB,EAAsC;AACpC,QAAM,KAAK,GAAG,QAAQ,CAAC,GAAD,EAAM,IAAN,EAAY,KAAZ,EAAmB,WAAnB,CAAtB;AACA,QAAM,IAAI,GAAG,KAAK,SAAL,CAAe,WAAW,CAAC,GAAG,CAAC,MAAL,EAAwB,KAAxB,CAA1B,CAAb;AACA,QAAM,KAAK,GAAG,SAAS,CAAC,QAAV,CAAmB,MAAnB,EAA2B;AACvC,MAAA,KAAK,EAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACA,KADA,CAAA,EACK;AACR,QAAA,IAAI,EAAA;AADI,OADL,CADkC;AAKvC,MAAA,IAAI,EAAE;AALiC,KAA3B,CAAd;AAQA,WAAO,KAAP;AACD,GAhB+B;AAiBhC,EAAA,SAAS,EAAT,UAAU,SAAV,EAAmC;AACzB,QAAA,KAAK,GAAK,SAAS,CAAd,KAAL;AACR,WAAO;AACL,MAAA,MAAM,EAAE,UAAC,CAAD,EAAY,CAAZ,EAAuB,CAAvB,EAAgC;AACtC,eAAO,CACL,CAAC,GAAD,EAAM,CAAN,EAAS,CAAC,GAAG,CAAb,CADK,EAEL,CAAC,GAAD,EAAM,CAAN,EAAS,CAAC,GAAG,CAAb,CAFK,CAAP;AAID,OANI;AAOL,MAAA,KAAK,EAAE;AACL,QAAA,CAAC,EAAE,CADE;AAEL,QAAA,MAAM,EAAE;AAFH;AAPF,KAAP;AAYD;AA/B+B,CAArB,CAAb","sourcesContent":["import { isArray } from '@antv/util';\nimport { IGroup } from '../../../dependents';\nimport { Point, ShapeInfo, ShapeMarkerCfg, ShapePoint } from '../../../interface';\n\nimport { registerShape } from '../base';\nimport { getStyle } from '../util/get-style';\nimport { getRectPath } from './util';\n\n// 根据数据点生成 Line 的两个关键点\nfunction getLinePoints(pointInfo: ShapePoint): Point[] {\n  const { x, y, y0 } = pointInfo;\n\n  if (isArray(y)) {\n    return y.map((yItem, idx) => {\n      return {\n        x: isArray(x) ? x[idx] : x,\n        y: yItem,\n      };\n    });\n  }\n\n  // 起始点从 y0 开始\n  return [\n    { x: x as number, y: y0 },\n    { x: x as number, y },\n  ];\n}\n\nregisterShape('interval', 'line', {\n  getPoints(shapePoint: ShapePoint) {\n    return getLinePoints(shapePoint);\n  },\n  draw(cfg: ShapeInfo, container: IGroup) {\n    const style = getStyle(cfg, true, false, 'lineWidth');\n    const path = this.parsePath(getRectPath(cfg.points as Point[], false));\n    const shape = container.addShape('path', {\n      attrs: {\n        ...style,\n        path,\n      },\n      name: 'interval',\n    });\n\n    return shape;\n  },\n  getMarker(markerCfg: ShapeMarkerCfg) {\n    const { color } = markerCfg;\n    return {\n      symbol: (x: number, y: number, r: number) => {\n        return [\n          ['M', x, y - r],\n          ['L', x, y + r],\n        ];\n      },\n      style: {\n        r: 5,\n        stroke: color,\n      },\n    };\n  },\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}