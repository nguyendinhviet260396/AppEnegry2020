{"ast":null,"code":"import { __extends } from \"tslib\";\nimport EventEmitter from '@antv/event-emitter';\nimport { deepMix, each, findIndex, keys, contains, isFunction } from '@antv/util';\nimport { LAYER_EVENT_MAP } from '../util/event';\nimport BBox from '../util/bbox';\n\nvar Layer =\n/** @class */\nfunction (_super) {\n  __extends(Layer, _super);\n  /**\n   * layer base for g2plot\n   */\n\n\n  function Layer(props) {\n    var _this = _super.call(this) || this;\n\n    _this.layers = [];\n    _this.destroyed = false;\n    _this.visibility = true;\n    _this.rendered = false;\n    _this.eventHandlers = [];\n    _this.options = _this.getOptions(props);\n\n    _this.processOptions(_this.options);\n\n    return _this;\n  }\n\n  Layer.prototype.processOptions = function (options) {\n    this.id = options.id;\n    this.x = options.x || 0;\n    this.y = options.y || 0;\n    this.width = options.width;\n    this.height = options.height;\n    this.canvas = options.canvas;\n    this.parent = options.parent;\n  };\n\n  Layer.prototype.updateConfig = function (cfg) {\n    this.options = deepMix({}, this.options, cfg);\n    this.processOptions(this.options);\n  };\n\n  Layer.prototype.beforeInit = function () {\n    return null;\n  };\n  /**\n   * init life cycle\n   */\n\n\n  Layer.prototype.init = function () {\n    this.layerBBox = this.getLayerBBox();\n    this.layerRegion = this.getLayerRegion();\n    this.eachLayer(function (layer) {\n      layer.init();\n    });\n  };\n\n  Layer.prototype.afterInit = function () {\n    return null;\n  };\n  /**\n   * render layer recursively\n   */\n\n\n  Layer.prototype.render = function () {\n    // fixme: 等plot不再继承layer，这个就可以挪到构造函数里去，不需要再加是否render过的判断了\n    if (!this.rendered) {\n      this.container = this.parent ? this.parent.container.addGroup() : this.canvas.addGroup();\n    }\n\n    this.rendered = true;\n    this.beforeInit();\n    this.init();\n    this.afterInit(); //(this.container, [['t', this.x, this.y]]);\n\n    this.eachLayer(function (layer) {\n      layer.render();\n    });\n    this.canvas.draw();\n  };\n  /**\n   * clear layer content\n   */\n\n\n  Layer.prototype.clear = function () {\n    this.eachLayer(function (layer) {\n      layer.destroy();\n    });\n    this.layers = [];\n    this.container.clear();\n  };\n  /**\n   * destroy layer recursively, remove the container of layer\n   */\n\n\n  Layer.prototype.destroy = function () {\n    var _this = this;\n\n    this.eachLayer(function (layer) {\n      layer.destroy();\n    });\n    each(this.eventHandlers, function (h) {\n      _this.off(h.eventName, h.handler);\n    });\n    this.container.remove(true);\n    this.destroyed = true;\n  };\n  /**\n   * display layer\n   */\n\n\n  Layer.prototype.show = function () {\n    this.container.attr('visible', true);\n    this.container.set('visible', true);\n    this.visibility = true;\n    this.canvas.draw();\n  };\n  /**\n   * hide layer\n   */\n\n\n  Layer.prototype.hide = function () {\n    this.container.attr('visible', false);\n    this.container.set('visible', false);\n    this.visibility = false;\n    this.canvas.draw();\n  };\n  /**\n   * add children layer\n   * @param layer\n   */\n\n\n  Layer.prototype.addLayer = function (layer) {\n    var idx = findIndex(this.layers, function (item) {\n      return item === layer;\n    });\n\n    if (idx < 0) {\n      if (layer.parent !== this) {\n        layer.parent = this;\n        layer.init();\n      }\n\n      this.layers.push(layer);\n    }\n  };\n  /**\n   * remove children layer\n   * @param layer\n   */\n\n\n  Layer.prototype.removeLayer = function (layer) {\n    var idx = findIndex(this.layers, function (item) {\n      return item === layer;\n    });\n\n    if (idx >= 0) {\n      this.layers.splice(idx, 1);\n    }\n  };\n  /**\n   * update layer's display range\n   * @param props\n   * @param recursive whether update children layers or not\n   */\n\n\n  Layer.prototype.updateBBox = function (props, recursive) {\n    if (recursive === void 0) {\n      recursive = false;\n    }\n\n    var originRange = {\n      x: this.x,\n      y: this.y,\n      width: this.width,\n      height: this.height\n    };\n    var newRange = deepMix({}, originRange, props);\n    this.x = newRange.x;\n    this.y = newRange.y;\n    this.width = newRange.width;\n    this.height = newRange.height;\n    this.layerBBox = this.getLayerBBox();\n    this.layerRegion = this.getLayerRegion();\n    this.render();\n\n    if (recursive) {\n      this.eachLayer(function (layer) {\n        layer.updateBBoxByParent();\n        layer.render();\n      });\n    }\n\n    this.canvas.draw();\n  };\n  /**\n   * update display range according to parent layer's range\n   */\n\n\n  Layer.prototype.updateBBoxByParent = function () {\n    var region = this.layerRegion;\n    this.x = this.parent.x + this.parent.width * region.start.x;\n    this.y = this.parent.y + this.parent.height * region.start.y;\n    this.width = this.parent.width * (region.end.x - region.start.x);\n    this.height = this.parent.height * (region.end.y - region.start.y);\n    this.layerBBox = this.getLayerBBox();\n  };\n  /**\n   * get global position of layer\n   */\n\n\n  Layer.prototype.getGlobalPosition = function () {\n    var globalX = this.x;\n    var globalY = this.y;\n    var parent = this.parent;\n\n    while (parent) {\n      globalX += parent.x;\n      globalY += parent.y;\n      parent = parent.parent;\n    }\n\n    return {\n      x: globalX,\n      y: globalY\n    };\n  };\n\n  Layer.prototype.getGlobalBBox = function () {\n    var globalPosition = this.getGlobalPosition();\n    return new BBox(globalPosition.x, globalPosition.y, this.width, this.height);\n  };\n\n  Layer.prototype.getOptions = function (props) {\n    var parentWidth = 0;\n    var parentHeight = 0;\n\n    if (props.parent) {\n      parentWidth = props.parent.width;\n      parentHeight = props.parent.height;\n    }\n\n    var defaultOptions = {\n      x: 0,\n      y: 0,\n      width: parentWidth,\n      height: parentHeight\n    };\n    return deepMix({}, defaultOptions, props);\n  };\n\n  Layer.prototype.eachLayer = function (cb) {\n    each(this.layers, cb);\n  };\n\n  Layer.prototype.parseEvents = function (eventParser) {\n    var _this = this;\n\n    var eventsName = keys(LAYER_EVENT_MAP);\n    each(eventParser, function (e, k) {\n      if (contains(eventsName, k) && isFunction(e)) {\n        var eventName = LAYER_EVENT_MAP[k] || k;\n        var handler = e;\n\n        _this.on(eventName, handler);\n\n        _this.eventHandlers.push({\n          name: eventName,\n          handler: handler\n        });\n      }\n    });\n  };\n\n  Layer.prototype.getLayerBBox = function () {\n    return new BBox(this.x, this.y, this.width, this.height);\n  };\n\n  Layer.prototype.getLayerRegion = function () {\n    if (this.parent) {\n      var parentWidth = this.parent.width;\n      var parentHeight = this.parent.height;\n      var parentX = this.parent.x;\n      var parentY = this.parent.y;\n      var startX = (this.x - parentX) / parentWidth;\n      var startY = (this.y - parentY) / parentHeight;\n      var endX = (this.x + this.width - parentX) / parentWidth;\n      var endY = (this.y + this.height - parentY) / parentHeight;\n      return {\n        start: {\n          x: startX,\n          y: startY\n        },\n        end: {\n          x: endX,\n          y: endY\n        }\n      };\n    }\n\n    return {\n      start: {\n        x: 0,\n        y: 0\n      },\n      end: {\n        x: 1,\n        y: 1\n      }\n    };\n  };\n\n  return Layer;\n}(EventEmitter);\n\nexport default Layer;","map":{"version":3,"sources":["../../src/base/layer.ts"],"names":[],"mappings":"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","sourcesContent":["import EventEmitter from '@antv/event-emitter';\nimport { ICanvas, IGroup } from '../dependents';\nimport { deepMix, each, findIndex, keys, contains, isFunction } from '@antv/util';\nimport { Point } from '../interface/config';\nimport { LAYER_EVENT_MAP } from '../util/event';\nimport BBox from '../util/bbox';\n\nexport interface LayerConfig {\n  /** @ignore */\n  id?: string;\n  /** the top-left-x of layer, local position relative to the parent layer */\n  /** @ignore */\n  x?: number;\n  /** the top-left-y of layer, local position relative to the parent layer */\n  /** @ignore */\n  y?: number;\n  /** layer width */\n  width?: number;\n  /** layer height */\n  height?: number;\n  /** the parent node of layer */\n  /** @ignore */\n  parent?: any;\n  /** @ignore */\n  canvas?: ICanvas;\n  name?: string;\n}\n\nexport interface Region {\n  /** the top-left corner of layer-range, range from 0 to 1, relative to parent layer's range */\n  readonly start: Point;\n  /** the bottom-right corner of layer-range, range from 0 to 1, relative to parent layer's range */\n  readonly end: Point;\n}\n\nexport interface Range {\n  x?: number;\n  y?: number;\n  width?: number;\n  height?: number;\n}\n\nexport default class Layer<T extends LayerConfig = LayerConfig> extends EventEmitter {\n  public id: string;\n  public x: number;\n  public y: number;\n  public width: number;\n  public height: number;\n  public parent: Layer;\n  public canvas: ICanvas;\n  public layerBBox: BBox;\n  public layers: Layer[] = [];\n  public container: IGroup;\n  public destroyed: boolean = false;\n  protected visibility: boolean = true;\n  protected layerRegion: Region;\n  private rendered: boolean = false;\n  private eventHandlers: any[] = [];\n  public options: T;\n\n  /**\n   * layer base for g2plot\n   */\n  constructor(props: T) {\n    super();\n    this.options = this.getOptions(props);\n    this.processOptions(this.options);\n  }\n\n  public processOptions(options) {\n    this.id = options.id;\n    this.x = options.x || 0;\n    this.y = options.y || 0;\n    this.width = options.width;\n    this.height = options.height;\n    this.canvas = options.canvas;\n    this.parent = options.parent;\n  }\n\n  public updateConfig(cfg: Partial<T>): void {\n    this.options = deepMix({}, this.options, cfg);\n    this.processOptions(this.options);\n  }\n\n  public beforeInit() {\n    return null;\n  }\n\n  /**\n   * init life cycle\n   */\n  public init() {\n    this.layerBBox = this.getLayerBBox();\n    this.layerRegion = this.getLayerRegion();\n    this.eachLayer((layer) => {\n      layer.init();\n    });\n  }\n\n  public afterInit() {\n    return null;\n  }\n\n  /**\n   * render layer recursively\n   */\n  public render() {\n    // fixme: 等plot不再继承layer，这个就可以挪到构造函数里去，不需要再加是否render过的判断了\n    if (!this.rendered) {\n      this.container = this.parent ? this.parent.container.addGroup() : this.canvas.addGroup();\n    }\n    this.rendered = true;\n    this.beforeInit();\n    this.init();\n    this.afterInit();\n    //(this.container, [['t', this.x, this.y]]);\n    this.eachLayer((layer) => {\n      layer.render();\n    });\n    this.canvas.draw();\n  }\n\n  /**\n   * clear layer content\n   */\n  public clear() {\n    this.eachLayer((layer) => {\n      layer.destroy();\n    });\n    this.layers = [];\n    this.container.clear();\n  }\n\n  /**\n   * destroy layer recursively, remove the container of layer\n   */\n  public destroy() {\n    this.eachLayer((layer) => {\n      layer.destroy();\n    });\n    each(this.eventHandlers, (h) => {\n      this.off(h.eventName, h.handler);\n    });\n    this.container.remove(true);\n    this.destroyed = true;\n  }\n\n  /**\n   * display layer\n   */\n  public show() {\n    this.container.attr('visible', true);\n    this.container.set('visible', true);\n    this.visibility = true;\n    this.canvas.draw();\n  }\n\n  /**\n   * hide layer\n   */\n  public hide() {\n    this.container.attr('visible', false);\n    this.container.set('visible', false);\n    this.visibility = false;\n    this.canvas.draw();\n  }\n\n  /**\n   * add children layer\n   * @param layer\n   */\n  public addLayer(layer: Layer<any>) {\n    const idx = findIndex(this.layers, (item) => item === layer);\n    if (idx < 0) {\n      if (layer.parent !== this) {\n        layer.parent = this;\n        layer.init();\n      }\n      this.layers.push(layer);\n    }\n  }\n\n  /**\n   * remove children layer\n   * @param layer\n   */\n  public removeLayer(layer: Layer<any>) {\n    const idx = findIndex(this.layers, (item) => item === layer);\n    if (idx >= 0) {\n      this.layers.splice(idx, 1);\n    }\n  }\n\n  /**\n   * update layer's display range\n   * @param props\n   * @param recursive whether update children layers or not\n   */\n  public updateBBox(props: Range, recursive: boolean = false) {\n    const originRange = {\n      x: this.x,\n      y: this.y,\n      width: this.width,\n      height: this.height,\n    };\n    const newRange = deepMix({}, originRange, props);\n    this.x = newRange.x;\n    this.y = newRange.y;\n    this.width = newRange.width;\n    this.height = newRange.height;\n    this.layerBBox = this.getLayerBBox();\n    this.layerRegion = this.getLayerRegion();\n    this.render();\n    if (recursive) {\n      this.eachLayer((layer) => {\n        layer.updateBBoxByParent();\n        layer.render();\n      });\n    }\n    this.canvas.draw();\n  }\n\n  /**\n   * update display range according to parent layer's range\n   */\n  public updateBBoxByParent() {\n    const region = this.layerRegion;\n    this.x = this.parent.x + this.parent.width * region.start.x;\n    this.y = this.parent.y + this.parent.height * region.start.y;\n    this.width = this.parent.width * (region.end.x - region.start.x);\n    this.height = this.parent.height * (region.end.y - region.start.y);\n    this.layerBBox = this.getLayerBBox();\n  }\n\n  /**\n   * get global position of layer\n   */\n  public getGlobalPosition() {\n    let globalX = this.x;\n    let globalY = this.y;\n    let parent = this.parent;\n    while (parent) {\n      globalX += parent.x;\n      globalY += parent.y;\n      parent = parent.parent;\n    }\n    return { x: globalX, y: globalY };\n  }\n\n  public getGlobalBBox() {\n    const globalPosition = this.getGlobalPosition();\n    return new BBox(globalPosition.x, globalPosition.y, this.width, this.height);\n  }\n\n  public getOptions(props: Partial<T>): T {\n    let parentWidth = 0;\n    let parentHeight = 0;\n    if (props.parent) {\n      parentWidth = props.parent.width;\n      parentHeight = props.parent.height;\n    }\n    const defaultOptions = {\n      x: 0,\n      y: 0,\n      width: parentWidth,\n      height: parentHeight,\n    };\n    return deepMix({}, defaultOptions, props);\n  }\n\n  public eachLayer(cb: (layer: Layer<any>) => void) {\n    each(this.layers, cb);\n  }\n\n  protected parseEvents(eventParser?) {\n    const eventsName = keys(LAYER_EVENT_MAP);\n    each(eventParser, (e, k) => {\n      if (contains(eventsName, k) && isFunction(e)) {\n        const eventName = LAYER_EVENT_MAP[k] || k;\n        const handler = e;\n        this.on(eventName, handler);\n        this.eventHandlers.push({ name: eventName, handler });\n      }\n    });\n  }\n\n  private getLayerBBox() {\n    return new BBox(this.x, this.y, this.width, this.height);\n  }\n\n  private getLayerRegion() {\n    if (this.parent) {\n      const parentWidth = this.parent.width;\n      const parentHeight = this.parent.height;\n      const parentX = this.parent.x;\n      const parentY = this.parent.y;\n      const startX = (this.x - parentX) / parentWidth;\n      const startY = (this.y - parentY) / parentHeight;\n      const endX = (this.x + this.width - parentX) / parentWidth;\n      const endY = (this.y + this.height - parentY) / parentHeight;\n      return { start: { x: startX, y: startY }, end: { x: endX, y: endY } };\n    }\n    return { start: { x: 0, y: 0 }, end: { x: 1, y: 1 } };\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}