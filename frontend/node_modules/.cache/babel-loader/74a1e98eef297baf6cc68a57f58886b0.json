{"ast":null,"code":"import { __spreadArrays } from \"tslib\";\nimport { COMPONENT_TYPE } from '../dependents';\n/**\n * 判断text是否可用, title description\n *\n * @param source\n */\n\nexport function isTextUsable(source) {\n  if (!source) return false;\n  if (source.visible === true && typeof source.text === 'string' && source.text.trim()) return true;\n  return false;\n}\n/**\n * 为字符串添加换行符\n * @param source - 字符串数组 ['a', 'b', 'c']\n * @param breaks - 要添加换行的index\n *\n * @example\n * ```js\n * breakText(['a','b','c'], [1])\n *\n * // a\\nbc\n * ```\n */\n\nexport function breakText(source, breaks) {\n  var result = __spreadArrays(source);\n\n  breaks.forEach(function (pos, index) {\n    result.splice(pos + index, 0, '\\n');\n  });\n  return result.join('');\n}\n/**\n * 获取 View 中所有的 Axis 组件\n */\n\nexport function getAxisComponents(view) {\n  return view.getComponents().filter(function (co) {\n    return co.type === COMPONENT_TYPE.AXIS;\n  }).map(function (co) {\n    return co.component;\n  });\n}\nexport function getLegendComponents(view) {\n  return view.getComponents().filter(function (co) {\n    return co.type === COMPONENT_TYPE.LEGEND;\n  }).map(function (co) {\n    return co.component;\n  });\n}\nexport function getAxisShapes(view) {\n  var axisShape = view.backgroundGroup.findAll(function (el) {\n    if (el.get('name')) {\n      var name_1 = el.get('name').split('-');\n      return name_1[0] === 'axis';\n    }\n  });\n  return axisShape;\n}\nexport function getLegendShapes(view) {\n  var axisShape = view.foregroundGroup.findAll(function (el) {\n    if (el.get('name')) {\n      return el.get('name') === 'legend-item-group';\n    }\n  });\n  return axisShape;\n}\nexport function sortedLastIndex(arr, val) {\n  var i = arr.length;\n\n  while (i > 0) {\n    if (val >= arr[i - 1]) {\n      break;\n    }\n\n    i -= 1;\n  }\n\n  return i;\n}\n/* 检测两个label包围盒是否重叠 */\n\nexport function isBBoxIntersect(bboxA, bboxB) {\n  if (bboxA.maxY < bboxB.minY || bboxB.maxY < bboxA.minY) {\n    return false;\n  }\n\n  if (bboxA.maxX < bboxB.minX || bboxB.maxX < bboxA.minX) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * 判断是否移动端环境\n */\n\nexport function isMobile() {\n  return !!navigator.userAgent.match(/(Mobile)|(Android)|(WebOS)|(iPhone)|(iPad)/);\n}","map":{"version":3,"sources":["../../src/util/common.ts"],"names":[],"mappings":"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","sourcesContent":["import { View, Axis, Legend, COMPONENT_TYPE, BBox } from '../dependents';\n\n/**\n * 判断text是否可用, title description\n *\n * @param source\n */\nexport function isTextUsable(source?: { visible?: boolean; text?: string }): boolean {\n  if (!source) return false;\n  if (source.visible === true && typeof source.text === 'string' && source.text.trim()) return true;\n  return false;\n}\n\n/**\n * 为字符串添加换行符\n * @param source - 字符串数组 ['a', 'b', 'c']\n * @param breaks - 要添加换行的index\n *\n * @example\n * ```js\n * breakText(['a','b','c'], [1])\n *\n * // a\\nbc\n * ```\n */\nexport function breakText(source: string[], breaks: number[]): string {\n  const result = [...source];\n  breaks.forEach((pos, index) => {\n    result.splice(pos + index, 0, '\\n');\n  });\n  return result.join('');\n}\n\n/**\n * 获取 View 中所有的 Axis 组件\n */\nexport function getAxisComponents(view: View): Axis.Base[] {\n  return (view\n    .getComponents()\n    .filter((co) => co.type === COMPONENT_TYPE.AXIS)\n    .map((co) => co.component) as unknown) as Axis.Base[];\n}\n\nexport function getLegendComponents(view: View): Legend.Base[] {\n  return (view\n    .getComponents()\n    .filter((co) => co.type === COMPONENT_TYPE.LEGEND)\n    .map((co) => co.component) as unknown) as Legend.Base[];\n}\n\nexport function getAxisShapes(view) {\n  const axisShape = view.backgroundGroup.findAll((el) => {\n    if (el.get('name')) {\n      const name = el.get('name').split('-');\n      return name[0] === 'axis';\n    }\n  });\n  return axisShape;\n}\n\nexport function getLegendShapes(view) {\n  const axisShape = view.foregroundGroup.findAll((el) => {\n    if (el.get('name')) {\n      return el.get('name') === 'legend-item-group';\n    }\n  });\n  return axisShape;\n}\n\nexport function sortedLastIndex<T>(arr: T[], val: T): number {\n  let i = arr.length;\n  while (i > 0) {\n    if (val >= arr[i - 1]) {\n      break;\n    }\n    i -= 1;\n  }\n  return i;\n}\n\n/* 检测两个label包围盒是否重叠 */\nexport function isBBoxIntersect(bboxA: BBox, bboxB: BBox) {\n  if (bboxA.maxY < bboxB.minY || bboxB.maxY < bboxA.minY) {\n    return false;\n  }\n  if (bboxA.maxX < bboxB.minX || bboxB.maxX < bboxA.minX) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * 判断是否移动端环境\n */\nexport function isMobile() {\n  return !!navigator.userAgent.match(/(Mobile)|(Android)|(WebOS)|(iPhone)|(iPad)/);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}