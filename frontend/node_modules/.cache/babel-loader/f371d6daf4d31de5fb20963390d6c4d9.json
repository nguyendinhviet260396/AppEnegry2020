{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { deepMix, each, hasKey } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport ViewLayer from '../../base/view-layer';\nimport squarify from './layout/squarify';\nimport { INTERACTION_MAP } from './interaction';\nimport * as EventParser from './event';\nimport TreemapLabel from './components/label';\nvar PARENT_NODE_OFFSET = 4;\nvar BLOCK_MARGIN = 4;\n\nvar TreemapLayer =\n/** @class */\nfunction (_super) {\n  __extends(TreemapLayer, _super);\n\n  function TreemapLayer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'treemap';\n    return _this;\n  }\n\n  TreemapLayer.getDefaultOptions = function () {\n    return deepMix({}, _super.getDefaultOptions.call(this), {\n      maxLevel: 2,\n      padding: [0, 0, 0, 0],\n      tooltip: {\n        visible: false,\n        showTitle: false,\n        showCrosshairs: false,\n        showMarkers: false,\n        shared: false\n      },\n      legend: {\n        visible: false\n      },\n      xAxis: {\n        visible: false\n      },\n      yAxis: {\n        visible: false\n      },\n      xField: 'x',\n      yField: 'y',\n      label: {\n        visible: true,\n        adjustPosition: true,\n        style: {\n          stroke: 'rgba(0,0,0,0)',\n          lineWidth: 0,\n          fontSize: 12\n        }\n      },\n      meta: {\n        x: {\n          nice: false\n        },\n        y: {\n          nice: false\n        }\n      },\n      interactions: [{\n        type: 'tooltip'\n      }]\n    });\n  };\n\n  TreemapLayer.prototype.beforeInit = function () {\n    var _this = this;\n\n    _super.prototype.beforeInit.call(this);\n\n    var interactions = this.options.interactions;\n\n    if (interactions) {\n      each(interactions, function (interaction) {\n        if (interaction.type === 'drilldown') {\n          _this.isDrilldown = true;\n          _this.options.maxLevel = 1;\n        }\n      });\n    }\n\n    var data = this.options.data;\n    var treemapData = this.getTreemapData(data);\n    this.rootData = treemapData;\n  };\n\n  TreemapLayer.prototype.afterRender = function () {\n    _super.prototype.afterRender.call(this);\n\n    if (this.options.label && this.options.label.visible) {\n      var label = new TreemapLabel(__assign({\n        view: this.view,\n        plot: this\n      }, this.options.label));\n      label.render();\n    }\n  };\n\n  TreemapLayer.prototype.geometryParser = function () {\n    return 'polygon';\n  };\n\n  TreemapLayer.prototype.getTreemapData = function (data, level) {\n    var viewRange = this.getViewRange();\n    var root = squarify(data, viewRange.x, viewRange.y, viewRange.width, viewRange.height);\n    this.recursive(root, 1);\n    var treemapData = [];\n    this.getAllNodes(root, treemapData, level);\n    treemapData.sort(function (a, b) {\n      return a.depth - b.depth;\n    });\n    this.options.xField = 'x';\n    this.options.yField = 'y';\n    return treemapData;\n  };\n\n  TreemapLayer.prototype.processData = function () {\n    return this.rootData;\n  };\n\n  TreemapLayer.prototype.coord = function () {\n    return;\n  };\n\n  TreemapLayer.prototype.addGeometry = function () {\n    var _this = this;\n\n    var _a = this.options,\n        data = _a.data,\n        colorField = _a.colorField,\n        color = _a.color;\n    var treemapData = this.getTreemapData(data);\n    this.rootData = treemapData;\n    var isNested = this.isNested(treemapData);\n    this.rect = {\n      type: 'polygon',\n      position: {\n        fields: ['x', 'y']\n      },\n      color: {\n        fields: [colorField],\n        values: color\n      },\n      style: {\n        fields: ['depth'],\n        callback: function (d) {\n          var defaultStyle = _this.adjustStyleByDepth(d, isNested);\n\n          return deepMix({}, defaultStyle, _this.options.rectStyle);\n        }\n      },\n      tooltip: {\n        fields: ['name', 'value']\n      }\n    };\n\n    if (this.options.tooltip && this.options.tooltip.formatter) {\n      this.rect.tooltip.callback = this.options.tooltip.formatter;\n    }\n\n    this.setConfig('geometry', this.rect);\n  };\n\n  TreemapLayer.prototype.applyInteractions = function () {\n    var _this = this;\n\n    var interactionCfg = this.options.interactions;\n    var interactions = this.view.interactions;\n    each(interactionCfg, function (inter) {\n      var Ctr = INTERACTION_MAP[inter.type];\n\n      if (Ctr) {\n        var interaction = new Ctr(deepMix({}, {\n          view: _this.view,\n          plot: _this,\n          startEvent: 'polygon:click'\n        }, inter.cfg, Ctr.getInteractionRange(_this.layerBBox, inter.cfg)));\n        interactions[inter.type] = interaction;\n      }\n    });\n  };\n\n  TreemapLayer.prototype.animation = function () {\n    _super.prototype.animation.call(this);\n\n    if (this.isDrilldown) {\n      this.rect.animate = false;\n    }\n  };\n\n  TreemapLayer.prototype.parseEvents = function () {\n    _super.prototype.parseEvents.call(this, EventParser);\n  };\n\n  TreemapLayer.prototype.recursive = function (rows, depth) {\n    var _this = this;\n\n    var colorField = this.options.colorField;\n    each(rows, function (r) {\n      each(r.children, function (c) {\n        c.depth = depth;\n        if (depth > 1) c.parent = r;\n\n        if (!hasKey(c, colorField)) {\n          c[colorField] = r[colorField];\n        }\n\n        c.showLabel = true;\n\n        var leaf = _this.isLeaf(c);\n\n        if (!leaf) {\n          var cliperHeight = Math.abs(c.y1 - c.y0);\n\n          var labelHeight = _this.getLabelHeight();\n\n          var parentLabelOffset = cliperHeight / 2 > labelHeight ? labelHeight : BLOCK_MARGIN;\n          c.showLabel = parentLabelOffset === BLOCK_MARGIN ? false : true;\n          var c_rows = squarify(c, c.x0 + BLOCK_MARGIN, c.y0 + parentLabelOffset, c.x1 - BLOCK_MARGIN, c.y1 - BLOCK_MARGIN);\n\n          _this.fillColorField(c_rows, colorField, c[colorField]);\n\n          _this.recursive(c_rows, c.depth + 1);\n        }\n      });\n    });\n  };\n\n  TreemapLayer.prototype.getAllNodes = function (data, nodes, level) {\n    var _this = this;\n\n    var max = level ? level : this.options.maxLevel;\n    var viewRange = this.getViewRange();\n    each(data, function (d) {\n      if (hasKey(d, 'x0') && d.depth <= max) {\n        nodes.push(__assign(__assign({}, d), {\n          x: [d.x0, d.x1, d.x1, d.x0],\n          y: [viewRange.height - d.y1, viewRange.height - d.y1, viewRange.height - d.y0, viewRange.height - d.y0]\n        }));\n      }\n\n      if (hasKey(d, 'children')) {\n        _this.getAllNodes(d.children, nodes);\n      }\n    });\n  };\n\n  TreemapLayer.prototype.fillColorField = function (rows, fieldName, value) {\n    each(rows, function (r) {\n      if (!hasKey(r, fieldName)) {\n        r[fieldName] = value;\n      }\n    });\n  };\n\n  TreemapLayer.prototype.getLabelHeight = function () {\n    var label = this.options.label;\n    var fontSize = this.getPlotTheme().label.style.fontSize;\n    var size = 0;\n\n    if (label && label.visible) {\n      var labelStyle = label.style;\n      size = labelStyle && labelStyle.fontSize ? labelStyle.fontSize : fontSize;\n    }\n\n    return size + PARENT_NODE_OFFSET * 2;\n  };\n\n  TreemapLayer.prototype.isLeaf = function (data) {\n    return !data.children || data.children.length === 0;\n  };\n\n  TreemapLayer.prototype.isNested = function (data) {\n    var maxLevel = this.options.maxLevel;\n\n    if (maxLevel === 1) {\n      return false;\n    }\n\n    var nested = false;\n\n    for (var i = 0; i < data.length; i++) {\n      if (data[i].children) {\n        nested = true;\n        break;\n      }\n    }\n\n    return nested;\n  };\n\n  TreemapLayer.prototype.adjustStyleByDepth = function (depth, isNested) {\n    var maxLevel = this.options.maxLevel;\n\n    if (!isNested) {\n      return {\n        lineWidth: 1,\n        stroke: 'rgba(0,0,0,0.9)',\n        opacity: 0.9\n      };\n    } else if (depth === 1) {\n      return {\n        lineWidth: 1,\n        stroke: 'black',\n        opacity: depth / maxLevel\n      };\n    } else {\n      return {\n        lineWidth: 1,\n        stroke: 'rgba(0,0,0,0.3)',\n        opacity: depth / maxLevel\n      };\n    }\n  };\n\n  return TreemapLayer;\n}(ViewLayer);\n\nexport default TreemapLayer;\nregisterPlotType('treemap', TreemapLayer);","map":{"version":3,"sources":["../../../src/plots/treemap/layer.ts"],"names":[],"mappings":";AAAA,SAAS,OAAT,EAAkB,IAAlB,EAAwB,MAAxB,QAAsC,YAAtC;AACA,SAAS,gBAAT,QAAiC,mBAAjC;AAEA,OAAO,SAAP,MAAsC,uBAAtC;AACA,OAAO,QAAP,MAAqB,mBAArB;AACA,SAAS,eAAT,QAAgC,eAAhC;AACA,OAAO,KAAK,WAAZ,MAA6B,SAA7B;AACA,OAAO,YAAP,MAAiD,oBAAjD;AAIA,IAAM,kBAAkB,GAAG,CAA3B;AACA,IAAM,YAAY,GAAG,CAArB;;AAgBA,IAAA,YAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA6F,EAAA,SAAA,CAAA,YAAA,EAAA,MAAA,CAAA;;AAA7F,WAAA,YAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;;AA2CS,IAAA,KAAA,CAAA,IAAA,GAAe,SAAf;;AAuOR;;AAjRe,EAAA,YAAA,CAAA,iBAAA,GAAd,YAAA;AACE,WAAO,OAAO,CAAC,EAAD,EAAK,MAAA,CAAM,iBAAN,CAAuB,IAAvB,CAAuB,IAAvB,CAAL,EAAgC;AAC5C,MAAA,QAAQ,EAAE,CADkC;AAE5C,MAAA,OAAO,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAFmC;AAG5C,MAAA,OAAO,EAAE;AACP,QAAA,OAAO,EAAE,KADF;AAEP,QAAA,SAAS,EAAE,KAFJ;AAGP,QAAA,cAAc,EAAE,KAHT;AAIP,QAAA,WAAW,EAAE,KAJN;AAKP,QAAA,MAAM,EAAE;AALD,OAHmC;AAU5C,MAAA,MAAM,EAAE;AACN,QAAA,OAAO,EAAE;AADH,OAVoC;AAa5C,MAAA,KAAK,EAAE;AACL,QAAA,OAAO,EAAE;AADJ,OAbqC;AAgB5C,MAAA,KAAK,EAAE;AACL,QAAA,OAAO,EAAE;AADJ,OAhBqC;AAmB5C,MAAA,MAAM,EAAE,GAnBoC;AAoB5C,MAAA,MAAM,EAAE,GApBoC;AAqB5C,MAAA,KAAK,EAAE;AACL,QAAA,OAAO,EAAE,IADJ;AAEL,QAAA,cAAc,EAAE,IAFX;AAGL,QAAA,KAAK,EAAE;AACL,UAAA,MAAM,EAAE,eADH;AAEL,UAAA,SAAS,EAAE,CAFN;AAGL,UAAA,QAAQ,EAAE;AAHL;AAHF,OArBqC;AA8B5C,MAAA,IAAI,EAAE;AACJ,QAAA,CAAC,EAAE;AACD,UAAA,IAAI,EAAE;AADL,SADC;AAIJ,QAAA,CAAC,EAAE;AACD,UAAA,IAAI,EAAE;AADL;AAJC,OA9BsC;AAsC5C,MAAA,YAAY,EAAE,CAAC;AAAE,QAAA,IAAI,EAAE;AAAR,OAAD;AAtC8B,KAAhC,CAAd;AAwCD,GAzCa;;AA+CP,EAAA,YAAA,CAAA,SAAA,CAAA,UAAA,GAAP,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACE,IAAA,MAAA,CAAA,SAAA,CAAM,UAAN,CAAgB,IAAhB,CAAgB,IAAhB;;AACQ,QAAA,YAAY,GAAK,KAAK,OAAL,CAAL,YAAZ;;AACR,QAAI,YAAJ,EAAkB;AAChB,MAAA,IAAI,CAAC,YAAD,EAAe,UAAC,WAAD,EAAY;AAC7B,YAAI,WAAW,CAAC,IAAZ,KAAqB,WAAzB,EAAsC;AACpC,UAAA,KAAI,CAAC,WAAL,GAAmB,IAAnB;AACA,UAAA,KAAI,CAAC,OAAL,CAAa,QAAb,GAAwB,CAAxB;AACD;AACF,OALG,CAAJ;AAMD;;AACO,QAAA,IAAI,GAAK,KAAK,OAAL,CAAL,IAAJ;AACR,QAAM,WAAW,GAAG,KAAK,cAAL,CAAoB,IAApB,CAApB;AACA,SAAK,QAAL,GAAgB,WAAhB;AACD,GAdM;;AAgBA,EAAA,YAAA,CAAA,SAAA,CAAA,WAAA,GAAP,YAAA;AACE,IAAA,MAAA,CAAA,SAAA,CAAM,WAAN,CAAiB,IAAjB,CAAiB,IAAjB;;AACA,QAAI,KAAK,OAAL,CAAa,KAAb,IAAsB,KAAK,OAAL,CAAa,KAAb,CAAmB,OAA7C,EAAsD;AACpD,UAAM,KAAK,GAAG,IAAI,YAAJ,CAAgB,QAAA,CAAA;AAC5B,QAAA,IAAI,EAAE,KAAK,IADiB;AAE5B,QAAA,IAAI,EAAE;AAFsB,OAAA,EAGzB,KAAK,OAAL,CAAa,KAHY,CAAhB,CAAd;AAKA,MAAA,KAAK,CAAC,MAAN;AACD;AACF,GAVM;;AAYG,EAAA,YAAA,CAAA,SAAA,CAAA,cAAA,GAAV,YAAA;AACE,WAAO,SAAP;AACD,GAFS;;AAIH,EAAA,YAAA,CAAA,SAAA,CAAA,cAAA,GAAP,UAAsB,IAAtB,EAA4B,KAA5B,EAAkC;AAChC,QAAM,SAAS,GAAG,KAAK,YAAL,EAAlB;AACA,QAAM,IAAI,GAAG,QAAQ,CAAC,IAAD,EAAO,SAAS,CAAC,CAAjB,EAAoB,SAAS,CAAC,CAA9B,EAAiC,SAAS,CAAC,KAA3C,EAAkD,SAAS,CAAC,MAA5D,CAArB;AACA,SAAK,SAAL,CAAe,IAAf,EAAqB,CAArB;AACA,QAAM,WAAW,GAAG,EAApB;AACA,SAAK,WAAL,CAAiB,IAAjB,EAAuB,WAAvB,EAAoC,KAApC;AACA,IAAA,WAAW,CAAC,IAAZ,CAAiB,UAAC,CAAD,EAAI,CAAJ,EAAK;AACpB,aAAO,CAAC,CAAC,KAAF,GAAU,CAAC,CAAC,KAAnB;AACD,KAFD;AAGA,SAAK,OAAL,CAAa,MAAb,GAAsB,GAAtB;AACA,SAAK,OAAL,CAAa,MAAb,GAAsB,GAAtB;AACA,WAAO,WAAP;AACD,GAZM;;AAcG,EAAA,YAAA,CAAA,SAAA,CAAA,WAAA,GAAV,YAAA;AACE,WAAO,KAAK,QAAZ;AACD,GAFS;;AAIA,EAAA,YAAA,CAAA,SAAA,CAAA,KAAA,GAAV,YAAA;AACE;AACD,GAFS;;AAIA,EAAA,YAAA,CAAA,SAAA,CAAA,WAAA,GAAV,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACQ,QAAA,EAAA,GAA8B,KAAK,OAAnC;AAAA,QAAE,IAAI,GAAA,EAAA,CAAA,IAAN;AAAA,QAAQ,UAAU,GAAA,EAAA,CAAA,UAAlB;AAAA,QAAoB,KAAK,GAAA,EAAA,CAAA,KAAzB;AACN,QAAM,WAAW,GAAG,KAAK,cAAL,CAAoB,IAApB,CAApB;AACA,SAAK,QAAL,GAAgB,WAAhB;AACA,QAAM,QAAQ,GAAG,KAAK,QAAL,CAAc,WAAd,CAAjB;AACA,SAAK,IAAL,GAAY;AACV,MAAA,IAAI,EAAE,SADI;AAEV,MAAA,QAAQ,EAAE;AACR,QAAA,MAAM,EAAE,CAAC,GAAD,EAAM,GAAN;AADA,OAFA;AAKV,MAAA,KAAK,EAAE;AACL,QAAA,MAAM,EAAE,CAAC,UAAD,CADH;AAEL,QAAA,MAAM,EAAE;AAFH,OALG;AASV,MAAA,KAAK,EAAE;AACL,QAAA,MAAM,EAAE,CAAC,OAAD,CADH;AAEL,QAAA,QAAQ,EAAE,UAAC,CAAD,EAAE;AACV,cAAM,YAAY,GAAG,KAAI,CAAC,kBAAL,CAAwB,CAAxB,EAA2B,QAA3B,CAArB;;AACA,iBAAO,OAAO,CAAC,EAAD,EAAK,YAAL,EAAmB,KAAI,CAAC,OAAL,CAAa,SAAhC,CAAd;AACD;AALI,OATG;AAgBV,MAAA,OAAO,EAAE;AACP,QAAA,MAAM,EAAE,CAAC,MAAD,EAAS,OAAT;AADD;AAhBC,KAAZ;;AAoBA,QAAI,KAAK,OAAL,CAAa,OAAb,IAAwB,KAAK,OAAL,CAAa,OAAb,CAAqB,SAAjD,EAA4D;AAC1D,WAAK,IAAL,CAAU,OAAV,CAAkB,QAAlB,GAA6B,KAAK,OAAL,CAAa,OAAb,CAAqB,SAAlD;AACD;;AACD,SAAK,SAAL,CAAe,UAAf,EAA2B,KAAK,IAAhC;AACD,GA7BS;;AA+BA,EAAA,YAAA,CAAA,SAAA,CAAA,iBAAA,GAAV,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACE,QAAM,cAAc,GAAG,KAAK,OAAL,CAAa,YAApC;AACA,QAAM,YAAY,GAAG,KAAK,IAAL,CAAU,YAA/B;AACA,IAAA,IAAI,CAAC,cAAD,EAAiB,UAAC,KAAD,EAAM;AACzB,UAAM,GAAG,GAAG,eAAe,CAAC,KAAK,CAAC,IAAP,CAA3B;;AACA,UAAI,GAAJ,EAAS;AACP,YAAM,WAAW,GAAG,IAAI,GAAJ,CAClB,OAAO,CACL,EADK,EAEL;AACE,UAAA,IAAI,EAAE,KAAI,CAAC,IADb;AAEE,UAAA,IAAI,EAAE,KAFR;AAGE,UAAA,UAAU,EAAE;AAHd,SAFK,EAOL,KAAK,CAAC,GAPD,EAQL,GAAG,CAAC,mBAAJ,CAAwB,KAAI,CAAC,SAA7B,EAAwC,KAAK,CAAC,GAA9C,CARK,CADW,CAApB;AAYA,QAAA,YAAY,CAAC,KAAK,CAAC,IAAP,CAAZ,GAA2B,WAA3B;AACD;AACF,KAjBG,CAAJ;AAkBD,GArBS;;AAuBA,EAAA,YAAA,CAAA,SAAA,CAAA,SAAA,GAAV,YAAA;AACE,IAAA,MAAA,CAAA,SAAA,CAAM,SAAN,CAAe,IAAf,CAAe,IAAf;;AACA,QAAI,KAAK,WAAT,EAAsB;AACpB,WAAK,IAAL,CAAU,OAAV,GAAoB,KAApB;AACD;AACF,GALS;;AAOA,EAAA,YAAA,CAAA,SAAA,CAAA,WAAA,GAAV,YAAA;AACE,IAAA,MAAA,CAAA,SAAA,CAAM,WAAN,CAAiB,IAAjB,CAAiB,IAAjB,EAAkB,WAAlB;AACD,GAFS;;AAIF,EAAA,YAAA,CAAA,SAAA,CAAA,SAAA,GAAR,UAAkB,IAAlB,EAAwB,KAAxB,EAA8B;AAA9B,QAAA,KAAA,GAAA,IAAA;;AACU,QAAA,UAAU,GAAK,KAAK,OAAL,CAAL,UAAV;AACR,IAAA,IAAI,CAAC,IAAD,EAAO,UAAC,CAAD,EAAE;AACX,MAAA,IAAI,CAAC,CAAC,CAAC,QAAH,EAAa,UAAC,CAAD,EAAE;AACjB,QAAA,CAAC,CAAC,KAAF,GAAU,KAAV;AACA,YAAI,KAAK,GAAG,CAAZ,EAAe,CAAC,CAAC,MAAF,GAAW,CAAX;;AACf,YAAI,CAAC,MAAM,CAAC,CAAD,EAAI,UAAJ,CAAX,EAA4B;AAC1B,UAAA,CAAC,CAAC,UAAD,CAAD,GAAgB,CAAC,CAAC,UAAD,CAAjB;AACD;;AACD,QAAA,CAAC,CAAC,SAAF,GAAc,IAAd;;AACA,YAAM,IAAI,GAAG,KAAI,CAAC,MAAL,CAAY,CAAZ,CAAb;;AACA,YAAI,CAAC,IAAL,EAAW;AACT,cAAM,YAAY,GAAG,IAAI,CAAC,GAAL,CAAS,CAAC,CAAC,EAAF,GAAO,CAAC,CAAC,EAAlB,CAArB;;AACA,cAAM,WAAW,GAAG,KAAI,CAAC,cAAL,EAApB;;AACA,cAAM,iBAAiB,GAAG,YAAY,GAAG,CAAf,GAAmB,WAAnB,GAAiC,WAAjC,GAA+C,YAAzE;AACA,UAAA,CAAC,CAAC,SAAF,GAAc,iBAAiB,KAAK,YAAtB,GAAqC,KAArC,GAA6C,IAA3D;AACA,cAAM,MAAM,GAAG,QAAQ,CACrB,CADqB,EAErB,CAAC,CAAC,EAAF,GAAO,YAFc,EAGrB,CAAC,CAAC,EAAF,GAAO,iBAHc,EAIrB,CAAC,CAAC,EAAF,GAAO,YAJc,EAKrB,CAAC,CAAC,EAAF,GAAO,YALc,CAAvB;;AAOA,UAAA,KAAI,CAAC,cAAL,CAAoB,MAApB,EAA4B,UAA5B,EAAwC,CAAC,CAAC,UAAD,CAAzC;;AACA,UAAA,KAAI,CAAC,SAAL,CAAe,MAAf,EAAuB,CAAC,CAAC,KAAF,GAAU,CAAjC;AACD;AACF,OAvBG,CAAJ;AAwBD,KAzBG,CAAJ;AA0BD,GA5BO;;AA8BA,EAAA,YAAA,CAAA,SAAA,CAAA,WAAA,GAAR,UAAoB,IAApB,EAA0B,KAA1B,EAAiC,KAAjC,EAAuC;AAAvC,QAAA,KAAA,GAAA,IAAA;;AACE,QAAM,GAAG,GAAG,KAAK,GAAG,KAAH,GAAW,KAAK,OAAL,CAAa,QAAzC;AACA,QAAM,SAAS,GAAG,KAAK,YAAL,EAAlB;AACA,IAAA,IAAI,CAAC,IAAD,EAAO,UAAC,CAAD,EAAE;AACX,UAAI,MAAM,CAAC,CAAD,EAAI,IAAJ,CAAN,IAAmB,CAAC,CAAC,KAAF,IAAW,GAAlC,EAAuC;AACrC,QAAA,KAAK,CAAC,IAAN,CAAU,QAAA,CAAA,QAAA,CAAA,EAAA,EACL,CADK,CAAA,EACJ;AACJ,UAAA,CAAC,EAAE,CAAC,CAAC,CAAC,EAAH,EAAO,CAAC,CAAC,EAAT,EAAa,CAAC,CAAC,EAAf,EAAmB,CAAC,CAAC,EAArB,CADC;AAEJ,UAAA,CAAC,EAAE,CAAC,SAAS,CAAC,MAAV,GAAmB,CAAC,CAAC,EAAtB,EAA0B,SAAS,CAAC,MAAV,GAAmB,CAAC,CAAC,EAA/C,EAAmD,SAAS,CAAC,MAAV,GAAmB,CAAC,CAAC,EAAxE,EAA4E,SAAS,CAAC,MAAV,GAAmB,CAAC,CAAC,EAAjG;AAFC,SADI,CAAV;AAKD;;AACD,UAAI,MAAM,CAAC,CAAD,EAAI,UAAJ,CAAV,EAA2B;AACzB,QAAA,KAAI,CAAC,WAAL,CAAiB,CAAC,CAAC,QAAnB,EAA6B,KAA7B;AACD;AACF,KAXG,CAAJ;AAYD,GAfO;;AAiBA,EAAA,YAAA,CAAA,SAAA,CAAA,cAAA,GAAR,UAAuB,IAAvB,EAA6B,SAA7B,EAAwC,KAAxC,EAA6C;AAC3C,IAAA,IAAI,CAAC,IAAD,EAAO,UAAC,CAAD,EAAE;AACX,UAAI,CAAC,MAAM,CAAC,CAAD,EAAI,SAAJ,CAAX,EAA2B;AACzB,QAAA,CAAC,CAAC,SAAD,CAAD,GAAe,KAAf;AACD;AACF,KAJG,CAAJ;AAKD,GANO;;AAQA,EAAA,YAAA,CAAA,SAAA,CAAA,cAAA,GAAR,YAAA;AACU,QAAA,KAAK,GAAK,KAAK,OAAL,CAAL,KAAL;AACA,QAAA,QAAQ,GAAK,KAAK,YAAL,GAAoB,KAApB,CAA0B,KAA1B,CAAL,QAAR;AACR,QAAI,IAAI,GAAG,CAAX;;AACA,QAAI,KAAK,IAAI,KAAK,CAAC,OAAnB,EAA4B;AAC1B,UAAM,UAAU,GAAQ,KAAK,CAAC,KAA9B;AACA,MAAA,IAAI,GAAG,UAAU,IAAI,UAAU,CAAC,QAAzB,GAAoC,UAAU,CAAC,QAA/C,GAA0D,QAAjE;AACD;;AACD,WAAO,IAAI,GAAG,kBAAkB,GAAG,CAAnC;AACD,GATO;;AAWA,EAAA,YAAA,CAAA,SAAA,CAAA,MAAA,GAAR,UAAe,IAAf,EAAmB;AACjB,WAAO,CAAC,IAAI,CAAC,QAAN,IAAkB,IAAI,CAAC,QAAL,CAAc,MAAd,KAAyB,CAAlD;AACD,GAFO;;AAIA,EAAA,YAAA,CAAA,SAAA,CAAA,QAAA,GAAR,UAAiB,IAAjB,EAAqB;AACX,QAAA,QAAQ,GAAK,KAAK,OAAL,CAAL,QAAR;;AACR,QAAI,QAAQ,KAAK,CAAjB,EAAoB;AAClB,aAAO,KAAP;AACD;;AACD,QAAI,MAAM,GAAG,KAAb;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAAI,CAAC,MAAzB,EAAiC,CAAC,EAAlC,EAAsC;AACpC,UAAI,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAZ,EAAsB;AACpB,QAAA,MAAM,GAAG,IAAT;AACA;AACD;AACF;;AACD,WAAO,MAAP;AACD,GAbO;;AAeA,EAAA,YAAA,CAAA,SAAA,CAAA,kBAAA,GAAR,UAA2B,KAA3B,EAAkC,QAAlC,EAA0C;AAChC,QAAA,QAAQ,GAAK,KAAK,OAAL,CAAL,QAAR;;AACR,QAAI,CAAC,QAAL,EAAe;AACb,aAAO;AACL,QAAA,SAAS,EAAE,CADN;AAEL,QAAA,MAAM,EAAE,iBAFH;AAGL,QAAA,OAAO,EAAE;AAHJ,OAAP;AAKD,KAND,MAMO,IAAI,KAAK,KAAK,CAAd,EAAiB;AACtB,aAAO;AACL,QAAA,SAAS,EAAE,CADN;AAEL,QAAA,MAAM,EAAE,OAFH;AAGL,QAAA,OAAO,EAAE,KAAK,GAAG;AAHZ,OAAP;AAKD,KANM,MAMA;AACL,aAAO;AACL,QAAA,SAAS,EAAE,CADN;AAEL,QAAA,MAAM,EAAE,iBAFH;AAGL,QAAA,OAAO,EAAE,KAAK,GAAG;AAHZ,OAAP;AAKD;AACF,GArBO;;AAsBV,SAAA,YAAA;AAAC,CAlRD,CAA6F,SAA7F,CAAA;;;AAoRA,gBAAgB,CAAC,SAAD,EAAY,YAAZ,CAAhB","sourcesContent":["import { deepMix, each, hasKey } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport { LayerConfig } from '../../base/layer';\nimport ViewLayer, { ViewConfig } from '../../base/view-layer';\nimport squarify from './layout/squarify';\nimport { INTERACTION_MAP } from './interaction';\nimport * as EventParser from './event';\nimport TreemapLabel, { TreemapLabelConfig } from './components/label';\nimport { GraphicStyle, IInteractions } from '../../interface/config';\nimport { IDrillDown } from './interaction/drillDown';\n\nconst PARENT_NODE_OFFSET = 4;\nconst BLOCK_MARGIN = 4;\n\ntype TreemapInteraction = { type: 'drilldown'; cfg: IDrillDown } | IInteractions;\n\nexport interface TreemapViewConfig extends ViewConfig {\n  data: any;\n  maxLevel?: number;\n  colorField: string;\n  colors?: string[];\n  rectStyle?: GraphicStyle;\n  label: TreemapLabelConfig;\n  interactions?: TreemapInteraction[];\n}\n\nexport interface TreemapLayerConfig extends TreemapViewConfig, LayerConfig {}\n\nexport default class TreemapLayer<T extends TreemapLayerConfig = TreemapLayerConfig> extends ViewLayer<T> {\n  public static getDefaultOptions(): Partial<TreemapLayerConfig> {\n    return deepMix({}, super.getDefaultOptions(), {\n      maxLevel: 2,\n      padding: [0, 0, 0, 0],\n      tooltip: {\n        visible: false,\n        showTitle: false,\n        showCrosshairs: false,\n        showMarkers: false,\n        shared: false,\n      },\n      legend: {\n        visible: false,\n      },\n      xAxis: {\n        visible: false,\n      },\n      yAxis: {\n        visible: false,\n      },\n      xField: 'x',\n      yField: 'y',\n      label: {\n        visible: true,\n        adjustPosition: true,\n        style: {\n          stroke: 'rgba(0,0,0,0)',\n          lineWidth: 0,\n          fontSize: 12,\n        },\n      },\n      meta: {\n        x: {\n          nice: false,\n        },\n        y: {\n          nice: false,\n        },\n      },\n      interactions: [{ type: 'tooltip' }],\n    });\n  }\n  public type: string = 'treemap';\n  public rootData: any;\n  public rect: any;\n  private isDrilldown: boolean;\n\n  public beforeInit() {\n    super.beforeInit();\n    const { interactions } = this.options;\n    if (interactions) {\n      each(interactions, (interaction) => {\n        if (interaction.type === 'drilldown') {\n          this.isDrilldown = true;\n          this.options.maxLevel = 1;\n        }\n      });\n    }\n    const { data } = this.options;\n    const treemapData = this.getTreemapData(data);\n    this.rootData = treemapData;\n  }\n\n  public afterRender() {\n    super.afterRender();\n    if (this.options.label && this.options.label.visible) {\n      const label = new TreemapLabel({\n        view: this.view,\n        plot: this,\n        ...this.options.label,\n      });\n      label.render();\n    }\n  }\n\n  protected geometryParser() {\n    return 'polygon';\n  }\n\n  public getTreemapData(data, level?) {\n    const viewRange = this.getViewRange();\n    const root = squarify(data, viewRange.x, viewRange.y, viewRange.width, viewRange.height);\n    this.recursive(root, 1);\n    const treemapData = [];\n    this.getAllNodes(root, treemapData, level);\n    treemapData.sort((a, b) => {\n      return a.depth - b.depth;\n    });\n    this.options.xField = 'x';\n    this.options.yField = 'y';\n    return treemapData;\n  }\n\n  protected processData() {\n    return this.rootData;\n  }\n\n  protected coord() {\n    return;\n  }\n\n  protected addGeometry() {\n    const { data, colorField, color } = this.options;\n    const treemapData = this.getTreemapData(data);\n    this.rootData = treemapData;\n    const isNested = this.isNested(treemapData);\n    this.rect = {\n      type: 'polygon',\n      position: {\n        fields: ['x', 'y'],\n      },\n      color: {\n        fields: [colorField],\n        values: color,\n      },\n      style: {\n        fields: ['depth'],\n        callback: (d) => {\n          const defaultStyle = this.adjustStyleByDepth(d, isNested);\n          return deepMix({}, defaultStyle, this.options.rectStyle);\n        },\n      },\n      tooltip: {\n        fields: ['name', 'value'],\n      },\n    };\n    if (this.options.tooltip && this.options.tooltip.formatter) {\n      this.rect.tooltip.callback = this.options.tooltip.formatter;\n    }\n    this.setConfig('geometry', this.rect);\n  }\n\n  protected applyInteractions() {\n    const interactionCfg = this.options.interactions;\n    const interactions = this.view.interactions;\n    each(interactionCfg, (inter) => {\n      const Ctr = INTERACTION_MAP[inter.type];\n      if (Ctr) {\n        const interaction = new Ctr(\n          deepMix(\n            {},\n            {\n              view: this.view,\n              plot: this,\n              startEvent: 'polygon:click',\n            },\n            inter.cfg,\n            Ctr.getInteractionRange(this.layerBBox, inter.cfg)\n          )\n        );\n        interactions[inter.type] = interaction;\n      }\n    });\n  }\n\n  protected animation() {\n    super.animation();\n    if (this.isDrilldown) {\n      this.rect.animate = false;\n    }\n  }\n\n  protected parseEvents() {\n    super.parseEvents(EventParser);\n  }\n\n  private recursive(rows, depth?) {\n    const { colorField } = this.options;\n    each(rows, (r) => {\n      each(r.children, (c) => {\n        c.depth = depth;\n        if (depth > 1) c.parent = r;\n        if (!hasKey(c, colorField)) {\n          c[colorField] = r[colorField];\n        }\n        c.showLabel = true;\n        const leaf = this.isLeaf(c);\n        if (!leaf) {\n          const cliperHeight = Math.abs(c.y1 - c.y0);\n          const labelHeight = this.getLabelHeight();\n          const parentLabelOffset = cliperHeight / 2 > labelHeight ? labelHeight : BLOCK_MARGIN;\n          c.showLabel = parentLabelOffset === BLOCK_MARGIN ? false : true;\n          const c_rows = squarify(\n            c,\n            c.x0 + BLOCK_MARGIN,\n            c.y0 + parentLabelOffset,\n            c.x1 - BLOCK_MARGIN,\n            c.y1 - BLOCK_MARGIN\n          );\n          this.fillColorField(c_rows, colorField, c[colorField]);\n          this.recursive(c_rows, c.depth + 1);\n        }\n      });\n    });\n  }\n\n  private getAllNodes(data, nodes, level?) {\n    const max = level ? level : this.options.maxLevel;\n    const viewRange = this.getViewRange();\n    each(data, (d) => {\n      if (hasKey(d, 'x0') && d.depth <= max) {\n        nodes.push({\n          ...d,\n          x: [d.x0, d.x1, d.x1, d.x0],\n          y: [viewRange.height - d.y1, viewRange.height - d.y1, viewRange.height - d.y0, viewRange.height - d.y0],\n        });\n      }\n      if (hasKey(d, 'children')) {\n        this.getAllNodes(d.children, nodes);\n      }\n    });\n  }\n\n  private fillColorField(rows, fieldName, value) {\n    each(rows, (r) => {\n      if (!hasKey(r, fieldName)) {\n        r[fieldName] = value;\n      }\n    });\n  }\n\n  private getLabelHeight() {\n    const { label } = this.options;\n    const { fontSize } = this.getPlotTheme().label.style;\n    let size = 0;\n    if (label && label.visible) {\n      const labelStyle: any = label.style;\n      size = labelStyle && labelStyle.fontSize ? labelStyle.fontSize : fontSize;\n    }\n    return size + PARENT_NODE_OFFSET * 2;\n  }\n\n  private isLeaf(data) {\n    return !data.children || data.children.length === 0;\n  }\n\n  private isNested(data) {\n    const { maxLevel } = this.options;\n    if (maxLevel === 1) {\n      return false;\n    }\n    let nested = false;\n    for (let i = 0; i < data.length; i++) {\n      if (data[i].children) {\n        nested = true;\n        break;\n      }\n    }\n    return nested;\n  }\n\n  private adjustStyleByDepth(depth, isNested) {\n    const { maxLevel } = this.options;\n    if (!isNested) {\n      return {\n        lineWidth: 1,\n        stroke: 'rgba(0,0,0,0.9)',\n        opacity: 0.9,\n      };\n    } else if (depth === 1) {\n      return {\n        lineWidth: 1,\n        stroke: 'black',\n        opacity: depth / maxLevel,\n      };\n    } else {\n      return {\n        lineWidth: 1,\n        stroke: 'rgba(0,0,0,0.3)',\n        opacity: depth / maxLevel,\n      };\n    }\n  }\n}\n\nregisterPlotType('treemap', TreemapLayer);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}