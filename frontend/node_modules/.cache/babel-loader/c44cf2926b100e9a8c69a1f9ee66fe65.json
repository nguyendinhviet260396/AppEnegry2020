{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { deepMix, each } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport BaseColumnLayer from '../column/layer';\nimport RangeColumnLabel from './component/label';\nimport { setShapeCache } from './animation';\n\nvar RangeColumnLayer =\n/** @class */\nfunction (_super) {\n  __extends(RangeColumnLayer, _super);\n\n  function RangeColumnLayer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'rangeColumn';\n    return _this;\n  }\n\n  RangeColumnLayer.getDefaultOptions = function () {\n    return deepMix(_super.getDefaultOptions.call(this), {\n      label: {\n        visible: true,\n        position: 'outer'\n      }\n    }, {});\n  };\n\n  RangeColumnLayer.prototype.afterRender = function () {\n    this.renderLabel(); // 为更新动画缓存shape\n\n    var shapeCaches = [];\n    var geoms = this.view.geometries;\n    each(geoms, function (geom) {\n      var elements = geom.elements;\n      each(elements, function (ele) {\n        shapeCaches.push(ele.shape);\n      });\n    });\n    setShapeCache(shapeCaches);\n\n    _super.prototype.afterRender.call(this);\n  };\n\n  RangeColumnLayer.prototype.animation = function () {\n    _super.prototype.animation.call(this);\n\n    this.column.animate = {\n      appear: {\n        animation: 'clipInFromCenterVertical',\n        duration: 600\n      },\n      update: {\n        animation: 'updateFromCenterVertical',\n        duration: 600\n      }\n    };\n  };\n\n  RangeColumnLayer.prototype.renderLabel = function () {\n    if (this.options.label && this.options.label.visible) {\n      var label = new RangeColumnLabel(__assign({\n        view: this.view,\n        plot: this\n      }, this.options.label));\n      label.render();\n    }\n  };\n\n  return RangeColumnLayer;\n}(BaseColumnLayer);\n\nexport default RangeColumnLayer;\nregisterPlotType('rangeColumn', RangeColumnLayer);","map":{"version":3,"sources":["../../../src/plots/range-column/layer.ts"],"names":[],"mappings":";AAAA,SAAS,OAAT,EAAkB,IAAlB,QAA8B,YAA9B;AACA,SAAS,gBAAT,QAAiC,mBAAjC;AAEA,OAAO,eAAP,MAA4B,iBAA5B;AAEA,OAAO,gBAAP,MAAyD,mBAAzD;AACA,SAAS,aAAT,QAA8B,aAA9B;;AAQA,IAAA,gBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA8C,EAAA,SAAA,CAAA,gBAAA,EAAA,MAAA,CAAA;;AAA9C,WAAA,gBAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;;AAcS,IAAA,KAAA,CAAA,IAAA,GAAe,aAAf;;AAyCR;;AAtDe,EAAA,gBAAA,CAAA,iBAAA,GAAd,YAAA;AACE,WAAO,OAAO,CACZ,MAAA,CAAM,iBAAN,CAAuB,IAAvB,CAAuB,IAAvB,CADY,EAEZ;AACE,MAAA,KAAK,EAAE;AACL,QAAA,OAAO,EAAE,IADJ;AAEL,QAAA,QAAQ,EAAE;AAFL;AADT,KAFY,EAQZ,EARY,CAAd;AAUD,GAXa;;AAeP,EAAA,gBAAA,CAAA,SAAA,CAAA,WAAA,GAAP,YAAA;AACE,SAAK,WAAL,GADF,CAEE;;AACA,QAAM,WAAW,GAAG,EAApB;AACA,QAAM,KAAK,GAAG,KAAK,IAAL,CAAU,UAAxB;AACA,IAAA,IAAI,CAAC,KAAD,EAAQ,UAAC,IAAD,EAAK;AACf,UAAM,QAAQ,GAAG,IAAI,CAAC,QAAtB;AACA,MAAA,IAAI,CAAC,QAAD,EAAW,UAAC,GAAD,EAAI;AACjB,QAAA,WAAW,CAAC,IAAZ,CAAiB,GAAG,CAAC,KAArB;AACD,OAFG,CAAJ;AAGD,KALG,CAAJ;AAMA,IAAA,aAAa,CAAC,WAAD,CAAb;;AACA,IAAA,MAAA,CAAA,SAAA,CAAM,WAAN,CAAiB,IAAjB,CAAiB,IAAjB;AACD,GAbM;;AAeG,EAAA,gBAAA,CAAA,SAAA,CAAA,SAAA,GAAV,YAAA;AACE,IAAA,MAAA,CAAA,SAAA,CAAM,SAAN,CAAe,IAAf,CAAe,IAAf;;AACA,SAAK,MAAL,CAAY,OAAZ,GAAsB;AACpB,MAAA,MAAM,EAAE;AACN,QAAA,SAAS,EAAE,0BADL;AAEN,QAAA,QAAQ,EAAE;AAFJ,OADY;AAKpB,MAAA,MAAM,EAAE;AACN,QAAA,SAAS,EAAE,0BADL;AAEN,QAAA,QAAQ,EAAE;AAFJ;AALY,KAAtB;AAUD,GAZS;;AAcA,EAAA,gBAAA,CAAA,SAAA,CAAA,WAAA,GAAV,YAAA;AACE,QAAI,KAAK,OAAL,CAAa,KAAb,IAAsB,KAAK,OAAL,CAAa,KAAb,CAAmB,OAA7C,EAAsD;AACpD,UAAM,KAAK,GAAG,IAAI,gBAAJ,CAAoB,QAAA,CAAA;AAChC,QAAA,IAAI,EAAE,KAAK,IADqB;AAEhC,QAAA,IAAI,EAAE;AAF0B,OAAA,EAG7B,KAAK,OAAL,CAAa,KAHgB,CAApB,CAAd;AAKA,MAAA,KAAK,CAAC,MAAN;AACD;AACF,GATS;;AAUZ,SAAA,gBAAA;AAAC,CAvDD,CAA8C,eAA9C,CAAA;;;AAyDA,gBAAgB,CAAC,aAAD,EAAgB,gBAAhB,CAAhB","sourcesContent":["import { deepMix, each } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport { LayerConfig } from '../../base/layer';\nimport BaseColumnLayer from '../column/layer';\nimport { ColumnViewConfig } from '../column/interface';\nimport RangeColumnLabel, { RangeColumnLabelConfig } from './component/label';\nimport { setShapeCache } from './animation';\n\nexport interface RangeColumnViewConfig extends ColumnViewConfig {\n  label?: RangeColumnLabelConfig;\n}\n\nexport interface RangeColumnLayerConfig extends RangeColumnViewConfig, LayerConfig {}\n\nexport default class RangeColumnLayer extends BaseColumnLayer<RangeColumnLayerConfig> {\n  public static getDefaultOptions(): Partial<RangeColumnViewConfig> {\n    return deepMix(\n      super.getDefaultOptions(),\n      {\n        label: {\n          visible: true,\n          position: 'outer',\n        },\n      },\n      {}\n    );\n  }\n\n  public type: string = 'rangeColumn';\n\n  public afterRender() {\n    this.renderLabel();\n    // 为更新动画缓存shape\n    const shapeCaches = [];\n    const geoms = this.view.geometries;\n    each(geoms, (geom) => {\n      const elements = geom.elements;\n      each(elements, (ele) => {\n        shapeCaches.push(ele.shape);\n      });\n    });\n    setShapeCache(shapeCaches);\n    super.afterRender();\n  }\n\n  protected animation() {\n    super.animation();\n    this.column.animate = {\n      appear: {\n        animation: 'clipInFromCenterVertical',\n        duration: 600,\n      },\n      update: {\n        animation: 'updateFromCenterVertical',\n        duration: 600,\n      },\n    };\n  }\n\n  protected renderLabel() {\n    if (this.options.label && this.options.label.visible) {\n      const label = new RangeColumnLabel({\n        view: this.view,\n        plot: this,\n        ...this.options.label,\n      });\n      label.render();\n    }\n  }\n}\n\nregisterPlotType('rangeColumn', RangeColumnLayer);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}