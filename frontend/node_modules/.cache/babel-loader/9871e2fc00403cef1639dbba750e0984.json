{"ast":null,"code":"import { parsePadding } from '../../util/padding';\nimport { calculatePadding } from './auto';\n/**\n * @ignore\n * G2 默认提供的 layout 函数\n * 内置布局函数处理的逻辑：\n *\n * 1. 如果 padding = 'auto'，那么自动根据组件的 direction 来计算 padding 数组\n * 2. 根据 padding 和 direction 去分配对应方向的 padding 数值\n * 3. 移动组件位置\n *\n * 对于组件响应式布局，可以尝试使用约束布局的方式去求解位置信息。\n * @param view\n */\n\nexport default function defaultLayout(view) {\n  var axis = view.getController('axis');\n  var legend = view.getController('legend');\n  var annotation = view.getController('annotation');\n  var slider = view.getController('slider'); // 1. 自动加 auto padding -> absolute padding\n\n  var padding = calculatePadding(view); // 2. 计算出新的 coordinateBBox\n\n  view.coordinateBBox = view.viewBBox.shrink(padding).shrink(parsePadding(view.appendPadding));\n  view.adjustCoordinate(); // 3. 根据最新的 coordinate 重新布局组件\n\n  [axis, slider, legend, annotation].forEach(function (controller) {\n    if (controller) {\n      controller.layout();\n    }\n  });\n}","map":{"version":3,"sources":["../../../src/chart/layout/index.ts"],"names":[],"mappings":"AAEA,SAAS,YAAT,QAA6B,oBAA7B;AACA,SAAS,gBAAT,QAAiC,QAAjC;AAMA;;;;;;;;;;;;;AAYA,eAAc,SAAU,aAAV,CAAwB,IAAxB,EAAkC;AAC9C,MAAM,IAAI,GAAG,IAAI,CAAC,aAAL,CAAmB,MAAnB,CAAb;AACA,MAAM,MAAM,GAAG,IAAI,CAAC,aAAL,CAAmB,QAAnB,CAAf;AACA,MAAM,UAAU,GAAG,IAAI,CAAC,aAAL,CAAmB,YAAnB,CAAnB;AACA,MAAM,MAAM,GAAG,IAAI,CAAC,aAAL,CAAmB,QAAnB,CAAf,CAJ8C,CAM9C;;AACA,MAAM,OAAO,GAAG,gBAAgB,CAAC,IAAD,CAAhC,CAP8C,CAS9C;;AACA,EAAA,IAAI,CAAC,cAAL,GAAsB,IAAI,CAAC,QAAL,CAAc,MAAd,CAAqB,OAArB,EAA8B,MAA9B,CAAqC,YAAY,CAAC,IAAI,CAAC,aAAN,CAAjD,CAAtB;AAEA,EAAA,IAAI,CAAC,gBAAL,GAZ8C,CAc9C;;AACA,GAAC,IAAD,EAAO,MAAP,EAAe,MAAf,EAAuB,UAAvB,EAAmC,OAAnC,CAA2C,UAAC,UAAD,EAAuB;AAChE,QAAI,UAAJ,EAAgB;AACd,MAAA,UAAU,CAAC,MAAX;AACD;AACF,GAJD;AAKD","sourcesContent":["import { Controller } from '../controller/base';\nimport View from '../view';\nimport { parsePadding } from '../../util/padding';\nimport { calculatePadding } from './auto';\n\n// 布局函数的定义\n// 布局函数的职责：根据 view 中组件信息，计算出最终的图形 padding 数值，以及最终各个组件的布局和位置\nexport type Layout = (view: View) => void;\n\n/**\n * @ignore\n * G2 默认提供的 layout 函数\n * 内置布局函数处理的逻辑：\n *\n * 1. 如果 padding = 'auto'，那么自动根据组件的 direction 来计算 padding 数组\n * 2. 根据 padding 和 direction 去分配对应方向的 padding 数值\n * 3. 移动组件位置\n *\n * 对于组件响应式布局，可以尝试使用约束布局的方式去求解位置信息。\n * @param view\n */\nexport default function defaultLayout(view: View): void {\n  const axis = view.getController('axis');\n  const legend = view.getController('legend');\n  const annotation = view.getController('annotation');\n  const slider = view.getController('slider');\n\n  // 1. 自动加 auto padding -> absolute padding\n  const padding = calculatePadding(view);\n\n  // 2. 计算出新的 coordinateBBox\n  view.coordinateBBox = view.viewBBox.shrink(padding).shrink(parsePadding(view.appendPadding));\n\n  view.adjustCoordinate();\n\n  // 3. 根据最新的 coordinate 重新布局组件\n  [axis, slider, legend, annotation].forEach((controller: Controller) => {\n    if (controller) {\n      controller.layout();\n    }\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}