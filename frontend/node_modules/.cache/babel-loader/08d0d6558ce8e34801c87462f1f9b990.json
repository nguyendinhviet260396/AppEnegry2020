{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vietn\\\\Desktop\\\\AppEnegry2020\\\\frontend\\\\src\\\\containers\\\\AccountManager\\\\SignupForm\\\\index.js\";\nimport React, { Component } from 'react';\nimport { withStyles, Card, CardContent, Button, FormControlLabel, Checkbox, Box } from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport { compose, bindActionCreators } from 'redux';\nimport { Grid } from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\nimport renderTextField from '../../../components/FormHelper/TextField/index';\nimport validate from '../../../commons/Validation/index';\nimport * as authActions from '../../../actions/auths';\nimport * as modalActions from '../../../actions/modal';\nimport styles from './styles';\n\nclass SignupForm extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleChecked = e => {\n      const {\n        checked\n      } = e.target;\n      const {\n        authActionCreators,\n        invalid,\n        submitting\n      } = this.props;\n      const {\n        onButtonSubmit,\n        offButtonSubmit\n      } = authActionCreators;\n\n      if (checked && !invalid && !submitting) {\n        onButtonSubmit();\n      } else {\n        offButtonSubmit();\n      }\n    };\n\n    this.handleCloseForm = () => {\n      const {\n        modalActionCreators\n      } = this.props;\n      const {\n        hideModal\n      } = modalActionCreators;\n      hideModal();\n    };\n\n    this.handleSubmitForm = data => {\n      const {\n        name,\n        email,\n        password,\n        operator\n      } = data;\n      const {\n        authActionCreators,\n        userEditting\n      } = this.props;\n      const {\n        authSignup,\n        updateUser\n      } = authActionCreators;\n\n      if (userEditting && userEditting.id) {\n        updateUser(name, email, password, operator);\n      } else {\n        authSignup(name, email, password, operator);\n      }\n    };\n  }\n\n  render() {\n    const {\n      classes,\n      handleSubmit,\n      invalid,\n      onButton,\n      initialValues,\n      submitting\n    } = this.props;\n    const userEditting = initialValues;\n    return /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      spacing: 0,\n      className: classes.background,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      md: 12,\n      className: classes.signup,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      className: classes.card,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(CardContent, {\n      className: classes.cardContent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: handleSubmit(this.handleSubmitForm),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Field, {\n      id: \"name\",\n      label: \"Name\",\n      name: \"name\",\n      className: classes.textField,\n      inputProps: {\n        style: {\n          fontSize: 12\n        }\n      } // font size of input text\n      ,\n      InputLabelProps: {\n        style: {\n          fontSize: 12\n        }\n      } // font size of input label\n      ,\n      type: \"text\",\n      fullWidth: true,\n      margin: \"normal\",\n      size: \"small\",\n      component: renderTextField,\n      value: userEditting ? userEditting.name : '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(Field, {\n      id: \"email\",\n      label: \"Email\",\n      name: \"email\",\n      className: classes.textField,\n      inputProps: {\n        style: {\n          fontSize: 12\n        }\n      } // font size of input text\n      ,\n      InputLabelProps: {\n        style: {\n          fontSize: 12\n        }\n      } // font size of input label\n      ,\n      type: \"text\",\n      size: \"small\",\n      fullWidth: true,\n      margin: \"normal\",\n      component: renderTextField,\n      value: userEditting ? userEditting.email : '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(Field, {\n      id: \"operator\",\n      label: \"operator\",\n      type: \"operator\",\n      name: \"operator\",\n      className: classes.textField,\n      inputProps: {\n        style: {\n          fontSize: 12\n        }\n      } // font size of input text\n      ,\n      InputLabelProps: {\n        style: {\n          fontSize: 12\n        }\n      } // font size of input label\n      ,\n      fullWidth: true,\n      margin: \"normal\",\n      size: \"small\",\n      component: renderTextField,\n      value: userEditting ? userEditting.operator : '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 34\n      }\n    }), /*#__PURE__*/React.createElement(Field, {\n      id: \"password\",\n      label: \"Password\",\n      type: \"password\",\n      name: \"password\",\n      className: classes.textField,\n      inputProps: {\n        style: {\n          fontSize: 12\n        }\n      } // font size of input text\n      ,\n      InputLabelProps: {\n        style: {\n          fontSize: 12\n        }\n      } // font size of input label\n      ,\n      fullWidth: true,\n      margin: \"normal\",\n      size: \"small\",\n      component: renderTextField,\n      value: userEditting ? userEditting.password : '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 34\n      }\n    }), /*#__PURE__*/React.createElement(Field, {\n      id: \"cPassWord\",\n      label: \"ConfirmPassword\",\n      type: \"password\",\n      name: \"cPassword\",\n      size: \"small\",\n      className: classes.textField,\n      inputProps: {\n        style: {\n          fontSize: 12\n        }\n      } // font size of input text\n      ,\n      InputLabelProps: {\n        style: {\n          fontSize: 12\n        }\n      } // font size of input label\n      ,\n      fullWidth: true,\n      margin: \"normal\",\n      component: renderTextField,\n      value: userEditting ? userEditting.cPassword : '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(FormControlLabel, {\n      control: /*#__PURE__*/React.createElement(Checkbox, {\n        value: \"agree\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 43\n        }\n      }),\n      label: /*#__PURE__*/React.createElement(Box, {\n        component: \"div\",\n        fontSize: 12,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 37\n        }\n      }, \"T\\xF4i \\u0111\\u1ED3ng \\xFD v\\u1EDBi \\u0111i\\u1EC1u kho\\u1EA3n !\"),\n      onChange: this.handleChecked,\n      className: classes.Checkbox,\n      disabled: submitting || invalid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 33\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      className: classes.button,\n      color: \"primary\",\n      size: \"small\",\n      variant: \"contained\",\n      type: \"submit\",\n      disabled: onButton || submitting || invalid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 33\n      }\n    }, \"Apply\"), /*#__PURE__*/React.createElement(Button, {\n      className: classes.button,\n      color: \"secondary\",\n      size: \"small\",\n      variant: \"contained\",\n      type: \"submit\",\n      onClick: this.handleCloseForm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 33\n      }\n    }, \"Cancel\"))))));\n  }\n\n}\n\nSignupForm.propTypes = {\n  classes: PropTypes.object,\n  handleSubmit: PropTypes.func,\n  invalid: PropTypes.bool,\n  submitting: PropTypes.bool,\n  onButton: PropTypes.bool,\n  infauth: PropTypes.string,\n  userEditting: PropTypes.object,\n  authActionCreators: PropTypes.shape({\n    onButtonSubmit: PropTypes.func,\n    authSignup: PropTypes.func,\n    offButtonSubmit: PropTypes.func\n  })\n};\nconst FORM_USER = \"TASK_USER\";\nconst withReduxForm = reduxForm({\n  form: FORM_USER,\n  validate: validate\n});\n\nconst mapStateToProps = state => {\n  return {\n    onButton: state.auth.onButton,\n    initialValues: state.auth.userEditting,\n    userEditting: state.auth.userEditting\n  };\n};\n\nconst mapDispatchToProps = (dispatch, props) => {\n  return {\n    authActionCreators: bindActionCreators(authActions, dispatch),\n    modalActionCreators: bindActionCreators(modalActions, dispatch)\n  };\n};\n\nconst withConnect = connect(mapStateToProps, mapDispatchToProps);\nexport default compose(withStyles(styles), withConnect, withReduxForm)(SignupForm);","map":{"version":3,"sources":["C:/Users/vietn/Desktop/AppEnegry2020/frontend/src/containers/AccountManager/SignupForm/index.js"],"names":["React","Component","withStyles","Card","CardContent","Button","FormControlLabel","Checkbox","Box","PropTypes","compose","bindActionCreators","Grid","connect","Field","reduxForm","renderTextField","validate","authActions","modalActions","styles","SignupForm","handleChecked","e","checked","target","authActionCreators","invalid","submitting","props","onButtonSubmit","offButtonSubmit","handleCloseForm","modalActionCreators","hideModal","handleSubmitForm","data","name","email","password","operator","userEditting","authSignup","updateUser","id","render","classes","handleSubmit","onButton","initialValues","background","signup","card","cardContent","textField","style","fontSize","cPassword","button","propTypes","object","func","bool","infauth","string","shape","FORM_USER","withReduxForm","form","mapStateToProps","state","auth","mapDispatchToProps","dispatch","withConnect"],"mappings":"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","sourcesContent":["\r\nimport React, { Component } from 'react';\r\nimport { withStyles, Card, CardContent, Button, FormControlLabel, Checkbox,Box} from '@material-ui/core';\r\nimport PropTypes from 'prop-types';\r\nimport {compose,bindActionCreators} from 'redux';\r\nimport { Grid } from '@material-ui/core';\r\nimport {connect} from 'react-redux';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport renderTextField from '../../../components/FormHelper/TextField/index';\r\nimport validate from '../../../commons/Validation/index';\r\nimport * as authActions from '../../../actions/auths';\r\nimport * as modalActions from '../../../actions/modal';\r\nimport styles from './styles';\r\n\r\nclass SignupForm extends Component {\r\n    handleChecked=(e)=>{\r\n        const {checked}=e.target;\r\n        const {authActionCreators,invalid,submitting}=this.props;\r\n        const {onButtonSubmit,offButtonSubmit}=authActionCreators;\r\n        if(checked && !invalid && !submitting ){\r\n            onButtonSubmit()\r\n        }else{\r\n            offButtonSubmit()\r\n        }\r\n    }\r\n    handleCloseForm=()=>{\r\n        const {modalActionCreators} =this.props;\r\n        const {hideModal}=modalActionCreators;\r\n        hideModal();\r\n    }\r\n    handleSubmitForm = data => {\r\n        const {name,email,password,operator}= data;\r\n        const {authActionCreators,userEditting}=this.props;\r\n        const {authSignup,updateUser}=authActionCreators;\r\n        if(userEditting && userEditting.id){\r\n            updateUser(name,email,password,operator);\r\n        }else{\r\n            authSignup(name,email,password,operator);\r\n        }  \r\n    };\r\n    render() {\r\n        const {classes,\r\n            handleSubmit,\r\n            invalid,\r\n            onButton,\r\n            initialValues,\r\n            submitting}=this.props;\r\n            const userEditting = initialValues;   \r\n        return(\r\n            <Grid container spacing={0}className={classes.background}>\r\n                <Grid item xs={12} md={12} className={classes.signup}>\r\n                    <Card className={classes.card}>\r\n                        <CardContent className={classes.cardContent}>\r\n                            <form onSubmit={handleSubmit(this.handleSubmitForm)}>\r\n                            <Field\r\n                                id=\"name\"\r\n                                label=\"Name\"\r\n                                name=\"name\"\r\n                                className={classes.textField}\r\n                                inputProps={{style: {fontSize: 12}}} // font size of input text\r\n                                InputLabelProps={{style: {fontSize: 12}}} // font size of input label\r\n                                type=\"text\"\r\n                                fullWidth\r\n                                margin=\"normal\"\r\n                                size=\"small\"\r\n                                component={renderTextField}\r\n                                value={userEditting ? userEditting.name :''}\r\n                                />\r\n                                <Field\r\n                                id=\"email\"\r\n                                label=\"Email\"\r\n                                name=\"email\"\r\n                                className={classes.textField}\r\n                                inputProps={{style: {fontSize: 12}}} // font size of input text\r\n                                InputLabelProps={{style: {fontSize: 12}}} // font size of input label\r\n                                type=\"text\"\r\n                                size=\"small\"\r\n                                fullWidth\r\n                                margin=\"normal\"\r\n                                component={renderTextField}\r\n                                value={userEditting ? userEditting.email :''}\r\n                                />\r\n                                 <Field\r\n                                id=\"operator\"\r\n                                label=\"operator\"\r\n                                type=\"operator\"\r\n                                name=\"operator\"\r\n                                className={classes.textField}\r\n                                inputProps={{style: {fontSize: 12}}} // font size of input text\r\n                                InputLabelProps={{style: {fontSize: 12}}} // font size of input label\r\n                                fullWidth\r\n                                margin=\"normal\"\r\n                                size=\"small\"\r\n                                component={renderTextField}\r\n                                value={userEditting ? userEditting.operator :''}\r\n                                />\r\n                                 <Field\r\n                                id=\"password\"\r\n                                label=\"Password\"\r\n                                type=\"password\"\r\n                                name=\"password\"\r\n                                className={classes.textField}\r\n                                inputProps={{style: {fontSize: 12}}} // font size of input text\r\n                                InputLabelProps={{style: {fontSize: 12}}} // font size of input label\r\n                                fullWidth\r\n                                margin=\"normal\"\r\n                                size=\"small\"\r\n                                component={renderTextField}\r\n                                value={userEditting ? userEditting.password :''}\r\n                                />\r\n                                <Field\r\n                                id=\"cPassWord\"\r\n                                label=\"ConfirmPassword\"\r\n                                type=\"password\"\r\n                                name=\"cPassword\"\r\n                                size=\"small\"\r\n                                className={classes.textField}\r\n                                inputProps={{style: {fontSize: 12}}} // font size of input text\r\n                                InputLabelProps={{style: {fontSize: 12}}} // font size of input label\r\n                                fullWidth\r\n                                margin=\"normal\"\r\n                                component={renderTextField}\r\n                                value={userEditting ? userEditting.cPassword:''}\r\n                                />\r\n                                <FormControlLabel\r\n                                control={ <Checkbox value=\"agree\"/>}\r\n                                label={\r\n                                    <Box component=\"div\" fontSize={12}>\r\n                                       Tôi đồng ý với điều khoản !\r\n                                     </Box>\r\n                               }\r\n                                onChange={this.handleChecked}\r\n                                className={classes.Checkbox}\r\n                                disabled={submitting || invalid }\r\n                                />\r\n                                <Button\r\n                                className={classes.button}\r\n                                color = \"primary\"\r\n                                size=\"small\"\r\n                                variant=\"contained\"\r\n                                type=\"submit\"\r\n                                disabled={onButton||submitting || invalid }\r\n                                >\r\n                                    Apply\r\n                                </Button>\r\n                                <Button\r\n                                className={classes.button}\r\n                                color = \"secondary\"\r\n                                size=\"small\"\r\n                                variant=\"contained\"\r\n                                type=\"submit\"\r\n                                onClick={this.handleCloseForm}\r\n                                >\r\n                                     Cancel\r\n                                </Button>\r\n                            </form>\r\n                        </CardContent>\r\n                    </Card>\r\n                </Grid>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nSignupForm.propTypes={\r\n    classes:PropTypes.object,\r\n    handleSubmit:PropTypes.func,\r\n    invalid:PropTypes.bool,\r\n    submitting:PropTypes.bool,\r\n    onButton:PropTypes.bool,\r\n    infauth:PropTypes.string,\r\n    userEditting:PropTypes.object,\r\n    authActionCreators:PropTypes.shape({\r\n        onButtonSubmit:PropTypes.func,\r\n        authSignup:PropTypes.func,\r\n        offButtonSubmit:PropTypes.func,\r\n        \r\n    }),\r\n}\r\n\r\nconst FORM_USER =\"TASK_USER\";\r\nconst withReduxForm = reduxForm({\r\n    form: FORM_USER,\r\n    validate:validate,\r\n});\r\nconst mapStateToProps=state=>{\r\n    return{\r\n        onButton:state.auth.onButton,\r\n        initialValues:state.auth.userEditting,\r\n        userEditting :state.auth.userEditting,\r\n    }\r\n};\r\nconst mapDispatchToProps=(dispatch,props)=>{\r\n    return{\r\n        authActionCreators:bindActionCreators(authActions,dispatch),\r\n        modalActionCreators:bindActionCreators(modalActions,dispatch),\r\n    }\r\n};\r\nconst withConnect=connect(mapStateToProps,mapDispatchToProps);\r\nexport default compose(\r\n    withStyles(styles),\r\n    withConnect,\r\n    withReduxForm,\r\n)(SignupForm);\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}