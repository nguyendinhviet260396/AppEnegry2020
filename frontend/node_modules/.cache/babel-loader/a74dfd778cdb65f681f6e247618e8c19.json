{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { deepMix, has, each, clone } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport ViewLayer from '../../base/view-layer';\nimport { getGeom } from '../../geoms/factory';\nimport ConversionTag from '../../components/conversion-tag';\nimport { extractScale } from '../../util/scale';\nimport responsiveMethods from './apply-responsive';\nimport './apply-responsive/theme';\nimport './component/label';\nimport './component/label-auto';\nimport * as EventParser from './event';\nimport './theme';\nimport { getGeometryByType } from '../../util/view';\nvar G2_GEOM_MAP = {\n  column: 'interval'\n};\nvar PLOT_GEOM_MAP = {\n  interval: 'column'\n};\n\nvar BaseColumnLayer =\n/** @class */\nfunction (_super) {\n  __extends(BaseColumnLayer, _super);\n\n  function BaseColumnLayer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'column';\n    return _this;\n  }\n\n  BaseColumnLayer.getDefaultOptions = function () {\n    return deepMix({}, _super.getDefaultOptions.call(this), {\n      xAxis: {\n        visible: true,\n        tickLine: {\n          visible: false\n        },\n        title: {\n          visible: true\n        }\n      },\n      yAxis: {\n        nice: true,\n        title: {\n          visible: true\n        },\n        label: {\n          visible: true\n        },\n        grid: {\n          visible: true\n        }\n      },\n      tooltip: {\n        visible: true,\n        shared: true,\n        showCrosshairs: false,\n        showMarkers: false\n      },\n      label: {\n        visible: false,\n        position: 'top',\n        adjustColor: true\n      },\n      legend: {\n        visible: true,\n        position: 'top-left'\n      },\n      interactions: [{\n        type: 'tooltip'\n      }, {\n        type: 'active-region'\n      }, {\n        type: 'legend-active'\n      }, {\n        type: 'legend-filter'\n      }],\n      conversionTag: {\n        visible: false\n      }\n    });\n  };\n\n  BaseColumnLayer.prototype.beforeInit = function () {\n    _super.prototype.beforeInit.call(this);\n    /** 响应式图形 */\n\n\n    if (this.options.responsive && this.options.padding !== 'auto') {\n      this.applyResponsive('preRender');\n    }\n  };\n\n  BaseColumnLayer.prototype.afterRender = function () {\n    var props = this.options;\n    this.renderLabel();\n    /** 响应式 */\n\n    if (this.options.responsive && this.options.padding !== 'auto') {\n      this.applyResponsive('afterRender');\n    }\n\n    if (props.conversionTag.visible) {\n      this.conversionTag = new ConversionTag(__assign({\n        view: this.view,\n        field: props.yField,\n        transpose: true,\n        animation: props.animation === false ? false : true\n      }, props.conversionTag));\n    }\n\n    _super.prototype.afterRender.call(this);\n  };\n\n  BaseColumnLayer.prototype.geometryParser = function (dim, type) {\n    if (dim === 'g2') {\n      return G2_GEOM_MAP[type];\n    }\n\n    return PLOT_GEOM_MAP[type];\n  };\n\n  BaseColumnLayer.prototype.processData = function (originData) {\n    var xField = this.options.xField;\n    var processedData = [];\n    each(originData, function (data) {\n      var d = clone(data);\n      d[xField] = d[xField].toString();\n      processedData.push(d);\n    });\n    return processedData;\n  };\n\n  BaseColumnLayer.prototype.scale = function () {\n    var options = this.options;\n    var scales = {};\n    /** 配置x-scale */\n\n    scales[options.xField] = {\n      type: 'cat'\n    };\n\n    if (has(options, 'xAxis')) {\n      extractScale(scales[options.xField], options.xAxis);\n    }\n    /** 配置y-scale */\n\n\n    scales[options.yField] = {};\n\n    if (has(options, 'yAxis')) {\n      extractScale(scales[options.yField], options.yAxis);\n    }\n\n    this.setConfig('scales', scales);\n\n    _super.prototype.scale.call(this);\n  };\n\n  BaseColumnLayer.prototype.coord = function () {\n    return;\n  }; //eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  BaseColumnLayer.prototype.adjustColumn = function (column) {\n    return;\n  };\n\n  BaseColumnLayer.prototype.addGeometry = function () {\n    var options = this.options;\n    var column = getGeom('interval', 'main', {\n      positionFields: [options.xField, options.yField],\n      plot: this\n    });\n\n    if (options.conversionTag.visible) {\n      this.setConfig('theme', deepMix({}, this.getTheme(), {\n        columnWidthRatio: 1 / 3\n      }));\n    }\n\n    this.adjustColumn(column);\n    this.column = column;\n\n    if (options.tooltip && (options.tooltip.fields || options.tooltip.formatter)) {\n      this.geometryTooltip();\n    }\n\n    this.setConfig('geometry', column);\n  };\n\n  BaseColumnLayer.prototype.geometryTooltip = function () {\n    this.column.tooltip = {};\n    var tooltipOptions = this.options.tooltip;\n\n    if (tooltipOptions.fields) {\n      this.column.tooltip.fields = tooltipOptions.fields;\n    }\n\n    if (tooltipOptions.formatter) {\n      this.column.tooltip.callback = tooltipOptions.formatter;\n\n      if (!tooltipOptions.fields) {\n        this.column.tooltip.fields = [this.options.xField, this.options.yField];\n\n        if (this.options.colorField) {\n          this.column.tooltip.fields.push(this.options.colorField);\n        }\n      }\n    }\n  };\n\n  BaseColumnLayer.prototype.animation = function () {\n    _super.prototype.animation.call(this);\n\n    if (this.options.animation === false) {\n      /** 关闭动画 */\n      this.column.animate = false;\n    }\n  };\n\n  BaseColumnLayer.prototype.parseEvents = function () {\n    _super.prototype.parseEvents.call(this, EventParser);\n  };\n\n  BaseColumnLayer.prototype.renderLabel = function () {\n    var scales = this.config.scales;\n    var _a = this.options,\n        label = _a.label,\n        yField = _a.yField;\n    var scale = scales[yField];\n\n    if (label === null || label === void 0 ? void 0 : label.visible) {\n      var geometry = getGeometryByType(this.view, 'interval');\n      this.doRenderLabel(geometry, __assign({\n        type: 'column',\n        formatter: scale.formatter && function (value) {\n          return scale.formatter(value);\n        }\n      }, this.options.label));\n    }\n  };\n\n  BaseColumnLayer.prototype.applyResponsive = function (stage) {\n    var _this = this;\n\n    var methods = responsiveMethods[stage];\n    each(methods, function (r) {\n      var responsive = r;\n      responsive.method(_this);\n    });\n  };\n\n  return BaseColumnLayer;\n}(ViewLayer);\n\nexport default BaseColumnLayer;\nregisterPlotType('column', BaseColumnLayer);","map":{"version":3,"sources":["../../../src/plots/column/layer.ts"],"names":[],"mappings":"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","sourcesContent":["import { deepMix, has, each, clone } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport { LayerConfig } from '../../base/layer';\nimport ViewLayer from '../../base/view-layer';\nimport { getGeom } from '../../geoms/factory';\nimport { ElementOption } from '../../interface/config';\nimport ConversionTag from '../../components/conversion-tag';\nimport { extractScale } from '../../util/scale';\nimport responsiveMethods from './apply-responsive';\nimport './apply-responsive/theme';\nimport './component/label';\nimport './component/label-auto';\nimport * as EventParser from './event';\nimport './theme';\nimport { DataItem } from '../../interface/config';\nimport { getGeometryByType } from '../../util/view';\nimport { ColumnViewConfig } from './interface';\nimport { Maybe } from '../../interface/types';\n\nconst G2_GEOM_MAP = {\n  column: 'interval',\n};\n\nconst PLOT_GEOM_MAP = {\n  interval: 'column',\n};\n\nexport interface ColumnLayerConfig extends ColumnViewConfig, LayerConfig {}\n\nexport default class BaseColumnLayer<T extends ColumnLayerConfig = ColumnLayerConfig> extends ViewLayer<T> {\n  public static getDefaultOptions(): any {\n    return deepMix({}, super.getDefaultOptions(), {\n      xAxis: {\n        visible: true,\n        tickLine: {\n          visible: false,\n        },\n        title: {\n          visible: true,\n        },\n      },\n      yAxis: {\n        nice: true,\n        title: {\n          visible: true,\n        },\n        label: {\n          visible: true,\n        },\n        grid: {\n          visible: true,\n        },\n      },\n      tooltip: {\n        visible: true,\n        shared: true,\n        showCrosshairs: false,\n        showMarkers: false,\n      },\n      label: {\n        visible: false,\n        position: 'top',\n        adjustColor: true,\n      },\n      legend: {\n        visible: true,\n        position: 'top-left',\n      },\n      interactions: [\n        { type: 'tooltip' },\n        { type: 'active-region' },\n        { type: 'legend-active' },\n        { type: 'legend-filter' },\n      ],\n      conversionTag: {\n        visible: false,\n      },\n    });\n  }\n  public column: any;\n  public type: string = 'column';\n  public conversionTag?: ConversionTag;\n\n  public beforeInit() {\n    super.beforeInit();\n    /** 响应式图形 */\n    if (this.options.responsive && this.options.padding !== 'auto') {\n      this.applyResponsive('preRender');\n    }\n  }\n\n  public afterRender() {\n    const props = this.options;\n    this.renderLabel();\n    /** 响应式 */\n    if (this.options.responsive && this.options.padding !== 'auto') {\n      this.applyResponsive('afterRender');\n    }\n    if (props.conversionTag.visible) {\n      this.conversionTag = new ConversionTag({\n        view: this.view,\n        field: props.yField,\n        transpose: true,\n        animation: props.animation === false ? false : true,\n        ...props.conversionTag,\n      });\n    }\n    super.afterRender();\n  }\n\n  protected geometryParser(dim, type) {\n    if (dim === 'g2') {\n      return G2_GEOM_MAP[type];\n    }\n    return PLOT_GEOM_MAP[type];\n  }\n\n  protected processData(originData?: DataItem[]) {\n    const { xField } = this.options;\n    const processedData = [];\n    each(originData, (data) => {\n      const d = clone(data);\n      d[xField] = d[xField].toString();\n      processedData.push(d);\n    });\n    return processedData;\n  }\n\n  protected scale() {\n    const { options } = this;\n    const scales = {};\n    /** 配置x-scale */\n    scales[options.xField] = { type: 'cat' };\n    if (has(options, 'xAxis')) {\n      extractScale(scales[options.xField], options.xAxis);\n    }\n    /** 配置y-scale */\n    scales[options.yField] = {};\n    if (has(options, 'yAxis')) {\n      extractScale(scales[options.yField], options.yAxis);\n    }\n    this.setConfig('scales', scales);\n    super.scale();\n  }\n\n  protected coord() {\n    return;\n  }\n\n  //eslint-disable-next-line @typescript-eslint/no-unused-vars\n  protected adjustColumn(column: ElementOption) {\n    return;\n  }\n\n  protected addGeometry() {\n    const { options } = this;\n    const column = getGeom('interval', 'main', {\n      positionFields: [options.xField, options.yField],\n      plot: this,\n    });\n    if (options.conversionTag.visible) {\n      this.setConfig(\n        'theme',\n        deepMix({}, this.getTheme(), {\n          columnWidthRatio: 1 / 3,\n        })\n      );\n    }\n    this.adjustColumn(column);\n    this.column = column;\n    if (options.tooltip && (options.tooltip.fields || options.tooltip.formatter)) {\n      this.geometryTooltip();\n    }\n    this.setConfig('geometry', column);\n  }\n\n  protected geometryTooltip() {\n    this.column.tooltip = {};\n    const tooltipOptions: any = this.options.tooltip;\n    if (tooltipOptions.fields) {\n      this.column.tooltip.fields = tooltipOptions.fields;\n    }\n    if (tooltipOptions.formatter) {\n      this.column.tooltip.callback = tooltipOptions.formatter;\n      if (!tooltipOptions.fields) {\n        this.column.tooltip.fields = [this.options.xField, this.options.yField];\n        if (this.options.colorField) {\n          this.column.tooltip.fields.push(this.options.colorField);\n        }\n      }\n    }\n  }\n\n  protected animation() {\n    super.animation();\n    if (this.options.animation === false) {\n      /** 关闭动画 */\n      this.column.animate = false;\n    }\n  }\n\n  protected parseEvents() {\n    super.parseEvents(EventParser);\n  }\n\n  protected renderLabel() {\n    const { scales } = this.config;\n    const { label, yField } = this.options;\n    const scale = scales[yField];\n    if (label?.visible) {\n      const geometry = getGeometryByType(this.view, 'interval');\n      this.doRenderLabel(geometry, {\n        type: 'column',\n        formatter: scale.formatter && ((value: Maybe<string | number>) => scale.formatter(value)),\n        ...this.options.label,\n      });\n    }\n  }\n\n  private applyResponsive(stage) {\n    const methods = responsiveMethods[stage];\n    each(methods, (r) => {\n      const responsive = r;\n      responsive.method(this);\n    });\n  }\n}\n\nregisterPlotType('column', BaseColumnLayer);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}