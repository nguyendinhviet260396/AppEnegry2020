{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { each, deepMix, clone, find } from '@antv/util';\nvar DEFAULT_SIZE = 12;\nvar TOLERANCE = 0.01;\nvar MAX_ITERATION = 100;\nvar MIN_HEIGHT = 12;\n\nfunction getRange(points) {\n  var maxHeight = -Infinity;\n  var min = Infinity;\n  var max = -Infinity;\n  each(points, function (p) {\n    min = Math.min(p.x, min);\n    max = Math.max(p.x, max);\n    var height = Math.abs(p.y[0] - p.y[1]);\n    maxHeight = Math.max(maxHeight, height);\n  });\n  return {\n    xRange: [min, max],\n    maxHeight: maxHeight\n  };\n}\n\nfunction interpolateY(x, points, index) {\n  var leftPoint = points[0];\n  var rightPoint = points[points.length - 1];\n  each(points, function (p) {\n    if (p.x === x) {\n      return p.y[index];\n    }\n\n    if (p.x < x && p.x > leftPoint.x) {\n      leftPoint = p;\n    }\n\n    if (p.x > x && p.x < rightPoint.x) {\n      rightPoint = p;\n    }\n  });\n  var t = (x - leftPoint.x) / (rightPoint.x - leftPoint.x);\n  return leftPoint.y[index] * (1 - t) + rightPoint.y[index] * t;\n}\n\nfunction getXIndex(data, x) {\n  // tslint:disable-next-line: prefer-for-of\n  var i;\n\n  for (i = 0; i < data.length; i++) {\n    var d = data[i];\n\n    if (d.x === x || d.x > x) {\n      break;\n    }\n  }\n\n  return i;\n}\n\nvar AreaLabel =\n/** @class */\nfunction () {\n  function AreaLabel(cfg) {\n    this.destroyed = false;\n    this.scaleFactor = [];\n    this.view = cfg.view;\n    this.plot = cfg.plot;\n    var defaultOptions = this.getDefaultOptions();\n    this.options = deepMix(defaultOptions, cfg, {});\n    this.init();\n  }\n\n  AreaLabel.prototype.init = function () {\n    var _this = this;\n\n    this.container = this.getGeometry().labelsContainer;\n    this.view.on('beforerender', function () {\n      _this.clear();\n\n      _this.plot.canvas.draw();\n    });\n  };\n\n  AreaLabel.prototype.render = function () {\n    var _this = this;\n\n    var stackField = this.plot.options.stackField;\n    var groupedPoints = this.getGeometry().dataArray;\n    var labelPoints = [];\n    each(groupedPoints, function (pointArray, name) {\n      var labelPoint = _this.drawLabel(pointArray, name);\n\n      if (labelPoint) {\n        labelPoints.push(deepMix({}, pointArray[0], labelPoint));\n\n        _this.scaleFactor.push(labelPoint.scaleFactor);\n      }\n    });\n    var labelShapes = [];\n    each(labelPoints, function (p, index) {\n      var _a = _this.options,\n          style = _a.style,\n          offsetX = _a.offsetX,\n          offsetY = _a.offsetY;\n\n      var labelSize = _this.getFontSize(index);\n\n      var formatter = _this.options.formatter;\n      var content = formatter ? formatter(p._origin[stackField]) : p._origin[stackField];\n\n      var text = _this.container.addShape('text', {\n        attrs: deepMix({}, {\n          x: p.x + offsetX,\n          y: p.y + offsetY,\n          text: content,\n          fill: p.color,\n          fontSize: labelSize,\n          textAlign: 'center',\n          textBaseline: 'top'\n        }, style),\n        name: 'label'\n      });\n\n      labelShapes.push(text);\n    });\n    this.plot.canvas.draw();\n  };\n\n  AreaLabel.prototype.clear = function () {\n    if (this.container) {\n      this.container.clear();\n    }\n  };\n\n  AreaLabel.prototype.hide = function () {\n    this.container.set('visible', false);\n    this.plot.canvas.draw();\n  };\n\n  AreaLabel.prototype.show = function () {\n    this.container.set('visible', true);\n    this.plot.canvas.draw();\n  };\n\n  AreaLabel.prototype.destroy = function () {\n    if (this.container) {\n      this.container.remove();\n    }\n\n    this.destroyed = true;\n  };\n\n  AreaLabel.prototype.getBBox = function () {\n    return this.container.getBBox();\n  };\n\n  AreaLabel.prototype.getDefaultOptions = function () {\n    var theme = this.plot.theme;\n    var labelStyle = clone(theme.label.style);\n    labelStyle.stroke = null;\n    delete labelStyle.fill;\n    return {\n      offsetX: 0,\n      offsetY: 0,\n      style: labelStyle,\n      autoScale: true\n    };\n  };\n\n  AreaLabel.prototype.drawLabel = function (points, name) {\n    var _a = getRange(points),\n        xRange = _a.xRange,\n        maxHeight = _a.maxHeight; // 根据area宽度在x方向各点间做插值\n\n\n    var resolution = xRange[1] - xRange[0];\n    var interpolatedPoints = this.getInterpolatedPoints(xRange[0], resolution, points); // 获取label的bbox\n\n    var bbox = this.getLabelBbox(name);\n    var fitOption = {\n      xRange: xRange,\n      aspect: bbox.width / bbox.height,\n      data: interpolatedPoints,\n      justTest: true\n    };\n    var height = this.bisection(MIN_HEIGHT, maxHeight, this.testFit, fitOption, TOLERANCE, MAX_ITERATION);\n\n    if (height === null) {\n      return;\n    }\n\n    fitOption.justTest = false;\n    var fit = this.testFit(fitOption);\n    fit.x = fit.x;\n    fit.y = fit.y0 + (fit.y1 - fit.y0) / 2;\n    fit.scaleFactor = height / bbox.height * 0.2;\n    return fit;\n  };\n\n  AreaLabel.prototype.getInterpolatedPoints = function (minX, resolution, points) {\n    var interpolatedPoints = [];\n    var step = 2;\n\n    for (var i = minX; i < resolution; i += step) {\n      var y0 = interpolateY(i, points, 0);\n      var y1 = interpolateY(i, points, 1);\n      interpolatedPoints.push({\n        x: i,\n        y: [y0, y1]\n      });\n    }\n\n    return interpolatedPoints;\n  };\n\n  AreaLabel.prototype.bisection = function (min, max, test, testOption, tolerance, maxIteration) {\n    for (var i = 0; i < maxIteration; i++) {\n      var middle = (min + max) / 2;\n      var options = testOption;\n      options.height = middle;\n      options.width = middle * options.aspect;\n      var passesTest = test(options);\n      var withinTolerance = (max - min) / 2 < tolerance;\n\n      if (passesTest && withinTolerance) {\n        return middle;\n      }\n\n      if (passesTest) {\n        min = middle;\n      } else {\n        max = middle;\n      }\n    }\n\n    return null;\n  };\n\n  AreaLabel.prototype.testFit = function (option) {\n    var xRange = option.xRange,\n        width = option.width,\n        height = option.height,\n        data = option.data,\n        justTest = option.justTest;\n\n    for (var i = 0; i < data.length; i++) {\n      var d = data[i];\n      var x0 = d.x;\n      var x1 = x0 + width;\n\n      if (x1 > xRange[1]) {\n        break;\n      }\n\n      var x1_index = getXIndex(data, x1);\n      var ceiling = -Infinity;\n      var ceilingFloor = null; // 保存ceiling时对应的bottom位置，ceil和floor不一定是一对坐标\n\n      var floor = Infinity;\n\n      for (var j = i; j < x1_index; j++) {\n        var top_1 = data[j].y[1];\n        var bottom = data[j].y[0];\n\n        if (bottom < floor) {\n          floor = bottom;\n        }\n\n        if (top_1 > ceiling) {\n          ceiling = top_1;\n          ceilingFloor = bottom;\n        }\n\n        if (floor - ceiling < height) {\n          break;\n        }\n      }\n\n      if (floor - ceiling >= height) {\n        if (justTest) {\n          return true;\n        }\n\n        return {\n          x: x0,\n          y0: ceiling,\n          y1: ceilingFloor,\n          width: width,\n          height: height\n        };\n      }\n    }\n\n    return false;\n  };\n\n  AreaLabel.prototype.getLabelBbox = function (text) {\n    var labelStyle = clone(this.plot.theme.label.textStyle);\n    labelStyle.fontSize = DEFAULT_SIZE;\n    var tShape = this.container.addShape('text', {\n      attrs: __assign({\n        text: text,\n        x: 0,\n        y: 0\n      }, labelStyle)\n    });\n    var bbox = tShape.getBBox();\n    tShape.remove();\n    return bbox;\n  };\n\n  AreaLabel.prototype.getGeometry = function () {\n    return find(this.view.geometries, function (geom) {\n      return geom.type === 'area';\n    });\n  };\n\n  AreaLabel.prototype.getFontSize = function (index) {\n    if (this.options.autoScale) {\n      var scaleFactor = this.scaleFactor[index];\n      return DEFAULT_SIZE * scaleFactor;\n    }\n\n    return DEFAULT_SIZE;\n  };\n\n  return AreaLabel;\n}();\n\nexport default AreaLabel;","map":{"version":3,"sources":["../../../../../src/plots/stacked-area/component/label/area-label.ts"],"names":[],"mappings":"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","sourcesContent":["import { each, deepMix, clone, find } from '@antv/util';\nimport { View, IGroup, Geometry } from '../../../../dependents';\n\nconst DEFAULT_SIZE = 12;\nconst TOLERANCE = 0.01;\nconst MAX_ITERATION = 100;\nconst MIN_HEIGHT = 12;\n\nfunction getRange(points) {\n  let maxHeight = -Infinity;\n  let min = Infinity;\n  let max = -Infinity;\n  each(points, (p) => {\n    min = Math.min(p.x, min);\n    max = Math.max(p.x, max);\n    const height = Math.abs(p.y[0] - p.y[1]);\n    maxHeight = Math.max(maxHeight, height);\n  });\n  return {\n    xRange: [min, max],\n    maxHeight,\n  };\n}\n\nfunction interpolateY(x, points, index) {\n  let leftPoint = points[0];\n  let rightPoint = points[points.length - 1];\n  each(points, (p) => {\n    if (p.x === x) {\n      return p.y[index];\n    }\n    if (p.x < x && p.x > leftPoint.x) {\n      leftPoint = p;\n    }\n    if (p.x > x && p.x < rightPoint.x) {\n      rightPoint = p;\n    }\n  });\n  const t = (x - leftPoint.x) / (rightPoint.x - leftPoint.x);\n  return leftPoint.y[index] * (1 - t) + rightPoint.y[index] * t;\n}\n\nfunction getXIndex(data, x) {\n  // tslint:disable-next-line: prefer-for-of\n  let i;\n  for (i = 0; i < data.length; i++) {\n    const d = data[i];\n    if (d.x === x || d.x > x) {\n      break;\n    }\n  }\n  return i;\n}\n\nexport interface AreaLabelConfig {\n  visible: boolean;\n  formatter?: (...args: any[]) => string;\n  offsetX?: number;\n  offsetY?: number;\n  style?: any;\n  autoScale?: boolean;\n}\n\nexport interface IAreaLabel extends AreaLabelConfig {\n  view: View;\n  plot: any;\n}\n\nexport default class AreaLabel {\n  public options: AreaLabelConfig;\n  public destroyed: boolean = false;\n  protected plot: any;\n  protected view: View;\n  private container: IGroup;\n  private scaleFactor: number[] = [];\n\n  constructor(cfg: IAreaLabel) {\n    this.view = cfg.view;\n    this.plot = cfg.plot;\n    const defaultOptions = this.getDefaultOptions();\n    this.options = deepMix(defaultOptions, cfg, {});\n    this.init();\n  }\n\n  protected init() {\n    this.container = this.getGeometry().labelsContainer;\n    this.view.on('beforerender', () => {\n      this.clear();\n      this.plot.canvas.draw();\n    });\n  }\n\n  public render() {\n    const stackField = this.plot.options.stackField;\n    const groupedPoints = this.getGeometry().dataArray;\n    const labelPoints = [];\n    each(groupedPoints, (pointArray, name) => {\n      const labelPoint = this.drawLabel(pointArray, name);\n      if (labelPoint) {\n        labelPoints.push(deepMix({}, pointArray[0], labelPoint));\n        this.scaleFactor.push(labelPoint.scaleFactor);\n      }\n    });\n    const labelShapes = [];\n    each(labelPoints, (p, index) => {\n      const { style, offsetX, offsetY } = this.options;\n      const labelSize = this.getFontSize(index);\n      const formatter = this.options.formatter;\n      const content = formatter ? formatter(p._origin[stackField]) : p._origin[stackField];\n      const text = this.container.addShape('text', {\n        attrs: deepMix(\n          {},\n          {\n            x: p.x + offsetX,\n            y: p.y + offsetY,\n            text: content,\n            fill: p.color,\n            fontSize: labelSize,\n            textAlign: 'center',\n            textBaseline: 'top',\n          },\n          style\n        ),\n        name: 'label',\n      });\n      labelShapes.push(text);\n    });\n    this.plot.canvas.draw();\n  }\n\n  public clear() {\n    if (this.container) {\n      this.container.clear();\n    }\n  }\n\n  public hide() {\n    this.container.set('visible', false);\n    this.plot.canvas.draw();\n  }\n\n  public show() {\n    this.container.set('visible', true);\n    this.plot.canvas.draw();\n  }\n\n  public destroy() {\n    if (this.container) {\n      this.container.remove();\n    }\n    this.destroyed = true;\n  }\n\n  public getBBox() {\n    return this.container.getBBox();\n  }\n\n  protected getDefaultOptions() {\n    const { theme } = this.plot;\n    const labelStyle = clone(theme.label.style);\n    labelStyle.stroke = null;\n    delete labelStyle.fill;\n    return {\n      offsetX: 0,\n      offsetY: 0,\n      style: labelStyle,\n      autoScale: true,\n    };\n  }\n\n  protected drawLabel(points, name) {\n    const { xRange, maxHeight } = getRange(points);\n    // 根据area宽度在x方向各点间做插值\n    const resolution = xRange[1] - xRange[0];\n    const interpolatedPoints = this.getInterpolatedPoints(xRange[0], resolution, points);\n    // 获取label的bbox\n    const bbox = this.getLabelBbox(name);\n    const fitOption = {\n      xRange,\n      aspect: bbox.width / bbox.height,\n      data: interpolatedPoints,\n      justTest: true,\n    };\n    const height = this.bisection(MIN_HEIGHT, maxHeight, this.testFit, fitOption, TOLERANCE, MAX_ITERATION);\n    if (height === null) {\n      return;\n    }\n    fitOption.justTest = false;\n    const fit: any = this.testFit(fitOption);\n    fit.x = fit.x;\n    fit.y = fit.y0 + (fit.y1 - fit.y0) / 2;\n    fit.scaleFactor = (height / bbox.height) * 0.2;\n    return fit;\n  }\n\n  private getInterpolatedPoints(minX, resolution, points) {\n    const interpolatedPoints = [];\n    const step = 2;\n    for (let i = minX; i < resolution; i += step) {\n      const y0 = interpolateY(i, points, 0);\n      const y1 = interpolateY(i, points, 1);\n      interpolatedPoints.push({\n        x: i,\n        y: [y0, y1],\n      });\n    }\n    return interpolatedPoints;\n  }\n\n  private bisection(min, max, test, testOption, tolerance, maxIteration) {\n    for (let i = 0; i < maxIteration; i++) {\n      const middle = (min + max) / 2;\n      const options = testOption;\n      options.height = middle;\n      options.width = middle * options.aspect;\n      const passesTest = test(options);\n      const withinTolerance = (max - min) / 2 < tolerance;\n      if (passesTest && withinTolerance) {\n        return middle;\n      }\n      if (passesTest) {\n        min = middle;\n      } else {\n        max = middle;\n      }\n    }\n    return null;\n  }\n\n  private testFit(option) {\n    const { xRange, width, height, data, justTest } = option;\n    for (let i = 0; i < data.length; i++) {\n      const d = data[i];\n      const x0 = d.x;\n      const x1 = x0 + width;\n      if (x1 > xRange[1]) {\n        break;\n      }\n      const x1_index = getXIndex(data, x1);\n      let ceiling = -Infinity;\n      let ceilingFloor = null; // 保存ceiling时对应的bottom位置，ceil和floor不一定是一对坐标\n      let floor = Infinity;\n      for (let j = i; j < x1_index; j++) {\n        const top = data[j].y[1];\n        const bottom = data[j].y[0];\n        if (bottom < floor) {\n          floor = bottom;\n        }\n        if (top > ceiling) {\n          ceiling = top;\n          ceilingFloor = bottom;\n        }\n        if (floor - ceiling < height) {\n          break;\n        }\n      }\n      if (floor - ceiling >= height) {\n        if (justTest) {\n          return true;\n        }\n        return {\n          x: x0,\n          y0: ceiling,\n          y1: ceilingFloor,\n          width,\n          height,\n        };\n      }\n    }\n    return false;\n  }\n\n  private getLabelBbox(text) {\n    const labelStyle = clone(this.plot.theme.label.textStyle);\n    labelStyle.fontSize = DEFAULT_SIZE;\n    const tShape = this.container.addShape('text', {\n      attrs: {\n        text,\n        x: 0,\n        y: 0,\n        ...labelStyle,\n      },\n    });\n    const bbox = tShape.getBBox();\n    tShape.remove();\n    return bbox;\n  }\n\n  private getGeometry() {\n    return find(this.view.geometries, (geom) => geom.type === 'area') as Geometry;\n  }\n\n  protected getFontSize(index) {\n    if (this.options.autoScale) {\n      const scaleFactor = this.scaleFactor[index];\n      return DEFAULT_SIZE * scaleFactor;\n    }\n    return DEFAULT_SIZE;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}