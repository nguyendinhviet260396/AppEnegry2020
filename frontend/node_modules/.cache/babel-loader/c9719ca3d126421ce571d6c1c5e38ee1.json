{"ast":null,"code":"import { each, clone, isFunction, has } from '@antv/util';\nimport { compare } from '../../base/controller/state';\nvar POSITION_MAPPER = ['xField', 'yField', 'angleField'];\n\nfunction onActive(plot, condition) {\n  var props = plot.options; // 获取state condition对应在画布的位置，只有在state condition对应字段为位置映射字段时，tooltip才会对齐进行响应\n\n  if (shouldActive(props, condition)) {\n    var data = props.data;\n    each(data, function (d) {\n      if (compare(d, condition)) {\n        var point = plot.view.getXY(d); // 调用showTooltip方法\n\n        plot.view.on('tooltip:create', function (e) {\n          processState(condition, e, false);\n        });\n        plot.view.showTooltip(point);\n      }\n    });\n  }\n}\n\nfunction onDisable(plot, condition) {\n  plot.view.on('tooltip:change', function (e) {\n    processState(condition, e, true);\n  });\n}\n\nfunction processState(condition, e, inverse) {\n  var expected = inverse ? false : true;\n  var originItems = clone(e.items);\n  e.items.splice(0);\n  each(originItems, function (item) {\n    var origin = item.point._origin;\n\n    if (compare(origin, condition) === expected) {\n      e.items.push(item);\n    }\n  });\n}\n\nfunction shouldActive(props, condition) {\n  var fields = getPositionField(props);\n  return !isFunction(condition) && fields.indexOf(condition.name);\n}\n\nfunction getPositionField(props) {\n  var fields = [];\n  each(POSITION_MAPPER, function (v) {\n    if (has(props, v)) {\n      fields.push(v);\n    }\n  });\n  return fields;\n}\n\nexport default {\n  active: onActive,\n  selected: onActive,\n  disable: onDisable\n};","map":{"version":3,"sources":["../../../src/components/tooltip/state.ts"],"names":[],"mappings":"AAAA,SAAS,IAAT,EAAe,KAAf,EAAsB,UAAtB,EAAkC,GAAlC,QAA6C,YAA7C;AACA,SAAS,OAAT,QAAwB,6BAAxB;AAEA,IAAM,eAAe,GAAG,CAAC,QAAD,EAAW,QAAX,EAAqB,YAArB,CAAxB;;AAEA,SAAS,QAAT,CAAkB,IAAlB,EAAwB,SAAxB,EAAiC;AAC/B,MAAM,KAAK,GAAG,IAAI,CAAC,OAAnB,CAD+B,CAE/B;;AACA,MAAI,YAAY,CAAC,KAAD,EAAQ,SAAR,CAAhB,EAAoC;AAClC,QAAM,IAAI,GAAG,KAAK,CAAC,IAAnB;AACA,IAAA,IAAI,CAAC,IAAD,EAAO,UAAC,CAAD,EAAE;AACX,UAAI,OAAO,CAAC,CAAD,EAAI,SAAJ,CAAX,EAA2B;AACzB,YAAM,KAAK,GAAG,IAAI,CAAC,IAAL,CAAU,KAAV,CAAgB,CAAhB,CAAd,CADyB,CAEzB;;AACA,QAAA,IAAI,CAAC,IAAL,CAAU,EAAV,CAAa,gBAAb,EAA+B,UAAC,CAAD,EAAE;AAC/B,UAAA,YAAY,CAAC,SAAD,EAAY,CAAZ,EAAe,KAAf,CAAZ;AACD,SAFD;AAGA,QAAA,IAAI,CAAC,IAAL,CAAU,WAAV,CAAsB,KAAtB;AACD;AACF,KATG,CAAJ;AAUD;AACF;;AAED,SAAS,SAAT,CAAmB,IAAnB,EAAyB,SAAzB,EAAkC;AAChC,EAAA,IAAI,CAAC,IAAL,CAAU,EAAV,CAAa,gBAAb,EAA+B,UAAC,CAAD,EAAE;AAC/B,IAAA,YAAY,CAAC,SAAD,EAAY,CAAZ,EAAe,IAAf,CAAZ;AACD,GAFD;AAGD;;AAED,SAAS,YAAT,CAAsB,SAAtB,EAAiC,CAAjC,EAAoC,OAApC,EAA2C;AACzC,MAAM,QAAQ,GAAG,OAAO,GAAG,KAAH,GAAW,IAAnC;AACA,MAAM,WAAW,GAAG,KAAK,CAAC,CAAC,CAAC,KAAH,CAAzB;AACA,EAAA,CAAC,CAAC,KAAF,CAAQ,MAAR,CAAe,CAAf;AACA,EAAA,IAAI,CAAC,WAAD,EAAc,UAAC,IAAD,EAAK;AACrB,QAAM,MAAM,GAAG,IAAI,CAAC,KAAL,CAAW,OAA1B;;AACA,QAAI,OAAO,CAAC,MAAD,EAAS,SAAT,CAAP,KAA+B,QAAnC,EAA6C;AAC3C,MAAA,CAAC,CAAC,KAAF,CAAQ,IAAR,CAAa,IAAb;AACD;AACF,GALG,CAAJ;AAMD;;AAED,SAAS,YAAT,CAAsB,KAAtB,EAA6B,SAA7B,EAAsC;AACpC,MAAM,MAAM,GAAG,gBAAgB,CAAC,KAAD,CAA/B;AACA,SAAO,CAAC,UAAU,CAAC,SAAD,CAAX,IAA0B,MAAM,CAAC,OAAP,CAAe,SAAS,CAAC,IAAzB,CAAjC;AACD;;AAED,SAAS,gBAAT,CAA0B,KAA1B,EAA+B;AAC7B,MAAM,MAAM,GAAG,EAAf;AACA,EAAA,IAAI,CAAC,eAAD,EAAkB,UAAC,CAAD,EAAE;AACtB,QAAI,GAAG,CAAC,KAAD,EAAQ,CAAR,CAAP,EAAmB;AACjB,MAAA,MAAM,CAAC,IAAP,CAAY,CAAZ;AACD;AACF,GAJG,CAAJ;AAKA,SAAO,MAAP;AACD;;AAED,eAAe;AACb,EAAA,MAAM,EAAE,QADK;AAEb,EAAA,QAAQ,EAAE,QAFG;AAGb,EAAA,OAAO,EAAE;AAHI,CAAf","sourcesContent":["import { each, clone, isFunction, has } from '@antv/util';\nimport { compare } from '../../base/controller/state';\n\nconst POSITION_MAPPER = ['xField', 'yField', 'angleField'];\n\nfunction onActive(plot, condition) {\n  const props = plot.options;\n  // 获取state condition对应在画布的位置，只有在state condition对应字段为位置映射字段时，tooltip才会对齐进行响应\n  if (shouldActive(props, condition)) {\n    const data = props.data;\n    each(data, (d) => {\n      if (compare(d, condition)) {\n        const point = plot.view.getXY(d);\n        // 调用showTooltip方法\n        plot.view.on('tooltip:create', (e) => {\n          processState(condition, e, false);\n        });\n        plot.view.showTooltip(point);\n      }\n    });\n  }\n}\n\nfunction onDisable(plot, condition) {\n  plot.view.on('tooltip:change', (e) => {\n    processState(condition, e, true);\n  });\n}\n\nfunction processState(condition, e, inverse) {\n  const expected = inverse ? false : true;\n  const originItems = clone(e.items);\n  e.items.splice(0);\n  each(originItems, (item) => {\n    const origin = item.point._origin;\n    if (compare(origin, condition) === expected) {\n      e.items.push(item);\n    }\n  });\n}\n\nfunction shouldActive(props, condition) {\n  const fields = getPositionField(props);\n  return !isFunction(condition) && fields.indexOf(condition.name);\n}\n\nfunction getPositionField(props) {\n  const fields = [];\n  each(POSITION_MAPPER, (v) => {\n    if (has(props, v)) {\n      fields.push(v);\n    }\n  });\n  return fields;\n}\n\nexport default {\n  active: onActive,\n  selected: onActive,\n  disable: onDisable,\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}