{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { has, isString, isFunction, isArray, get } from '@antv/util';\nimport ElementParser from '../base';\n\nvar AreaParser =\n/** @class */\nfunction (_super) {\n  __extends(AreaParser, _super);\n\n  function AreaParser() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  AreaParser.prototype.init = function () {\n    var props = this.plot.options;\n    this.config = {\n      type: 'area',\n      position: {\n        fields: [props.xField, props.yField]\n      },\n      connectNulls: props.connectNulls || false\n    };\n\n    if (props.smooth) {\n      this.config.shape = {\n        values: ['smooth']\n      };\n    }\n\n    if (this._getColorMappingField() || props.color) {\n      this.parseColor();\n    }\n\n    if (props.areaStyle || props.area && props.area.style) {\n      this.parseStyle();\n    }\n  };\n\n  AreaParser.prototype.parseColor = function () {\n    var props = this.plot.options;\n    var config = {};\n\n    var colorMappingField = this._getColorMappingField();\n\n    if (colorMappingField) {\n      config.fields = colorMappingField;\n    }\n\n    if (has(props, 'color')) {\n      var color = props.color;\n\n      if (isString(color)) {\n        config.values = [color];\n      } else if (isFunction(color)) {\n        config.callback = color;\n      } else if (isArray(color)) {\n        if (colorMappingField) {\n          config.values = color;\n        } else {\n          if (color.length > 0) {\n            config.values = [color[0]];\n          }\n        }\n      }\n    }\n\n    this.config.color = config;\n  };\n\n  AreaParser.prototype.parseStyle = function () {\n    var props = this.plot.options;\n    var styleProps = props.areaStyle ? props.areaStyle : props.area.style;\n    var config = {};\n\n    if (isFunction(styleProps) && props.seriesField) {\n      config.fields = [props.seriesField];\n      config.callback = styleProps;\n    } else {\n      config.cfg = styleProps;\n    }\n\n    this.config.style = config;\n  };\n\n  AreaParser.prototype._getColorMappingField = function () {\n    var props = this.plot.options;\n    var colorMapper = ['stackField', 'seriesField'];\n\n    for (var _i = 0, colorMapper_1 = colorMapper; _i < colorMapper_1.length; _i++) {\n      var m = colorMapper_1[_i];\n\n      if (get(props, m)) {\n        return [props[m]];\n      }\n    }\n  };\n\n  return AreaParser;\n}(ElementParser);\n\nexport default AreaParser;","map":{"version":3,"sources":["../../../src/geoms/area/main.ts"],"names":[],"mappings":";AACA,SAAS,GAAT,EAAc,QAAd,EAAwB,UAAxB,EAAoC,OAApC,EAA6C,GAA7C,QAAwD,YAAxD;AACA,OAAO,aAAP,MAA0B,SAA1B;;AAEA,IAAA,UAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAwC,EAAA,SAAA,CAAA,UAAA,EAAA,MAAA,CAAA;;AAAxC,WAAA,UAAA,GAAA;;AAsEC;;AArEQ,EAAA,UAAA,CAAA,SAAA,CAAA,IAAA,GAAP,YAAA;AACE,QAAM,KAAK,GAAG,KAAK,IAAL,CAAU,OAAxB;AACA,SAAK,MAAL,GAAc;AACZ,MAAA,IAAI,EAAE,MADM;AAEZ,MAAA,QAAQ,EAAE;AACR,QAAA,MAAM,EAAE,CAAC,KAAK,CAAC,MAAP,EAAe,KAAK,CAAC,MAArB;AADA,OAFE;AAKZ,MAAA,YAAY,EAAE,KAAK,CAAC,YAAN,IAAsB;AALxB,KAAd;;AAOA,QAAI,KAAK,CAAC,MAAV,EAAkB;AAChB,WAAK,MAAL,CAAY,KAAZ,GAAoB;AAAE,QAAA,MAAM,EAAE,CAAC,QAAD;AAAV,OAApB;AACD;;AACD,QAAI,KAAK,qBAAL,MAAgC,KAAK,CAAC,KAA1C,EAAiD;AAC/C,WAAK,UAAL;AACD;;AAED,QAAI,KAAK,CAAC,SAAN,IAAoB,KAAK,CAAC,IAAN,IAAc,KAAK,CAAC,IAAN,CAAW,KAAjD,EAAyD;AACvD,WAAK,UAAL;AACD;AACF,GAnBM;;AAqBA,EAAA,UAAA,CAAA,SAAA,CAAA,UAAA,GAAP,YAAA;AACE,QAAM,KAAK,GAAG,KAAK,IAAL,CAAU,OAAxB;AACA,QAAM,MAAM,GAAU,EAAtB;;AACA,QAAM,iBAAiB,GAAG,KAAK,qBAAL,EAA1B;;AACA,QAAI,iBAAJ,EAAuB;AACrB,MAAA,MAAM,CAAC,MAAP,GAAgB,iBAAhB;AACD;;AACD,QAAI,GAAG,CAAC,KAAD,EAAQ,OAAR,CAAP,EAAyB;AACvB,UAAM,KAAK,GAAG,KAAK,CAAC,KAApB;;AACA,UAAI,QAAQ,CAAC,KAAD,CAAZ,EAAqB;AACnB,QAAA,MAAM,CAAC,MAAP,GAAgB,CAAC,KAAD,CAAhB;AACD,OAFD,MAEO,IAAI,UAAU,CAAC,KAAD,CAAd,EAAuB;AAC5B,QAAA,MAAM,CAAC,QAAP,GAAkB,KAAlB;AACD,OAFM,MAEA,IAAI,OAAO,CAAC,KAAD,CAAX,EAAoB;AACzB,YAAI,iBAAJ,EAAuB;AACrB,UAAA,MAAM,CAAC,MAAP,GAAgB,KAAhB;AACD,SAFD,MAEO;AACL,cAAI,KAAK,CAAC,MAAN,GAAe,CAAnB,EAAsB;AACpB,YAAA,MAAM,CAAC,MAAP,GAAgB,CAAC,KAAK,CAAC,CAAD,CAAN,CAAhB;AACD;AACF;AACF;AACF;;AACD,SAAK,MAAL,CAAY,KAAZ,GAAoB,MAApB;AACD,GAxBM;;AA0BA,EAAA,UAAA,CAAA,SAAA,CAAA,UAAA,GAAP,YAAA;AACE,QAAM,KAAK,GAAG,KAAK,IAAL,CAAU,OAAxB;AACA,QAAM,UAAU,GAAG,KAAK,CAAC,SAAN,GAAkB,KAAK,CAAC,SAAxB,GAAoC,KAAK,CAAC,IAAN,CAAW,KAAlE;AACA,QAAM,MAAM,GAAU,EAAtB;;AACA,QAAI,UAAU,CAAC,UAAD,CAAV,IAA0B,KAAK,CAAC,WAApC,EAAiD;AAC/C,MAAA,MAAM,CAAC,MAAP,GAAgB,CAAC,KAAK,CAAC,WAAP,CAAhB;AACA,MAAA,MAAM,CAAC,QAAP,GAAkB,UAAlB;AACD,KAHD,MAGO;AACL,MAAA,MAAM,CAAC,GAAP,GAAa,UAAb;AACD;;AACD,SAAK,MAAL,CAAY,KAAZ,GAAoB,MAApB;AACD,GAXM;;AAaC,EAAA,UAAA,CAAA,SAAA,CAAA,qBAAA,GAAR,YAAA;AACE,QAAM,KAAK,GAAG,KAAK,IAAL,CAAU,OAAxB;AACA,QAAM,WAAW,GAAG,CAAC,YAAD,EAAe,aAAf,CAApB;;AACA,SAAgB,IAAA,EAAA,GAAA,CAAA,EAAA,aAAA,GAAA,WAAhB,EAAgB,EAAA,GAAA,aAAA,CAAA,MAAhB,EAAgB,EAAA,EAAhB,EAA6B;AAAxB,UAAM,CAAC,GAAA,aAAA,CAAA,EAAA,CAAP;;AACH,UAAI,GAAG,CAAC,KAAD,EAAQ,CAAR,CAAP,EAAmB;AACjB,eAAO,CAAC,KAAK,CAAC,CAAD,CAAN,CAAP;AACD;AACF;AACF,GARO;;AASV,SAAA,UAAA;AAAC,CAtED,CAAwC,aAAxC,CAAA","sourcesContent":["import { Datum } from '../../dependents';\nimport { has, isString, isFunction, isArray, get } from '@antv/util';\nimport ElementParser from '../base';\n\nexport default class AreaParser extends ElementParser {\n  public init() {\n    const props = this.plot.options;\n    this.config = {\n      type: 'area',\n      position: {\n        fields: [props.xField, props.yField],\n      },\n      connectNulls: props.connectNulls || false,\n    };\n    if (props.smooth) {\n      this.config.shape = { values: ['smooth'] };\n    }\n    if (this._getColorMappingField() || props.color) {\n      this.parseColor();\n    }\n\n    if (props.areaStyle || (props.area && props.area.style)) {\n      this.parseStyle();\n    }\n  }\n\n  public parseColor() {\n    const props = this.plot.options;\n    const config: Datum = {};\n    const colorMappingField = this._getColorMappingField();\n    if (colorMappingField) {\n      config.fields = colorMappingField;\n    }\n    if (has(props, 'color')) {\n      const color = props.color;\n      if (isString(color)) {\n        config.values = [color];\n      } else if (isFunction(color)) {\n        config.callback = color;\n      } else if (isArray(color)) {\n        if (colorMappingField) {\n          config.values = color;\n        } else {\n          if (color.length > 0) {\n            config.values = [color[0]];\n          }\n        }\n      }\n    }\n    this.config.color = config;\n  }\n\n  public parseStyle() {\n    const props = this.plot.options;\n    const styleProps = props.areaStyle ? props.areaStyle : props.area.style;\n    const config: Datum = {};\n    if (isFunction(styleProps) && props.seriesField) {\n      config.fields = [props.seriesField];\n      config.callback = styleProps;\n    } else {\n      config.cfg = styleProps;\n    }\n    this.config.style = config;\n  }\n\n  private _getColorMappingField() {\n    const props = this.plot.options;\n    const colorMapper = ['stackField', 'seriesField'];\n    for (const m of colorMapper) {\n      if (get(props, m)) {\n        return [props[m]];\n      }\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}