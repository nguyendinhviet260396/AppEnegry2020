{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { groupBy, mapValues, map, flatten, isNumber, reduce, each } from '@antv/util';\nexport var transformDataPercentage = function transformDataPercentage(data, groupField, measures) {\n  // 按照groupBy字段计算各个group的总和\n  var chain = groupBy(data, groupField);\n  chain = mapValues(chain, function (items) {\n    return map(items, function (item) {\n      return map(measures, function (field) {\n        return item[field];\n      });\n    });\n  });\n  chain = mapValues(chain, flatten);\n  chain = mapValues(chain, function (vals) {\n    return map(vals, function (val) {\n      // @ts-ignore\n      var v = Number.parseFloat(val);\n\n      if (!isNumber(v) || isNaN(v)) {\n        return 0;\n      }\n\n      return v;\n    });\n  }); // @ts-ignore\n\n  var groupTotals = mapValues(chain, function (vals) {\n    return reduce(vals, function (sum, val) {\n      return sum + val;\n    }, 0);\n  }); // 覆盖measures字段的值为对于的百分比\n\n  var newData = map(data, function (item) {\n    // @ts-ignore\n    var rst = __assign(__assign({}, item), {\n      _origin: item,\n      total: groupTotals[item[groupField]]\n    });\n\n    each(measures, function (field) {\n      // @ts-ignore\n      rst[field] = item[field] / (groupTotals[item[groupField]] || 1);\n    });\n    return rst;\n  }); // 检查精度，确保总和为1\n\n  each(groupBy(newData, groupField), function (items) {\n    var sum = 0;\n    each(items, function (item, itemIdx) {\n      each(measures, function (field, fieldIdx) {\n        // @ts-ignore\n        if (sum + item[field] >= 1 || itemIdx === items.length - 1 && fieldIdx === measures.length - 1 && sum > 0) {\n          item[field] = 1 - sum;\n        } // @ts-ignore\n\n\n        sum += item[field];\n      });\n    });\n  }); // @ts-ignore\n\n  return newData;\n};","map":{"version":3,"sources":["../../src/util/data.ts"],"names":[],"mappings":"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","sourcesContent":["import { groupBy, mapValues, map, flatten, isNumber, reduce, each } from '@antv/util';\nimport { DataItem } from '../interface/config';\n\nexport const transformDataPercentage = (data: DataItem[], groupField: string, measures: string[]): DataItem[] => {\n  // 按照groupBy字段计算各个group的总和\n  let chain = groupBy(data, groupField);\n  chain = mapValues(chain, (items) => map(items, (item) => map(measures, (field) => item[field])));\n  chain = mapValues(chain, flatten);\n  chain = mapValues(chain, (vals) =>\n    map(vals, (val) => {\n      // @ts-ignore\n      const v = Number.parseFloat(val);\n      if (!isNumber(v) || isNaN(v)) {\n        return 0;\n      }\n      return v;\n    })\n  );\n  // @ts-ignore\n  const groupTotals = mapValues(chain, (vals: number[]) => reduce(vals, (sum, val) => sum + val, 0));\n\n  // 覆盖measures字段的值为对于的百分比\n  const newData = map(data, (item) => {\n    // @ts-ignore\n    const rst = { ...item, _origin: item, total: groupTotals[item[groupField]] };\n    each(measures, (field) => {\n      // @ts-ignore\n      rst[field] = item[field] / (groupTotals[item[groupField]] || 1);\n    });\n\n    return rst;\n  });\n\n  // 检查精度，确保总和为1\n  each(groupBy(newData, groupField), (items: DataItem[]) => {\n    let sum = 0;\n    each(items, (item: DataItem, itemIdx: number) => {\n      each(measures, (field: string, fieldIdx: number) => {\n        // @ts-ignore\n        if (sum + item[field] >= 1 || (itemIdx === items.length - 1 && fieldIdx === measures.length - 1 && sum > 0)) {\n          item[field] = 1 - sum;\n        }\n        // @ts-ignore\n        sum += item[field];\n      });\n    });\n  });\n  // @ts-ignore\n  return newData;\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}