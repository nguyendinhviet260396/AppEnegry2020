{"ast":null,"code":"import { dice } from './dice';\nimport { slice } from './slice'; //reference: https://github.com/d3/d3-hierarchy/blob/master/src/treemap/squarify.js\n// 黄金分割\n\nvar ratio = (1 + Math.sqrt(5)) / 2;\nexport default function squarify(root, x0, y0, x1, y1) {\n  var children = root.children;\n  var value = root.value;\n  children.sort(function (a, b) {\n    return b.value - a.value;\n  });\n  var rows = [];\n  var sumValue, maxValue, minValue;\n  var alpha, beta;\n  var newRatio, minRatio;\n  var nodeValue;\n  var i = 0,\n      j = 0; // todo: 剔除empty node\n\n  while (i < children.length) {\n    var width = x1 - x0;\n    var height = y1 - y0;\n    sumValue = children[j++].value;\n    maxValue = sumValue;\n    minValue = sumValue;\n    alpha = Math.max(height / width, width / height) / (value * ratio);\n    beta = sumValue * sumValue * alpha;\n    minRatio = Math.max(maxValue / beta, beta / minValue);\n\n    for (; j < children.length; j++) {\n      nodeValue = children[j].value;\n      sumValue += nodeValue;\n      if (nodeValue < minValue) minValue = nodeValue;\n      if (nodeValue > maxValue) maxValue = nodeValue;\n      beta = sumValue * sumValue * alpha;\n      newRatio = Math.max(maxValue / beta, beta / minValue);\n\n      if (newRatio > minRatio) {\n        sumValue -= nodeValue;\n        break;\n      }\n\n      minRatio = newRatio;\n    }\n\n    var row = {\n      value: sumValue,\n      dice: width < height,\n      children: children.slice(i, j)\n    };\n    rows.push(row);\n\n    if (row.dice) {\n      var h = value ? height * sumValue / value : height;\n      dice(row, x0, y0, x1, y0 + h);\n\n      if (value) {\n        y0 += h;\n      }\n    } else {\n      var w = value ? width * sumValue / value : width;\n      slice(row, x0, y0, x0 + w, y1);\n\n      if (value) {\n        x0 += w;\n      }\n    }\n\n    value -= sumValue;\n    i = j;\n  }\n\n  return rows;\n}","map":{"version":3,"sources":["../../../../src/plots/treemap/layout/squarify.ts"],"names":[],"mappings":"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","sourcesContent":["import { dice } from './dice';\nimport { slice } from './slice';\n\n//reference: https://github.com/d3/d3-hierarchy/blob/master/src/treemap/squarify.js\n\n// 黄金分割\nconst ratio = (1 + Math.sqrt(5)) / 2;\n\nexport default function squarify(root, x0, y0, x1, y1) {\n  const { children } = root;\n  let value = root.value;\n  children.sort((a, b) => {\n    return b.value - a.value;\n  });\n  const rows = [];\n  let sumValue, maxValue, minValue;\n  let alpha, beta;\n  let newRatio, minRatio;\n  let nodeValue;\n  let i = 0,\n    j = 0;\n\n  // todo: 剔除empty node\n  while (i < children.length) {\n    const width = x1 - x0;\n    const height = y1 - y0;\n    sumValue = children[j++].value;\n    maxValue = sumValue;\n    minValue = sumValue;\n    alpha = Math.max(height / width, width / height) / (value * ratio);\n    beta = sumValue * sumValue * alpha;\n    minRatio = Math.max(maxValue / beta, beta / minValue);\n    for (; j < children.length; j++) {\n      nodeValue = children[j].value;\n      sumValue += nodeValue;\n      if (nodeValue < minValue) minValue = nodeValue;\n      if (nodeValue > maxValue) maxValue = nodeValue;\n      beta = sumValue * sumValue * alpha;\n      newRatio = Math.max(maxValue / beta, beta / minValue);\n      if (newRatio > minRatio) {\n        sumValue -= nodeValue;\n        break;\n      }\n      minRatio = newRatio;\n    }\n    const row = { value: sumValue, dice: width < height, children: children.slice(i, j) };\n    rows.push(row);\n    if (row.dice) {\n      const h = value ? (height * sumValue) / value : height;\n      dice(row, x0, y0, x1, y0 + h);\n      if (value) {\n        y0 += h;\n      }\n    } else {\n      const w = value ? (width * sumValue) / value : width;\n      slice(row, x0, y0, x0 + w, y1);\n      if (value) {\n        x0 += w;\n      }\n    }\n    value -= sumValue;\n    i = j;\n  }\n  return rows;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}