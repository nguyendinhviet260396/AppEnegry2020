{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { isString, isFunction, isArray, get } from '@antv/util';\nimport LineParser from './main';\n\nvar GuideLineParser =\n/** @class */\nfunction (_super) {\n  __extends(GuideLineParser, _super);\n\n  function GuideLineParser() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  GuideLineParser.prototype.init = function () {\n    var props = this.plot.options;\n\n    if (!props.xField || !props.yField) {\n      return;\n    }\n\n    this.config = {\n      type: 'line',\n      position: {\n        fields: [props.xField, props.yField]\n      },\n      tooltip: false\n    };\n\n    if (this._getColorMappingField() || this._needParseAttribute('color')) {\n      this.parseColor();\n    }\n\n    if (this._needParseAttribute('size')) {\n      this.parseSize();\n    }\n\n    if (props.line.style) {\n      this.parseStyle();\n    }\n\n    if (props.smooth) {\n      this.config.shape = {\n        values: ['smooth']\n      };\n    }\n  };\n\n  GuideLineParser.prototype.parseSize = function () {\n    var props = this.plot.options;\n    var config = {};\n\n    if (props.line.size) {\n      config.values = [props.line.size];\n    } else {\n      // line作为辅助图形没有在style里指定size属性的情况下，设置默认值\n      config.values = [2];\n    }\n\n    this.config.size = config;\n  };\n\n  GuideLineParser.prototype.parseColor = function () {\n    var props = this.plot.options;\n    var config = {};\n\n    var colorField = this._getColorMappingField();\n\n    if (colorField) {\n      config.fields = colorField;\n    }\n\n    if (props.line.color) {\n      config.values = [props.line.color];\n    } else {\n      // line作为辅助图形没有在style里指定color属性的情况下，默认接受主体图形的透传\n      if (isString(props.color)) {\n        config.values = [props.color];\n      } else if (isFunction(props.color)) {\n        config.fields = colorField;\n        config.callback = props.color;\n      } else if (isArray(props.color)) {\n        if (colorField) {\n          config.values = props.color;\n        } else {\n          if (props.color.length > 0) {\n            config.values = [props.color[0]];\n          }\n        }\n      }\n    }\n\n    this.config.color = config;\n  };\n\n  GuideLineParser.prototype.parseStyle = function () {\n    var props = this.plot.options;\n    var styleProps = props.line.style;\n    var config = {};\n\n    if (isFunction(styleProps)) {\n      config.fields = this.config.position.fields;\n      config.callback = styleProps;\n    } else {\n      config.cfg = styleProps;\n    }\n\n    this.config.style = config;\n  };\n\n  GuideLineParser.prototype._needParseAttribute = function (attr) {\n    var props = this.plot.options;\n\n    if (props[attr]) {\n      return true;\n    } else if (props.line[attr]) {\n      return true;\n    }\n\n    return false;\n  };\n\n  GuideLineParser.prototype._getColorMappingField = function () {\n    var props = this.plot.options;\n    var colorMapper = ['stackField', 'seriesField'];\n\n    for (var _i = 0, colorMapper_1 = colorMapper; _i < colorMapper_1.length; _i++) {\n      var m = colorMapper_1[_i];\n\n      if (get(props, m)) {\n        return [props[m]];\n      }\n    }\n  };\n\n  return GuideLineParser;\n}(LineParser);\n\nexport default GuideLineParser;","map":{"version":3,"sources":["../../../src/geoms/line/guide.ts"],"names":[],"mappings":"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","sourcesContent":["import { LooseObject } from '../../dependents';\nimport { isString, isFunction, isArray, get } from '@antv/util';\nimport LineParser from './main';\n\nexport default class GuideLineParser extends LineParser {\n  public init() {\n    const props = this.plot.options;\n    if (!props.xField || !props.yField) {\n      return;\n    }\n    this.config = {\n      type: 'line',\n      position: {\n        fields: [props.xField, props.yField],\n      },\n      tooltip: false,\n    };\n\n    if (this._getColorMappingField() || this._needParseAttribute('color')) {\n      this.parseColor();\n    }\n    if (this._needParseAttribute('size')) {\n      this.parseSize();\n    }\n    if (props.line.style) {\n      this.parseStyle();\n    }\n\n    if (props.smooth) {\n      this.config.shape = { values: ['smooth'] };\n    }\n  }\n\n  public parseSize() {\n    const props = this.plot.options;\n    const config: LooseObject = {};\n    if (props.line.size) {\n      config.values = [props.line.size];\n    } else {\n      // line作为辅助图形没有在style里指定size属性的情况下，设置默认值\n      config.values = [2];\n    }\n    this.config.size = config;\n  }\n\n  public parseColor() {\n    const props = this.plot.options;\n    const config: LooseObject = {};\n    const colorField = this._getColorMappingField();\n    if (colorField) {\n      config.fields = colorField;\n    }\n    if (props.line.color) {\n      config.values = [props.line.color];\n    } else {\n      // line作为辅助图形没有在style里指定color属性的情况下，默认接受主体图形的透传\n      if (isString(props.color)) {\n        config.values = [props.color];\n      } else if (isFunction(props.color)) {\n        config.fields = colorField;\n        config.callback = props.color;\n      } else if (isArray(props.color)) {\n        if (colorField) {\n          config.values = props.color;\n        } else {\n          if (props.color.length > 0) {\n            config.values = [props.color[0]];\n          }\n        }\n      }\n    }\n\n    this.config.color = config;\n  }\n\n  public parseStyle() {\n    const props = this.plot.options;\n    const styleProps = props.line.style;\n    const config: LooseObject = {};\n    if (isFunction(styleProps)) {\n      config.fields = this.config.position.fields;\n      config.callback = styleProps;\n    } else {\n      config.cfg = styleProps;\n    }\n    this.config.style = config;\n  }\n\n  private _needParseAttribute(attr) {\n    const props = this.plot.options;\n    if (props[attr]) {\n      return true;\n    } else if (props.line[attr]) {\n      return true;\n    }\n    return false;\n  }\n\n  private _getColorMappingField() {\n    const props = this.plot.options;\n    const colorMapper = ['stackField', 'seriesField'];\n    for (const m of colorMapper) {\n      if (get(props, m)) {\n        return [props[m]];\n      }\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}