{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { each, isNil, isPlainObject, isString, isBoolean, uniqueId, mix, deepMix } from '@antv/util';\nimport Shape from '../shape/shape';\nimport { getBBox } from '../util/graphic';\nimport { translate } from '../util/math';\nvar CACHE_BBOX = 'bboxCache';\nvar CACHE_CANVAS_BBOX = 'bboxCanvasCache';\n\nvar ItemBase =\n/** @class */\nfunction () {\n  function ItemBase(cfg) {\n    this._cfg = {};\n    this.destroyed = false;\n    var defaultCfg = {\n      /**\n       * id\n       * @type {string}\n       */\n      id: undefined,\n\n      /**\n       * 类型\n       * @type {string}\n       */\n      type: 'item',\n\n      /**\n       * data model\n       * @type {object}\n       */\n      model: {},\n\n      /**\n       * g group\n       * @type {G.Group}\n       */\n      group: undefined,\n\n      /**\n       * is open animate\n       * @type {boolean}\n       */\n      animate: false,\n\n      /**\n       * visible - not group visible\n       * @type {boolean}\n       */\n      visible: true,\n\n      /**\n       * locked - lock node\n       * @type {boolean}\n       */\n      locked: false,\n\n      /**\n       * capture event\n       * @type {boolean}\n       */\n      event: true,\n\n      /**\n       * key shape to calculate item's bbox\n       * @type object\n       */\n      keyShape: undefined,\n\n      /**\n       * item's states, such as selected or active\n       * @type Array\n       */\n      states: []\n    };\n    this._cfg = Object.assign(defaultCfg, this.getDefaultCfg(), cfg);\n    var id = this.get('model').id;\n\n    if (!id) {\n      id = uniqueId(this.get('type'));\n      this.get('model').id = id;\n    }\n\n    this.set('id', id);\n    var group = cfg.group;\n\n    if (group) {\n      group.set('item', this);\n      group.set('id', id);\n    }\n\n    this.init();\n    this.draw();\n  }\n  /**\n   * 根据 keyshape 计算包围盒\n   */\n\n\n  ItemBase.prototype.calculateBBox = function () {\n    var keyShape = this.get('keyShape');\n    var group = this.get('group'); // 因为 group 可能会移动，所以必须通过父元素计算才能计算出正确的包围盒\n\n    var bbox = getBBox(keyShape, group);\n    bbox.x = bbox.minX;\n    bbox.y = bbox.minY;\n    bbox.width = bbox.maxX - bbox.minX;\n    bbox.height = bbox.maxY - bbox.minY;\n    bbox.centerX = (bbox.minX + bbox.maxX) / 2;\n    bbox.centerY = (bbox.minY + bbox.maxY) / 2;\n    return bbox;\n  };\n  /**\n   * 根据 keyshape 计算包围盒\n   */\n\n\n  ItemBase.prototype.calculateCanvasBBox = function () {\n    var keyShape = this.get('keyShape');\n    var group = this.get('group'); // 因为 group 可能会移动，所以必须通过父元素计算才能计算出正确的包围盒\n\n    var bbox = getBBox(keyShape, group);\n    bbox.x = bbox.minX;\n    bbox.y = bbox.minY;\n    bbox.width = bbox.maxX - bbox.minX;\n    bbox.height = bbox.maxY - bbox.minY;\n    bbox.centerX = (bbox.minX + bbox.maxX) / 2;\n    bbox.centerY = (bbox.minY + bbox.maxY) / 2;\n    return bbox;\n  };\n  /**\n   * draw shape\n   */\n\n\n  ItemBase.prototype.drawInner = function () {\n    var self = this;\n    var shapeFactory = self.get('shapeFactory');\n    var group = self.get('group');\n    var model = self.get('model');\n    group.clear();\n    var visible = model.visible;\n    if (visible !== undefined && !visible) self.changeVisibility(visible);\n\n    if (!shapeFactory) {\n      return;\n    }\n\n    self.updatePosition(model);\n    var cfg = self.getShapeCfg(model); // 可能会附加额外信息\n\n    var shapeType = cfg.shape || cfg.type;\n    var keyShape = shapeFactory.draw(shapeType, cfg, group);\n\n    if (keyShape) {\n      self.set('keyShape', keyShape);\n      keyShape.set('isKeyShape', true);\n      keyShape.set('draggable', true);\n    }\n\n    this.setOriginStyle(); // 防止由于用户外部修改 model 中的 shape 导致 shape 不更新\n\n    this.set('currentShape', shapeType);\n    this.restoreStates(shapeFactory, shapeType);\n  };\n  /**\n   * 设置图元素原始样式\n   * @param keyShape 图元素 keyShape\n   * @param group Group 容器\n   */\n\n\n  ItemBase.prototype.setOriginStyle = function (cfg) {\n    var originStyles = {};\n    var group = this.get('group');\n    var children = group.get('children');\n    var keyShape = this.getKeyShape();\n    var self = this;\n    each(children, function (child) {\n      var name = child.get('name');\n\n      if (name) {\n        originStyles[name] = self.getShapeStyleByName(name);\n      } else {\n        var keyShapeName = keyShape.get('name');\n        var keyShapeStyle = self.getShapeStyleByName();\n\n        if (!keyShapeName) {\n          Object.assign(originStyles, keyShapeStyle);\n        } else {\n          originStyles[keyShapeName] = keyShapeStyle;\n        }\n      }\n    });\n    var drawOriginStyle = this.getOriginStyle();\n    var styles = {};\n\n    if (cfg) {\n      styles = deepMix({}, drawOriginStyle, originStyles, cfg.style, {\n        labelCfg: cfg.labelCfg\n      });\n    } else {\n      styles = deepMix({}, drawOriginStyle, originStyles);\n    }\n\n    self.set('originStyle', styles);\n  };\n  /**\n   * restore shape states\n   * @param shapeFactory\n   * @param shapeType\n   */\n\n\n  ItemBase.prototype.restoreStates = function (shapeFactory, shapeType) {\n    var self = this;\n    var states = self.get('states');\n    each(states, function (state) {\n      shapeFactory.setState(shapeType, state, true, self);\n    });\n  };\n\n  ItemBase.prototype.init = function () {\n    var shapeFactory = Shape.getFactory(this.get('type'));\n    this.set('shapeFactory', shapeFactory);\n  };\n  /**\n   * 获取属性\n   * @internal 仅内部类使用\n   * @param  {String} key 属性名\n   * @return {object | string | number} 属性值\n   */\n\n\n  ItemBase.prototype.get = function (key) {\n    return this._cfg[key];\n  };\n  /**\n   * 设置属性\n   * @internal 仅内部类使用\n   * @param {String|Object} key 属性名，也可以是对象\n   * @param {object | string | number} val 属性值\n   */\n\n\n  ItemBase.prototype.set = function (key, val) {\n    if (isPlainObject(key)) {\n      this._cfg = __assign(__assign({}, this._cfg), key);\n    } else {\n      this._cfg[key] = val;\n    }\n  };\n\n  ItemBase.prototype.getDefaultCfg = function () {\n    return {};\n  };\n  /**\n   * 更新/刷新等操作后，清除 cache\n   */\n\n\n  ItemBase.prototype.clearCache = function () {\n    this.set(CACHE_BBOX, null);\n    this.set(CACHE_CANVAS_BBOX, null);\n  };\n  /**\n   * 渲染前的逻辑，提供给子类复写\n   */\n\n\n  ItemBase.prototype.beforeDraw = function () {};\n  /**\n   * 渲染后的逻辑，提供给子类复写\n   */\n\n\n  ItemBase.prototype.afterDraw = function () {};\n  /**\n   * 更新后做一些工作\n   */\n\n\n  ItemBase.prototype.afterUpdate = function () {};\n  /**\n   * draw shape\n   */\n\n\n  ItemBase.prototype.draw = function () {\n    this.beforeDraw();\n    this.drawInner();\n    this.afterDraw();\n  };\n\n  ItemBase.prototype.getShapeStyleByName = function (name) {\n    var group = this.get('group');\n    var currentShape = this.getKeyShape();\n\n    if (name) {\n      currentShape = group.find(function (element) {\n        return element.get('name') === name;\n      });\n    }\n\n    if (currentShape) {\n      var styles_1 = {};\n      each(currentShape.attr(), function (val, key) {\n        // 修改 img 通过 updateItem 实现\n        if (key !== 'img') {\n          styles_1[key] = val;\n        }\n      });\n      return styles_1;\n    }\n\n    return {};\n  };\n\n  ItemBase.prototype.getShapeCfg = function (model) {\n    var styles = this.get('styles');\n\n    if (styles) {\n      // merge graph的item样式与数据模型中的样式\n      var newModel = model;\n      newModel.style = __assign(__assign({}, styles), model.style);\n      return newModel;\n    }\n\n    return model;\n  };\n  /**\n   * 获取指定状态的样式，去除了全局样式\n   * @param state 状态名称\n   */\n\n\n  ItemBase.prototype.getStateStyle = function (state) {\n    var styles = this.get('styles');\n    var stateStyle = styles && styles[state];\n    return stateStyle;\n  };\n  /**\n   * get keyshape style\n   */\n\n\n  ItemBase.prototype.getOriginStyle = function () {\n    return this.get('originStyle');\n  };\n\n  ItemBase.prototype.getCurrentStatesStyle = function () {\n    var self = this;\n    var styles = {};\n    each(self.getStates(), function (state) {\n      styles = Object.assign(styles, self.getStateStyle(state));\n    });\n    return styles;\n  };\n  /**\n   * 更改元素状态， visible 不属于这个范畴\n   * @internal 仅提供内部类 graph 使用\n   * @param {String} state 状态名\n   * @param {Boolean} value 节点状态值\n   */\n\n\n  ItemBase.prototype.setState = function (state, value) {\n    var states = this.get('states');\n    var shapeFactory = this.get('shapeFactory');\n    var stateName = state;\n    var filterStateName = state;\n\n    if (isString(value)) {\n      stateName = state + \":\" + value;\n      filterStateName = state + \":\";\n    }\n\n    var newStates = states;\n\n    if (isBoolean(value)) {\n      var index = states.indexOf(filterStateName);\n\n      if (value) {\n        if (index > -1) {\n          return;\n        }\n\n        states.push(stateName);\n      } else if (index > -1) {\n        states.splice(index, 1);\n      }\n    } else if (isString(value)) {\n      // 过滤掉 states 中 filterStateName 相关的状态\n      var filterStates = states.filter(function (name) {\n        return name.includes(filterStateName);\n      });\n\n      if (filterStates.length > 0) {\n        this.clearStates(filterStates);\n      }\n\n      newStates = newStates.filter(function (name) {\n        return !name.includes(filterStateName);\n      });\n      newStates.push(stateName);\n      this.set('states', newStates);\n    }\n\n    if (shapeFactory) {\n      var model = this.get('model');\n      var type = model.shape || model.type; // 调用 shape/shape.ts 中的 setState\n\n      shapeFactory.setState(type, state, value, this);\n    }\n  };\n  /**\n   * 清除指定的状态，如果参数为空，则不做任务处理\n   * @param states 状态名称\n   */\n\n\n  ItemBase.prototype.clearStates = function (states) {\n    var self = this;\n    var originStates = self.getStates();\n    var shapeFactory = self.get('shapeFactory');\n    var model = self.get('model');\n    var shape = model.shape || model.type;\n\n    if (!states) {\n      states = originStates;\n    }\n\n    if (isString(states)) {\n      states = [states];\n    }\n\n    var newStates = originStates.filter(function (state) {\n      return states.indexOf(state) === -1;\n    });\n    self.set('states', newStates);\n    states.forEach(function (state) {\n      shapeFactory.setState(shape, state, false, self);\n    });\n  };\n  /**\n   * 节点的图形容器\n   * @return {G.Group} 图形容器\n   */\n\n\n  ItemBase.prototype.getContainer = function () {\n    return this.get('group');\n  };\n  /**\n   * 节点的关键形状，用于计算节点大小，连线截距等\n   * @return {IShapeBase} 关键形状\n   */\n\n\n  ItemBase.prototype.getKeyShape = function () {\n    return this.get('keyShape');\n  };\n  /**\n   * 节点数据模型\n   * @return {Object} 数据模型\n   */\n\n\n  ItemBase.prototype.getModel = function () {\n    return this.get('model');\n  };\n  /**\n   * 节点类型\n   * @return {string} 节点的类型\n   */\n\n\n  ItemBase.prototype.getType = function () {\n    return this.get('type');\n  };\n  /**\n   * 获取 Item 的ID\n   */\n\n\n  ItemBase.prototype.getID = function () {\n    return this.get('id');\n  };\n  /**\n   * 是否是 Item 对象，悬空边情况下进行判定\n   */\n\n\n  ItemBase.prototype.isItem = function () {\n    return true;\n  };\n  /**\n   * 获取当前元素的所有状态\n   * @return {Array} 元素的所有状态\n   */\n\n\n  ItemBase.prototype.getStates = function () {\n    return this.get('states');\n  };\n  /**\n   * 当前元素是否处于某状态\n   * @param {String} state 状态名\n   * @return {Boolean} 是否处于某状态\n   */\n\n\n  ItemBase.prototype.hasState = function (state) {\n    var states = this.getStates();\n    return states.indexOf(state) >= 0;\n  };\n  /**\n   * 刷新一般用于处理几种情况\n   * 1. item model 在外部被改变\n   * 2. 边的节点位置发生改变，需要重新计算边\n   *\n   * 因为数据从外部被修改无法判断一些属性是否被修改，直接走位置和 shape 的更新\n   */\n\n\n  ItemBase.prototype.refresh = function () {\n    var model = this.get('model'); // 更新元素位置\n\n    this.updatePosition(model); // 更新元素内容，样式\n\n    this.updateShape(); // 做一些更新之后的操作\n\n    this.afterUpdate(); // 清除缓存\n\n    this.clearCache();\n  };\n\n  ItemBase.prototype.isOnlyMove = function (cfg) {\n    return false;\n  };\n  /**\n   * 将更新应用到 model 上，刷新属性\n   * @internal 仅提供给 Graph 使用，外部直接调用 graph.update 接口\n   * @param  {Object} cfg       配置项，可以是增量信息\n   */\n\n\n  ItemBase.prototype.update = function (cfg) {\n    var model = this.get('model');\n    var oriVisible = model.visible;\n    var cfgVisible = cfg.visible;\n    if (oriVisible !== cfgVisible && cfgVisible !== undefined) this.changeVisibility(cfgVisible);\n    var originPosition = {\n      x: model.x,\n      y: model.y\n    };\n    cfg.x = isNaN(cfg.x) ? model.x : cfg.x;\n    cfg.y = isNaN(cfg.y) ? model.y : cfg.y;\n    var styles = this.get('styles');\n\n    if (cfg.stateStyles) {\n      // 更新 item 时更新 this.get('styles') 中的值\n      var stateStyles = cfg.stateStyles;\n      mix(styles, stateStyles);\n      delete cfg.stateStyles;\n    } // 直接将更新合到原数据模型上，可以保证用户在外部修改源数据然后刷新时的样式符合期待。\n\n\n    Object.assign(model, cfg); // isOnlyMove 仅用于node\n\n    var onlyMove = this.isOnlyMove(cfg); // 仅仅移动位置时，既不更新，也不重绘\n\n    if (onlyMove) {\n      this.updatePosition(cfg);\n    } else {\n      // 如果 x,y 有变化，先重置位置\n      if (originPosition.x !== cfg.x || originPosition.y !== cfg.y) {\n        this.updatePosition(cfg);\n      }\n\n      this.updateShape();\n    }\n\n    this.afterUpdate();\n    this.clearCache();\n  };\n  /**\n   * 更新元素内容，样式\n   */\n\n\n  ItemBase.prototype.updateShape = function () {\n    var shapeFactory = this.get('shapeFactory');\n    var model = this.get('model');\n    var shape = model.shape || model.type; // 判定是否允许更新\n    // 1. 注册的节点允许更新\n    // 2. 更新后的 shape 等于原先的 shape\n\n    if (shapeFactory.shouldUpdate(shape) && shape === this.get('currentShape')) {\n      var updateCfg = this.getShapeCfg(model);\n      shapeFactory.baseUpdate(shape, updateCfg, this);\n    } else {\n      // 如果不满足上面两种状态，重新绘制\n      this.draw();\n    } // 更新完以后重新设置原始样式\n\n\n    this.setOriginStyle(model); // 更新后重置节点状态\n\n    this.restoreStates(shapeFactory, shape);\n  };\n  /**\n   * 更新位置，避免整体重绘\n   * @param {object} cfg 待更新数据\n   */\n\n\n  ItemBase.prototype.updatePosition = function (cfg) {\n    var model = this.get('model');\n    var x = isNil(cfg.x) ? model.x : cfg.x;\n    var y = isNil(cfg.y) ? model.y : cfg.y;\n    var group = this.get('group');\n\n    if (isNil(x) || isNil(y)) {\n      return;\n    }\n\n    group.resetMatrix(); // G 4.0 element 中移除了矩阵相关方法，详见https://www.yuque.com/antv/blog/kxzk9g#4rMMV\n\n    translate(group, {\n      x: x,\n      y: y\n    });\n    model.x = x;\n    model.y = y;\n    this.clearCache(); // 位置更新后需要清除缓存\n  };\n  /**\n   * 获取 item 的包围盒，这个包围盒是相对于 item 自己，不会将 matrix 计算在内\n   * @return {Object} 包含 x,y,width,height, centerX, centerY\n   */\n\n\n  ItemBase.prototype.getBBox = function () {\n    // 计算 bbox 开销有些大，缓存\n    var bbox = this.get(CACHE_BBOX);\n\n    if (!bbox) {\n      bbox = this.calculateBBox();\n      this.set(CACHE_BBOX, bbox);\n    }\n\n    return bbox;\n  };\n  /**\n   * 获取 item 相对于画布的包围盒，会将从顶层到当前元素的 matrix 都计算在内\n   * @return {Object} 包含 x,y,width,height, centerX, centerY\n   */\n\n\n  ItemBase.prototype.getCanvasBBox = function () {\n    // 计算 bbox 开销有些大，缓存\n    var bbox = this.get(CACHE_CANVAS_BBOX);\n\n    if (!bbox) {\n      bbox = this.calculateCanvasBBox();\n      this.set(CACHE_CANVAS_BBOX, bbox);\n    }\n\n    return bbox;\n  };\n  /**\n   * 将元素放到最前面\n   */\n\n\n  ItemBase.prototype.toFront = function () {\n    var group = this.get('group');\n    group.toFront();\n  };\n  /**\n   * 将元素放到最后面\n   */\n\n\n  ItemBase.prototype.toBack = function () {\n    var group = this.get('group');\n    group.toBack();\n  };\n  /**\n   * 显示元素\n   */\n\n\n  ItemBase.prototype.show = function () {\n    this.changeVisibility(true);\n  };\n  /**\n   * 隐藏元素\n   */\n\n\n  ItemBase.prototype.hide = function () {\n    this.changeVisibility(false);\n  };\n  /**\n   * 更改是否显示\n   * @param  {Boolean} visible 是否显示\n   */\n\n\n  ItemBase.prototype.changeVisibility = function (visible) {\n    var group = this.get('group');\n\n    if (visible) {\n      group.show();\n    } else {\n      group.hide();\n    }\n\n    this.set('visible', visible);\n  };\n  /**\n   * 元素是否可见\n   * @return {Boolean} 返回该元素是否可见\n   */\n\n\n  ItemBase.prototype.isVisible = function () {\n    return this.get('visible');\n  };\n  /**\n   * 是否拾取及出发该元素的交互事件\n   * @param {Boolean} enable 标识位\n   */\n\n\n  ItemBase.prototype.enableCapture = function (enable) {\n    var group = this.get('group');\n\n    if (group) {\n      group.set('capture', enable);\n    }\n  };\n\n  ItemBase.prototype.destroy = function () {\n    if (!this.destroyed) {\n      var animate = this.get('animate');\n      var group = this.get('group');\n\n      if (animate) {\n        group.stopAnimate();\n      }\n\n      this.clearCache();\n      group.remove();\n      this._cfg = null;\n      this.destroyed = true;\n    }\n  };\n\n  return ItemBase;\n}();\n\nexport default ItemBase;","map":{"version":3,"sources":["C:/Users/vietn/Desktop/AppEnegry2020/frontend/node_modules/@antv/g6/es/item/item.js"],"names":["__assign","each","isNil","isPlainObject","isString","isBoolean","uniqueId","mix","deepMix","Shape","getBBox","translate","CACHE_BBOX","CACHE_CANVAS_BBOX","ItemBase","cfg","_cfg","destroyed","defaultCfg","id","undefined","type","model","group","animate","visible","locked","event","keyShape","states","Object","assign","getDefaultCfg","get","set","init","draw","prototype","calculateBBox","bbox","x","minX","y","minY","width","maxX","height","maxY","centerX","centerY","calculateCanvasBBox","drawInner","self","shapeFactory","clear","changeVisibility","updatePosition","getShapeCfg","shapeType","shape","setOriginStyle","restoreStates","originStyles","children","getKeyShape","child","name","getShapeStyleByName","keyShapeName","keyShapeStyle","drawOriginStyle","getOriginStyle","styles","style","labelCfg","state","setState","getFactory","key","val","clearCache","beforeDraw","afterDraw","afterUpdate","currentShape","find","element","styles_1","attr","newModel","getStateStyle","stateStyle","getCurrentStatesStyle","getStates","value","stateName","filterStateName","newStates","index","indexOf","push","splice","filterStates","filter","includes","length","clearStates","originStates","forEach","getContainer","getModel","getType","getID","isItem","hasState","refresh","updateShape","isOnlyMove","update","oriVisible","cfgVisible","originPosition","isNaN","stateStyles","onlyMove","shouldUpdate","updateCfg","baseUpdate","resetMatrix","getCanvasBBox","toFront","toBack","show","hide","isVisible","enableCapture","enable","destroy","stopAnimate","remove"],"mappings":"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","sourcesContent":["import { __assign } from \"tslib\";\nimport { each, isNil, isPlainObject, isString, isBoolean, uniqueId, mix, deepMix } from '@antv/util';\nimport Shape from '../shape/shape';\nimport { getBBox } from '../util/graphic';\nimport { translate } from '../util/math';\nvar CACHE_BBOX = 'bboxCache';\nvar CACHE_CANVAS_BBOX = 'bboxCanvasCache';\n\nvar ItemBase =\n/** @class */\nfunction () {\n  function ItemBase(cfg) {\n    this._cfg = {};\n    this.destroyed = false;\n    var defaultCfg = {\n      /**\n       * id\n       * @type {string}\n       */\n      id: undefined,\n\n      /**\n       * 类型\n       * @type {string}\n       */\n      type: 'item',\n\n      /**\n       * data model\n       * @type {object}\n       */\n      model: {},\n\n      /**\n       * g group\n       * @type {G.Group}\n       */\n      group: undefined,\n\n      /**\n       * is open animate\n       * @type {boolean}\n       */\n      animate: false,\n\n      /**\n       * visible - not group visible\n       * @type {boolean}\n       */\n      visible: true,\n\n      /**\n       * locked - lock node\n       * @type {boolean}\n       */\n      locked: false,\n\n      /**\n       * capture event\n       * @type {boolean}\n       */\n      event: true,\n\n      /**\n       * key shape to calculate item's bbox\n       * @type object\n       */\n      keyShape: undefined,\n\n      /**\n       * item's states, such as selected or active\n       * @type Array\n       */\n      states: []\n    };\n    this._cfg = Object.assign(defaultCfg, this.getDefaultCfg(), cfg);\n    var id = this.get('model').id;\n\n    if (!id) {\n      id = uniqueId(this.get('type'));\n      this.get('model').id = id;\n    }\n\n    this.set('id', id);\n    var group = cfg.group;\n\n    if (group) {\n      group.set('item', this);\n      group.set('id', id);\n    }\n\n    this.init();\n    this.draw();\n  }\n  /**\n   * 根据 keyshape 计算包围盒\n   */\n\n\n  ItemBase.prototype.calculateBBox = function () {\n    var keyShape = this.get('keyShape');\n    var group = this.get('group'); // 因为 group 可能会移动，所以必须通过父元素计算才能计算出正确的包围盒\n\n    var bbox = getBBox(keyShape, group);\n    bbox.x = bbox.minX;\n    bbox.y = bbox.minY;\n    bbox.width = bbox.maxX - bbox.minX;\n    bbox.height = bbox.maxY - bbox.minY;\n    bbox.centerX = (bbox.minX + bbox.maxX) / 2;\n    bbox.centerY = (bbox.minY + bbox.maxY) / 2;\n    return bbox;\n  };\n  /**\n   * 根据 keyshape 计算包围盒\n   */\n\n\n  ItemBase.prototype.calculateCanvasBBox = function () {\n    var keyShape = this.get('keyShape');\n    var group = this.get('group'); // 因为 group 可能会移动，所以必须通过父元素计算才能计算出正确的包围盒\n\n    var bbox = getBBox(keyShape, group);\n    bbox.x = bbox.minX;\n    bbox.y = bbox.minY;\n    bbox.width = bbox.maxX - bbox.minX;\n    bbox.height = bbox.maxY - bbox.minY;\n    bbox.centerX = (bbox.minX + bbox.maxX) / 2;\n    bbox.centerY = (bbox.minY + bbox.maxY) / 2;\n    return bbox;\n  };\n  /**\n   * draw shape\n   */\n\n\n  ItemBase.prototype.drawInner = function () {\n    var self = this;\n    var shapeFactory = self.get('shapeFactory');\n    var group = self.get('group');\n    var model = self.get('model');\n    group.clear();\n    var visible = model.visible;\n    if (visible !== undefined && !visible) self.changeVisibility(visible);\n\n    if (!shapeFactory) {\n      return;\n    }\n\n    self.updatePosition(model);\n    var cfg = self.getShapeCfg(model); // 可能会附加额外信息\n\n    var shapeType = cfg.shape || cfg.type;\n    var keyShape = shapeFactory.draw(shapeType, cfg, group);\n\n    if (keyShape) {\n      self.set('keyShape', keyShape);\n      keyShape.set('isKeyShape', true);\n      keyShape.set('draggable', true);\n    }\n\n    this.setOriginStyle(); // 防止由于用户外部修改 model 中的 shape 导致 shape 不更新\n\n    this.set('currentShape', shapeType);\n    this.restoreStates(shapeFactory, shapeType);\n  };\n  /**\n   * 设置图元素原始样式\n   * @param keyShape 图元素 keyShape\n   * @param group Group 容器\n   */\n\n\n  ItemBase.prototype.setOriginStyle = function (cfg) {\n    var originStyles = {};\n    var group = this.get('group');\n    var children = group.get('children');\n    var keyShape = this.getKeyShape();\n    var self = this;\n    each(children, function (child) {\n      var name = child.get('name');\n\n      if (name) {\n        originStyles[name] = self.getShapeStyleByName(name);\n      } else {\n        var keyShapeName = keyShape.get('name');\n        var keyShapeStyle = self.getShapeStyleByName();\n\n        if (!keyShapeName) {\n          Object.assign(originStyles, keyShapeStyle);\n        } else {\n          originStyles[keyShapeName] = keyShapeStyle;\n        }\n      }\n    });\n    var drawOriginStyle = this.getOriginStyle();\n    var styles = {};\n\n    if (cfg) {\n      styles = deepMix({}, drawOriginStyle, originStyles, cfg.style, {\n        labelCfg: cfg.labelCfg\n      });\n    } else {\n      styles = deepMix({}, drawOriginStyle, originStyles);\n    }\n\n    self.set('originStyle', styles);\n  };\n  /**\n   * restore shape states\n   * @param shapeFactory\n   * @param shapeType\n   */\n\n\n  ItemBase.prototype.restoreStates = function (shapeFactory, shapeType) {\n    var self = this;\n    var states = self.get('states');\n    each(states, function (state) {\n      shapeFactory.setState(shapeType, state, true, self);\n    });\n  };\n\n  ItemBase.prototype.init = function () {\n    var shapeFactory = Shape.getFactory(this.get('type'));\n    this.set('shapeFactory', shapeFactory);\n  };\n  /**\n   * 获取属性\n   * @internal 仅内部类使用\n   * @param  {String} key 属性名\n   * @return {object | string | number} 属性值\n   */\n\n\n  ItemBase.prototype.get = function (key) {\n    return this._cfg[key];\n  };\n  /**\n   * 设置属性\n   * @internal 仅内部类使用\n   * @param {String|Object} key 属性名，也可以是对象\n   * @param {object | string | number} val 属性值\n   */\n\n\n  ItemBase.prototype.set = function (key, val) {\n    if (isPlainObject(key)) {\n      this._cfg = __assign(__assign({}, this._cfg), key);\n    } else {\n      this._cfg[key] = val;\n    }\n  };\n\n  ItemBase.prototype.getDefaultCfg = function () {\n    return {};\n  };\n  /**\n   * 更新/刷新等操作后，清除 cache\n   */\n\n\n  ItemBase.prototype.clearCache = function () {\n    this.set(CACHE_BBOX, null);\n    this.set(CACHE_CANVAS_BBOX, null);\n  };\n  /**\n   * 渲染前的逻辑，提供给子类复写\n   */\n\n\n  ItemBase.prototype.beforeDraw = function () {};\n  /**\n   * 渲染后的逻辑，提供给子类复写\n   */\n\n\n  ItemBase.prototype.afterDraw = function () {};\n  /**\n   * 更新后做一些工作\n   */\n\n\n  ItemBase.prototype.afterUpdate = function () {};\n  /**\n   * draw shape\n   */\n\n\n  ItemBase.prototype.draw = function () {\n    this.beforeDraw();\n    this.drawInner();\n    this.afterDraw();\n  };\n\n  ItemBase.prototype.getShapeStyleByName = function (name) {\n    var group = this.get('group');\n    var currentShape = this.getKeyShape();\n\n    if (name) {\n      currentShape = group.find(function (element) {\n        return element.get('name') === name;\n      });\n    }\n\n    if (currentShape) {\n      var styles_1 = {};\n      each(currentShape.attr(), function (val, key) {\n        // 修改 img 通过 updateItem 实现\n        if (key !== 'img') {\n          styles_1[key] = val;\n        }\n      });\n      return styles_1;\n    }\n\n    return {};\n  };\n\n  ItemBase.prototype.getShapeCfg = function (model) {\n    var styles = this.get('styles');\n\n    if (styles) {\n      // merge graph的item样式与数据模型中的样式\n      var newModel = model;\n      newModel.style = __assign(__assign({}, styles), model.style);\n      return newModel;\n    }\n\n    return model;\n  };\n  /**\n   * 获取指定状态的样式，去除了全局样式\n   * @param state 状态名称\n   */\n\n\n  ItemBase.prototype.getStateStyle = function (state) {\n    var styles = this.get('styles');\n    var stateStyle = styles && styles[state];\n    return stateStyle;\n  };\n  /**\n   * get keyshape style\n   */\n\n\n  ItemBase.prototype.getOriginStyle = function () {\n    return this.get('originStyle');\n  };\n\n  ItemBase.prototype.getCurrentStatesStyle = function () {\n    var self = this;\n    var styles = {};\n    each(self.getStates(), function (state) {\n      styles = Object.assign(styles, self.getStateStyle(state));\n    });\n    return styles;\n  };\n  /**\n   * 更改元素状态， visible 不属于这个范畴\n   * @internal 仅提供内部类 graph 使用\n   * @param {String} state 状态名\n   * @param {Boolean} value 节点状态值\n   */\n\n\n  ItemBase.prototype.setState = function (state, value) {\n    var states = this.get('states');\n    var shapeFactory = this.get('shapeFactory');\n    var stateName = state;\n    var filterStateName = state;\n\n    if (isString(value)) {\n      stateName = state + \":\" + value;\n      filterStateName = state + \":\";\n    }\n\n    var newStates = states;\n\n    if (isBoolean(value)) {\n      var index = states.indexOf(filterStateName);\n\n      if (value) {\n        if (index > -1) {\n          return;\n        }\n\n        states.push(stateName);\n      } else if (index > -1) {\n        states.splice(index, 1);\n      }\n    } else if (isString(value)) {\n      // 过滤掉 states 中 filterStateName 相关的状态\n      var filterStates = states.filter(function (name) {\n        return name.includes(filterStateName);\n      });\n\n      if (filterStates.length > 0) {\n        this.clearStates(filterStates);\n      }\n\n      newStates = newStates.filter(function (name) {\n        return !name.includes(filterStateName);\n      });\n      newStates.push(stateName);\n      this.set('states', newStates);\n    }\n\n    if (shapeFactory) {\n      var model = this.get('model');\n      var type = model.shape || model.type; // 调用 shape/shape.ts 中的 setState\n\n      shapeFactory.setState(type, state, value, this);\n    }\n  };\n  /**\n   * 清除指定的状态，如果参数为空，则不做任务处理\n   * @param states 状态名称\n   */\n\n\n  ItemBase.prototype.clearStates = function (states) {\n    var self = this;\n    var originStates = self.getStates();\n    var shapeFactory = self.get('shapeFactory');\n    var model = self.get('model');\n    var shape = model.shape || model.type;\n\n    if (!states) {\n      states = originStates;\n    }\n\n    if (isString(states)) {\n      states = [states];\n    }\n\n    var newStates = originStates.filter(function (state) {\n      return states.indexOf(state) === -1;\n    });\n    self.set('states', newStates);\n    states.forEach(function (state) {\n      shapeFactory.setState(shape, state, false, self);\n    });\n  };\n  /**\n   * 节点的图形容器\n   * @return {G.Group} 图形容器\n   */\n\n\n  ItemBase.prototype.getContainer = function () {\n    return this.get('group');\n  };\n  /**\n   * 节点的关键形状，用于计算节点大小，连线截距等\n   * @return {IShapeBase} 关键形状\n   */\n\n\n  ItemBase.prototype.getKeyShape = function () {\n    return this.get('keyShape');\n  };\n  /**\n   * 节点数据模型\n   * @return {Object} 数据模型\n   */\n\n\n  ItemBase.prototype.getModel = function () {\n    return this.get('model');\n  };\n  /**\n   * 节点类型\n   * @return {string} 节点的类型\n   */\n\n\n  ItemBase.prototype.getType = function () {\n    return this.get('type');\n  };\n  /**\n   * 获取 Item 的ID\n   */\n\n\n  ItemBase.prototype.getID = function () {\n    return this.get('id');\n  };\n  /**\n   * 是否是 Item 对象，悬空边情况下进行判定\n   */\n\n\n  ItemBase.prototype.isItem = function () {\n    return true;\n  };\n  /**\n   * 获取当前元素的所有状态\n   * @return {Array} 元素的所有状态\n   */\n\n\n  ItemBase.prototype.getStates = function () {\n    return this.get('states');\n  };\n  /**\n   * 当前元素是否处于某状态\n   * @param {String} state 状态名\n   * @return {Boolean} 是否处于某状态\n   */\n\n\n  ItemBase.prototype.hasState = function (state) {\n    var states = this.getStates();\n    return states.indexOf(state) >= 0;\n  };\n  /**\n   * 刷新一般用于处理几种情况\n   * 1. item model 在外部被改变\n   * 2. 边的节点位置发生改变，需要重新计算边\n   *\n   * 因为数据从外部被修改无法判断一些属性是否被修改，直接走位置和 shape 的更新\n   */\n\n\n  ItemBase.prototype.refresh = function () {\n    var model = this.get('model'); // 更新元素位置\n\n    this.updatePosition(model); // 更新元素内容，样式\n\n    this.updateShape(); // 做一些更新之后的操作\n\n    this.afterUpdate(); // 清除缓存\n\n    this.clearCache();\n  };\n\n  ItemBase.prototype.isOnlyMove = function (cfg) {\n    return false;\n  };\n  /**\n   * 将更新应用到 model 上，刷新属性\n   * @internal 仅提供给 Graph 使用，外部直接调用 graph.update 接口\n   * @param  {Object} cfg       配置项，可以是增量信息\n   */\n\n\n  ItemBase.prototype.update = function (cfg) {\n    var model = this.get('model');\n    var oriVisible = model.visible;\n    var cfgVisible = cfg.visible;\n    if (oriVisible !== cfgVisible && cfgVisible !== undefined) this.changeVisibility(cfgVisible);\n    var originPosition = {\n      x: model.x,\n      y: model.y\n    };\n    cfg.x = isNaN(cfg.x) ? model.x : cfg.x;\n    cfg.y = isNaN(cfg.y) ? model.y : cfg.y;\n    var styles = this.get('styles');\n\n    if (cfg.stateStyles) {\n      // 更新 item 时更新 this.get('styles') 中的值\n      var stateStyles = cfg.stateStyles;\n      mix(styles, stateStyles);\n      delete cfg.stateStyles;\n    } // 直接将更新合到原数据模型上，可以保证用户在外部修改源数据然后刷新时的样式符合期待。\n\n\n    Object.assign(model, cfg); // isOnlyMove 仅用于node\n\n    var onlyMove = this.isOnlyMove(cfg); // 仅仅移动位置时，既不更新，也不重绘\n\n    if (onlyMove) {\n      this.updatePosition(cfg);\n    } else {\n      // 如果 x,y 有变化，先重置位置\n      if (originPosition.x !== cfg.x || originPosition.y !== cfg.y) {\n        this.updatePosition(cfg);\n      }\n\n      this.updateShape();\n    }\n\n    this.afterUpdate();\n    this.clearCache();\n  };\n  /**\n   * 更新元素内容，样式\n   */\n\n\n  ItemBase.prototype.updateShape = function () {\n    var shapeFactory = this.get('shapeFactory');\n    var model = this.get('model');\n    var shape = model.shape || model.type; // 判定是否允许更新\n    // 1. 注册的节点允许更新\n    // 2. 更新后的 shape 等于原先的 shape\n\n    if (shapeFactory.shouldUpdate(shape) && shape === this.get('currentShape')) {\n      var updateCfg = this.getShapeCfg(model);\n      shapeFactory.baseUpdate(shape, updateCfg, this);\n    } else {\n      // 如果不满足上面两种状态，重新绘制\n      this.draw();\n    } // 更新完以后重新设置原始样式\n\n\n    this.setOriginStyle(model); // 更新后重置节点状态\n\n    this.restoreStates(shapeFactory, shape);\n  };\n  /**\n   * 更新位置，避免整体重绘\n   * @param {object} cfg 待更新数据\n   */\n\n\n  ItemBase.prototype.updatePosition = function (cfg) {\n    var model = this.get('model');\n    var x = isNil(cfg.x) ? model.x : cfg.x;\n    var y = isNil(cfg.y) ? model.y : cfg.y;\n    var group = this.get('group');\n\n    if (isNil(x) || isNil(y)) {\n      return;\n    }\n\n    group.resetMatrix(); // G 4.0 element 中移除了矩阵相关方法，详见https://www.yuque.com/antv/blog/kxzk9g#4rMMV\n\n    translate(group, {\n      x: x,\n      y: y\n    });\n    model.x = x;\n    model.y = y;\n    this.clearCache(); // 位置更新后需要清除缓存\n  };\n  /**\n   * 获取 item 的包围盒，这个包围盒是相对于 item 自己，不会将 matrix 计算在内\n   * @return {Object} 包含 x,y,width,height, centerX, centerY\n   */\n\n\n  ItemBase.prototype.getBBox = function () {\n    // 计算 bbox 开销有些大，缓存\n    var bbox = this.get(CACHE_BBOX);\n\n    if (!bbox) {\n      bbox = this.calculateBBox();\n      this.set(CACHE_BBOX, bbox);\n    }\n\n    return bbox;\n  };\n  /**\n   * 获取 item 相对于画布的包围盒，会将从顶层到当前元素的 matrix 都计算在内\n   * @return {Object} 包含 x,y,width,height, centerX, centerY\n   */\n\n\n  ItemBase.prototype.getCanvasBBox = function () {\n    // 计算 bbox 开销有些大，缓存\n    var bbox = this.get(CACHE_CANVAS_BBOX);\n\n    if (!bbox) {\n      bbox = this.calculateCanvasBBox();\n      this.set(CACHE_CANVAS_BBOX, bbox);\n    }\n\n    return bbox;\n  };\n  /**\n   * 将元素放到最前面\n   */\n\n\n  ItemBase.prototype.toFront = function () {\n    var group = this.get('group');\n    group.toFront();\n  };\n  /**\n   * 将元素放到最后面\n   */\n\n\n  ItemBase.prototype.toBack = function () {\n    var group = this.get('group');\n    group.toBack();\n  };\n  /**\n   * 显示元素\n   */\n\n\n  ItemBase.prototype.show = function () {\n    this.changeVisibility(true);\n  };\n  /**\n   * 隐藏元素\n   */\n\n\n  ItemBase.prototype.hide = function () {\n    this.changeVisibility(false);\n  };\n  /**\n   * 更改是否显示\n   * @param  {Boolean} visible 是否显示\n   */\n\n\n  ItemBase.prototype.changeVisibility = function (visible) {\n    var group = this.get('group');\n\n    if (visible) {\n      group.show();\n    } else {\n      group.hide();\n    }\n\n    this.set('visible', visible);\n  };\n  /**\n   * 元素是否可见\n   * @return {Boolean} 返回该元素是否可见\n   */\n\n\n  ItemBase.prototype.isVisible = function () {\n    return this.get('visible');\n  };\n  /**\n   * 是否拾取及出发该元素的交互事件\n   * @param {Boolean} enable 标识位\n   */\n\n\n  ItemBase.prototype.enableCapture = function (enable) {\n    var group = this.get('group');\n\n    if (group) {\n      group.set('capture', enable);\n    }\n  };\n\n  ItemBase.prototype.destroy = function () {\n    if (!this.destroyed) {\n      var animate = this.get('animate');\n      var group = this.get('group');\n\n      if (animate) {\n        group.stopAnimate();\n      }\n\n      this.clearCache();\n      group.remove();\n      this._cfg = null;\n      this.destroyed = true;\n    }\n  };\n\n  return ItemBase;\n}();\n\nexport default ItemBase;"]},"metadata":{},"sourceType":"module"}