{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { deepMix, each, has } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport ViewLayer from '../../base/view-layer';\nimport { getComponent } from '../../components/factory';\nimport { getGeom } from '../../geoms/factory';\nimport { extractScale } from '../../util/scale';\nimport '../../geoms/heatmap/linear';\nimport { getPlotComponents } from './components';\nimport * as EventParser from './event';\n\nvar DensityHeatmapLayer =\n/** @class */\nfunction (_super) {\n  __extends(DensityHeatmapLayer, _super);\n\n  function DensityHeatmapLayer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'densityHeatmap';\n    _this.plotComponents = [];\n    return _this;\n  }\n\n  DensityHeatmapLayer.getDefaultOptions = function () {\n    return deepMix({}, _super.getDefaultOptions.call(this), {\n      xAxis: {\n        visible: true,\n        autoRotateTitle: false,\n        grid: {\n          visible: false\n        },\n        line: {\n          visible: true\n        },\n        tickLine: {\n          visible: true\n        },\n        label: {\n          visible: true,\n          autoHide: true,\n          autoRotate: true\n        },\n        title: {\n          visible: false,\n          spacing: 12\n        }\n      },\n      yAxis: {\n        visible: true,\n        autoRotateTitle: true,\n        grid: {\n          visible: false\n        },\n        line: {\n          visible: true\n        },\n        tickLine: {\n          visible: true\n        },\n        label: {\n          visible: true,\n          autoHide: true,\n          autoRotate: false\n        },\n        title: {\n          visible: false,\n          spacing: 12\n        }\n      },\n      tooltip: {\n        visible: true,\n        showCrosshairs: true,\n        crosshairs: {\n          type: 'xy',\n          line: {\n            style: {\n              stroke: '#000000',\n              lineWidth: 1,\n              opacity: 0.5\n            }\n          }\n        },\n        showMarkers: false\n      },\n      legend: {\n        visible: true,\n        position: 'bottom-center'\n      },\n      color: ['rgba(33,102,172,0)', 'rgb(103,169,207)', 'rgb(209,229,240)', 'rgb(253,219,199)', 'rgb(239,138,98)', 'rgb(178,24,43)'],\n      interactions: [{\n        type: 'tooltip'\n      }]\n    });\n  };\n\n  DensityHeatmapLayer.prototype.afterRender = function () {\n    this.renderPlotComponents();\n\n    _super.prototype.afterRender.call(this);\n  };\n\n  DensityHeatmapLayer.prototype.destroy = function () {\n    each(this.plotComponents, function (component) {\n      component.destroy();\n    });\n\n    _super.prototype.destroy.call(this);\n  };\n\n  DensityHeatmapLayer.prototype.scale = function () {\n    var props = this.options;\n    var scales = {};\n    /** 配置x-scale */\n\n    scales[props.xField] = {};\n\n    if (has(props, 'xAxis')) {\n      extractScale(scales[props.xField], props.xAxis);\n    }\n    /** 配置y-scale */\n\n\n    scales[props.yField] = {};\n\n    if (has(props, 'yAxis')) {\n      extractScale(scales[props.yField], props.yAxis);\n    }\n\n    this.setConfig('scales', scales);\n\n    _super.prototype.scale.call(this);\n  };\n\n  DensityHeatmapLayer.prototype.coord = function () {\n    return;\n  };\n\n  DensityHeatmapLayer.prototype.geometryParser = function () {\n    return 'heatmap';\n  };\n\n  DensityHeatmapLayer.prototype.addGeometry = function () {\n    if (this.options.data.length > 1) {\n      var config = {\n        type: 'linearheatmap',\n        position: {\n          fields: [this.options.xField, this.options.yField]\n        },\n        color: {\n          fields: [this.options.colorField],\n          values: this.options.color\n        },\n        cfg: {\n          intensity: this.options.intensity,\n          radius: this.options.radius\n        }\n      };\n\n      if (this.options.radius) {\n        config.radius = this.options.radius;\n      }\n\n      if (this.options.intensity) {\n        config.intensity = this.options.intensity;\n      }\n\n      if (this.options.tooltip && (this.options.tooltip.fields || this.options.tooltip.formatter)) {\n        this.geometryTooltip(config);\n      }\n\n      this.setConfig('geometry', config);\n      this.addPoint();\n    }\n  };\n\n  DensityHeatmapLayer.prototype.addPoint = function () {\n    var props = this.options;\n    var defaultConfig = {\n      visible: false,\n      size: 0\n    };\n\n    if (props.point && props.point.visible) {\n      props.point = deepMix(defaultConfig, props.point);\n    } else {\n      props.point = defaultConfig;\n    }\n\n    var point = getGeom('point', 'guide', {\n      plot: this\n    });\n    point.active = false; // point.label = this.extractLabel();\n\n    this.setConfig('geometry', point);\n  };\n\n  DensityHeatmapLayer.prototype.extractLabel = function () {\n    var props = this.options;\n    var label = props.label;\n\n    if (label && label.visible === false) {\n      return false;\n    }\n\n    var labelConfig = getComponent('label', __assign({\n      plot: this,\n      labelType: 'scatterLabel',\n      fields: [props.xField, props.yField],\n      position: 'middle',\n      offset: 0\n    }, label));\n    return labelConfig;\n  };\n\n  DensityHeatmapLayer.prototype.legend = function () {\n    this.setConfig('legends', false);\n  };\n\n  DensityHeatmapLayer.prototype.geometryTooltip = function (config) {\n    config.tooltip = {};\n    var tooltipOptions = this.options.tooltip;\n\n    if (tooltipOptions.fields) {\n      config.tooltip.fields = tooltipOptions.fields;\n    }\n\n    if (tooltipOptions.formatter) {\n      config.tooltip.callback = tooltipOptions.formatter;\n\n      if (!tooltipOptions.fields) {\n        config.tooltip.fields = [this.options.xField, this.options.yField];\n\n        if (this.options.colorField) {\n          config.tooltip.fields.push(this.options.colorField);\n        }\n      }\n    }\n  };\n\n  DensityHeatmapLayer.prototype.parseEvents = function () {\n    _super.prototype.parseEvents.call(this, EventParser);\n  };\n\n  DensityHeatmapLayer.prototype.renderPlotComponents = function () {\n    var _this = this;\n\n    each(this.plotComponents, function (component) {\n      component.destroy();\n    });\n    var componentsType = ['legend', 'background'];\n    each(componentsType, function (t) {\n      var cfg = __assign({\n        view: _this.view,\n        plot: _this\n      }, _this.options[t]);\n\n      var component = getPlotComponents(_this, t, cfg);\n\n      if (component) {\n        component.render();\n\n        _this.plotComponents.push(component);\n      }\n    });\n  };\n\n  return DensityHeatmapLayer;\n}(ViewLayer);\n\nexport default DensityHeatmapLayer;\nregisterPlotType('densityHeatmap', DensityHeatmapLayer);","map":{"version":3,"sources":["../../../src/plots/density-heatmap/layer.ts"],"names":[],"mappings":"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","sourcesContent":["import { deepMix, each, has } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport { LayerConfig } from '../../base/layer';\nimport ViewLayer, { ViewConfig } from '../../base/view-layer';\nimport { getComponent } from '../../components/factory';\nimport { getGeom } from '../../geoms/factory';\nimport { extractScale } from '../../util/scale';\nimport '../../geoms/heatmap/linear';\nimport { HeatmapLegendConfig } from './components/legend';\nimport { HeatmapBackgroundConfig } from './components/background';\nimport { getPlotComponents } from './components';\nimport * as EventParser from './event';\nimport { GraphicStyle } from '../../interface/config';\n\nexport interface DensityHeatmapViewConfig extends ViewConfig {\n  colorField: string;\n  radius?: number;\n  intensity?: number;\n  point?: {\n    visible?: boolean;\n    shape?: string;\n    size?: number;\n    color?: string;\n    style?: GraphicStyle;\n  };\n  legend?: HeatmapLegendConfig;\n  background?: HeatmapBackgroundConfig;\n}\n\nexport interface DensityHeatmapLayerConfig extends DensityHeatmapViewConfig, LayerConfig {}\n\nexport default class DensityHeatmapLayer<\n  T extends DensityHeatmapLayerConfig = DensityHeatmapLayerConfig\n> extends ViewLayer<T> {\n  public type: string = 'densityHeatmap';\n  protected plotComponents: any[] = [];\n\n  public static getDefaultOptions(): any {\n    return deepMix({}, super.getDefaultOptions(), {\n      xAxis: {\n        visible: true,\n        autoRotateTitle: false,\n        grid: {\n          visible: false,\n        },\n        line: {\n          visible: true,\n        },\n        tickLine: {\n          visible: true,\n        },\n        label: {\n          visible: true,\n          autoHide: true,\n          autoRotate: true,\n        },\n        title: {\n          visible: false,\n          spacing: 12,\n        },\n      },\n      yAxis: {\n        visible: true,\n        autoRotateTitle: true,\n        grid: {\n          visible: false,\n        },\n        line: {\n          visible: true,\n        },\n        tickLine: {\n          visible: true,\n        },\n        label: {\n          visible: true,\n          autoHide: true,\n          autoRotate: false,\n        },\n        title: {\n          visible: false,\n          spacing: 12,\n        },\n      },\n      tooltip: {\n        visible: true,\n        showCrosshairs: true,\n        crosshairs: {\n          type: 'xy',\n          line: {\n            style: {\n              stroke: '#000000',\n              lineWidth: 1,\n              opacity: 0.5,\n            },\n          },\n        },\n        showMarkers: false,\n      },\n      legend: {\n        visible: true,\n        position: 'bottom-center',\n      },\n      color: [\n        'rgba(33,102,172,0)',\n        'rgb(103,169,207)',\n        'rgb(209,229,240)',\n        'rgb(253,219,199)',\n        'rgb(239,138,98)',\n        'rgb(178,24,43)',\n      ],\n      interactions: [{ type: 'tooltip' }],\n    });\n  }\n\n  public afterRender() {\n    this.renderPlotComponents();\n    super.afterRender();\n  }\n\n  public destroy() {\n    each(this.plotComponents, (component) => {\n      component.destroy();\n    });\n    super.destroy();\n  }\n\n  protected scale() {\n    const props = this.options;\n    const scales = {};\n    /** 配置x-scale */\n    scales[props.xField] = {};\n    if (has(props, 'xAxis')) {\n      extractScale(scales[props.xField], props.xAxis);\n    }\n    /** 配置y-scale */\n    scales[props.yField] = {};\n    if (has(props, 'yAxis')) {\n      extractScale(scales[props.yField], props.yAxis);\n    }\n    this.setConfig('scales', scales);\n    super.scale();\n  }\n\n  protected coord() {\n    return;\n  }\n\n  protected geometryParser() {\n    return 'heatmap';\n  }\n\n  protected addGeometry() {\n    if (this.options.data.length > 1) {\n      const config = {\n        type: 'linearheatmap',\n        position: {\n          fields: [this.options.xField, this.options.yField],\n        },\n        color: {\n          fields: [this.options.colorField],\n          values: this.options.color,\n        },\n        cfg: {\n          intensity: this.options.intensity,\n          radius: this.options.radius,\n        },\n      } as any;\n\n      if (this.options.radius) {\n        config.radius = this.options.radius;\n      }\n\n      if (this.options.intensity) {\n        config.intensity = this.options.intensity;\n      }\n\n      if (this.options.tooltip && (this.options.tooltip.fields || this.options.tooltip.formatter)) {\n        this.geometryTooltip(config);\n      }\n\n      this.setConfig('geometry', config);\n\n      this.addPoint();\n    }\n  }\n\n  protected addPoint() {\n    const props = this.options;\n    const defaultConfig = { visible: false, size: 0 };\n    if (props.point && props.point.visible) {\n      props.point = deepMix(defaultConfig, props.point);\n    } else {\n      props.point = defaultConfig;\n    }\n    const point = getGeom('point', 'guide', {\n      plot: this,\n    });\n    point.active = false;\n    // point.label = this.extractLabel();\n    this.setConfig('geometry', point);\n  }\n\n  protected extractLabel() {\n    const props = this.options;\n    const label = props.label;\n    if (label && label.visible === false) {\n      return false;\n    }\n    const labelConfig = getComponent('label', {\n      plot: this,\n      labelType: 'scatterLabel',\n      fields: [props.xField, props.yField],\n      position: 'middle',\n      offset: 0,\n      ...label,\n    });\n    return labelConfig;\n  }\n\n  protected legend() {\n    this.setConfig('legends', false);\n  }\n\n  protected geometryTooltip(config) {\n    config.tooltip = {};\n    const tooltipOptions: any = this.options.tooltip;\n    if (tooltipOptions.fields) {\n      config.tooltip.fields = tooltipOptions.fields;\n    }\n    if (tooltipOptions.formatter) {\n      config.tooltip.callback = tooltipOptions.formatter;\n      if (!tooltipOptions.fields) {\n        config.tooltip.fields = [this.options.xField, this.options.yField];\n        if (this.options.colorField) {\n          config.tooltip.fields.push(this.options.colorField);\n        }\n      }\n    }\n  }\n\n  protected parseEvents() {\n    super.parseEvents(EventParser);\n  }\n\n  protected renderPlotComponents() {\n    each(this.plotComponents, (component) => {\n      component.destroy();\n    });\n    const componentsType = ['legend', 'background'];\n    each(componentsType, (t) => {\n      const cfg = {\n        view: this.view,\n        plot: this,\n        ...this.options[t],\n      };\n      const component = getPlotComponents(this, t, cfg);\n      if (component) {\n        component.render();\n        this.plotComponents.push(component);\n      }\n    });\n  }\n}\n\nregisterPlotType('densityHeatmap', DensityHeatmapLayer);\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}