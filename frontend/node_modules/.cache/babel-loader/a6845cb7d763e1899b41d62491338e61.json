{"ast":null,"code":"import { each, deepMix, clone, find } from '@antv/util';\nimport { breakText } from '../../../util/common';\nvar LEAF_LABEL_OFFSET = 4;\nvar MIN_FONTSIZE = 8;\n\nfunction isLeaf(data, maxLevel) {\n  return !data.children || data.depth >= maxLevel;\n}\n\nfunction textWrapper(label, width, container) {\n  var fontSize = label.attr('fontSize');\n  var textContent = label.attr('text');\n  var tShape = container.addShape('text', {\n    attrs: {\n      text: '',\n      x: 0,\n      y: 0,\n      fontSize: fontSize\n    }\n  });\n  var textArr = textContent.split('\\n');\n  var wrappedTextArr = textArr.map(function (wrappedText) {\n    var text = '';\n    var chars = wrappedText.split('');\n    var breakIndex = [];\n\n    for (var i = 0; i < chars.length; i++) {\n      var item = chars[i];\n      tShape.attr('text', text += item);\n      var currentWidth = tShape.getBBox().width - 1;\n\n      if (currentWidth > width) {\n        // 如果是第一个字符就大于宽度不做任何换行处理\n        if (i === 0) {\n          break;\n        }\n\n        breakIndex.push(i);\n        text = '';\n      }\n    }\n\n    return breakText(chars, breakIndex);\n  });\n  tShape.remove();\n  return wrappedTextArr.join('\\n');\n}\n\nfunction textAbbreviate(text, fontSize, width, container) {\n  var tailShape = container.addShape('text', {\n    attrs: {\n      text: '...',\n      x: 0,\n      y: 0,\n      fontSize: fontSize\n    }\n  });\n  var tailWidth = tailShape.getBBox().width;\n  var tShape = container.addShape('text', {\n    attrs: {\n      text: '',\n      x: 0,\n      y: 0,\n      fontSize: fontSize\n    }\n  });\n  var t = '';\n  var abbreviateWidth = width - tailWidth;\n\n  for (var i = 0; i < text.length; i++) {\n    var item = text[i];\n    tShape.attr('text', t += item);\n    var currentWidth = tShape.getBBox().width;\n\n    if (currentWidth >= abbreviateWidth) {\n      var string = t.substr(0, t.length - 1);\n\n      if (string.length > 0) {\n        return string + '...';\n      }\n    }\n  }\n\n  tShape.remove();\n  tailShape.remove();\n  return t;\n}\n\nvar TreemapLabel =\n/** @class */\nfunction () {\n  function TreemapLabel(cfg) {\n    this.destroyed = false;\n    this.view = cfg.view;\n    this.plot = cfg.plot;\n    var defaultOptions = this.getDefaultOptions();\n    this.options = deepMix(defaultOptions, cfg, {});\n    this.init();\n  }\n\n  TreemapLabel.prototype.init = function () {\n    var _this = this;\n\n    this.container = this.getGeometry().labelsContainer;\n    this.view.on('beforerender', function () {\n      _this.clear();\n\n      _this.plot.canvas.draw();\n    });\n  };\n\n  TreemapLabel.prototype.render = function () {\n    var _this = this;\n\n    var elements = this.getGeometry().elements;\n    each(elements, function (ele) {\n      var shape = ele.shape;\n      var data = shape.get('origin').data;\n      var isLeafNode = isLeaf(data, _this.plot.options.maxLevel);\n\n      if (data.showLabel) {\n        var style = clone(_this.options.style);\n\n        var position = _this.getPosition(shape, isLeafNode);\n\n        var formatter = _this.options.formatter;\n        var content = formatter ? formatter(data.name) : data.name;\n\n        var textBaseline = _this.getTextBaseLine(isLeafNode);\n\n        var label = _this.container.addShape('text', {\n          attrs: deepMix({}, style, {\n            x: position.x,\n            y: position.y,\n            text: content,\n            fill: 'black',\n            textAlign: 'center',\n            textBaseline: textBaseline,\n            fontWeight: isLeafNode ? 300 : 600\n          }),\n          name: 'label'\n        });\n\n        _this.adjustLabel(label, shape, isLeafNode);\n      }\n    });\n  };\n\n  TreemapLabel.prototype.clear = function () {\n    if (this.container) {\n      this.container.clear();\n    }\n  };\n\n  TreemapLabel.prototype.hide = function () {\n    this.container.set('visible', false);\n    this.plot.canvas.draw();\n  };\n\n  TreemapLabel.prototype.show = function () {\n    this.container.set('visible', true);\n    this.plot.canvas.draw();\n  };\n\n  TreemapLabel.prototype.destroy = function () {\n    if (this.container) {\n      this.container.remove();\n    }\n\n    this.destroyed = true;\n  };\n\n  TreemapLabel.prototype.getBBox = function () {\n    return this.container.getBBox();\n  };\n\n  TreemapLabel.prototype.getPosition = function (shape, isLeafNode) {\n    var shapeBbox = shape.getBBox();\n    var x = 0;\n    var y = 0;\n\n    if (!isLeafNode) {\n      x = shapeBbox.x + shapeBbox.width / 2;\n      y = shapeBbox.y + 4;\n    } else {\n      x = shapeBbox.minX + shapeBbox.width / 2;\n      y = shapeBbox.minY + shapeBbox.height / 2;\n    }\n\n    return {\n      x: x,\n      y: y\n    };\n  };\n\n  TreemapLabel.prototype.getTextBaseLine = function (isLeafNode) {\n    return isLeafNode ? 'middle' : 'top';\n  };\n\n  TreemapLabel.prototype.adjustLabel = function (label, shape, isLeafNode) {\n    if (isLeafNode) {\n      this.adjustLeafLabel(label, shape);\n    } else {\n      this.adjustParentLabel(label, shape);\n    }\n  };\n\n  TreemapLabel.prototype.adjustLeafLabel = function (label, shape) {\n    var bbox = shape.getBBox();\n    var labelBBox = label.getBBox();\n    var labelText = clone(label.attr('text'));\n    var sizeOffset = 2;\n    var fontSize = Math.max(label.attr('fontSize') - sizeOffset, MIN_FONTSIZE);\n    var centerX = bbox.x + bbox.width / 2;\n    var centerY = bbox.y + bbox.height / 2;\n    label.attr({\n      x: centerX,\n      y: centerY,\n      textAlign: 'center',\n      textBaseline: 'middle',\n      lineHeight: fontSize,\n      fontSize: fontSize\n    });\n    var wrapperWidth = bbox.width - LEAF_LABEL_OFFSET * 2;\n\n    if (labelBBox.width > bbox.width && labelBBox.height > bbox.height) {\n      label.attr('text', '');\n      return;\n    } else if (wrapperWidth < fontSize) {\n      label.attr('text', '');\n      return;\n    }\n\n    if (labelBBox.width > bbox.width) {\n      var wrappedText = textWrapper(label, wrapperWidth, this.container);\n      label.attr({\n        lineHeight: label.attr('fontSize'),\n        text: wrappedText\n      });\n      var tem_bbox = label.getBBox();\n\n      if (tem_bbox.height > bbox.height) {\n        var text = textAbbreviate(labelText, fontSize, wrapperWidth, this.container);\n        label.attr('text', text);\n      }\n    }\n  };\n\n  TreemapLabel.prototype.adjustParentLabel = function (label, shape) {\n    var shapeBbox = shape.getBBox();\n    var wrapperWidth = shapeBbox.width - LEAF_LABEL_OFFSET * 2;\n\n    if (label.getBBox().width > wrapperWidth) {\n      var text = textAbbreviate(label.attr('text'), label.attr('fontSize'), wrapperWidth, this.container);\n      label.attr('text', text);\n    }\n  };\n\n  TreemapLabel.prototype.getDefaultOptions = function () {\n    var theme = this.plot.theme;\n    var labelStyle = theme.label.style;\n    return {\n      offsetX: 0,\n      offsetY: 0,\n      style: clone(labelStyle)\n    };\n  };\n\n  TreemapLabel.prototype.getGeometry = function () {\n    return find(this.view.geometries, function (geom) {\n      return geom.type === 'polygon';\n    });\n  };\n\n  return TreemapLabel;\n}();\n\nexport default TreemapLabel;","map":{"version":3,"sources":["../../../../src/plots/treemap/components/label.ts"],"names":[],"mappings":"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","sourcesContent":["import { each, deepMix, clone, find } from '@antv/util';\nimport { View, IGroup } from '../../../dependents';\nimport { breakText } from '../../../util/common';\n\nconst LEAF_LABEL_OFFSET = 4;\nconst MIN_FONTSIZE = 8;\n\nfunction isLeaf(data, maxLevel) {\n  return !data.children || data.depth >= maxLevel;\n}\n\nfunction textWrapper(label, width, container) {\n  const fontSize = label.attr('fontSize');\n  const textContent: string = label.attr('text');\n  const tShape = container.addShape('text', {\n    attrs: {\n      text: '',\n      x: 0,\n      y: 0,\n      fontSize,\n    },\n  });\n  const textArr = textContent.split('\\n');\n  const wrappedTextArr = textArr.map((wrappedText) => {\n    let text = '';\n    const chars = wrappedText.split('');\n    const breakIndex: number[] = [];\n    for (let i = 0; i < chars.length; i++) {\n      const item = chars[i];\n      tShape.attr('text', (text += item));\n      const currentWidth = tShape.getBBox().width - 1;\n      if (currentWidth > width) {\n        // 如果是第一个字符就大于宽度不做任何换行处理\n        if (i === 0) {\n          break;\n        }\n        breakIndex.push(i);\n        text = '';\n      }\n    }\n\n    return breakText(chars, breakIndex);\n  });\n\n  tShape.remove();\n  return wrappedTextArr.join('\\n');\n}\n\nfunction textAbbreviate(text, fontSize, width, container) {\n  const tailShape = container.addShape('text', {\n    attrs: {\n      text: '...',\n      x: 0,\n      y: 0,\n      fontSize,\n    },\n  });\n  const tailWidth = tailShape.getBBox().width;\n  const tShape = container.addShape('text', {\n    attrs: {\n      text: '',\n      x: 0,\n      y: 0,\n      fontSize,\n    },\n  });\n  let t = '';\n  const abbreviateWidth = width - tailWidth;\n  for (let i = 0; i < text.length; i++) {\n    const item = text[i];\n    tShape.attr('text', (t += item));\n    const currentWidth = tShape.getBBox().width;\n    if (currentWidth >= abbreviateWidth) {\n      const string = t.substr(0, t.length - 1);\n      if (string.length > 0) {\n        return string + '...';\n      }\n    }\n  }\n  tShape.remove();\n  tailShape.remove();\n  return t;\n}\n\nexport interface TreemapLabelConfig {\n  visible?: boolean;\n  formatter?: (...args: any[]) => string;\n  offsetX?: number;\n  offsetY?: number;\n  style?: any;\n}\n\nexport interface ILineLabel extends TreemapLabelConfig {\n  view: View;\n  plot: any;\n}\n\nexport default class TreemapLabel {\n  public options: TreemapLabelConfig;\n  public destroyed: boolean = false;\n  protected plot: any;\n  protected view: View;\n  private container: IGroup;\n\n  constructor(cfg: ILineLabel) {\n    this.view = cfg.view;\n    this.plot = cfg.plot;\n    const defaultOptions = this.getDefaultOptions();\n    this.options = deepMix(defaultOptions, cfg, {});\n    this.init();\n  }\n\n  protected init() {\n    this.container = this.getGeometry().labelsContainer;\n    this.view.on('beforerender', () => {\n      this.clear();\n      this.plot.canvas.draw();\n    });\n  }\n\n  public render() {\n    const elements = this.getGeometry().elements;\n    each(elements, (ele) => {\n      const shape = ele.shape;\n      const data = shape.get('origin').data;\n      const isLeafNode = isLeaf(data, this.plot.options.maxLevel);\n      if (data.showLabel) {\n        const style = clone(this.options.style);\n        const position = this.getPosition(shape, isLeafNode);\n        const formatter = this.options.formatter;\n        const content = formatter ? formatter(data.name) : data.name;\n        const textBaseline = this.getTextBaseLine(isLeafNode);\n        const label = this.container.addShape('text', {\n          attrs: deepMix({}, style, {\n            x: position.x,\n            y: position.y,\n            text: content,\n            fill: 'black',\n            textAlign: 'center',\n            textBaseline,\n            fontWeight: isLeafNode ? 300 : 600,\n          }),\n          name: 'label',\n        });\n        this.adjustLabel(label, shape, isLeafNode);\n      }\n    });\n  }\n\n  public clear() {\n    if (this.container) {\n      this.container.clear();\n    }\n  }\n\n  public hide() {\n    this.container.set('visible', false);\n    this.plot.canvas.draw();\n  }\n\n  public show() {\n    this.container.set('visible', true);\n    this.plot.canvas.draw();\n  }\n\n  public destroy() {\n    if (this.container) {\n      this.container.remove();\n    }\n    this.destroyed = true;\n  }\n\n  public getBBox() {\n    return this.container.getBBox();\n  }\n\n  protected getPosition(shape, isLeafNode) {\n    const shapeBbox = shape.getBBox();\n    let x = 0;\n    let y = 0;\n    if (!isLeafNode) {\n      x = shapeBbox.x + shapeBbox.width / 2;\n      y = shapeBbox.y + 4;\n    } else {\n      x = shapeBbox.minX + shapeBbox.width / 2;\n      y = shapeBbox.minY + shapeBbox.height / 2;\n    }\n    return { x, y };\n  }\n\n  protected getTextBaseLine(isLeafNode) {\n    return isLeafNode ? 'middle' : 'top';\n  }\n\n  protected adjustLabel(label, shape, isLeafNode) {\n    if (isLeafNode) {\n      this.adjustLeafLabel(label, shape);\n    } else {\n      this.adjustParentLabel(label, shape);\n    }\n  }\n\n  private adjustLeafLabel(label, shape) {\n    const bbox = shape.getBBox();\n    const labelBBox = label.getBBox();\n    const labelText = clone(label.attr('text'));\n    const sizeOffset = 2;\n    const fontSize = Math.max(label.attr('fontSize') - sizeOffset, MIN_FONTSIZE);\n    const centerX = bbox.x + bbox.width / 2;\n    const centerY = bbox.y + bbox.height / 2;\n    label.attr({\n      x: centerX,\n      y: centerY,\n      textAlign: 'center',\n      textBaseline: 'middle',\n      lineHeight: fontSize,\n      fontSize,\n    });\n    const wrapperWidth = bbox.width - LEAF_LABEL_OFFSET * 2;\n    if (labelBBox.width > bbox.width && labelBBox.height > bbox.height) {\n      label.attr('text', '');\n      return;\n    } else if (wrapperWidth < fontSize) {\n      label.attr('text', '');\n      return;\n    }\n    if (labelBBox.width > bbox.width) {\n      const wrappedText = textWrapper(label, wrapperWidth, this.container);\n      label.attr({\n        lineHeight: label.attr('fontSize'),\n        text: wrappedText,\n      });\n      const tem_bbox = label.getBBox();\n      if (tem_bbox.height > bbox.height) {\n        const text = textAbbreviate(labelText, fontSize, wrapperWidth, this.container);\n        label.attr('text', text);\n      }\n    }\n  }\n\n  private adjustParentLabel(label, shape) {\n    const shapeBbox = shape.getBBox();\n    const wrapperWidth = shapeBbox.width - LEAF_LABEL_OFFSET * 2;\n    if (label.getBBox().width > wrapperWidth) {\n      const text = textAbbreviate(label.attr('text'), label.attr('fontSize'), wrapperWidth, this.container);\n      label.attr('text', text);\n    }\n  }\n\n  private getDefaultOptions() {\n    const { theme } = this.plot;\n    const labelStyle = theme.label.style;\n    return {\n      offsetX: 0,\n      offsetY: 0,\n      style: clone(labelStyle),\n    };\n  }\n\n  private getGeometry() {\n    return find(this.view.geometries, (geom) => geom.type === 'polygon');\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}