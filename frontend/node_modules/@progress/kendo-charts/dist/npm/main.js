'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _progress_kendoDrawing = require('@progress/kendo-drawing');

var ARC = "arc";
var AXIS_LABEL_CLICK = "axisLabelClick";
var BLACK = "#000";
var BOTTOM = "bottom";
var CENTER = "center";
var CIRCLE = "circle";
var COORD_PRECISION = 3;
var CROSS = "cross";
var DATE = "date";
var DEFAULT_FONT = "12px sans-serif";
var DEFAULT_HEIGHT = 400;
var DEFAULT_PRECISION = 10;
var DEFAULT_WIDTH = 600;
var END = "end";
var FORMAT_REGEX = /\{\d+:?/;
var HEIGHT = "height";
var HIGHLIGHT_ZINDEX = 100;
var INSIDE = "inside";
var LEFT = "left";
var MAX_VALUE = Number.MAX_VALUE;
var MIN_VALUE = -Number.MAX_VALUE;
var NONE = "none";
var NOTE_CLICK = "noteClick";
var NOTE_HOVER = "noteHover";
var NOTE_LEAVE = "noteLeave";
var OBJECT = "object";
var OUTSIDE = "outside";
var RIGHT = "right";
var START = "start";
var STRING = "string";
var TOP = "top";
var TRIANGLE = "triangle";
var VALUE = "value";
var WHITE = "#fff";
var WIDTH = "width";
var X = "x";
var Y = "y";
var DEFAULT_SERIES_OPACITY = 1;

function isArray(value) {
    return Array.isArray(value);
}

function addClass(element, classes) {
    var classArray = isArray(classes) ? classes : [ classes ];

    for (var idx = 0; idx < classArray.length; idx++) {
        var className = classArray[idx];
        if (element.className.indexOf(className) === -1) {
            element.className += " " + className;
        }
    }
}

var SPACE_REGEX = /\s+/g;

function removeClass(element, className) {
    if (element && element.className) {
        element.className = element.className.replace(className, "").replace(SPACE_REGEX, " ");
    }
}

function alignPathToPixel(path) {
    var offset = 0.5;
    if (path.options.stroke && _progress_kendoDrawing.drawing.util.defined(path.options.stroke.width)) {
        if (path.options.stroke.width % 2 === 0) {
            offset = 0;
        }
    }

    for (var i = 0; i < path.segments.length; i++) {
        path.segments[i].anchor().round(0).translate(offset, offset);
    }

    return path;
}

function clockwise(angle1, angle2) {
    // True if angle2 is clockwise of angle1
    // assuming angles grow in clock-wise direction
    // (as in the pie and radar charts)
    return -angle1.x * angle2.y + angle1.y * angle2.x < 0;
}

function isNumber(value) {
    return typeof value === "number" && !isNaN(value);
}

function isString(value) {
    return typeof value === STRING;
}

function convertableToNumber(value) {
    return isNumber(value) || (isString(value) && isFinite(value));
}

function isFunction(fn) {
    return typeof fn === "function";
}

var OBJECT$1 = "object";
var UNDEFINED = "undefined";

function deepExtendOne(destination, source) {

    for (var property in source) {
        var propValue = source[property];
        var propType = typeof propValue;

        var propInit = (void 0);
        if (propType === OBJECT$1 && propValue !== null) {
            propInit = propValue.constructor;
        } else {
            propInit = null;
        }

        if (propInit && propInit !== Array) {

            if (propValue instanceof Date) {
                destination[property] = new Date(propValue.getTime());
            } else if (isFunction(propValue.clone)) {
                destination[property] = propValue.clone();
            } else {
                var destProp = destination[property];
                if (typeof (destProp) === OBJECT$1) {
                    destination[property] = destProp || {};
                } else {
                    destination[property] = {};
                }
                deepExtendOne(destination[property], propValue);
            }
        } else if (propType !== UNDEFINED) {
            destination[property] = propValue;
        }
    }

    return destination;
}

function deepExtend(destination) {
    var arguments$1 = arguments;

    var length = arguments.length;

    for (var i = 1; i < length; i++) {
        deepExtendOne(destination, arguments$1[i]);
    }

    return destination;
}

function isObject(value) {
    return typeof value === "object";
}

function styleValue(value) {
    if (isNumber(value)) {
        return value + "px";
    }
    return value;
}

var SIZE_STYLES_REGEX = /width|height|top|left|bottom|right/i;

function isSizeField(field) {
    return SIZE_STYLES_REGEX.test(field);
}

function elementStyles(element, styles) {
    var stylesArray = isString(styles) ? [ styles ] : styles;

    if (isArray(stylesArray)) {
        var result = {};
        var style = window.getComputedStyle(element);

        for (var idx = 0; idx < stylesArray.length; idx++) {
            var field = stylesArray[idx];
            result[field] = isSizeField(field) ? parseFloat(style[field]) : style[field];
        }

        return result;
    } else if (isObject(styles)) {
        for (var field$1 in styles) {
            element.style[field$1] = styleValue(styles[field$1]);
        }
    }
}

function getSpacing(value, defaultSpacing) {
    if ( defaultSpacing === void 0 ) defaultSpacing = 0;

    var spacing = { top: 0, right: 0, bottom: 0, left: 0 };

    if (typeof(value) === "number") {
        spacing[TOP] = spacing[RIGHT] = spacing[BOTTOM] = spacing[LEFT] = value;
    } else {
        spacing[TOP] = value[TOP] || defaultSpacing;
        spacing[RIGHT] = value[RIGHT] || defaultSpacing;
        spacing[BOTTOM] = value[BOTTOM] || defaultSpacing;
        spacing[LEFT] = value[LEFT] || defaultSpacing;
    }

    return spacing;
}

var defaultImplementation = {
    format: function (format, value) { return value; },

    toString: function (value) { return value; },

    parseDate: function (value) { return new Date(value); },

    firstDay: function () { return 0; }
};

var current = defaultImplementation;

var IntlService = function IntlService () {};

var staticAccessors = { implementation: {} };

IntlService.register = function register (userImplementation) {
    current = userImplementation;
};

staticAccessors.implementation.get = function () {
    return current;
};

Object.defineProperties( IntlService, staticAccessors );

var FORMAT_REPLACE_REGEX = /\{(\d+)(:[^\}]+)?\}/g;

var FormatService = function FormatService(intlService) {
    this._intlService = intlService;
};

var prototypeAccessors$1 = { intl: {} };

prototypeAccessors$1.intl.get = function () {
    return this._intlService || IntlService.implementation;
};

prototypeAccessors$1.intl.set = function (value) {
    this._intlService = value;
};

FormatService.prototype.auto = function auto (formatString) {
        var values = [], len = arguments.length - 1;
        while ( len-- > 0 ) values[ len ] = arguments[ len + 1 ];

    var intl = this.intl;

    if (isString(formatString) && formatString.match(FORMAT_REGEX)) {
        return intl.format.apply(intl, [ formatString ].concat( values ));
    }

    return intl.toString(values[0], formatString);
};

FormatService.prototype.localeAuto = function localeAuto (formatString, values, locale) {
    var intl = this.intl;
    var result;

    if (isString(formatString) && formatString.match(FORMAT_REGEX)) {
        result = formatString.replace(FORMAT_REPLACE_REGEX, function(match, index, placeholderFormat) {
            var value = values[parseInt(index, 10)];

            return intl.toString(value, placeholderFormat ? placeholderFormat.substring(1) : "", locale);
        });
    } else {
        result = intl.toString(values[0], formatString, locale);
    }

    return result;
};

Object.defineProperties( FormatService.prototype, prototypeAccessors$1 );

var ChartService = function ChartService(chart, context) {
    if ( context === void 0 ) context = {};

    this._intlService = context.intlService;
    this.sender = context.sender || chart;
    this.format = new FormatService(context.intlService);
    this.chart = chart;
    this.rtl = Boolean(context.rtl);
};

var prototypeAccessors = { intl: {} };

prototypeAccessors.intl.get = function () {
    return this._intlService || IntlService.implementation;
};

prototypeAccessors.intl.set = function (value) {
    this._intlService = value;
    this.format.intl = value;
};

ChartService.prototype.notify = function notify (name, args) {
    if (this.chart) {
        this.chart.trigger(name, args);
    }
};

ChartService.prototype.isPannable = function isPannable (axis) {
    var pannable = ((this.chart || {}).options || {}).pannable;
    return pannable && pannable.lock !== axis;
};

Object.defineProperties( ChartService.prototype, prototypeAccessors );

var current$1;

var DomEventsBuilder = function DomEventsBuilder () {};

DomEventsBuilder.register = function register (userImplementation) {
    current$1 = userImplementation;
};

DomEventsBuilder.create = function create (element, events) {
    if (current$1) {
        return current$1.create(element, events);
    }
};

var current$2 = {
    compile: function(template) {
        return template;
    }
};

var TemplateService = function TemplateService () {};

TemplateService.register = function register (userImplementation) {
    current$2 = userImplementation;
};

TemplateService.compile = function compile (template) {
    return current$2.compile(template);
};

function getTemplate(options) {
    if ( options === void 0 ) options = {};

    var template;
    if (options.template) {
        options.template = template = TemplateService.compile(options.template);
    } else if (isFunction(options.content)) {
        template = options.content;
    }

    return template;
}

var FIELD_REGEX = /\[(?:(\d+)|['"](.*?)['"])\]|((?:(?!\[.*?\]|\.).)+)/g;
var getterCache = {};

getterCache['undefined'] = function(obj) {
    return obj;
};

function getter(field) {
    if (getterCache[field]) {
        return getterCache[field];
    }

    var fields = [];
    field.replace(FIELD_REGEX, function(match, index, indexAccessor, field) {
        fields.push(_progress_kendoDrawing.drawing.util.defined(index) ? index : (indexAccessor || field));
    });

    getterCache[field] = function(obj) {
        var result = obj;
        for (var idx = 0; idx < fields.length && result; idx++) {
            result = result[fields[idx]];
        }

        return result;
    };

    return getterCache[field];
}

function grep(array, callback) {
    var length = array.length;
    var result = [];
    for (var idx = 0; idx < length; idx++) {
        if (callback(array[idx])) {
            result .push(array[idx]);
        }
    }

    return result;
}

function hasClasses(element, classNames) {
    if (element.className) {
        var names = classNames.split(" ");
        for (var idx = 0; idx < names.length; idx++) {
            if (element.className.indexOf(names[idx]) !== -1) {
                return true;
            }
        }
    }
}

var HashMap = function HashMap() {
    this._map = {};
};

HashMap.prototype.get = function get (name) {
    return this._map[this._key(name)];
};

HashMap.prototype.set = function set (name, value) {
    this._map[this._key(name)] = value;
};

HashMap.prototype._key = function _key (name) {
    return name instanceof Date ? name.getTime() : name;
};

function inArray(value, array) {
    if (array) {
        return array.indexOf(value) !== -1;
    }
}

function interpolateValue(start, end, progress) {
    return _progress_kendoDrawing.drawing.util.round(start + (end - start) * progress, COORD_PRECISION);
}

var TRIGGER = 'trigger';

var InstanceObserver = function InstanceObserver(observer, handlers) {
    this.observer = observer;
    this.handlerMap = deepExtend({}, this.handlerMap, handlers);
};

InstanceObserver.prototype.trigger = function trigger (name, args) {
    var ref = this;
        var observer = ref.observer;
        var handlerMap = ref.handlerMap;
    var isDefaultPrevented;
    if (handlerMap[name]) {
        isDefaultPrevented = this.callObserver(handlerMap[name], args);
    } else if (observer[TRIGGER]) {
        isDefaultPrevented = this.callObserver(TRIGGER, name, args);
    }

    return isDefaultPrevented;
};

InstanceObserver.prototype.callObserver = function callObserver (fnName) {
        var args = [], len = arguments.length - 1;
        while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];

    return this.observer[fnName].apply(this.observer, args);
};

InstanceObserver.prototype.requiresHandlers = function requiresHandlers (names) {
        var this$1 = this;

    if (this.observer.requiresHandlers) {
        return this.observer.requiresHandlers(names);
    }

    for (var idx = 0; idx < names.length; idx++) {
        if (this$1.handlerMap[names[idx]]) {
            return true;
        }
    }
};

function map(array, callback) {
    var length = array.length;
    var result = [];
    for (var idx = 0; idx < length; idx++) {
        var value = callback(array[idx]);
        if (_progress_kendoDrawing.drawing.util.defined(value)) {
            result.push(value);
        }
    }
    return result;
}

function mousewheelDelta(e) {
    var delta = 0;

    if (e.wheelDelta) {
        delta = -e.wheelDelta / 120;
        delta = delta > 0 ? Math.ceil(delta) : Math.floor(delta);
    }

    if (e.detail) {
        delta = _progress_kendoDrawing.drawing.util.round(e.detail / 3);
    }

    return delta;
}

var ref$1 = _progress_kendoDrawing.drawing.util;
var append$1 = ref$1.append;
var bindEvents = ref$1.bindEvents;
var defined = ref$1.defined;
var deg = ref$1.deg;
var elementOffset = ref$1.elementOffset;
var elementSize$1 = ref$1.elementSize;
var eventElement = ref$1.eventElement;
var eventCoordinates = ref$1.eventCoordinates;
var last = ref$1.last;
var limitValue = ref$1.limitValue;
var objectKey = ref$1.objectKey;
var rad = ref$1.rad;
var round = ref$1.round;
var unbindEvents = ref$1.unbindEvents;
var valueOrDefault = ref$1.valueOrDefault;

var FontLoader = function FontLoader () {};

FontLoader.fetchFonts = function fetchFonts (options, fonts, state) {
        if ( state === void 0 ) state = { depth: 0 };

    var MAX_DEPTH = 5;

    if (!options || state.depth > MAX_DEPTH || !document.fonts) {
        return;
    }

    Object.keys(options).forEach(function(key) {
        var value = options[key];
        if (key === "dataSource" || key[0] === "$" || !value) {
            return;
        }

        if (key === "font") {
            fonts.push(value);
        } else if (typeof value === "object") {
            state.depth++;
            FontLoader.fetchFonts(value, fonts, state);
            state.depth--;
        }
    });
};

FontLoader.loadFonts = function loadFonts (fonts, callback) {
    var promises = [];

    if (fonts.length > 0 && document.fonts) {
        try {
            promises = fonts.map(function(font) {
                return document.fonts.load(font);
            });
        } catch (e) {
            // Silence font-loading errors
            _progress_kendoDrawing.logToConsole(e);
        }

        Promise.all(promises).then(callback, callback);
    } else {
        callback();
    }
};

FontLoader.preloadFonts = function preloadFonts (options, callback) {
    var fonts = [];
    FontLoader.fetchFonts(options, fonts);

    FontLoader.loadFonts(fonts, callback);
};

function setDefaultOptions(type, options) {
    var proto = type.prototype;
    if (proto.options) {
        proto.options = deepExtend({}, proto.options, options);
    } else {
        proto.options = options;
    }
}

function sparseArrayLimits(arr) {
    var min = MAX_VALUE;
    var max = MIN_VALUE;

    for (var idx = 0, length = arr.length; idx < length; idx++) {
        var value = arr[idx];
        if (value !== null && isFinite(value)) {
            min = Math.min(min, value);
            max = Math.max(max, value);
        }
    }

    return {
        min: min === MAX_VALUE ? undefined : min,
        max: max === MIN_VALUE ? undefined : max
    };
}

function find(array, predicate) {
    for (var i = 0; i < array.length; i++) {
        var item = array[i];
        if (predicate(item, i, array)) {
            return item;
        }
    }
}

var Matrix = _progress_kendoDrawing.geometry.Matrix;
var matrixRegexp = /matrix\((.*)\)/;

function parseMatrix(matrixString) {
    var match = matrixString.match(matrixRegexp);
    if (match === null || match.length !== 2) {
        return Matrix.unit();
    }

    var members = match[1].split(',').map(function (x) { return parseFloat(x); });
    return new (Function.prototype.bind.apply( Matrix, [ null ].concat( members) ));
}

function transformMatrix(element) {
    var transform = getComputedStyle(element).transform;

    if (transform === 'none') {
        return Matrix.unit();
    }

    return parseMatrix(transform);
}

function elementScale(element) {
    if (!element) {
        return Matrix.unit();
    }

    var matrix = transformMatrix(element);
    var parent = element.parentElement;
    while (parent) {
        var parentMatrix = transformMatrix(parent);
        matrix = matrix.multiplyCopy(parentMatrix);
        parent = parent.parentElement;
    }

    matrix.b = matrix.c = matrix.e = matrix.f = 0;
    return matrix;
}

function autoMajorUnit(min, max) {
    var diff = round(max - min, DEFAULT_PRECISION - 1);

    if (diff === 0) {
        if (max === 0) {
            return 0.1;
        }

        diff = Math.abs(max);
    }

    var scale = Math.pow(10, Math.floor(Math.log(diff) / Math.log(10)));
    var relativeValue = round((diff / scale), DEFAULT_PRECISION);
    var scaleMultiplier = 1;

    if (relativeValue < 1.904762) {
        scaleMultiplier = 0.2;
    } else if (relativeValue < 4.761904) {
        scaleMultiplier = 0.5;
    } else if (relativeValue < 9.523809) {
        scaleMultiplier = 1;
    } else {
        scaleMultiplier = 2;
    }

    return round(scale * scaleMultiplier, DEFAULT_PRECISION);
}

var Point = (function (Class$$1) {
    function Point(x, y) {
        Class$$1.call(this);

        this.x = x || 0;
        this.y = y || 0;
    }

    if ( Class$$1 ) Point.__proto__ = Class$$1;
    Point.prototype = Object.create( Class$$1 && Class$$1.prototype );
    Point.prototype.constructor = Point;

    Point.prototype.clone = function clone () {
        return new Point(this.x, this.y);
    };

    Point.prototype.equals = function equals (point) {
        return point && this.x === point.x && this.y === point.y;
    };

    Point.prototype.rotate = function rotate (center, degrees) {
        var theta = rad(degrees);
        var cosT = Math.cos(theta);
        var sinT = Math.sin(theta);
        var cx = center.x;
        var cy = center.y;
        var ref = this;
        var x = ref.x;
        var y = ref.y;

        this.x = round(
            cx + (x - cx) * cosT + (y - cy) * sinT,
            COORD_PRECISION
        );

        this.y = round(
            cy + (y - cy) * cosT - (x - cx) * sinT,
            COORD_PRECISION
        );

        return this;
    };

    Point.prototype.multiply = function multiply (a) {

        this.x *= a;
        this.y *= a;

        return this;
    };

    Point.prototype.distanceTo = function distanceTo (point) {
        var dx = this.x - point.x;
        var dy = this.y - point.y;

        return Math.sqrt(dx * dx + dy * dy);
    };

    Point.onCircle = function onCircle (center, angle, radius) {
        var radians = rad(angle);

        return new Point(
            center.x - radius * Math.cos(radians),
            center.y - radius * Math.sin(radians)
        );
    };

    return Point;
}(_progress_kendoDrawing.Class));

var Box = (function (Class$$1) {
    function Box(x1, y1, x2, y2) {
        Class$$1.call(this);

        this.x1 = x1 || 0;
        this.y1 = y1 || 0;
        this.x2 = x2 || 0;
        this.y2 = y2 || 0;
    }

    if ( Class$$1 ) Box.__proto__ = Class$$1;
    Box.prototype = Object.create( Class$$1 && Class$$1.prototype );
    Box.prototype.constructor = Box;

    Box.prototype.equals = function equals (box) {
        return this.x1 === box.x1 && this.x2 === box.x2 &&
            this.y1 === box.y1 && this.y2 === box.y2;
    };

    Box.prototype.width = function width () {
        return this.x2 - this.x1;
    };

    Box.prototype.height = function height () {
        return this.y2 - this.y1;
    };

    Box.prototype.translate = function translate (dx, dy) {
        this.x1 += dx;
        this.x2 += dx;
        this.y1 += dy;
        this.y2 += dy;

        return this;
    };

    Box.prototype.move = function move (x, y) {
        var height = this.height();
        var width = this.width();

        if (defined(x)) {
            this.x1 = x;
            this.x2 = this.x1 + width;
        }

        if (defined(y)) {
            this.y1 = y;
            this.y2 = this.y1 + height;
        }

        return this;
    };

    Box.prototype.wrap = function wrap (targetBox) {
        this.x1 = Math.min(this.x1, targetBox.x1);
        this.y1 = Math.min(this.y1, targetBox.y1);
        this.x2 = Math.max(this.x2, targetBox.x2);
        this.y2 = Math.max(this.y2, targetBox.y2);

        return this;
    };

    Box.prototype.wrapPoint = function wrapPoint (point) {
        var arrayPoint = isArray(point);
        var x = arrayPoint ? point[0] : point.x;
        var y = arrayPoint ? point[1] : point.y;
        this.wrap(new Box(x, y, x, y));

        return this;
    };

    Box.prototype.snapTo = function snapTo (targetBox, axis) {

        if (axis === X || !axis) {
            this.x1 = targetBox.x1;
            this.x2 = targetBox.x2;
        }

        if (axis === Y || !axis) {
            this.y1 = targetBox.y1;
            this.y2 = targetBox.y2;
        }

        return this;
    };

    Box.prototype.alignTo = function alignTo (targetBox, anchor) {
        var height = this.height();
        var width = this.width();
        var axis = anchor === TOP || anchor === BOTTOM ? Y : X;
        var offset = axis === Y ? height : width;

        if (anchor === CENTER) {
            var targetCenter = targetBox.center();
            var center = this.center();

            this.x1 += targetCenter.x - center.x;
            this.y1 += targetCenter.y - center.y;
        } else if (anchor === TOP || anchor === LEFT) {
            this[axis + 1] = targetBox[axis + 1] - offset;
        } else {
            this[axis + 1] = targetBox[axis + 2];
        }

        this.x2 = this.x1 + width;
        this.y2 = this.y1 + height;

        return this;
    };

    Box.prototype.shrink = function shrink (dw, dh) {

        this.x2 -= dw;
        this.y2 -= dh;

        return this;
    };

    Box.prototype.expand = function expand (dw, dh) {
        this.shrink(-dw, -dh);
        return this;
    };

    Box.prototype.pad = function pad (padding) {
        var spacing = getSpacing(padding);

        this.x1 -= spacing.left;
        this.x2 += spacing.right;
        this.y1 -= spacing.top;
        this.y2 += spacing.bottom;

        return this;
    };

    Box.prototype.unpad = function unpad (padding) {
        var spacing = getSpacing(padding);

        spacing.left = -spacing.left;
        spacing.top = -spacing.top;
        spacing.right = -spacing.right;
        spacing.bottom = -spacing.bottom;

        return this.pad(spacing);
    };

    Box.prototype.clone = function clone () {
        return new Box(this.x1, this.y1, this.x2, this.y2);
    };

    Box.prototype.center = function center () {
        return new Point(
            this.x1 + this.width() / 2,
            this.y1 + this.height() / 2
        );
    };

    Box.prototype.containsPoint = function containsPoint (point) {

        return point.x >= this.x1 && point.x <= this.x2 &&
               point.y >= this.y1 && point.y <= this.y2;
    };

    Box.prototype.points = function points () {
        return [
            new Point(this.x1, this.y1),
            new Point(this.x2, this.y1),
            new Point(this.x2, this.y2),
            new Point(this.x1, this.y2)
        ];
    };

    Box.prototype.getHash = function getHash () {
        return [ this.x1, this.y1, this.x2, this.y2 ].join(",");
    };

    Box.prototype.overlaps = function overlaps (box) {
        return !(box.y2 < this.y1 || this.y2 < box.y1 || box.x2 < this.x1 || this.x2 < box.x1);
    };

    Box.prototype.rotate = function rotate (rotation) {
        var width = this.width();
        var height = this.height();
        var ref = this.center();
        var cx = ref.x;
        var cy = ref.y;

        var r1 = rotatePoint(0, 0, cx, cy, rotation);
        var r2 = rotatePoint(width, 0, cx, cy, rotation);
        var r3 = rotatePoint(width, height, cx, cy, rotation);
        var r4 = rotatePoint(0, height, cx, cy, rotation);

        width = Math.max(r1.x, r2.x, r3.x, r4.x) - Math.min(r1.x, r2.x, r3.x, r4.x);
        height = Math.max(r1.y, r2.y, r3.y, r4.y) - Math.min(r1.y, r2.y, r3.y, r4.y);

        this.x2 = this.x1 + width;
        this.y2 = this.y1 + height;

        return this;
    };

    Box.prototype.toRect = function toRect () {
        return new _progress_kendoDrawing.geometry.Rect([ this.x1, this.y1 ], [ this.width(), this.height() ]);
    };

    Box.prototype.hasSize = function hasSize () {
        return this.width() !== 0 && this.height() !== 0;
    };

    Box.prototype.align = function align (targetBox, axis, alignment) {
        var c1 = axis + 1;
        var c2 = axis + 2;
        var sizeFunc = axis === X ? WIDTH : HEIGHT;
        var size = this[sizeFunc]();

        if (inArray(alignment, [ LEFT, TOP ])) {
            this[c1] = targetBox[c1];
            this[c2] = this[c1] + size;
        } else if (inArray(alignment, [ RIGHT, BOTTOM ])) {
            this[c2] = targetBox[c2];
            this[c1] = this[c2] - size;
        } else if (alignment === CENTER) {
            this[c1] = targetBox[c1] + (targetBox[sizeFunc]() - size) / 2;
            this[c2] = this[c1] + size;
        }
    };

    return Box;
}(_progress_kendoDrawing.Class));

function rotatePoint(x, y, cx, cy, angle) {
    var theta = rad(angle);

    return new Point(
        cx + (x - cx) * Math.cos(theta) + (y - cy) * Math.sin(theta),
        cy - (x - cx) * Math.sin(theta) + (y - cy) * Math.cos(theta)
    );
}

var Ring = (function (Class$$1) {
    function Ring(center, innerRadius, radius, startAngle, angle) {
        Class$$1.call(this);

        this.center = center;
        this.innerRadius = innerRadius;
        this.radius = radius;
        this.startAngle = startAngle;
        this.angle = angle;
    }

    if ( Class$$1 ) Ring.__proto__ = Class$$1;
    Ring.prototype = Object.create( Class$$1 && Class$$1.prototype );
    Ring.prototype.constructor = Ring;

    Ring.prototype.clone = function clone () {
        return new Ring(this.center, this.innerRadius, this.radius, this.startAngle, this.angle);
    };

    Ring.prototype.middle = function middle () {
        return this.startAngle + this.angle / 2;
    };

    Ring.prototype.setRadius = function setRadius (newRadius, innerRadius) {
        if (innerRadius) {
            this.innerRadius = newRadius;
        } else {
            this.radius = newRadius;
        }

        return this;
    };

    // TODO: Remove and replace with Point.onCircle
    Ring.prototype.point = function point (angle, innerRadius) {
        var radianAngle = rad(angle);
        var ax = Math.cos(radianAngle);
        var ay = Math.sin(radianAngle);
        var radius = innerRadius ? this.innerRadius : this.radius;
        var x = round(this.center.x - (ax * radius), COORD_PRECISION);
        var y = round(this.center.y - (ay * radius), COORD_PRECISION);

        return new Point(x, y);
    };

    Ring.prototype.adjacentBox = function adjacentBox (distance, width, height) {
        var sector = this.clone().expand(distance);
        var midAndle = sector.middle();
        var midPoint = sector.point(midAndle);
        var hw = width / 2;
        var hh = height / 2;
        var sa = Math.sin(rad(midAndle));
        var ca = Math.cos(rad(midAndle));
        var x = midPoint.x - hw;
        var y = midPoint.y - hh;

        if (Math.abs(sa) < 0.9) {
            x += hw * -ca / Math.abs(ca);
        }

        if (Math.abs(ca) < 0.9) {
            y += hh * -sa / Math.abs(sa);
        }

        return new Box(x, y, x + width, y + height);
    };

    Ring.prototype.containsPoint = function containsPoint (p) {
        var center = this.center;
        var innerRadius = this.innerRadius;
        var radius = this.radius;
        var startAngle = this.startAngle;
        var endAngle = this.startAngle + this.angle;
        var dx = p.x - center.x;
        var dy = p.y - center.y;
        var vector = new Point(dx, dy);
        var startPoint = this.point(startAngle);
        var startVector = new Point(startPoint.x - center.x, startPoint.y - center.y);
        var endPoint = this.point(endAngle);
        var endVector = new Point(endPoint.x - center.x, endPoint.y - center.y);
        var dist = round(dx * dx + dy * dy, COORD_PRECISION);

        return (startVector.equals(vector) || clockwise(startVector, vector)) &&
               !clockwise(endVector, vector) &&
               dist >= innerRadius * innerRadius && dist <= radius * radius;
    };

    Ring.prototype.getBBox = function getBBox () {
        var this$1 = this;

        var box = new Box(MAX_VALUE, MAX_VALUE, MIN_VALUE, MIN_VALUE);
        var startAngle = round(this.startAngle % 360);
        var endAngle = round((startAngle + this.angle) % 360);
        var innerRadius = this.innerRadius;
        var allAngles = [ 0, 90, 180, 270, startAngle, endAngle ].sort(numericComparer);
        var startAngleIndex = allAngles.indexOf(startAngle);
        var endAngleIndex = allAngles.indexOf(endAngle);
        var angles;

        if (startAngle === endAngle) {
            angles = allAngles;
        } else {
            if (startAngleIndex < endAngleIndex) {
                angles = allAngles.slice(startAngleIndex, endAngleIndex + 1);
            } else {
                angles = [].concat(
                    allAngles.slice(0, endAngleIndex + 1),
                    allAngles.slice(startAngleIndex, allAngles.length)
                );
            }
        }

        for (var i = 0; i < angles.length; i++) {
            var point = this$1.point(angles[i]);
            box.wrapPoint(point);
            box.wrapPoint(point, innerRadius);
        }

        if (!innerRadius) {
            box.wrapPoint(this.center);
        }

        return box;
    };

    Ring.prototype.expand = function expand (value) {
        this.radius += value;
        return this;
    };

    return Ring;
}(_progress_kendoDrawing.Class));

function numericComparer(a, b) {
    return a - b;
}

var Sector = (function (Ring$$1) {
    function Sector(center, radius, startAngle, angle) {
        Ring$$1.call(this, center, 0, radius, startAngle, angle);
    }

    if ( Ring$$1 ) Sector.__proto__ = Ring$$1;
    Sector.prototype = Object.create( Ring$$1 && Ring$$1.prototype );
    Sector.prototype.constructor = Sector;

    Sector.prototype.expand = function expand (value) {
        return Ring$$1.prototype.expand.call(this, value);
    };

    Sector.prototype.clone = function clone () {
        return new Sector(this.center, this.radius, this.startAngle, this.angle);
    };

    Sector.prototype.setRadius = function setRadius (newRadius) {
        this.radius = newRadius;

        return this;
    };

    return Sector;
}(Ring));

var DIRECTION_ANGLE = 0.001; //any value that will make the endAngle bigger than the start angle will work here.

var ShapeBuilder = (function (Class$$1) {
    function ShapeBuilder () {
        Class$$1.apply(this, arguments);
    }

    if ( Class$$1 ) ShapeBuilder.__proto__ = Class$$1;
    ShapeBuilder.prototype = Object.create( Class$$1 && Class$$1.prototype );
    ShapeBuilder.prototype.constructor = ShapeBuilder;

    ShapeBuilder.prototype.createRing = function createRing (sector, options) {
        var startAngle = sector.startAngle + 180;
        var endAngle = sector.angle + startAngle;

        //required in order to avoid reversing the arc direction in cases like 0.000000000000001 + 100 === 100
        if (sector.angle > 0 && startAngle === endAngle) {
            endAngle += DIRECTION_ANGLE;
        }

        var center = new _progress_kendoDrawing.geometry.Point(sector.center.x, sector.center.y);
        var radius = Math.max(sector.radius, 0);
        var innerRadius = Math.max(sector.innerRadius, 0);
        var arc = new _progress_kendoDrawing.geometry.Arc(center, {
            startAngle: startAngle,
            endAngle: endAngle,
            radiusX: radius,
            radiusY: radius
        });
        var path = _progress_kendoDrawing.drawing.Path.fromArc(arc, options).close();

        if (innerRadius) {
            arc.radiusX = arc.radiusY = innerRadius;
            var innerEnd = arc.pointAt(endAngle);
            path.lineTo(innerEnd.x, innerEnd.y);
            path.arc(endAngle, startAngle, innerRadius, innerRadius, true);
        } else {
            path.lineTo(center.x, center.y);
        }

        return path;
    };

    return ShapeBuilder;
}(_progress_kendoDrawing.Class));

ShapeBuilder.current = new ShapeBuilder();

var ChartElement = (function (Class$$1) {
    function ChartElement(options) {
        Class$$1.call(this);

        this.children = [];

        this.options = deepExtend({}, this.options, this.initUserOptions(options));
    }

    if ( Class$$1 ) ChartElement.__proto__ = Class$$1;
    ChartElement.prototype = Object.create( Class$$1 && Class$$1.prototype );
    ChartElement.prototype.constructor = ChartElement;

    ChartElement.prototype.initUserOptions = function initUserOptions (options) {
        return options;
    };

    ChartElement.prototype.reflow = function reflow (targetBox) {
        var children = this.children;
        var box;

        for (var i = 0; i < children.length; i++) {
            var currentChild = children[i];
            currentChild.reflow(targetBox);

            box = box ? box.wrap(currentChild.box) : currentChild.box.clone();
        }

        this.box = box || targetBox;
    };

    ChartElement.prototype.destroy = function destroy () {
        var children = this.children;

        if (this.animation) {
            this.animation.destroy();
        }

        for (var i = 0; i < children.length; i++) {
            children[i].destroy();
        }
    };

    ChartElement.prototype.getRoot = function getRoot () {
        var parent = this.parent;

        return parent ? parent.getRoot() : null;
    };

    ChartElement.prototype.getSender = function getSender () {
        var service = this.getService();
        if (service) {
            return service.sender;
        }
    };

    ChartElement.prototype.getService = function getService () {
        var element = this;
        while (element) {
            if (element.chartService) {
                return element.chartService;
            }
            element = element.parent;
        }
    };

    ChartElement.prototype.translateChildren = function translateChildren (dx, dy) {
        var children = this.children;
        var childrenCount = children.length;

        for (var i = 0; i < childrenCount; i++) {
            children[i].box.translate(dx, dy);
        }
    };

    ChartElement.prototype.append = function append () {
        var arguments$1 = arguments;
        var this$1 = this;

        for (var i = 0; i < arguments.length; i++) {
            var item = arguments$1[i];
            this$1.children.push(item);
            item.parent = this$1;
        }
    };

    ChartElement.prototype.renderVisual = function renderVisual () {
        if (this.options.visible === false) {
            return;
        }

        this.createVisual();

        this.addVisual();

        this.renderChildren();

        this.createAnimation();
        this.renderComplete();
    };

    ChartElement.prototype.addVisual = function addVisual () {
        if (this.visual) {
            this.visual.chartElement = this;

            if (this.parent) {
                this.parent.appendVisual(this.visual);
            }
        }
    };

    ChartElement.prototype.renderChildren = function renderChildren () {
        var children = this.children;
        var length = children.length;
        for (var i = 0; i < length; i++) {
            children[i].renderVisual();
        }
    };

    ChartElement.prototype.createVisual = function createVisual () {
        this.visual = new _progress_kendoDrawing.drawing.Group({
            zIndex: this.options.zIndex,
            visible: valueOrDefault(this.options.visible, true)
        });
    };

    ChartElement.prototype.createAnimation = function createAnimation () {
        if (this.visual && this.options.animation) {
            this.animation = _progress_kendoDrawing.drawing.Animation.create(
                this.visual, this.options.animation
            );
        }
    };

    ChartElement.prototype.appendVisual = function appendVisual (childVisual) {
        if (!childVisual.chartElement) {
            childVisual.chartElement = this;
        }

        if (childVisual.options.noclip) {
            this.clipRoot().visual.append(childVisual);
        } else if (defined(childVisual.options.zIndex)) {
            this.stackRoot().stackVisual(childVisual);
        } else if (this.isStackRoot) {
            this.stackVisual(childVisual);
        } else if (this.visual) {
            this.visual.append(childVisual);
        } else {
            // Allow chart elements without visuals to
            // pass through child visuals
            this.parent.appendVisual(childVisual);
        }
    };

    ChartElement.prototype.clipRoot = function clipRoot () {
        if (this.parent) {
            return this.parent.clipRoot();
        }

        return this;
    };

    ChartElement.prototype.stackRoot = function stackRoot () {
        if (this.parent) {
            return this.parent.stackRoot();
        }

        return this;
    };

    ChartElement.prototype.stackVisual = function stackVisual (childVisual) {
        var zIndex = childVisual.options.zIndex || 0;
        var visuals = this.visual.children;
        var length = visuals.length;
        var pos;

        for (pos = 0; pos < length; pos++) {
            var sibling = visuals[pos];
            var here = valueOrDefault(sibling.options.zIndex, 0);
            if (here > zIndex) {
                break;
            }
        }

        this.visual.insert(pos, childVisual);
    };

    ChartElement.prototype.traverse = function traverse (callback) {
        var children = this.children;
        var length = children.length;

        for (var i = 0; i < length; i++) {
            var child = children[i];

            callback(child);
            if (child.traverse) {
                child.traverse(callback);
            }
        }
    };

    ChartElement.prototype.closest = function closest (match) {
        var element = this;
        var matched = false;

        while (element && !matched) {
            matched = match(element);

            if (!matched) {
                element = element.parent;
            }
        }

        if (matched) {
            return element;
        }
    };

    ChartElement.prototype.renderComplete = function renderComplete () {};

    ChartElement.prototype.hasHighlight = function hasHighlight () {
        var options = (this.options || {}).highlight;
        return !(!this.createHighlight || (options && options.visible === false));
    };

    ChartElement.prototype.toggleHighlight = function toggleHighlight (show, opacity) {
        var this$1 = this;

        var options = (this.options || {}).highlight || {};
        var customVisual = options.visual;
        var highlight = this._highlight;

        if (!highlight) {
            var highlightOptions = {
                fill: {
                    color: WHITE,
                    opacity: opacity || 0.2
                },
                stroke: {
                    color: WHITE,
                    width: 1,
                    opacity: opacity || 0.2
                }
            };

            if (customVisual) {
                highlight = this._highlight = customVisual(
                    Object.assign(this.highlightVisualArgs(), {
                        createVisual: function () { return this$1.createHighlight(highlightOptions); },
                        sender: this.getSender(),
                        series: this.series,
                        dataItem: this.dataItem,
                        category: this.category,
                        value: this.value,
                        percentage: this.percentage,
                        runningTotal: this.runningTotal,
                        total: this.total
                    }
                ));

                if (!highlight) {
                    return;
                }
            } else {
                highlight = this._highlight = this.createHighlight(highlightOptions);
            }

            if (!defined(highlight.options.zIndex)) {
                highlight.options.zIndex = valueOrDefault(options.zIndex, this.options.zIndex);
            }

            this.appendVisual(highlight);
        }

        highlight.visible(show);
    };

    ChartElement.prototype.createGradientOverlay = function createGradientOverlay (element, options, gradientOptions) {
        var overlay = new _progress_kendoDrawing.drawing.Path(Object.assign({
            stroke: {
                color: "none"
            },
            fill: this.createGradient(gradientOptions),
            closed: element.options.closed
        }, options));

        overlay.segments.elements(element.segments.elements());

        return overlay;
    };

    ChartElement.prototype.createGradient = function createGradient (options) {
        if (this.parent) {
            return this.parent.createGradient(options);
        }
    };

    ChartElement.prototype.supportsPointInactiveOpacity = function supportsPointInactiveOpacity () {
        return true;
    };

    return ChartElement;
}(_progress_kendoDrawing.Class));

ChartElement.prototype.options = { };

var BoxElement = (function (ChartElement$$1) {
    function BoxElement(options) {
        ChartElement$$1.call(this, options);

        this.options.margin = getSpacing(this.options.margin);
        this.options.padding = getSpacing(this.options.padding);
    }

    if ( ChartElement$$1 ) BoxElement.__proto__ = ChartElement$$1;
    BoxElement.prototype = Object.create( ChartElement$$1 && ChartElement$$1.prototype );
    BoxElement.prototype.constructor = BoxElement;

    BoxElement.prototype.reflow = function reflow (targetBox) {
        var this$1 = this;

        var options = this.options;
        var width = options.width;
        var height = options.height;
        var shrinkToFit = options.shrinkToFit;
        var hasSetSize = width && height;
        var margin = options.margin;
        var padding = options.padding;
        var borderWidth = options.border.width;
        var box;

        var reflowPaddingBox = function () {
            this$1.align(targetBox, X, options.align);
            this$1.align(targetBox, Y, options.vAlign);
            this$1.paddingBox = box.clone().unpad(margin).unpad(borderWidth);
        };

        var contentBox = targetBox.clone();
        if (hasSetSize) {
            contentBox.x2 = contentBox.x1 + width;
            contentBox.y2 = contentBox.y1 + height;
        }

        if (shrinkToFit) {
            contentBox.unpad(margin).unpad(borderWidth).unpad(padding);
        }

        ChartElement$$1.prototype.reflow.call(this, contentBox);

        if (hasSetSize) {
            box = this.box = new Box(0, 0, width, height);
        } else {
            box = this.box;
        }

        if (shrinkToFit && hasSetSize) {
            reflowPaddingBox();
            contentBox = this.contentBox = this.paddingBox.clone().unpad(padding);
        } else {
            contentBox = this.contentBox = box.clone();
            box.pad(padding).pad(borderWidth).pad(margin);
            reflowPaddingBox();
        }

        this.translateChildren(
            box.x1 - contentBox.x1 + margin.left + borderWidth + padding.left,
            box.y1 - contentBox.y1 + margin.top + borderWidth + padding.top
        );

        var children = this.children;
        for (var i = 0; i < children.length; i++) {
            var item = children[i];
            item.reflow(item.box);
        }
    };

    BoxElement.prototype.align = function align (targetBox, axis, alignment) {
        this.box.align(targetBox, axis, alignment);
    };

    BoxElement.prototype.hasBox = function hasBox () {
        var options = this.options;
        return options.border.width || options.background;
    };

    BoxElement.prototype.createVisual = function createVisual () {
        ChartElement$$1.prototype.createVisual.call(this);

        var options = this.options;
        if (options.visible && this.hasBox()) {
            this.visual.append(_progress_kendoDrawing.drawing.Path.fromRect(
                this.paddingBox.toRect(),
                this.visualStyle()
            ));
        }
    };

    BoxElement.prototype.visualStyle = function visualStyle () {
        var options = this.options;
        var border = options.border || {};

        return {
            stroke: {
                width: border.width,
                color: border.color,
                opacity: valueOrDefault(border.opacity, options.opacity),
                dashType: border.dashType
            },
            fill: {
                color: options.background,
                opacity: options.opacity
            },
            cursor: options.cursor
        };
    };

    return BoxElement;
}(ChartElement));

setDefaultOptions(BoxElement, {
    align: LEFT,
    vAlign: TOP,
    margin: {},
    padding: {},
    border: {
        color: BLACK,
        width: 0
    },
    background: "",
    shrinkToFit: false,
    width: 0,
    height: 0,
    visible: true
});

var ShapeElement = (function (BoxElement$$1) {
    function ShapeElement(options, pointData) {
        BoxElement$$1.call(this, options);

        this.pointData = pointData;
    }

    if ( BoxElement$$1 ) ShapeElement.__proto__ = BoxElement$$1;
    ShapeElement.prototype = Object.create( BoxElement$$1 && BoxElement$$1.prototype );
    ShapeElement.prototype.constructor = ShapeElement;

    ShapeElement.prototype.getElement = function getElement () {
        var ref = this;
        var options = ref.options;
        var box = ref.paddingBox;
        var type = options.type;
        var rotation = options.rotation;
        var center = box.center();
        var halfWidth = box.width() / 2;

        if (!options.visible || !this.hasBox()) {
            return null;
        }

        var style = this.visualStyle();
        var element;

        if (type === CIRCLE) {
            element = new _progress_kendoDrawing.drawing.Circle(
                new _progress_kendoDrawing.geometry.Circle([
                    round(box.x1 + halfWidth, COORD_PRECISION),
                    round(box.y1 + box.height() / 2, COORD_PRECISION)
                ], halfWidth),
                style
            );
        } else if (type === TRIANGLE) {
            element = _progress_kendoDrawing.drawing.Path.fromPoints([
                [ box.x1 + halfWidth, box.y1 ],
                [ box.x1, box.y2 ],
                [ box.x2, box.y2 ]
            ], style).close();
        } else if (type === CROSS) {
            element = new _progress_kendoDrawing.drawing.MultiPath(style);

            element.moveTo(box.x1, box.y1).lineTo(box.x2, box.y2);
            element.moveTo(box.x1, box.y2).lineTo(box.x2, box.y1);
        } else {
            element = _progress_kendoDrawing.drawing.Path.fromRect(box.toRect(), style);
        }

        if (rotation) {
            element.transform(_progress_kendoDrawing.geometry.transform()
                .rotate(-rotation, [ center.x, center.y ])
            );
        }

        element.options.zIndex = options.zIndex;
        return element;
    };

    ShapeElement.prototype.createElement = function createElement () {
        var this$1 = this;

        var customVisual = this.options.visual;
        var pointData = this.pointData || {};
        var visual;

        if (customVisual) {
            visual = customVisual({
                value: pointData.value,
                dataItem: pointData.dataItem,
                sender: this.getSender(),
                series: pointData.series,
                category: pointData.category,
                rect: this.paddingBox.toRect(),
                options: this.visualOptions(),
                createVisual: function () { return this$1.getElement(); }
            });
        } else {
            visual = this.getElement();
        }

        return visual;
    };

    ShapeElement.prototype.visualOptions = function visualOptions () {
        var options = this.options;
        return {
            background: options.background,
            border: options.border,
            margin: options.margin,
            padding: options.padding,
            type: options.type,
            size: options.width,
            visible: options.visible
        };
    };

    ShapeElement.prototype.createVisual = function createVisual () {
        this.visual = this.createElement();
    };

    return ShapeElement;
}(BoxElement));

setDefaultOptions(ShapeElement, {
    type: CIRCLE,
    align: CENTER,
    vAlign: CENTER
});

var LINEAR = "linear";
var RADIAL = "radial";

var GRADIENTS = {
    glass: {
        type: LINEAR,
        rotation: 0,
        stops: [ {
            offset: 0,
            color: WHITE,
            opacity: 0
        }, {
            offset: 0.25,
            color: WHITE,
            opacity: 0.3
        }, {
            offset: 1,
            color: WHITE,
            opacity: 0
        } ]
    },
    sharpBevel: {
        type: RADIAL,
        stops: [ {
            offset: 0,
            color: WHITE,
            opacity: 0.55
        }, {
            offset: 0.65,
            color: WHITE,
            opacity: 0
        }, {
            offset: 0.95,
            color: WHITE,
            opacity: 0.25
        } ]
    },
    roundedBevel: {
        type: RADIAL,
        stops: [ {
            offset: 0.33,
            color: WHITE,
            opacity: 0.06
        }, {
            offset: 0.83,
            color: WHITE,
            opacity: 0.2
        }, {
            offset: 0.95,
            color: WHITE,
            opacity: 0
        } ]
    },
    roundedGlass: {
        type: RADIAL,
        supportVML: false,
        stops: [ {
            offset: 0,
            color: WHITE,
            opacity: 0
        }, {
            offset: 0.5,
            color: WHITE,
            opacity: 0.3
        }, {
            offset: 0.99,
            color: WHITE,
            opacity: 0
        } ]
    },
    sharpGlass: {
        type: RADIAL,
        supportVML: false,
        stops: [ {
            offset: 0,
            color: WHITE,
            opacity: 0.2
        }, {
            offset: 0.15,
            color: WHITE,
            opacity: 0.15
        }, {
            offset: 0.17,
            color: WHITE,
            opacity: 0.35
        }, {
            offset: 0.85,
            color: WHITE,
            opacity: 0.05
        }, {
            offset: 0.87,
            color: WHITE,
            opacity: 0.15
        }, {
            offset: 0.99,
            color: WHITE,
            opacity: 0
        } ]
    },
    bubbleShadow: {
        type: RADIAL,
        center: [ 0.5, 0.5 ],
        radius: 0.5
    }
};

function boxDiff(r, s) {
    if (r.x1 === s.x1 && r.y1 === s.y1 && r.x2 === s.x2 && r.y2 === s.y2) {
        return s;
    }

    var a = Math.min(r.x1, s.x1);
    var b = Math.max(r.x1, s.x1);
    var c = Math.min(r.x2, s.x2);
    var d = Math.max(r.x2, s.x2);
    var e = Math.min(r.y1, s.y1);
    var f = Math.max(r.y1, s.y1);
    var g = Math.min(r.y2, s.y2);
    var h = Math.max(r.y2, s.y2);
    var boxes = [];

    // X = intersection, 0-7 = possible difference areas
    // h +-+-+-+
    // . |5|6|7|
    // g +-+-+-+
    // . |3|X|4|
    // f +-+-+-+
    // . |0|1|2|
    // e +-+-+-+
    // . a b c d

    // we'll always have rectangles 1, 3, 4 and 6
    boxes[0] = new Box(b, e, c, f);
    boxes[1] = new Box(a, f, b, g);
    boxes[2] = new Box(c, f, d, g);
    boxes[3] = new Box(b, g, c, h);

    // decide which corners
    if (r.x1 === a && r.y1 === e || s.x1 === a && s.y1 === e) { // corners 0 and 7
        boxes[4] = new Box(a, e, b, f);
        boxes[5] = new Box(c, g, d, h);
    } else { // corners 2 and 5
        boxes[4] = new Box(c, e, d, f);
        boxes[5] = new Box(a, g, b, h);
    }

    return grep(boxes, function(box) {
        return box.height() > 0 && box.width() > 0;
    })[0];
}

var RootElement = (function (ChartElement$$1) {
    function RootElement(options) {
        ChartElement$$1.call(this, options);

        var rootOptions = this.options;
        rootOptions.width = parseInt(rootOptions.width, 10);
        rootOptions.height = parseInt(rootOptions.height, 10);

        this.gradients = {};
    }

    if ( ChartElement$$1 ) RootElement.__proto__ = ChartElement$$1;
    RootElement.prototype = Object.create( ChartElement$$1 && ChartElement$$1.prototype );
    RootElement.prototype.constructor = RootElement;

    RootElement.prototype.reflow = function reflow () {
        var ref = this;
        var options = ref.options;
        var children = ref.children;
        var currentBox = new Box(0, 0, options.width, options.height);

        this.box = currentBox.unpad(options.margin);

        for (var i = 0; i < children.length; i++) {
            children[i].reflow(currentBox);
            currentBox = boxDiff(currentBox, children[i].box) || new Box();
        }
    };

    RootElement.prototype.createVisual = function createVisual () {
        this.visual = new _progress_kendoDrawing.drawing.Group();
        this.createBackground();
    };

    RootElement.prototype.createBackground = function createBackground () {
        var options = this.options;
        var border = options.border || {};
        var box = this.box.clone().pad(options.margin).unpad(border.width);

        var background = _progress_kendoDrawing.drawing.Path.fromRect(box.toRect(), {
            stroke: {
                color: border.width ? border.color : "",
                width: border.width,
                dashType: border.dashType
            },
            fill: {
                color: options.background,
                opacity: options.opacity
            },
            zIndex: -10
        });

        this.visual.append(background);
    };

    RootElement.prototype.getRoot = function getRoot () {
        return this;
    };

    RootElement.prototype.createGradient = function createGradient (options) {
        var gradients = this.gradients;
        var hashCode = objectKey(options);
        var gradient = GRADIENTS[options.gradient];
        var drawingGradient;

        if (gradients[hashCode]) {
            drawingGradient = gradients[hashCode];
        } else {
            var gradientOptions = Object.assign({}, gradient, options);
            if (gradient.type === "linear") {
                drawingGradient = new _progress_kendoDrawing.drawing.LinearGradient(gradientOptions);
            } else {
                if (options.innerRadius) {
                    gradientOptions.stops = innerRadialStops(gradientOptions);
                }
                drawingGradient = new _progress_kendoDrawing.drawing.RadialGradient(gradientOptions);
                drawingGradient.supportVML = gradient.supportVML !== false;
            }
            gradients[hashCode] = drawingGradient;
        }

        return drawingGradient;
    };

    RootElement.prototype.cleanGradients = function cleanGradients () {
        var gradients = this.gradients;
        for (var hashCode in gradients) {
            gradients[hashCode]._observers = [];//add clear observers method in drawing ObserversMixin
        }
    };

    RootElement.prototype.size = function size () {
        var options = this.options;
        return new Box(0, 0, options.width, options.height);
    };

    return RootElement;
}(ChartElement));

setDefaultOptions(RootElement, {
    width: DEFAULT_WIDTH,
    height: DEFAULT_HEIGHT,
    background: WHITE,
    border: {
        color: BLACK,
        width: 0
    },
    margin: getSpacing(5),
    zIndex: -2
});

function innerRadialStops(options) {
    var stops = options.stops;
    var usedSpace = ((options.innerRadius / options.radius) * 100);
    var length = stops.length;
    var currentStops = [];

    for (var i = 0; i < length; i++) {
        var currentStop = Object.assign({}, stops[i]);
        currentStop.offset = (currentStop.offset * (100 - usedSpace) + usedSpace) / 100;
        currentStops.push(currentStop);
    }

    return currentStops;
}

var FloatElement = (function (ChartElement$$1) {
    function FloatElement(options) {
        ChartElement$$1.call(this, options);
        this._initDirection();
    }

    if ( ChartElement$$1 ) FloatElement.__proto__ = ChartElement$$1;
    FloatElement.prototype = Object.create( ChartElement$$1 && ChartElement$$1.prototype );
    FloatElement.prototype.constructor = FloatElement;

    FloatElement.prototype._initDirection = function _initDirection () {
        var options = this.options;
        if (options.vertical) {
            this.groupAxis = X;
            this.elementAxis = Y;
            this.groupSizeField = WIDTH;
            this.elementSizeField = HEIGHT;
            this.groupSpacing = options.spacing;
            this.elementSpacing = options.vSpacing;
        } else {
            this.groupAxis = Y;
            this.elementAxis = X;
            this.groupSizeField = HEIGHT;
            this.elementSizeField = WIDTH;
            this.groupSpacing = options.vSpacing;
            this.elementSpacing = options.spacing;
        }
    };

    FloatElement.prototype.reflow = function reflow (targetBox) {
        this.box = targetBox.clone();
        this.reflowChildren();
    };

    FloatElement.prototype.reflowChildren = function reflowChildren () {
        var this$1 = this;

        var ref = this;
        var box = ref.box;
        var elementAxis = ref.elementAxis;
        var groupAxis = ref.groupAxis;
        var elementSizeField = ref.elementSizeField;
        var groupSizeField = ref.groupSizeField;
        var ref$1 = this.groupOptions();
        var groups = ref$1.groups;
        var groupsSize = ref$1.groupsSize;
        var maxGroupElementsSize = ref$1.maxGroupElementsSize;
        var groupsCount = groups.length;
        var groupsStart = box[groupAxis + 1] + this.alignStart(groupsSize, box[groupSizeField]());

        if (groupsCount) {
            var groupStart = groupsStart;

            for (var groupIdx = 0; groupIdx < groupsCount; groupIdx++) {
                var group = groups[groupIdx];
                var groupElements = group.groupElements;
                var elementStart = box[elementAxis + 1];
                var groupElementsCount = groupElements.length;

                for (var idx = 0; idx < groupElementsCount; idx++) {
                    var element = groupElements[idx];
                    var elementSize$$1 = this$1.elementSize(element);
                    var groupElementStart = groupStart + this$1.alignStart(elementSize$$1[groupSizeField], group.groupSize);

                    var elementBox = new Box();
                    elementBox[groupAxis + 1] = groupElementStart;
                    elementBox[groupAxis + 2] = groupElementStart + elementSize$$1[groupSizeField];
                    elementBox[elementAxis + 1] = elementStart;
                    elementBox[elementAxis + 2] = elementStart + elementSize$$1[elementSizeField];

                    element.reflow(elementBox);

                    elementStart += elementSize$$1[elementSizeField] + this$1.elementSpacing;
                }
                groupStart += group.groupSize + this$1.groupSpacing;
            }
            box[groupAxis + 1] = groupsStart;
            box[groupAxis + 2] = groupsStart + groupsSize;
            box[elementAxis + 2] = box[elementAxis + 1] + maxGroupElementsSize;
        }
    };

    FloatElement.prototype.alignStart = function alignStart (size, maxSize) {
        var start = 0;
        var align = this.options.align;
        if (align === RIGHT || align === BOTTOM) {
            start = maxSize - size;
        } else if (align === CENTER) {
            start = (maxSize - size) / 2;
        }
        return start;
    };

    FloatElement.prototype.groupOptions = function groupOptions () {
        var this$1 = this;

        var ref = this;
        var box = ref.box;
        var children = ref.children;
        var elementSizeField = ref.elementSizeField;
        var groupSizeField = ref.groupSizeField;
        var elementSpacing = ref.elementSpacing;
        var groupSpacing = ref.groupSpacing;
        var maxSize = round(box[elementSizeField]());
        var childrenCount = children.length;
        var groups = [];

        var groupSize = 0;
        var groupElementsSize = 0;
        var groupsSize = 0;
        var maxGroupElementsSize = 0;
        var groupElements = [];

        for (var idx = 0; idx < childrenCount; idx++) {
            var element = children[idx];
            if (!element.box) {
                element.reflow(box);
            }

            var elementSize$$1 = this$1.elementSize(element);
            if (this$1.options.wrap && round(groupElementsSize + elementSpacing + elementSize$$1[elementSizeField]) > maxSize) {
                groups.push({
                    groupElements: groupElements,
                    groupSize: groupSize,
                    groupElementsSize: groupElementsSize
                });
                maxGroupElementsSize = Math.max(maxGroupElementsSize, groupElementsSize);
                groupsSize += groupSpacing + groupSize;
                groupSize = 0;
                groupElementsSize = 0;
                groupElements = [];
            }
            groupSize = Math.max(groupSize, elementSize$$1[groupSizeField]);
            if (groupElementsSize > 0) {
                groupElementsSize += elementSpacing;
            }
            groupElementsSize += elementSize$$1[elementSizeField];
            groupElements.push(element);
        }

        groups.push({
            groupElements: groupElements,
            groupSize: groupSize,
            groupElementsSize: groupElementsSize
        });
        maxGroupElementsSize = Math.max(maxGroupElementsSize, groupElementsSize);
        groupsSize += groupSize;

        return {
            groups: groups,
            groupsSize: groupsSize,
            maxGroupElementsSize: maxGroupElementsSize
        };
    };

    FloatElement.prototype.elementSize = function elementSize (element) {
        return {
            width: element.box.width(),
            height: element.box.height()
        };
    };

    FloatElement.prototype.createVisual = function createVisual () {};

    return FloatElement;
}(ChartElement));

setDefaultOptions(FloatElement, {
    vertical: true,
    wrap: true,
    vSpacing: 0,
    spacing: 0
});

var DrawingText = _progress_kendoDrawing.drawing.Text;

var Text = (function (ChartElement$$1) {
    function Text(content, options) {
        ChartElement$$1.call(this, options);

        this.content = content;

        // Calculate size
        this.reflow(new Box());
    }

    if ( ChartElement$$1 ) Text.__proto__ = ChartElement$$1;
    Text.prototype = Object.create( ChartElement$$1 && ChartElement$$1.prototype );
    Text.prototype.constructor = Text;

    Text.prototype.reflow = function reflow (targetBox) {
        var options = this.options;
        var size = options.size = _progress_kendoDrawing.drawing.util.measureText(this.content, { font: options.font });

        this.baseline = size.baseline;

        this.box = new Box(targetBox.x1, targetBox.y1,
                targetBox.x1 + size.width, targetBox.y1 + size.height);
    };

    Text.prototype.createVisual = function createVisual () {
        var ref = this.options;
        var font = ref.font;
        var color = ref.color;
        var opacity = ref.opacity;
        var cursor = ref.cursor;

        this.visual = new DrawingText(this.content, this.box.toRect().topLeft(), {
            font: font,
            fill: { color: color, opacity: opacity },
            cursor: cursor
        });
    };

    return Text;
}(ChartElement));

setDefaultOptions(Text, {
    font: DEFAULT_FONT,
    color: BLACK
});

function rectToBox(rect) {
    var origin = rect.origin;
    var bottomRight = rect.bottomRight();

    return new Box(origin.x, origin.y, bottomRight.x, bottomRight.y);
}

var ROWS_SPLIT_REGEX = /\n/m;

var TextBox = (function (BoxElement$$1) {
    function TextBox(content, options, data) {
        BoxElement$$1.call(this, options);
        this.content = content;
        this.data = data;

        this._initContainer();
        if (this.options._autoReflow !== false) {
            this.reflow(new Box());
        }
    }

    if ( BoxElement$$1 ) TextBox.__proto__ = BoxElement$$1;
    TextBox.prototype = Object.create( BoxElement$$1 && BoxElement$$1.prototype );
    TextBox.prototype.constructor = TextBox;

    TextBox.prototype._initContainer = function _initContainer () {
        var options = this.options;
        var rows = String(this.content).split(ROWS_SPLIT_REGEX);
        var floatElement = new FloatElement({ vertical: true, align: options.align, wrap: false });
        var textOptions = deepExtend({ }, options, { opacity: 1, animation: null });

        this.container = floatElement;
        this.append(floatElement);

        for (var rowIdx = 0; rowIdx < rows.length; rowIdx++) {
            var text = new Text(rows[rowIdx].trim(), textOptions);
            floatElement.append(text);
        }
    };

    TextBox.prototype.reflow = function reflow (targetBox) {
        var options = this.options;
        var visualFn = options.visual;
        this.container.options.align = options.align;

        if (visualFn && !this._boxReflow) {
            var visualBox = targetBox;
            if (!visualBox.hasSize()) {
                this._boxReflow = true;
                this.reflow(visualBox);
                this._boxReflow = false;
                visualBox = this.box;
            }
            var visual = this.visual = visualFn(this.visualContext(visualBox));

            if (visual) {
                visualBox = rectToBox(visual.clippedBBox() || new _progress_kendoDrawing.geometry.Rect());

                visual.options.zIndex = options.zIndex;
            }

            this.box = this.contentBox = this.paddingBox = visualBox;
        } else {
            BoxElement$$1.prototype.reflow.call(this, targetBox);

            if (options.rotation) {
                var margin = getSpacing(options.margin);
                var box = this.box.unpad(margin);

                this.targetBox = targetBox;
                this.normalBox = box.clone();

                box = this.rotate();
                box.translate(margin.left - margin.right, margin.top - margin.bottom);

                this.rotatedBox = box.clone();

                box.pad(margin);
            }
        }
    };

    TextBox.prototype.createVisual = function createVisual () {
        var options = this.options;

        this.visual = new _progress_kendoDrawing.drawing.Group({
            transform: this.rotationTransform(),
            zIndex: options.zIndex,
            noclip: options.noclip
        });

        if (this.hasBox()) {
            var box = _progress_kendoDrawing.drawing.Path.fromRect(this.paddingBox.toRect(), this.visualStyle());
            this.visual.append(box);
        }
    };

    TextBox.prototype.renderVisual = function renderVisual () {
        if (!this.options.visible) {
            return;
        }

        if (this.options.visual) {
            var visual = this.visual;
            if (visual && !defined(visual.options.noclip)) {
                visual.options.noclip = this.options.noclip;
            }
            this.addVisual();
            this.createAnimation();
        } else {
            BoxElement$$1.prototype.renderVisual.call(this);
        }
    };

    TextBox.prototype.visualContext = function visualContext (targetBox) {
        var this$1 = this;

        var context = {
            text: this.content,
            rect: targetBox.toRect(),
            sender: this.getSender(),
            options: this.options,
            createVisual: function () {
                this$1._boxReflow = true;
                this$1.reflow(targetBox);
                this$1._boxReflow = false;
                return this$1.getDefaultVisual();
            }
        };
        if (this.data) {
            Object.assign(context, this.data);
        }

        return context;
    };

    TextBox.prototype.getDefaultVisual = function getDefaultVisual () {
        this.createVisual();
        this.renderChildren();
        var visual = this.visual;
        delete this.visual;
        return visual;
    };

    TextBox.prototype.rotate = function rotate () {
        var options = this.options;
        this.box.rotate(options.rotation);
        this.align(this.targetBox, X, options.align);
        this.align(this.targetBox, Y, options.vAlign);
        return this.box;
    };

    TextBox.prototype.rotationTransform = function rotationTransform () {
        var rotation = this.options.rotation;
        if (!rotation) {
            return null;
        }

        var ref = this.normalBox.center();
        var cx = ref.x;
        var cy = ref.y;
        var boxCenter = this.rotatedBox.center();

        return _progress_kendoDrawing.geometry.transform()
                   .translate(boxCenter.x - cx, boxCenter.y - cy)
                   .rotate(rotation, [ cx, cy ]);
    };

    return TextBox;
}(BoxElement));

var Title = (function (ChartElement$$1) {
    function Title(options) {
        ChartElement$$1.call(this, options);

        this.append(
            new TextBox(this.options.text, Object.assign({}, this.options, {
                vAlign: this.options.position
            }))
        );
    }

    if ( ChartElement$$1 ) Title.__proto__ = ChartElement$$1;
    Title.prototype = Object.create( ChartElement$$1 && ChartElement$$1.prototype );
    Title.prototype.constructor = Title;

    Title.prototype.reflow = function reflow (targetBox) {
        ChartElement$$1.prototype.reflow.call(this, targetBox);
        this.box.snapTo(targetBox, X);
    };

    Title.buildTitle = function buildTitle (options, parent, defaultOptions) {
        var titleOptions = options;

        if (typeof options === "string") {
            titleOptions = { text: options };
        }

        titleOptions = Object.assign({ visible: true }, defaultOptions, titleOptions);

        var title;
        if (titleOptions && titleOptions.visible && titleOptions.text) {
            title = new Title(titleOptions);
            parent.append(title);
        }

        return title;
    };

    return Title;
}(ChartElement));

setDefaultOptions(Title, {
    color: BLACK,
    position: TOP,
    align: CENTER,
    margin: getSpacing(5),
    padding: getSpacing(5)
});

var AxisLabel = (function (TextBox$$1) {
    function AxisLabel(value, text, index, dataItem, options) {
        TextBox$$1.call(this, text, options);

        this.text = text;
        this.value = value;
        this.index = index;
        this.dataItem = dataItem;
        this.reflow(new Box());
    }

    if ( TextBox$$1 ) AxisLabel.__proto__ = TextBox$$1;
    AxisLabel.prototype = Object.create( TextBox$$1 && TextBox$$1.prototype );
    AxisLabel.prototype.constructor = AxisLabel;

    AxisLabel.prototype.visualContext = function visualContext (targetBox) {
        var context = TextBox$$1.prototype.visualContext.call(this, targetBox);

        context.value = this.value;
        context.dataItem = this.dataItem;
        context.format = this.options.format;
        context.culture = this.options.culture;

        return context;
    };

    AxisLabel.prototype.click = function click (widget, e) {

        widget.trigger(AXIS_LABEL_CLICK, {
            element: eventElement(e),
            value: this.value,
            text: this.text,
            index: this.index,
            dataItem: this.dataItem,
            axis: this.parent.options
        });
    };

    AxisLabel.prototype.rotate = function rotate () {
        if (this.options.alignRotation !== CENTER) {
            var box = this.normalBox.toRect();
            var transform = this.rotationTransform();

            this.box = rectToBox(box.bbox(transform.matrix()));
        } else {
            TextBox$$1.prototype.rotate.call(this);
        }

        return this.box;
    };

    AxisLabel.prototype.rotationTransform = function rotationTransform () {
        var options = this.options;
        var rotation = options.rotation;
        if (!rotation) {
            return null;
        }

        if (options.alignRotation === CENTER) {
            return TextBox$$1.prototype.rotationTransform.call(this);
        }

        var rotationMatrix = _progress_kendoDrawing.geometry.transform().rotate(rotation).matrix();
        var box = this.normalBox.toRect();
        var rect = this.targetBox.toRect();

        var rotationOrigin = options.rotationOrigin || TOP;
        var alignAxis = rotationOrigin === TOP || rotationOrigin === BOTTOM ? X : Y;
        var distanceAxis = rotationOrigin === TOP || rotationOrigin === BOTTOM ? Y : X;
        var axisAnchor = rotationOrigin === TOP || rotationOrigin === LEFT ? rect.origin : rect.bottomRight();

        var topLeft = box.topLeft().transformCopy(rotationMatrix);
        var topRight = box.topRight().transformCopy(rotationMatrix);
        var bottomRight = box.bottomRight().transformCopy(rotationMatrix);
        var bottomLeft = box.bottomLeft().transformCopy(rotationMatrix);
        var rotatedBox = _progress_kendoDrawing.geometry.Rect.fromPoints(topLeft, topRight, bottomRight, bottomLeft);

        var translate = {};
        translate[distanceAxis] = rect.origin[distanceAxis] - rotatedBox.origin[distanceAxis];

        var distanceLeft = Math.abs(topLeft[distanceAxis] + translate[distanceAxis] - axisAnchor[distanceAxis]);
        var distanceRight = Math.abs(topRight[distanceAxis] + translate[distanceAxis] - axisAnchor[distanceAxis]);

        var alignStart, alignEnd;

        if (round(distanceLeft, DEFAULT_PRECISION) === round(distanceRight, DEFAULT_PRECISION)) {
            alignStart = topLeft;
            alignEnd = topRight;
        } else if (distanceRight < distanceLeft) {
            alignStart = topRight;
            alignEnd = bottomRight;
        } else {
            alignStart = topLeft;
            alignEnd = bottomLeft;
        }

        var alignCenter = alignStart[alignAxis] + (alignEnd[alignAxis] - alignStart[alignAxis]) / 2;
        translate[alignAxis] = rect.center()[alignAxis] - alignCenter;

        return _progress_kendoDrawing.geometry.transform()
            .translate(translate.x, translate.y)
            .rotate(rotation);
    };

    return AxisLabel;
}(TextBox));

setDefaultOptions(AxisLabel, {
    _autoReflow: false
});

var DEFAULT_ICON_SIZE = 7;
var DEFAULT_LABEL_COLOR = "#fff";

var Note = (function (BoxElement$$1) {
    function Note(fields, options, chartService) {
        BoxElement$$1.call(this, options);

        this.fields = fields;
        this.chartService = chartService;

        this.render();
    }

    if ( BoxElement$$1 ) Note.__proto__ = BoxElement$$1;
    Note.prototype = Object.create( BoxElement$$1 && BoxElement$$1.prototype );
    Note.prototype.constructor = Note;

    Note.prototype.hide = function hide () {
        this.options.visible = false;
    };

    Note.prototype.show = function show () {
        this.options.visible = true;
    };

    Note.prototype.render = function render () {
        var this$1 = this;

        var options = this.options;

        if (options.visible) {
            var label = options.label;
            var icon = options.icon;
            var box = new Box();
            var childAlias = function () { return this$1; };
            var size = icon.size;
            var text = this.fields.text;
            var width, height;

            if (defined(label) && label.visible) {
                var noteTemplate = getTemplate(label);
                if (noteTemplate) {
                    text = noteTemplate(this.fields);
                } else if (label.format) {
                    text = this.chartService.format.auto(label.format, text);
                }

                if (!label.color) {
                    label.color = label.position === INSIDE ? DEFAULT_LABEL_COLOR : icon.background;
                }

                this.label = new TextBox(text, deepExtend({}, label));
                this.label.aliasFor = childAlias;

                if (label.position === INSIDE && !defined(size)) {
                    if (icon.type === CIRCLE) {
                        size = Math.max(this.label.box.width(), this.label.box.height());
                    } else {
                        width = this.label.box.width();
                        height = this.label.box.height();
                    }
                    box.wrap(this.label.box);
                }
            }

            icon.width = width || size || DEFAULT_ICON_SIZE;
            icon.height = height || size || DEFAULT_ICON_SIZE;

            var marker = new ShapeElement(deepExtend({}, icon));
            marker.aliasFor = childAlias;

            this.marker = marker;
            this.append(marker);

            if (this.label) {
                this.append(this.label);
            }

            marker.reflow(new Box());
            this.wrapperBox = box.wrap(marker.box);
        }
    };

    Note.prototype.reflow = function reflow (targetBox) {
        var ref = this;
        var options = ref.options;
        var label = ref.label;
        var marker = ref.marker;
        var wrapperBox = ref.wrapperBox;
        var center = targetBox.center();
        var length = options.line.length;
        var position = options.position;

        // TODO: Review
        if (options.visible) {
            var lineStart, box, contentBox;

            if (inArray(position, [ LEFT, RIGHT ])) {
                if (position === LEFT) {
                    contentBox = wrapperBox.alignTo(targetBox, position).translate(-length, targetBox.center().y - wrapperBox.center().y);

                    if (options.line.visible) {
                        lineStart = [ targetBox.x1, center.y ];
                        this.linePoints = [
                            lineStart,
                            [ contentBox.x2, center.y ]
                        ];
                        box = contentBox.clone().wrapPoint(lineStart);
                    }
                } else {
                    contentBox = wrapperBox.alignTo(targetBox, position).translate(length, targetBox.center().y - wrapperBox.center().y);

                    if (options.line.visible) {
                        lineStart = [ targetBox.x2, center.y ];
                        this.linePoints = [
                            lineStart,
                            [ contentBox.x1, center.y ]
                        ];
                        box = contentBox.clone().wrapPoint(lineStart);
                    }
                }
            } else {
                if (position === BOTTOM) {
                    contentBox = wrapperBox.alignTo(targetBox, position).translate(targetBox.center().x - wrapperBox.center().x, length);

                    if (options.line.visible) {
                        lineStart = [ center.x, targetBox.y2 ];
                        this.linePoints = [
                            lineStart,
                            [ center.x, contentBox.y1 ]
                        ];
                        box = contentBox.clone().wrapPoint(lineStart);
                    }
                } else {
                    contentBox = wrapperBox.alignTo(targetBox, position).translate(targetBox.center().x - wrapperBox.center().x, -length);

                    if (options.line.visible) {
                        lineStart = [ center.x, targetBox.y1 ];
                        this.linePoints = [
                            lineStart,
                            [ center.x, contentBox.y2 ]
                        ];
                        box = contentBox.clone().wrapPoint(lineStart);
                    }
                }
            }

            if (marker) {
                marker.reflow(contentBox);
            }

            if (label) {
                label.reflow(contentBox);
                if (marker) {
                    if (options.label.position === OUTSIDE) {
                        label.box.alignTo(marker.box, position);
                    }
                    label.reflow(label.box);
                }
            }

            this.contentBox = contentBox;
            this.targetBox = targetBox;
            this.box = box || contentBox;
        }
    };

    Note.prototype.createVisual = function createVisual () {
        BoxElement$$1.prototype.createVisual.call(this);
        this.visual.options.noclip = this.options.noclip;

        if (this.options.visible) {
            this.createLine();
        }
    };

    Note.prototype.renderVisual = function renderVisual () {
        var this$1 = this;

        var options = this.options;
        var customVisual = options.visual;
        if (options.visible && customVisual) {
            this.visual = customVisual(Object.assign(this.fields, {
                sender: this.getSender(),
                rect: this.targetBox.toRect(),
                options: {
                    background: options.background,
                    border: options.background,
                    icon: options.icon,
                    label: options.label,
                    line: options.line,
                    position: options.position,
                    visible: options.visible
                },
                createVisual: function () {
                    this$1.createVisual();
                    this$1.renderChildren();
                    var defaultVisual = this$1.visual;
                    delete this$1.visual;
                    return defaultVisual;
                }
            }));
            this.addVisual();
        } else {
            BoxElement$$1.prototype.renderVisual.call(this);
        }
    };

    Note.prototype.createLine = function createLine () {
        var options = this.options.line;

        if (this.linePoints) {
            var path = _progress_kendoDrawing.drawing.Path.fromPoints(this.linePoints, {
                stroke: {
                    color: options.color,
                    width: options.width,
                    dashType: options.dashType
                }
            });

            alignPathToPixel(path);
            this.visual.append(path);
        }
    };

    Note.prototype.click = function click (widget, e) {
        var args = this.eventArgs(e);

        if (!widget.trigger(NOTE_CLICK, args)) {
            e.preventDefault();
        }
    };

    Note.prototype.over = function over (widget, e) {
        var args = this.eventArgs(e);

        if (!widget.trigger(NOTE_HOVER, args)) {
            e.preventDefault();
        }
    };

    Note.prototype.out = function out (widget, e) {
        var args = this.eventArgs(e);

        widget.trigger(NOTE_LEAVE, args);
    };

    Note.prototype.eventArgs = function eventArgs (e) {
        var options = this.options;

        return Object.assign(this.fields, {
            element: eventElement(e),
            text: defined(options.label) ? options.label.text : "",
            visual: this.visual
        });
    };

    return Note;
}(BoxElement));

setDefaultOptions(Note, {
    icon: {
        visible: true,
        type: CIRCLE
    },
    label: {
        position: INSIDE,
        visible: true,
        align: CENTER,
        vAlign: CENTER
    },
    line: {
        visible: true
    },
    visible: true,
    position: TOP,
    zIndex: 2
});

function createAxisTick(options, tickOptions) {
    var tickX = options.tickX;
    var tickY = options.tickY;
    var position = options.position;

    var tick = new _progress_kendoDrawing.drawing.Path({
        stroke: {
            width: tickOptions.width,
            color: tickOptions.color
        }
    });

    if (options.vertical) {
        tick.moveTo(tickX, position)
            .lineTo(tickX + tickOptions.size, position);
    } else {
        tick.moveTo(position, tickY)
            .lineTo(position, tickY + tickOptions.size);
    }

    alignPathToPixel(tick);

    return tick;
}

function createAxisGridLine(options, gridLine) {
    var lineStart = options.lineStart;
    var lineEnd = options.lineEnd;
    var position = options.position;

    var line = new _progress_kendoDrawing.drawing.Path({
        stroke: {
            width: gridLine.width,
            color: gridLine.color,
            dashType: gridLine.dashType
        }
    });

    if (options.vertical) {
        line.moveTo(lineStart, position)
            .lineTo(lineEnd, position);
    } else {
        line.moveTo(position, lineStart)
            .lineTo(position, lineEnd);
    }

    alignPathToPixel(line);

    return line;
}

var Axis = (function (ChartElement$$1) {
    function Axis(options, chartService) {
        if ( chartService === void 0 ) chartService = new ChartService();

        ChartElement$$1.call(this, options);

        this.chartService = chartService;

        if (!this.options.visible) {
            this.options = deepExtend({}, this.options, {
                labels: {
                    visible: false
                },
                line: {
                    visible: false
                },
                margin: 0,
                majorTickSize: 0,
                minorTickSize: 0
            });
        }

        this.options.minorTicks = deepExtend({}, {
            color: this.options.line.color,
            width: this.options.line.width,
            visible: this.options.minorTickType !== NONE
        }, this.options.minorTicks, {
            size: this.options.minorTickSize,
            align: this.options.minorTickType
        });

        this.options.majorTicks = deepExtend({}, {
            color: this.options.line.color,
            width: this.options.line.width,
            visible: this.options.majorTickType !== NONE
        }, this.options.majorTicks, {
            size: this.options.majorTickSize,
            align: this.options.majorTickType
        });

        this.initFields();

        if (!this.options._deferLabels) {
            this.createLabels();
        }

        this.createTitle();
        this.createNotes();
    }

    if ( ChartElement$$1 ) Axis.__proto__ = ChartElement$$1;
    Axis.prototype = Object.create( ChartElement$$1 && ChartElement$$1.prototype );
    Axis.prototype.constructor = Axis;

    Axis.prototype.initFields = function initFields () {
    };

    // abstract labelsCount(): Number
    // abstract createAxisLabel(index, options): AxisLabel

    Axis.prototype.labelsRange = function labelsRange () {
        return {
            min: this.options.labels.skip,
            max: this.labelsCount()
        };
    };

    Axis.prototype.createLabels = function createLabels () {
        var this$1 = this;

        var options = this.options;
        var align = options.vertical ? RIGHT : CENTER;
        var labelOptions = deepExtend({ }, options.labels, {
            align: align,
            zIndex: options.zIndex
        });
        var step = Math.max(1, labelOptions.step);

        this.clearLabels();

        if (labelOptions.visible) {
            var range = this.labelsRange();
            var rotation = labelOptions.rotation;

            if (isObject(rotation)) {
                labelOptions.alignRotation = rotation.align;
                labelOptions.rotation = rotation.angle;
            }

            if (labelOptions.rotation === "auto") {
                labelOptions.rotation = 0;
                options.autoRotateLabels = true;
            }

            for (var idx = range.min; idx < range.max; idx += step) {
                var label = this$1.createAxisLabel(idx, labelOptions);
                if (label) {
                    this$1.append(label);
                    this$1.labels.push(label);
                }
            }
        }
    };

    Axis.prototype.clearLabels = function clearLabels () {
        this.children = grep(this.children, function (child) { return !(child instanceof AxisLabel); });
        this.labels = [];
    };

    Axis.prototype.clearTitle = function clearTitle () {
        var this$1 = this;

        if (this.title) {
            this.children = grep(this.children, function (child) { return child !== this$1.title; });
            this.title = undefined;
        }
    };

    Axis.prototype.clear = function clear () {
        this.clearLabels();
        this.clearTitle();
    };

    Axis.prototype.lineBox = function lineBox () {
        var ref = this;
        var options = ref.options;
        var box = ref.box;
        var vertical = options.vertical;
        var mirror = options.labels.mirror;
        var axisX = mirror ? box.x1 : box.x2;
        var axisY = mirror ? box.y2 : box.y1;
        var lineWidth = options.line.width || 0;

        return vertical ?
            new Box(axisX, box.y1, axisX, box.y2 - lineWidth) :
            new Box(box.x1, axisY, box.x2 - lineWidth, axisY);
    };

    Axis.prototype.createTitle = function createTitle () {
        var options = this.options;
        var titleOptions = deepExtend({
            rotation: options.vertical ? -90 : 0,
            text: "",
            zIndex: 1,
            visualSize: true
        }, options.title);

        if (titleOptions.visible && titleOptions.text) {
            var title = new TextBox(titleOptions.text, titleOptions);
            this.append(title);
            this.title = title;
        }
    };

    Axis.prototype.createNotes = function createNotes () {
        var this$1 = this;

        var options = this.options;
        var notes = options.notes;
        var items = notes.data || [];

        this.notes = [];

        for (var i = 0; i < items.length; i++) {
            var item = deepExtend({}, notes, items[i]);
            item.value = this$1.parseNoteValue(item.value);

            var note = new Note({
                value: item.value,
                text: item.label.text,
                dataItem: item
            }, item, this$1.chartService);

            if (note.options.visible) {
                if (defined(note.options.position)) {
                    if (options.vertical && !inArray(note.options.position, [ LEFT, RIGHT ])) {
                        note.options.position = options.reverse ? LEFT : RIGHT;
                    } else if (!options.vertical && !inArray(note.options.position, [ TOP, BOTTOM ])) {
                        note.options.position = options.reverse ? BOTTOM : TOP;
                    }
                } else {
                    if (options.vertical) {
                        note.options.position = options.reverse ? LEFT : RIGHT;
                    } else {
                        note.options.position = options.reverse ? BOTTOM : TOP;
                    }
                }
                this$1.append(note);
                this$1.notes.push(note);
            }
        }
    };

    Axis.prototype.parseNoteValue = function parseNoteValue (value) {
        return value;
    };

    Axis.prototype.renderVisual = function renderVisual () {
        ChartElement$$1.prototype.renderVisual.call(this);

        this.createPlotBands();
    };

    Axis.prototype.createVisual = function createVisual () {
        ChartElement$$1.prototype.createVisual.call(this);

        this.createBackground();
        this.createLine();
    };

    Axis.prototype.gridLinesVisual = function gridLinesVisual () {
        var gridLines = this._gridLines;
        if (!gridLines) {
            gridLines = this._gridLines = new _progress_kendoDrawing.drawing.Group({
                zIndex: -2
            });
            this.appendVisual(this._gridLines);
        }

        return gridLines;
    };

    Axis.prototype.createTicks = function createTicks (lineGroup) {
        var options = this.options;
        var lineBox = this.lineBox();
        var mirror = options.labels.mirror;
        var majorUnit = options.majorTicks.visible ? options.majorUnit : 0;
        var tickLineOptions = {
            // TODO
            // _alignLines: options._alignLines,
            vertical: options.vertical
        };

        function render(tickPositions, tickOptions, skipUnit) {
            var count = tickPositions.length;
            var step = Math.max(1, tickOptions.step);

            if (tickOptions.visible) {
                for (var i = tickOptions.skip; i < count; i += step) {
                    if (defined(skipUnit) && (i % skipUnit === 0)) {
                        continue;
                    }

                    tickLineOptions.tickX = mirror ? lineBox.x2 : lineBox.x2 - tickOptions.size;
                    tickLineOptions.tickY = mirror ? lineBox.y1 - tickOptions.size : lineBox.y1;
                    tickLineOptions.position = tickPositions[i];

                    lineGroup.append(createAxisTick(tickLineOptions, tickOptions));
                }
            }
        }

        render(this.getMajorTickPositions(), options.majorTicks);
        render(this.getMinorTickPositions(), options.minorTicks, majorUnit / options.minorUnit);
    };

    Axis.prototype.createLine = function createLine () {
        var options = this.options;
        var line = options.line;
        var lineBox = this.lineBox();

        if (line.width > 0 && line.visible) {
            var path = new _progress_kendoDrawing.drawing.Path({
                stroke: {
                    width: line.width,
                    color: line.color,
                    dashType: line.dashType
                }

                /* TODO
                zIndex: line.zIndex,
                */
            });

            path.moveTo(lineBox.x1, lineBox.y1)
                .lineTo(lineBox.x2, lineBox.y2);

            if (options._alignLines) {
                alignPathToPixel(path);
            }

            var group = this._lineGroup = new _progress_kendoDrawing.drawing.Group();
            group.append(path);

            this.visual.append(group);
            this.createTicks(group);
        }
    };

    Axis.prototype.getActualTickSize = function getActualTickSize () {
        var options = this.options;
        var tickSize = 0;

        if (options.majorTicks.visible && options.minorTicks.visible) {
            tickSize = Math.max(options.majorTicks.size, options.minorTicks.size);
        } else if (options.majorTicks.visible) {
            tickSize = options.majorTicks.size;
        } else if (options.minorTicks.visible) {
            tickSize = options.minorTicks.size;
        }

        return tickSize;
    };

    Axis.prototype.createBackground = function createBackground () {
        var ref = this;
        var options = ref.options;
        var box = ref.box;
        var background = options.background;

        if (background) {
            this._backgroundPath = _progress_kendoDrawing.drawing.Path.fromRect(box.toRect(), {
                fill: {
                    color: background
                },
                stroke: null
            });

            this.visual.append(this._backgroundPath);
        }
    };

    Axis.prototype.createPlotBands = function createPlotBands () {
        var this$1 = this;

        var options = this.options;
        var plotBands = options.plotBands || [];
        var vertical = options.vertical;
        var plotArea = this.plotArea;

        if (plotBands.length === 0) {
            return;
        }

        var group = this._plotbandGroup = new _progress_kendoDrawing.drawing.Group({
            zIndex: -1
        });

        var altAxis = grep(this.pane.axes, function (axis) { return axis.options.vertical !== this$1.options.vertical; })[0];

        for (var idx = 0; idx < plotBands.length; idx++) {
            var item = plotBands[idx];
            var slotX = (void 0), slotY = (void 0);
            var labelOptions = item.label;
            var label = (void 0);

            if (vertical) {
                slotX = (altAxis || plotArea.axisX).lineBox();
                slotY = this$1.getSlot(item.from, item.to, true);
            } else {
                slotX = this$1.getSlot(item.from, item.to, true);
                slotY = (altAxis || plotArea.axisY).lineBox();
            }

            if (labelOptions) {
                labelOptions.vAlign = labelOptions.position || LEFT;
                label = this$1.createPlotBandLabel(
                    labelOptions,
                    item,
                    new Box(
                        slotX.x1,
                        slotY.y1,
                        slotX.x2,
                        slotY.y2
                    )

                );
            }

            if (slotX.width() !== 0 && slotY.height() !== 0) {
                var bandRect = new _progress_kendoDrawing.geometry.Rect(
                    [ slotX.x1, slotY.y1 ],
                    [ slotX.width(), slotY.height() ]
                );

                var path = _progress_kendoDrawing.drawing.Path.fromRect(bandRect, {
                    fill: {
                        color: item.color,
                        opacity: item.opacity
                    },
                    stroke: null
                });

                group.append(path);
                if (label) {
                    group.append(label);
                }
            }
        }

        this.appendVisual(group);
    };

    Axis.prototype.createPlotBandLabel = function createPlotBandLabel (label, item, box) {

        if (label.visible === false) {
            return null;
        }

        var text = label.text;
        var textbox;

        if (defined(label) && label.visible) {
            var labelTemplate = getTemplate(label);
            if (labelTemplate) {
                text = labelTemplate({ text: text, item: item });
            } else if (label.format) {
                text = this.chartService.format.auto(label.format, text);
            }

            if (!label.color) {
                label.color = this.options.labels.color;
            }
        }

        textbox = new TextBox(text, label);
        textbox.reflow(box);
        textbox.renderVisual();

        return textbox.visual;
    };

    Axis.prototype.createGridLines = function createGridLines (altAxis) {
        var options = this.options;
        var minorGridLines = options.minorGridLines;
        var majorGridLines = options.majorGridLines;
        var minorUnit = options.minorUnit;
        var vertical = options.vertical;
        var axisLineVisible = altAxis.options.line.visible;
        var majorUnit = majorGridLines.visible ? options.majorUnit : 0;
        var lineBox = altAxis.lineBox();
        var linePos = lineBox[vertical ? "y1" : "x1"];
        var lineOptions = {
            lineStart: lineBox[vertical ? "x1" : "y1"],
            lineEnd: lineBox[vertical ? "x2" : "y2"],
            vertical: vertical
        };
        var majorTicks = [];

        var container = this.gridLinesVisual();

        function render(tickPositions, gridLine, skipUnit) {
            var count = tickPositions.length;
            var step = Math.max(1, gridLine.step);

            if (gridLine.visible) {
                for (var i = gridLine.skip; i < count; i += step) {
                    var pos = round(tickPositions[i]);
                    if (!inArray(pos, majorTicks)) {
                        if (i % skipUnit !== 0 && (!axisLineVisible || linePos !== pos)) {
                            lineOptions.position = pos;
                            container.append(createAxisGridLine(lineOptions, gridLine));

                            majorTicks.push(pos);
                        }
                    }
                }
            }
        }

        render(this.getMajorTickPositions(), majorGridLines);
        render(this.getMinorTickPositions(), minorGridLines, majorUnit / minorUnit);

        return container.children;
    };

    Axis.prototype.reflow = function reflow (box) {
        var ref = this;
        var options = ref.options;
        var labels = ref.labels;
        var title = ref.title;
        var vertical = options.vertical;
        var count = labels.length;
        var sizeFn = vertical ? WIDTH : HEIGHT;
        var titleSize = title ? title.box[sizeFn]() : 0;
        var space = this.getActualTickSize() + options.margin + titleSize;
        var rootBox = (this.getRoot() || {}).box || box;
        var boxSize = rootBox[sizeFn]();
        var maxLabelSize = 0;

        for (var i = 0; i < count; i++) {
            var labelSize = labels[i].box[sizeFn]();
            if (labelSize + space <= boxSize) {
                maxLabelSize = Math.max(maxLabelSize, labelSize);
            }
        }

        if (vertical) {
            this.box = new Box(
                box.x1, box.y1,
                box.x1 + maxLabelSize + space, box.y2
            );
        } else {
            this.box = new Box(
                box.x1, box.y1,
                box.x2, box.y1 + maxLabelSize + space
            );
        }

        this.arrangeTitle();
        this.arrangeLabels();
        this.arrangeNotes();
    };

    Axis.prototype.getLabelsTickPositions = function getLabelsTickPositions () {
        return this.getMajorTickPositions();
    };

    Axis.prototype.labelTickIndex = function labelTickIndex (label) {
        return label.index;
    };

    Axis.prototype.arrangeLabels = function arrangeLabels () {
        var this$1 = this;

        var ref = this;
        var options = ref.options;
        var labels = ref.labels;
        var labelsBetweenTicks = this.labelsBetweenTicks();
        var vertical = options.vertical;
        var lineBox = this.lineBox();
        var mirror = options.labels.mirror;
        var tickPositions = this.getLabelsTickPositions();
        var labelOffset = this.getActualTickSize() + options.margin;

        for (var idx = 0; idx < labels.length; idx++) {
            var label = labels[idx];
            var tickIx = this$1.labelTickIndex(label);
            var labelSize = vertical ? label.box.height() : label.box.width();
            var labelPos = tickPositions[tickIx] - (labelSize / 2);
            var labelBox = (void 0), firstTickPosition = (void 0), nextTickPosition = (void 0);

            if (vertical) {
                if (labelsBetweenTicks) {
                    firstTickPosition = tickPositions[tickIx];
                    nextTickPosition = tickPositions[tickIx + 1];

                    var middle = firstTickPosition + (nextTickPosition - firstTickPosition) / 2;
                    labelPos = middle - (labelSize / 2);
                }

                var labelX = lineBox.x2;

                if (mirror) {
                    labelX += labelOffset;
                    label.options.rotationOrigin = LEFT;
                } else {
                    labelX -= labelOffset + label.box.width();
                    label.options.rotationOrigin = RIGHT;
                }

                labelBox = label.box.move(labelX, labelPos);
            } else {
                if (labelsBetweenTicks) {
                    firstTickPosition = tickPositions[tickIx];
                    nextTickPosition = tickPositions[tickIx + 1];
                } else {
                    firstTickPosition = labelPos;
                    nextTickPosition = labelPos + labelSize;
                }

                var labelY = lineBox.y1;

                if (mirror) {
                    labelY -= labelOffset + label.box.height();
                    label.options.rotationOrigin = BOTTOM;
                } else {
                    labelY += labelOffset;
                    label.options.rotationOrigin = TOP;
                }

                labelBox = new Box(firstTickPosition, labelY,
                                nextTickPosition, labelY + label.box.height());
            }

            label.reflow(labelBox);
        }
    };

    Axis.prototype.autoRotateLabels = function autoRotateLabels () {
        if (this.options.autoRotateLabels && !this.options.vertical) {
            var tickPositions = this.getMajorTickPositions();
            var labels = this.labels;
            var angle;

            for (var idx = 0; idx < labels.length; idx++) {
                var width = Math.abs(tickPositions[idx + 1] - tickPositions[idx]);
                var labelBox = labels[idx].box;

                if (labelBox.width() > width) {
                    if (labelBox.height() > width) {
                        angle = -90;
                        break;
                    }
                    angle = -45;
                }
            }

            if (angle) {
                for (var idx$1 = 0; idx$1 < labels.length; idx$1++) {
                    labels[idx$1].options.rotation = angle;
                    labels[idx$1].reflow(new Box());
                }
                return true;
            }
        }
    };

    Axis.prototype.arrangeTitle = function arrangeTitle () {
        var ref = this;
        var options = ref.options;
        var title = ref.title;
        var mirror = options.labels.mirror;
        var vertical = options.vertical;

        if (title) {
            if (vertical) {
                title.options.align = mirror ? RIGHT : LEFT;
                title.options.vAlign = title.options.position;
            } else {
                title.options.align = title.options.position;
                title.options.vAlign = mirror ? TOP : BOTTOM;
            }

            title.reflow(this.box);
        }
    };

    Axis.prototype.arrangeNotes = function arrangeNotes () {
        var this$1 = this;

        for (var idx = 0; idx < this.notes.length; idx++) {
            var item = this$1.notes[idx];
            var value = item.options.value;
            var slot = (void 0);

            if (defined(value)) {
                if (this$1.shouldRenderNote(value)) {
                    item.show();
                } else {
                    item.hide();
                }

                slot = this$1.noteSlot(value);
            } else {
                item.hide();
            }

            item.reflow(slot || this$1.lineBox());
        }
    };

    Axis.prototype.noteSlot = function noteSlot (value) {
        return this.getSlot(value);
    };

    Axis.prototype.alignTo = function alignTo (secondAxis) {
        var lineBox = secondAxis.lineBox();
        var vertical = this.options.vertical;
        var pos = vertical ? Y : X;

        this.box.snapTo(lineBox, pos);
        if (vertical) {
            this.box.shrink(0, this.lineBox().height() - lineBox.height());
        } else {
            this.box.shrink(this.lineBox().width() - lineBox.width(), 0);
        }
        this.box[pos + 1] -= this.lineBox()[pos + 1] - lineBox[pos + 1];
        this.box[pos + 2] -= this.lineBox()[pos + 2] - lineBox[pos + 2];
    };

    Axis.prototype.axisLabelText = function axisLabelText (value, dataItem, options) {
        var tmpl = getTemplate(options);
        var text = value;

        if (tmpl) {
            text = tmpl({ value: value, dataItem: dataItem, format: options.format, culture: options.culture });
        } else if (options.format) {
            text = this.chartService.format.localeAuto(options.format, [ value ], options.culture);
        }

        return text;
    };

    Axis.prototype.slot = function slot (from , to, limit) {
        var slot = this.getSlot(from, to, limit);
        if (slot) {
            return slot.toRect();
        }
    };

    Axis.prototype.contentBox = function contentBox () {
        var box = this.box.clone();
        var labels = this.labels;
        if (labels.length) {
            var axis = this.options.vertical ? Y : X;
            if (this.chartService.isPannable(axis)) {
                var offset = this.maxLabelOffset();
                box[axis + 1] -= offset.start;
                box[axis + 2] += offset.end;
            } else {
                if (labels[0].options.visible) {
                    box.wrap(labels[0].box);
                }
                var lastLabel = labels[labels.length - 1];
                if (lastLabel.options.visible) {
                    box.wrap(lastLabel.box);
                }
            }
        }

        return box;
    };

    Axis.prototype.maxLabelOffset = function maxLabelOffset () {
        var this$1 = this;

        var ref = this.options;
        var vertical = ref.vertical;
        var reverse = ref.reverse;
        var labelsBetweenTicks = this.labelsBetweenTicks();
        var tickPositions = this.getLabelsTickPositions();
        var offsetField = vertical ? Y : X;
        var labels = this.labels;
        var startPosition = reverse ? 1 : 0;
        var endPosition = reverse ? 0 : 1;
        var maxStartOffset = 0;
        var maxEndOffset = 0;

        for (var idx = 0; idx < labels.length; idx++) {
            var label = labels[idx];
            var tickIx = this$1.labelTickIndex(label);
            var startTick = (void 0), endTick = (void 0);

            if (labelsBetweenTicks) {
                startTick = tickPositions[tickIx + startPosition];
                endTick = tickPositions[tickIx + endPosition];
            } else {
                startTick = endTick = tickPositions[tickIx];
            }

            maxStartOffset = Math.max(maxStartOffset, startTick - label.box[offsetField + 1]);
            maxEndOffset = Math.max(maxEndOffset, label.box[offsetField + 2] - endTick);
        }

        return {
            start: maxStartOffset,
            end: maxEndOffset
        };
    };

    Axis.prototype.limitRange = function limitRange (from, to, min, max, offset) {
        var options = this.options;

        if ((from < min && offset < 0 && (!defined(options.min) || options.min <= min)) || (max < to && offset > 0 && (!defined(options.max) || max <= options.max))) {
            return null;
        }

        if ((to < min && offset > 0) || (max < from && offset < 0)) {
            return {
                min: from,
                max: to
            };
        }

        var rangeSize = to - from;
        var minValue = from;
        var maxValue = to;

        if (from < min && offset < 0) {
            minValue = limitValue(from, min, max);
            maxValue = limitValue(from + rangeSize, min + rangeSize, max);
        } else if (to > max && offset > 0) {
            maxValue = limitValue(to, min, max);
            minValue = limitValue(to - rangeSize, min, max - rangeSize);
        }

        return {
            min: minValue,
            max: maxValue
        };
    };

    Axis.prototype.valueRange = function valueRange () {
        return {
            min: this.seriesMin,
            max: this.seriesMax
        };
    };

    Axis.prototype.labelsBetweenTicks = function labelsBetweenTicks () {
        return !this.options.justified;
    };

    //add legacy fields to the options that are no longer generated by default
    Axis.prototype.prepareUserOptions = function prepareUserOptions () {
    };

    return Axis;
}(ChartElement));

setDefaultOptions(Axis, {
    labels: {
        visible: true,
        rotation: 0,
        mirror: false,
        step: 1,
        skip: 0
    },
    line: {
        width: 1,
        color: BLACK,
        visible: true
    },
    title: {
        visible: true,
        position: CENTER
    },
    majorTicks: {
        align: OUTSIDE,
        size: 4,
        skip: 0,
        step: 1
    },
    minorTicks: {
        align: OUTSIDE,
        size: 3,
        skip: 0,
        step: 1
    },
    axisCrossingValue: 0,
    majorTickType: OUTSIDE,
    minorTickType: NONE,
    majorGridLines: {
        skip: 0,
        step: 1
    },
    minorGridLines: {
        visible: false,
        width: 1,
        color: BLACK,
        skip: 0,
        step: 1
    },
    // TODO: Move to line or labels options
    margin: 5,
    visible: true,
    reverse: false,
    justified: true,
    notes: {
        label: {
            text: ""
        }
    },

    _alignLines: true,
    _deferLabels: false
});

var MILLISECONDS = "milliseconds";
var SECONDS = "seconds";
var MINUTES = "minutes";
var HOURS = "hours";
var DAYS = "days";
var WEEKS = "weeks";
var MONTHS = "months";
var YEARS = "years";

var TIME_PER_MILLISECOND = 1;
var TIME_PER_SECOND = 1000;
var TIME_PER_MINUTE = 60 * TIME_PER_SECOND;
var TIME_PER_HOUR = 60 * TIME_PER_MINUTE;
var TIME_PER_DAY = 24 * TIME_PER_HOUR;
var TIME_PER_WEEK = 7 * TIME_PER_DAY;
var TIME_PER_MONTH = 31 * TIME_PER_DAY;
var TIME_PER_YEAR = 365 * TIME_PER_DAY;
var TIME_PER_UNIT = {
    "years": TIME_PER_YEAR,
    "months": TIME_PER_MONTH,
    "weeks": TIME_PER_WEEK,
    "days": TIME_PER_DAY,
    "hours": TIME_PER_HOUR,
    "minutes": TIME_PER_MINUTE,
    "seconds": TIME_PER_SECOND,
    "milliseconds": TIME_PER_MILLISECOND
};

function absoluteDateDiff(a, b) {
    var diff = a.getTime() - b;
    var offsetDiff = a.getTimezoneOffset() - b.getTimezoneOffset();

    return diff - (offsetDiff * TIME_PER_MINUTE);
}

function addTicks(date, ticks) {
    return new Date(date.getTime() + ticks);
}

function toDate(value) {
    var result;

    if (value instanceof Date) {
        result = value;
    } else if (value) {
        result = new Date(value);
    }

    return result;
}

function startOfWeek(date, weekStartDay) {
    if ( weekStartDay === void 0 ) weekStartDay = 0;

    var daysToSubtract = 0;
    var day = date.getDay();

    if (!isNaN(day)) {
        while (day !== weekStartDay) {
            if (day === 0) {
                day = 6;
            } else {
                day--;
            }

            daysToSubtract++;
        }
    }

    return addTicks(date, -daysToSubtract * TIME_PER_DAY);
}

function adjustDST(date, hours) {
    if (hours === 0 && date.getHours() === 23) {
        date.setHours(date.getHours() + 2);
        return true;
    }

    return false;
}

function addHours(date, hours) {
    var roundedDate = new Date(date);

    roundedDate.setMinutes(0, 0, 0);

    var tzDiff = (date.getTimezoneOffset() - roundedDate.getTimezoneOffset()) * TIME_PER_MINUTE;

    return addTicks(roundedDate, tzDiff + hours * TIME_PER_HOUR);
}

function addDuration(dateValue, value, unit, weekStartDay) {
    var result = dateValue;

    if (dateValue) {
        var date = toDate(dateValue);
        var hours = date.getHours();

        if (unit === YEARS) {
            result = new Date(date.getFullYear() + value, 0, 1);
            adjustDST(result, 0);
        } else if (unit === MONTHS) {
            result = new Date(date.getFullYear(), date.getMonth() + value, 1);
            adjustDST(result, hours);
        } else if (unit === WEEKS) {
            result = addDuration(startOfWeek(date, weekStartDay), value * 7, DAYS);
            adjustDST(result, hours);
        } else if (unit === DAYS) {
            result = new Date(date.getFullYear(), date.getMonth(), date.getDate() + value);
            adjustDST(result, hours);
        } else if (unit === HOURS) {
            result = addHours(date, value);
        } else if (unit === MINUTES) {
            result = addTicks(date, value * TIME_PER_MINUTE);

            if (result.getSeconds() > 0) {
                result.setSeconds(0);
            }
        } else if (unit === SECONDS) {
            result = addTicks(date, value * TIME_PER_SECOND);
        } else if (unit === MILLISECONDS) {
            result = addTicks(date, value);
        }

        if (unit !== MILLISECONDS && result.getMilliseconds() > 0) {
            result.setMilliseconds(0);
        }
    }

    return result;
}

function floorDate(date, unit, weekStartDay) {
    return addDuration(toDate(date), 0, unit, weekStartDay);
}

function ceilDate(dateValue, unit, weekStartDay) {
    var date = toDate(dateValue);

    if (date && floorDate(date, unit, weekStartDay).getTime() === date.getTime()) {
        return date;
    }

    return addDuration(date, 1, unit, weekStartDay);
}

function dateComparer(a, b) {
    if (a && b) {
        return a.getTime() - b.getTime();
    }

    return -1;
}

function dateDiff(a, b) {
    return a.getTime() - b;
}

function toTime(value) {
    if (isArray(value)) {
        var result = [];
        for (var idx = 0; idx < value.length; idx++) {
            result.push(toTime(value[idx]));
        }

        return result;
    } else if (value) {
        return toDate(value).getTime();
    }
}

function dateEquals(a, b) {
    if (a && b) {
        return toTime(a) === toTime(b);
    }

    return a === b;
}

function timeIndex(date, start, baseUnit) {
    return absoluteDateDiff(date, start) / TIME_PER_UNIT[baseUnit];
}

function dateIndex(value, start, baseUnit, baseUnitStep) {
    var date = toDate(value);
    var startDate = toDate(start);
    var index;

    if (baseUnit === MONTHS) {
        index = (date.getMonth() - startDate.getMonth() + (date.getFullYear() - startDate.getFullYear()) * 12) +
            timeIndex(date, new Date(date.getFullYear(), date.getMonth()), DAYS) / new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();
    } else if (baseUnit === YEARS) {
        index = date.getFullYear() - startDate.getFullYear() + dateIndex(date, new Date(date.getFullYear(), 0), MONTHS, 1) / 12;
    } else if (baseUnit === DAYS || baseUnit === WEEKS) {
        index = timeIndex(date, startDate, baseUnit);
    } else {
        index = dateDiff(date, start) / TIME_PER_UNIT[baseUnit];
    }

    return index / baseUnitStep;
}

function duration(a, b, unit) {
    var diff;

    if (unit === YEARS) {
        diff = b.getFullYear() - a.getFullYear();
    } else if (unit === MONTHS) {
        diff = duration(a, b, YEARS) * 12 + b.getMonth() - a.getMonth();
    } else if (unit === DAYS) {
        diff = Math.floor(dateDiff(b, a) / TIME_PER_DAY);
    } else {
        diff = Math.floor(dateDiff(b, a) / TIME_PER_UNIT[unit]);
    }

    return diff;
}

function parseDate(intlService, date) {
    var result;
    if (isString(date)) {
        result = intlService.parseDate(date) || toDate(date);
    } else {
        result = toDate(date);
    }
    return result;
}

function parseDates(intlService, dates) {
    if (isArray(dates)) {
        var result = [];
        for (var idx = 0; idx < dates.length; idx++) {
            result.push(parseDate(intlService, dates[idx]));
        }

        return result;
    }

    return parseDate(intlService, dates);
}

function firstDay(options, intlService) {
    if (isNumber(options.weekStartDay)) {
        return options.weekStartDay;
    }

    if (intlService.firstDay) {
        return intlService.firstDay();
    }

    return 0;
}

var MIN_CATEGORY_POINTS_RANGE = 0.01;

function indexOf(value, arr) {
    if (value instanceof Date) {
        var length = arr.length;
        for (var idx = 0; idx < length; idx++) {
            if (dateEquals(arr[idx], value)) {
                return idx;
            }
        }

        return -1;
    }

    return arr.indexOf(value);
}

var CategoryAxis = (function (Axis$$1) {
    function CategoryAxis () {
        Axis$$1.apply(this, arguments);
    }

    if ( Axis$$1 ) CategoryAxis.__proto__ = Axis$$1;
    CategoryAxis.prototype = Object.create( Axis$$1 && Axis$$1.prototype );
    CategoryAxis.prototype.constructor = CategoryAxis;

    CategoryAxis.prototype.initFields = function initFields () {
        this._ticks = {};
    };

    CategoryAxis.prototype.categoriesHash = function categoriesHash () {
        return "";
    };

    CategoryAxis.prototype.clone = function clone () {
        var copy = new CategoryAxis(Object.assign({}, this.options, {
            categories: this.options.srcCategories
        }), this.chartService);
        copy.createLabels();

        return copy;
    };

    CategoryAxis.prototype.initUserOptions = function initUserOptions (options) {
        var categories = options.categories || [];
        var definedMin = defined(options.min);
        var definedMax = defined(options.max);
        options.srcCategories = options.categories = categories;

        if ((definedMin || definedMax) && categories.length) {
            var min = definedMin ? Math.floor(options.min) : 0;
            var max;

            if (definedMax) {
                max = options.justified ? Math.floor(options.max) + 1 : Math.ceil(options.max);
            } else {
                max = categories.length;
            }

            options.categories = options.categories.slice(min, max);
        }

        return options;
    };

    CategoryAxis.prototype.rangeIndices = function rangeIndices () {
        var options = this.options;
        var length = options.categories.length || 1;
        var min = isNumber(options.min) ? options.min % 1 : 0;
        var max;

        if (isNumber(options.max) && options.max % 1 !== 0 && options.max < this.totalRange().max) {
            max = length - (1 - options.max % 1);
        } else {
            max = length - (options.justified ? 1 : 0);
        }

        return {
            min: min,
            max: max
        };
    };

    CategoryAxis.prototype.totalRangeIndices = function totalRangeIndices (limit) {
        var options = this.options;
        var min = isNumber(options.min) ? options.min : 0;
        var max;

        if (isNumber(options.max)) {
            max = options.max;
        } else if (isNumber(options.min)) {
            max = min + options.categories.length;
        } else {
            max = this.totalRange().max || 1;
        }

        if (limit) {
            var totalRange = this.totalRange();
            min = limitValue(min, 0, totalRange.max);
            max = limitValue(max, 0, totalRange.max);
        }

        return {
            min: min,
            max: max
        };
    };

    CategoryAxis.prototype.range = function range () {
        var options = this.options;
        var min = isNumber(options.min) ? options.min : 0;
        var max = isNumber(options.max) ? options.max : this.totalRange().max;

        return {
            min: min,
            max: max
        };
    };

    CategoryAxis.prototype.roundedRange = function roundedRange () {
        return this.range();
    };

    CategoryAxis.prototype.totalRange = function totalRange () {
        var options = this.options;
        return { min: 0, max: Math.max(this._seriesMax || 0, options.srcCategories.length) - (options.justified ? 1 : 0) };
    };

    CategoryAxis.prototype.scaleOptions = function scaleOptions () {
        var ref = this.rangeIndices();
        var min = ref.min;
        var max = ref.max;
        var lineBox = this.lineBox();
        var size = this.options.vertical ? lineBox.height() : lineBox.width();
        var scale = size / ((max - min) || 1);

        return {
            scale: scale * (this.options.reverse ? -1 : 1),
            box: lineBox,
            min: min,
            max: max
        };
    };

    CategoryAxis.prototype.arrangeLabels = function arrangeLabels () {
        Axis$$1.prototype.arrangeLabels.call(this);
        this.hideOutOfRangeLabels();
    };

    CategoryAxis.prototype.hideOutOfRangeLabels = function hideOutOfRangeLabels () {
        var ref = this;
        var box = ref.box;
        var labels = ref.labels;

        if (labels.length) {
            var valueAxis = this.options.vertical ? Y : X;
            var start = box[valueAxis + 1];
            var end = box[valueAxis + 2];
            var firstLabel = labels[0];
            var lastLabel = last(labels);

            if (firstLabel.box[valueAxis + 1] > end || firstLabel.box[valueAxis + 2] < start) {
                firstLabel.options.visible = false;
            }
            if (lastLabel.box[valueAxis + 1] > end || lastLabel.box[valueAxis + 2] < start) {
                lastLabel.options.visible = false;
            }
        }
    };

    CategoryAxis.prototype.getMajorTickPositions = function getMajorTickPositions () {
        return this.getTicks().majorTicks;
    };

    CategoryAxis.prototype.getMinorTickPositions = function getMinorTickPositions () {
        return this.getTicks().minorTicks;
    };

    CategoryAxis.prototype.getLabelsTickPositions = function getLabelsTickPositions () {
        return this.getTicks().labelTicks;
    };

    CategoryAxis.prototype.tickIndices = function tickIndices (stepSize) {
        var ref = this.rangeIndices();
        var min = ref.min;
        var max = ref.max;
        var limit = Math.ceil(max);
        var current = Math.floor(min);
        var indices = [];

        while (current <= limit) {
            indices.push(current);
            current += stepSize;
        }

        return indices;
    };

    CategoryAxis.prototype.getTickPositions = function getTickPositions (stepSize) {
        var ref = this.options;
        var vertical = ref.vertical;
        var reverse = ref.reverse;
        var ref$1 = this.scaleOptions();
        var scale = ref$1.scale;
        var box = ref$1.box;
        var min = ref$1.min;
        var pos = box[(vertical ? Y : X) + (reverse ? 2 : 1)];
        var indices = this.tickIndices(stepSize);
        var positions = [];

        for (var idx = 0; idx < indices.length; idx++) {
            positions.push(pos + round(scale * (indices[idx] - min), COORD_PRECISION));
        }

        return positions;
    };

    CategoryAxis.prototype.getTicks = function getTicks () {
        var options = this.options;
        var cache = this._ticks;
        var range = this.rangeIndices();
        var lineBox = this.lineBox();
        var hash = lineBox.getHash() + range.min + "," + range.max + options.reverse + options.justified;

        if (cache._hash !== hash) {
            var hasMinor = options.minorTicks.visible || options.minorGridLines.visible;
            cache._hash = hash;
            cache.labelTicks = this.getTickPositions(1);
            cache.majorTicks = this.filterOutOfRangePositions(cache.labelTicks, lineBox);
            cache.minorTicks = hasMinor ? this.filterOutOfRangePositions(this.getTickPositions(0.5), lineBox) : [];
        }

        return cache;
    };

    CategoryAxis.prototype.filterOutOfRangePositions = function filterOutOfRangePositions (positions, lineBox) {
        if (!positions.length) {
            return positions;
        }

        var axis = this.options.vertical ? Y : X;
        var inRange = function (position) { return lineBox[axis + 1] <= position && position <= lineBox[axis + 2]; };

        var end = positions.length - 1;
        var startIndex = 0;
        while (!inRange(positions[startIndex]) && startIndex <= end) {
            startIndex++;
        }

        var endIndex = end;

        while (!inRange(positions[endIndex]) && endIndex >= 0) {
            endIndex--;
        }

        return positions.slice(startIndex, endIndex + 1);
    };

    CategoryAxis.prototype.getSlot = function getSlot (from, to, limit) {
        var options = this.options;
        var reverse = options.reverse;
        var justified = options.justified;
        var vertical = options.vertical;
        var ref = this.scaleOptions();
        var scale = ref.scale;
        var box = ref.box;
        var min = ref.min;
        var valueAxis = vertical ? Y : X;
        var lineStart = box[valueAxis + (reverse ? 2 : 1)];
        var slotBox = box.clone();
        var singleSlot = !defined(to);

        var start = valueOrDefault(from, 0);
        var end = valueOrDefault(to, start);
        end = Math.max(end - 1, start);

        // Fixes transient bug caused by iOS 6.0 JIT
        // (one can never be too sure)
        end = Math.max(start, end);

        var p1 = lineStart + (start - min) * scale;
        var p2 = lineStart + (end + 1 - min) * scale;

        if (singleSlot && justified) {
            p2 = p1;
        }

        if (limit) {
            p1 = limitValue(p1, box[valueAxis + 1], box[valueAxis + 2]);
            p2 = limitValue(p2, box[valueAxis + 1], box[valueAxis + 2]);
        }

        slotBox[valueAxis + 1] = reverse ? p2 : p1;
        slotBox[valueAxis + 2] = reverse ? p1 : p2;

        return slotBox;
    };

    CategoryAxis.prototype.limitSlot = function limitSlot (slot) {
        var vertical = this.options.vertical;
        var valueAxis = vertical ? Y : X;
        var lineBox = this.lineBox();
        var limittedSlot = slot.clone();

        limittedSlot[valueAxis + 1] = limitValue(slot[valueAxis + 1], lineBox[valueAxis + 1], lineBox[valueAxis + 2]);
        limittedSlot[valueAxis + 2] = limitValue(slot[valueAxis + 2], lineBox[valueAxis + 1], lineBox[valueAxis + 2]);

        return limittedSlot;
    };

    CategoryAxis.prototype.slot = function slot (from, to, limit) {
        var min = Math.floor(this.options.min || 0);
        var start = from;
        var end = to;

        if (typeof start === "string") {
            start = this.categoryIndex(start);
        } else if (isNumber(start)) {
            start -= min;
        }

        if (typeof end === "string") {
            end = this.categoryIndex(end);
        } else if (isNumber(end)) {
            end -= min;
        }

        return Axis$$1.prototype.slot.call(this, start, end, limit);
    };

    CategoryAxis.prototype.pointCategoryIndex = function pointCategoryIndex (point) {
        var ref = this.options;
        var reverse = ref.reverse;
        var justified = ref.justified;
        var vertical = ref.vertical;
        var valueAxis = vertical ? Y : X;
        var ref$1 = this.scaleOptions();
        var scale = ref$1.scale;
        var box = ref$1.box;
        var min = ref$1.min;
        var max = ref$1.max;
        var startValue = reverse ? max : min;
        var lineStart = box[valueAxis + 1];
        var lineEnd = box[valueAxis + 2];
        var pos = point[valueAxis];

        if (pos < lineStart || pos > lineEnd) {
            return null;
        }

        var value = startValue + (pos - lineStart) / scale;
        var diff = value % 1;

        if (justified) {
            value = Math.round(value);
        } else if (diff === 0 && value > 0) {
            value--;
        }

        return Math.floor(value);
    };

    CategoryAxis.prototype.getCategory = function getCategory (point) {
        var index = this.pointCategoryIndex(point);

        if (index === null) {
            return null;
        }

        return this.options.categories[index];
    };

    CategoryAxis.prototype.categoryIndex = function categoryIndex (value) {
        return this.totalIndex(value) - Math.floor(this.options.min || 0);
    };

    CategoryAxis.prototype.categoryAt = function categoryAt (index, total) {
        var options = this.options;

        return (total ? options.srcCategories : options.categories)[index];
    };

    CategoryAxis.prototype.categoriesCount = function categoriesCount () {
        return (this.options.categories || []).length;
    };

    CategoryAxis.prototype.translateRange = function translateRange (delta) {
        var options = this.options;
        var lineBox = this.lineBox();
        var size = options.vertical ? lineBox.height() : lineBox.width();
        var range = options.categories.length;
        var scale = size / range;
        var offset = round(delta / scale, DEFAULT_PRECISION);

        return {
            min: offset,
            max: range + offset
        };
    };

    CategoryAxis.prototype.zoomRange = function zoomRange (rate) {
        var rangeIndices = this.totalRangeIndices();
        var ref = this.totalRange();
        var totalMin = ref.min;
        var totalMax = ref.max;
        var min = limitValue(rangeIndices.min + rate, totalMin, totalMax);
        var max = limitValue(rangeIndices.max - rate, totalMin, totalMax);

        if (max - min > 0) {
            return {
                min: min,
                max: max
            };
        }
    };

    CategoryAxis.prototype.scaleRange = function scaleRange (scale) {
        var range = this.options.categories.length;
        var delta = scale * range;

        return {
            min: -delta,
            max: range + delta
        };
    };

    CategoryAxis.prototype.labelsCount = function labelsCount () {
        var labelsRange = this.labelsRange();

        return labelsRange.max - labelsRange.min;
    };

    CategoryAxis.prototype.labelsRange = function labelsRange () {
        var options = this.options;
        var justified = options.justified;
        var labelOptions = options.labels;
        var ref = this.totalRangeIndices(true);
        var min = ref.min;
        var max = ref.max;
        var start = Math.floor(min);

        if (!justified) {
            min = Math.floor(min);
            max = Math.ceil(max);
        } else {
            min = Math.ceil(min);
            max = Math.floor(max);
        }

        var skip;

        if (min > labelOptions.skip) {
            skip = labelOptions.skip + labelOptions.step * Math.ceil((min - labelOptions.skip) / labelOptions.step);
        } else {
            skip = labelOptions.skip;
        }

        return {
            min: skip - start,
            max: (options.categories.length ? max + (justified ? 1 : 0) : 0) - start
        };
    };

    CategoryAxis.prototype.createAxisLabel = function createAxisLabel (index, labelOptions) {
        var options = this.options;
        var dataItem = options.dataItems ? options.dataItems[index] : null;
        var category = valueOrDefault(options.categories[index], "");
        var text = this.axisLabelText(category, dataItem, labelOptions);

        return new AxisLabel(category, text, index, dataItem, labelOptions);
    };

    CategoryAxis.prototype.shouldRenderNote = function shouldRenderNote (value) {
        var range = this.totalRangeIndices();

        return Math.floor(range.min) <= value && value <= Math.ceil(range.max);
    };

    CategoryAxis.prototype.noteSlot = function noteSlot (value) {
        var options = this.options;
        var index = value - Math.floor(options.min || 0);
        return this.getSlot(index);
    };

    CategoryAxis.prototype.arrangeNotes = function arrangeNotes () {
        Axis$$1.prototype.arrangeNotes.call(this);
        this.hideOutOfRangeNotes();
    };

    CategoryAxis.prototype.hideOutOfRangeNotes = function hideOutOfRangeNotes () {
        var ref = this;
        var notes = ref.notes;
        var box = ref.box;
        if (notes && notes.length) {
            var valueAxis = this.options.vertical ? Y : X;
            var start = box[valueAxis + 1];
            var end = box[valueAxis + 2];

            for (var idx = 0; idx < notes.length; idx++) {
                var note = notes[idx];
                if (note.box && (end < note.box[valueAxis + 1] || note.box[valueAxis + 2] < start)) {
                    note.hide();
                }
            }
        }
    };

    CategoryAxis.prototype.pan = function pan (delta) {
        var range = this.totalRangeIndices(true);
        var ref = this.scaleOptions();
        var scale = ref.scale;
        var offset = round(delta / scale, DEFAULT_PRECISION);
        var totalRange = this.totalRange();
        var min = range.min + offset;
        var max = range.max + offset;

        return this.limitRange(min, max, 0, totalRange.max, offset);
    };

    CategoryAxis.prototype.pointsRange = function pointsRange (start, end) {
        var ref = this.options;
        var reverse = ref.reverse;
        var vertical = ref.vertical;
        var valueAxis = vertical ? Y : X;
        var range = this.totalRangeIndices(true);
        var ref$1 = this.scaleOptions();
        var scale = ref$1.scale;
        var box = ref$1.box;
        var lineStart = box[valueAxis + (reverse ? 2 : 1)];

        var diffStart = start[valueAxis] - lineStart;
        var diffEnd = end[valueAxis] - lineStart;

        var min = range.min + diffStart / scale;
        var max = range.min + diffEnd / scale;
        var rangeMin = Math.min(min, max);
        var rangeMax = Math.max(min, max);

        if (rangeMax - rangeMin >= MIN_CATEGORY_POINTS_RANGE) {
            return {
                min: rangeMin,
                max: rangeMax
            };
        }
    };

    CategoryAxis.prototype.valueRange = function valueRange () {
        return this.range();
    };

    CategoryAxis.prototype.totalIndex = function totalIndex (value) {
        var options = this.options;
        var index = this._categoriesMap ?
            this._categoriesMap.get(value) : indexOf(value, options.srcCategories);

        return index;
    };

    CategoryAxis.prototype.currentRangeIndices = function currentRangeIndices () {
        var options = this.options;
        var min = 0;

        if (isNumber(options.min)) {
            min = Math.floor(options.min);
        }

        var max;
        if (isNumber(options.max)) {
            max = options.justified ? Math.floor(options.max) : Math.ceil(options.max) - 1;
        } else {
            max = this.totalCount() - 1;
        }

        return {
            min: min,
            max: max
        };
    };

    CategoryAxis.prototype.mapCategories = function mapCategories () {
        if (!this._categoriesMap) {
            var map$$1 = this._categoriesMap = new HashMap();
            var srcCategories = this.options.srcCategories;
            for (var idx = 0; idx < srcCategories.length; idx++) {
                map$$1.set(srcCategories[idx], idx);
            }
        }
    };

    CategoryAxis.prototype.totalCount = function totalCount () {
        return Math.max(this.options.srcCategories.length, this._seriesMax || 0);
    };

    return CategoryAxis;
}(Axis));

setDefaultOptions(CategoryAxis, {
    type: "category",
    vertical: false,
    majorGridLines: {
        visible: false,
        width: 1,
        color: BLACK
    },
    labels: {
        zIndex: 1
    },
    justified: false,
    _deferLabels: true
});

var COORDINATE_LIMIT = 300000;

var DateLabelFormats = {
    milliseconds: "HH:mm:ss.fff",
    seconds: "HH:mm:ss",
    minutes: "HH:mm",
    hours: "HH:mm",
    days: "M/d",
    weeks: "M/d",
    months: "MMM 'yy",
    years: "yyyy"
};

var ZERO_THRESHOLD = 0.2;

var AUTO = "auto";
var BASE_UNITS = [
    MILLISECONDS, SECONDS, MINUTES, HOURS, DAYS, WEEKS, MONTHS, YEARS
];
var FIT = "fit";


function categoryRange(categories) {
    var range = categories._range;
    if (!range) {
        range = categories._range = sparseArrayLimits(categories);
        range.min = toDate(range.min);
        range.max = toDate(range.max);
    }

    return range;
}

var EmptyDateRange = function EmptyDateRange(options) {
    this.options = options;
};

EmptyDateRange.prototype.displayIndices = function displayIndices () {
    return {
        min: 0,
        max: 1
    };
};

EmptyDateRange.prototype.displayRange = function displayRange () {
    return {};
};

EmptyDateRange.prototype.total = function total () {
    return {};
};

EmptyDateRange.prototype.valueRange = function valueRange () {
    return {};
};

EmptyDateRange.prototype.valueIndex = function valueIndex () {
    return -1;
};

EmptyDateRange.prototype.values = function values () {
    return [];
};

EmptyDateRange.prototype.totalIndex = function totalIndex () {
    return -1;
};

EmptyDateRange.prototype.valuesCount = function valuesCount () {
    return 0;
};

EmptyDateRange.prototype.totalCount = function totalCount () {
    return 0;
};

EmptyDateRange.prototype.dateAt = function dateAt () {
    return null;
};

var DateRange = function DateRange(start, end, options) {
    this.options = options;
    options.baseUnitStep = options.baseUnitStep || 1;

    var roundToBaseUnit = options.roundToBaseUnit;
    var justified = options.justified;

    this.start = addDuration(start, 0, options.baseUnit, options.weekStartDay);
    var lowerEnd = this.roundToTotalStep(end);
    var expandEnd = !justified && dateEquals(end, lowerEnd) && !options.justifyEnd;

    this.end = this.roundToTotalStep(end, !justified, expandEnd ? 1 : 0);

    var min = options.min || start;
    this.valueStart = this.roundToTotalStep(min);
    this.displayStart = roundToBaseUnit ? this.valueStart : min;

    var max = options.max;
    if (!max) {
        this.valueEnd = lowerEnd;
        this.displayEnd = roundToBaseUnit || expandEnd ? this.end : end;
    } else {
        this.valueEnd = this.roundToTotalStep(max, false, !justified && dateEquals(max, this.roundToTotalStep(max)) ? -1 : 0);
        this.displayEnd = roundToBaseUnit ? this.roundToTotalStep(max, !justified) : options.max;
    }

    if (this.valueEnd < this.valueStart) {
        this.valueEnd = this.valueStart;
    }
    if (this.displayEnd <= this.displayStart) {
        this.displayEnd = this.roundToTotalStep(this.displayStart, false, 1);
    }
};

DateRange.prototype.displayRange = function displayRange () {
    return {
        min: this.displayStart,
        max: this.displayEnd
    };
};

DateRange.prototype.displayIndices = function displayIndices () {
    if (!this._indices) {
        var options = this.options;

        var baseUnit = options.baseUnit;
            var baseUnitStep = options.baseUnitStep;

        var minIdx = dateIndex(this.displayStart, this.valueStart, baseUnit, baseUnitStep);
        var maxIdx = dateIndex(this.displayEnd, this.valueStart, baseUnit, baseUnitStep);

        this._indices = { min: minIdx, max: maxIdx };
    }

    return this._indices;
};

DateRange.prototype.total = function total () {
    return {
        min: this.start,
        max: this.end
    };
};

DateRange.prototype.totalCount = function totalCount () {
    var last$$1 = this.totalIndex(this.end);

    return last$$1 + (this.options.justified ? 1 : 0);
};

DateRange.prototype.valueRange = function valueRange () {
    return {
        min: this.valueStart,
        max: this.valueEnd
    };
};

DateRange.prototype.valueIndex = function valueIndex (value) {
    var options = this.options;
    return Math.floor(dateIndex(value, this.valueStart, options.baseUnit, options.baseUnitStep));
};

DateRange.prototype.totalIndex = function totalIndex (value) {
    var options = this.options;
    return Math.floor(dateIndex(value, this.start, options.baseUnit, options.baseUnitStep));
};

DateRange.prototype.dateIndex = function dateIndex$1 (value) {
    var options = this.options;
    return dateIndex(value, this.valueStart, options.baseUnit, options.baseUnitStep);
};

DateRange.prototype.valuesCount = function valuesCount () {
    var maxIdx = this.valueIndex(this.valueEnd);

    return maxIdx + 1;
};

DateRange.prototype.values = function values () {
    var values = this._values;
    if (!values) {
        var options = this.options;
        var range = this.valueRange();
        this._values = values = [];

        for (var date = range.min; date <= range.max;) {
            values.push(date);
            date = addDuration(date, options.baseUnitStep, options.baseUnit, options.weekStartDay);
        }
    }

    return values;
};

DateRange.prototype.dateAt = function dateAt (index, total) {
    var options = this.options;

    return addDuration(total ? this.start : this.valueStart, options.baseUnitStep * index, options.baseUnit, options.weekStartDay);
};

DateRange.prototype.roundToTotalStep = function roundToTotalStep (value, upper, next) {
    var ref = this.options;
        var baseUnit = ref.baseUnit;
        var baseUnitStep = ref.baseUnitStep;
        var weekStartDay = ref.weekStartDay;
    var start = this.start;

    var step = dateIndex(value, start, baseUnit, baseUnitStep);
    var roundedStep = upper ? Math.ceil(step) : Math.floor(step);

    if (next) {
        roundedStep += next;
    }

    return addDuration(start, roundedStep * baseUnitStep, baseUnit, weekStartDay);
};

function autoBaseUnit(options, startUnit, startStep) {
    var categoryLimits = categoryRange(options.categories);
    var span = (options.max || categoryLimits.max) - (options.min || categoryLimits.min);
    var autoBaseUnitSteps = options.autoBaseUnitSteps;
    var maxDateGroups = options.maxDateGroups;
    var autoUnit = options.baseUnit === FIT;
    var autoUnitIx = startUnit ? BASE_UNITS.indexOf(startUnit) : 0;
    var baseUnit = autoUnit ? BASE_UNITS[autoUnitIx++] : options.baseUnit;
    var units = span / TIME_PER_UNIT[baseUnit];
    var totalUnits = units;
    var unitSteps, step, nextStep;

    while (!step || units >= maxDateGroups) {
        unitSteps = unitSteps || autoBaseUnitSteps[baseUnit].slice(0);

        do {
            nextStep = unitSteps.shift();
        } while (nextStep && startUnit === baseUnit && nextStep < startStep);

        if (nextStep) {
            step = nextStep;
            units = totalUnits / step;
        } else if (baseUnit === last(BASE_UNITS)) {
            step = Math.ceil(totalUnits / maxDateGroups);
            break;
        } else if (autoUnit) {
            baseUnit = BASE_UNITS[autoUnitIx++] || last(BASE_UNITS);
            totalUnits = span / TIME_PER_UNIT[baseUnit];
            unitSteps = null;
        } else {
            if (units > maxDateGroups) {
                step = Math.ceil(totalUnits / maxDateGroups);
            }
            break;
        }
    }

    options.baseUnitStep = step;
    options.baseUnit = baseUnit;
}

function defaultBaseUnit(options) {
    var categories = options.categories;
    var count = defined(categories) ? categories.length : 0;
    var minDiff = MAX_VALUE;
    var lastCategory, unit;

    for (var categoryIx = 0; categoryIx < count; categoryIx++) {
        var category = categories[categoryIx];

        if (category && lastCategory) {
            var diff = absoluteDateDiff(category, lastCategory);
            if (diff > 0) {
                minDiff = Math.min(minDiff, diff);

                if (minDiff >= TIME_PER_YEAR) {
                    unit = YEARS;
                } else if (minDiff >= TIME_PER_MONTH - TIME_PER_DAY * 3) {
                    unit = MONTHS;
                } else if (minDiff >= TIME_PER_WEEK) {
                    unit = WEEKS;
                } else if (minDiff >= TIME_PER_DAY) {
                    unit = DAYS;
                } else if (minDiff >= TIME_PER_HOUR) {
                    unit = HOURS;
                } else if (minDiff >= TIME_PER_MINUTE) {
                    unit = MINUTES;
                } else {
                    unit = SECONDS;
                }
            }
        }

        lastCategory = category;
    }

    options.baseUnit = unit || DAYS;
}

function initUnit(options) {
    var baseUnit = (options.baseUnit || "").toLowerCase();
    var useDefault = baseUnit !== FIT && !inArray(baseUnit, BASE_UNITS);

    if (useDefault) {
        defaultBaseUnit(options);
    }

    if (baseUnit === FIT || options.baseUnitStep === AUTO) {
        autoBaseUnit(options);
    }

    return options;
}

var DateCategoryAxis = (function (CategoryAxis$$1) {
    function DateCategoryAxis () {
        CategoryAxis$$1.apply(this, arguments);
    }

    if ( CategoryAxis$$1 ) DateCategoryAxis.__proto__ = CategoryAxis$$1;
    DateCategoryAxis.prototype = Object.create( CategoryAxis$$1 && CategoryAxis$$1.prototype );
    DateCategoryAxis.prototype.constructor = DateCategoryAxis;

    DateCategoryAxis.prototype.clone = function clone () {
        var copy = new DateCategoryAxis(Object.assign({}, this.options), this.chartService);
        copy.createLabels();

        return copy;
    };

    DateCategoryAxis.prototype.categoriesHash = function categoriesHash () {
        var start = this.dataRange.total().min;
        return this.options.baseUnit + this.options.baseUnitStep + start;
    };

    DateCategoryAxis.prototype.initUserOptions = function initUserOptions (options) {
        return options;
    };

    DateCategoryAxis.prototype.initFields = function initFields () {
        CategoryAxis$$1.prototype.initFields.call(this);

        var chartService = this.chartService;
        var intlService = chartService.intl;
        var options = this.options;

        var categories = options.categories || [];
        if (!categories._parsed) {
            categories = parseDates(intlService, categories);
            categories._parsed = true;
        }

        options = deepExtend({
            roundToBaseUnit: true
        }, options, {
            categories: categories,
            min: parseDate(intlService, options.min),
            max: parseDate(intlService, options.max),
            weekStartDay: firstDay(options, intlService)
        });

        if (chartService.panning && chartService.isPannable(options.vertical ? Y : X)) {
            options.roundToBaseUnit = false;
        }

        options.userSetBaseUnit = options.userSetBaseUnit || options.baseUnit;
        options.userSetBaseUnitStep = options.userSetBaseUnitStep || options.baseUnitStep;

        this.options = options;
        options.srcCategories = categories;

        if (categories.length > 0) {
            var range = categoryRange(categories);
            var maxDivisions = options.maxDivisions;

            this.dataRange = new DateRange(range.min, range.max, initUnit(options));

            if (maxDivisions) {
                var dataRange = this.dataRange.displayRange();

                var divisionOptions = Object.assign({}, options, {
                    justified: true,
                    roundToBaseUnit: false,
                    baseUnit: 'fit',
                    min: dataRange.min,
                    max: dataRange.max,
                    maxDateGroups: maxDivisions
                });

                var dataRangeOptions = this.dataRange.options;

                autoBaseUnit(divisionOptions, dataRangeOptions.baseUnit, dataRangeOptions.baseUnitStep);

                this.divisionRange = new DateRange(range.min, range.max, divisionOptions);
            } else {
                this.divisionRange = this.dataRange;
            }

        } else {
            options.baseUnit = options.baseUnit || DAYS;
            this.dataRange = this.divisionRange = new EmptyDateRange(options);
        }
    };

    DateCategoryAxis.prototype.tickIndices = function tickIndices (stepSize) {
        var ref = this;
        var dataRange = ref.dataRange;
        var divisionRange = ref.divisionRange;
        var valuesCount = divisionRange.valuesCount();

        if (!this.options.maxDivisions || !valuesCount) {
            return CategoryAxis$$1.prototype.tickIndices.call(this, stepSize);
        }

        var indices = [];
        var values = divisionRange.values();
        var offset = 0;

        if (!this.options.justified) {
            values = values.concat(divisionRange.dateAt(valuesCount));
            offset = 0.5;//align ticks to the center of not justified categories
        }

        for (var idx = 0; idx < values.length; idx++) {
            indices.push(dataRange.dateIndex(values[idx]) + offset);
            if (stepSize !== 1 && idx >= 1) {
                var last$$1 = indices.length - 1;
                indices.splice(idx, 0, indices[last$$1 - 1] + (indices[last$$1] - indices[last$$1 - 1]) * stepSize);
            }
        }

        return indices;
    };

    DateCategoryAxis.prototype.shouldRenderNote = function shouldRenderNote (value) {
        var range = this.range();
        var categories = this.options.categories || [];

        return dateComparer(value, range.min) >= 0 && dateComparer(value, range.max) <= 0 && categories.length;
    };

    DateCategoryAxis.prototype.parseNoteValue = function parseNoteValue (value) {
        return parseDate(this.chartService.intl, value);
    };

    DateCategoryAxis.prototype.noteSlot = function noteSlot (value) {
        return this.getSlot(value);
    };

    DateCategoryAxis.prototype.translateRange = function translateRange (delta) {
        var options = this.options;
        var baseUnit = options.baseUnit;
        var weekStartDay = options.weekStartDay;
        var vertical = options.vertical;
        var lineBox = this.lineBox();
        var size = vertical ? lineBox.height() : lineBox.width();
        var range = this.range();
        var scale = size / (range.max - range.min);
        var offset = round(delta / scale, DEFAULT_PRECISION);

        if (range.min && range.max) {
            var from = addTicks(options.min || range.min, offset);
            var to = addTicks(options.max || range.max, offset);

            range = {
                min: addDuration(from, 0, baseUnit, weekStartDay),
                max: addDuration(to, 0, baseUnit, weekStartDay)
            };
        }

        return range;
    };

    DateCategoryAxis.prototype.scaleRange = function scaleRange (delta) {
        var rounds = Math.abs(delta);
        var result = this.range();
        var from = result.min;
        var to = result.max;

        if (from && to) {
            while (rounds--) {
                var range = dateDiff(from, to);
                var step = Math.round(range * 0.1);
                if (delta < 0) {
                    from = addTicks(from, step);
                    to = addTicks(to, -step);
                } else {
                    from = addTicks(from, -step);
                    to = addTicks(to, step);
                }
            }

            result = { min: from, max: to };
        }

        return result;
    };

    DateCategoryAxis.prototype.labelsRange = function labelsRange () {
        return {
            min: this.options.labels.skip,
            max: this.divisionRange.valuesCount()
        };
    };

    DateCategoryAxis.prototype.pan = function pan (delta) {
        if (this.isEmpty()) {
            return null;
        }

        var options = this.options;
        var lineBox = this.lineBox();
        var size = options.vertical ? lineBox.height() : lineBox.width();
        var ref = this.dataRange.displayRange();
        var min = ref.min;
        var max = ref.max;
        var totalLimits = this.dataRange.total();
        var scale = size / (max - min);
        var offset = round(delta / scale, DEFAULT_PRECISION) * (options.reverse ? -1 : 1);
        var from = addTicks(min, offset);
        var to = addTicks(max, offset);

        var panRange = this.limitRange(toTime(from), toTime(to), toTime(totalLimits.min), toTime(totalLimits.max), offset);

        if (panRange) {
            panRange.min = toDate(panRange.min);
            panRange.max = toDate(panRange.max);
            panRange.baseUnit = options.baseUnit;
            panRange.baseUnitStep = options.baseUnitStep || 1;
            panRange.userSetBaseUnit = options.userSetBaseUnit;
            panRange.userSetBaseUnitStep = options.userSetBaseUnitStep;

            return panRange;
        }
    };

    DateCategoryAxis.prototype.pointsRange = function pointsRange (start, end) {
        if (this.isEmpty()) {
            return null;
        }

        var pointsRange = CategoryAxis$$1.prototype.pointsRange.call(this, start, end);
        var datesRange = this.dataRange.displayRange();
        var indicesRange = this.dataRange.displayIndices();
        var scale = dateDiff(datesRange.max, datesRange.min) / (indicesRange.max - indicesRange.min);
        var options = this.options;

        var min = addTicks(datesRange.min, pointsRange.min * scale);
        var max = addTicks(datesRange.min, pointsRange.max * scale);

        return {
            min: min,
            max: max,
            baseUnit: options.userSetBaseUnit || options.baseUnit,
            baseUnitStep: options.userSetBaseUnitStep || options.baseUnitStep
        };
    };

    DateCategoryAxis.prototype.zoomRange = function zoomRange (delta) {
        if (this.isEmpty()) {
            return null;
        }

        var options = this.options;
        var fit = options.userSetBaseUnit === FIT;
        var totalLimits = this.dataRange.total();
        var ref = this.dataRange.displayRange();
        var rangeMin = ref.min;
        var rangeMax = ref.max;
        var ref$1 = this.dataRange.options;
        var weekStartDay = ref$1.weekStartDay;
        var baseUnit = ref$1.baseUnit;
        var baseUnitStep = ref$1.baseUnitStep;
        var min = addDuration(rangeMin, delta * baseUnitStep, baseUnit, weekStartDay);
        var max = addDuration(rangeMax, -delta * baseUnitStep, baseUnit, weekStartDay);

        if (fit) {
            var autoBaseUnitSteps = options.autoBaseUnitSteps;
            var maxDateGroups = options.maxDateGroups;

            var maxDiff = last(autoBaseUnitSteps[baseUnit]) * maxDateGroups * TIME_PER_UNIT[baseUnit];
            var rangeDiff = dateDiff(rangeMax, rangeMin);
            var diff = dateDiff(max, min);
            var baseUnitIndex = BASE_UNITS.indexOf(baseUnit);
            var autoBaseUnitStep, ticks;

            if (diff < TIME_PER_UNIT[baseUnit] && baseUnit !== MILLISECONDS) {
                baseUnit = BASE_UNITS[baseUnitIndex - 1];
                autoBaseUnitStep = last(autoBaseUnitSteps[baseUnit]);
                ticks = (rangeDiff - (maxDateGroups - 1) * autoBaseUnitStep * TIME_PER_UNIT[baseUnit]) / 2;
                min = addTicks(rangeMin, ticks);
                max = addTicks(rangeMax, -ticks);

            } else if (diff > maxDiff && baseUnit !== YEARS) {
                var stepIndex = 0;

                do {
                    baseUnitIndex++;
                    baseUnit = BASE_UNITS[baseUnitIndex];
                    stepIndex = 0;
                    ticks = 2 * TIME_PER_UNIT[baseUnit];
                    do {
                        autoBaseUnitStep = autoBaseUnitSteps[baseUnit][stepIndex];
                        stepIndex++;
                    } while (stepIndex < autoBaseUnitSteps[baseUnit].length && ticks * autoBaseUnitStep < rangeDiff);
                } while (baseUnit !== YEARS && ticks * autoBaseUnitStep < rangeDiff);

                ticks = (ticks * autoBaseUnitStep - rangeDiff) / 2;
                if (ticks > 0) {
                    min = addTicks(rangeMin, -ticks);
                    max = addTicks(rangeMax, ticks);
                    min = addTicks(min, limitValue(max, totalLimits.min, totalLimits.max) - max);
                    max = addTicks(max, limitValue(min, totalLimits.min, totalLimits.max) - min);
                }
            }
        }

        if (min < totalLimits.min) {
            min = totalLimits.min;
        }
        if (max > totalLimits.max) {
            max = totalLimits.max;
        }

        if (min && max && dateDiff(max, min) > 0) {
            return {
                min: min,
                max: max,
                baseUnit: options.userSetBaseUnit || options.baseUnit,
                baseUnitStep: options.userSetBaseUnitStep || options.baseUnitStep
            };
        }
    };

    DateCategoryAxis.prototype.range = function range () {
        return this.dataRange.displayRange();
    };

    DateCategoryAxis.prototype.createAxisLabel = function createAxisLabel (index, labelOptions) {
        var options = this.options;
        var dataItem = options.dataItems && !options.maxDivisions ? options.dataItems[index] : null;
        var date = this.divisionRange.dateAt(index);
        var unitFormat = labelOptions.dateFormats[this.divisionRange.options.baseUnit];

        labelOptions.format = labelOptions.format || unitFormat;
        var text = this.axisLabelText(date, dataItem, labelOptions);
        if (text) {
            return new AxisLabel(date, text, index, dataItem, labelOptions);
        }
    };

    DateCategoryAxis.prototype.categoryIndex = function categoryIndex (value) {
        return this.dataRange.valueIndex(value);
    };

    DateCategoryAxis.prototype.slot = function slot (from, to, limit) {
        var dateRange = this.dataRange;
        var start = from;
        var end = to;

        if (start instanceof Date) {
            start = dateRange.dateIndex(start);
        }

        if (end instanceof Date) {
            end = dateRange.dateIndex(end);
        }

        var slot = this.getSlot(start, end, limit);
        if (slot) {
            return slot.toRect();
        }
    };

    DateCategoryAxis.prototype.getSlot = function getSlot (a, b, limit) {
        var start = a;
        var end = b;

        if (typeof start === OBJECT) {
            start = this.categoryIndex(start);
        }

        if (typeof end === OBJECT) {
            end = this.categoryIndex(end);
        }

        return CategoryAxis$$1.prototype.getSlot.call(this, start, end, limit);
    };

    DateCategoryAxis.prototype.valueRange = function valueRange () {
        var options = this.options;
        var range = categoryRange(options.srcCategories);

        return {
            min: toDate(range.min),
            max: toDate(range.max)
        };
    };

    DateCategoryAxis.prototype.categoryAt = function categoryAt (index, total) {
        return this.dataRange.dateAt(index, total);
    };

    DateCategoryAxis.prototype.categoriesCount = function categoriesCount () {
        return this.dataRange.valuesCount();
    };

    DateCategoryAxis.prototype.rangeIndices = function rangeIndices () {
        return this.dataRange.displayIndices();
    };

    DateCategoryAxis.prototype.labelsBetweenTicks = function labelsBetweenTicks () {
        return !this.divisionRange.options.justified;
    };

    DateCategoryAxis.prototype.prepareUserOptions = function prepareUserOptions () {
        if (this.isEmpty()) {
            return;
        }

        this.options.categories = this.dataRange.values();
    };

    DateCategoryAxis.prototype.getCategory = function getCategory (point) {
        var index = this.pointCategoryIndex(point);

        if (index === null) {
            return null;
        }

        return this.dataRange.dateAt(index);
    };

    DateCategoryAxis.prototype.totalIndex = function totalIndex (value) {
        return this.dataRange.totalIndex(value);
    };

    DateCategoryAxis.prototype.currentRangeIndices = function currentRangeIndices () {
        var range = this.dataRange.valueRange();
        return {
            min: this.dataRange.totalIndex(range.min),
            max: this.dataRange.totalIndex(range.max)
        };
    };

    DateCategoryAxis.prototype.totalRange = function totalRange () {
        return this.dataRange.total();
    };

    DateCategoryAxis.prototype.totalCount = function totalCount () {
        return this.dataRange.totalCount();
    };

    DateCategoryAxis.prototype.isEmpty = function isEmpty () {
        return !this.options.srcCategories.length;
    };

    DateCategoryAxis.prototype.roundedRange = function roundedRange () {
        if (this.options.roundToBaseUnit !== false || this.isEmpty()) {
            return this.range();
        }

        var options = this.options;
        var datesRange = categoryRange(options.srcCategories);

        var dateRange = new DateRange(datesRange.min, datesRange.max, Object.assign({}, options, {
            justified: false,
            roundToBaseUnit: true,
            justifyEnd: options.justified
        }));

        return dateRange.displayRange();
    };

    return DateCategoryAxis;
}(CategoryAxis));

setDefaultOptions(DateCategoryAxis, {
    type: DATE,
    labels: {
        dateFormats: DateLabelFormats
    },
    autoBaseUnitSteps: {
        milliseconds: [ 1, 10, 100 ],
        seconds: [ 1, 2, 5, 15, 30 ],
        minutes: [ 1, 2, 5, 15, 30 ],
        hours: [ 1, 2, 3 ],
        days: [ 1, 2, 3 ],
        weeks: [ 1, 2 ],
        months: [ 1, 2, 3, 6 ],
        years: [ 1, 2, 3, 5, 10, 25, 50 ]
    },
    maxDateGroups: 10
});

function autoAxisMin(min, max, narrow) {
    if (!min && !max) {
        return 0;
    }

    var axisMin;

    if (min >= 0 && max >= 0) {
        var minValue = min === max ? 0 : min;

        var diff = (max - minValue) / max;
        if (narrow === false || (!narrow && diff > ZERO_THRESHOLD)) {
            return 0;
        }

        axisMin = Math.max(0, minValue - ((max - minValue) / 2));
    } else {
        axisMin = min;
    }

    return axisMin;
}

function autoAxisMax(min, max, narrow) {
    if (!min && !max) {
        return 1;
    }

    var axisMax;

    if (min <= 0 && max <= 0) {
        var maxValue = min === max ? 0 : max;

        var diff = Math.abs((maxValue - min) / maxValue);
        if (narrow === false || (!narrow && diff > ZERO_THRESHOLD)) {
            return 0;
        }

        axisMax = Math.min(0, maxValue - ((min - maxValue) / 2));
    } else {
        axisMax = max;
    }

    return axisMax;
}

function floor(value, step) {
    return round(Math.floor(value / step) * step, DEFAULT_PRECISION);
}

function ceil(value, step) {
    return round(Math.ceil(value / step) * step, DEFAULT_PRECISION);
}

function limitCoordinate(value) {
    return Math.max(Math.min(value, COORDINATE_LIMIT), -COORDINATE_LIMIT);
}

var MIN_VALUE_RANGE = Math.pow(10, -DEFAULT_PRECISION + 1);

var NumericAxis = (function (Axis$$1) {
    function NumericAxis(seriesMin, seriesMax, options, chartService) {
        Axis$$1.call(this, Object.assign({}, options, {
            seriesMin: seriesMin,
            seriesMax: seriesMax
        }), chartService);
    }

    if ( Axis$$1 ) NumericAxis.__proto__ = Axis$$1;
    NumericAxis.prototype = Object.create( Axis$$1 && Axis$$1.prototype );
    NumericAxis.prototype.constructor = NumericAxis;

    NumericAxis.prototype.initUserOptions = function initUserOptions (options) {
        var autoOptions = autoAxisOptions(options.seriesMin, options.seriesMax, options);
        this.totalOptions = totalAxisOptions(autoOptions, options);

        return axisOptions(autoOptions, options);
    };

    NumericAxis.prototype.initFields = function initFields () {
        this.totalMin = this.totalOptions.min;
        this.totalMax = this.totalOptions.max;
        this.totalMajorUnit = this.totalOptions.majorUnit;
        this.seriesMin = this.options.seriesMin;
        this.seriesMax = this.options.seriesMax;
    };

    NumericAxis.prototype.clone = function clone () {
        return new NumericAxis(
            this.seriesMin,
            this.seriesMax,
            Object.assign({}, this.options),
            this.chartService
        );
    };

    NumericAxis.prototype.startValue = function startValue () {
        return 0;
    };

    NumericAxis.prototype.range = function range () {
        var options = this.options;
        return { min: options.min, max: options.max };
    };

    NumericAxis.prototype.getDivisions = function getDivisions (stepValue) {
        if (stepValue === 0) {
            return 1;
        }

        var options = this.options;
        var range = options.max - options.min;

        return Math.floor(round(range / stepValue, COORD_PRECISION)) + 1;
    };

    NumericAxis.prototype.getTickPositions = function getTickPositions (unit, skipUnit) {
        var options = this.options;
        var vertical = options.vertical;
        var reverse = options.reverse;
        var lineBox = this.lineBox();
        var lineSize = vertical ? lineBox.height() : lineBox.width();
        var range = options.max - options.min;
        var scale = lineSize / range;
        var step = unit * scale;
        var divisions = this.getDivisions(unit);
        var dir = (vertical ? -1 : 1) * (reverse ? -1 : 1);
        var startEdge = dir === 1 ? 1 : 2;
        var positions = [];
        var pos = lineBox[(vertical ? Y : X) + startEdge];
        var skipStep = 0;

        if (skipUnit) {
            skipStep = skipUnit / unit;
        }

        for (var idx = 0; idx < divisions; idx++) {
            if (idx % skipStep !== 0) {
                positions.push(round(pos, COORD_PRECISION));
            }

            pos = pos + step * dir;
        }

        return positions;
    };

    NumericAxis.prototype.getMajorTickPositions = function getMajorTickPositions () {
        return this.getTickPositions(this.options.majorUnit);
    };

    NumericAxis.prototype.getMinorTickPositions = function getMinorTickPositions () {
        return this.getTickPositions(this.options.minorUnit);
    };

    NumericAxis.prototype.getSlot = function getSlot (a, b, limit) {
        if ( limit === void 0 ) limit = false;

        var options = this.options;
        var vertical = options.vertical;
        var reverse = options.reverse;
        var valueAxis = vertical ? Y : X;
        var lineBox = this.lineBox();
        var lineStart = lineBox[valueAxis + (reverse ? 2 : 1)];
        var lineSize = vertical ? lineBox.height() : lineBox.width();
        var dir = reverse ? -1 : 1;
        var step = dir * (lineSize / (options.max - options.min));
        var slotBox = new Box(lineBox.x1, lineBox.y1, lineBox.x1, lineBox.y1);

        var start = a;
        var end = b;

        if (!defined(start)) {
            start = end || 0;
        }

        if (!defined(end)) {
            end = start || 0;
        }

        if (limit) {
            start = Math.max(Math.min(start, options.max), options.min);
            end = Math.max(Math.min(end, options.max), options.min);
        }

        var p1, p2;

        if (vertical) {
            p1 = options.max - Math.max(start, end);
            p2 = options.max - Math.min(start, end);
        } else {
            p1 = Math.min(start, end) - options.min;
            p2 = Math.max(start, end) - options.min;
        }

        slotBox[valueAxis + 1] = limitCoordinate(lineStart + step * (reverse ? p2 : p1));
        slotBox[valueAxis + 2] = limitCoordinate(lineStart + step * (reverse ? p1 : p2));

        return slotBox;
    };

    NumericAxis.prototype.getValue = function getValue (point) {
        var options = this.options;
        var vertical = options.vertical;
        var reverse = options.reverse;
        var max = Number(options.max);
        var min = Number(options.min);
        var valueAxis = vertical ? Y : X;
        var lineBox = this.lineBox();
        var lineStart = lineBox[valueAxis + (reverse ? 2 : 1)];
        var lineSize = vertical ? lineBox.height() : lineBox.width();
        var dir = reverse ? -1 : 1;
        var offset = dir * (point[valueAxis] - lineStart);
        var step = (max - min) / lineSize;
        var valueOffset = offset * step;

        if (offset < 0 || offset > lineSize) {
            return null;
        }

        var value = vertical ?
                max - valueOffset :
                min + valueOffset;

        return round(value, DEFAULT_PRECISION);
    };

    NumericAxis.prototype.translateRange = function translateRange (delta) {
        var options = this.options;
        var vertical = options.vertical;
        var reverse = options.reverse;
        var max = options.max;
        var min = options.min;
        var lineBox = this.lineBox();
        var size = vertical ? lineBox.height() : lineBox.width();
        var range = max - min;
        var scale = size / range;
        var offset = round(delta / scale, DEFAULT_PRECISION);

        if ((vertical || reverse) && !(vertical && reverse )) {
            offset = -offset;
        }

        return {
            min: min + offset,
            max: max + offset,
            offset: offset
        };
    };

    NumericAxis.prototype.scaleRange = function scaleRange (delta) {
        var options = this.options;
        var offset = -delta * options.majorUnit;

        return {
            min: options.min - offset,
            max: options.max + offset
        };
    };

    NumericAxis.prototype.labelsCount = function labelsCount () {
        return this.getDivisions(this.options.majorUnit);
    };

    NumericAxis.prototype.createAxisLabel = function createAxisLabel (index, labelOptions) {
        var options = this.options;
        var value = round(options.min + (index * options.majorUnit), DEFAULT_PRECISION);
        var text = this.axisLabelText(value, null, labelOptions);

        return new AxisLabel(value, text, index, null, labelOptions);
    };

    NumericAxis.prototype.shouldRenderNote = function shouldRenderNote (value) {
        var range = this.range();
        return range.min <= value && value <= range.max;
    };

    NumericAxis.prototype.pan = function pan (delta) {
        var range = this.translateRange(delta);
        return this.limitRange(range.min, range.max, this.totalMin, this.totalMax, range.offset);
    };

    NumericAxis.prototype.pointsRange = function pointsRange (start, end) {
        var startValue = this.getValue(start);
        var endValue = this.getValue(end);
        var min = Math.min(startValue, endValue);
        var max = Math.max(startValue, endValue);

        if (this.isValidRange(min, max)) {
            return {
                min: min,
                max: max
            };
        }
    };

    NumericAxis.prototype.zoomRange = function zoomRange (delta) {
        var ref = this;
        var totalMin = ref.totalMin;
        var totalMax = ref.totalMax;
        var newRange = this.scaleRange(delta);
        var min = limitValue(newRange.min, totalMin, totalMax);
        var max = limitValue(newRange.max, totalMin, totalMax);

        if (this.isValidRange(min, max)) {
            return {
                min: min,
                max: max
            };
        }
    };

    NumericAxis.prototype.isValidRange = function isValidRange (min, max) {
        return max - min > MIN_VALUE_RANGE;
    };

    return NumericAxis;
}(Axis));

function autoAxisOptions(seriesMin, seriesMax, options) {
    var narrowRange = options.narrowRange;

    var autoMin = autoAxisMin(seriesMin, seriesMax, narrowRange);
    var autoMax = autoAxisMax(seriesMin, seriesMax, narrowRange);

    var majorUnit = autoMajorUnit(autoMin, autoMax);
    var autoOptions = {
        majorUnit: majorUnit
    };

    if (options.roundToMajorUnit !== false) {
        if (autoMin < 0 && remainderClose(autoMin, majorUnit, 1 / 3)) {
            autoMin -= majorUnit;
        }

        if (autoMax > 0 && remainderClose(autoMax, majorUnit, 1 / 3)) {
            autoMax += majorUnit;
        }
    }

    autoOptions.min = floor(autoMin, majorUnit);
    autoOptions.max = ceil(autoMax, majorUnit);

    return autoOptions;
}

function totalAxisOptions(autoOptions, options) {
    return {
        min: defined(options.min) ? Math.min(autoOptions.min, options.min) : autoOptions.min,
        max: defined(options.max) ? Math.max(autoOptions.max, options.max) : autoOptions.max,
        majorUnit: autoOptions.majorUnit
    };
}

function clearNullValues(options, fields) {
    for (var idx = 0; idx < fields.length; idx++) {
        var field = fields[idx];
        if (options[field] === null) {
            options[field] = undefined;
        }
    }
}

function axisOptions(autoOptions, userOptions) {
    var options = userOptions;
    var userSetMin, userSetMax;

    if (userOptions) {
        clearNullValues(userOptions, [ 'min', 'max' ]);

        userSetMin = defined(userOptions.min);
        userSetMax = defined(userOptions.max);

        var userSetLimits = userSetMin || userSetMax;

        if (userSetLimits) {
            if (userOptions.min === userOptions.max) {
                if (userOptions.min > 0) {
                    userOptions.min = 0;
                } else {
                    userOptions.max = 1;
                }
            }
        }

        if (userOptions.majorUnit) {
            autoOptions.min = floor(autoOptions.min, userOptions.majorUnit);
            autoOptions.max = ceil(autoOptions.max, userOptions.majorUnit);
        } else if (userSetLimits) {
            options = deepExtend(autoOptions, userOptions);

            // Determine an auto major unit after min/max have been set
            autoOptions.majorUnit = autoMajorUnit(options.min, options.max);
        }
    }

    autoOptions.minorUnit = (options.majorUnit || autoOptions.majorUnit) / 5;

    var result = deepExtend(autoOptions, options);
    if (result.min >= result.max) {
        if (userSetMin && !userSetMax) {
            result.max = result.min + result.majorUnit;
        } else if (!userSetMin && userSetMax) {
            result.min = result.max - result.majorUnit;
        }
    }

    return result;
}

function remainderClose(value, divisor, ratio) {
    var remainder = round(Math.abs(value % divisor), DEFAULT_PRECISION);
    var threshold = divisor * (1 - ratio);

    return remainder === 0 || remainder > threshold;
}

setDefaultOptions(NumericAxis, {
    type: "numeric",
    min: 0,
    max: 1,
    vertical: true,
    majorGridLines: {
        visible: true,
        width: 1,
        color: BLACK
    },
    labels: {
        format: "#.####################"
    },
    zIndex: 1
});

var DateValueAxis = (function (Axis$$1) {
    function DateValueAxis(seriesMin, seriesMax, axisOptions, chartService) {
        var min = toDate(seriesMin);
        var max = toDate(seriesMax);

        var intlService = chartService.intl;
        var options = axisOptions || {};
        options = deepExtend(options || {}, {
            min: parseDate(intlService, options.min),
            max: parseDate(intlService, options.max),
            axisCrossingValue: parseDates(intlService, options.axisCrossingValues || options.axisCrossingValue),
            weekStartDay: firstDay(options, intlService)
        });
        options = applyDefaults$1(min, max, options);

        Axis$$1.call(this, options, chartService);

        this.intlService = intlService;
        this.seriesMin = min;
        this.seriesMax = max;

        var weekStartDay = options.weekStartDay || 0;
        this.totalMin = toTime(floorDate(toTime(min) - 1, options.baseUnit, weekStartDay));
        this.totalMax = toTime(ceilDate(toTime(max) + 1, options.baseUnit, weekStartDay));
    }

    if ( Axis$$1 ) DateValueAxis.__proto__ = Axis$$1;
    DateValueAxis.prototype = Object.create( Axis$$1 && Axis$$1.prototype );
    DateValueAxis.prototype.constructor = DateValueAxis;

    DateValueAxis.prototype.clone = function clone () {
        return new DateValueAxis(this.seriesMin, this.seriesMax, Object.assign({}, this.options), this.chartService);
    };

    DateValueAxis.prototype.range = function range () {
        var options = this.options;
        return { min: options.min, max: options.max };
    };

    DateValueAxis.prototype.getDivisions = function getDivisions (stepValue) {
        var options = this.options;

        return Math.floor(
            duration(options.min, options.max, options.baseUnit) / stepValue + 1
        );
    };

    DateValueAxis.prototype.getTickPositions = function getTickPositions (step) {
        var options = this.options;
        var vertical = options.vertical;
        var lineBox = this.lineBox();
        var dir = (vertical ? -1 : 1) * (options.reverse ? -1 : 1);
        var startEdge = dir === 1 ? 1 : 2;
        var start = lineBox[(vertical ? Y : X) + startEdge];
        var divisions = this.getDivisions(step);
        var timeRange = dateDiff(options.max, options.min);
        var lineSize = vertical ? lineBox.height() : lineBox.width();
        var scale = lineSize / timeRange;
        var weekStartDay = options.weekStartDay || 0;

        var positions = [ start ];
        for (var i = 1; i < divisions; i++) {
            var date = addDuration(options.min, i * step, options.baseUnit, weekStartDay);
            var pos = start + dateDiff(date, options.min) * scale * dir;

            positions.push(round(pos, COORD_PRECISION));
        }

        return positions;
    };

    DateValueAxis.prototype.getMajorTickPositions = function getMajorTickPositions () {
        return this.getTickPositions(this.options.majorUnit);
    };

    DateValueAxis.prototype.getMinorTickPositions = function getMinorTickPositions () {
        return this.getTickPositions(this.options.minorUnit);
    };

    DateValueAxis.prototype.getSlot = function getSlot (a, b, limit) {
        return NumericAxis.prototype.getSlot.call(
            this, parseDate(this.intlService, a), parseDate(this.intlService, b), limit
        );
    };

    DateValueAxis.prototype.getValue = function getValue (point) {
        var value = NumericAxis.prototype.getValue.call(this, point);

        return value !== null ? toDate(value) : null;
    };

    DateValueAxis.prototype.labelsCount = function labelsCount () {
        return this.getDivisions(this.options.majorUnit);
    };

    DateValueAxis.prototype.createAxisLabel = function createAxisLabel (index, labelOptions) {
        var options = this.options;
        var offset = index * options.majorUnit;
        var weekStartDay = options.weekStartDay || 0;
        var date = options.min;

        if (offset > 0) {
            date = addDuration(date, offset, options.baseUnit, weekStartDay);
        }

        var unitFormat = labelOptions.dateFormats[options.baseUnit];
        labelOptions.format = labelOptions.format || unitFormat;

        var text = this.axisLabelText(date, null, labelOptions);
        return new AxisLabel(date, text, index, null, labelOptions);
    };

    DateValueAxis.prototype.translateRange = function translateRange (delta, exact) {
        var options = this.options;
        var baseUnit = options.baseUnit;
        var weekStartDay = options.weekStartDay || 0;
        var lineBox = this.lineBox();
        var size = options.vertical ? lineBox.height() : lineBox.width();
        var range = this.range();
        var scale = size / dateDiff(range.max, range.min);
        var offset = round(delta / scale, DEFAULT_PRECISION) * (options.reverse ? -1 : 1);
        var from = addTicks(options.min, offset);
        var to = addTicks(options.max, offset);

        if (!exact) {
            from = addDuration(from, 0, baseUnit, weekStartDay);
            to = addDuration(to, 0, baseUnit, weekStartDay);
        }

        return {
            min: from,
            max: to,
            offset: offset
        };
    };

    DateValueAxis.prototype.scaleRange = function scaleRange (delta) {
        var ref = this.options;
        var from = ref.min;
        var to = ref.max;
        var rounds = Math.abs(delta);

        while (rounds--) {
            var range = dateDiff(from, to);
            var step = Math.round(range * 0.1);
            if (delta < 0) {
                from = addTicks(from, step);
                to = addTicks(to, -step);
            } else {
                from = addTicks(from, -step);
                to = addTicks(to, step);
            }
        }

        return { min: from, max: to };
    };

    DateValueAxis.prototype.shouldRenderNote = function shouldRenderNote (value) {
        var range = this.range();

        return dateComparer(value, range.min) >= 0 && dateComparer(value, range.max) <= 0;
    };

    DateValueAxis.prototype.pan = function pan (delta) {
        var range = this.translateRange(delta, true);
        var limittedRange = this.limitRange(toTime(range.min), toTime(range.max), this.totalMin, this.totalMax, range.offset);

        if (limittedRange) {
            return {
                min: toDate(limittedRange.min),
                max: toDate(limittedRange.max)
            };
        }
    };

    DateValueAxis.prototype.pointsRange = function pointsRange (start, end) {
        var startValue = this.getValue(start);
        var endValue = this.getValue(end);
        var min = Math.min(startValue, endValue);
        var max = Math.max(startValue, endValue);

        return {
            min: toDate(min),
            max: toDate(max)
        };
    };

    DateValueAxis.prototype.zoomRange = function zoomRange (delta) {
        var range = this.scaleRange(delta);
        var min = toDate(limitValue(toTime(range.min), this.totalMin, this.totalMax));
        var max = toDate(limitValue(toTime(range.max), this.totalMin, this.totalMax));

        return {
            min: min,
            max: max
        };
    };

    return DateValueAxis;
}(Axis));

function timeUnits(delta) {
    var unit = HOURS;

    if (delta >= TIME_PER_YEAR) {
        unit = YEARS;
    } else if (delta >= TIME_PER_MONTH) {
        unit = MONTHS;
    } else if (delta >= TIME_PER_WEEK) {
        unit = WEEKS;
    } else if (delta >= TIME_PER_DAY) {
        unit = DAYS;
    }

    return unit;
}

function applyDefaults$1(seriesMin, seriesMax, options) {
    var min = options.min || seriesMin;
    var max = options.max || seriesMax;
    var baseUnit = options.baseUnit || (max && min ? timeUnits(absoluteDateDiff(max, min)) : HOURS);
    var baseUnitTime = TIME_PER_UNIT[baseUnit];
    var weekStartDay = options.weekStartDay || 0;
    var autoMin = floorDate(toTime(min) - 1, baseUnit, weekStartDay) || toDate(max);
    var autoMax = ceilDate(toTime(max) + 1, baseUnit, weekStartDay);
    var userMajorUnit = options.majorUnit ? options.majorUnit : undefined;
    var majorUnit = userMajorUnit || ceil(
                        autoMajorUnit(autoMin.getTime(), autoMax.getTime()),
                        baseUnitTime
                    ) / baseUnitTime;
    var actualUnits = duration(autoMin, autoMax, baseUnit);
    var totalUnits = ceil(actualUnits, majorUnit);
    var unitsToAdd = totalUnits - actualUnits;
    var head = Math.floor(unitsToAdd / 2);
    var tail = unitsToAdd - head;

    if (!options.baseUnit) {
        delete options.baseUnit;
    }

    options.baseUnit = options.baseUnit || baseUnit;
    options.min = options.min || addDuration(autoMin, -head, baseUnit, weekStartDay);
    options.max = options.max || addDuration(autoMax, tail, baseUnit, weekStartDay);
    options.minorUnit = options.minorUnit || majorUnit / 5;
    options.majorUnit = majorUnit;

    return options;
}

setDefaultOptions(DateValueAxis, {
    type: DATE,
    majorGridLines: {
        visible: true,
        width: 1,
        color: BLACK
    },
    labels: {
        dateFormats: DateLabelFormats
    }
});

var DEFAULT_MAJOR_UNIT = 10;

var LogarithmicAxis = (function (Axis$$1) {
    function LogarithmicAxis(seriesMin, seriesMax, options, chartService) {

        var axisOptions = deepExtend({ majorUnit: DEFAULT_MAJOR_UNIT, min: seriesMin, max: seriesMax }, options);
        var base = axisOptions.majorUnit;
        var autoMax = autoAxisMax$1(seriesMax, base);
        var autoMin = autoAxisMin$1(seriesMin, seriesMax, axisOptions);
        var range = initRange(autoMin, autoMax, axisOptions, options);

        axisOptions.max = range.max;
        axisOptions.min = range.min;
        axisOptions.minorUnit = options.minorUnit || round(base - 1, DEFAULT_PRECISION);

        Axis$$1.call(this, axisOptions, chartService);

        this.totalMin = defined(options.min) ? Math.min(autoMin, options.min) : autoMin;
        this.totalMax = defined(options.max) ? Math.max(autoMax, options.max) : autoMax;
        this.logMin = round(log(range.min, base), DEFAULT_PRECISION);
        this.logMax = round(log(range.max, base), DEFAULT_PRECISION);
        this.seriesMin = seriesMin;
        this.seriesMax = seriesMax;

        this.createLabels();
    }

    if ( Axis$$1 ) LogarithmicAxis.__proto__ = Axis$$1;
    LogarithmicAxis.prototype = Object.create( Axis$$1 && Axis$$1.prototype );
    LogarithmicAxis.prototype.constructor = LogarithmicAxis;

    LogarithmicAxis.prototype.clone = function clone () {
        return new LogarithmicAxis(
            this.seriesMin,
            this.seriesMax,
            Object.assign({}, this.options),
            this.chartService
        );
    };

    LogarithmicAxis.prototype.startValue = function startValue () {
        return this.options.min;
    };

    LogarithmicAxis.prototype.getSlot = function getSlot (a, b, limit) {
        var ref = this;
        var options = ref.options;
        var logMin = ref.logMin;
        var logMax = ref.logMax;
        var reverse = options.reverse;
        var vertical = options.vertical;
        var base = options.majorUnit;
        var valueAxis = vertical ? Y : X;
        var lineBox = this.lineBox();
        var lineStart = lineBox[valueAxis + (reverse ? 2 : 1)];
        var lineSize = vertical ? lineBox.height() : lineBox.width();
        var dir = reverse ? -1 : 1;
        var step = dir * (lineSize / (logMax - logMin));
        var slotBox = new Box(lineBox.x1, lineBox.y1, lineBox.x1, lineBox.y1);
        var start = a;
        var end = b;

        if (!defined(start)) {
            start = end || 1;
        }

        if (!defined(end)) {
            end = start || 1;
        }

        if (start <= 0 || end <= 0) {
            return null;
        }

        if (limit) {
            start = Math.max(Math.min(start, options.max), options.min);
            end = Math.max(Math.min(end, options.max), options.min);
        }

        start = log(start, base);
        end = log(end, base);

        var p1, p2;

        if (vertical) {
            p1 = logMax - Math.max(start, end);
            p2 = logMax - Math.min(start, end);
        } else {
            p1 = Math.min(start, end) - logMin;
            p2 = Math.max(start, end) - logMin;
        }

        slotBox[valueAxis + 1] = limitCoordinate(lineStart + step * (reverse ? p2 : p1));
        slotBox[valueAxis + 2] = limitCoordinate(lineStart + step * (reverse ? p1 : p2));

        return slotBox;
    };

    LogarithmicAxis.prototype.getValue = function getValue (point) {
        var ref = this;
        var options = ref.options;
        var logMin = ref.logMin;
        var logMax = ref.logMax;
        var reverse = options.reverse;
        var vertical = options.vertical;
        var base = options.majorUnit;
        var lineBox = this.lineBox();
        var dir = vertical === reverse ? 1 : -1;
        var startEdge = dir === 1 ? 1 : 2;
        var lineSize = vertical ? lineBox.height() : lineBox.width();
        var step = ((logMax - logMin) / lineSize);
        var valueAxis = vertical ? Y : X;
        var lineStart = lineBox[valueAxis + startEdge];
        var offset = dir * (point[valueAxis] - lineStart);
        var valueOffset = offset * step;

        if (offset < 0 || offset > lineSize) {
            return null;
        }

        var value = logMin + valueOffset;

        return round(Math.pow(base, value), DEFAULT_PRECISION);
    };

    LogarithmicAxis.prototype.range = function range () {
        var options = this.options;
        return { min: options.min, max: options.max };
    };

    LogarithmicAxis.prototype.scaleRange = function scaleRange (delta) {
        var base = this.options.majorUnit;
        var offset = -delta;

        return {
            min: Math.pow(base, this.logMin - offset),
            max: Math.pow(base, this.logMax + offset)
        };
    };

    LogarithmicAxis.prototype.translateRange = function translateRange (delta) {
        var ref = this;
        var options = ref.options;
        var logMin = ref.logMin;
        var logMax = ref.logMax;
        var reverse = options.reverse;
        var vertical = options.vertical;
        var base = options.majorUnit;
        var lineBox = this.lineBox();
        var size = vertical ? lineBox.height() : lineBox.width();
        var scale = size / (logMax - logMin);
        var offset = round(delta / scale, DEFAULT_PRECISION);

        if ((vertical || reverse) && !(vertical && reverse )) {
            offset = -offset;
        }

        return {
            min: Math.pow(base, logMin + offset),
            max: Math.pow(base, logMax + offset),
            offset: offset
        };
    };

    LogarithmicAxis.prototype.labelsCount = function labelsCount () {
        var floorMax = Math.floor(this.logMax);
        var count = Math.floor(floorMax - this.logMin) + 1;

        return count;
    };

    LogarithmicAxis.prototype.getMajorTickPositions = function getMajorTickPositions () {
        var ticks = [];

        this.traverseMajorTicksPositions(function (position) {
            ticks.push(position);
        }, { step: 1, skip: 0 });

        return ticks;
    };

    LogarithmicAxis.prototype.createTicks = function createTicks (lineGroup) {
        var options = this.options;
        var majorTicks = options.majorTicks;
        var minorTicks = options.minorTicks;
        var vertical = options.vertical;
        var mirror = options.labels.mirror;
        var lineBox = this.lineBox();
        var ticks = [];
        var tickLineOptions = {
            // TODO
            // _alignLines: options._alignLines,
            vertical: vertical
        };

        function render(tickPosition, tickOptions) {
            tickLineOptions.tickX = mirror ? lineBox.x2 : lineBox.x2 - tickOptions.size;
            tickLineOptions.tickY = mirror ? lineBox.y1 - tickOptions.size : lineBox.y1;
            tickLineOptions.position = tickPosition;

            lineGroup.append(createAxisTick(tickLineOptions, tickOptions));
        }

        if (majorTicks.visible) {
            this.traverseMajorTicksPositions(render, majorTicks);
        }

        if (minorTicks.visible) {
            this.traverseMinorTicksPositions(render, minorTicks);
        }

        return ticks;
    };

    LogarithmicAxis.prototype.createGridLines = function createGridLines (altAxis) {
        var options = this.options;
        var minorGridLines = options.minorGridLines;
        var majorGridLines = options.majorGridLines;
        var vertical = options.vertical;
        var lineBox = altAxis.lineBox();
        var lineOptions = {
            lineStart: lineBox[vertical ? "x1" : "y1"],
            lineEnd: lineBox[vertical ? "x2" : "y2"],
            vertical: vertical
        };
        var majorTicks = [];

        var container = this.gridLinesVisual();
        function render(tickPosition, gridLine) {
            if (!inArray(tickPosition, majorTicks)) {
                lineOptions.position = tickPosition;
                container.append(createAxisGridLine(lineOptions, gridLine));

                majorTicks.push(tickPosition);
            }
        }

        if (majorGridLines.visible) {
            this.traverseMajorTicksPositions(render, majorGridLines);
        }

        if (minorGridLines.visible) {
            this.traverseMinorTicksPositions(render, minorGridLines);
        }

        return container.children;
    };

    LogarithmicAxis.prototype.traverseMajorTicksPositions = function traverseMajorTicksPositions (callback, tickOptions) {
        var ref = this._lineOptions();
        var lineStart = ref.lineStart;
        var step = ref.step;
        var ref$1 = this;
        var logMin = ref$1.logMin;
        var logMax = ref$1.logMax;

        for (var power = Math.ceil(logMin) + tickOptions.skip; power <= logMax; power += tickOptions.step) {
            var position = round(lineStart + step * (power - logMin), DEFAULT_PRECISION);
            callback(position, tickOptions);
        }
    };

    LogarithmicAxis.prototype.traverseMinorTicksPositions = function traverseMinorTicksPositions (callback, tickOptions) {
        var this$1 = this;

        var ref = this.options;
        var min = ref.min;
        var max = ref.max;
        var minorUnit = ref.minorUnit;
        var base = ref.majorUnit;
        var ref$1 = this._lineOptions();
        var lineStart = ref$1.lineStart;
        var step = ref$1.step;
        var ref$2 = this;
        var logMin = ref$2.logMin;
        var logMax = ref$2.logMax;
        var start = Math.floor(logMin);

        for (var power = start; power < logMax; power++) {
            var minorOptions = this$1._minorIntervalOptions(power);
            for (var idx = tickOptions.skip; idx < minorUnit; idx += tickOptions.step) {
                var value = minorOptions.value + idx * minorOptions.minorStep;
                if (value > max) {
                    break;
                }
                if (value >= min) {
                    var position = round(lineStart + step * (log(value, base) - logMin), DEFAULT_PRECISION);
                    callback(position, tickOptions);
                }
            }
        }
    };

    LogarithmicAxis.prototype.createAxisLabel = function createAxisLabel (index, labelOptions) {
        var power = Math.ceil(this.logMin + index);
        var value = Math.pow(this.options.majorUnit, power);
        var text = this.axisLabelText(value, null, labelOptions);

        return new AxisLabel(value, text, index, null, labelOptions);
    };

    LogarithmicAxis.prototype.shouldRenderNote = function shouldRenderNote (value) {
        var range = this.range();
        return range.min <= value && value <= range.max;
    };

    LogarithmicAxis.prototype.pan = function pan (delta) {
        var range = this.translateRange(delta);
        return this.limitRange(range.min, range.max, this.totalMin, this.totalMax, range.offset);
    };

    LogarithmicAxis.prototype.pointsRange = function pointsRange (start, end) {
        var startValue = this.getValue(start);
        var endValue = this.getValue(end);
        var min = Math.min(startValue, endValue);
        var max = Math.max(startValue, endValue);

        return {
            min: min,
            max: max
        };
    };

    LogarithmicAxis.prototype.zoomRange = function zoomRange (delta) {
        var ref = this;
        var options = ref.options;
        var totalMin = ref.totalMin;
        var totalMax = ref.totalMax;
        var newRange = this.scaleRange(delta);
        var min = limitValue(newRange.min, totalMin, totalMax);
        var max = limitValue(newRange.max, totalMin, totalMax);
        var base = options.majorUnit;
        var acceptOptionsRange = max > min && options.min && options.max && (round(log(options.max, base) - log(options.min, base), DEFAULT_PRECISION) < 1);
        var acceptNewRange = !(options.min === totalMin && options.max === totalMax) && round(log(max, base) - log(min, base), DEFAULT_PRECISION) >= 1;

        if (acceptOptionsRange || acceptNewRange) {
            return {
                min: min,
                max: max
            };
        }
    };

    LogarithmicAxis.prototype._minorIntervalOptions = function _minorIntervalOptions (power) {
        var ref = this.options;
        var minorUnit = ref.minorUnit;
        var base = ref.majorUnit;
        var value = Math.pow(base, power);
        var nextValue = Math.pow(base, power + 1);
        var difference = nextValue - value;
        var minorStep = difference / minorUnit;

        return {
            value: value,
            minorStep: minorStep
        };
    };

    LogarithmicAxis.prototype._lineOptions = function _lineOptions () {
        var ref = this.options;
        var reverse = ref.reverse;
        var vertical = ref.vertical;
        var valueAxis = vertical ? Y : X;
        var lineBox = this.lineBox();
        var dir = vertical === reverse ? 1 : -1;
        var startEdge = dir === 1 ? 1 : 2;
        var lineSize = vertical ? lineBox.height() : lineBox.width();
        var step = dir * (lineSize / (this.logMax - this.logMin));
        var lineStart = lineBox[valueAxis + startEdge];

        return {
            step: step,
            lineStart: lineStart,
            lineBox: lineBox
        };
    };

    return LogarithmicAxis;
}(Axis));

function initRange(autoMin, autoMax, axisOptions, options) {
    var min = axisOptions.min;
    var max = axisOptions.max;

    if (defined(axisOptions.axisCrossingValue) && axisOptions.axisCrossingValue <= 0) {
        throwNegativeValuesError();
    }

    if (!defined(options.max)) {
        max = autoMax;
    } else if (options.max <= 0) {
        throwNegativeValuesError();
    }

    if (!defined(options.min)) {
        min = autoMin;
    } else if (options.min <= 0) {
        throwNegativeValuesError();
    }

    return {
        min: min,
        max: max
    };
}

function autoAxisMin$1(min, max, options) {
    var base = options.majorUnit;
    var autoMin = min;
    if (min <= 0) {
        autoMin = max <= 1 ? Math.pow(base, -2) : 1;
    } else if (!options.narrowRange) {
        autoMin = Math.pow(base, Math.floor(log(min, base)));
    }
    return autoMin;
}

function autoAxisMax$1(max, base) {
    var logMaxRemainder = round(log(max, base), DEFAULT_PRECISION) % 1;
    var autoMax;
    if (max <= 0) {
        autoMax = base;
    } else if (logMaxRemainder !== 0 && (logMaxRemainder < 0.3 || logMaxRemainder > 0.9)) {
        autoMax = Math.pow(base, log(max, base) + 0.2);
    } else {
        autoMax = Math.pow(base, Math.ceil(log(max, base)));
    }

    return autoMax;
}

function throwNegativeValuesError() {
    throw new Error("Non positive values cannot be used for a logarithmic axis");
}

function log(y, x) {
    return Math.log(y) / Math.log(x);
}

setDefaultOptions(LogarithmicAxis, {
    type: "log",
    majorUnit: DEFAULT_MAJOR_UNIT,
    minorUnit: 1,
    axisCrossingValue: 1,
    vertical: true,
    majorGridLines: {
        visible: true,
        width: 1,
        color: BLACK
    },
    zIndex: 1,
    _deferLabels: true
});

var GridLinesMixin = {
    createGridLines: function(altAxis) {
        var options = this.options;
        var radius = Math.abs(this.box.center().y - altAxis.lineBox().y1);
        var gridLines = [];
        var skipMajor = false;
        var majorAngles, minorAngles;

        if (options.majorGridLines.visible) {
            majorAngles = this.majorGridLineAngles(altAxis);
            skipMajor = true;

            gridLines = this.renderMajorGridLines(
                majorAngles, radius, options.majorGridLines
            );
        }

        if (options.minorGridLines.visible) {
            minorAngles = this.minorGridLineAngles(altAxis, skipMajor);

            append$1(gridLines, this.renderMinorGridLines(
                minorAngles, radius, options.minorGridLines, altAxis, skipMajor
            ));
        }

        return gridLines;
    },

    renderMajorGridLines: function(angles, radius, options) {
        return this.renderGridLines(angles, radius, options);
    },

    renderMinorGridLines: function(angles, radius, options, altAxis, skipMajor) {
        var radiusCallback = this.radiusCallback && this.radiusCallback(radius, altAxis, skipMajor);
        return this.renderGridLines(angles, radius, options, radiusCallback);
    },

    renderGridLines: function(angles, radius, options, radiusCallback) {
        var style = {
            stroke: {
                width: options.width,
                color: options.color,
                dashType: options.dashType
            }
        };

        var center = this.box.center();
        var circle = new _progress_kendoDrawing.geometry.Circle([ center.x, center.y ], radius);
        var container = this.gridLinesVisual();

        for (var i = 0; i < angles.length; i++) {
            var line = new _progress_kendoDrawing.drawing.Path(style);
            if (radiusCallback) {
                circle.radius = radiusCallback(angles[i]);
            }

            line.moveTo(circle.center)
                .lineTo(circle.pointAt(angles[i] + 180));

            container.append(line);
        }

        return container.children;
    },

    gridLineAngles: function(altAxis, size, skip, step, skipAngles) {
        var this$1 = this;

        var divs = this.intervals(size, skip, step, skipAngles);
        var options = altAxis.options;
        var altAxisVisible = options.visible && (options.line || {}).visible !== false;

        return map(divs, function (d) {
            var alpha = this$1.intervalAngle(d);

            if (!altAxisVisible || alpha !== 90) {
                return alpha;
            }
        });
    }
};

var RadarCategoryAxis = (function (CategoryAxis$$1) {
    function RadarCategoryAxis () {
        CategoryAxis$$1.apply(this, arguments);
    }

    if ( CategoryAxis$$1 ) RadarCategoryAxis.__proto__ = CategoryAxis$$1;
    RadarCategoryAxis.prototype = Object.create( CategoryAxis$$1 && CategoryAxis$$1.prototype );
    RadarCategoryAxis.prototype.constructor = RadarCategoryAxis;

    RadarCategoryAxis.prototype.range = function range () {
        return { min: 0, max: this.options.categories.length };
    };

    RadarCategoryAxis.prototype.reflow = function reflow (box) {
        this.box = box;
        this.reflowLabels();
    };

    RadarCategoryAxis.prototype.lineBox = function lineBox () {
        return this.box;
    };

    RadarCategoryAxis.prototype.reflowLabels = function reflowLabels () {
        var this$1 = this;

        var ref = this;
        var labels = ref.labels;
        var labelOptions = ref.options.labels;
        var skip = labelOptions.skip || 0;
        var step = labelOptions.step || 1;
        var measureBox = new Box();

        for (var i = 0; i < labels.length; i++) {
            labels[i].reflow(measureBox);
            var labelBox = labels[i].box;

            labels[i].reflow(this$1.getSlot(skip + i * step).adjacentBox(
                0, labelBox.width(), labelBox.height()
            ));
        }
    };

    RadarCategoryAxis.prototype.intervals = function intervals (size, skipOption, stepOption, skipAngles) {
        if ( skipAngles === void 0 ) skipAngles = false;

        var options = this.options;
        var categories = options.categories.length;
        var divCount = categories / size || 1;
        var divAngle = 360 / divCount;
        var skip = skipOption || 0;
        var step = stepOption || 1;
        var divs = [];
        var angle = 0;

        for (var i = skip; i < divCount; i += step) {
            if (options.reverse) {
                angle = 360 - i * divAngle;
            } else {
                angle = i * divAngle;
            }

            angle = round(angle, COORD_PRECISION) % 360;

            if (!(skipAngles && inArray(angle, skipAngles))) {
                divs.push(angle);
            }
        }

        return divs;
    };

    RadarCategoryAxis.prototype.majorIntervals = function majorIntervals () {
        return this.intervals(1);
    };

    RadarCategoryAxis.prototype.minorIntervals = function minorIntervals () {
        return this.intervals(0.5);
    };

    RadarCategoryAxis.prototype.intervalAngle = function intervalAngle (interval) {
        return (360 + interval + this.options.startAngle) % 360;
    };

    RadarCategoryAxis.prototype.majorAngles = function majorAngles () {
        var this$1 = this;

        return map(this.majorIntervals(), function (interval) { return this$1.intervalAngle(interval); });
    };

    RadarCategoryAxis.prototype.createLine = function createLine () {
        return [];
    };

    RadarCategoryAxis.prototype.majorGridLineAngles = function majorGridLineAngles (altAxis) {
        var majorGridLines = this.options.majorGridLines;
        return this.gridLineAngles(altAxis, 1, majorGridLines.skip, majorGridLines.step);
    };

    RadarCategoryAxis.prototype.minorGridLineAngles = function minorGridLineAngles (altAxis, skipMajor) {
        var ref = this.options;
        var minorGridLines = ref.minorGridLines;
        var majorGridLines = ref.majorGridLines;
        var majorGridLineAngles = skipMajor ? this.intervals(1, majorGridLines.skip, majorGridLines.step) : null;

        return this.gridLineAngles(altAxis, 0.5, minorGridLines.skip, minorGridLines.step, majorGridLineAngles);
    };

    RadarCategoryAxis.prototype.radiusCallback = function radiusCallback (radius, altAxis, skipMajor) {
        if (altAxis.options.type !== ARC) {
            var minorAngle = rad(360 / (this.options.categories.length * 2));
            var minorRadius = Math.cos(minorAngle) * radius;
            var majorAngles = this.majorAngles();

            var radiusCallback = function(angle) {
                if (!skipMajor && inArray(angle, majorAngles)) {
                    return radius;
                }

                return minorRadius;
            };
            return radiusCallback;
        }
    };

    RadarCategoryAxis.prototype.createPlotBands = function createPlotBands () {
        var this$1 = this;

        var plotBands = this.options.plotBands || [];

        var group = this._plotbandGroup = new _progress_kendoDrawing.drawing.Group({
            zIndex: -1
        });

        for (var i = 0; i < plotBands.length; i++) {
            var band = plotBands[i];
            var slot = this$1.plotBandSlot(band);
            var singleSlot = this$1.getSlot(band.from);

            var head = band.from - Math.floor(band.from);
            slot.startAngle += head * singleSlot.angle;

            var tail = Math.ceil(band.to) - band.to;
            slot.angle -= (tail + head) * singleSlot.angle;

            var ring = ShapeBuilder.current.createRing(slot, {
                fill: {
                    color: band.color,
                    opacity: band.opacity
                },
                stroke: {
                    opacity: band.opacity
                }
            });
            group.append(ring);
        }

        this.appendVisual(group);
    };

    RadarCategoryAxis.prototype.plotBandSlot = function plotBandSlot (band) {
        return this.getSlot(band.from, band.to - 1);
    };

    RadarCategoryAxis.prototype.getSlot = function getSlot (from, to) {
        var options = this.options;
        var justified = options.justified;
        var box = this.box;
        var divs = this.majorAngles();
        var totalDivs = divs.length;
        var slotAngle = 360 / totalDivs;
        var fromValue = from;

        if (options.reverse && !justified) {
            fromValue = (fromValue + 1) % totalDivs;
        }

        fromValue = limitValue(Math.floor(fromValue), 0, totalDivs - 1);
        var slotStart = divs[fromValue];

        if (justified) {
            slotStart = slotStart - slotAngle / 2;

            if (slotStart < 0) {
                slotStart += 360;
            }
        }

        var toValue = limitValue(Math.ceil(to || fromValue), fromValue, totalDivs - 1);
        var slots = toValue - fromValue + 1;
        var angle = slotAngle * slots;

        return new Ring(box.center(), 0, box.height() / 2, slotStart, angle);
    };

    RadarCategoryAxis.prototype.slot = function slot (from, to) {
        var slot = this.getSlot(from, to);
        var startAngle = slot.startAngle + 180;
        var endAngle = startAngle + slot.angle;

        return new _progress_kendoDrawing.geometry.Arc([ slot.center.x, slot.center.y ], {
            startAngle: startAngle,
            endAngle: endAngle,
            radiusX: slot.radius,
            radiusY: slot.radius
        });
    };

    RadarCategoryAxis.prototype.pointCategoryIndex = function pointCategoryIndex (point) {
        var this$1 = this;

        var length = this.options.categories.length;
        var index = null;

        for (var i = 0; i < length; i++) {
            var slot = this$1.getSlot(i);
            if (slot.containsPoint(point)) {
                index = i;
                break;
            }
        }

        return index;
    };

    return RadarCategoryAxis;
}(CategoryAxis));

setDefaultOptions(RadarCategoryAxis, {
    startAngle: 90,
    labels: {
        margin: getSpacing(10)
    },
    majorGridLines: {
        visible: true
    },
    justified: true
});
deepExtend(RadarCategoryAxis.prototype, GridLinesMixin);

var PolarAxis = (function (Axis$$1) {
    function PolarAxis(options, chartService) {
        Axis$$1.call(this, options, chartService);

        var instanceOptions = this.options;

        instanceOptions.minorUnit = instanceOptions.minorUnit || instanceOptions.majorUnit / 2;
    }

    if ( Axis$$1 ) PolarAxis.__proto__ = Axis$$1;
    PolarAxis.prototype = Object.create( Axis$$1 && Axis$$1.prototype );
    PolarAxis.prototype.constructor = PolarAxis;

    PolarAxis.prototype.getDivisions = function getDivisions (stepValue) {
        return NumericAxis.prototype.getDivisions.call(this, stepValue) - 1;
    };

    PolarAxis.prototype.reflow = function reflow (box) {
        this.box = box;
        this.reflowLabels();
    };

    PolarAxis.prototype.reflowLabels = function reflowLabels () {
        var this$1 = this;

        var ref = this;
        var options = ref.options;
        var labels = ref.labels;
        var labelOptions = ref.options.labels;
        var skip = labelOptions.skip || 0;
        var step = labelOptions.step || 1;

        var measureBox = new Box();
        var divs = this.intervals(options.majorUnit, skip, step);

        for (var i = 0; i < labels.length; i++) {
            labels[i].reflow(measureBox);
            var labelBox = labels[i].box;

            labels[i].reflow(this$1.getSlot(divs[i]).adjacentBox(0, labelBox.width(), labelBox.height()));
        }
    };

    PolarAxis.prototype.lineBox = function lineBox () {
        return this.box;
    };

    PolarAxis.prototype.intervals = function intervals (size, skipOption, stepOption, skipAngles) {
        if ( skipAngles === void 0 ) skipAngles = false;

        var min = this.options.min;
        var divisions = this.getDivisions(size);
        var divs = [];
        var skip = skipOption || 0;
        var step = stepOption || 1;

        for (var i = skip; i < divisions; i += step) {
            var current = (360 + min + i * size) % 360;
            if (!(skipAngles && inArray(current, skipAngles))) {
                divs.push(current);
            }
        }

        return divs;
    };

    PolarAxis.prototype.majorIntervals = function majorIntervals () {
        return this.intervals(this.options.majorUnit);
    };

    PolarAxis.prototype.minorIntervals = function minorIntervals () {
        return this.intervals(this.options.minorUnit);
    };

    PolarAxis.prototype.intervalAngle = function intervalAngle (i) {
        return (540 - i - this.options.startAngle) % 360;
    };

    PolarAxis.prototype.createLine = function createLine () {
        return [];
    };

    PolarAxis.prototype.majorGridLineAngles = function majorGridLineAngles (altAxis) {
        var majorGridLines = this.options.majorGridLines;
        return this.gridLineAngles(altAxis, this.options.majorUnit, majorGridLines.skip, majorGridLines.step);
    };

    PolarAxis.prototype.minorGridLineAngles = function minorGridLineAngles (altAxis, skipMajor) {
        var options = this.options;
        var minorGridLines = options.minorGridLines;
        var majorGridLines = options.majorGridLines;
        var majorGridLineAngles = skipMajor ? this.intervals(options.majorUnit, majorGridLines.skip, majorGridLines.step) : null;

        return this.gridLineAngles(altAxis, options.minorUnit, minorGridLines.skip, minorGridLines.step, majorGridLineAngles);
    };

    PolarAxis.prototype.plotBandSlot = function plotBandSlot (band) {
        return this.getSlot(band.from, band.to);
    };

    PolarAxis.prototype.getSlot = function getSlot (a, b) {
        var ref = this;
        var options = ref.options;
        var box = ref.box;
        var startAngle = options.startAngle;
        var start = limitValue(a, options.min, options.max);
        var end = limitValue(b || start, start, options.max);

        if (options.reverse) {
            start *= -1;
            end *= -1;
        }

        start = (540 - start - startAngle) % 360;
        end = (540 - end - startAngle) % 360;

        if (end < start) {
            var tmp = start;
            start = end;
            end = tmp;
        }

        return new Ring(box.center(), 0, box.height() / 2, start, end - start);
    };

    PolarAxis.prototype.slot = function slot (from, to) {
        if ( to === void 0 ) to = from;

        var options = this.options;
        var start = 360 - options.startAngle;
        var slot = this.getSlot(from, to);
        var min = Math.min(from, to);
        var max = Math.max(from, to);
        var startAngle, endAngle;

        if (options.reverse) {
            startAngle = min;
            endAngle = max;
        } else {
            startAngle = 360 - max;
            endAngle = 360 - min;
        }

        startAngle = (startAngle + start) % 360;
        endAngle = (endAngle + start) % 360;

        return new _progress_kendoDrawing.geometry.Arc([ slot.center.x, slot.center.y ], {
            startAngle: startAngle,
            endAngle: endAngle,
            radiusX: slot.radius,
            radiusY: slot.radius
        });
    };

    PolarAxis.prototype.getValue = function getValue (point) {
        var options = this.options;
        var center = this.box.center();
        var dx = point.x - center.x;
        var dy = point.y - center.y;
        var theta = Math.round(deg(Math.atan2(dy, dx)));
        var start = options.startAngle;

        if (!options.reverse) {
            theta *= -1;
            start *= -1;
        }

        return (theta + start + 360) % 360;
    };

    PolarAxis.prototype.valueRange = function valueRange () {
        return {
            min: 0,
            max: Math.PI * 2
        };
    };

    return PolarAxis;
}(Axis));

setDefaultOptions(PolarAxis, {
    type: "polar",
    startAngle: 0,
    reverse: false,
    majorUnit: 60,
    min: 0,
    max: 360,
    labels: {
        margin: getSpacing(10)
    },
    majorGridLines: {
        color: BLACK,
        visible: true,
        width: 1
    },
    minorGridLines: {
        color: "#aaa"
    }
});

deepExtend(PolarAxis.prototype, GridLinesMixin, {
    createPlotBands: RadarCategoryAxis.prototype.createPlotBands,
    majorAngles: RadarCategoryAxis.prototype.majorAngles,
    range: NumericAxis.prototype.range,
    labelsCount: NumericAxis.prototype.labelsCount,
    createAxisLabel: NumericAxis.prototype.createAxisLabel
});

var RadarNumericAxisMixin = {
    options: {
        majorGridLines: {
            visible: true
        }
    },

    createPlotBands: function() {
        var this$1 = this;

        var ref = this.options;
        var type = ref.majorGridLines.type;
        var plotBands = ref.plotBands; if ( plotBands === void 0 ) plotBands = [];
        var altAxis = this.plotArea.polarAxis;
        var majorAngles = altAxis.majorAngles();
        var center = altAxis.box.center();
        var group = this._plotbandGroup = new _progress_kendoDrawing.drawing.Group({
            zIndex: -1
        });

        for (var i = 0; i < plotBands.length; i++) {
            var band = plotBands[i];
            var bandStyle = {
                fill: {
                    color: band.color,
                    opacity: band.opacity
                },
                stroke: {
                    opacity: band.opacity
                }
            };

            var slot = this$1.getSlot(band.from, band.to, true);
            var ring = new Ring(center, center.y - slot.y2, center.y - slot.y1, 0, 360);

            var shape = (void 0);
            if (type === ARC) {
                shape = ShapeBuilder.current.createRing(ring, bandStyle);
            } else {
                shape = _progress_kendoDrawing.drawing.Path.fromPoints(this$1.plotBandPoints(ring, majorAngles), bandStyle).close();
            }

            group.append(shape);
        }

        this.appendVisual(group);
    },

    plotBandPoints: function(ring, angles) {
        var innerPoints = [];
        var outerPoints = [];
        var center = [ ring.center.x, ring.center.y ];
        var innerCircle = new _progress_kendoDrawing.geometry.Circle(center, ring.innerRadius);
        var outerCircle = new _progress_kendoDrawing.geometry.Circle(center, ring.radius);

        for (var i = 0; i < angles.length; i++) {
            innerPoints.push(innerCircle.pointAt(angles[i] + 180));
            outerPoints.push(outerCircle.pointAt(angles[i] + 180));
        }

        innerPoints.reverse();
        innerPoints.push(innerPoints[0]);
        outerPoints.push(outerPoints[0]);

        return outerPoints.concat(innerPoints);
    },

    createGridLines: function(altAxis) {
        var options = this.options;
        var majorTicks = this.radarMajorGridLinePositions();
        var majorAngles = altAxis.majorAngles();
        var center = altAxis.box.center();
        var gridLines = [];

        if (options.majorGridLines.visible) {
            gridLines = this.renderGridLines(
                center, majorTicks, majorAngles, options.majorGridLines
            );
        }

        if (options.minorGridLines.visible) {
            var minorTicks = this.radarMinorGridLinePositions();
            append$1(gridLines, this.renderGridLines(
                center, minorTicks, majorAngles, options.minorGridLines
            ));
        }

        return gridLines;
    },

    renderGridLines: function(center, ticks, angles, options) {
        var style = {
            stroke: {
                width: options.width,
                color: options.color,
                dashType: options.dashType
            }
        };
        var skip = options.skip; if ( skip === void 0 ) skip = 0;
        var step = options.step; if ( step === void 0 ) step = 0;
        var container = this.gridLinesVisual();

        for (var tickIx = skip; tickIx < ticks.length; tickIx += step) {
            var tickRadius = center.y - ticks[tickIx];
            if (tickRadius > 0) {
                var circle = new _progress_kendoDrawing.geometry.Circle([ center.x, center.y ], tickRadius);
                if (options.type === ARC) {
                    container.append(new _progress_kendoDrawing.drawing.Circle(circle, style));
                } else {
                    var line = new _progress_kendoDrawing.drawing.Path(style);
                    for (var angleIx = 0; angleIx < angles.length; angleIx++) {
                        line.lineTo(circle.pointAt(angles[angleIx] + 180));
                    }

                    line.close();
                    container.append(line);
                }
            }
        }

        return container.children;
    },

    getValue: function(point) {
        var lineBox = this.lineBox();
        var altAxis = this.plotArea.polarAxis;
        var majorAngles = altAxis.majorAngles();
        var center = altAxis.box.center();
        var radius = point.distanceTo(center);
        var distance = radius;

        if (this.options.majorGridLines.type !== ARC && majorAngles.length > 1) {
            var dx = point.x - center.x;
            var dy = point.y - center.y;
            var theta = (deg(Math.atan2(dy, dx)) + 540) % 360;

            majorAngles.sort(function(a, b) {
                return angularDistance(a, theta) - angularDistance(b, theta);
            });

            // Solve triangle (center, point, axis X) using one side (radius) and two angles.
            // Angles are derived from triangle (center, point, gridline X)
            var midAngle = angularDistance(majorAngles[0], majorAngles[1]) / 2;
            var alpha = angularDistance(theta, majorAngles[0]);
            var gamma = 90 - midAngle;
            var beta = 180 - alpha - gamma;

            distance = radius * (Math.sin(rad(beta)) / Math.sin(rad(gamma)));
        }

        return this.axisType().prototype.getValue.call(
            this, new Point(lineBox.x1, lineBox.y2 - distance)
        );
    }
};

function angularDistance(a, b) {
    return 180 - Math.abs(Math.abs(a - b) - 180);
}

var RadarNumericAxis = (function (NumericAxis$$1) {
    function RadarNumericAxis () {
        NumericAxis$$1.apply(this, arguments);
    }

    if ( NumericAxis$$1 ) RadarNumericAxis.__proto__ = NumericAxis$$1;
    RadarNumericAxis.prototype = Object.create( NumericAxis$$1 && NumericAxis$$1.prototype );
    RadarNumericAxis.prototype.constructor = RadarNumericAxis;

    RadarNumericAxis.prototype.radarMajorGridLinePositions = function radarMajorGridLinePositions () {
        return this.getTickPositions(this.options.majorUnit);
    };

    RadarNumericAxis.prototype.radarMinorGridLinePositions = function radarMinorGridLinePositions () {
        var options = this.options;
        var minorSkipStep = 0;

        if (options.majorGridLines.visible) {
            minorSkipStep = options.majorUnit;
        }
        return this.getTickPositions(options.minorUnit, minorSkipStep);
    };

    RadarNumericAxis.prototype.axisType = function axisType () {
        return NumericAxis$$1;
    };

    return RadarNumericAxis;
}(NumericAxis));

deepExtend(RadarNumericAxis.prototype, RadarNumericAxisMixin);

var RadarLogarithmicAxis = (function (LogarithmicAxis$$1) {
    function RadarLogarithmicAxis () {
        LogarithmicAxis$$1.apply(this, arguments);
    }

    if ( LogarithmicAxis$$1 ) RadarLogarithmicAxis.__proto__ = LogarithmicAxis$$1;
    RadarLogarithmicAxis.prototype = Object.create( LogarithmicAxis$$1 && LogarithmicAxis$$1.prototype );
    RadarLogarithmicAxis.prototype.constructor = RadarLogarithmicAxis;

    RadarLogarithmicAxis.prototype.radarMajorGridLinePositions = function radarMajorGridLinePositions () {
        var positions = [];

        this.traverseMajorTicksPositions(function(position) {
            positions.push(position);
        }, this.options.majorGridLines);

        return positions;
    };

    RadarLogarithmicAxis.prototype.radarMinorGridLinePositions = function radarMinorGridLinePositions () {
        var positions = [];

        this.traverseMinorTicksPositions(function(position) {
            positions.push(position);
        }, this.options.minorGridLines);

        return positions;
    };

    RadarLogarithmicAxis.prototype.axisType = function axisType () {
        return LogarithmicAxis$$1;
    };

    return RadarLogarithmicAxis;
}(LogarithmicAxis));

deepExtend(RadarLogarithmicAxis.prototype, RadarNumericAxisMixin);

var WEIGHT = 0.333;
var EXTREMUM_ALLOWED_DEVIATION = 0.01;

var CurveProcessor = (function (Class$$1) {
    function CurveProcessor(closed) {
        Class$$1.call(this);

        this.closed = closed;
    }

    if ( Class$$1 ) CurveProcessor.__proto__ = Class$$1;
    CurveProcessor.prototype = Object.create( Class$$1 && Class$$1.prototype );
    CurveProcessor.prototype.constructor = CurveProcessor;

    CurveProcessor.prototype.process = function process (dataPoints) {
        var this$1 = this;

        var points = dataPoints.slice(0);
        var segments = [];
        var closed = this.closed;
        var length = points.length;

        if (length > 2) {
            this.removeDuplicates(0, points);
            length = points.length;
        }

        if (length < 2 || (length === 2 && points[0].equals(points[1]))) {
            return segments;
        }

        var p0 = points[0];
        var p1 = points[1];
        var p2 = points[2];

        segments.push(new _progress_kendoDrawing.geometry.Segment(p0));

        while (p0.equals(points[length - 1])) {
            closed = true;
            points.pop();
            length--;
        }

        if (length === 2) {
            var tangent = this.tangent(p0,p1, X, Y);

            last(segments).controlOut(
                this.firstControlPoint(tangent, p0, p1, X, Y)
            );

            segments.push(new _progress_kendoDrawing.geometry.Segment(
                p1,
                this.secondControlPoint(tangent, p0, p1, X, Y)
            ));

            return segments;
        }

        var initialControlPoint, lastControlPoint;

        if (closed) {
            p0 = points[length - 1]; p1 = points[0]; p2 = points[1];
            var controlPoints = this.controlPoints(p0, p1, p2);
            initialControlPoint = controlPoints[1];
            lastControlPoint = controlPoints[0];
        } else {
            var tangent$1 = this.tangent(p0, p1, X,Y);
            initialControlPoint = this.firstControlPoint(tangent$1, p0, p1, X, Y);
        }

        var cp0 = initialControlPoint;
        for (var idx = 0; idx <= length - 3; idx++) {
            this$1.removeDuplicates(idx, points);
            length = points.length;
            if (idx + 3 <= length) {
                p0 = points[idx]; p1 = points[idx + 1]; p2 = points[idx + 2];
                var controlPoints$1 = this$1.controlPoints(p0,p1,p2);

                last(segments).controlOut(cp0);
                cp0 = controlPoints$1[1];

                var cp1 = controlPoints$1[0];
                segments.push(new _progress_kendoDrawing.geometry.Segment(p1, cp1));
            }
        }

        if (closed) {
            p0 = points[length - 2]; p1 = points[length - 1]; p2 = points[0];
            var controlPoints$2 = this.controlPoints(p0, p1, p2);

            last(segments).controlOut(cp0);
            segments.push(new _progress_kendoDrawing.geometry.Segment(
                p1,
                controlPoints$2[0]
            ));

            last(segments).controlOut(controlPoints$2[1]);
            segments.push(new _progress_kendoDrawing.geometry.Segment(
                p2,
                lastControlPoint
            ));
        } else {
            var tangent$2 = this.tangent(p1, p2, X, Y);

            last(segments).controlOut(cp0);
            segments.push(new _progress_kendoDrawing.geometry.Segment(
                p2,
                this.secondControlPoint(tangent$2, p1, p2, X, Y)
            ));
        }

        return segments;
    };

    CurveProcessor.prototype.removeDuplicates = function removeDuplicates (idx, points) {
        while (points[idx + 1] && (points[idx].equals(points[idx + 1]) || points[idx + 1].equals(points[idx + 2]))) {
            points.splice(idx + 1, 1);
        }
    };

    CurveProcessor.prototype.invertAxis = function invertAxis (p0, p1, p2) {
        var invertAxis = false;

        if (p0.x === p1.x) {
            invertAxis = true;
        } else if (p1.x === p2.x) {
            if ((p1.y < p2.y && p0.y <= p1.y) || (p2.y < p1.y && p1.y <= p0.y)) {
                invertAxis = true;
            }
        } else {
            var fn = this.lineFunction(p0,p1);
            var y2 = this.calculateFunction(fn, p2.x);
            if (!(p0.y <= p1.y && p2.y <= y2) &&
                !(p1.y <= p0.y && p2.y >= y2)) {
                invertAxis = true;
            }
        }

        return invertAxis;
    };

    CurveProcessor.prototype.isLine = function isLine (p0, p1, p2) {
        var fn = this.lineFunction(p0, p1);
        var y2 = this.calculateFunction(fn, p2.x);

        return (p0.x === p1.x && p1.x === p2.x) || round(y2, 1) === round(p2.y, 1);
    };

    CurveProcessor.prototype.lineFunction = function lineFunction (p1, p2) {
        var a = (p2.y - p1.y) / (p2.x - p1.x);
        var b = p1.y - a * p1.x;

        return [ b, a ];
    };

    CurveProcessor.prototype.controlPoints = function controlPoints (p0, p1, p2) {
        var xField = X;
        var yField = Y;
        var restrict = false;
        var switchOrientation = false;
        var tangent;

        if (this.isLine(p0, p1, p2)) {
            tangent = this.tangent(p0, p1, X, Y);
        } else {
            var monotonic = {
                x: this.isMonotonicByField(p0, p1, p2, X),
                y: this.isMonotonicByField(p0, p1, p2, Y)
            };

            if (monotonic.x && monotonic.y) {
                tangent = this.tangent(p0, p2, X, Y);
                restrict = true;
            } else {
                if (this.invertAxis(p0, p1, p2)) {
                    xField = Y;
                    yField = X;
                }

                if (monotonic[xField]) {
                    tangent = 0;
                } else {
                    var sign;
                    if ((p2[yField] < p0[yField] && p0[yField] <= p1[yField]) ||
                        (p0[yField] < p2[yField] && p1[yField] <= p0[yField])) {
                        sign = numberSign((p2[yField] - p0[yField]) * (p1[xField] - p0[xField]));
                    } else {
                        sign = -numberSign((p2[xField] - p0[xField]) * (p1[yField] - p0[yField]));
                    }

                    tangent = EXTREMUM_ALLOWED_DEVIATION * sign;
                    switchOrientation = true;
                }
            }
        }

        var secondControlPoint = this.secondControlPoint(tangent, p0, p1, xField, yField);

        if (switchOrientation) {
            var oldXField = xField;
            xField = yField;
            yField = oldXField;
        }

        var firstControlPoint = this.firstControlPoint(tangent, p1, p2, xField, yField);

        if (restrict) {
            this.restrictControlPoint(p0, p1, secondControlPoint, tangent);
            this.restrictControlPoint(p1, p2, firstControlPoint, tangent);
        }

        return [ secondControlPoint, firstControlPoint ];
    };

    CurveProcessor.prototype.restrictControlPoint = function restrictControlPoint (p1, p2, cp, tangent) {
        if (p1.y < p2.y) {
            if (p2.y < cp.y) {
                cp.x = p1.x + (p2.y - p1.y) / tangent;
                cp.y = p2.y;
            } else if (cp.y < p1.y) {
                cp.x = p2.x - (p2.y - p1.y) / tangent;
                cp.y = p1.y;
            }
        } else {
            if (cp.y < p2.y) {
                cp.x = p1.x - (p1.y - p2.y) / tangent;
                cp.y = p2.y;
            } else if (p1.y < cp.y) {
                cp.x = p2.x + (p1.y - p2.y) / tangent;
                cp.y = p1.y;
            }
        }
    };

    CurveProcessor.prototype.tangent = function tangent (p0, p1, xField, yField) {
        var x = p1[xField] - p0[xField];
        var y = p1[yField] - p0[yField];
        var tangent;

        if (x === 0) {
            tangent = 0;
        } else {
            tangent = y / x;
        }

        return tangent;
    };

    CurveProcessor.prototype.isMonotonicByField = function isMonotonicByField (p0, p1, p2, field) {
        return (p2[field] > p1[field] && p1[field] > p0[field]) ||
                    (p2[field] < p1[field] && p1[field] < p0[field]);
    };

    CurveProcessor.prototype.firstControlPoint = function firstControlPoint (tangent, p0, p3, xField, yField) {
        var t1 = p0[xField];
        var t2 = p3[xField];
        var distance = (t2 - t1) * WEIGHT;

        return this.point(t1 + distance, p0[yField] + distance * tangent, xField, yField);
    };

    CurveProcessor.prototype.secondControlPoint = function secondControlPoint (tangent, p0, p3, xField, yField) {
        var t1 = p0[xField];
        var t2 = p3[xField];
        var distance = (t2 - t1) * WEIGHT;

        return this.point(t2 - distance, p3[yField] - distance * tangent, xField, yField);
    };

    CurveProcessor.prototype.point = function point (xValue, yValue, xField, yField) {
        var controlPoint = new _progress_kendoDrawing.geometry.Point();
        controlPoint[xField] = xValue;
        controlPoint[yField] = yValue;

        return controlPoint;
    };

    CurveProcessor.prototype.calculateFunction = function calculateFunction (fn, x) {
        var length = fn.length;
        var result = 0;

        for (var i = 0; i < length; i++) {
            result += Math.pow(x,i) * fn[i];
        }
        return result;
    };

    return CurveProcessor;
}(_progress_kendoDrawing.Class));

function numberSign(value) {
    return value <= 0 ? -1 : 1;
}

var ChartAxis = (function (Class$$1) {
    function ChartAxis(axis) {
        Class$$1.call(this);

        this._axis = axis;
        this.options = axis.options;
    }

    if ( Class$$1 ) ChartAxis.__proto__ = Class$$1;
    ChartAxis.prototype = Object.create( Class$$1 && Class$$1.prototype );
    ChartAxis.prototype.constructor = ChartAxis;

    ChartAxis.prototype.value = function value (point) {
        var axis = this._axis;
        var value = axis.getCategory ? axis.getCategory(point) : axis.getValue(point);

        return value;
    };

    ChartAxis.prototype.slot = function slot (from, to, limit) {
        if ( limit === void 0 ) limit = true;

        return this._axis.slot(from, to, limit);
    };

    ChartAxis.prototype.range = function range () {
        return this._axis.range();
    };

    ChartAxis.prototype.valueRange = function valueRange () {
        return this._axis.valueRange();
    };

    return ChartAxis;
}(_progress_kendoDrawing.Class));

function findAxisByName(name, axes) {
    for (var idx = 0; idx < axes.length; idx++) {
        if (axes[idx].options.name === name) {
            axes[idx].prepareUserOptions();
            return new ChartAxis(axes[idx]);
        }
    }
}

var ChartPane = function ChartPane(pane) {
    this.visual = pane.visual;
    this.chartsVisual = pane.chartContainer.visual;
    this._pane = pane;
};

ChartPane.prototype.findAxisByName = function findAxisByName$1 (name) {
    return findAxisByName(name, this._pane.axes);
};

var ChartPlotArea = (function (Class$$1) {
    function ChartPlotArea(plotArea) {
        Class$$1.call(this);

        this._plotArea = plotArea;
        this.visual = plotArea.visual;
        this.backgroundVisual = plotArea._bgVisual;
    }

    if ( Class$$1 ) ChartPlotArea.__proto__ = Class$$1;
    ChartPlotArea.prototype = Object.create( Class$$1 && Class$$1.prototype );
    ChartPlotArea.prototype.constructor = ChartPlotArea;

    return ChartPlotArea;
}(_progress_kendoDrawing.Class));

function countNumbers(values) {
    var length = values.length;
    var count = 0;

    for (var i = 0; i < length; i++) {
        var num = values[i];
        if (isNumber(num)) {
            count++;
        }
    }

    return count;
}

var Aggregates = {
    min: function(values) {
        var length = values.length;
        var min = MAX_VALUE;

        for (var i = 0; i < length; i++) {
            var value = values[i];
            if (isNumber(value)) {
                min = Math.min(min, value);
            }
        }

        return min === MAX_VALUE ? values[0] : min;
    },

    max: function(values) {
        var length = values.length;
        var max = MIN_VALUE;

        for (var i = 0; i < length; i++) {
            var value = values[i];
            if (isNumber(value)) {
                max = Math.max(max, value);
            }
        }

        return max === MIN_VALUE ? values[0] : max;
    },

    sum: function(values) {
        var length = values.length;
        var sum = 0;

        for (var i = 0; i < length; i++) {
            var value = values[i];
            if (isNumber(value)) {
                sum += value;
            }
        }

        return sum;
    },

    sumOrNull: function(values) {
        var result = null;

        if (countNumbers(values)) {
            result = Aggregates.sum(values);
        }

        return result;
    },

    count: function(values) {
        var length = values.length;
        var count = 0;

        for (var i = 0; i < length; i++) {
            var value = values[i];
            if (value !== null && defined(value)) {
                count++;
            }
        }

        return count;
    },

    avg: function(values) {
        var count = countNumbers(values);
        var result = values[0];

        if (count > 0) {
            result = Aggregates.sum(values) / count;
        }

        return result;
    },

    first: function(values) {
        var length = values.length;

        for (var i = 0; i < length; i++) {
            var value = values[i];
            if (value !== null && defined(value)) {
                return value;
            }
        }

        return values[0];
    }
};

function getField(field, row) {
    if (row === null) {
        return row;
    }

    var get = getter(field, true);
    return get(row);
}

var SeriesBinder = (function (Class$$1) {
    function SeriesBinder() {
        Class$$1.call(this);

        this._valueFields = {};
        this._otherFields = {};
        this._nullValue = {};
        this._undefinedValue = {};
    }

    if ( Class$$1 ) SeriesBinder.__proto__ = Class$$1;
    SeriesBinder.prototype = Object.create( Class$$1 && Class$$1.prototype );
    SeriesBinder.prototype.constructor = SeriesBinder;

    SeriesBinder.prototype.register = function register (seriesTypes, valueFields, otherFields) {
        var this$1 = this;
        if ( valueFields === void 0 ) valueFields = [ VALUE ];
        if ( otherFields === void 0 ) otherFields = {};


        for (var i = 0; i < seriesTypes.length; i++) {
            var type = seriesTypes[i];

            this$1._valueFields[type] = valueFields;
            this$1._otherFields[type] = otherFields;
            this$1._nullValue[type] = this$1._makeValue(valueFields, null);
            this$1._undefinedValue[type] = this$1._makeValue(valueFields, undefined);
        }
    };

    SeriesBinder.prototype.canonicalFields = function canonicalFields (series) {
        return this.valueFields(series).concat(this.otherFields(series));
    };

    SeriesBinder.prototype.valueFields = function valueFields (series) {
        return this._valueFields[series.type] || [ VALUE ];
    };

    SeriesBinder.prototype.otherFields = function otherFields (series) {
        return this._otherFields[series.type] || [ VALUE ];
    };

    SeriesBinder.prototype.bindPoint = function bindPoint (series, pointIx, item) {
        var data = series.data;
        var pointData = defined(item) ? item : data[pointIx];
        var result = { valueFields: { value: pointData } };
        var valueFields = this.valueFields(series);
        var otherFields = this._otherFields[series.type];
        var fields, value;

        if (pointData === null) {
            value = this._nullValue[series.type];
        } else if (!defined(pointData)) {
            value = this._undefinedValue[series.type];
        } else if (Array.isArray(pointData)) {
            var fieldData = pointData.slice(valueFields.length);
            value = this._bindFromArray(pointData, valueFields);
            fields = this._bindFromArray(fieldData, otherFields);
        } else if (typeof pointData === "object") {
            var srcValueFields = this.sourceFields(series, valueFields);
            var srcPointFields = this.sourceFields(series, otherFields);

            value = this._bindFromObject(pointData, valueFields, srcValueFields);
            fields = this._bindFromObject(pointData, otherFields, srcPointFields);
        }

        if (defined(value)) {
            if (valueFields.length === 1) {
                result.valueFields.value = value[valueFields[0]];
            } else {
                result.valueFields = value;
            }
        }

        result.fields = fields || {};

        return result;
    };

    SeriesBinder.prototype._makeValue = function _makeValue (fields, initialValue) {
        var value = {};
        var length = fields.length;

        for (var i = 0; i < length; i++) {
            var fieldName = fields[i];
            value[fieldName] = initialValue;
        }

        return value;
    };

    SeriesBinder.prototype._bindFromArray = function _bindFromArray (array, fields) {
        var value = {};

        if (fields) {
            var length = Math.min(fields.length, array.length);

            for (var i = 0; i < length; i++) {
                value[fields[i]] = array[i];
            }
        }

        return value;
    };

    SeriesBinder.prototype._bindFromObject = function _bindFromObject (object, fields, srcFields) {
        if ( srcFields === void 0 ) srcFields = fields;

        var value = {};

        if (fields) {
            var length = fields.length;

            for (var i = 0; i < length; i++) {
                var fieldName = fields[i];
                var srcFieldName = srcFields[i];
                if (srcFieldName !== null) {
                    value[fieldName] = getField(srcFieldName, object);
                }
            }
        }

        return value;
    };

    SeriesBinder.prototype.sourceFields = function sourceFields (series, canonicalFields) {
        var sourceFields = [];

        if (canonicalFields) {
            var length = canonicalFields.length;

            for (var i = 0; i < length; i++) {
                var fieldName = canonicalFields[i];
                var sourceFieldName = fieldName === VALUE ? "field" : fieldName + "Field";

                sourceFields.push(series[sourceFieldName] !== null ? (series[sourceFieldName] || fieldName) : null);
            }
        }

        return sourceFields;
    };

    return SeriesBinder;
}(_progress_kendoDrawing.Class));

SeriesBinder.current = new SeriesBinder();

var STD_ERR = "stderr";
var STD_DEV = "stddev";
var percentRegex = /percent(?:\w*)\((\d+)\)/;
var standardDeviationRegex = new RegExp("^" + STD_DEV + "(?:\\((\\d+(?:\\.\\d+)?)\\))?$");

var ErrorRangeCalculator = (function (Class$$1) {
    function ErrorRangeCalculator(errorValue, series, field) {
        Class$$1.call(this);

        this.initGlobalRanges(errorValue, series, field);
    }

    if ( Class$$1 ) ErrorRangeCalculator.__proto__ = Class$$1;
    ErrorRangeCalculator.prototype = Object.create( Class$$1 && Class$$1.prototype );
    ErrorRangeCalculator.prototype.constructor = ErrorRangeCalculator;

    ErrorRangeCalculator.prototype.initGlobalRanges = function initGlobalRanges (errorValue, series, field) {
        var data = series.data;
        var deviationMatch = standardDeviationRegex.exec(errorValue);

        if (deviationMatch) {
            this.valueGetter = this.createValueGetter(series, field);

            var average = this.getAverage(data);
            var deviation = this.getStandardDeviation(data, average, false);
            var multiple = deviationMatch[1] ? parseFloat(deviationMatch[1]) : 1;
            var errorRange = { low: average.value - deviation * multiple, high: average.value + deviation * multiple };

            this.globalRange = function() {
                return errorRange;
            };
        } else if (errorValue.indexOf && errorValue.indexOf(STD_ERR) >= 0) {
            this.valueGetter = this.createValueGetter(series, field);
            var standardError = this.getStandardError(data, this.getAverage(data));

            this.globalRange = function(value) {
                return { low: value - standardError, high: value + standardError };
            };
        }
    };

    ErrorRangeCalculator.prototype.createValueGetter = function createValueGetter (series, field) {
        var data = series.data;
        var binder = SeriesBinder.current;
        var valueFields = binder.valueFields(series);
        var item = defined(data[0]) ? data[0] : {};
        var valueGetter;

        if (isArray(item)) {
            var index = field ? valueFields.indexOf(field) : 0;
            valueGetter = getter("[" + index + "]");
        } else if (isNumber(item)) {
            valueGetter = getter();
        } else if (typeof item === OBJECT) {
            var srcValueFields = binder.sourceFields(series, valueFields);
            valueGetter = getter(srcValueFields[valueFields.indexOf(field)]);
        }

        return valueGetter;
    };

    ErrorRangeCalculator.prototype.getErrorRange = function getErrorRange (pointValue, errorValue) {
        var low, high, value;

        if (!defined(errorValue)) {
            return null;
        }

        if (this.globalRange) {
            return this.globalRange(pointValue);
        }

        if (isArray(errorValue)) {
            low = pointValue - errorValue[0];
            high = pointValue + errorValue[1];
        } else if (isNumber(value = parseFloat(errorValue))) {
            low = pointValue - value;
            high = pointValue + value;
        } else if ((value = percentRegex.exec(errorValue))) {
            var percentValue = pointValue * (parseFloat(value[1]) / 100);
            low = pointValue - Math.abs(percentValue);
            high = pointValue + Math.abs(percentValue);
        } else {
            throw new Error("Invalid ErrorBar value: " + errorValue);
        }

        return { low: low, high: high };
    };

    ErrorRangeCalculator.prototype.getStandardError = function getStandardError (data, average) {
        return this.getStandardDeviation(data, average, true) / Math.sqrt(average.count);
    };

    ErrorRangeCalculator.prototype.getStandardDeviation = function getStandardDeviation (data, average, isSample) {
        var this$1 = this;

        var length = data.length;
        var total = isSample ? average.count - 1 : average.count;
        var squareDifferenceSum = 0;

        for (var idx = 0; idx < length; idx++) {
            var value = this$1.valueGetter(data[idx]);
            if (isNumber(value)) {
                squareDifferenceSum += Math.pow(value - average.value, 2);
            }
        }

        return Math.sqrt(squareDifferenceSum / total);
    };

    ErrorRangeCalculator.prototype.getAverage = function getAverage (data) {
        var this$1 = this;

        var length = data.length;
        var sum = 0;
        var count = 0;

        for (var idx = 0; idx < length; idx++) {
            var value = this$1.valueGetter(data[idx]);
            if (isNumber(value)) {
                sum += value;
                count++;
            }
        }

        return {
            value: sum / count,
            count: count
        };
    };

    return ErrorRangeCalculator;
}(_progress_kendoDrawing.Class));

var browser = _progress_kendoDrawing.support.browser || {};

var INITIAL_ANIMATION_DURATION = 600;
var FADEIN = "fadeIn";

var BORDER_BRIGHTNESS = 0.8;
var TOOLTIP_OFFSET = 5;
var START_SCALE = browser.msie ? 0.001 : 0;
var ERROR_LOW_FIELD = "errorLow";
var ERROR_HIGH_FIELD = "errorHigh";
var X_ERROR_LOW_FIELD = "xErrorLow";
var X_ERROR_HIGH_FIELD = "xErrorHigh";
var Y_ERROR_LOW_FIELD = "yErrorLow";
var Y_ERROR_HIGH_FIELD = "yErrorHigh";
var LINE_MARKER_SIZE = 8;
var ZERO = "zero";
var INTERPOLATE = "interpolate";
var GAP = "gap";
var ABOVE = "above";
var BELOW = "below";

var SMOOTH = "smooth";
var STEP = "step";

var AREA = "area";
var BAR = "bar";
var BOX_PLOT = "boxPlot";
var BUBBLE = "bubble";
var BULLET = "bullet";
var CANDLESTICK = "candlestick";
var COLUMN = "column";
var DONUT = "donut";
var FUNNEL = "funnel";
var HORIZONTAL_WATERFALL = "horizontalWaterfall";
var LINE = "line";
var OHLC = "ohlc";
var PIE = "pie";
var POLAR_AREA = "polarArea";
var POLAR_LINE = "polarLine";
var POLAR_SCATTER = "polarScatter";
var RADAR_AREA = "radarArea";
var RADAR_COLUMN = "radarColumn";
var RADAR_LINE = "radarLine";
var RANGE_AREA = "rangeArea";
var RANGE_BAR = "rangeBar";
var RANGE_COLUMN = "rangeColumn";
var SCATTER = "scatter";
var SCATTER_LINE = "scatterLine";
var VERTICAL_AREA = "verticalArea";
var VERTICAL_BOX_PLOT = "verticalBoxPlot";
var VERTICAL_BULLET = "verticalBullet";
var VERTICAL_LINE = "verticalLine";
var VERTICAL_RANGE_AREA = "verticalRangeArea";
var WATERFALL = "waterfall";
var EQUALLY_SPACED_SERIES = [
    BAR, COLUMN, OHLC, CANDLESTICK, BOX_PLOT, VERTICAL_BOX_PLOT,
    BULLET, RANGE_COLUMN, RANGE_BAR, WATERFALL, HORIZONTAL_WATERFALL
];

var LEGEND_ITEM_CLICK = "legendItemClick";
var LEGEND_ITEM_HOVER = "legendItemHover";
var LEGEND_ITEM_LEAVE = "legendItemLeave";
var SERIES_CLICK = "seriesClick";
var SERIES_HOVER = "seriesHover";
var SERIES_OVER = "seriesOver";
var SERIES_LEAVE = "seriesLeave";
var PLOT_AREA_CLICK = "plotAreaClick";
var PLOT_AREA_HOVER = "plotAreaHover";
var PLOT_AREA_LEAVE = "plotAreaLeave";
var DRAG = "drag";
var DRAG_END = "dragEnd";
var DRAG_START = "dragStart";
var ZOOM_START = "zoomStart";
var ZOOM = "zoom";
var ZOOM_END = "zoomEnd";
var SELECT_START = "selectStart";
var SELECT = "select";
var SELECT_END = "selectEnd";
var RENDER = "render";
var SHOW_TOOLTIP = "showTooltip";
var HIDE_TOOLTIP = "hideTooltip";
var PANE_RENDER = "paneRender";

var LOGARITHMIC = "log";
var CATEGORY = "category";

var INSIDE_END = "insideEnd";
var INSIDE_BASE = "insideBase";
var OUTSIDE_END = "outsideEnd";

var MOUSEWHEEL = "DOMMouseScroll mousewheel";
var MOUSEWHEEL_DELAY = 150;

var DEFAULT_ERROR_BAR_WIDTH = 4;

var ErrorBarBase = (function (ChartElement$$1) {
    function ErrorBarBase(low, high, isVertical, chart, series, options) {
        ChartElement$$1.call(this, options);

        this.low = low;
        this.high = high;
        this.isVertical = isVertical;
        this.chart = chart;
        this.series = series;
    }

    if ( ChartElement$$1 ) ErrorBarBase.__proto__ = ChartElement$$1;
    ErrorBarBase.prototype = Object.create( ChartElement$$1 && ChartElement$$1.prototype );
    ErrorBarBase.prototype.constructor = ErrorBarBase;

    ErrorBarBase.prototype.reflow = function reflow (targetBox) {
        var endCaps = this.options.endCaps;
        var isVertical = this.isVertical;
        var axis = this.getAxis();
        var valueBox = axis.getSlot(this.low, this.high);
        var centerBox = targetBox.center();
        var capsWidth = this.getCapsWidth(targetBox, isVertical);
        var capValue = isVertical ? centerBox.x : centerBox.y;
        var capStart = capValue - capsWidth;
        var capEnd = capValue + capsWidth;
        var linePoints;

        if (isVertical) {
            linePoints = [
                new Point(centerBox.x, valueBox.y1),
                new Point(centerBox.x, valueBox.y2)
            ];
            if (endCaps) {
                linePoints.push(new Point(capStart, valueBox.y1),
                    new Point(capEnd, valueBox.y1),
                    new Point(capStart, valueBox.y2),
                    new Point(capEnd, valueBox.y2));
            }
            this.box = new Box(capStart, valueBox.y1, capEnd, valueBox.y2);
        } else {
            linePoints = [
                new Point(valueBox.x1, centerBox.y),
                new Point(valueBox.x2, centerBox.y)
            ];
            if (endCaps) {
                linePoints.push(new Point(valueBox.x1, capStart),
                    new Point(valueBox.x1, capEnd),
                    new Point(valueBox.x2, capStart),
                    new Point(valueBox.x2, capEnd));
            }
            this.box = new Box(valueBox.x1, capStart, valueBox.x2, capEnd);
        }

        this.linePoints = linePoints;
    };

    ErrorBarBase.prototype.getCapsWidth = function getCapsWidth (box, isVertical) {
        var boxSize = isVertical ? box.width() : box.height();
        var capsWidth = Math.min(Math.floor(boxSize / 2), DEFAULT_ERROR_BAR_WIDTH) || DEFAULT_ERROR_BAR_WIDTH;

        return capsWidth;
    };

    ErrorBarBase.prototype.createVisual = function createVisual () {
        var this$1 = this;

        var options = this.options;
        var visual = options.visual;

        if (visual) {
            this.visual = visual({
                low: this.low,
                high: this.high,
                rect: this.box.toRect(),
                sender: this.getSender(),
                options: {
                    endCaps: options.endCaps,
                    color: options.color,
                    line: options.line
                },
                createVisual: function () {
                    this$1.createDefaultVisual();
                    var defaultVisual = this$1.visual;
                    delete this$1.visual;
                    return defaultVisual;
                }
            });
        } else {
            this.createDefaultVisual();
        }
    };

    ErrorBarBase.prototype.createDefaultVisual = function createDefaultVisual () {
        var this$1 = this;

        var ref = this;
        var options = ref.options;
        var linePoints = ref.linePoints;
        var lineOptions = {
            stroke: {
                color: options.color,
                width: options.line.width,
                dashType: options.line.dashType
            }
        };

        ChartElement$$1.prototype.createVisual.call(this);

        for (var idx = 0; idx < linePoints.length; idx += 2) {
            var line = new _progress_kendoDrawing.drawing.Path(lineOptions)
                .moveTo(linePoints[idx].x, linePoints[idx].y)
                .lineTo(linePoints[idx + 1].x, linePoints[idx + 1].y);

            alignPathToPixel(line);
            this$1.visual.append(line);
        }
    };

    return ErrorBarBase;
}(ChartElement));

setDefaultOptions(ErrorBarBase, {
    animation: {
        type: FADEIN,
        delay: INITIAL_ANIMATION_DURATION
    },
    endCaps: true,
    line: {
        width: 2
    },
    zIndex: 1
});

var CategoricalErrorBar = (function (ErrorBarBase$$1) {
    function CategoricalErrorBar () {
        ErrorBarBase$$1.apply(this, arguments);
    }

    if ( ErrorBarBase$$1 ) CategoricalErrorBar.__proto__ = ErrorBarBase$$1;
    CategoricalErrorBar.prototype = Object.create( ErrorBarBase$$1 && ErrorBarBase$$1.prototype );
    CategoricalErrorBar.prototype.constructor = CategoricalErrorBar;

    CategoricalErrorBar.prototype.getAxis = function getAxis () {
        var axis = this.chart.seriesValueAxis(this.series);

        return axis;
    };

    return CategoricalErrorBar;
}(ErrorBarBase));

var MAX_EXPAND_DEPTH = 5;

function evalOptions(options, context, state, dryRun) {
    if ( state === void 0 ) state = {};
    if ( dryRun === void 0 ) dryRun = false;

    var defaults = state.defaults = state.defaults || {};
    var depth = state.depth = state.depth || 0;
    var needsEval = false;

    state.excluded = state.excluded || [];

    if (depth > MAX_EXPAND_DEPTH) {
        return null;
    }

    for (var property in options) {
        if (!inArray(property, state.excluded) && options.hasOwnProperty(property)) {
            var propValue = options[property];
            if (isFunction(propValue)) {
                needsEval = true;
                if (!dryRun) {
                    options[property] = valueOrDefault(propValue(context), defaults[property]);
                }
            } else if (isObject(propValue)) {
                if (!dryRun) {
                    state.defaults = defaults[property];
                }
                state.depth++;
                needsEval = evalOptions(propValue, context, state, dryRun) || needsEval;
                state.depth--;
            }
        }
    }

    return needsEval;
}

function categoriesCount$1(series) {
    var seriesCount = series.length;
    var categories = 0;

    for (var i = 0; i < seriesCount; i++) {
        categories = Math.max(categories, series[i].data.length);
    }

    return categories;
}

var CategoricalChart = (function (ChartElement$$1) {
    function CategoricalChart(plotArea, options) {
        ChartElement$$1.call(this, options);

        this.plotArea = plotArea;
        this.chartService = plotArea.chartService;
        this.categoryAxis = plotArea.seriesCategoryAxis(options.series[0]);

        // Value axis ranges grouped by axis name, e.g.:
        // primary: { min: 0, max: 1 }
        this.valueAxisRanges = {};

        this.points = [];
        this.categoryPoints = [];
        this.seriesPoints = [];
        this.seriesOptions = [];
        this._evalSeries = [];

        this.render();
    }

    if ( ChartElement$$1 ) CategoricalChart.__proto__ = ChartElement$$1;
    CategoricalChart.prototype = Object.create( ChartElement$$1 && ChartElement$$1.prototype );
    CategoricalChart.prototype.constructor = CategoricalChart;

    CategoricalChart.prototype.render = function render () {
        this.traverseDataPoints(this.addValue.bind(this));
    };

    CategoricalChart.prototype.pointOptions = function pointOptions (series, seriesIx) {
        var options = this.seriesOptions[seriesIx];
        if (!options) {
            var defaults = this.pointType().prototype.defaults;
            this.seriesOptions[seriesIx] = options = deepExtend({ }, defaults, {
                vertical: !this.options.invertAxes
            }, series);
        }

        return options;
    };

    CategoricalChart.prototype.plotValue = function plotValue (point) {
        if (!point) {
            return 0;
        }

        if (this.options.isStacked100 && isNumber(point.value)) {
            var categoryIx = point.categoryIx;
            var categoryPoints = this.categoryPoints[categoryIx];
            var otherValues = [];
            var categorySum = 0;

            for (var i = 0; i < categoryPoints.length; i++) {
                var other = categoryPoints[i];
                if (other) {
                    var stack = point.series.stack;
                    var otherStack = other.series.stack;

                    if ((stack && otherStack) && stack.group !== otherStack.group) {
                        continue;
                    }

                    if (isNumber(other.value)) {
                        categorySum += Math.abs(other.value);
                        otherValues.push(Math.abs(other.value));
                    }
                }
            }

            if (categorySum > 0) {
                return point.value / categorySum;
            }
        }

        return point.value;
    };

    CategoricalChart.prototype.plotRange = function plotRange (point, startValue) {
        var this$1 = this;
        if ( startValue === void 0 ) startValue = 0;

        var categoryPoints = this.categoryPoints[point.categoryIx];

        if (this.options.isStacked) {
            var plotValue = this.plotValue(point);
            var positive = plotValue >= 0;
            var prevValue = startValue;
            var isStackedBar = false;

            for (var i = 0; i < categoryPoints.length; i++) {
                var other = categoryPoints[i];

                if (point === other) {
                    break;
                }

                var stack = point.series.stack;
                var otherStack = other.series.stack;
                if (stack && otherStack) {
                    if (typeof stack === STRING && stack !== otherStack) {
                        continue;
                    }

                    if (stack.group && stack.group !== otherStack.group) {
                        continue;
                    }
                }

                var otherValue = this$1.plotValue(other);
                if ((otherValue >= 0 && positive) ||
                    (otherValue < 0 && !positive)) {
                    prevValue += otherValue;
                    plotValue += otherValue;
                    isStackedBar = true;

                    if (this$1.options.isStacked100) {
                        plotValue = Math.min(plotValue, 1);
                    }
                }
            }

            if (isStackedBar) {
                prevValue -= startValue;
            }

            return [ prevValue, plotValue ];
        }

        var series = point.series;
        var valueAxis = this.seriesValueAxis(series);
        var axisCrossingValue = this.categoryAxisCrossingValue(valueAxis);

        return [ axisCrossingValue, convertableToNumber(point.value) ? point.value : axisCrossingValue ];
    };

    CategoricalChart.prototype.stackLimits = function stackLimits (axisName, stackName) {
        var this$1 = this;

        var min = MAX_VALUE;
        var max = MIN_VALUE;

        for (var i = 0; i < this.categoryPoints.length; i++) {
            var categoryPoints = this$1.categoryPoints[i];
            if (!categoryPoints) {
                continue;
            }

            for (var pIx = 0; pIx < categoryPoints.length; pIx++) {
                var point = categoryPoints[pIx];
                if (point) {
                    if (point.series.stack === stackName || point.series.axis === axisName) {
                        var to = this$1.plotRange(point, 0)[1];
                        if (defined(to) && isFinite(to)) {
                            max = Math.max(max, to);
                            min = Math.min(min, to);
                        }
                    }
                }
            }
        }

        return { min: min, max: max };
    };

    CategoricalChart.prototype.updateStackRange = function updateStackRange () {
        var this$1 = this;

        var ref = this.options;
        var isStacked = ref.isStacked;
        var chartSeries = ref.series;
        var limitsCache = {};

        if (isStacked) {
            for (var i = 0; i < chartSeries.length; i++) {
                var series = chartSeries[i];
                var axisName = series.axis;
                var key = axisName + series.stack;

                var limits = limitsCache[key];
                if (!limits) {
                    limits = this$1.stackLimits(axisName, series.stack);

                    var errorTotals = this$1.errorTotals;
                    if (errorTotals) {
                        if (errorTotals.negative.length) {
                            limits.min = Math.min(limits.min, sparseArrayLimits(errorTotals.negative).min);
                        }
                        if (errorTotals.positive.length) {
                            limits.max = Math.max(limits.max, sparseArrayLimits(errorTotals.positive).max);
                        }
                    }

                    if (limits.min !== MAX_VALUE || limits.max !== MIN_VALUE) {
                        limitsCache[key] = limits;
                    } else {
                        limits = null;
                    }
                }

                if (limits) {
                    this$1.valueAxisRanges[axisName] = limits;
                }
            }
        }
    };

    CategoricalChart.prototype.addErrorBar = function addErrorBar (point, data, categoryIx) {
        var value = point.value;
        var series = point.series;
        var seriesIx = point.seriesIx;
        var errorBars = point.options.errorBars;
        var lowValue = data.fields[ERROR_LOW_FIELD];
        var highValue = data.fields[ERROR_HIGH_FIELD];
        var errorRange;

        if (isNumber(lowValue) && isNumber(highValue)) {
            errorRange = { low: lowValue, high: highValue };
        } else if (errorBars && defined(errorBars.value)) {
            this.seriesErrorRanges = this.seriesErrorRanges || [];
            this.seriesErrorRanges[seriesIx] = this.seriesErrorRanges[seriesIx] ||
                new ErrorRangeCalculator(errorBars.value, series, VALUE);

            errorRange = this.seriesErrorRanges[seriesIx].getErrorRange(value, errorBars.value);
        }

        if (errorRange) {
            point.low = errorRange.low;
            point.high = errorRange.high;
            this.addPointErrorBar(point, categoryIx);
        }
    };

    CategoricalChart.prototype.addPointErrorBar = function addPointErrorBar (point, categoryIx) {
        var isVertical = !this.options.invertAxes;
        var options = point.options.errorBars;
        var series = point.series;
        var low = point.low;
        var high = point.high;

        if (this.options.isStacked) {
            var stackedErrorRange = this.stackedErrorRange(point, categoryIx);
            low = stackedErrorRange.low;
            high = stackedErrorRange.high;
        } else {
            var fields = { categoryIx: categoryIx, series: series };
            this.updateRange({ value: low }, fields);
            this.updateRange({ value: high }, fields);
        }

        var errorBar = new CategoricalErrorBar(low, high, isVertical, this, series, options);
        point.errorBars = [ errorBar ];
        point.append(errorBar);
    };

    CategoricalChart.prototype.stackedErrorRange = function stackedErrorRange (point, categoryIx) {
        var plotValue = this.plotRange(point, 0)[1] - point.value;
        var low = point.low + plotValue;
        var high = point.high + plotValue;

        this.errorTotals = this.errorTotals || { positive: [], negative: [] };

        if (low < 0) {
            this.errorTotals.negative[categoryIx] = Math.min(this.errorTotals.negative[categoryIx] || 0, low);
        }

        if (high > 0) {
            this.errorTotals.positive[categoryIx] = Math.max(this.errorTotals.positive[categoryIx] || 0, high);
        }

        return { low: low, high: high };
    };

    CategoricalChart.prototype.addValue = function addValue (data, fields) {
        var categoryIx = fields.categoryIx;
        var series = fields.series;
        var seriesIx = fields.seriesIx;

        var categoryPoints = this.categoryPoints[categoryIx];
        if (!categoryPoints) {
            this.categoryPoints[categoryIx] = categoryPoints = [];
        }

        var seriesPoints = this.seriesPoints[seriesIx];
        if (!seriesPoints) {
            this.seriesPoints[seriesIx] = seriesPoints = [];
        }

        var point = this.createPoint(data, fields);
        if (point) {
            Object.assign(point, fields);

            point.owner = this;
            point.noteText = data.fields.noteText;
            if (!defined(point.dataItem)) {
                point.dataItem = series.data[categoryIx];
            }
            this.addErrorBar(point, data, categoryIx);
        }

        this.points.push(point);
        seriesPoints.push(point);
        categoryPoints.push(point);

        this.updateRange(data.valueFields, fields);
    };

    CategoricalChart.prototype.evalPointOptions = function evalPointOptions (options, value, category, categoryIx, series, seriesIx) {
        var state = { defaults: series._defaults, excluded: [ "data", "aggregate", "_events", "tooltip", "content", "template", "visual", "toggle", "_outOfRangeMinPoint", "_outOfRangeMaxPoint" ] };

        var doEval = this._evalSeries[seriesIx];
        if (!defined(doEval)) {
            this._evalSeries[seriesIx] = doEval = evalOptions(options, {}, state, true);
        }

        var pointOptions = options;
        if (doEval) {
            pointOptions = deepExtend({}, pointOptions);
            evalOptions(pointOptions, {
                value: value,
                category: category,
                index: categoryIx,
                series: series,
                dataItem: series.data[categoryIx]
            }, state);
        }

        return pointOptions;
    };

    CategoricalChart.prototype.updateRange = function updateRange (data, fields) {
        var axisName = fields.series.axis;
        var value = data.value;
        var axisRange = this.valueAxisRanges[axisName];

        if (isFinite(value) && value !== null) {
            axisRange = this.valueAxisRanges[axisName] =
                axisRange || { min: MAX_VALUE, max: MIN_VALUE };

            axisRange.min = Math.min(axisRange.min, value);
            axisRange.max = Math.max(axisRange.max, value);
        }
    };

    CategoricalChart.prototype.seriesValueAxis = function seriesValueAxis (series) {
        var plotArea = this.plotArea;
        var axisName = series.axis;
        var axis = axisName ? plotArea.namedValueAxes[axisName] : plotArea.valueAxis;

        if (!axis) {
            throw new Error("Unable to locate value axis with name " + axisName);
        }

        return axis;
    };

    CategoricalChart.prototype.reflow = function reflow (targetBox) {
        var this$1 = this;

        var categorySlots = this.categorySlots = [];
        var chartPoints = this.points;
        var categoryAxis = this.categoryAxis;
        var pointIx = 0;

        this.traverseDataPoints(function (data, fields) {
            var categoryIx = fields.categoryIx;
            var currentSeries = fields.series;

            var valueAxis = this$1.seriesValueAxis(currentSeries);
            var point = chartPoints[pointIx++];

            var categorySlot = categorySlots[categoryIx];
            if (!categorySlot) {
                categorySlots[categoryIx] = categorySlot =
                    this$1.categorySlot(categoryAxis, categoryIx, valueAxis);
            }

            if (point) {
                var plotRange = this$1.plotRange(point, valueAxis.startValue());
                var valueSlot = this$1.valueSlot(valueAxis, plotRange);
                if (valueSlot) {
                    var pointSlot = this$1.pointSlot(categorySlot, valueSlot);

                    point.aboveAxis = this$1.aboveAxis(point, valueAxis);
                    point.stackValue = plotRange[1];

                    if (this$1.options.isStacked100) {
                        point.percentage = this$1.plotValue(point);
                    }

                    this$1.reflowPoint(point, pointSlot);
                } else {
                    point.visible = false;
                }
            }
        });

        this.reflowCategories(categorySlots);
        if (!this.options.clip && this.options.limitPoints && this.points.length) {
            this.limitPoints();
        }

        this.box = targetBox;
    };

    CategoricalChart.prototype.valueSlot = function valueSlot (valueAxis, plotRange) {
        return valueAxis.getSlot(plotRange[0], plotRange[1], !this.options.clip);
    };

    CategoricalChart.prototype.limitPoints = function limitPoints () {
        var this$1 = this;

        var categoryPoints = this.categoryPoints;
        var points = categoryPoints[0].concat(last(categoryPoints));
        for (var idx = 0; idx < points.length; idx++) {
            if (points[idx]) {
                this$1.limitPoint(points[idx]);
            }
        }
    };

    CategoricalChart.prototype.limitPoint = function limitPoint (point) {
        var limittedSlot = this.categoryAxis.limitSlot(point.box);
        if (!limittedSlot.equals(point.box)) {
            point.reflow(limittedSlot);
        }
    };

    CategoricalChart.prototype.aboveAxis = function aboveAxis (point, valueAxis) {
        var axisCrossingValue = this.categoryAxisCrossingValue(valueAxis);
        var value = point.value;

        return valueAxis.options.reverse ?
            value < axisCrossingValue : value >= axisCrossingValue;
    };

    CategoricalChart.prototype.categoryAxisCrossingValue = function categoryAxisCrossingValue (valueAxis) {
        var categoryAxis = this.categoryAxis;
        var options = valueAxis.options;
        var crossingValues = [].concat(
            options.axisCrossingValues || options.axisCrossingValue
        );

        return crossingValues[categoryAxis.axisIndex || 0] || 0;
    };

    CategoricalChart.prototype.reflowPoint = function reflowPoint (point, pointSlot) {
        point.reflow(pointSlot);
    };

    CategoricalChart.prototype.reflowCategories = function reflowCategories () { };

    CategoricalChart.prototype.pointSlot = function pointSlot (categorySlot, valueSlot) {
        var options = this.options;
        var invertAxes = options.invertAxes;
        var slotX = invertAxes ? valueSlot : categorySlot;
        var slotY = invertAxes ? categorySlot : valueSlot;

        return new Box(slotX.x1, slotY.y1, slotX.x2, slotY.y2);
    };

    CategoricalChart.prototype.categorySlot = function categorySlot (categoryAxis, categoryIx) {
        return categoryAxis.getSlot(categoryIx);
    };

    CategoricalChart.prototype.traverseDataPoints = function traverseDataPoints (callback) {
        var this$1 = this;

        var series = this.options.series;
        var count = categoriesCount$1(series);
        var seriesCount = series.length;

        for (var seriesIx = 0; seriesIx < seriesCount; seriesIx++) {
            this$1._outOfRangeCallback(series[seriesIx], "_outOfRangeMinPoint", seriesIx, callback);
        }

        for (var categoryIx = 0; categoryIx < count; categoryIx++) {
            for (var seriesIx$1 = 0; seriesIx$1 < seriesCount; seriesIx$1++) {
                var currentSeries = series[seriesIx$1];
                var currentCategory = this$1.categoryAxis.categoryAt(categoryIx);
                var pointData = this$1._bindPoint(currentSeries, seriesIx$1, categoryIx);

                callback(pointData, {
                    category: currentCategory,
                    categoryIx: categoryIx,
                    categoriesCount: count,
                    series: currentSeries,
                    seriesIx: seriesIx$1
                });
            }
        }

        for (var seriesIx$2 = 0; seriesIx$2 < seriesCount; seriesIx$2++) {
            this$1._outOfRangeCallback(series[seriesIx$2], "_outOfRangeMaxPoint", seriesIx$2, callback);
        }
    };

    CategoricalChart.prototype._outOfRangeCallback = function _outOfRangeCallback (series, field, seriesIx, callback) {
        var outOfRangePoint = series[field];
        if (outOfRangePoint) {
            var categoryIx = outOfRangePoint.categoryIx;
            var pointData = this._bindPoint(series, seriesIx, categoryIx, outOfRangePoint.item);

            callback(pointData, {
                category: outOfRangePoint.category,
                categoryIx: categoryIx,
                series: series,
                seriesIx: seriesIx,
                dataItem: outOfRangePoint.item
            });
        }
    };

    CategoricalChart.prototype._bindPoint = function _bindPoint (series, seriesIx, categoryIx, item) {
        if (!this._bindCache) {
            this._bindCache = [];
        }

        var bindCache = this._bindCache[seriesIx];
        if (!bindCache) {
            bindCache = this._bindCache[seriesIx] = [];
        }

        var data = bindCache[categoryIx];
        if (!data) {
            data = bindCache[categoryIx] = SeriesBinder.current.bindPoint(series, categoryIx, item);
        }

        return data;
    };

    CategoricalChart.prototype.formatPointValue = function formatPointValue (point, format) {
        if (point.value === null) {
            return "";
        }

        return this.chartService.format.auto(format, point.value);
    };

    CategoricalChart.prototype.pointValue = function pointValue (data) {
        return data.valueFields.value;
    };

    return CategoricalChart;
}(ChartElement));

setDefaultOptions(CategoricalChart, {
    series: [],
    invertAxes: false,
    isStacked: false,
    clip: true,
    limitPoints: true
});

var PointEventsMixin = {
    click: function(chart, e) {
        return chart.trigger(
            SERIES_CLICK,
            this.eventArgs(e)
        );
    },

    hover: function(chart, e) {
        return chart.trigger(
            SERIES_HOVER,
            this.eventArgs(e)
        );
    },

    over: function(chart, e) {
        return chart.trigger(
            SERIES_OVER,
            this.eventArgs(e)
        );
    },

    out: function(chart, e) {
        return chart.trigger(
            SERIES_LEAVE,
            this.eventArgs(e)
        );
    },

    eventArgs: function(e) {
        return {
            value: this.value,
            percentage: this.percentage,
            stackValue: this.stackValue,
            category: this.category,
            series: this.series,
            dataItem: this.dataItem,
            runningTotal: this.runningTotal,
            total: this.total,
            element: eventElement(e),
            originalEvent: e,
            point: this
        };
    }
};

var NoteMixin = {
    createNote: function() {
        var options = this.options.notes;
        var text = this.noteText || options.label.text;

        if (options.visible !== false && defined(text) && text !== null) {
            this.note = new Note({
                value: this.value,
                text: text,
                dataItem: this.dataItem,
                category: this.category,
                series: this.series
            }, this.options.notes, this.owner.chartService);

            this.append(this.note);
        }
    }
};

var LinePoint = (function (ChartElement$$1) {
    function LinePoint(value, options) {
        ChartElement$$1.call(this);

        this.value = value;
        this.options = options;
        this.aboveAxis = valueOrDefault(this.options.aboveAxis, true);
        this.tooltipTracking = true;
    }

    if ( ChartElement$$1 ) LinePoint.__proto__ = ChartElement$$1;
    LinePoint.prototype = Object.create( ChartElement$$1 && ChartElement$$1.prototype );
    LinePoint.prototype.constructor = LinePoint;

    LinePoint.prototype.render = function render () {
        var ref = this.options;
        var markers = ref.markers;
        var labels = ref.labels;

        if (this._rendered) {
            return;
        }

        this._rendered = true;

        if (markers.visible && markers.size) {
            this.marker = this.createMarker();
            this.append(this.marker);
        }

        if (labels.visible) {
            var labelTemplate = getTemplate(labels);
            var pointData = this.pointData();
            var labelText = this.value;
            if (labelTemplate) {
                labelText = labelTemplate(pointData);
            } else if (labels.format) {
                labelText = this.formatValue(labels.format);
            }
            this.label = new TextBox(labelText,
                deepExtend({
                    align: CENTER,
                    vAlign: CENTER,
                    margin: {
                        left: 5,
                        right: 5
                    },
                    zIndex: valueOrDefault(labels.zIndex, this.series.zIndex)
                }, labels),
                pointData
            );
            this.append(this.label);
        }

        this.createNote();

        if (this.errorBar) {
            this.append(this.errorBar);
        }
    };

    LinePoint.prototype.markerBorder = function markerBorder () {
        var options = this.options.markers;
        var background = options.background;
        var border = deepExtend({ color: this.color }, options.border);

        if (!defined(border.color)) {
            border.color = new _progress_kendoDrawing.Color(background).brightness(BORDER_BRIGHTNESS).toHex();
        }

        return border;
    };

    LinePoint.prototype.createVisual = function createVisual () {};

    LinePoint.prototype.createMarker = function createMarker () {
        var options = this.options.markers;
        var marker = new ShapeElement({
            type: options.type,
            width: options.size,
            height: options.size,
            rotation: options.rotation,
            background: options.background,
            border: this.markerBorder(),
            opacity: this.series.opacity || options.opacity,
            zIndex: valueOrDefault(options.zIndex, this.series.zIndex),
            animation: options.animation,
            visual: options.visual
        }, {
            dataItem: this.dataItem,
            value: this.value,
            series: this.series,
            category: this.category
        });

        return marker;
    };

    LinePoint.prototype.markerBox = function markerBox () {
        if (!this.marker) {
            this.marker = this.createMarker();
            this.marker.reflow(this._childBox);
        }

        return this.marker.box;
    };

    LinePoint.prototype.reflow = function reflow (targetBox) {
        var this$1 = this;

        var ref = this;
        var options = ref.options;
        var aboveAxis = ref.aboveAxis;
        var vertical = options.vertical;

        this.render();

        this.box = targetBox;
        var childBox = targetBox.clone();

        if (vertical) {
            if (aboveAxis) {
                childBox.y1 -= childBox.height();
            } else {
                childBox.y2 += childBox.height();
            }
        } else {
            if (aboveAxis) {
                childBox.x1 += childBox.width();
            } else {
                childBox.x2 -= childBox.width();
            }
        }

        this._childBox = childBox;
        if (this.marker) {
            this.marker.reflow(childBox);
        }

        this.reflowLabel(childBox);

        if (this.errorBars) {
            for (var i = 0; i < this.errorBars.length; i++) {
                this$1.errorBars[i].reflow(childBox);
            }
        }

        if (this.note) {
            var noteTargetBox = this.markerBox();

            if (!(options.markers.visible && options.markers.size)) {
                var center = noteTargetBox.center();
                noteTargetBox = new Box(center.x, center.y, center.x, center.y);
            }

            this.note.reflow(noteTargetBox);
        }
    };

    LinePoint.prototype.reflowLabel = function reflowLabel (box) {
        var ref = this;
        var options = ref.options;
        var label = ref.label;
        var anchor = options.labels.position;

        if (label) {
            anchor = anchor === ABOVE ? TOP : anchor;
            anchor = anchor === BELOW ? BOTTOM : anchor;

            label.reflow(box);
            label.box.alignTo(this.markerBox(), anchor);
            label.reflow(label.box);
        }
    };

    LinePoint.prototype.createHighlight = function createHighlight () {
        var markers = this.options.highlight.markers;
        var defaultColor = this.markerBorder().color;
        var options = this.options.markers;
        var size = options.size + (options.border.width || 0) + (markers.border.width || 0);

        var shadow = new ShapeElement({
            type: options.type,
            width: size,
            height: size,
            rotation: options.rotation,
            background: markers.color || defaultColor,
            border: {
                color: markers.border.color,
                width: markers.border.width,
                opacity: valueOrDefault(markers.border.opacity, 1)
            },
            opacity: valueOrDefault(markers.opacity, 1)
        });
        shadow.reflow(this._childBox);

        return shadow.getElement();
    };

    LinePoint.prototype.highlightVisual = function highlightVisual () {
        return (this.marker || {}).visual;
    };

    LinePoint.prototype.highlightVisualArgs = function highlightVisualArgs () {
        var marker = this.marker;
        var visual, rect;

        if (marker) {
            rect = marker.paddingBox.toRect();
            visual = marker.visual;
        } else {
            var size = this.options.markers.size;
            var halfSize = size / 2;
            var center = this.box.center();
            rect = new _progress_kendoDrawing.geometry.Rect([ center.x - halfSize, center.y - halfSize ], [ size, size ]);
        }

        return {
            options: this.options,
            rect: rect,
            visual: visual
        };
    };

    LinePoint.prototype.tooltipAnchor = function tooltipAnchor () {
        var markerBox = this.markerBox();
        var clipBox = this.owner.pane.clipBox();
        var showTooltip = !clipBox || clipBox.overlaps(markerBox);

        if (showTooltip) {
            var x = markerBox.x2 + TOOLTIP_OFFSET;
            var horizontalAlign = LEFT;
            var y, verticalAlign;

            if (this.aboveAxis) {
                y = markerBox.y1;
                verticalAlign = BOTTOM;
            } else {
                y = markerBox.y2;
                verticalAlign = TOP;
            }

            return {
                point: new Point(x, y),
                align: {
                    horizontal: horizontalAlign,
                    vertical: verticalAlign
                }
            };
        }
    };

    LinePoint.prototype.formatValue = function formatValue (format) {
        return this.owner.formatPointValue(this, format);
    };

    LinePoint.prototype.overlapsBox = function overlapsBox (box) {
        var markerBox = this.markerBox();
        return markerBox.overlaps(box);
    };

    LinePoint.prototype.unclipElements = function unclipElements () {
        if (this.label) {
            this.label.options.noclip = true;
        }

        if (this.note) {
            this.note.options.noclip = true;
        }
    };

    LinePoint.prototype.pointData = function pointData () {
        return {
            dataItem: this.dataItem,
            category: this.category,
            value: this.value,
            percentage: this.percentage,
            stackValue: this.stackValue,
            series: this.series
        };
    };

    return LinePoint;
}(ChartElement));

LinePoint.prototype.defaults = {
    vertical: true,
    markers: {
        visible: true,
        background: WHITE,
        size: LINE_MARKER_SIZE,
        type: CIRCLE,
        border: {
            width: 2
        },
        opacity: 1
    },
    labels: {
        visible: false,
        position: ABOVE,
        margin: getSpacing(3),
        padding: getSpacing(4),
        animation: {
            type: FADEIN,
            delay: INITIAL_ANIMATION_DURATION
        }
    },
    notes: {
        label: {}
    },
    highlight: {
        markers: {
            border: {
                color: "#fff",
                width: 2
            }
        },
        zIndex: HIGHLIGHT_ZINDEX
    },
    errorBars: {
        line: {
            width: 1
        }
    }
};

deepExtend(LinePoint.prototype, PointEventsMixin);
deepExtend(LinePoint.prototype, NoteMixin);

var LineSegment = (function (ChartElement$$1) {
    function LineSegment(linePoints, series, seriesIx) {
        ChartElement$$1.call(this);

        this.linePoints = linePoints;
        this.series = series;
        this.seriesIx = seriesIx;
    }

    if ( ChartElement$$1 ) LineSegment.__proto__ = ChartElement$$1;
    LineSegment.prototype = Object.create( ChartElement$$1 && ChartElement$$1.prototype );
    LineSegment.prototype.constructor = LineSegment;

    LineSegment.prototype.points = function points () {
        return this.toGeometryPoints(this.linePoints);
    };

    LineSegment.prototype.toGeometryPoints = function toGeometryPoints (points) {
        var result = [];
        for (var i = 0, length = points.length; i < length; i++) {
            if (points[i] && points[i].visible !== false) {
                result.push(points[i]._childBox.toRect().center());
            }
        }

        return result;
    };

    LineSegment.prototype.createVisual = function createVisual () {
        var this$1 = this;

        var customVisual = this.series.visual;
        if (customVisual) {
            this.visual = customVisual({
                points: this.toGeometryPoints(this.linePoints),
                series: this.series,
                sender: this.getSender(),
                createVisual: function () {
                    this$1.segmentVisual();

                    return this$1.visual;
                }
            });
            if (this.visual && !defined(this.visual.options.zIndex)) {
                this.visual.options.zIndex = this.series.zIndex;
            }
        } else {
            this.segmentVisual();
        }
    };

    LineSegment.prototype.segmentVisual = function segmentVisual () {
        var ref = this;
        var options = ref.options;
        var series = ref.series;
        var color = series.color;
        var defaults = series._defaults;

        if (isFunction(color) && defaults) {
            color = defaults.color;
        }

        var line = _progress_kendoDrawing.drawing.Path.fromPoints(this.points(), {
            stroke: {
                color: color,
                width: series.width,
                opacity: series.opacity,
                dashType: series.dashType
            },
            zIndex: series.zIndex
        });

        if (options.closed) {
            line.close();
        }

        this.visual = line;
    };

    LineSegment.prototype.aliasFor = function aliasFor (e, coords) {
        return this.parent.getNearestPoint(coords.x, coords.y, this.seriesIx);
    };

    return LineSegment;
}(ChartElement));

setDefaultOptions(LineSegment, {
    closed: false
});

var StepLineMixin = {
    calculateStepPoints: function(points) {
        var categoryAxis = this.parent.plotArea.seriesCategoryAxis(this.series);
        var ref = categoryAxis.options;
        var justified = ref.justified;
        var vertical = ref.vertical;
        var reverse = ref.reverse;

        var stepAxis = vertical ? X : Y;
        var axis = vertical ? Y : X;
        var stepDir = reverse ? 2 : 1;
        var dir = stepDir;

        var previousPoint = toGeometryPoint(points[0], stepAxis, stepDir, axis, dir);
        var result = [ previousPoint ];

        for (var idx = 1; idx < points.length; idx++) {
            var point = toGeometryPoint(points[idx], stepAxis, stepDir, axis, dir);

            if (previousPoint[stepAxis] !== point[stepAxis]) {
                var stepPoint = new _progress_kendoDrawing.geometry.Point();
                stepPoint[stepAxis] = previousPoint[stepAxis];
                stepPoint[axis] = point[axis];

                result.push(stepPoint, point);
            }

            previousPoint = point;
        }

        if (!justified) {
            result.push(toGeometryPoint(last(points), stepAxis, stepDir, axis, reverse ? 1 : 2));
        } else if (previousPoint !== last(result)) {
            result.push(previousPoint);
        }

        return result;

    }
};

function toGeometryPoint(lintPoint, stepAxis, stepDir, axis, dir) {
    var box = lintPoint.box;
    var result = new _progress_kendoDrawing.geometry.Point();

    result[stepAxis] = box[stepAxis + stepDir];
    result[axis] = box[axis + dir];

    return result;
}

var StepLineSegment = (function (LineSegment$$1) {
    function StepLineSegment () {
        LineSegment$$1.apply(this, arguments);
    }

    if ( LineSegment$$1 ) StepLineSegment.__proto__ = LineSegment$$1;
    StepLineSegment.prototype = Object.create( LineSegment$$1 && LineSegment$$1.prototype );
    StepLineSegment.prototype.constructor = StepLineSegment;

    StepLineSegment.prototype.points = function points () {
        return this.calculateStepPoints(this.linePoints);
    };

    return StepLineSegment;
}(LineSegment));

deepExtend(StepLineSegment.prototype, StepLineMixin);

var SplineSegment = (function (LineSegment$$1) {
    function SplineSegment () {
        LineSegment$$1.apply(this, arguments);
    }

    if ( LineSegment$$1 ) SplineSegment.__proto__ = LineSegment$$1;
    SplineSegment.prototype = Object.create( LineSegment$$1 && LineSegment$$1.prototype );
    SplineSegment.prototype.constructor = SplineSegment;

    SplineSegment.prototype.segmentVisual = function segmentVisual () {
        var series = this.series;
        var defaults = series._defaults;
        var color = series.color;

        if (isFunction(color) && defaults) {
            color = defaults.color;
        }

        var curveProcessor = new CurveProcessor(this.options.closed);
        var segments = curveProcessor.process(this.points());
        var curve = new _progress_kendoDrawing.drawing.Path({
            stroke: {
                color: color,
                width: series.width,
                opacity: series.opacity,
                dashType: series.dashType
            },
            zIndex: series.zIndex
        });

        curve.segments.push.apply(curve.segments, segments);

        this.visual = curve;
    };

    return SplineSegment;
}(LineSegment));

var LineChartMixin = {
    renderSegments: function() {
        var this$1 = this;

        var ref = this;
        var options = ref.options;
        var seriesPoints = ref.seriesPoints;
        var series = options.series;
        var seriesCount = seriesPoints.length;
        var lastSegment;

        this._segments = [];

        for (var seriesIx = 0; seriesIx < seriesCount; seriesIx++) {
            var currentSeries = series[seriesIx];
            var sortedPoints = this$1.sortPoints(seriesPoints[seriesIx]);
            var pointCount = sortedPoints.length;
            var linePoints = [];

            for (var pointIx = 0; pointIx < pointCount; pointIx++) {
                var point = sortedPoints[pointIx];
                if (point) {
                    linePoints.push(point);
                } else if (this$1.seriesMissingValues(currentSeries) !== INTERPOLATE) {
                    if (linePoints.length > 1) {
                        lastSegment = this$1.createSegment(
                            linePoints, currentSeries, seriesIx, lastSegment
                        );
                        this$1._addSegment(lastSegment);
                    }
                    linePoints = [];
                }
            }

            if (linePoints.length > 1) {
                lastSegment = this$1.createSegment(
                    linePoints, currentSeries, seriesIx, lastSegment
                );
                this$1._addSegment(lastSegment);
            }
        }

        this.children.unshift.apply(this.children, this._segments);
    },

    _addSegment: function(segment) {
        this._segments.push(segment);
        segment.parent = this;
    },

    sortPoints: function(points) {
        return points;
    },

    seriesMissingValues: function(series) {
        var missingValues = series.missingValues;
        var assumeZero = !missingValues && this.options.isStacked;

        return assumeZero ? ZERO : missingValues || INTERPOLATE;
    },

    getNearestPoint: function(x, y, seriesIx) {
        var target = new Point(x, y);
        var allPoints = this.seriesPoints[seriesIx];
        var nearestPointDistance = MAX_VALUE;
        var nearestPoint;

        for (var i = 0; i < allPoints.length; i++) {
            var point = allPoints[i];

            if (point && defined(point.value) && point.value !== null && point.visible !== false) {
                var pointBox = point.box;
                var pointDistance = pointBox.center().distanceTo(target);

                if (pointDistance < nearestPointDistance) {
                    nearestPoint = point;
                    nearestPointDistance = pointDistance;
                }
            }
        }

        return nearestPoint;
    }
};

var ClipAnimation = (function (superclass) {
    function ClipAnimation () {
        superclass.apply(this, arguments);
    }

    if ( superclass ) ClipAnimation.__proto__ = superclass;
    ClipAnimation.prototype = Object.create( superclass && superclass.prototype );
    ClipAnimation.prototype.constructor = ClipAnimation;

    ClipAnimation.prototype.setup = function setup () {
        this._setEnd(this.options.box.x1);
    };

    ClipAnimation.prototype.step = function step (pos) {
        var box = this.options.box;
        this._setEnd(interpolateValue(box.x1, box.x2, pos));
    };

    ClipAnimation.prototype._setEnd = function _setEnd (x) {
        var element = this.element;
        var segments = element.segments;
        var topRight = segments[1].anchor();
        var bottomRight = segments[2].anchor();

        element.suspend();
        topRight.setX(x);
        element.resume();
        bottomRight.setX(x);
    };

    return ClipAnimation;
}(_progress_kendoDrawing.drawing.Animation));

setDefaultOptions(ClipAnimation, {
    duration: INITIAL_ANIMATION_DURATION
});

_progress_kendoDrawing.drawing.AnimationFactory.current.register("clip", ClipAnimation);

function anyHasZIndex(elements) {
    for (var idx = 0; idx < elements.length; idx++) {
        if (defined(elements[idx].zIndex)) {
            return true;
        }
    }
}

var ClipAnimationMixin = {
    createAnimation: function() {
        var root = this.getRoot();
        if (root && (root.options || {}).transitions !== false) {
            var box = root.size();
            var clipPath = _progress_kendoDrawing.drawing.Path.fromRect(box.toRect());
            this.visual.clip(clipPath);
            this.animation = new ClipAnimation(clipPath, {
                box: box
            });
            if (anyHasZIndex(this.options.series)) {
                this._setChildrenAnimation(clipPath);
            }
        }
    },

    _setChildrenAnimation: function(clipPath) {
        var points = this.animationPoints();

        for (var idx = 0; idx < points.length; idx++) {
            var point = points[idx];
            if (point && point.visual && defined(point.visual.options.zIndex)) {
                point.visual.clip(clipPath);
            }
        }
    }
};

var LineChart = (function (CategoricalChart$$1) {
    function LineChart () {
        CategoricalChart$$1.apply(this, arguments);
    }

    if ( CategoricalChart$$1 ) LineChart.__proto__ = CategoricalChart$$1;
    LineChart.prototype = Object.create( CategoricalChart$$1 && CategoricalChart$$1.prototype );
    LineChart.prototype.constructor = LineChart;

    LineChart.prototype.render = function render () {

        CategoricalChart$$1.prototype.render.call(this);

        this.updateStackRange();
        this.renderSegments();
    };

    LineChart.prototype.pointType = function pointType () {
        return LinePoint;
    };

    LineChart.prototype.createPoint = function createPoint (data, fields) {
        var categoryIx = fields.categoryIx;
        var category = fields.category;
        var series = fields.series;
        var seriesIx = fields.seriesIx;
        var missingValues = this.seriesMissingValues(series);
        var value = data.valueFields.value;

        if (!defined(value) || value === null) {
            if (missingValues === ZERO) {
                value = 0;
            } else {
                return null;
            }
        }

        var pointOptions = this.pointOptions(series, seriesIx);
        pointOptions = this.evalPointOptions(
            pointOptions, value, category, categoryIx, series, seriesIx
        );

        var color = data.fields.color || series.color;
        if (isFunction(series.color)) {
            color = pointOptions.color;
        }

        var point = new LinePoint(value, pointOptions);
        point.color = color;

        this.append(point);

        return point;
    };

    LineChart.prototype.plotRange = function plotRange (point) {
        var this$1 = this;

        var plotValue = this.plotValue(point);

        if (this.options.isStacked) {
            var categoryIx = point.categoryIx;
            var categoryPoints = this.categoryPoints[categoryIx];

            for (var i = 0; i < categoryPoints.length; i++) {
                var other = categoryPoints[i];

                if (point === other) {
                    break;
                }

                plotValue += this$1.plotValue(other);

                if (this$1.options.isStacked100) {
                    plotValue = Math.min(plotValue, 1);
                }
            }

        }

        return [ plotValue, plotValue ];
    };

    LineChart.prototype.createSegment = function createSegment (linePoints, currentSeries, seriesIx) {
        var style = currentSeries.style;
        var pointType;

        if (style === STEP) {
            pointType = StepLineSegment;
        } else if (style === SMOOTH) {
            pointType = SplineSegment;
        } else {
            pointType = LineSegment;
        }

        return new pointType(linePoints, currentSeries, seriesIx);
    };

    LineChart.prototype.animationPoints = function animationPoints () {
        var points = this.points;
        var result = [];
        for (var idx = 0; idx < points.length; idx++) {
            result.push((points[idx] || {}).marker);
        }
        return result.concat(this._segments);
    };

    return LineChart;
}(CategoricalChart));

deepExtend(LineChart.prototype, LineChartMixin, ClipAnimationMixin);

var AreaSegment = (function (LineSegment$$1) {
    function AreaSegment(linePoints, currentSeries, seriesIx, prevSegment, stackPoints) {
        LineSegment$$1.call(this, linePoints, currentSeries, seriesIx);

        this.prevSegment = prevSegment;
        this.stackPoints = stackPoints;
    }

    if ( LineSegment$$1 ) AreaSegment.__proto__ = LineSegment$$1;
    AreaSegment.prototype = Object.create( LineSegment$$1 && LineSegment$$1.prototype );
    AreaSegment.prototype.constructor = AreaSegment;

    AreaSegment.prototype.createVisual = function createVisual () {
        var series = this.series;
        var defaults = series._defaults;
        var lineOptions = series.line || {};
        var color = series.color;

        if (isFunction(color) && defaults) {
            color = defaults.color;
        }

        this.visual = new _progress_kendoDrawing.drawing.Group({
            zIndex: series.zIndex
        });

        this.createFill({
            fill: {
                color: color,
                opacity: series.opacity
            },
            stroke: null
        });

        if (lineOptions.width > 0 && lineOptions.visible !== false) {
            this.createStroke({
                stroke: deepExtend({
                    color: color,
                    opacity: series.opacity,
                    lineCap: "butt"
                }, lineOptions)
            });
        }
    };

    AreaSegment.prototype.strokeSegments = function strokeSegments () {
        var segments = this._strokeSegments;

        if (!segments) {
            segments = this._strokeSegments = this.createStrokeSegments();
        }

        return segments;
    };

    AreaSegment.prototype.createStrokeSegments = function createStrokeSegments () {
        return this.segmentsFromPoints(this.points());
    };

    AreaSegment.prototype.stackSegments = function stackSegments () {
        if (this.prevSegment) {
            return this.prevSegment.createStackSegments(this.stackPoints);
        }

        return this.createStackSegments(this.stackPoints);
    };

    AreaSegment.prototype.createStackSegments = function createStackSegments (stackPoints) {
        return this.segmentsFromPoints(this.toGeometryPoints(stackPoints)).reverse();
    };

    AreaSegment.prototype.segmentsFromPoints = function segmentsFromPoints (points) {
        return points.map(function (point) { return new _progress_kendoDrawing.geometry.Segment(point); });
    };

    AreaSegment.prototype.createStroke = function createStroke (style) {
        var stroke = new _progress_kendoDrawing.drawing.Path(style);
        stroke.segments.push.apply(stroke.segments, this.strokeSegments());

        this.visual.append(stroke);
    };

    AreaSegment.prototype.hasStackSegment = function hasStackSegment () {
        return this.prevSegment || (this.stackPoints && this.stackPoints.length);
    };

    AreaSegment.prototype.createFill = function createFill (style) {
        var strokeSegments = this.strokeSegments();
        var fillSegments = strokeSegments.slice(0);
        var hasStackSegments = this.hasStackSegment();

        if (hasStackSegments) {
            var stackSegments = this.stackSegments();

            append$1(fillSegments, stackSegments);
        }

        var fill = new _progress_kendoDrawing.drawing.Path(style);
        fill.segments.push.apply(fill.segments, fillSegments);

        if (!hasStackSegments && strokeSegments.length > 1) {
            this.fillToAxes(fill);
        }

        this.visual.append(fill);
    };

    AreaSegment.prototype.fillToAxes = function fillToAxes (fillPath) {
        var chart = this.parent;
        var invertAxes = chart.options.invertAxes;
        var valueAxis = chart.seriesValueAxis(this.series);
        var crossingValue = chart.categoryAxisCrossingValue(valueAxis);
        var endSlot = valueAxis.getSlot(crossingValue, crossingValue, true);
        var segments = this.strokeSegments();
        var firstPoint = segments[0].anchor();
        var lastPoint = last(segments).anchor();
        var end = invertAxes ? endSlot.x1 : endSlot.y1;

        if (invertAxes) {
            fillPath.lineTo(end, lastPoint.y)
                    .lineTo(end, firstPoint.y);
        } else {
            fillPath.lineTo(lastPoint.x, end)
                    .lineTo(firstPoint.x, end);
        }
    };

    return AreaSegment;
}(LineSegment));

var StepAreaSegment = (function (AreaSegment$$1) {
    function StepAreaSegment () {
        AreaSegment$$1.apply(this, arguments);
    }

    if ( AreaSegment$$1 ) StepAreaSegment.__proto__ = AreaSegment$$1;
    StepAreaSegment.prototype = Object.create( AreaSegment$$1 && AreaSegment$$1.prototype );
    StepAreaSegment.prototype.constructor = StepAreaSegment;

    StepAreaSegment.prototype.createStrokeSegments = function createStrokeSegments () {
        return this.segmentsFromPoints(this.calculateStepPoints(this.linePoints));
    };

    StepAreaSegment.prototype.createStackSegments = function createStackSegments (stackPoints) {
        return this.segmentsFromPoints(this.calculateStepPoints(stackPoints)).reverse();
    };

    return StepAreaSegment;
}(AreaSegment));

deepExtend(StepAreaSegment.prototype, StepLineMixin);

var SplineAreaSegment = (function (AreaSegment$$1) {
    function SplineAreaSegment () {
        AreaSegment$$1.apply(this, arguments);
    }

    if ( AreaSegment$$1 ) SplineAreaSegment.__proto__ = AreaSegment$$1;
    SplineAreaSegment.prototype = Object.create( AreaSegment$$1 && AreaSegment$$1.prototype );
    SplineAreaSegment.prototype.constructor = SplineAreaSegment;

    SplineAreaSegment.prototype.createStrokeSegments = function createStrokeSegments () {
        var curveProcessor = new CurveProcessor(this.options.closed);
        var linePoints = this.points();

        return curveProcessor.process(linePoints);
    };

    SplineAreaSegment.prototype.createStackSegments = function createStackSegments () {
        var strokeSegments = this.strokeSegments();
        var stackSegments = [];
        for (var idx = strokeSegments.length - 1; idx >= 0; idx--) {
            var segment = strokeSegments[idx];
            stackSegments.push(new _progress_kendoDrawing.geometry.Segment(
                segment.anchor(),
                segment.controlOut(),
                segment.controlIn()
            ));
        }

        return stackSegments;
    };

    return SplineAreaSegment;
}(AreaSegment));

var AreaChart = (function (LineChart$$1) {
    function AreaChart () {
        LineChart$$1.apply(this, arguments);
    }

    if ( LineChart$$1 ) AreaChart.__proto__ = LineChart$$1;
    AreaChart.prototype = Object.create( LineChart$$1 && LineChart$$1.prototype );
    AreaChart.prototype.constructor = AreaChart;

    AreaChart.prototype.createSegment = function createSegment (linePoints, currentSeries, seriesIx, prevSegment) {
        var isStacked = this.options.isStacked;
        var style = (currentSeries.line || {}).style;
        var previousSegment;

        var stackPoints;
        if (isStacked && seriesIx > 0 && prevSegment) {
            var missingValues = this.seriesMissingValues(currentSeries);
            if (missingValues !== "gap") {
                stackPoints = prevSegment.linePoints;
                previousSegment = prevSegment;
            } else {
                stackPoints = this._gapStackPoints(linePoints, seriesIx, style);
            }
        }

        var pointType;
        if (style === STEP) {
            pointType = StepAreaSegment;
        } else if (style === SMOOTH) {
            pointType = SplineAreaSegment;
        } else {
            pointType = AreaSegment;
        }

        return new pointType(linePoints, currentSeries, seriesIx, previousSegment, stackPoints);
    };

    AreaChart.prototype.reflow = function reflow (targetBox) {
        var this$1 = this;

        LineChart$$1.prototype.reflow.call(this, targetBox);

        var stackPoints = this._stackPoints;
        if (stackPoints) {
            for (var idx = 0; idx < stackPoints.length; idx++) {
                var stackPoint = stackPoints[idx];
                var pointSlot = this$1.categoryAxis.getSlot(stackPoint.categoryIx);
                stackPoint.reflow(pointSlot);
            }
        }
    };

    AreaChart.prototype._gapStackPoints = function _gapStackPoints (linePoints, seriesIx, style) {
        var this$1 = this;

        var seriesPoints = this.seriesPoints;
        var startIdx = linePoints[0].categoryIx;
        var length = linePoints.length;
        if (startIdx < 0) {
            startIdx = 0;
            length--;
        }

        var endIdx = startIdx + length;
        var pointOffset = this.seriesOptions[0]._outOfRangeMinPoint ? 1 : 0;
        var stackPoints = [];

        this._stackPoints = this._stackPoints || [];
        for (var categoryIx = startIdx; categoryIx < endIdx; categoryIx++) {
            var pointIx = categoryIx + pointOffset;
            var currentSeriesIx = seriesIx;
            var point = (void 0);

            do {
                currentSeriesIx--;
                point = seriesPoints[currentSeriesIx][pointIx];
            } while (currentSeriesIx > 0 && !point);

            if (point) {
                if (style !== STEP && categoryIx > startIdx && !seriesPoints[currentSeriesIx][pointIx - 1]) {
                    stackPoints.push(this$1._previousSegmentPoint(categoryIx, pointIx, pointIx - 1, currentSeriesIx));
                }

                stackPoints.push(point);

                if (style !== STEP && categoryIx + 1 < endIdx && !seriesPoints[currentSeriesIx][pointIx + 1]) {
                    stackPoints.push(this$1._previousSegmentPoint(categoryIx, pointIx, pointIx + 1, currentSeriesIx));
                }
            } else {
                var gapStackPoint = this$1._createGapStackPoint(categoryIx);
                this$1._stackPoints.push(gapStackPoint);
                stackPoints.push(gapStackPoint);
            }
        }

        return stackPoints;
    };

    AreaChart.prototype._previousSegmentPoint = function _previousSegmentPoint (categoryIx, pointIx, segmentIx, seriesIdx) {
        var seriesPoints = this.seriesPoints;
        var index = seriesIdx;
        var point;

        while (index > 0 && !point) {
            index--;
            point = seriesPoints[index][segmentIx];
        }

        if (!point) {
            point = this._createGapStackPoint(categoryIx);
            this._stackPoints.push(point);
        } else {
            point = seriesPoints[index][pointIx];
        }

        return point;
    };

    AreaChart.prototype._createGapStackPoint = function _createGapStackPoint (categoryIx) {
        var options = this.pointOptions({}, 0);
        var point = new LinePoint(0, options);
        point.categoryIx = categoryIx;
        point.series = {};

        return point;
    };

    AreaChart.prototype.seriesMissingValues = function seriesMissingValues (series) {
        return series.missingValues || ZERO;
    };

    AreaChart.prototype.supportsPointInactiveOpacity = function supportsPointInactiveOpacity () {
        return false;
    };

    return AreaChart;
}(LineChart));

var AxisGroupRangeTracker = (function (Class$$1) {
    function AxisGroupRangeTracker() {
        Class$$1.call(this);

        this.axisRanges = {};
    }

    if ( Class$$1 ) AxisGroupRangeTracker.__proto__ = Class$$1;
    AxisGroupRangeTracker.prototype = Object.create( Class$$1 && Class$$1.prototype );
    AxisGroupRangeTracker.prototype.constructor = AxisGroupRangeTracker;

    AxisGroupRangeTracker.prototype.update = function update (chartAxisRanges) {
        var axisRanges = this.axisRanges;

        for (var axisName in chartAxisRanges) {
            var chartRange = chartAxisRanges[axisName];
            var range = axisRanges[axisName];
            axisRanges[axisName] = range = range || { min: MAX_VALUE, max: MIN_VALUE };

            range.min = Math.min(range.min, chartRange.min);
            range.max = Math.max(range.max, chartRange.max);
        }
    };

    AxisGroupRangeTracker.prototype.reset = function reset (axisName) {
        this.axisRanges[axisName] = undefined;
    };

    AxisGroupRangeTracker.prototype.query = function query (axisName) {
        return this.axisRanges[axisName];
    };

    return AxisGroupRangeTracker;
}(_progress_kendoDrawing.Class));

var BarLabel = (function (ChartElement$$1) {
    function BarLabel(content, options, pointData) {
        ChartElement$$1.call(this, options);

        this.textBox = new TextBox(content, this.options, pointData);
        this.append(this.textBox);
    }

    if ( ChartElement$$1 ) BarLabel.__proto__ = ChartElement$$1;
    BarLabel.prototype = Object.create( ChartElement$$1 && ChartElement$$1.prototype );
    BarLabel.prototype.constructor = BarLabel;

    BarLabel.prototype.createVisual = function createVisual () {
        this.textBox.options.noclip = this.options.noclip;
    };

    BarLabel.prototype.reflow = function reflow (targetBox) {
        var options = this.options;
        var vertical = options.vertical;
        var aboveAxis = options.aboveAxis;
        var text = this.children[0];
        var textOptions = text.options;
        var box = text.box;
        var padding = text.options.padding;
        var labelBox = targetBox;

        textOptions.align = vertical ? CENTER : LEFT;
        textOptions.vAlign = vertical ? TOP : CENTER;

        if (options.position === INSIDE_END) {
            if (vertical) {
                textOptions.vAlign = TOP;

                if (!aboveAxis && box.height() < targetBox.height()) {
                    textOptions.vAlign = BOTTOM;
                }
            } else {
                textOptions.align = aboveAxis ? RIGHT : LEFT;
            }
        } else if (options.position === CENTER) {
            textOptions.vAlign = CENTER;
            textOptions.align = CENTER;
        } else if (options.position === INSIDE_BASE) {
            if (vertical) {
                textOptions.vAlign = aboveAxis ? BOTTOM : TOP;
            } else {
                textOptions.align = aboveAxis ? LEFT : RIGHT;
            }
        } else if (options.position === OUTSIDE_END) {
            if (vertical) {
                if (aboveAxis) {
                    labelBox = new Box(
                        targetBox.x1, targetBox.y1 - box.height(),
                        targetBox.x2, targetBox.y1
                    );
                } else {
                    labelBox = new Box(
                        targetBox.x1, targetBox.y2,
                        targetBox.x2, targetBox.y2 + box.height()
                    );
                }
            } else {
                textOptions.align = CENTER;
                if (aboveAxis) {
                    labelBox = new Box(
                        targetBox.x2, targetBox.y1,
                        targetBox.x2 + box.width(), targetBox.y2
                    );
                } else {
                    labelBox = new Box(
                        targetBox.x1 - box.width(), targetBox.y1,
                        targetBox.x1, targetBox.y2
                    );
                }
            }
        }

        if (!options.rotation) {
            if (vertical) {
                padding.left = padding.right =
                    (labelBox.width() - text.contentBox.width()) / 2;
            } else {
                padding.top = padding.bottom =
                    (labelBox.height() - text.contentBox.height()) / 2;
            }
        }

        text.reflow(labelBox);
    };

    BarLabel.prototype.alignToClipBox = function alignToClipBox (clipBox) {
        var vertical = this.options.vertical;
        var field = vertical ? Y : X;
        var start = field + "1";
        var end = field + "2";
        var text = this.children[0];
        var parentBox = this.parent.box;

        if (parentBox[start] < clipBox[start] || clipBox[end] < parentBox[end]) {
            var targetBox = text.paddingBox.clone();
            targetBox[start] = Math.max(parentBox[start], clipBox[start]);
            targetBox[end] = Math.min(parentBox[end], clipBox[end]);

            this.reflow(targetBox);
        }
    };

    return BarLabel;
}(ChartElement));

setDefaultOptions(BarLabel, {
    position: OUTSIDE_END,
    margin: getSpacing(3),
    padding: getSpacing(4),
    color: BLACK,
    background: "",
    border: {
        width: 1,
        color: ""
    },
    aboveAxis: true,
    vertical: false,
    animation: {
        type: FADEIN,
        delay: INITIAL_ANIMATION_DURATION
    },
    zIndex: 2
});

function hasGradientOverlay(options) {
    var overlay = options.overlay;

    return overlay && overlay.gradient && overlay.gradient !== "none";
}

var BAR_ALIGN_MIN_WIDTH = 6;

var Bar = (function (ChartElement$$1) {
    function Bar(value, options) {
        ChartElement$$1.call(this);

        this.options = options;
        this.color = options.color || WHITE;
        this.aboveAxis = valueOrDefault(this.options.aboveAxis, true);
        this.value = value;
    }

    if ( ChartElement$$1 ) Bar.__proto__ = ChartElement$$1;
    Bar.prototype = Object.create( ChartElement$$1 && ChartElement$$1.prototype );
    Bar.prototype.constructor = Bar;

    Bar.prototype.render = function render () {
        if (this._rendered) {
            return;
        }

        this._rendered = true;

        this.createLabel();
        this.createNote();

        if (this.errorBar) {
            this.append(this.errorBar);
        }
    };

    Bar.prototype.createLabel = function createLabel () {
        var options = this.options;
        var labels = options.labels;

        if (labels.visible) {
            var pointData = this.pointData();
            var labelTemplate = getTemplate(labels);
            var labelText;

            if (labelTemplate) {
                labelText = labelTemplate(pointData);
            } else {
                labelText = this.formatValue(labels.format);
            }

            this.label = new BarLabel(labelText,
                deepExtend({
                    vertical: options.vertical
                },
                labels
            ), pointData);
            this.append(this.label);
        }
    };

    Bar.prototype.formatValue = function formatValue (format) {
        return this.owner.formatPointValue(this, format);
    };

    Bar.prototype.reflow = function reflow (targetBox) {
        var this$1 = this;

        this.render();

        var label = this.label;

        this.box = targetBox;

        if (label) {
            label.options.aboveAxis = this.aboveAxis;
            label.reflow(targetBox);
        }

        if (this.note) {
            this.note.reflow(targetBox);
        }

        if (this.errorBars) {
            for (var i = 0; i < this.errorBars.length; i++) {
                this$1.errorBars[i].reflow(targetBox);
            }
        }
    };

    Bar.prototype.createVisual = function createVisual () {
        var this$1 = this;

        var ref = this;
        var box = ref.box;
        var options = ref.options;
        var customVisual = options.visual;

        if (this.visible !== false) {
            ChartElement$$1.prototype.createVisual.call(this);

            if (customVisual) {
                var visual = this.rectVisual = customVisual({
                    category: this.category,
                    dataItem: this.dataItem,
                    value: this.value,
                    sender: this.getSender(),
                    series: this.series,
                    percentage: this.percentage,
                    stackValue: this.stackValue,
                    runningTotal: this.runningTotal,
                    total: this.total,
                    rect: box.toRect(),
                    createVisual: function () {
                        var group = new _progress_kendoDrawing.drawing.Group();
                        this$1.createRect(group);
                        return group;
                    },
                    options: options
                });

                if (visual) {
                    this.visual.append(visual);
                }
            } else if (box.width() > 0 && box.height() > 0) {
                this.createRect(this.visual);
            }
        }
    };

    Bar.prototype.createRect = function createRect (visual) {
        var options = this.options;
        var border = options.border;
        var strokeOpacity = defined(border.opacity) ? border.opacity : options.opacity;
        var rect = this.box.toRect();

        rect.size.width = Math.round(rect.size.width);

        var path = this.rectVisual = _progress_kendoDrawing.drawing.Path.fromRect(rect, {
            fill: {
                color: this.color,
                opacity: options.opacity
            },
            stroke: {
                color: this.getBorderColor(),
                width: border.width,
                opacity: strokeOpacity,
                dashType: border.dashType
            }
        });

        var width = this.box.width();
        var height = this.box.height();

        var size = options.vertical ? width : height;

        if (size > BAR_ALIGN_MIN_WIDTH) {
            alignPathToPixel(path);

            // Fixes lineJoin issue in firefox when the joined lines are parallel
            if (width < 1 || height < 1) {
                path.options.stroke.lineJoin = "round";
            }
        }

        visual.append(path);

        if (hasGradientOverlay(options)) {
            var overlay = this.createGradientOverlay(path, { baseColor: this.color }, deepExtend({
                end: !options.vertical ? [ 0, 1 ] : undefined
            }, options.overlay));

            visual.append(overlay);
        }
    };

    Bar.prototype.createHighlight = function createHighlight (style) {
        var highlight = _progress_kendoDrawing.drawing.Path.fromRect(this.box.toRect(), style);

        return alignPathToPixel(highlight);
    };

    Bar.prototype.highlightVisual = function highlightVisual () {
        return this.rectVisual;
    };

    Bar.prototype.highlightVisualArgs = function highlightVisualArgs () {
        return {
            options: this.options,
            rect: this.box.toRect(),
            visual: this.rectVisual
        };
    };

    Bar.prototype.getBorderColor = function getBorderColor () {
        var color = this.color;
        var border = this.options.border;
        var brightness = border._brightness || BORDER_BRIGHTNESS;
        var borderColor = border.color;

        if (!defined(borderColor)) {
            borderColor = new _progress_kendoDrawing.Color(color).brightness(brightness).toHex();
        }

        return borderColor;
    };

    Bar.prototype.tooltipAnchor = function tooltipAnchor () {
        var ref = this;
        var options = ref.options;
        var box = ref.box;
        var aboveAxis = ref.aboveAxis;
        var clipBox = this.owner.pane.clipBox() || box;
        var horizontalAlign = LEFT;
        var verticalAlign = TOP;
        var x, y;

        if (options.vertical) {
            x = Math.min(box.x2, clipBox.x2) + TOOLTIP_OFFSET;
            if (aboveAxis) {
                y = Math.max(box.y1, clipBox.y1);
            } else {
                y = Math.min(box.y2, clipBox.y2);
                verticalAlign = BOTTOM;
            }
        } else {
            var x1 = Math.max(box.x1, clipBox.x1);
            var x2 = Math.min(box.x2, clipBox.x2);

            if (options.isStacked) {
                verticalAlign = BOTTOM;
                if (aboveAxis) {
                    horizontalAlign = RIGHT;
                    x = x2;
                } else {
                    x = x1;
                }
                y = Math.max(box.y1, clipBox.y1) - TOOLTIP_OFFSET;
            } else {
                if (aboveAxis) {
                    x = x2 + TOOLTIP_OFFSET;
                } else {
                    x = x1 - TOOLTIP_OFFSET;
                    horizontalAlign = RIGHT;
                }
                y = Math.max(box.y1, clipBox.y1);
            }
        }

        return {
            point: new Point(x, y),
            align: {
                horizontal: horizontalAlign,
                vertical: verticalAlign
            }
        };
    };

    Bar.prototype.overlapsBox = function overlapsBox (box) {
        return this.box.overlaps(box);
    };

    Bar.prototype.pointData = function pointData () {
        return {
            dataItem: this.dataItem,
            category: this.category,
            value: this.value,
            percentage: this.percentage,
            stackValue: this.stackValue,
            runningTotal: this.runningTotal,
            total: this.total,
            series: this.series
        };
    };

    return Bar;
}(ChartElement));

deepExtend(Bar.prototype, PointEventsMixin);
deepExtend(Bar.prototype, NoteMixin);

Bar.prototype.defaults = {
    border: {
        width: 1
    },
    vertical: true,
    overlay: {
        gradient: "glass"
    },
    labels: {
        visible: false,
        format: "{0}"
    },
    opacity: 1,
    notes: {
        label: {}
    }
};

function forEach(elements, callback) {
    elements.forEach(callback);
}

function forEachReverse(elements, callback) {
    var length = elements.length;

    for (var idx = length - 1; idx >= 0; idx--) {
        callback(elements[idx], idx - length - 1);
    }
}

var ClusterLayout = (function (ChartElement$$1) {
    function ClusterLayout(options) {
        ChartElement$$1.call(this, options);

        this.forEach = options.rtl ? forEachReverse : forEach;
    }

    if ( ChartElement$$1 ) ClusterLayout.__proto__ = ChartElement$$1;
    ClusterLayout.prototype = Object.create( ChartElement$$1 && ChartElement$$1.prototype );
    ClusterLayout.prototype.constructor = ClusterLayout;

    ClusterLayout.prototype.reflow = function reflow (box) {
        var ref = this.options;
        var vertical = ref.vertical;
        var gap = ref.gap;
        var spacing = ref.spacing;
        var children = this.children;
        var count = children.length;
        var axis = vertical ? Y : X;
        var slots = count + gap + (spacing * (count - 1));
        var slotSize = (vertical ? box.height() : box.width()) / slots;
        var position = box[axis + 1] + slotSize * (gap / 2);

        this.forEach(children, function (child, idx) {
            var childBox = (child.box || box).clone();

            childBox[axis + 1] = position;
            childBox[axis + 2] = position + slotSize;

            child.reflow(childBox);
            if (idx < count - 1) {
                position += (slotSize * spacing);
            }

            position += slotSize;
        });
    };

    return ClusterLayout;
}(ChartElement));

setDefaultOptions(ClusterLayout, {
    vertical: false,
    gap: 0,
    spacing: 0
});

var StackWrap = (function (ChartElement$$1) {
    function StackWrap () {
        ChartElement$$1.apply(this, arguments);
    }

    if ( ChartElement$$1 ) StackWrap.__proto__ = ChartElement$$1;
    StackWrap.prototype = Object.create( ChartElement$$1 && ChartElement$$1.prototype );
    StackWrap.prototype.constructor = StackWrap;

    StackWrap.prototype.reflow = function reflow (targetBox) {
        var this$1 = this;

        var positionAxis = this.options.vertical ? X : Y;
        var children = this.children;
        var childrenCount = children.length;
        var box = this.box = new Box();

        for (var i = 0; i < childrenCount; i++) {
            var currentChild = children[i];

            if (currentChild.visible !== false) {
                var childBox = currentChild.box.clone();
                childBox.snapTo(targetBox, positionAxis);

                if (i === 0) {
                    box = this$1.box = childBox.clone();
                }

                currentChild.reflow(childBox);
                box.wrap(childBox);
            }
        }
    };

    return StackWrap;
}(ChartElement));

setDefaultOptions(StackWrap, {
    vertical: true
});

var BarChart = (function (CategoricalChart$$1) {
    function BarChart () {
        CategoricalChart$$1.apply(this, arguments);
    }

    if ( CategoricalChart$$1 ) BarChart.__proto__ = CategoricalChart$$1;
    BarChart.prototype = Object.create( CategoricalChart$$1 && CategoricalChart$$1.prototype );
    BarChart.prototype.constructor = BarChart;

    BarChart.prototype.render = function render () {
        CategoricalChart$$1.prototype.render.call(this);
        this.updateStackRange();
    };

    BarChart.prototype.pointType = function pointType () {
        return Bar;
    };

    BarChart.prototype.clusterType = function clusterType () {
        return ClusterLayout;
    };

    BarChart.prototype.stackType = function stackType () {
        return StackWrap;
    };

    BarChart.prototype.stackLimits = function stackLimits (axisName, stackName) {
        var limits = CategoricalChart$$1.prototype.stackLimits.call(this, axisName, stackName);

        return limits;
    };

    BarChart.prototype.createPoint = function createPoint (data, fields) {
        var categoryIx = fields.categoryIx;
        var category = fields.category;
        var series = fields.series;
        var seriesIx = fields.seriesIx;
        var ref = this;
        var options = ref.options;
        var children = ref.children;
        var isStacked = options.isStacked;
        var value = this.pointValue(data);
        var pointOptions = this.pointOptions(series, seriesIx);

        var labelOptions = pointOptions.labels;
        if (isStacked) {
            if (labelOptions.position === OUTSIDE_END) {
                labelOptions.position = INSIDE_END;
            }
        }

        pointOptions.isStacked = isStacked;

        var color = data.fields.color || series.color;
        if (value < 0 && pointOptions.negativeColor) {
            color = pointOptions.negativeColor;
        }

        pointOptions = this.evalPointOptions(
            pointOptions, value, category, categoryIx, series, seriesIx
        );

        if (isFunction(series.color)) {
            color = pointOptions.color;
        }

        var pointType = this.pointType();
        var point = new pointType(value, pointOptions);
        point.color = color;

        var cluster = children[categoryIx];
        if (!cluster) {
            var clusterType = this.clusterType();
            cluster = new clusterType({
                vertical: options.invertAxes,
                gap: options.gap,
                spacing: options.spacing,
                rtl: !options.invertAxes && (this.chartService || {}).rtl
            });
            this.append(cluster);
        }

        if (isStacked) {
            var stackWrap = this.getStackWrap(series, cluster);
            stackWrap.append(point);
        } else {
            cluster.append(point);
        }

        return point;
    };

    BarChart.prototype.getStackWrap = function getStackWrap (series, cluster) {
        var stack = series.stack;
        var stackGroup = stack ? stack.group || stack : stack;
        var wraps = cluster.children;
        var stackWrap;

        if (typeof stackGroup === STRING) {
            for (var i = 0; i < wraps.length; i++) {
                if (wraps[i]._stackGroup === stackGroup) {
                    stackWrap = wraps[i];
                    break;
                }
            }
        } else {
            stackWrap = wraps[0];
        }

        if (!stackWrap) {
            var stackType = this.stackType();
            stackWrap = new stackType({
                vertical: !this.options.invertAxes
            });
            stackWrap._stackGroup = stackGroup;
            cluster.append(stackWrap);
        }

        return stackWrap;
    };

    BarChart.prototype.categorySlot = function categorySlot (categoryAxis, categoryIx, valueAxis) {
        var options = this.options;
        var categorySlot = categoryAxis.getSlot(categoryIx);
        var startValue = valueAxis.startValue();

        if (options.isStacked) {
            var zeroSlot = valueAxis.getSlot(startValue, startValue, true);
            var stackAxis = options.invertAxes ? X : Y;
            categorySlot[stackAxis + 1] = categorySlot[stackAxis + 2] = zeroSlot[stackAxis + 1];
        }

        return categorySlot;
    };

    BarChart.prototype.reflowCategories = function reflowCategories (categorySlots) {
        var children = this.children;
        var childrenLength = children.length;

        for (var i = 0; i < childrenLength; i++) {
            children[i].reflow(categorySlots[i]);
        }
    };

    BarChart.prototype.createAnimation = function createAnimation () {
        this._setAnimationOptions();
        CategoricalChart$$1.prototype.createAnimation.call(this);

        if (anyHasZIndex(this.options.series)) {
            this._setChildrenAnimation();
        }
    };

    BarChart.prototype._setChildrenAnimation = function _setChildrenAnimation () {
        var this$1 = this;

        var points = this.points;

        for (var idx = 0; idx < points.length; idx++) {
            var point = points[idx];
            var pointVisual = point.visual;
            if (pointVisual && defined(pointVisual.options.zIndex)) {
                point.options.animation = this$1.options.animation;
                point.createAnimation();
            }
        }
    };

    BarChart.prototype._setAnimationOptions = function _setAnimationOptions () {
        var options = this.options;
        var animation = options.animation || {};
        var origin;

        if (options.isStacked) {
            var valueAxis = this.seriesValueAxis(options.series[0]);
            origin = valueAxis.getSlot(valueAxis.startValue());
        } else {
            origin = this.categoryAxis.getSlot(0);
        }

        animation.origin = new _progress_kendoDrawing.geometry.Point(origin.x1, origin.y1);
        animation.vertical = !options.invertAxes;
    };

    return BarChart;
}(CategoricalChart));

setDefaultOptions(BarChart, {
    animation: {
        type: BAR
    }
});

var Candlestick = (function (ChartElement$$1) {
    function Candlestick(value, options) {
        ChartElement$$1.call(this, options);
        this.value = value;
    }

    if ( ChartElement$$1 ) Candlestick.__proto__ = ChartElement$$1;
    Candlestick.prototype = Object.create( ChartElement$$1 && ChartElement$$1.prototype );
    Candlestick.prototype.constructor = Candlestick;

    Candlestick.prototype.reflow = function reflow (box) {
        var ref = this;
        var options = ref.options;
        var value = ref.value;
        var chart = ref.owner;
        var valueAxis = chart.seriesValueAxis(options);
        var ocSlot = valueAxis.getSlot(value.open, value.close);
        var lhSlot = valueAxis.getSlot(value.low, value.high);

        ocSlot.x1 = lhSlot.x1 = box.x1;
        ocSlot.x2 = lhSlot.x2 = box.x2;

        this.realBody = ocSlot;

        var mid = lhSlot.center().x;
        var points = [];

        points.push([ [ mid, lhSlot.y1 ], [ mid, ocSlot.y1 ] ]);
        points.push([ [ mid, ocSlot.y2 ], [ mid, lhSlot.y2 ] ]);

        this.lines = points;

        this.box = lhSlot.clone().wrap(ocSlot);

        if (!this._rendered) {
            this._rendered = true;
            this.createNote();
        }

        this.reflowNote();
    };

    Candlestick.prototype.reflowNote = function reflowNote () {
        if (this.note) {
            this.note.reflow(this.box);
        }
    };

    Candlestick.prototype.createVisual = function createVisual () {
        ChartElement$$1.prototype.createVisual.call(this);
        this._mainVisual = this.mainVisual(this.options);
        this.visual.append(
            this._mainVisual
        );

        this.createOverlay();
    };

    Candlestick.prototype.mainVisual = function mainVisual (options) {
        var group = new _progress_kendoDrawing.drawing.Group();

        this.createBody(group, options);
        this.createLines(group, options);

        return group;
    };

    Candlestick.prototype.createBody = function createBody (container, options) {
        var body = _progress_kendoDrawing.drawing.Path.fromRect(this.realBody.toRect(), {
            fill: {
                color: this.color,
                opacity: options.opacity
            },
            stroke: null
        });

        if (options.border.width > 0) {
            body.options.set("stroke", {
                color: this.getBorderColor(),
                width: options.border.width,
                dashType: options.border.dashType,
                opacity: valueOrDefault(options.border.opacity, options.opacity)
            });
        }

        alignPathToPixel(body);
        container.append(body);

        if (hasGradientOverlay(options)) {
            container.append(this.createGradientOverlay(body, { baseColor: this.color }, deepExtend({
                end: !options.vertical ? [ 0, 1 ] : undefined
            }, options.overlay)));
        }
    };

    Candlestick.prototype.createLines = function createLines (container, options) {
        this.drawLines(container, options, this.lines, options.line);
    };

    Candlestick.prototype.drawLines = function drawLines (container, options, lines, lineOptions) {
        if (!lines) {
            return;
        }

        var lineStyle = {
            stroke: {
                color: lineOptions.color || this.color,
                opacity: valueOrDefault(lineOptions.opacity, options.opacity),
                width: lineOptions.width,
                dashType: lineOptions.dashType,
                lineCap: "butt"
            }
        };

        for (var i = 0; i < lines.length; i++) {
            var line = _progress_kendoDrawing.drawing.Path.fromPoints(lines[i], lineStyle);
            alignPathToPixel(line);
            container.append(line);
        }
    };

    Candlestick.prototype.getBorderColor = function getBorderColor () {
        var border = this.options.border;
        var borderColor = border.color;

        if (!defined(borderColor)) {
            borderColor = new _progress_kendoDrawing.Color(this.color).brightness(border._brightness).toHex();
        }

        return borderColor;
    };

    Candlestick.prototype.createOverlay = function createOverlay () {
        var overlay = _progress_kendoDrawing.drawing.Path.fromRect(this.box.toRect(), {
            fill: {
                color: WHITE,
                opacity: 0
            },
            stroke: null
        });

        this.visual.append(overlay);
    };

    Candlestick.prototype.createHighlight = function createHighlight () {
        var highlight = this.options.highlight;
        var normalColor = this.color;

        this.color = highlight.color || this.color;
        var overlay = this.mainVisual(
            deepExtend({}, this.options, {
                line: {
                    color: this.getBorderColor()
                }
            }, highlight)
        );
        this.color = normalColor;

        return overlay;
    };

    Candlestick.prototype.highlightVisual = function highlightVisual () {
        return this._mainVisual;
    };

    Candlestick.prototype.highlightVisualArgs = function highlightVisualArgs () {
        return {
            options: this.options,
            rect: this.box.toRect(),
            visual: this._mainVisual
        };
    };

    Candlestick.prototype.tooltipAnchor = function tooltipAnchor () {
        var box = this.box;
        var clipBox = this.owner.pane.clipBox() || box;

        return {
            point: new Point(box.x2 + TOOLTIP_OFFSET, Math.max(box.y1, clipBox.y1) + TOOLTIP_OFFSET),
            align: {
                horizontal: LEFT,
                vertical: TOP
            }
        };
    };

    Candlestick.prototype.formatValue = function formatValue (format) {
        return this.owner.formatPointValue(this, format);
    };

    Candlestick.prototype.overlapsBox = function overlapsBox (box) {
        return this.box.overlaps(box);
    };

    return Candlestick;
}(ChartElement));

setDefaultOptions(Candlestick, {
    vertical: true,
    border: {
        _brightness: 0.8
    },
    line: {
        width: 2
    },
    overlay: {
        gradient: "glass"
    },
    tooltip: {
        format: "<table>" +
                    "<tr><th colspan='2'>{4:d}</th></tr>" +
                    "<tr><td>Open:</td><td>{0:C}</td></tr>" +
                    "<tr><td>High:</td><td>{1:C}</td></tr>" +
                    "<tr><td>Low:</td><td>{2:C}</td></tr>" +
                    "<tr><td>Close:</td><td>{3:C}</td></tr>" +
                "</table>"
    },
    highlight: {
        opacity: 1,
        border: {
            width: 1,
            opacity: 1
        },
        line: {
            width: 1,
            opacity: 1
        }
    },
    notes: {
        visible: true,
        label: {}
    }
});

deepExtend(Candlestick.prototype, PointEventsMixin);
deepExtend(Candlestick.prototype, NoteMixin);

function areNumbers(values) {
    return countNumbers(values) === values.length;
}

var CandlestickChart = (function (CategoricalChart$$1) {
    function CandlestickChart () {
        CategoricalChart$$1.apply(this, arguments);
    }

    if ( CategoricalChart$$1 ) CandlestickChart.__proto__ = CategoricalChart$$1;
    CandlestickChart.prototype = Object.create( CategoricalChart$$1 && CategoricalChart$$1.prototype );
    CandlestickChart.prototype.constructor = CandlestickChart;

    CandlestickChart.prototype.reflowCategories = function reflowCategories (categorySlots) {
        var children = this.children;
        var childrenLength = children.length;

        for (var i = 0; i < childrenLength; i++) {
            children[i].reflow(categorySlots[i]);
        }
    };

    CandlestickChart.prototype.addValue = function addValue (data, fields) {
        var categoryIx = fields.categoryIx;
        var category = fields.category;
        var series = fields.series;
        var seriesIx = fields.seriesIx;
        var ref = this;
        var children = ref.children;
        var options = ref.options;
        var value = data.valueFields;
        var valueParts = this.splitValue(value);
        var hasValue = areNumbers(valueParts);
        var dataItem = series.data[categoryIx];
        var categoryPoints = this.categoryPoints[categoryIx];
        var point;

        if (!categoryPoints) {
            this.categoryPoints[categoryIx] = categoryPoints = [];
        }

        if (hasValue) {
            point = this.createPoint(data, fields);
        }

        var cluster = children[categoryIx];
        if (!cluster) {
            cluster = new ClusterLayout({
                vertical: options.invertAxes,
                gap: options.gap,
                spacing: options.spacing,
                rtl: !options.invertAxes && (this.chartService || {}).rtl
            });
            this.append(cluster);
        }

        if (point) {
            this.updateRange(value, fields);

            cluster.append(point);

            point.categoryIx = categoryIx;
            point.category = category;
            point.series = series;
            point.seriesIx = seriesIx;
            point.owner = this;
            point.dataItem = dataItem;
            point.noteText = data.fields.noteText;
        }

        this.points.push(point);
        categoryPoints.push(point);
    };

    CandlestickChart.prototype.pointType = function pointType () {
        return Candlestick;
    };

    CandlestickChart.prototype.createPoint = function createPoint (data, fields) {
        var categoryIx = fields.categoryIx;
        var category = fields.category;
        var series = fields.series;
        var seriesIx = fields.seriesIx;
        var pointType = this.pointType();
        var value = data.valueFields;
        var pointOptions = deepExtend({}, series);
        var color = data.fields.color || series.color;

        pointOptions = this.evalPointOptions(
            pointOptions, value, category, categoryIx, series, seriesIx
        );

        if (series.type === CANDLESTICK) {
            if (value.open > value.close) {
                color = data.fields.downColor || series.downColor || series.color;
            }
        }

        if (isFunction(series.color)) {
            color = pointOptions.color;
        }

        pointOptions.vertical = !this.options.invertAxes;

        var point = new pointType(value, pointOptions);
        point.color = color;

        return point;
    };

    CandlestickChart.prototype.splitValue = function splitValue (value) {
        return [ value.low, value.open, value.close, value.high ];
    };

    CandlestickChart.prototype.updateRange = function updateRange (value, fields) {
        var axisName = fields.series.axis;
        var parts = this.splitValue(value);
        var axisRange = this.valueAxisRanges[axisName];

        axisRange = this.valueAxisRanges[axisName] =
            axisRange || { min: MAX_VALUE, max: MIN_VALUE };

        axisRange = this.valueAxisRanges[axisName] = {
            min: Math.min.apply(Math, parts.concat([ axisRange.min ])),
            max: Math.max.apply(Math, parts.concat([ axisRange.max ]))
        };
    };

    CandlestickChart.prototype.formatPointValue = function formatPointValue (point, format) {
        var value = point.value;

        return this.chartService.format.auto(format,
            value.open, value.high,
            value.low, value.close, point.category
        );
    };

    CandlestickChart.prototype.animationPoints = function animationPoints () {
        return this.points;
    };

    return CandlestickChart;
}(CategoricalChart));

deepExtend(CandlestickChart.prototype, ClipAnimationMixin);

var BoxPlot = (function (Candlestick$$1) {
    function BoxPlot(value, options) {
        Candlestick$$1.call(this, value, options);

        this.createNote();
    }

    if ( Candlestick$$1 ) BoxPlot.__proto__ = Candlestick$$1;
    BoxPlot.prototype = Object.create( Candlestick$$1 && Candlestick$$1.prototype );
    BoxPlot.prototype.constructor = BoxPlot;

    BoxPlot.prototype.reflow = function reflow (box) {
        var ref = this;
        var options = ref.options;
        var value = ref.value;
        var chart = ref.owner;
        var valueAxis = chart.seriesValueAxis(options);
        var whiskerSlot, boxSlot;

        this.boxSlot = boxSlot = valueAxis.getSlot(value.q1, value.q3);
        this.realBody = boxSlot;
        this.reflowBoxSlot(box);

        this.whiskerSlot = whiskerSlot = valueAxis.getSlot(value.lower, value.upper);
        this.reflowWhiskerSlot(box);

        var medianSlot = valueAxis.getSlot(value.median);

        if (value.mean) {
            var meanSlot = valueAxis.getSlot(value.mean);
            this.meanPoints = this.calcMeanPoints(box, meanSlot);
        }

        this.whiskerPoints = this.calcWhiskerPoints(boxSlot, whiskerSlot);
        this.medianPoints = this.calcMedianPoints(box, medianSlot);

        this.box = whiskerSlot.clone().wrap(boxSlot);
        this.reflowNote();
    };

    BoxPlot.prototype.reflowBoxSlot = function reflowBoxSlot (box) {
        this.boxSlot.x1 = box.x1;
        this.boxSlot.x2 = box.x2;
    };

    BoxPlot.prototype.reflowWhiskerSlot = function reflowWhiskerSlot (box) {
        this.whiskerSlot.x1 = box.x1;
        this.whiskerSlot.x2 = box.x2;
    };

    BoxPlot.prototype.calcMeanPoints = function calcMeanPoints (box, meanSlot) {
        return [
            [ [ box.x1, meanSlot.y1 ], [ box.x2, meanSlot.y1 ] ]
        ];
    };

    BoxPlot.prototype.calcWhiskerPoints = function calcWhiskerPoints (boxSlot, whiskerSlot) {
        var mid = whiskerSlot.center().x;
        return [ [
            [ mid - 5, whiskerSlot.y1 ], [ mid + 5, whiskerSlot.y1 ],
            [ mid, whiskerSlot.y1 ], [ mid, boxSlot.y1 ]
        ], [
            [ mid - 5, whiskerSlot.y2 ], [ mid + 5, whiskerSlot.y2 ],
            [ mid, whiskerSlot.y2 ], [ mid, boxSlot.y2 ]
        ] ];
    };

    BoxPlot.prototype.calcMedianPoints = function calcMedianPoints (box, medianSlot) {
        return [
            [ [ box.x1, medianSlot.y1 ], [ box.x2, medianSlot.y1 ] ]
        ];
    };

    BoxPlot.prototype.renderOutliers = function renderOutliers (options) {
        var this$1 = this;

        var value = this.value;
        var outliers = value.outliers || [];
        var outerFence = Math.abs(value.q3 - value.q1) * 3;
        var elements = [];
        var markers = options.markers || {};

        for (var i = 0; i < outliers.length; i++) {
            var outlierValue = outliers[i];
            if (outlierValue < value.q3 + outerFence && outlierValue > value.q1 - outerFence) {
                markers = options.outliers;
            } else {
                markers = options.extremes;
            }
            var markersBorder = deepExtend({}, markers.border);

            if (!defined(markersBorder.color)) {
                if (defined(this$1.color)) {
                    markersBorder.color = this$1.color;
                } else {
                    markersBorder.color =
                        new _progress_kendoDrawing.Color(markers.background).brightness(BORDER_BRIGHTNESS).toHex();
                }
            }

            var shape = new ShapeElement({
                type: markers.type,
                width: markers.size,
                height: markers.size,
                rotation: markers.rotation,
                background: markers.background,
                border: markersBorder,
                opacity: markers.opacity
            });

            shape.value = outlierValue;

            elements.push(shape);
        }

        this.reflowOutliers(elements);
        return elements;
    };

    BoxPlot.prototype.reflowOutliers = function reflowOutliers (outliers) {
        var this$1 = this;

        var valueAxis = this.owner.seriesValueAxis(this.options);
        var center = this.box.center();

        for (var i = 0; i < outliers.length; i++) {
            var outlierValue = outliers[i].value;
            var markerBox = valueAxis.getSlot(outlierValue);

            if (this$1.options.vertical) {
                markerBox.move(center.x);
            } else {
                markerBox.move(undefined, center.y);
            }

            this$1.box = this$1.box.wrap(markerBox);
            outliers[i].reflow(markerBox);
        }
    };

    BoxPlot.prototype.mainVisual = function mainVisual (options) {
        var group = Candlestick$$1.prototype.mainVisual.call(this, options);
        var outliers = this.renderOutliers(options);

        for (var i = 0; i < outliers.length; i++) {
            var element = outliers[i].getElement();
            if (element) {
                group.append(element);
            }
        }

        return group;
    };

    BoxPlot.prototype.createLines = function createLines (container, options) {
        this.drawLines(container, options, this.whiskerPoints, options.whiskers);
        this.drawLines(container, options, this.medianPoints, options.median);
        this.drawLines(container, options, this.meanPoints, options.mean);
    };

    BoxPlot.prototype.getBorderColor = function getBorderColor () {
        if ((this.options.border || {}).color) {
            return this.options.border.color;
        }

        if (this.color) {
            return this.color;
        }

        return Candlestick$$1.prototype.getBorderColor.call(this);
    };

    return BoxPlot;
}(Candlestick));

setDefaultOptions(BoxPlot, {
    border: {
        _brightness: 0.8
    },
    line: {
        width: 2
    },
    median: {
        color: "#f6f6f6"
    },
    mean: {
        width: 2,
        dashType: "dash",
        color: "#f6f6f6"
    },
    overlay: {
        gradient: "glass"
    },
    tooltip: {
        format: "<table>" +
                    "<tr><th colspan='2'>{6:d}</th></tr>" +
                    "<tr><td>Lower:</td><td>{0:C}</td></tr>" +
                    "<tr><td>Q1:</td><td>{1:C}</td></tr>" +
                    "<tr><td>Median:</td><td>{2:C}</td></tr>" +
                    "<tr><td>Mean:</td><td>{5:C}</td></tr>" +
                    "<tr><td>Q3:</td><td>{3:C}</td></tr>" +
                    "<tr><td>Upper:</td><td>{4:C}</td></tr>" +
                "</table>"
    },
    highlight: {
        opacity: 1,
        border: {
            width: 1,
            opacity: 1
        },
        line: {
            width: 1,
            opacity: 1
        }
    },
    notes: {
        visible: true,
        label: {}
    },
    outliers: {
        visible: true,
        size: LINE_MARKER_SIZE,
        type: CROSS,
        background: WHITE,
        border: {
            width: 2,
            opacity: 1
        },
        opacity: 0
    },
    extremes: {
        visible: true,
        size: LINE_MARKER_SIZE,
        type: CIRCLE,
        background: WHITE,
        border: {
            width: 2,
            opacity: 1
        },
        opacity: 0
    }
});

deepExtend(BoxPlot.prototype, PointEventsMixin);

var VerticalBoxPlot = (function (BoxPlot$$1) {
    function VerticalBoxPlot () {
        BoxPlot$$1.apply(this, arguments);
    }

    if ( BoxPlot$$1 ) VerticalBoxPlot.__proto__ = BoxPlot$$1;
    VerticalBoxPlot.prototype = Object.create( BoxPlot$$1 && BoxPlot$$1.prototype );
    VerticalBoxPlot.prototype.constructor = VerticalBoxPlot;

    VerticalBoxPlot.prototype.reflowBoxSlot = function reflowBoxSlot (box) {
        this.boxSlot.y1 = box.y1;
        this.boxSlot.y2 = box.y2;
    };

    VerticalBoxPlot.prototype.reflowWhiskerSlot = function reflowWhiskerSlot (box) {
        this.whiskerSlot.y1 = box.y1;
        this.whiskerSlot.y2 = box.y2;
    };

    VerticalBoxPlot.prototype.calcMeanPoints = function calcMeanPoints (box, meanSlot) {
        return [
            [ [ meanSlot.x1, box.y1 ], [ meanSlot.x1, box.y2 ] ]
        ];
    };

    VerticalBoxPlot.prototype.calcWhiskerPoints = function calcWhiskerPoints (boxSlot, whiskerSlot) {
        var mid = whiskerSlot.center().y;
        return [ [
            [ whiskerSlot.x1, mid - 5 ], [ whiskerSlot.x1, mid + 5 ],
            [ whiskerSlot.x1, mid ], [ boxSlot.x1, mid ]
        ], [
            [ whiskerSlot.x2, mid - 5 ], [ whiskerSlot.x2, mid + 5 ],
            [ whiskerSlot.x2, mid ], [ boxSlot.x2, mid ]
        ] ];
    };

    VerticalBoxPlot.prototype.calcMedianPoints = function calcMedianPoints (box, medianSlot) {
        return [
            [ [ medianSlot.x1, box.y1 ], [ medianSlot.x1, box.y2 ] ]
        ];
    };

    return VerticalBoxPlot;
}(BoxPlot));

var BoxPlotChart = (function (CandlestickChart$$1) {
    function BoxPlotChart () {
        CandlestickChart$$1.apply(this, arguments);
    }

    if ( CandlestickChart$$1 ) BoxPlotChart.__proto__ = CandlestickChart$$1;
    BoxPlotChart.prototype = Object.create( CandlestickChart$$1 && CandlestickChart$$1.prototype );
    BoxPlotChart.prototype.constructor = BoxPlotChart;

    BoxPlotChart.prototype.addValue = function addValue (data, fields) {
        var categoryIx = fields.categoryIx;
        var category = fields.category;
        var series = fields.series;
        var seriesIx = fields.seriesIx;
        var ref = this;
        var children = ref.children;
        var options = ref.options;
        var value = data.valueFields;
        var valueParts = this.splitValue(value);
        var hasValue = areNumbers(valueParts);
        var dataItem = series.data[categoryIx];
        var categoryPoints = this.categoryPoints[categoryIx];
        var point;

        if (!categoryPoints) {
            this.categoryPoints[categoryIx] = categoryPoints = [];
        }

        if (hasValue) {
            point = this.createPoint(data, fields);
        }

        var cluster = children[categoryIx];
        if (!cluster) {
            cluster = new ClusterLayout({
                vertical: options.invertAxes,
                gap: options.gap,
                spacing: options.spacing,
                rtl: !options.invertAxes && (this.chartService || {}).rtl
            });
            this.append(cluster);
        }

        if (point) {
            this.updateRange(value, fields);

            cluster.append(point);

            point.categoryIx = categoryIx;
            point.category = category;
            point.series = series;
            point.seriesIx = seriesIx;
            point.owner = this;
            point.dataItem = dataItem;
        }

        this.points.push(point);
        categoryPoints.push(point);
    };

    BoxPlotChart.prototype.pointType = function pointType () {
        if (this.options.invertAxes) {
            return VerticalBoxPlot;
        }

        return BoxPlot;
    };

    BoxPlotChart.prototype.splitValue = function splitValue (value) {
        return [
            value.lower, value.q1, value.median,
            value.q3, value.upper
        ];
    };

    BoxPlotChart.prototype.updateRange = function updateRange (value, fields) {
        var axisName = fields.series.axis;
        var axisRange = this.valueAxisRanges[axisName];
        var parts = this.splitValue(value).concat(this.filterOutliers(value.outliers));

        if (defined(value.mean)) {
            parts = parts.concat(value.mean);
        }

        axisRange = this.valueAxisRanges[axisName] =
            axisRange || { min: MAX_VALUE, max: MIN_VALUE };

        axisRange = this.valueAxisRanges[axisName] = {
            min: Math.min.apply(Math, parts.concat([ axisRange.min ])),
            max: Math.max.apply(Math, parts.concat([ axisRange.max ]))
        };
    };

    BoxPlotChart.prototype.formatPointValue = function formatPointValue (point, format) {
        var value = point.value;

        return this.chartService.format.auto(format,
            value.lower, value.q1, value.median,
            value.q3, value.upper, value.mean, point.category
        );
    };

    BoxPlotChart.prototype.filterOutliers = function filterOutliers (items) {
        var length = (items || []).length;
        var result = [];

        for (var i = 0; i < length; i++) {
            var item = items[i];
            if (defined(item) && item !== null) {
                result.push(item);
            }
        }

        return result;
    };

    BoxPlotChart.prototype.supportsPointInactiveOpacity = function supportsPointInactiveOpacity () {
        return false;
    };

    return BoxPlotChart;
}(CandlestickChart));

var ScatterErrorBar = (function (ErrorBarBase$$1) {
    function ScatterErrorBar () {
        ErrorBarBase$$1.apply(this, arguments);
    }

    if ( ErrorBarBase$$1 ) ScatterErrorBar.__proto__ = ErrorBarBase$$1;
    ScatterErrorBar.prototype = Object.create( ErrorBarBase$$1 && ErrorBarBase$$1.prototype );
    ScatterErrorBar.prototype.constructor = ScatterErrorBar;

    ScatterErrorBar.prototype.getAxis = function getAxis () {
        var axes = this.chart.seriesAxes(this.series);
        var axis = this.isVertical ? axes.y : axes.x;

        return axis;
    };

    return ScatterErrorBar;
}(ErrorBarBase));

function hasValue(value) {
    return defined(value) && value !== null;
}

var ScatterChart = (function (ChartElement$$1) {
    function ScatterChart(plotArea, options) {

        ChartElement$$1.call(this, options);

        this.plotArea = plotArea;
        this.chartService = plotArea.chartService;
        this._initFields();

        this.render();
    }

    if ( ChartElement$$1 ) ScatterChart.__proto__ = ChartElement$$1;
    ScatterChart.prototype = Object.create( ChartElement$$1 && ChartElement$$1.prototype );
    ScatterChart.prototype.constructor = ScatterChart;

    ScatterChart.prototype._initFields = function _initFields () {
        // X and Y axis ranges grouped by name, e.g.:
        // primary: { min: 0, max: 1 }
        this.xAxisRanges = {};
        this.yAxisRanges = {};

        this.points = [];
        this.seriesPoints = [];
        this.seriesOptions = [];
        this._evalSeries = [];
    };

    ScatterChart.prototype.render = function render () {
        this.traverseDataPoints(this.addValue.bind(this));
    };

    ScatterChart.prototype.addErrorBar = function addErrorBar (point, field, fields) {
        var value = point.value[field];
        var valueErrorField = field + "Value";
        var lowField = field + "ErrorLow";
        var highField = field + "ErrorHigh";
        var seriesIx = fields.seriesIx;
        var series = fields.series;
        var errorBars = point.options.errorBars;
        var lowValue = fields[lowField];
        var highValue = fields[highField];

        if (isNumber(value)) {
            var errorRange;
            if (isNumber(lowValue) && isNumber(highValue)) {
                errorRange = { low: lowValue, high: highValue };
            }

            if (errorBars && defined(errorBars[valueErrorField])) {
                this.seriesErrorRanges = this.seriesErrorRanges || { x: [], y: [] };
                this.seriesErrorRanges[field][seriesIx] = this.seriesErrorRanges[field][seriesIx] ||
                    new ErrorRangeCalculator(errorBars[valueErrorField], series, field);

                errorRange = this.seriesErrorRanges[field][seriesIx].getErrorRange(value, errorBars[valueErrorField]);
            }

            if (errorRange) {
                this.addPointErrorBar(errorRange, point, field);
            }
        }
    };

    ScatterChart.prototype.addPointErrorBar = function addPointErrorBar (errorRange, point, field) {
        var low = errorRange.low;
        var high = errorRange.high;
        var series = point.series;
        var options = point.options.errorBars;
        var isVertical = field === Y;
        var item = {};

        point[field + "Low"] = low;
        point[field + "High"] = high;

        point.errorBars = point.errorBars || [];
        var errorBar = new ScatterErrorBar(low, high, isVertical, this, series, options);
        point.errorBars.push(errorBar);
        point.append(errorBar);

        item[field] = low;
        this.updateRange(item, series);
        item[field] = high;
        this.updateRange(item, series);
    };

    ScatterChart.prototype.addValue = function addValue (value, fields) {
        var x = value.x;
        var y = value.y;
        var seriesIx = fields.seriesIx;
        var series = this.options.series[seriesIx];
        var missingValues = this.seriesMissingValues(series);
        var seriesPoints = this.seriesPoints[seriesIx];

        var pointValue = value;
        if (!(hasValue(x) && hasValue(y))) {
            pointValue = this.createMissingValue(pointValue, missingValues);
        }

        var point;
        if (pointValue) {
            point = this.createPoint(pointValue, fields);
            if (point) {
                Object.assign(point, fields);
                this.addErrorBar(point, X, fields);
                this.addErrorBar(point, Y, fields);
            }
            this.updateRange(pointValue, fields.series);
        }

        this.points.push(point);
        seriesPoints.push(point);
    };

    ScatterChart.prototype.seriesMissingValues = function seriesMissingValues (series) {
        return series.missingValues;
    };

    ScatterChart.prototype.createMissingValue = function createMissingValue () {};

    ScatterChart.prototype.updateRange = function updateRange (value, series) {
        var intlService = this.chartService.intl;
        var xAxisName = series.xAxis;
        var yAxisName = series.yAxis;
        var x = value.x;
        var y = value.y;
        var xAxisRange = this.xAxisRanges[xAxisName];
        var yAxisRange = this.yAxisRanges[yAxisName];

        if (hasValue(x)) {
            xAxisRange = this.xAxisRanges[xAxisName] =
                xAxisRange || { min: MAX_VALUE, max: MIN_VALUE };

            if (isString(x)) {
                x = parseDate(intlService, x);
            }

            xAxisRange.min = Math.min(xAxisRange.min, x);
            xAxisRange.max = Math.max(xAxisRange.max, x);
        }

        if (hasValue(y)) {
            yAxisRange = this.yAxisRanges[yAxisName] =
                yAxisRange || { min: MAX_VALUE, max: MIN_VALUE };

            if (isString(y)) {
                y = parseDate(intlService, y);
            }

            yAxisRange.min = Math.min(yAxisRange.min, y);
            yAxisRange.max = Math.max(yAxisRange.max, y);
        }
    };

    ScatterChart.prototype.evalPointOptions = function evalPointOptions (options, value, fields) {
        var series = fields.series;
        var seriesIx = fields.seriesIx;
        var state = { defaults: series._defaults, excluded: [ "data", "tooltip", "content", "template", "visual", "toggle", "_outOfRangeMinPoint", "_outOfRangeMaxPoint" ] };

        var doEval = this._evalSeries[seriesIx];
        if (!defined(doEval)) {
            this._evalSeries[seriesIx] = doEval = evalOptions(options, {}, state, true);
        }

        var pointOptions = options;
        if (doEval) {
            pointOptions = deepExtend({}, options);
            evalOptions(pointOptions, {
                value: value,
                series: series,
                dataItem: fields.dataItem
            }, state);
        }

        return pointOptions;
    };

    ScatterChart.prototype.pointType = function pointType () {
        return LinePoint;
    };

    ScatterChart.prototype.pointOptions = function pointOptions (series, seriesIx) {
        var options = this.seriesOptions[seriesIx];
        if (!options) {
            var defaults = this.pointType().prototype.defaults;
            this.seriesOptions[seriesIx] = options = deepExtend({}, defaults, {
                markers: {
                    opacity: series.opacity
                },
                tooltip: {
                    format: this.options.tooltip.format
                },
                labels: {
                    format: this.options.labels.format
                }
            }, series);
        }

        return options;
    };

    ScatterChart.prototype.createPoint = function createPoint (value, fields) {
        var series = fields.series;
        var pointOptions = this.pointOptions(series, fields.seriesIx);
        var color = fields.color || series.color;

        pointOptions = this.evalPointOptions(pointOptions, value, fields);

        if (isFunction(series.color)) {
            color = pointOptions.color;
        }

        var point = new LinePoint(value, pointOptions);
        point.color = color;

        this.append(point);

        return point;
    };

    ScatterChart.prototype.seriesAxes = function seriesAxes (series) {
        var xAxisName = series.xAxis;
        var yAxisName = series.yAxis;
        var plotArea = this.plotArea;
        var xAxis = xAxisName ? plotArea.namedXAxes[xAxisName] : plotArea.axisX;
        var yAxis = yAxisName ? plotArea.namedYAxes[yAxisName] : plotArea.axisY;

        if (!xAxis) {
            throw new Error("Unable to locate X axis with name " + xAxisName);
        }

        if (!yAxis) {
            throw new Error("Unable to locate Y axis with name " + yAxisName);
        }

        return {
            x: xAxis,
            y: yAxis
        };
    };

    ScatterChart.prototype.reflow = function reflow (targetBox) {
        var this$1 = this;

        var chartPoints = this.points;
        var limit = !this.options.clip;
        var pointIx = 0;


        this.traverseDataPoints(function (value, fields) {
            var point = chartPoints[pointIx++];
            var seriesAxes = this$1.seriesAxes(fields.series);
            var slotX = seriesAxes.x.getSlot(value.x, value.x, limit);
            var slotY = seriesAxes.y.getSlot(value.y, value.y, limit);

            if (point) {
                if (slotX && slotY) {
                    var pointSlot = this$1.pointSlot(slotX, slotY);
                    point.reflow(pointSlot);
                } else {
                    point.visible = false;
                }
            }
        });

        this.box = targetBox;
    };

    ScatterChart.prototype.pointSlot = function pointSlot (slotX, slotY) {
        return new Box(slotX.x1, slotY.y1, slotX.x2, slotY.y2);
    };

    ScatterChart.prototype.traverseDataPoints = function traverseDataPoints (callback) {
        var this$1 = this;

        var ref = this;
        var series = ref.options.series;
        var seriesPoints = ref.seriesPoints;

        for (var seriesIx = 0; seriesIx < series.length; seriesIx++) {
            var currentSeries = series[seriesIx];
            var currentSeriesPoints = seriesPoints[seriesIx];
            if (!currentSeriesPoints) {
                seriesPoints[seriesIx] = [];
            }

            for (var pointIx = 0; pointIx < currentSeries.data.length; pointIx++) {
                var ref$1 = this$1._bindPoint(currentSeries, seriesIx, pointIx);
                var value = ref$1.valueFields;
                var fields = ref$1.fields;

                callback(value, deepExtend({
                    pointIx: pointIx,
                    series: currentSeries,
                    seriesIx: seriesIx,
                    dataItem: currentSeries.data[pointIx],
                    owner: this$1
                }, fields));
            }
        }
    };

    ScatterChart.prototype.formatPointValue = function formatPointValue (point, format) {
        var value = point.value;
        return this.chartService.format.auto(format, value.x, value.y);
    };

    ScatterChart.prototype.animationPoints = function animationPoints () {
        var points = this.points;
        var result = [];
        for (var idx = 0; idx < points.length; idx++) {
            result.push((points[idx] || {}).marker);
        }
        return result;
    };

    return ScatterChart;
}(ChartElement));
setDefaultOptions(ScatterChart, {
    series: [],
    tooltip: {
        format: "{0}, {1}"
    },
    labels: {
        format: "{0}, {1}"
    },
    clip: true
});
deepExtend(ScatterChart.prototype, ClipAnimationMixin, {
    _bindPoint: CategoricalChart.prototype._bindPoint
});

var Bubble = (function (LinePoint$$1) {
    function Bubble(value, options) {
        LinePoint$$1.call(this, value, options);

        this.category = value.category;
    }

    if ( LinePoint$$1 ) Bubble.__proto__ = LinePoint$$1;
    Bubble.prototype = Object.create( LinePoint$$1 && LinePoint$$1.prototype );
    Bubble.prototype.constructor = Bubble;

    Bubble.prototype.createHighlight = function createHighlight () {
        var highlight = this.options.highlight;
        var border = highlight.border;
        var markers = this.options.markers;
        var center = this.box.center();
        var radius = (markers.size + markers.border.width + border.width) / 2;
        var highlightGroup = new _progress_kendoDrawing.drawing.Group();
        var shadow = new _progress_kendoDrawing.drawing.Circle(new _progress_kendoDrawing.geometry.Circle([ center.x, center.y + radius / 5 + border.width / 2 ], radius + border.width / 2), {
            stroke: {
                color: 'none'
            },
            fill: this.createGradient({
                gradient: 'bubbleShadow',
                color: markers.background,
                stops: [ {
                    offset: 0,
                    color: markers.background,
                    opacity: 0.3
                }, {
                    offset: 1,
                    color: markers.background,
                    opacity: 0
                } ]
            })
        });
        var overlay = new _progress_kendoDrawing.drawing.Circle(new _progress_kendoDrawing.geometry.Circle([ center.x, center.y ], radius), {
            stroke: {
                color: border.color ||
                    new _progress_kendoDrawing.Color(markers.background).brightness(BORDER_BRIGHTNESS).toHex(),
                width: border.width,
                opacity: border.opacity
            },
            fill: {
                color: markers.background,
                opacity: highlight.opacity
            }
        });

        highlightGroup.append(shadow, overlay);

        return highlightGroup;
    };

    return Bubble;
}(LinePoint));

Bubble.prototype.defaults = deepExtend({}, Bubble.prototype.defaults, {
    labels: {
        position: CENTER
    },
    highlight: {
        opacity: 1,
        border: {
            color: "#fff",
            width: 2,
            opacity: 1
        }
    }
});

Bubble.prototype.defaults.highlight.zIndex = undefined;

var BubbleChart = (function (ScatterChart$$1) {
    function BubbleChart () {
        ScatterChart$$1.apply(this, arguments);
    }

    if ( ScatterChart$$1 ) BubbleChart.__proto__ = ScatterChart$$1;
    BubbleChart.prototype = Object.create( ScatterChart$$1 && ScatterChart$$1.prototype );
    BubbleChart.prototype.constructor = BubbleChart;

    BubbleChart.prototype._initFields = function _initFields () {
        this._maxSize = MIN_VALUE;
        ScatterChart$$1.prototype._initFields.call(this);
    };

    BubbleChart.prototype.addValue = function addValue (value, fields) {
        if (value.size !== null && (value.size > 0 || (value.size < 0 && fields.series.negativeValues.visible))) {
            this._maxSize = Math.max(this._maxSize, Math.abs(value.size));
            ScatterChart$$1.prototype.addValue.call(this, value, fields);
        } else {
            this.points.push(null);
            this.seriesPoints[fields.seriesIx].push(null);
        }
    };

    BubbleChart.prototype.reflow = function reflow (box) {
        this.updateBubblesSize(box);
        ScatterChart$$1.prototype.reflow.call(this, box);
    };

    BubbleChart.prototype.pointType = function pointType () {
        return Bubble;
    };

    BubbleChart.prototype.createPoint = function createPoint (value, fields) {
        var series = fields.series;
        var pointsCount = series.data.length;
        var delay = fields.pointIx * (INITIAL_ANIMATION_DURATION / pointsCount);
        var animationOptions = {
            delay: delay,
            duration: INITIAL_ANIMATION_DURATION - delay,
            type: BUBBLE
        };

        var color = fields.color || series.color;
        if (value.size < 0 && series.negativeValues.visible) {
            color = valueOrDefault(
                series.negativeValues.color, color
            );
        }

        var pointOptions = deepExtend({
            labels: {
                animation: {
                    delay: delay,
                    duration: INITIAL_ANIMATION_DURATION - delay
                }
            }
        }, this.pointOptions(series, fields.seriesIx), {
            markers: {
                type: CIRCLE,
                border: series.border,
                opacity: series.opacity,
                animation: animationOptions
            }
        });

        pointOptions = this.evalPointOptions(pointOptions, value, fields);
        if (isFunction(series.color)) {
            color = pointOptions.color;
        }

        pointOptions.markers.background = color;

        var point = new Bubble(value, pointOptions);
        point.color = color;

        this.append(point);

        return point;
    };

    BubbleChart.prototype.updateBubblesSize = function updateBubblesSize (box) {
        var this$1 = this;

        var ref = this;
        var series = ref.options.series;
        var boxSize = Math.min(box.width(), box.height());

        for (var seriesIx = 0; seriesIx < series.length; seriesIx++) {
            var currentSeries = series[seriesIx];
            var seriesPoints = this$1.seriesPoints[seriesIx];
            var minSize = currentSeries.minSize || Math.max(boxSize * 0.02, 10);
            var maxSize = currentSeries.maxSize || boxSize * 0.2;
            var minR = minSize / 2;
            var maxR = maxSize / 2;
            var minArea = Math.PI * minR * minR;
            var maxArea = Math.PI * maxR * maxR;
            var areaRange = maxArea - minArea;
            var areaRatio = areaRange / this$1._maxSize;

            for (var pointIx = 0; pointIx < seriesPoints.length; pointIx++) {
                var point = seriesPoints[pointIx];
                if (point) {
                    var area = Math.abs(point.value.size) * areaRatio;
                    var radius = Math.sqrt((minArea + area) / Math.PI);
                    var baseZIndex = valueOrDefault(point.options.zIndex, 0);
                    var zIndex = baseZIndex + (1 - radius / maxR);

                    deepExtend(point.options, {
                        zIndex: zIndex,
                        markers: {
                            size: radius * 2,
                            zIndex: zIndex
                        },
                        labels: {
                            zIndex: zIndex + 1
                        }
                    });
                }
            }
        }
    };

    BubbleChart.prototype.formatPointValue = function formatPointValue (point, format) {
        var value = point.value;
        return this.chartService.format.auto(format, value.x, value.y, value.size, point.category);
    };

    BubbleChart.prototype.createAnimation = function createAnimation () {};
    BubbleChart.prototype.createVisual = function createVisual () {};

    return BubbleChart;
}(ScatterChart));

setDefaultOptions(BubbleChart, {
    tooltip: {
        format: "{3}"
    },
    labels: {
        format: "{3}"
    }
});

var Target = (function (ShapeElement$$1) {
	function Target () {
		ShapeElement$$1.apply(this, arguments);
	}if ( ShapeElement$$1 ) Target.__proto__ = ShapeElement$$1;
	Target.prototype = Object.create( ShapeElement$$1 && ShapeElement$$1.prototype );
	Target.prototype.constructor = Target;

	

	return Target;
}(ShapeElement));

deepExtend(Target.prototype, PointEventsMixin);

var Bullet = (function (ChartElement$$1) {
    function Bullet(value, options) {
        ChartElement$$1.call(this, options);

        this.aboveAxis = this.options.aboveAxis;
        this.color = options.color || WHITE;
        this.value = value;
    }

    if ( ChartElement$$1 ) Bullet.__proto__ = ChartElement$$1;
    Bullet.prototype = Object.create( ChartElement$$1 && ChartElement$$1.prototype );
    Bullet.prototype.constructor = Bullet;

    Bullet.prototype.render = function render () {
        var options = this.options;

        if (!this._rendered) {
            this._rendered = true;

            if (defined(this.value.target)) {
                this.target = new Target({
                    type: options.target.shape,
                    background: options.target.color || this.color,
                    opacity: options.opacity,
                    zIndex: options.zIndex,
                    border: options.target.border,
                    vAlign: TOP,
                    align: RIGHT
                });

                this.target.value = this.value;
                this.target.dataItem = this.dataItem;
                this.target.series = this.series;

                this.append(this.target);
            }

            this.createNote();
        }
    };

    Bullet.prototype.reflow = function reflow (box) {
        this.render();

        var ref = this;
        var options = ref.options;
        var target = ref.target;
        var chart = ref.owner;
        var invertAxes = options.invertAxes;
        var valueAxis = chart.seriesValueAxis(this.options);
        var categorySlot = chart.categorySlot(chart.categoryAxis, options.categoryIx, valueAxis);
        var targetValueSlot = valueAxis.getSlot(this.value.target);
        var targetSlotX = invertAxes ? targetValueSlot : categorySlot;
        var targetSlotY = invertAxes ? categorySlot : targetValueSlot;

        if (target) {
            var targetSlot = new Box(
                targetSlotX.x1, targetSlotY.y1,
                targetSlotX.x2, targetSlotY.y2
            );
            target.options.height = invertAxes ? targetSlot.height() : options.target.line.width;
            target.options.width = invertAxes ? options.target.line.width : targetSlot.width();
            target.reflow(targetSlot);
        }

        if (this.note) {
            this.note.reflow(box);
        }

        this.box = box;
    };

    Bullet.prototype.createVisual = function createVisual () {
        ChartElement$$1.prototype.createVisual.call(this);

        var options = this.options;
        var body = _progress_kendoDrawing.drawing.Path.fromRect(this.box.toRect(), {
            fill: {
                color: this.color,
                opacity: options.opacity
            },
            stroke: null
        });

        if (options.border.width > 0) {
            body.options.set("stroke", {
                color: options.border.color || this.color,
                width: options.border.width,
                dashType: options.border.dashType,
                opacity: valueOrDefault(options.border.opacity, options.opacity)
            });
        }

        this.bodyVisual = body;

        alignPathToPixel(body);
        this.visual.append(body);
    };

    Bullet.prototype.createAnimation = function createAnimation () {
        if (this.bodyVisual) {
            this.animation = _progress_kendoDrawing.drawing.Animation.create(
                this.bodyVisual, this.options.animation
            );
        }
    };

    Bullet.prototype.createHighlight = function createHighlight (style) {
        return _progress_kendoDrawing.drawing.Path.fromRect(this.box.toRect(), style);
    };

    Bullet.prototype.highlightVisual = function highlightVisual () {
        return this.bodyVisual;
    };

    Bullet.prototype.highlightVisualArgs = function highlightVisualArgs () {
        return {
            rect: this.box.toRect(),
            visual: this.bodyVisual,
            options: this.options
        };
    };

    Bullet.prototype.formatValue = function formatValue (format) {
        return this.owner.formatPointValue(this, format);
    };

    return Bullet;
}(ChartElement));

Bullet.prototype.tooltipAnchor = Bar.prototype.tooltipAnchor;

setDefaultOptions(Bullet, {
    border: {
        width: 1
    },
    vertical: false,
    opacity: 1,
    target: {
        shape: "",
        border: {
            width: 0,
            color: "green"
        },
        line: {
            width: 2
        }
    },
    tooltip: {
        format: "Current: {0}<br />Target: {1}"
    }
});

deepExtend(Bullet.prototype, PointEventsMixin);
deepExtend(Bullet.prototype, NoteMixin);

var BulletChart = (function (CategoricalChart$$1) {
    function BulletChart(plotArea, options) {

        wrapData(options);

        CategoricalChart$$1.call(this, plotArea, options);
    }

    if ( CategoricalChart$$1 ) BulletChart.__proto__ = CategoricalChart$$1;
    BulletChart.prototype = Object.create( CategoricalChart$$1 && CategoricalChart$$1.prototype );
    BulletChart.prototype.constructor = BulletChart;

    BulletChart.prototype.reflowCategories = function reflowCategories (categorySlots) {
        var children = this.children;
        var childrenLength = children.length;

        for (var i = 0; i < childrenLength; i++) {
            children[i].reflow(categorySlots[i]);
        }
    };

    BulletChart.prototype.plotRange = function plotRange (point) {
        var series = point.series;
        var valueAxis = this.seriesValueAxis(series);
        var axisCrossingValue = this.categoryAxisCrossingValue(valueAxis);

        return [ axisCrossingValue, point.value.current || axisCrossingValue ];
    };

    BulletChart.prototype.createPoint = function createPoint (data, fields) {
        var categoryIx = fields.categoryIx;
        var category = fields.category;
        var series = fields.series;
        var seriesIx = fields.seriesIx;
        var ref = this;
        var options = ref.options;
        var children = ref.children;
        var value = data.valueFields;

        var bulletOptions = deepExtend({
            vertical: !options.invertAxes,
            overlay: series.overlay,
            categoryIx: categoryIx,
            invertAxes: options.invertAxes
        }, series);

        var color = data.fields.color || series.color;
        bulletOptions = this.evalPointOptions(
            bulletOptions, value, category, categoryIx, series, seriesIx
        );

        if (isFunction(series.color)) {
            color = bulletOptions.color;
        }

        var bullet = new Bullet(value, bulletOptions);
        bullet.color = color;

        var cluster = children[categoryIx];
        if (!cluster) {
            cluster = new ClusterLayout({
                vertical: options.invertAxes,
                gap: options.gap,
                spacing: options.spacing,
                rtl: !options.invertAxes && (this.chartService || {}).rtl
            });
            this.append(cluster);
        }

        cluster.append(bullet);

        return bullet;
    };

    BulletChart.prototype.updateRange = function updateRange (value, fields) {
        var current = value.current;
        var target = value.target;
        var axisName = fields.series.axis;
        var axisRange = this.valueAxisRanges[axisName];

        if (defined(current) && !isNaN(current) && defined(target && !isNaN(target))) {
            axisRange = this.valueAxisRanges[axisName] =
                axisRange || { min: MAX_VALUE, max: MIN_VALUE };

            axisRange.min = Math.min(axisRange.min, current, target);
            axisRange.max = Math.max(axisRange.max, current, target);
        }
    };

    BulletChart.prototype.formatPointValue = function formatPointValue (point, format) {
        return this.chartService.format.auto(format, point.value.current, point.value.target);
    };

    BulletChart.prototype.pointValue = function pointValue (data) {
        return data.valueFields.current;
    };

    BulletChart.prototype.aboveAxis = function aboveAxis (point) {
        var value = point.value.current;

        return value > 0;
    };

    BulletChart.prototype.createAnimation = function createAnimation () {
        var this$1 = this;

        var points = this.points;

        this._setAnimationOptions();

        for (var idx = 0; idx < points.length; idx++) {
            var point = points[idx];
            point.options.animation = this$1.options.animation;
            point.createAnimation();
        }
    };

    return BulletChart;
}(CategoricalChart));

BulletChart.prototype._setAnimationOptions = BarChart.prototype._setAnimationOptions;

setDefaultOptions(BulletChart, {
    animation: {
        type: BAR
    }
});

function wrapData(options) {
    var series = options.series;

    for (var i = 0; i < series.length; i++) {
        var seriesItem = series[i];
        var data = seriesItem.data;
        if (data && !isArray(data[0]) && !isObject(data[0])) {
            seriesItem.data = [ data ];
        }
    }
}

var BaseTooltip = (function (Class$$1) {
    function BaseTooltip(chartService, options) {
        Class$$1.call(this);

        this.chartService = chartService;
        this.options = deepExtend({}, this.options, options);
    }

    if ( Class$$1 ) BaseTooltip.__proto__ = Class$$1;
    BaseTooltip.prototype = Object.create( Class$$1 && Class$$1.prototype );
    BaseTooltip.prototype.constructor = BaseTooltip;

    BaseTooltip.prototype.getStyle = function getStyle (options, point) {
        var background = options.background;
        var border = options.border.color;

        if (point) {
            var pointColor = point.color || point.options.color;
            background = valueOrDefault(background, pointColor);
            border = valueOrDefault(border, pointColor);
        }

        var padding = getSpacing(options.padding || {}, "auto");

        return {
            backgroundColor: background,
            borderColor: border,
            font: options.font,
            color: options.color,
            opacity: options.opacity,
            borderWidth: styleValue(options.border.width),
            paddingTop: styleValue(padding.top),
            paddingBottom: styleValue(padding.bottom),
            paddingLeft: styleValue(padding.left),
            paddingRight: styleValue(padding.right)
        };
    };

    BaseTooltip.prototype.show = function show (options, tooltipOptions, point) {
        options.format = tooltipOptions.format;

        var style = this.getStyle(tooltipOptions, point);
        options.style = style;

        if (!defined(tooltipOptions.color) && new _progress_kendoDrawing.Color(style.backgroundColor).percBrightness() > 180) {
            options.className = "k-chart-tooltip-inverse";
        }

        this.chartService.notify(SHOW_TOOLTIP, options);

        this.visible = true;
    };

    BaseTooltip.prototype.hide = function hide () {
        if (this.chartService) {
            this.chartService.notify(HIDE_TOOLTIP);
        }

        this.visible = false;
    };

    BaseTooltip.prototype.destroy = function destroy () {
        delete this.chartService;
    };

    return BaseTooltip;
}(_progress_kendoDrawing.Class));

setDefaultOptions(BaseTooltip, {
    border: {
        width: 1
    },
    opacity: 1
});

var CrosshairTooltip = (function (BaseTooltip$$1) {
    function CrosshairTooltip(chartService, crosshair, options) {
        BaseTooltip$$1.call(this, chartService, options);

        this.crosshair = crosshair;
        this.formatService = chartService.format;
        this.initAxisName();
    }

    if ( BaseTooltip$$1 ) CrosshairTooltip.__proto__ = BaseTooltip$$1;
    CrosshairTooltip.prototype = Object.create( BaseTooltip$$1 && BaseTooltip$$1.prototype );
    CrosshairTooltip.prototype.constructor = CrosshairTooltip;

    CrosshairTooltip.prototype.initAxisName = function initAxisName () {
        var axis = this.crosshair.axis;
        var plotArea = axis.plotArea;
        var name;
        if (plotArea.categoryAxis) {
            name = axis.getCategory ? "categoryAxis" : "valueAxis";
        } else {
            name = axis.options.vertical ? "yAxis" : "xAxis";
        }
        this.axisName = name;
    };

    CrosshairTooltip.prototype.showAt = function showAt (point) {
        var ref = this;
        var axis = ref.crosshair.axis;
        var options = ref.options;
        var value = axis[options.stickyMode ? "getCategory" : "getValue"](point);
        var formattedValue = value;

        if (options.format) {
            formattedValue = this.formatService.auto(options.format, value);
        } else if (axis.options.type === DATE) {
            formattedValue = this.formatService.auto(axis.options.labels.dateFormats[axis.options.baseUnit], value);
        }

        this.show({
            point: point,
            anchor: this.getAnchor(),
            crosshair: this.crosshair,
            value: formattedValue,
            axisName: this.axisName,
            axisIndex: this.crosshair.axis.axisIndex
        }, this.options);
    };

    CrosshairTooltip.prototype.hide = function hide () {
        this.chartService.notify(HIDE_TOOLTIP, {
            crosshair: this.crosshair,
            axisName: this.axisName,
            axisIndex: this.crosshair.axis.axisIndex
        });
    };

    CrosshairTooltip.prototype.getAnchor = function getAnchor () {
        var ref = this;
        var crosshair = ref.crosshair;
        var ref_options = ref.options;
        var position = ref_options.position;
        var padding = ref_options.padding;
        var vertical = !crosshair.axis.options.vertical;
        var lineBox = crosshair.line.bbox();
        var horizontalAlign, verticalAlign, point;

        if (vertical) {
            horizontalAlign = CENTER;
            if (position === BOTTOM) {
                verticalAlign = TOP;
                point = lineBox.bottomLeft().translate(0, padding);
            } else {
                verticalAlign = BOTTOM;
                point = lineBox.topLeft().translate(0, -padding);
            }
        } else {
            verticalAlign = CENTER;
            if (position === LEFT) {
                horizontalAlign = RIGHT;
                point = lineBox.topLeft().translate(-padding, 0);
            } else {
                horizontalAlign = LEFT;
                point = lineBox.topRight().translate(padding, 0);
            }
        }

        return {
            point: point,
            align: {
                horizontal: horizontalAlign,
                vertical: verticalAlign
            }
        };
    };

    return CrosshairTooltip;
}(BaseTooltip));

setDefaultOptions(CrosshairTooltip, {
    padding: 10
});

var Crosshair = (function (ChartElement$$1) {
    function Crosshair(chartService, axis, options) {
        ChartElement$$1.call(this, options);

        this.axis = axis;
        this.stickyMode = axis instanceof CategoryAxis;

        var tooltipOptions = this.options.tooltip;

        if (tooltipOptions.visible) {
            this.tooltip = new CrosshairTooltip(chartService, this,
                deepExtend({}, tooltipOptions, { stickyMode: this.stickyMode })
            );
        }
    }

    if ( ChartElement$$1 ) Crosshair.__proto__ = ChartElement$$1;
    Crosshair.prototype = Object.create( ChartElement$$1 && ChartElement$$1.prototype );
    Crosshair.prototype.constructor = Crosshair;

    Crosshair.prototype.showAt = function showAt (point) {
        this.point = point;
        this.moveLine();
        this.line.visible(true);

        if (this.tooltip) {
            this.tooltip.showAt(point);
        }
    };

    Crosshair.prototype.hide = function hide () {
        this.line.visible(false);

        if (this.tooltip) {
            this.tooltip.hide();
        }
    };

    Crosshair.prototype.moveLine = function moveLine () {
        var ref = this;
        var axis = ref.axis;
        var point = ref.point;
        var vertical = axis.options.vertical;
        var box = this.getBox();
        var dim = vertical ? Y : X;
        var lineStart = new _progress_kendoDrawing.geometry.Point(box.x1, box.y1);
        var lineEnd;

        if (vertical) {
            lineEnd = new _progress_kendoDrawing.geometry.Point(box.x2, box.y1);
        } else {
            lineEnd = new _progress_kendoDrawing.geometry.Point(box.x1, box.y2);
        }

        if (point) {
            if (this.stickyMode) {
                var slot = axis.getSlot(axis.pointCategoryIndex(point));
                lineStart[dim] = lineEnd[dim] = slot.center()[dim];
            } else {
                lineStart[dim] = lineEnd[dim] = point[dim];
            }
        }

        this.box = box;

        this.line.moveTo(lineStart).lineTo(lineEnd);
    };

    Crosshair.prototype.getBox = function getBox () {
        var axis = this.axis;
        var axes = axis.pane.axes;
        var length = axes.length;
        var vertical = axis.options.vertical;
        var box = axis.lineBox().clone();
        var dim = vertical ? X : Y;
        var axisLineBox;

        for (var i = 0; i < length; i++) {
            var currentAxis = axes[i];
            if (currentAxis.options.vertical !== vertical) {
                if (!axisLineBox) {
                    axisLineBox = currentAxis.lineBox().clone();
                } else {
                    axisLineBox.wrap(currentAxis.lineBox());
                }
            }
        }

        box[dim + 1] = axisLineBox[dim + 1];
        box[dim + 2] = axisLineBox[dim + 2];

        return box;
    };

    Crosshair.prototype.createVisual = function createVisual () {
        ChartElement$$1.prototype.createVisual.call(this);

        var options = this.options;
        this.line = new _progress_kendoDrawing.drawing.Path({
            stroke: {
                color: options.color,
                width: options.width,
                opacity: options.opacity,
                dashType: options.dashType
            },
            visible: false
        });

        this.moveLine();
        this.visual.append(this.line);
    };

    Crosshair.prototype.destroy = function destroy () {
        if (this.tooltip) {
            this.tooltip.destroy();
        }

        ChartElement$$1.prototype.destroy.call(this);
    };

    return Crosshair;
}(ChartElement));

setDefaultOptions(Crosshair, {
    color: BLACK,
    width: 2,
    zIndex: -1,
    tooltip: {
        visible: false
    }
});

var ChartContainer = (function (ChartElement$$1) {
    function ChartContainer(options, pane) {
        ChartElement$$1.call(this, options);
        this.pane = pane;
    }

    if ( ChartElement$$1 ) ChartContainer.__proto__ = ChartElement$$1;
    ChartContainer.prototype = Object.create( ChartElement$$1 && ChartElement$$1.prototype );
    ChartContainer.prototype.constructor = ChartContainer;

    ChartContainer.prototype.shouldClip = function shouldClip () {
        var children = this.children;
        var length = children.length;

        for (var i = 0; i < length; i++) {
            if (children[i].options.clip === true) {
                return true;
            }
        }
        return false;
    };

    ChartContainer.prototype._clipBox = function _clipBox () {
        return this.pane.chartsBox();
    };

    ChartContainer.prototype.createVisual = function createVisual () {
        this.visual = new _progress_kendoDrawing.drawing.Group({
            zIndex: 0
        });

        if (this.shouldClip()) {
            var clipBox = this.clipBox = this._clipBox();
            var clipRect = clipBox.toRect();
            var clipPath = _progress_kendoDrawing.drawing.Path.fromRect(clipRect);
            alignPathToPixel(clipPath);

            this.visual.clip(clipPath);
            this.unclipLabels();
        }
    };

    ChartContainer.prototype.stackRoot = function stackRoot () {
        return this;
    };

    ChartContainer.prototype.unclipLabels = function unclipLabels () {
        var ref = this;
        var charts = ref.children;
        var clipBox = ref.clipBox;

        for (var i = 0; i < charts.length; i++) {
            var points = charts[i].points || {};
            var length = points.length;

            for (var j = 0; j < length; j++) {
                var point = points[j];
                if (point && point.visible !== false && point.overlapsBox && point.overlapsBox(clipBox)) {
                    if (point.unclipElements) {
                        point.unclipElements();
                    } else {
                        var label = point.label;
                        var note = point.note;

                        if (label && label.options.visible) {
                            if (label.alignToClipBox) {
                                label.alignToClipBox(clipBox);
                            }
                            label.options.noclip = true;
                        }

                        if (note && note.options.visible) {
                            note.options.noclip = true;
                        }
                    }
                }
            }
        }
    };

    ChartContainer.prototype.destroy = function destroy () {
        ChartElement$$1.prototype.destroy.call(this);

        delete this.parent;
    };

    return ChartContainer;
}(ChartElement));

ChartContainer.prototype.isStackRoot = true;

var Pane = (function (BoxElement$$1) {
    function Pane(options) {
        BoxElement$$1.call(this, options);

        this.id = paneID();

        this.createTitle();

        this.content = new ChartElement();

        this.chartContainer = new ChartContainer({}, this);
        this.append(this.content);

        this.axes = [];
        this.charts = [];
    }

    if ( BoxElement$$1 ) Pane.__proto__ = BoxElement$$1;
    Pane.prototype = Object.create( BoxElement$$1 && BoxElement$$1.prototype );
    Pane.prototype.constructor = Pane;

    Pane.prototype.createTitle = function createTitle () {
        var titleOptions = this.options.title;
        if (isObject(titleOptions)) {
            titleOptions = deepExtend({}, titleOptions, {
                align: titleOptions.position,
                position: TOP
            });
        }

        this.title = Title.buildTitle(titleOptions, this, Pane.prototype.options.title);
    };

    Pane.prototype.appendAxis = function appendAxis (axis) {
        this.content.append(axis);
        this.axes.push(axis);
        axis.pane = this;
    };

    Pane.prototype.appendAxisAt = function appendAxisAt (axis, pos) {
        this.content.append(axis);
        this.axes.splice(pos, 0, axis);
        axis.pane = this;
    };

    Pane.prototype.appendChart = function appendChart (chart) {
        if (this.chartContainer.parent !== this.content) {
            this.content.append(this.chartContainer);
        }

        this.charts.push(chart);
        this.chartContainer.append(chart);
        chart.pane = this;
    };

    Pane.prototype.empty = function empty () {
        var this$1 = this;

        var plotArea = this.parent;

        if (plotArea) {
            for (var i = 0; i < this.axes.length; i++) {
                plotArea.removeAxis(this$1.axes[i]);
            }

            for (var i$1 = 0; i$1 < this.charts.length; i$1++) {
                plotArea.removeChart(this$1.charts[i$1]);
            }
        }

        this.axes = [];
        this.charts = [];

        this.content.destroy();
        this.content.children = [];
        this.chartContainer.children = [];
    };

    Pane.prototype.reflow = function reflow (targetBox) {
        // Content (such as charts) is rendered, but excluded from reflows
        var content;
        if (last(this.children) === this.content) {
            content = this.children.pop();
        }

        BoxElement$$1.prototype.reflow.call(this, targetBox);

        if (content) {
            this.children.push(content);
        }

        if (this.title) {
            this.contentBox.y1 += this.title.box.height();
        }
    };

    Pane.prototype.visualStyle = function visualStyle () {
        var style = BoxElement$$1.prototype.visualStyle.call(this);
        style.zIndex = -10;

        return style;
    };

    Pane.prototype.renderComplete = function renderComplete () {
        if (this.options.visible) {
            this.createGridLines();
        }
    };

    Pane.prototype.stackRoot = function stackRoot () {
        return this;
    };

    Pane.prototype.clipRoot = function clipRoot () {
        return this;
    };

    Pane.prototype.createGridLines = function createGridLines () {
        var axes = this.axes;
        var allAxes = axes.concat(this.parent.axes);
        var vGridLines = [];
        var hGridLines = [];

        // TODO
        // Is full combination really necessary?
        for (var i = 0; i < axes.length; i++) {
            var axis = axes[i];
            var vertical = axis.options.vertical;
            var gridLines = vertical ? vGridLines : hGridLines;
            for (var j = 0; j < allAxes.length; j++) {
                if (gridLines.length === 0) {
                    var altAxis = allAxes[j];
                    if (vertical !== altAxis.options.vertical) {
                        append$1(gridLines, axis.createGridLines(altAxis));
                    }
                }
            }
        }
    };

    Pane.prototype.refresh = function refresh () {
        this.visual.clear();

        this.content.parent = null;
        this.content.createGradient = this.createGradient.bind(this);
        this.content.renderVisual();
        this.content.parent = this;

        if (this.title) {
            this.visual.append(this.title.visual);
        }

        this.visual.append(this.content.visual);

        this.renderComplete();
        this.notifyRender();
    };

    Pane.prototype.chartsBox = function chartsBox () {
        var axes = this.axes;
        var length = axes.length;
        var chartsBox = new Box();

        for (var idx = 0; idx < length; idx++) {
            var axis = axes[idx];
            var axisValueField = axis.options.vertical ? Y : X;
            var lineBox = axis.lineBox();
            chartsBox[axisValueField + 1] = lineBox[axisValueField + 1];
            chartsBox[axisValueField + 2] = lineBox[axisValueField + 2];
        }

        if (chartsBox.x2 === 0) {
            var allAxes = this.parent.axes;
            var length$1 = allAxes.length;

            for (var idx$1 = 0; idx$1 < length$1; idx$1++) {
                var axis$1 = allAxes[idx$1];
                if (!axis$1.options.vertical) {
                    var lineBox$1 = axis$1.lineBox();
                    chartsBox.x1 = lineBox$1.x1;
                    chartsBox.x2 = lineBox$1.x2;
                }
            }
        }
        return chartsBox;
    };

    Pane.prototype.clipBox = function clipBox () {
        return this.chartContainer.clipBox;
    };

    Pane.prototype.notifyRender = function notifyRender () {
        var service = this.getService();
        if (service) {
            service.notify(PANE_RENDER, {
                pane: new ChartPane(this),
                index: this.paneIndex,
                name: this.options.name
            });
        }
    };

    return Pane;
}(BoxElement));

var ID = 1;

function paneID() {
    return "pane" + ID++;
}

Pane.prototype.isStackRoot = true;

setDefaultOptions(Pane, {
    zIndex: -1,
    shrinkToFit: true,
    title: {
        align: LEFT
    },
    visible: true
});

function appendIfNotNull(array, element) {
    if (element !== null) {
        array.push(element);
    }
}

function segmentVisible(series, fields, index) {
    var visible = fields.visible;
    if (defined(visible)) {
        return visible;
    }

    var pointVisibility = series.pointVisibility;
    if (pointVisibility) {
        return pointVisibility[index];
    }
}

function bindSegments(series) {
    var data = series.data;
    var points = [];
    var sum = 0;
    var count = 0;

    for (var idx = 0; idx < data.length; idx++) {
        var pointData = SeriesBinder.current.bindPoint(series, idx);
        var value = pointData.valueFields.value;


        if (isString(value)) {
            value = parseFloat(value);
        }

        if (isNumber(value)) {
            pointData.visible = segmentVisible(series, pointData.fields, idx) !== false;

            pointData.value = Math.abs(value);
            points.push(pointData);

            if (pointData.visible) {
                sum += pointData.value;
            }

            if (value !== 0) {
                count++;
            }
        } else {
            points.push(null);
        }
    }

    return {
        total: sum,
        points: points,
        count: count
    };
}

function equalsIgnoreCase(a, b) {
    if (a && b) {
        return a.toLowerCase() === b.toLowerCase();
    }

    return a === b;
}

function filterSeriesByType(series, types) {
    var result = [];

    var seriesTypes = [].concat(types);
    for (var idx = 0; idx < series.length; idx++) {
        var currentSeries = series[idx];
        if (inArray(currentSeries.type, seriesTypes)) {
            result.push(currentSeries);
        }
    }

    return result;
}

function getDateField(field, row, intlService) {
    if (row === null) {
        return row;
    }

    var key = "_date_" + field;
    var value = row[key];

    if (!value) {
        value = parseDate(intlService, getter(field, true)(row));
        row[key] = value;
    }

    return value;
}

function isDateAxis(axisOptions, sampleCategory) {
    var type = axisOptions.type;
    var dateCategory = sampleCategory instanceof Date;

    return (!type && dateCategory) || equalsIgnoreCase(type, DATE);
}

function singleItemOrArray(array) {
    return array.length === 1 ? array[0] : array;
}

var AREA_REGEX = /area/i;

function seriesMissingValues$1(series) {
    if (series.missingValues) {
        return series.missingValues;
    }

    return AREA_REGEX.test(series.type) || series.stack ? ZERO : INTERPOLATE;
}

function hasValue$1(series, item) {
    var fields = SeriesBinder.current.bindPoint(series, null, item);
    var valueFields = fields.valueFields;

    for (var field in valueFields) {
        if (convertableToNumber(valueFields[field])) {
            return true;
        }
    }
}

function findNext(ref) {
    var start = ref.start;
    var dir = ref.dir;
    var min = ref.min;
    var max = ref.max;
    var getter$$1 = ref.getter;
    var hasItem = ref.hasItem;
    var series = ref.series;

    var pointHasValue, outPoint;
    var idx = start;
    do {
        idx += dir;
        //aggregating and binding the item takes too much time for large number of categories
        //will assume that if the aggregation does not create value for a missing item for one it will not create for others
        if (hasItem(idx)) {
            outPoint = getter$$1(idx);
            pointHasValue = hasValue$1(series, outPoint.item);
        }
    } while (min <= idx && idx <= max && !pointHasValue);

    if (pointHasValue) {
        return outPoint;
    }
}

function createOutOfRangePoints(series, range, count, getter$$1, hasItem) {
    var min = range.min;
    var max = range.max;
    var hasMinPoint = min > 0 && min < count;
    var hasMaxPoint = max + 1 < count;

    if (hasMinPoint || hasMaxPoint) {
        var missingValues = seriesMissingValues$1(series);
        var minPoint, maxPoint;
        if (missingValues !== INTERPOLATE) {
            if (hasMinPoint) {
                minPoint = getter$$1(min - 1);
            }

            if (hasMaxPoint) {
                maxPoint = getter$$1(max + 1);
            }
        } else {
            var outPoint, pointHasValue;
            if (hasMinPoint) {
                outPoint = getter$$1(min - 1);
                pointHasValue = hasValue$1(series, outPoint.item);
                if (!pointHasValue) {
                    minPoint = findNext({
                        start: min,
                        dir: -1,
                        min: 0,
                        max: count - 1,
                        getter: getter$$1,
                        hasItem: hasItem,
                        series: series
                    });
                } else {
                    minPoint = outPoint;
                }
            }

            if (hasMaxPoint) {
                outPoint = getter$$1(max + 1);
                pointHasValue = hasValue$1(series, outPoint.item);
                if (!pointHasValue) {
                    maxPoint = findNext({
                        start: max,
                        dir: 1,
                        min: 0,
                        max: count - 1,
                        getter: getter$$1,
                        hasItem: hasItem,
                        series: series
                    });
                } else {
                    maxPoint = outPoint;
                }
            }
        }

        if (minPoint) {
            series._outOfRangeMinPoint = minPoint;
        }

        if (maxPoint) {
            series._outOfRangeMaxPoint = maxPoint;
        }
    }
}

var PlotAreaBase = (function (ChartElement$$1) {
    function PlotAreaBase(series, options, chartService) {
        ChartElement$$1.call(this, options);

        this.initFields(series, options);
        this.series = series;
        this.initSeries();
        this.charts = [];
        this.options.legend = this.options.legend || {};
        this.options.legend.items = [];
        this.axes = [];
        this.crosshairs = [];
        this.chartService = chartService;
        this.originalOptions = options;

        this.createPanes();
        this.render();
        this.createCrosshairs();
    }

    if ( ChartElement$$1 ) PlotAreaBase.__proto__ = ChartElement$$1;
    PlotAreaBase.prototype = Object.create( ChartElement$$1 && ChartElement$$1.prototype );
    PlotAreaBase.prototype.constructor = PlotAreaBase;

    PlotAreaBase.prototype.initFields = function initFields () { };

    PlotAreaBase.prototype.initSeries = function initSeries () {
        var series = this.series;

        for (var i = 0; i < series.length; i++) {
            series[i].index = i;
        }
    };

    PlotAreaBase.prototype.createPanes = function createPanes () {
        var this$1 = this;

        var defaults = { title: { color: (this.options.title || {}).color } };
        var panes = [];
        var paneOptions = this.options.panes || [];
        var panesLength = Math.max(paneOptions.length, 1);

        function setTitle(options, defaults) {
            if (isString(options.title)) {
                options.title = {
                    text: options.title
                };
            }

            options.title = deepExtend({}, defaults.title, options.title);
        }

        for (var i = 0; i < panesLength; i++) {
            var options = paneOptions[i] || {};
            setTitle(options, defaults);

            var currentPane = new Pane(options);
            currentPane.paneIndex = i;

            panes.push(currentPane);
            this$1.append(currentPane);
        }

        this.panes = panes;
    };

    PlotAreaBase.prototype.createCrosshairs = function createCrosshairs (panes) {
        var this$1 = this;
        if ( panes === void 0 ) panes = this.panes;

        for (var i = 0; i < panes.length; i++) {
            var pane = panes[i];
            for (var j = 0; j < pane.axes.length; j++) {
                var axis = pane.axes[j];
                if (axis.options.crosshair && axis.options.crosshair.visible) {
                    var currentCrosshair = new Crosshair(this$1.chartService, axis, axis.options.crosshair);

                    this$1.crosshairs.push(currentCrosshair);
                    pane.content.append(currentCrosshair);
                }
            }
        }
    };

    PlotAreaBase.prototype.removeCrosshairs = function removeCrosshairs (pane) {
        var crosshairs = this.crosshairs;
        var axes = pane.axes;

        for (var i = crosshairs.length - 1; i >= 0; i--) {
            for (var j = 0; j < axes.length; j++) {
                if (crosshairs[i].axis === axes[j]) {
                    crosshairs.splice(i, 1);
                    break;
                }
            }
        }
    };

    PlotAreaBase.prototype.hideCrosshairs = function hideCrosshairs () {
        var crosshairs = this.crosshairs;
        for (var idx = 0; idx < crosshairs.length; idx++) {
            crosshairs[idx].hide();
        }
    };

    PlotAreaBase.prototype.findPane = function findPane (name) {
        var panes = this.panes;
        var matchingPane;

        for (var i = 0; i < panes.length; i++) {
            if (panes[i].options.name === name) {
                matchingPane = panes[i];
                break;
            }
        }

        return matchingPane || panes[0];
    };

    PlotAreaBase.prototype.findPointPane = function findPointPane (point) {
        var panes = this.panes;
        var matchingPane;

        for (var i = 0; i < panes.length; i++) {
            if (panes[i].box.containsPoint(point)) {
                matchingPane = panes[i];
                break;
            }
        }

        return matchingPane;
    };

    PlotAreaBase.prototype.appendAxis = function appendAxis (axis) {
        var pane = this.findPane(axis.options.pane);

        pane.appendAxis(axis);
        this.axes.push(axis);
        axis.plotArea = this;
    };

    PlotAreaBase.prototype.removeAxis = function removeAxis (axisToRemove) {
        var this$1 = this;

        var filteredAxes = [];

        for (var i = 0; i < this.axes.length; i++) {
            var axis = this$1.axes[i];
            if (axisToRemove !== axis) {
                filteredAxes.push(axis);
            } else {
                axis.destroy();
            }
        }

        this.axes = filteredAxes;
    };

    PlotAreaBase.prototype.appendChart = function appendChart (chart, pane) {
        this.charts.push(chart);
        if (pane) {
            pane.appendChart(chart);
        } else {
            this.append(chart);
        }
    };

    PlotAreaBase.prototype.removeChart = function removeChart (chartToRemove) {
        var this$1 = this;

        var filteredCharts = [];

        for (var i = 0; i < this.charts.length; i++) {
            var chart = this$1.charts[i];
            if (chart !== chartToRemove) {
                filteredCharts.push(chart);
            } else {
                chart.destroy();
            }
        }

        this.charts = filteredCharts;
    };

    PlotAreaBase.prototype.addToLegend = function addToLegend (series) {
        var count = series.length;
        var legend = this.options.legend;
        var labels = legend.labels || {};
        var inactiveItems = legend.inactiveItems || {};
        var inactiveItemsLabels = inactiveItems.labels || {};
        var data = [];

        for (var i = 0; i < count; i++) {
            var currentSeries = series[i];
            var seriesVisible = currentSeries.visible !== false;
            if (currentSeries.visibleInLegend === false) {
                continue;
            }

            var text = currentSeries.name;
            var labelTemplate = seriesVisible ? getTemplate(labels) : getTemplate(inactiveItemsLabels) || getTemplate(labels);
            if (labelTemplate) {
                text = labelTemplate({
                    text: hasValue(text) ? text : "",
                    series: currentSeries
                });
            }

            var defaults = currentSeries._defaults;
            var color = currentSeries.color;
            if (isFunction(color) && defaults) {
                color = defaults.color;
            }

            var itemLabelOptions = (void 0), markerColor = (void 0);
            if (seriesVisible) {
                itemLabelOptions = {};
                markerColor = color;
            } else {
                itemLabelOptions = {
                    color: inactiveItemsLabels.color,
                    font: inactiveItemsLabels.font
                };
                markerColor = inactiveItems.markers.color;
            }

            if (hasValue(text) && text !== "") {
                data.push({
                    text: text,
                    labels: itemLabelOptions,
                    markerColor: markerColor,
                    series: currentSeries,
                    active: seriesVisible
                });
            }
        }

        append$1(legend.items, data);
    };

    PlotAreaBase.prototype.groupAxes = function groupAxes (panes) {
        var xAxes = [];
        var yAxes = [];

        for (var paneIx = 0; paneIx < panes.length; paneIx++) {
            var paneAxes = panes[paneIx].axes;
            for (var axisIx = 0; axisIx < paneAxes.length; axisIx++) {
                var axis = paneAxes[axisIx];
                if (axis.options.vertical) {
                    yAxes.push(axis);
                } else {
                    xAxes.push(axis);
                }
            }
        }

        return { x: xAxes, y: yAxes, any: xAxes.concat(yAxes) };
    };

    PlotAreaBase.prototype.groupSeriesByPane = function groupSeriesByPane () {
        var this$1 = this;

        var series = this.series;
        var seriesByPane = {};

        for (var i = 0; i < series.length; i++) {
            var currentSeries = series[i];
            var pane = this$1.seriesPaneName(currentSeries);

            if (seriesByPane[pane]) {
                seriesByPane[pane].push(currentSeries);
            } else {
                seriesByPane[pane] = [ currentSeries ];
            }
        }

        return seriesByPane;
    };

    PlotAreaBase.prototype.filterVisibleSeries = function filterVisibleSeries (series) {
        var result = [];

        for (var i = 0; i < series.length; i++) {
            var currentSeries = series[i];
            if (currentSeries.visible !== false) {
                result.push(currentSeries);
            }
        }

        return result;
    };

    PlotAreaBase.prototype.reflow = function reflow (targetBox) {
        var options = this.options.plotArea;
        var panes = this.panes;
        var margin = getSpacing(options.margin);

        this.box = targetBox.clone().unpad(margin);
        this.reflowPanes();

        this.detachLabels();
        this.reflowAxes(panes);
        this.reflowCharts(panes);
    };

    PlotAreaBase.prototype.redraw = function redraw (panes) {
        var this$1 = this;

        var panesArray = [].concat(panes);
        this.initSeries();

        //prevents leak during partial redraws. the cached gradients observers retain reference to the destroyed elements.
        var root = this.getRoot();
        if (root) {
            root.cleanGradients();
        }

        for (var i = 0; i < panesArray.length; i++) {
            this$1.removeCrosshairs(panesArray[i]);
            panesArray[i].empty();
        }

        this.render(panesArray);
        this.detachLabels();
        this.reflowAxes(this.panes);
        this.reflowCharts(panesArray);

        this.createCrosshairs(panesArray);

        for (var i$1 = 0; i$1 < panesArray.length; i$1++) {
            panesArray[i$1].refresh();
        }
    };

    PlotAreaBase.prototype.axisCrossingValues = function axisCrossingValues (axis, crossingAxes) {
        var options = axis.options;
        var crossingValues = [].concat(
            options.axisCrossingValues || options.axisCrossingValue
        );
        var valuesToAdd = crossingAxes.length - crossingValues.length;
        var defaultValue = crossingValues[0] || 0;

        for (var i = 0; i < valuesToAdd; i++) {
            crossingValues.push(defaultValue);
        }

        return crossingValues;
    };

    PlotAreaBase.prototype.alignAxisTo = function alignAxisTo (axis, targetAxis, crossingValue, targetCrossingValue) {
        var slot = axis.getSlot(crossingValue, crossingValue, true);
        var slotEdge = axis.options.reverse ? 2 : 1;
        var targetSlot = targetAxis.getSlot(targetCrossingValue, targetCrossingValue, true);
        var targetEdge = targetAxis.options.reverse ? 2 : 1;
        var axisBox = axis.box.translate(
            targetSlot[X + targetEdge] - slot[X + slotEdge],
            targetSlot[Y + targetEdge] - slot[Y + slotEdge]
        );

        if (axis.pane !== targetAxis.pane) {
            axisBox.translate(0, axis.pane.box.y1 - targetAxis.pane.box.y1);
        }

        axis.reflow(axisBox);
    };

    PlotAreaBase.prototype.alignAxes = function alignAxes (xAxes, yAxes) {
        var this$1 = this;

        var xAnchor = xAxes[0];
        var yAnchor = yAxes[0];
        var xAnchorCrossings = this.axisCrossingValues(xAnchor, yAxes);
        var yAnchorCrossings = this.axisCrossingValues(yAnchor, xAxes);
        var leftAnchors = {};
        var rightAnchors = {};
        var topAnchors = {};
        var bottomAnchors = {};

        for (var i = 0; i < yAxes.length; i++) {
            var axis = yAxes[i];
            var pane = axis.pane;
            var paneId = pane.id;
            var visible = axis.options.visible !== false;

            // Locate pane anchor, if any, and use its axisCrossingValues
            var anchor = paneAnchor(xAxes, pane) || xAnchor;
            var anchorCrossings = xAnchorCrossings;

            if (anchor !== xAnchor) {
                anchorCrossings = this$1.axisCrossingValues(anchor, yAxes);
            }

            this$1.alignAxisTo(axis, anchor, yAnchorCrossings[i], anchorCrossings[i]);

            if (axis.options._overlap) {
                continue;
            }

            if (round(axis.lineBox().x1) === round(anchor.lineBox().x1)) {
                // Push the axis to the left the previous y-axis so they don't overlap
                if (leftAnchors[paneId]) {
                    axis.reflow(axis.box
                        .alignTo(leftAnchors[paneId].box, LEFT)
                        .translate(-axis.options.margin, 0)
                    );
                }

                if (visible) {
                    leftAnchors[paneId] = axis;
                }
            }

            if (round(axis.lineBox().x2) === round(anchor.lineBox().x2)) {
                // Flip the labels on the right if we're at the right end of the pane
                if (!axis._mirrored) {
                    axis.options.labels.mirror = !axis.options.labels.mirror;
                    axis._mirrored = true;
                }

                this$1.alignAxisTo(axis, anchor, yAnchorCrossings[i], anchorCrossings[i]);

                // Push the axis to the right the previous y-axis so they don't overlap
                if (rightAnchors[paneId]) {
                    axis.reflow(axis.box
                        .alignTo(rightAnchors[paneId].box, RIGHT)
                        .translate(axis.options.margin, 0)
                    );
                }

                if (visible) {
                    rightAnchors[paneId] = axis;
                }
            }

            if (i !== 0 && yAnchor.pane === axis.pane) {
                axis.alignTo(yAnchor);
                axis.reflow(axis.box);
            }
        }

        for (var i$1 = 0; i$1 < xAxes.length; i$1++) {
            var axis$1 = xAxes[i$1];
            var pane$1 = axis$1.pane;
            var paneId$1 = pane$1.id;
            var visible$1 = axis$1.options.visible !== false;

            // Locate pane anchor and use its axisCrossingValues
            var anchor$1 = paneAnchor(yAxes, pane$1) || yAnchor;
            var anchorCrossings$1 = yAnchorCrossings;
            if (anchor$1 !== yAnchor) {
                anchorCrossings$1 = this$1.axisCrossingValues(anchor$1, xAxes);
            }

            this$1.alignAxisTo(axis$1, anchor$1, xAnchorCrossings[i$1], anchorCrossings$1[i$1]);

            if (axis$1.options._overlap) {
                continue;
            }

            if (round(axis$1.lineBox().y1) === round(anchor$1.lineBox().y1)) {
                // Flip the labels on top if we're at the top of the pane
                if (!axis$1._mirrored) {
                    axis$1.options.labels.mirror = !axis$1.options.labels.mirror;
                    axis$1._mirrored = true;
                }
                this$1.alignAxisTo(axis$1, anchor$1, xAnchorCrossings[i$1], anchorCrossings$1[i$1]);

                // Push the axis above the previous x-axis so they don't overlap
                if (topAnchors[paneId$1]) {
                    axis$1.reflow(axis$1.box
                        .alignTo(topAnchors[paneId$1].box, TOP)
                        .translate(0, -axis$1.options.margin)
                    );
                }

                if (visible$1) {
                    topAnchors[paneId$1] = axis$1;
                }
            }

            if (round(axis$1.lineBox().y2, COORD_PRECISION) === round(anchor$1.lineBox().y2, COORD_PRECISION)) {
                // Push the axis below the previous x-axis so they don't overlap
                if (bottomAnchors[paneId$1]) {
                    axis$1.reflow(axis$1.box
                        .alignTo(bottomAnchors[paneId$1].box, BOTTOM)
                        .translate(0, axis$1.options.margin)
                    );
                }

                if (visible$1) {
                    bottomAnchors[paneId$1] = axis$1;
                }
            }

            if (i$1 !== 0) {
                axis$1.alignTo(xAnchor);
                axis$1.reflow(axis$1.box);
            }
        }
    };

    PlotAreaBase.prototype.shrinkAxisWidth = function shrinkAxisWidth (panes) {
        var axes = this.groupAxes(panes).any;
        var axisBox = axisGroupBox(axes);
        var overflowX = 0;

        for (var i = 0; i < panes.length; i++) {
            var currentPane = panes[i];

            if (currentPane.axes.length > 0) {
                overflowX = Math.max(
                    overflowX,
                    axisBox.width() - currentPane.contentBox.width()
                );
            }
        }

        if (overflowX !== 0) {
            for (var i$1 = 0; i$1 < axes.length; i$1++) {
                var currentAxis = axes[i$1];

                if (!currentAxis.options.vertical) {
                    currentAxis.reflow(currentAxis.box.shrink(overflowX, 0));
                }
            }
        }
    };

    PlotAreaBase.prototype.shrinkAxisHeight = function shrinkAxisHeight (panes) {
        var shrinked;

        for (var i = 0; i < panes.length; i++) {
            var currentPane = panes[i];
            var axes = currentPane.axes;
            var overflowY = Math.max(0, axisGroupBox(axes).height() - currentPane.contentBox.height());

            if (overflowY !== 0) {
                for (var j = 0; j < axes.length; j++) {
                    var currentAxis = axes[j];

                    if (currentAxis.options.vertical) {
                        currentAxis.reflow(
                            currentAxis.box.shrink(0, overflowY)
                        );
                    }
                }
                shrinked = true;
            }
        }

        return shrinked;
    };

    PlotAreaBase.prototype.fitAxes = function fitAxes (panes) {
        var axes = this.groupAxes(panes).any;
        var offsetX = 0;

        for (var i = 0; i < panes.length; i++) {
            var currentPane = panes[i];
            var paneAxes = currentPane.axes;
            var paneBox = currentPane.contentBox;

            if (paneAxes.length > 0) {
                var axisBox = axisGroupBox(paneAxes);
                // OffsetY is calculated and applied per pane
                var offsetY = Math.max(paneBox.y1 - axisBox.y1, paneBox.y2 - axisBox.y2);

                // OffsetX is calculated and applied globally
                offsetX = Math.max(offsetX, paneBox.x1 - axisBox.x1);


                for (var j = 0; j < paneAxes.length; j++) {
                    var currentAxis = paneAxes[j];

                    currentAxis.reflow(
                        currentAxis.box.translate(0, offsetY)
                    );
                }
            }
        }

        for (var i$1 = 0; i$1 < axes.length; i$1++) {
            var currentAxis$1 = axes[i$1];

            currentAxis$1.reflow(
                currentAxis$1.box.translate(offsetX, 0)
            );
        }
    };

    PlotAreaBase.prototype.reflowAxes = function reflowAxes (panes) {
        var this$1 = this;

        var axes = this.groupAxes(panes);

        for (var i = 0; i < panes.length; i++) {
            this$1.reflowPaneAxes(panes[i]);
        }

        if (axes.x.length > 0 && axes.y.length > 0) {
            this.alignAxes(axes.x, axes.y);
            this.shrinkAxisWidth(panes);

            this.autoRotateAxisLabels(axes);

            this.alignAxes(axes.x, axes.y);
            if (this.shrinkAxisWidth(panes)) {
                this.alignAxes(axes.x, axes.y);
            }

            this.shrinkAxisHeight(panes);
            this.alignAxes(axes.x, axes.y);

            if (this.shrinkAxisHeight(panes)) {
                this.alignAxes(axes.x, axes.y);
            }

            this.fitAxes(panes);
        }
    };

    PlotAreaBase.prototype.autoRotateAxisLabels = function autoRotateAxisLabels (groupedAxes) {
        var this$1 = this;

        var ref = this;
        var panes = ref.panes;
        var axes = allPaneAxes(panes);
        var rotated;

        for (var idx = 0; idx < axes.length; idx++) {
            var axis = axes[idx];
            if (axis.autoRotateLabels()) {
                rotated = true;
            }
        }

        if (rotated) {
            for (var idx$1 = 0; idx$1 < panes.length; idx$1++) {
                this$1.reflowPaneAxes(panes[idx$1]);
            }

            if (groupedAxes.x.length > 0 && groupedAxes.y.length > 0) {
                this.alignAxes(groupedAxes.x, groupedAxes.y);
                this.shrinkAxisWidth(panes);
            }
        }
    };

    PlotAreaBase.prototype.reflowPaneAxes = function reflowPaneAxes (pane) {
        var axes = pane.axes;
        var length = axes.length;

        if (length > 0) {
            for (var i = 0; i < length; i++) {
                axes[i].reflow(pane.contentBox);
            }
        }
    };

    PlotAreaBase.prototype.reflowCharts = function reflowCharts (panes) {
        var charts = this.charts;
        var count = charts.length;
        var box = this.box;

        for (var i = 0; i < count; i++) {
            var chartPane = charts[i].pane;
            if (!chartPane || inArray(chartPane, panes)) {
                charts[i].reflow(box);
            }
        }
    };

    PlotAreaBase.prototype.reflowPanes = function reflowPanes () {
        var ref = this;
        var box = ref.box;
        var panes = ref.panes;
        var panesLength = panes.length;
        var remainingHeight = box.height();
        var remainingPanes = panesLength;
        var autoHeightPanes = 0;
        var top = box.y1;

        for (var i = 0; i < panesLength; i++) {
            var currentPane = panes[i];
            var height = currentPane.options.height;

            currentPane.options.width = box.width();

            if (!currentPane.options.height) {
                autoHeightPanes++;
            } else {
                if (height.indexOf && height.indexOf("%")) {
                    var percents = parseInt(height, 10) / 100;
                    currentPane.options.height = percents * box.height();
                }

                currentPane.reflow(box.clone());

                remainingHeight -= currentPane.options.height;
            }
        }

        for (var i$1 = 0; i$1 < panesLength; i$1++) {
            var currentPane$1 = panes[i$1];

            if (!currentPane$1.options.height) {
                currentPane$1.options.height = remainingHeight / autoHeightPanes;
            }
        }

        for (var i$2 = 0; i$2 < panesLength; i$2++) {
            var currentPane$2 = panes[i$2];
            var paneBox = box
                .clone()
                .move(box.x1, top);

            currentPane$2.reflow(paneBox);

            remainingPanes--;
            top += currentPane$2.options.height;
        }
    };

    PlotAreaBase.prototype.backgroundBox = function backgroundBox () {
        var axes = this.axes;
        var axesCount = axes.length;
        var box;

        for (var i = 0; i < axesCount; i++) {
            var axisA = axes[i];

            for (var j = 0; j < axesCount; j++) {
                var axisB = axes[j];

                if (axisA.options.vertical !== axisB.options.vertical) {
                    var lineBox = axisA.lineBox().clone().wrap(axisB.lineBox());

                    if (!box) {
                        box = lineBox;
                    } else {
                        box = box.wrap(lineBox);
                    }
                }
            }
        }

        return box || this.box;
    };

    PlotAreaBase.prototype.chartsBoxes = function chartsBoxes () {
        var panes = this.panes;
        var boxes = [];

        for (var idx = 0; idx < panes.length; idx++) {
            boxes.push(panes[idx].chartsBox());
        }

        return boxes;
    };

    PlotAreaBase.prototype.addBackgroundPaths = function addBackgroundPaths (multipath) {
        var boxes = this.chartsBoxes();
        for (var idx = 0; idx < boxes.length; idx++) {
            multipath.paths.push(_progress_kendoDrawing.drawing.Path.fromRect(boxes[idx].toRect()));
        }
    };

    PlotAreaBase.prototype.backgroundContainsPoint = function backgroundContainsPoint (point) {
        var boxes = this.chartsBoxes();
        for (var idx = 0; idx < boxes.length; idx++) {
            if (boxes[idx].containsPoint(point)) {
                return true;
            }
        }
    };

    PlotAreaBase.prototype.createVisual = function createVisual () {
        ChartElement$$1.prototype.createVisual.call(this);

        var options = this.options.plotArea;
        var opacity = options.opacity;
        var background = options.background;
        var border = options.border; if ( border === void 0 ) border = {};
        if (isTransparent(background)) {
            background = WHITE;
            opacity = 0;
        }

        var bg = this._bgVisual = new _progress_kendoDrawing.drawing.MultiPath({
            fill: {
                color: background,
                opacity: opacity
            },
            stroke: {
                color: border.width ? border.color : "",
                width: border.width,
                dashType: border.dashType
            },
            zIndex: -1
        });

        this.addBackgroundPaths(bg);

        this.appendVisual(bg);
    };

    PlotAreaBase.prototype.pointsByCategoryIndex = function pointsByCategoryIndex (categoryIndex) {
        var charts = this.charts;
        var result = [];

        if (categoryIndex !== null) {
            for (var i = 0; i < charts.length; i++) {
                var chart = charts[i];
                if (chart.pane.options.name === "_navigator") {
                    continue;
                }

                var points = charts[i].categoryPoints[categoryIndex];
                if (points && points.length) {
                    for (var j = 0; j < points.length; j++) {
                        var point = points[j];
                        if (point && defined(point.value) && point.value !== null) {
                            result.push(point);
                        }
                    }
                }
            }
        }

        return result;
    };

    PlotAreaBase.prototype.pointsBySeriesIndex = function pointsBySeriesIndex (seriesIndex) {
        return this.filterPoints(function(point) {
            return point.series.index === seriesIndex;
        });
    };

    PlotAreaBase.prototype.pointsBySeriesName = function pointsBySeriesName (name) {
        return this.filterPoints(function(point) {
            return point.series.name === name;
        });
    };

    PlotAreaBase.prototype.filterPoints = function filterPoints (callback) {
        var charts = this.charts;
        var result = [];

        for (var i = 0; i < charts.length; i++) {
            var chart = charts[i];
            var points = chart.points;
            for (var j = 0; j < points.length; j++) {
                var point = points[j];
                if (point && point.visible !== false && callback(point)) {
                    result.push(point);
                }
            }
        }

        return result;
    };

    PlotAreaBase.prototype.findPoint = function findPoint (callback) {
        var charts = this.charts;

        for (var i = 0; i < charts.length; i++) {
            var chart = charts[i];
            var points = chart.points;
            for (var j = 0; j < points.length; j++) {
                var point = points[j];
                if (point && point.visible !== false && callback(point)) {
                    return point;
                }
            }
        }
    };

    PlotAreaBase.prototype.paneByPoint = function paneByPoint (point) {
        var panes = this.panes;

        for (var i = 0; i < panes.length; i++) {
            var pane = panes[i];
            if (pane.box.containsPoint(point)) {
                return pane;
            }
        }
    };

    PlotAreaBase.prototype.detachLabels = function detachLabels () {
        var axes = this.groupAxes(this.panes);
        var xAxes = axes.x;
        var yAxes = axes.y;

        this.detachAxisGroupLabels(yAxes, xAxes);
        this.detachAxisGroupLabels(xAxes, yAxes);
    };

    PlotAreaBase.prototype.detachAxisGroupLabels = function detachAxisGroupLabels (axes, crossingAxes) {
        var this$1 = this;

        var labelAxisCount = 0;

        for (var i = 0; i < axes.length; i++) {
            var axis = axes[i];
            var pane = axis.pane;
            var anchor = paneAnchor(crossingAxes, pane) || crossingAxes[0];
            var axisIndex = i + labelAxisCount;
            var labelAxis = this$1.createLabelAxis(axis, axisIndex, anchor);

            if (labelAxis) {
                labelAxisCount++;

                var pos = pane.axes.indexOf(axis) + labelAxisCount;
                pane.appendAxisAt(labelAxis, pos);
            }
        }
    };

    PlotAreaBase.prototype.createLabelAxis = function createLabelAxis (axis, axisIndex, anchor) {
        var labelOptions = axis.options.labels;
        var position = labelOptions.position;
        var onAxis = position !== END && position !== START;
        var visible = labelOptions.visible;

        if (onAxis || visible === false) {
            return null;
        }

        var allAxes = this.groupAxes(this.panes);
        var crossingAxes = anchor.options.vertical ? allAxes.x : allAxes.y;
        var anchorCrossings = this.axisCrossingValues(anchor, crossingAxes);
        var end = position === END;
        var range = anchor.range();
        var edge = end ? range.max : range.min;
        var crossingValue = limitValue(anchorCrossings[axisIndex], range.min, range.max);

        if (crossingValue - edge === 0) {
            return null;
        }

        anchorCrossings.splice(axisIndex + 1, 0, edge);
        anchor.options.axisCrossingValues = anchorCrossings;

        var labelAxis = axis.clone();
        axis.clear();

        labelAxis.options.name = undefined;
        labelAxis.options.line.visible = false;

        labelAxis.options.crosshair = undefined;
        labelAxis.options.notes = undefined;
        labelAxis.options.plotBands = undefined;

        return labelAxis;
    };

    return PlotAreaBase;
}(ChartElement));

function isSingleAxis(axis) {
    return !axis.pane.axes.some(function (a) { return a.options.vertical === axis.options.vertical && a !== axis && a.options.visible !== false; }
    );
}

function axisGroupBox(axes) {
    var length = axes.length;
    var box;

    for (var i = 0; i < length; i++) {
        var axis = axes[i];
        var visible = axis.options.visible !== false;
        if (visible || isSingleAxis(axis)) {
            var axisBox = visible ? axis.contentBox() : axis.lineBox();

            if (!box) {
                box = axisBox.clone();
            } else {
                box.wrap(axisBox);
            }
        }
    }

    return box || new Box();
}

function paneAnchor(axes, pane) {
    for (var i = 0; i < axes.length; i++) {
        var anchor = axes[i];
        if (anchor && anchor.pane === pane) {
            return anchor;
        }
    }
}

function isTransparent(color) {
    return color === "" || color === null || color === "none" || color === "transparent" || !defined(color);
}

var allPaneAxes = function (panes) { return panes.reduce(function (acc, pane) { return acc.concat(pane.axes); }, []); };

setDefaultOptions(PlotAreaBase, {
    series: [],
    plotArea: {
        margin: {}
    },
    background: "",
    border: {
        color: BLACK,
        width: 0
    },
    legend: {
        inactiveItems: {
            labels: {
                color: "#919191"
            },
            markers: {
                color: "#919191"
            }
        }
    }
});

var PlotAreaEventsMixin = {
    hover: function(chart, e) {
        this._dispatchEvent(chart, e, PLOT_AREA_HOVER);
    },

    click: function(chart, e) {
        this._dispatchEvent(chart, e, PLOT_AREA_CLICK);
    }
};

var SeriesAggregator = (function (Class$$1) {
    function SeriesAggregator(series, binder, defaultAggregates) {
        Class$$1.call(this);

        var canonicalFields = binder.canonicalFields(series);
        var valueFields = binder.valueFields(series);
        var sourceFields = binder.sourceFields(series, canonicalFields);
        var seriesFields = this._seriesFields = [];
        var defaults = defaultAggregates.query(series.type);
        var rootAggregate = series.aggregate || defaults;

        this._series = series;
        this._binder = binder;

        for (var i = 0; i < canonicalFields.length; i++) {
            var field = canonicalFields[i];
            var fieldAggregate = (void 0);

            if (isObject(rootAggregate)) {
                fieldAggregate = rootAggregate[field];
            } else if (i === 0 || inArray(field, valueFields)) {
                fieldAggregate = rootAggregate;
            } else {
                break;
            }

            if (fieldAggregate) {
                seriesFields.push({
                    canonicalName: field,
                    name: sourceFields[i],
                    transform: isFunction(fieldAggregate) ? fieldAggregate : Aggregates[fieldAggregate]
                });
            }
        }
    }

    if ( Class$$1 ) SeriesAggregator.__proto__ = Class$$1;
    SeriesAggregator.prototype = Object.create( Class$$1 && Class$$1.prototype );
    SeriesAggregator.prototype.constructor = SeriesAggregator;

    SeriesAggregator.prototype.aggregatePoints = function aggregatePoints (srcPoints, group) {
        var this$1 = this;

        var ref = this;
        var series = ref._series;
        var seriesFields = ref._seriesFields;
        var data = this._bindPoints(srcPoints || []);
        var firstDataItem = data.dataItems[0];
        var result = {};

        if (firstDataItem && !isNumber(firstDataItem) && !isArray(firstDataItem)) {
            var fn = function() {};
            fn.prototype = firstDataItem;
            result = new fn();
        }

        for (var i = 0; i < seriesFields.length; i++) {
            var field = seriesFields[i];
            var srcValues = this$1._bindField(data.values, field.canonicalName);
            var value = field.transform(srcValues, series, data.dataItems, group);

            if (value !== null && isObject(value) && !defined(value.length) && !(value instanceof Date)) {
                result = value;
                break;
            } else {
                if (defined(value)) {
                    setValue(field.name, result, value);
                }
            }
        }

        return result;
    };

    SeriesAggregator.prototype._bindPoints = function _bindPoints (points) {
        var ref = this;
        var binder = ref._binder;
        var series = ref._series;
        var values = [];
        var dataItems = [];

        for (var i = 0; i < points.length; i++) {
            var pointIx = points[i];

            values.push(binder.bindPoint(series, pointIx));
            dataItems.push(series.data[pointIx]);
        }

        return {
            values: values,
            dataItems: dataItems
        };
    };

    SeriesAggregator.prototype._bindField = function _bindField (data, field) {
        var values = [];
        var count = data.length;

        for (var i = 0; i < count; i++) {
            var item = data[i];
            var valueFields = item.valueFields;
            var value = (void 0);

            if (defined(valueFields[field])) {
                value = valueFields[field];
            } else {
                value = item.fields[field];
            }

            values.push(value);
        }

        return values;
    };

    return SeriesAggregator;
}(_progress_kendoDrawing.Class));

function setValue(fieldName, target, value) {
    var parentObj = target;
    var field = fieldName;

    if (fieldName.indexOf(".") > -1) {
        var parts = fieldName.split(".");

        while (parts.length > 1) {
            field = parts.shift();
            if (!defined(parentObj[field])) {
                parentObj[field] = {};
            }
            parentObj = parentObj[field];
        }
        field = parts.shift();
    }

    parentObj[field] = value;
}

var DefaultAggregates = (function (Class$$1) {
    function DefaultAggregates() {
        Class$$1.call(this);

        this._defaults = {};
    }

    if ( Class$$1 ) DefaultAggregates.__proto__ = Class$$1;
    DefaultAggregates.prototype = Object.create( Class$$1 && Class$$1.prototype );
    DefaultAggregates.prototype.constructor = DefaultAggregates;

    DefaultAggregates.prototype.register = function register (seriesTypes, aggregates) {
        var this$1 = this;

        for (var i = 0; i < seriesTypes.length; i++) {
            this$1._defaults[seriesTypes[i]] = aggregates;
        }
    };

    DefaultAggregates.prototype.query = function query (seriesType) {
        return this._defaults[seriesType];
    };

    return DefaultAggregates;
}(_progress_kendoDrawing.Class));

DefaultAggregates.current = new DefaultAggregates();

var RangeBar = (function (Bar$$1) {
    function RangeBar () {
        Bar$$1.apply(this, arguments);
    }

    if ( Bar$$1 ) RangeBar.__proto__ = Bar$$1;
    RangeBar.prototype = Object.create( Bar$$1 && Bar$$1.prototype );
    RangeBar.prototype.constructor = RangeBar;

    RangeBar.prototype.createLabel = function createLabel () {
        var labels = this.options.labels;
        var fromOptions = deepExtend({}, labels, labels.from);
        var toOptions = deepExtend({}, labels, labels.to);

        if (fromOptions.visible) {
            this.labelFrom = this._createLabel(fromOptions);
            this.append(this.labelFrom);
        }

        if (toOptions.visible) {
            this.labelTo = this._createLabel(toOptions);
            this.append(this.labelTo);
        }
    };

    RangeBar.prototype._createLabel = function _createLabel (options) {
        var labelTemplate = getTemplate(options);
        var pointData = this.pointData();

        var labelText;

        if (labelTemplate) {
            labelText = labelTemplate(pointData);
        } else {
            labelText = this.formatValue(options.format);
        }

        return new BarLabel(labelText,
            deepExtend({
                vertical: this.options.vertical
            },
            options
        ), pointData);
    };

    RangeBar.prototype.reflow = function reflow (targetBox) {
        this.render();

        var ref = this;
        var labelFrom = ref.labelFrom;
        var labelTo = ref.labelTo;
        var value = ref.value;

        this.box = targetBox;

        if (labelFrom) {
            labelFrom.options.aboveAxis = value.from > value.to;
            labelFrom.reflow(targetBox);
        }

        if (labelTo) {
            labelTo.options.aboveAxis = value.to > value.from;
            labelTo.reflow(targetBox);
        }

        if (this.note) {
            this.note.reflow(targetBox);
        }
    };

    return RangeBar;
}(Bar));

RangeBar.prototype.defaults = deepExtend({}, RangeBar.prototype.defaults, {
    labels: {
        format: "{0} - {1}"
    },
    tooltip: {
        format: "{1}"
    }
});

var RangeBarChart = (function (BarChart$$1) {
    function RangeBarChart () {
        BarChart$$1.apply(this, arguments);
    }

    if ( BarChart$$1 ) RangeBarChart.__proto__ = BarChart$$1;
    RangeBarChart.prototype = Object.create( BarChart$$1 && BarChart$$1.prototype );
    RangeBarChart.prototype.constructor = RangeBarChart;

    RangeBarChart.prototype.pointType = function pointType () {
        return RangeBar;
    };

    RangeBarChart.prototype.pointValue = function pointValue (data) {
        return data.valueFields;
    };

    RangeBarChart.prototype.formatPointValue = function formatPointValue (point, format) {
        if (point.value.from === null && point.value.to === null) {
            return "";
        }

        return this.chartService.format.auto(format, point.value.from, point.value.to);
    };

    RangeBarChart.prototype.plotRange = function plotRange (point) {
        if (!point) {
            return 0;
        }

        return [ point.value.from, point.value.to ];
    };

    RangeBarChart.prototype.updateRange = function updateRange (value, fields) {
        var axisName = fields.series.axis;
        var from = value.from;
        var to = value.to;
        var axisRange = this.valueAxisRanges[axisName];

        if (value !== null && isNumber(from) && isNumber(to)) {
            axisRange = this.valueAxisRanges[axisName] = axisRange || { min: MAX_VALUE, max: MIN_VALUE };

            axisRange.min = Math.min(axisRange.min, from);
            axisRange.max = Math.max(axisRange.max, from);

            axisRange.min = Math.min(axisRange.min, to);
            axisRange.max = Math.max(axisRange.max, to);
        }
    };

    RangeBarChart.prototype.aboveAxis = function aboveAxis (point) {
        var value = point.value;
        return value.from < value.to;
    };

    return RangeBarChart;
}(BarChart));

RangeBarChart.prototype.plotLimits = CategoricalChart.prototype.plotLimits;

var RangeLinePoint = (function (LinePoint$$1) {
    function RangeLinePoint () {
        LinePoint$$1.apply(this, arguments);
    }

    if ( LinePoint$$1 ) RangeLinePoint.__proto__ = LinePoint$$1;
    RangeLinePoint.prototype = Object.create( LinePoint$$1 && LinePoint$$1.prototype );
    RangeLinePoint.prototype.constructor = RangeLinePoint;

    RangeLinePoint.prototype.aliasFor = function aliasFor () {
        return this.parent;
    };

    return RangeLinePoint;
}(LinePoint));

var AUTO$1 = 'auto';
var DEFAULT_FROM_FORMAT = '{0}';
var DEFAULT_TO_FORMAT = '{1}';

var RangeAreaPoint = (function (ChartElement$$1) {
    function RangeAreaPoint(value, options) {
        ChartElement$$1.call(this);

        this.value = value;
        this.options = options;
        this.aboveAxis = valueOrDefault(this.options.aboveAxis, true);
        this.tooltipTracking = true;
        this.initLabelsFormat();
    }

    if ( ChartElement$$1 ) RangeAreaPoint.__proto__ = ChartElement$$1;
    RangeAreaPoint.prototype = Object.create( ChartElement$$1 && ChartElement$$1.prototype );
    RangeAreaPoint.prototype.constructor = RangeAreaPoint;

    RangeAreaPoint.prototype.render = function render () {
        if (this._rendered) {
            return;
        }

        this._rendered = true;

        var ref = this.options;
        var markers = ref.markers;
        var labels = ref.labels;
        var value = this.value;

        var fromPoint = this.fromPoint = new RangeLinePoint(value, deepExtend({}, this.options, {
            labels: labels.from,
            markers: markers.from
        }));

        var toPoint = this.toPoint = new RangeLinePoint(value, deepExtend({}, this.options, {
            labels: labels.to,
            markers: markers.to
        }));

        this.copyFields(fromPoint);
        this.copyFields(toPoint);

        this.append(fromPoint);
        this.append(toPoint);
    };

    RangeAreaPoint.prototype.reflow = function reflow (targetBox) {
        this.render();

        var fromBox = targetBox.from;
        var toBox = targetBox.to;

        this.positionLabels(fromBox, toBox);

        this.fromPoint.reflow(fromBox);
        this.toPoint.reflow(toBox);

        this.box = this.fromPoint.markerBox().clone().wrap(this.toPoint.markerBox());
    };

    RangeAreaPoint.prototype.createHighlight = function createHighlight () {
        var group = new _progress_kendoDrawing.drawing.Group();
        group.append(this.fromPoint.createHighlight());
        group.append(this.toPoint.createHighlight());

        return group;
    };

    RangeAreaPoint.prototype.highlightVisual = function highlightVisual () {
        return this.visual;
    };

    RangeAreaPoint.prototype.highlightVisualArgs = function highlightVisualArgs () {
        return {
            options: this.options,
            from: this.fromPoint.highlightVisualArgs(),
            to: this.toPoint.highlightVisualArgs()
        };
    };

    RangeAreaPoint.prototype.tooltipAnchor = function tooltipAnchor () {
        var clipBox = this.owner.pane.clipBox();
        var showTooltip = !clipBox || clipBox.overlaps(this.box);

        if (showTooltip) {
            var box = this.box;
            var center = box.center();
            var horizontalAlign = LEFT;
            var x, y, verticalAlign;

            if (this.options.vertical) {
                x = center.x;
                y = box.y1 - TOOLTIP_OFFSET;
                verticalAlign = BOTTOM;
            } else {
                x = box.x2 + TOOLTIP_OFFSET;
                y = center.y;
                verticalAlign = CENTER;
            }

            return {
                point: new Point(x, y),
                align: {
                    horizontal: horizontalAlign,
                    vertical: verticalAlign
                }
            };
        }
    };

    RangeAreaPoint.prototype.formatValue = function formatValue (format) {
        return this.owner.formatPointValue(this, format);
    };

    RangeAreaPoint.prototype.overlapsBox = function overlapsBox (box) {
        return this.box.overlaps(box);
    };

    RangeAreaPoint.prototype.unclipElements = function unclipElements () {
        this.fromPoint.unclipElements();
        this.toPoint.unclipElements();
    };

    RangeAreaPoint.prototype.initLabelsFormat = function initLabelsFormat () {
        var labels = this.options.labels;
        if (!labels.format) {
            if (!labels.from || !labels.from.format) {
                labels.from = Object.assign({}, labels.from, {
                    format: DEFAULT_FROM_FORMAT
                });
            }

            if (!labels.to || !labels.to.format) {
                labels.to = Object.assign({}, labels.to, {
                    format: DEFAULT_TO_FORMAT
                });
            }
        }
    };

    RangeAreaPoint.prototype.positionLabels = function positionLabels (fromBox, toBox) {
        var ref = this.options;
        var labels = ref.labels;
        var vertical = ref.vertical;

        if (labels.position === AUTO$1) {
            var fromLabelPosition, toLabelPosition;
            if (vertical) {
                if (toBox.y1 <= fromBox.y1) {
                    toLabelPosition = ABOVE;
                    fromLabelPosition = BELOW;
                } else {
                    toLabelPosition = BELOW;
                    fromLabelPosition = ABOVE;
                }
            } else {
                if (toBox.x1 <= fromBox.x1) {
                    toLabelPosition = LEFT;
                    fromLabelPosition = RIGHT;
                } else {
                    toLabelPosition = RIGHT;
                    fromLabelPosition = LEFT;
                }
            }

            if (!labels.from || !labels.from.position) {
                this.fromPoint.options.labels.position = fromLabelPosition;
            }

            if (!labels.to || !labels.to.position) {
                this.toPoint.options.labels.position = toLabelPosition;
            }
        }
    };

    RangeAreaPoint.prototype.copyFields = function copyFields (point) {
        point.dataItem = this.dataItem;
        point.category = this.category;
        point.series = this.series;
        point.color = this.color;
        point.owner = this.owner;
    };

    return RangeAreaPoint;
}(ChartElement));

deepExtend(RangeAreaPoint.prototype, PointEventsMixin);
deepExtend(RangeAreaPoint.prototype, NoteMixin);

RangeAreaPoint.prototype.defaults = {
    markers: {
        visible: false,
        background: WHITE,
        size: LINE_MARKER_SIZE,
        type: CIRCLE,
        border: {
            width: 2
        },
        opacity: 1
    },
    labels: {
        visible: false,
        margin: getSpacing(3),
        padding: getSpacing(4),
        animation: {
            type: FADEIN,
            delay: INITIAL_ANIMATION_DURATION
        },
        position: AUTO$1
    },
    notes: {
        label: {}
    },
    highlight: {
        markers: {
            border: {
                color: WHITE,
                width: 2
            }
        },
        zIndex: HIGHLIGHT_ZINDEX
    },
    tooltip: {
        format: '{0} - {1}'
    }
};

var RangeAreaSegment = (function (AreaSegment$$1) {
    function RangeAreaSegment () {
        AreaSegment$$1.apply(this, arguments);
    }

    if ( AreaSegment$$1 ) RangeAreaSegment.__proto__ = AreaSegment$$1;
    RangeAreaSegment.prototype = Object.create( AreaSegment$$1 && AreaSegment$$1.prototype );
    RangeAreaSegment.prototype.constructor = RangeAreaSegment;

    RangeAreaSegment.prototype.createStrokeSegments = function createStrokeSegments () {
        return this.segmentsFromPoints(this.toGeometryPoints(this.toPoints()));
    };

    RangeAreaSegment.prototype.stackSegments = function stackSegments () {
        var fromSegments = this.fromSegments;
        if (!this.fromSegments) {
            fromSegments = this.fromSegments = this.segmentsFromPoints(this.toGeometryPoints(this.fromPoints().reverse()));
        }

        return fromSegments;
    };

    RangeAreaSegment.prototype.createStroke = function createStroke (style) {
        var toPath = new _progress_kendoDrawing.drawing.Path(style);
        var fromPath = new _progress_kendoDrawing.drawing.Path(style);

        toPath.segments.push.apply(toPath.segments, this.strokeSegments());
        fromPath.segments.push.apply(fromPath.segments, this.stackSegments());

        this.visual.append(toPath);
        this.visual.append(fromPath);
    };

    RangeAreaSegment.prototype.hasStackSegment = function hasStackSegment () {
        return true;
    };

    RangeAreaSegment.prototype.fromPoints = function fromPoints () {
        return this.linePoints.map(function (point) { return point.fromPoint; });
    };

    RangeAreaSegment.prototype.toPoints = function toPoints () {
        return this.linePoints.map(function (point) { return point.toPoint; });
    };

    return RangeAreaSegment;
}(AreaSegment));

var SplineRangeAreaSegment = (function (RangeAreaSegment$$1) {
    function SplineRangeAreaSegment () {
        RangeAreaSegment$$1.apply(this, arguments);
    }

    if ( RangeAreaSegment$$1 ) SplineRangeAreaSegment.__proto__ = RangeAreaSegment$$1;
    SplineRangeAreaSegment.prototype = Object.create( RangeAreaSegment$$1 && RangeAreaSegment$$1.prototype );
    SplineRangeAreaSegment.prototype.constructor = SplineRangeAreaSegment;

    SplineRangeAreaSegment.prototype.createStrokeSegments = function createStrokeSegments () {
        return this.createCurveSegments(this.toPoints());
    };

    SplineRangeAreaSegment.prototype.stackSegments = function stackSegments () {
        var fromSegments = this.fromSegments;
        if (!this.fromSegments) {
            fromSegments = this.fromSegments = this.createCurveSegments(this.fromPoints().reverse());
        }

        return fromSegments;
    };

    SplineRangeAreaSegment.prototype.createCurveSegments = function createCurveSegments (points) {
        var curveProcessor = new CurveProcessor();

        return curveProcessor.process(this.toGeometryPoints(points));
    };

    return SplineRangeAreaSegment;
}(RangeAreaSegment));

var StepRangeAreaSegment = (function (RangeAreaSegment$$1) {
    function StepRangeAreaSegment () {
        RangeAreaSegment$$1.apply(this, arguments);
    }

    if ( RangeAreaSegment$$1 ) StepRangeAreaSegment.__proto__ = RangeAreaSegment$$1;
    StepRangeAreaSegment.prototype = Object.create( RangeAreaSegment$$1 && RangeAreaSegment$$1.prototype );
    StepRangeAreaSegment.prototype.constructor = StepRangeAreaSegment;

    StepRangeAreaSegment.prototype.createStrokeSegments = function createStrokeSegments () {
        return this.segmentsFromPoints(this.calculateStepPoints(this.toPoints()));
    };

    StepRangeAreaSegment.prototype.stackSegments = function stackSegments () {
        var fromSegments = this.fromSegments;
        if (!this.fromSegments) {
            fromSegments = this.fromSegments = this.segmentsFromPoints(this.calculateStepPoints(this.fromPoints()));
            fromSegments.reverse();
        }

        return fromSegments;
    };

    return StepRangeAreaSegment;
}(RangeAreaSegment));

deepExtend(StepRangeAreaSegment.prototype, StepLineMixin);

var RangeAreaChart = (function (CategoricalChart$$1) {
    function RangeAreaChart () {
        CategoricalChart$$1.apply(this, arguments);
    }

    if ( CategoricalChart$$1 ) RangeAreaChart.__proto__ = CategoricalChart$$1;
    RangeAreaChart.prototype = Object.create( CategoricalChart$$1 && CategoricalChart$$1.prototype );
    RangeAreaChart.prototype.constructor = RangeAreaChart;

    RangeAreaChart.prototype.render = function render () {
        CategoricalChart$$1.prototype.render.call(this);

        this.renderSegments();
    };

    RangeAreaChart.prototype.pointType = function pointType () {
        return RangeAreaPoint;
    };

    RangeAreaChart.prototype.createPoint = function createPoint (data, fields) {
        var categoryIx = fields.categoryIx;
        var category = fields.category;
        var series = fields.series;
        var seriesIx = fields.seriesIx;
        var value = data.valueFields;

        if (!hasValue(value.from) && !hasValue(value.to)) {
            if (this.seriesMissingValues(series) === ZERO) {
                value = {
                    from: 0,
                    to: 0
                };
            } else {
                return null;
            }
        }

        var pointOptions = this.pointOptions(series, seriesIx);
        pointOptions = this.evalPointOptions(
            pointOptions, value, category, categoryIx, series, seriesIx
        );

        var color = data.fields.color || series.color;
        if (isFunction(series.color)) {
            color = pointOptions.color;
        }

        var point = new RangeAreaPoint(value, pointOptions);
        point.color = color;

        this.append(point);

        return point;
    };

    RangeAreaChart.prototype.createSegment = function createSegment (linePoints, currentSeries, seriesIx) {
        var style = (currentSeries.line || {}).style;
        var segmentType;
        if (style === "smooth") {
            segmentType = SplineRangeAreaSegment;
        } else if (style === "step") {
            segmentType = StepRangeAreaSegment;
        } else {
            segmentType = RangeAreaSegment;
        }

        return new segmentType(linePoints, currentSeries, seriesIx);
    };

    RangeAreaChart.prototype.plotRange = function plotRange (point, startValue) {
        if (!point) {
            return [ startValue, startValue ];
        }

        return [ point.value.from, point.value.to ];
    };

    RangeAreaChart.prototype.valueSlot = function valueSlot (valueAxis, plotRange) {
        var fromSlot = valueAxis.getSlot(plotRange[0], plotRange[0], !this.options.clip);
        var toSlot = valueAxis.getSlot(plotRange[1], plotRange[1], !this.options.clip);
        if (fromSlot && toSlot) {
            return {
                from: fromSlot,
                to: toSlot
            };
        }
    };

    RangeAreaChart.prototype.pointSlot = function pointSlot (categorySlot, valueSlot) {
        var from = valueSlot.from;
        var to = valueSlot.to;
        var fromSlot, toSlot;

        if (this.options.invertAxes) {
            fromSlot = new Box(from.x1, categorySlot.y1, from.x2, categorySlot.y2);
            toSlot = new Box(to.x1, categorySlot.y1, to.x2, categorySlot.y2);
        } else {
            fromSlot = new Box(categorySlot.x1, from.y1, categorySlot.x2, from.y2);
            toSlot = new Box(categorySlot.x1, to.y1, categorySlot.x2, to.y2);
        }

        return {
            from: fromSlot,
            to: toSlot
        };
    };

    RangeAreaChart.prototype.addValue = function addValue (data, fields) {
        var valueFields = data.valueFields;
        if (!isNumber(valueFields.from)) {
            valueFields.from = valueFields.to;
        }

        if (!isNumber(valueFields.to)) {
            valueFields.to = valueFields.from;
        }

        CategoricalChart$$1.prototype.addValue.call(this, data, fields);
    };

    RangeAreaChart.prototype.updateRange = function updateRange (value, fields) {
        if (value !== null && isNumber(value.from) && isNumber(value.to)) {
            var axisName = fields.series.axis;
            var axisRange = this.valueAxisRanges[axisName] = this.valueAxisRanges[axisName] || { min: MAX_VALUE, max: MIN_VALUE };
            var from = value.from;
            var to = value.to;

            axisRange.min = Math.min(axisRange.min, from, to);
            axisRange.max = Math.max(axisRange.max, from, to);
        }
    };

    RangeAreaChart.prototype.formatPointValue = function formatPointValue (point, format) {
        var value = point.value;

        return this.chartService.format.auto(format, value.from, value.to);
    };

    RangeAreaChart.prototype.animationPoints = function animationPoints () {
        var points = this.points;
        var result = [];
        for (var idx = 0; idx < points.length; idx++) {
            var point = points[idx];
            if (point) {
                result.push((point.fromPoint || {}).marker);
                result.push((point.toPoint || {}).marker);
            }
        }

        return result.concat(this._segments);
    };

    return RangeAreaChart;
}(CategoricalChart));

deepExtend(RangeAreaChart.prototype, LineChartMixin, ClipAnimationMixin);

var OHLCPoint = (function (Candlestick$$1) {
    function OHLCPoint () {
        Candlestick$$1.apply(this, arguments);
    }

    if ( Candlestick$$1 ) OHLCPoint.__proto__ = Candlestick$$1;
    OHLCPoint.prototype = Object.create( Candlestick$$1 && Candlestick$$1.prototype );
    OHLCPoint.prototype.constructor = OHLCPoint;

    OHLCPoint.prototype.reflow = function reflow (box) {
        var ref = this;
        var options = ref.options;
        var value = ref.value;
        var chart = ref.owner;
        var valueAxis = chart.seriesValueAxis(options);
        var oPoints = [];
        var cPoints = [];
        var lhPoints = [];

        var lhSlot = valueAxis.getSlot(value.low, value.high);
        var oSlot = valueAxis.getSlot(value.open, value.open);
        var cSlot = valueAxis.getSlot(value.close, value.close);

        oSlot.x1 = cSlot.x1 = lhSlot.x1 = box.x1;
        oSlot.x2 = cSlot.x2 = lhSlot.x2 = box.x2;

        var mid = lhSlot.center().x;

        oPoints.push([ oSlot.x1, oSlot.y1 ]);
        oPoints.push([ mid, oSlot.y1 ]);
        cPoints.push([ mid, cSlot.y1 ]);
        cPoints.push([ cSlot.x2, cSlot.y1 ]);
        lhPoints.push([ mid, lhSlot.y1 ]);
        lhPoints.push([ mid, lhSlot.y2 ]);

        this.lines = [
            oPoints, cPoints, lhPoints
        ];

        this.box = lhSlot.clone().wrap(oSlot.clone().wrap(cSlot));

        this.reflowNote();
    };

    OHLCPoint.prototype.createBody = function createBody () {};

    return OHLCPoint;
}(Candlestick));

var OHLCChart = (function (CandlestickChart$$1) {
    function OHLCChart () {
        CandlestickChart$$1.apply(this, arguments);
    }

    if ( CandlestickChart$$1 ) OHLCChart.__proto__ = CandlestickChart$$1;
    OHLCChart.prototype = Object.create( CandlestickChart$$1 && CandlestickChart$$1.prototype );
    OHLCChart.prototype.constructor = OHLCChart;

    OHLCChart.prototype.pointType = function pointType () {
        return OHLCPoint;
    };

    return OHLCChart;
}(CandlestickChart));

var WaterfallSegment = (function (ChartElement$$1) {
    function WaterfallSegment(from, to, series) {
        ChartElement$$1.call(this);

        this.from = from;
        this.to = to;
        this.series = series;
    }

    if ( ChartElement$$1 ) WaterfallSegment.__proto__ = ChartElement$$1;
    WaterfallSegment.prototype = Object.create( ChartElement$$1 && ChartElement$$1.prototype );
    WaterfallSegment.prototype.constructor = WaterfallSegment;

    WaterfallSegment.prototype.linePoints = function linePoints () {
        var from = this.from;
        var ref = this;
        var fromBox = ref.from.box;
        var toBox = ref.to.box;
        var points = [];

        if (from.isVertical) {
            var y = from.aboveAxis ? fromBox.y1 : fromBox.y2;
            points.push(
                [ fromBox.x1, y ],
                [ toBox.x2, y ]
            );
        } else {
            var x = from.aboveAxis ? fromBox.x2 : fromBox.x1;
            points.push(
                [ x, fromBox.y1 ],
                [ x, toBox.y2 ]
            );
        }

        return points;
    };

    WaterfallSegment.prototype.createVisual = function createVisual () {
        ChartElement$$1.prototype.createVisual.call(this);

        var line = this.series.line || {};

        var path = _progress_kendoDrawing.drawing.Path.fromPoints(this.linePoints(), {
            stroke: {
                color: line.color,
                width: line.width,
                opacity: line.opacity,
                dashType: line.dashType
            }
        });

        alignPathToPixel(path);
        this.visual.append(path);
    };

    return WaterfallSegment;
}(ChartElement));

setDefaultOptions(WaterfallSegment, {
    animation: {
        type: FADEIN,
        delay: INITIAL_ANIMATION_DURATION
    }
});

var WaterfallChart = (function (BarChart$$1) {
    function WaterfallChart () {
        BarChart$$1.apply(this, arguments);
    }

    if ( BarChart$$1 ) WaterfallChart.__proto__ = BarChart$$1;
    WaterfallChart.prototype = Object.create( BarChart$$1 && BarChart$$1.prototype );
    WaterfallChart.prototype.constructor = WaterfallChart;

    WaterfallChart.prototype.render = function render () {
        BarChart$$1.prototype.render.call(this);
        this.createSegments();
    };

    WaterfallChart.prototype.traverseDataPoints = function traverseDataPoints (callback) {
        var this$1 = this;

        var series = this.options.series;
        var totalCategories = categoriesCount$1(series);
        var isVertical = !this.options.invertAxes;

        for (var seriesIx = 0; seriesIx < series.length; seriesIx++) {
            var currentSeries = series[seriesIx];
            var total = 0;
            var runningTotal = 0;

            for (var categoryIx = 0; categoryIx < totalCategories; categoryIx++) {
                var data = SeriesBinder.current.bindPoint(currentSeries, categoryIx);
                var value = data.valueFields.value;
                var summary = data.fields.summary;
                var from = total;
                var to = (void 0);

                if (summary) {
                    if (summary.toLowerCase() === "total") {
                        data.valueFields.value = total;
                        from = 0;
                        to = total;
                    } else {
                        data.valueFields.value = runningTotal;
                        to = from - runningTotal;
                        runningTotal = 0;
                    }
                } else if (isNumber(value)) {
                    runningTotal += value;
                    total += value;
                    to = total;
                }

                callback(data, {
                    category: this$1.categoryAxis.categoryAt(categoryIx),
                    categoryIx: categoryIx,
                    series: currentSeries,
                    seriesIx: seriesIx,
                    total: total,
                    runningTotal: runningTotal,
                    from: from,
                    to: to,
                    isVertical: isVertical
                });
            }
        }
    };

    WaterfallChart.prototype.updateRange = function updateRange (value, fields) {
        BarChart$$1.prototype.updateRange.call(this, { value: fields.to }, fields);
    };

    WaterfallChart.prototype.aboveAxis = function aboveAxis (point) {
        return point.value >= 0;
    };

    WaterfallChart.prototype.plotRange = function plotRange (point) {
        return [ point.from, point.to ];
    };

    WaterfallChart.prototype.createSegments = function createSegments () {
        var this$1 = this;

        var series = this.options.series;
        var seriesPoints = this.seriesPoints;
        var segments = this.segments = [];

        for (var seriesIx = 0; seriesIx < series.length; seriesIx++) {
            var currentSeries = series[seriesIx];
            var points = seriesPoints[seriesIx];

            if (points) {
                var prevPoint = (void 0);
                for (var pointIx = 0; pointIx < points.length; pointIx++) {
                    var point = points[pointIx];

                    if (point && prevPoint) {
                        var segment = new WaterfallSegment(prevPoint, point, currentSeries);
                        segments.push(segment);
                        this$1.append(segment);
                    }

                    prevPoint = point;
                }
            }
        }
    };

    return WaterfallChart;
}(BarChart));

var AREA_SERIES = [ AREA, VERTICAL_AREA, RANGE_AREA, VERTICAL_RANGE_AREA ];
var OUT_OF_RANGE_SERIES = [ LINE, VERTICAL_LINE ].concat(AREA_SERIES);

var CategoricalPlotArea = (function (PlotAreaBase$$1) {
    function CategoricalPlotArea () {
        PlotAreaBase$$1.apply(this, arguments);
    }

    if ( PlotAreaBase$$1 ) CategoricalPlotArea.__proto__ = PlotAreaBase$$1;
    CategoricalPlotArea.prototype = Object.create( PlotAreaBase$$1 && PlotAreaBase$$1.prototype );
    CategoricalPlotArea.prototype.constructor = CategoricalPlotArea;

    CategoricalPlotArea.prototype.initFields = function initFields (series) {
        var this$1 = this;

        this.namedCategoryAxes = {};
        this.namedValueAxes = {};
        this.valueAxisRangeTracker = new AxisGroupRangeTracker();

        if (series.length > 0) {
            this.invertAxes = inArray(
                series[0].type, [ BAR, BULLET, VERTICAL_LINE, VERTICAL_AREA, VERTICAL_RANGE_AREA,
                                 RANGE_BAR, HORIZONTAL_WATERFALL, VERTICAL_BOX_PLOT ]
            );

            for (var i = 0; i < series.length; i++) {
                var stack = series[i].stack;
                if (stack && stack.type === "100%") {
                    this$1.stack100 = true;
                    break;
                }
            }
        }

    };

    CategoricalPlotArea.prototype.render = function render (panes) {
        if ( panes === void 0 ) panes = this.panes;

        this.createCategoryAxes(panes);
        this.aggregateCategories(panes);
        this.createCategoryAxesLabels(panes);
        this.createCharts(panes);
        this.createValueAxes(panes);
    };

    CategoricalPlotArea.prototype.removeAxis = function removeAxis (axis) {
        var axisName = axis.options.name;

        PlotAreaBase$$1.prototype.removeAxis.call(this, axis);

        if (axis instanceof CategoryAxis) {
            delete this.namedCategoryAxes[axisName];
        } else {
            this.valueAxisRangeTracker.reset(axisName);
            delete this.namedValueAxes[axisName];
        }

        if (axis === this.categoryAxis) {
            delete this.categoryAxis;
        }

        if (axis === this.valueAxis) {
            delete this.valueAxis;
        }
    };

    CategoricalPlotArea.prototype.createCharts = function createCharts (panes) {
        var this$1 = this;

        var seriesByPane = this.groupSeriesByPane();

        for (var i = 0; i < panes.length; i++) {
            var pane = panes[i];
            var paneSeries = seriesByPane[pane.options.name || "default"] || [];
            this$1.addToLegend(paneSeries);

            var visibleSeries = this$1.filterVisibleSeries(paneSeries);
            if (!visibleSeries) {
                continue;
            }

            var groups = this$1.groupSeriesByCategoryAxis(visibleSeries);
            for (var groupIx = 0; groupIx < groups.length; groupIx++) {
                this$1.createChartGroup(groups[groupIx], pane);
            }
        }
    };

    CategoricalPlotArea.prototype.createChartGroup = function createChartGroup (series, pane) {
        this.createAreaChart(
            filterSeriesByType(series, [ AREA, VERTICAL_AREA ]), pane
        );

        this.createRangeAreaChart(
            filterSeriesByType(series, [ RANGE_AREA, VERTICAL_RANGE_AREA ]), pane
        );

        this.createBarChart(
            filterSeriesByType(series, [ COLUMN, BAR ]), pane
        );

        this.createRangeBarChart(
            filterSeriesByType(series, [ RANGE_COLUMN, RANGE_BAR ]), pane
        );

        this.createBulletChart(
            filterSeriesByType(series, [ BULLET, VERTICAL_BULLET ]), pane
        );

        this.createCandlestickChart(
            filterSeriesByType(series, CANDLESTICK), pane
        );

        this.createBoxPlotChart(
            filterSeriesByType(series, [ BOX_PLOT, VERTICAL_BOX_PLOT ]), pane
        );

        this.createOHLCChart(
            filterSeriesByType(series, OHLC), pane
        );

        this.createWaterfallChart(
            filterSeriesByType(series, [ WATERFALL, HORIZONTAL_WATERFALL ]), pane
        );

        this.createLineChart(
            filterSeriesByType(series, [ LINE, VERTICAL_LINE ]), pane
        );
    };

    CategoricalPlotArea.prototype.aggregateCategories = function aggregateCategories (panes) {
        var this$1 = this;

        var series = this.srcSeries || this.series;
        var processedSeries = [];
        this._currentPointsCache = {};
        this._seriesPointsCache = this._seriesPointsCache || {};

        for (var i = 0; i < series.length; i++) {
            var currentSeries = series[i];
            var categoryAxis = this$1.seriesCategoryAxis(currentSeries);
            var axisPane = this$1.findPane(categoryAxis.options.pane);
            var dateAxis = equalsIgnoreCase(categoryAxis.options.type, DATE);

            if ((dateAxis || currentSeries.categoryField) && inArray(axisPane, panes)) {
                currentSeries = this$1.aggregateSeries(currentSeries, categoryAxis);
            } else {
                currentSeries = this$1.filterSeries(currentSeries, categoryAxis);
            }

            processedSeries.push(currentSeries);
        }

        this._seriesPointsCache = this._currentPointsCache;
        this._currentPointsCache = null;

        this.srcSeries = series;
        this.series = processedSeries;
    };

    CategoricalPlotArea.prototype.filterSeries = function filterSeries (series, categoryAxis) {
        var dataLength = (series.data || {}).length;
        categoryAxis._seriesMax = Math.max(categoryAxis._seriesMax || 0, dataLength);

        if (!(isNumber(categoryAxis.options.min) || isNumber(categoryAxis.options.max))) {
            return series;
        }

        var range = categoryAxis.currentRangeIndices();
        var outOfRangePoints = inArray(series.type, OUT_OF_RANGE_SERIES);
        var currentSeries = deepExtend({}, series);

        currentSeries.data = (currentSeries.data || []).slice(range.min, range.max + 1);

        if (outOfRangePoints) {
            createOutOfRangePoints(currentSeries, range, dataLength, function (idx) { return ({
                item: series.data[idx],
                category: categoryAxis.categoryAt(idx, true),
                categoryIx: idx - range.min
            }); }, function (idx) { return defined(series.data[idx]); });
        }

        return currentSeries;
    };

    CategoricalPlotArea.prototype.clearSeriesPointsCache = function clearSeriesPointsCache () {
        this._seriesPointsCache = {};
    };

    CategoricalPlotArea.prototype.seriesSourcePoints = function seriesSourcePoints (series, categoryAxis) {
        var this$1 = this;

        var key = (series.index) + ";" + (categoryAxis.categoriesHash());
        if (this._seriesPointsCache[key]) {
            this._currentPointsCache[key] = this._seriesPointsCache[key];
            return this._seriesPointsCache[key];
        }

        var axisOptions = categoryAxis.options;
        var srcCategories = axisOptions.srcCategories;
        var dateAxis = equalsIgnoreCase(axisOptions.type, DATE);
        var srcData = series.data;
        var getFn = dateAxis ? getDateField : getField;
        var result = [];
        if (!dateAxis) {
            categoryAxis.mapCategories();//fixes major performance issue caused by searching for the index for large data
        }

        for (var idx = 0; idx < srcData.length; idx++) {
            var category = (void 0);
            if (series.categoryField) {
                category = getFn(series.categoryField, srcData[idx], this$1.chartService.intl);
            } else {
                category = srcCategories[idx];
            }

            if (defined(category) && category !== null) {
                var categoryIx = categoryAxis.totalIndex(category);
                result[categoryIx] = result[categoryIx] || { items: [], category: category };
                result[categoryIx].items.push(idx);
            }
        }

        this._currentPointsCache[key] = result;

        return result;
    };

    CategoricalPlotArea.prototype.aggregateSeries = function aggregateSeries (series, categoryAxis) {
        var srcData = series.data;
        if (!srcData.length) {
            return series;
        }

        var srcPoints = this.seriesSourcePoints(series, categoryAxis);
        var result = deepExtend({}, series);
        var aggregator = new SeriesAggregator(deepExtend({}, series), SeriesBinder.current, DefaultAggregates.current);
        var data = result.data = [];
        var dataItems = categoryAxis.options.dataItems || [];

        var range = categoryAxis.currentRangeIndices();
        var categoryItem = function (idx) {
            var categoryIdx = idx - range.min;
            var point = srcPoints[idx];
            if (!point) {
                point = srcPoints[idx] = {};
            }

            point.categoryIx = categoryIdx;

            if (!point.item) {
                var category = categoryAxis.categoryAt(idx, true);
                point.category = category;
                point.item = aggregator.aggregatePoints(point.items, category);
            }

            return point;
        };

        for (var idx = range.min; idx <= range.max; idx++) {
            var point = categoryItem(idx);
            data[point.categoryIx] = point.item;

            if (point.items && point.items.length) {
                dataItems[point.categoryIx] = point.item;
            }
        }

        if (inArray(result.type, OUT_OF_RANGE_SERIES)) {
            createOutOfRangePoints(result, range, categoryAxis.totalCount(), categoryItem, function (idx) { return srcPoints[idx]; });
        }

        categoryAxis.options.dataItems = dataItems;

        return result;
    };

    CategoricalPlotArea.prototype.appendChart = function appendChart (chart, pane) {
        var series = chart.options.series;
        var categoryAxis = this.seriesCategoryAxis(series[0]);
        var categories = categoryAxis.options.categories;
        var categoriesToAdd = Math.max(0, categoriesCount$1(series) - categories.length);

        if (categoriesToAdd > 0) {//consider setting an option to axis instead of adding fake categories
            categories = categoryAxis.options.categories = categoryAxis.options.categories.slice(0);
            while (categoriesToAdd--) {
                categories.push("");
            }
        }

        this.valueAxisRangeTracker.update(chart.valueAxisRanges);

        PlotAreaBase$$1.prototype.appendChart.call(this, chart, pane);
    };

    // TODO: Refactor, optionally use series.pane option
    CategoricalPlotArea.prototype.seriesPaneName = function seriesPaneName (series) {
        var options = this.options;
        var axisName = series.axis;
        var axisOptions = [].concat(options.valueAxis);
        var axis = grep(axisOptions, function(a) { return a.name === axisName; })[0];
        var panes = options.panes || [ {} ];
        var defaultPaneName = (panes[0] || {}).name || "default";
        var paneName = (axis || {}).pane || defaultPaneName;

        return paneName;
    };

    CategoricalPlotArea.prototype.seriesCategoryAxis = function seriesCategoryAxis (series) {
        var axisName = series.categoryAxis;
        var axis = axisName ? this.namedCategoryAxes[axisName] : this.categoryAxis;

        if (!axis) {
            throw new Error("Unable to locate category axis with name " + axisName);
        }

        return axis;
    };

    CategoricalPlotArea.prototype.stackableChartOptions = function stackableChartOptions (firstSeries, pane) {
        var stack = firstSeries.stack;
        var isStacked100 = stack && stack.type === "100%";
        var clip = pane.options.clip;

        return {
            isStacked: stack,
            isStacked100: isStacked100,
            clip: clip
        };
    };

    CategoricalPlotArea.prototype.groupSeriesByCategoryAxis = function groupSeriesByCategoryAxis (series) {
        var categoryAxes = [];
        var unique = {};
        for (var idx = 0; idx < series.length; idx++) {
            var name = series[idx].categoryAxis || "$$default$$";
            if (!unique.hasOwnProperty(name)) {
                unique[name] = true;
                categoryAxes.push(name);
            }
        }

        var groups = [];
        for (var axisIx = 0; axisIx < categoryAxes.length; axisIx++) {
            var axis = categoryAxes[axisIx];
            var axisSeries = groupSeries(series, axis, axisIx);
            if (axisSeries.length === 0) {
                continue;
            }

            groups.push(axisSeries);
        }

        return groups;
    };

    CategoricalPlotArea.prototype.createBarChart = function createBarChart (series, pane) {
        if (series.length === 0) {
            return;
        }

        var firstSeries = series[0];
        var barChart = new BarChart(this, Object.assign({
            series: series,
            invertAxes: this.invertAxes,
            gap: firstSeries.gap,
            spacing: firstSeries.spacing
        }, this.stackableChartOptions(firstSeries, pane)));

        this.appendChart(barChart, pane);
    };

    CategoricalPlotArea.prototype.createRangeBarChart = function createRangeBarChart (series, pane) {
        if (series.length === 0) {
            return;
        }

        var firstSeries = series[0];
        var rangeColumnChart = new RangeBarChart(this, {
            series: series,
            invertAxes: this.invertAxes,
            gap: firstSeries.gap,
            spacing: firstSeries.spacing
        });

        this.appendChart(rangeColumnChart, pane);
    };

    CategoricalPlotArea.prototype.createBulletChart = function createBulletChart (series, pane) {
        if (series.length === 0) {
            return;
        }

        var firstSeries = series[0];
        var bulletChart = new BulletChart(this, {
            series: series,
            invertAxes: this.invertAxes,
            gap: firstSeries.gap,
            spacing: firstSeries.spacing,
            clip: pane.options.clip
        });

        this.appendChart(bulletChart, pane);
    };

    CategoricalPlotArea.prototype.createLineChart = function createLineChart (series, pane) {
        if (series.length === 0) {
            return;
        }

        var firstSeries = series[0];
        var lineChart = new LineChart(this, Object.assign({
            invertAxes: this.invertAxes,
            series: series
        }, this.stackableChartOptions(firstSeries, pane)));

        this.appendChart(lineChart, pane);
    };

    CategoricalPlotArea.prototype.createAreaChart = function createAreaChart (series, pane) {
        if (series.length === 0) {
            return;
        }

        var firstSeries = series[0];
        var areaChart = new AreaChart(this, Object.assign({
            invertAxes: this.invertAxes,
            series: series
        }, this.stackableChartOptions(firstSeries, pane)));

        this.appendChart(areaChart, pane);
    };

    CategoricalPlotArea.prototype.createRangeAreaChart = function createRangeAreaChart (series, pane) {
        if (series.length === 0) {
            return;
        }

        var rangeAreaChart = new RangeAreaChart(this, {
            invertAxes: this.invertAxes,
            series: series,
            clip: pane.options.clip
        });

        this.appendChart(rangeAreaChart, pane);
    };

    CategoricalPlotArea.prototype.createOHLCChart = function createOHLCChart (series, pane) {
        if (series.length === 0) {
            return;
        }

        var firstSeries = series[0];
        var chart = new OHLCChart(this, {
            invertAxes: this.invertAxes,
            gap: firstSeries.gap,
            series: series,
            spacing: firstSeries.spacing,
            clip: pane.options.clip
        });

        this.appendChart(chart, pane);
    };

    CategoricalPlotArea.prototype.createCandlestickChart = function createCandlestickChart (series, pane) {
        if (series.length === 0) {
            return;
        }

        var firstSeries = series[0];
        var chart = new CandlestickChart(this, {
            invertAxes: this.invertAxes,
            gap: firstSeries.gap,
            series: series,
            spacing: firstSeries.spacing,
            clip: pane.options.clip
        });

        this.appendChart(chart, pane);
    };

    CategoricalPlotArea.prototype.createBoxPlotChart = function createBoxPlotChart (series, pane) {
        if (series.length === 0) {
            return;
        }

        var firstSeries = series[0];
        var chart = new BoxPlotChart(this, {
            invertAxes: this.invertAxes,
            gap: firstSeries.gap,
            series: series,
            spacing: firstSeries.spacing,
            clip: pane.options.clip
        });

        this.appendChart(chart, pane);
    };

    CategoricalPlotArea.prototype.createWaterfallChart = function createWaterfallChart (series, pane) {
        if (series.length === 0) {
            return;
        }

        var firstSeries = series[0];
        var waterfallChart = new WaterfallChart(this, {
            series: series,
            invertAxes: this.invertAxes,
            gap: firstSeries.gap,
            spacing: firstSeries.spacing
        });

        this.appendChart(waterfallChart, pane);
    };

    CategoricalPlotArea.prototype.axisRequiresRounding = function axisRequiresRounding (categoryAxisName, categoryAxisIndex) {
        var this$1 = this;

        var centeredSeries = filterSeriesByType(this.series, EQUALLY_SPACED_SERIES);

        for (var seriesIx = 0; seriesIx < this.series.length; seriesIx++) {
            var currentSeries = this$1.series[seriesIx];
            if (inArray(currentSeries.type, AREA_SERIES)) {
                var line = currentSeries.line;
                if (line && line.style === STEP) {
                    centeredSeries.push(currentSeries);
                }
            }
        }

        for (var seriesIx$1 = 0; seriesIx$1 < centeredSeries.length; seriesIx$1++) {
            var seriesAxis = centeredSeries[seriesIx$1].categoryAxis || "";
            if (seriesAxis === categoryAxisName || (!seriesAxis && categoryAxisIndex === 0)) {
                return true;
            }
        }
    };

    CategoricalPlotArea.prototype.aggregatedAxis = function aggregatedAxis (categoryAxisName, categoryAxisIndex) {
        var series = this.series;

        for (var seriesIx = 0; seriesIx < series.length; seriesIx++) {
            var seriesAxis = series[seriesIx].categoryAxis || "";
            if ((seriesAxis === categoryAxisName || (!seriesAxis && categoryAxisIndex === 0)) && series[seriesIx].categoryField) {
                return true;
            }
        }
    };

    CategoricalPlotArea.prototype.createCategoryAxesLabels = function createCategoryAxesLabels () {
        var axes = this.axes;
        for (var i = 0; i < axes.length; i++) {
            if (axes[i] instanceof CategoryAxis) {
                axes[i].createLabels();
            }
        }
    };

    CategoricalPlotArea.prototype.createCategoryAxes = function createCategoryAxes (panes) {
        var this$1 = this;

        var invertAxes = this.invertAxes;
        var definitions = [].concat(this.options.categoryAxis);
        var axes = [];

        for (var i = 0; i < definitions.length; i++) {
            var axisOptions = definitions[i];
            var axisPane = this$1.findPane(axisOptions.pane);

            if (inArray(axisPane, panes)) {
                var name = axisOptions.name;
                var categories = axisOptions.categories; if ( categories === void 0 ) categories = [];
                axisOptions = deepExtend({
                    vertical: invertAxes,
                    reverse: !invertAxes && this$1.chartService.rtl,
                    axisCrossingValue: invertAxes ? MAX_VALUE : 0
                }, axisOptions);

                if (!defined(axisOptions.justified)) {
                    axisOptions.justified = this$1.isJustified();
                }

                if (this$1.axisRequiresRounding(name, i)) {
                    axisOptions.justified = false;
                }

                var categoryAxis = (void 0);

                if (isDateAxis(axisOptions, categories[0])) {
                    categoryAxis = new DateCategoryAxis(axisOptions, this$1.chartService);
                } else {
                    categoryAxis = new CategoryAxis(axisOptions, this$1.chartService);
                }

                definitions[i].categories = categoryAxis.options.srcCategories;

                if (name) {
                    if (this$1.namedCategoryAxes[name]) {
                        throw new Error(("Category axis with name " + name + " is already defined"));
                    }
                    this$1.namedCategoryAxes[name] = categoryAxis;
                }

                categoryAxis.axisIndex = i;
                axes.push(categoryAxis);
                this$1.appendAxis(categoryAxis);
            }
        }

        var primaryAxis = this.categoryAxis || axes[0];
        this.categoryAxis = primaryAxis;

        if (invertAxes) {
            this.axisY = primaryAxis;
        } else {
            this.axisX = primaryAxis;
        }
    };

    CategoricalPlotArea.prototype.isJustified = function isJustified () {
        var series = this.series;

        for (var i = 0; i < series.length; i++) {
            var currentSeries = series[i];
            if (!inArray(currentSeries.type, AREA_SERIES)) {
                return false;
            }
        }

        return true;
    };

    CategoricalPlotArea.prototype.createValueAxes = function createValueAxes (panes) {
        var this$1 = this;

        var tracker = this.valueAxisRangeTracker;
        var defaultRange = tracker.query();
        var definitions = [].concat(this.options.valueAxis);
        var invertAxes = this.invertAxes;
        var baseOptions = { vertical: !invertAxes, reverse: invertAxes && this.chartService.rtl };
        var axes = [];

        if (this.stack100) {
            baseOptions.roundToMajorUnit = false;
            baseOptions.labels = { format: "P0" };
        }

        for (var i = 0; i < definitions.length; i++) {
            var axisOptions = definitions[i];
            var axisPane = this$1.findPane(axisOptions.pane);

            if (inArray(axisPane, panes)) {
                var name = axisOptions.name;
                var defaultAxisRange = equalsIgnoreCase(axisOptions.type, LOGARITHMIC) ? { min: 0.1, max: 1 } : { min: 0, max: 1 };
                var range = tracker.query(name) || defaultRange || defaultAxisRange;

                if (i === 0 && range && defaultRange) {
                    range.min = Math.min(range.min, defaultRange.min);
                    range.max = Math.max(range.max, defaultRange.max);
                }

                var axisType = (void 0);
                if (equalsIgnoreCase(axisOptions.type, LOGARITHMIC)) {
                    axisType = LogarithmicAxis;
                } else {
                    axisType = NumericAxis;
                }

                var valueAxis = new axisType(range.min, range.max,
                    deepExtend({}, baseOptions, axisOptions),
                    this$1.chartService
                );

                if (name) {
                    if (this$1.namedValueAxes[name]) {
                        throw new Error(("Value axis with name " + name + " is already defined"));
                    }
                    this$1.namedValueAxes[name] = valueAxis;
                }
                valueAxis.axisIndex = i;

                axes.push(valueAxis);
                this$1.appendAxis(valueAxis);
            }
        }

        var primaryAxis = this.valueAxis || axes[0];
        this.valueAxis = primaryAxis;

        if (invertAxes) {
            this.axisX = primaryAxis;
        } else {
            this.axisY = primaryAxis;
        }
    };

    CategoricalPlotArea.prototype._dispatchEvent = function _dispatchEvent (chart, e, eventType) {
        var coords = chart._eventCoordinates(e);
        var point = new Point(coords.x, coords.y);
        var pane = this.pointPane(point);
        var categories = [];
        var values = [];

        if (!pane) {
            return;
        }

        var allAxes = pane.axes;
        for (var i = 0; i < allAxes.length; i++) {
            var axis = allAxes[i];
            if (axis.getValue) {
                appendIfNotNull(values, axis.getValue(point));
            } else {
                appendIfNotNull(categories, axis.getCategory(point));
            }
        }

        if (categories.length === 0) {
            appendIfNotNull(categories, this.categoryAxis.getCategory(point));
        }

        if (categories.length > 0 && values.length > 0) {
            chart.trigger(eventType, {
                element: eventElement(e),
                originalEvent: e,
                category: singleItemOrArray(categories),
                value: singleItemOrArray(values)
            });
        }
    };

    CategoricalPlotArea.prototype.pointPane = function pointPane (point) {
        var panes = this.panes;

        for (var i = 0; i < panes.length; i++) {
            var currentPane = panes[i];
            if (currentPane.contentBox.containsPoint(point)) {
                return currentPane;
            }
        }
    };

    CategoricalPlotArea.prototype.updateAxisOptions = function updateAxisOptions$1 (axis, options) {
        updateAxisOptions(this.options, axis, options);
        updateAxisOptions(this.originalOptions, axis, options);
    };

    return CategoricalPlotArea;
}(PlotAreaBase));

function updateAxisOptions(targetOptions, axis, options) {
    var axesOptions = axis instanceof CategoryAxis ? [].concat(targetOptions.categoryAxis) : [].concat(targetOptions.valueAxis);
    deepExtend(axesOptions[axis.axisIndex], options);
}

function groupSeries(series, axis, axisIx) {
    return grep(series, function(s) {
        return (axisIx === 0 && !s.categoryAxis) || (s.categoryAxis === axis);
    });
}

setDefaultOptions(CategoricalPlotArea, {
    categoryAxis: {},
    valueAxis: {}
});

deepExtend(CategoricalPlotArea.prototype, PlotAreaEventsMixin);

var Highlight = (function (Class$$1) {
    function Highlight() {
        Class$$1.call(this);

        this._points = [];
    }

    if ( Class$$1 ) Highlight.__proto__ = Class$$1;
    Highlight.prototype = Object.create( Class$$1 && Class$$1.prototype );
    Highlight.prototype.constructor = Highlight;

    Highlight.prototype.destroy = function destroy () {
        this._points = [];
    };

    Highlight.prototype.show = function show (points, opacity) {
        var this$1 = this;

        var arrayPoints = [].concat(points);
        this.hide();

        for (var i = 0; i < arrayPoints.length; i++) {
            var point = arrayPoints[i];
            if (point && point.toggleHighlight && point.hasHighlight()) {
                this$1.togglePointHighlight(point, true, opacity);
                this$1._points.push(point);
            }
        }
    };

    Highlight.prototype.togglePointHighlight = function togglePointHighlight (point, show, opacity) {
        var toggleHandler = (point.options.highlight || {}).toggle;
        if (toggleHandler) {
            var eventArgs = {
                category: point.category,
                series: point.series,
                dataItem: point.dataItem,
                value: point.value,
                stackValue: point.stackValue,
                preventDefault: preventDefault,
                visual: point.highlightVisual(),
                show: show
            };
            toggleHandler(eventArgs);
            if (!eventArgs._defaultPrevented) {
                point.toggleHighlight(show, opacity);
            }
        } else {
            point.toggleHighlight(show, opacity);
        }
    };

    Highlight.prototype.hide = function hide () {
        var this$1 = this;

        var points = this._points;
        while (points.length) {
            this$1.togglePointHighlight(points.pop(), false);
        }
    };

    Highlight.prototype.isHighlighted = function isHighlighted (element) {
        var points = this._points;

        for (var i = 0; i < points.length; i++) {
            var point = points[i];
            if (element === point) {
                return true;
            }
        }

        return false;
    };

    return Highlight;
}(_progress_kendoDrawing.Class));

function preventDefault() {
    this._defaultPrevented = true;
}

function acceptKey(e, mouseKey) {
    var key = (mouseKey || "").toLowerCase();
    var event = e.event;
    var accept = (key === "none" && !(event.ctrlKey || event.shiftKey || event.altKey)) || event[key + "Key"];

    return accept;
}

function toChartAxisRanges(axisRanges) {
    var ranges = {};
    for (var idx = 0; idx < axisRanges.length; idx++) {
        var axisRange = axisRanges[idx];
        if (axisRange.axis.options.name) {
            ranges[axisRange.axis.options.name] = {
                min: axisRange.range.min,
                max: axisRange.range.max
            };
        }
    }
    return ranges;
}

var Pannable = (function (Class$$1) {
    function Pannable(plotArea, options) {
        Class$$1.call(this);

        this.plotArea = plotArea;
        this.options = deepExtend({}, this.options, options);
    }

    if ( Class$$1 ) Pannable.__proto__ = Class$$1;
    Pannable.prototype = Object.create( Class$$1 && Class$$1.prototype );
    Pannable.prototype.constructor = Pannable;

    Pannable.prototype.start = function start (e) {
        this._active = acceptKey(e, this.options.key);
        return this._active;
    };

    Pannable.prototype.move = function move (e) {
        if (this._active) {
            var axisRanges = this.axisRanges = this._panAxes(e, X).concat(this._panAxes(e, Y));
            if (axisRanges.length) {
                this.axisRanges = axisRanges;
                return toChartAxisRanges(axisRanges);
            }
        }
    };

    Pannable.prototype.end = function end () {
        var active = this._active;
        this._active = false;

        return active;
    };

    Pannable.prototype.pan = function pan () {
        var ref = this;
        var plotArea = ref.plotArea;
        var axisRanges = ref.axisRanges;
        if (axisRanges.length) {
            for (var idx = 0; idx < axisRanges.length; idx++) {
                var range = axisRanges[idx];
                plotArea.updateAxisOptions(range.axis, range.range);
            }
            plotArea.redraw(plotArea.panes);
        }
    };

    Pannable.prototype.destroy = function destroy () {
        delete this.plotArea;
    };

    Pannable.prototype._panAxes = function _panAxes (e, position) {
        var plotArea = this.plotArea;
        var delta = -e[position].delta;
        var lock = (this.options.lock || "").toLowerCase();
        var updatedAxes = [];

        if (delta !== 0 && (lock || "").toLowerCase() !== position) {
            var axes = plotArea.axes;
            for (var idx = 0; idx < axes.length; idx++) {
                var axis = axes[idx];

                if (position === X && !axis.options.vertical || position === Y && axis.options.vertical) {
                    var range = axis.pan(delta);

                    if (range) {
                        range.limitRange = true;
                        updatedAxes.push({
                            axis: axis,
                            range: range
                        });
                    }
                }
            }
        }

        return updatedAxes;
    };

    return Pannable;
}(_progress_kendoDrawing.Class));

Pannable.prototype.options = {
    key: "none",
    lock: "none"
};

var ZoomSelection = (function (Class$$1) {
    function ZoomSelection(chart, options) {
        Class$$1.call(this);

        this.chart = chart;
        this.options = deepExtend({}, this.options, options);
        this.createElement();
    }

    if ( Class$$1 ) ZoomSelection.__proto__ = Class$$1;
    ZoomSelection.prototype = Object.create( Class$$1 && Class$$1.prototype );
    ZoomSelection.prototype.constructor = ZoomSelection;

    ZoomSelection.prototype.createElement = function createElement () {
        var marquee = this._marquee = document.createElement("div");
        marquee.className = "k-marquee";
        var marqueeColor = document.createElement("div");
        marqueeColor.className = "k-marquee-color";
        marquee.appendChild(marqueeColor);
    };

    ZoomSelection.prototype.removeElement = function removeElement () {
        if (this._marquee.parentNode) {
            this._marquee.parentNode.removeChild(this._marquee);
        }
    };

    ZoomSelection.prototype.setStyles = function setStyles (styles) {
        elementStyles(this._marquee, styles);
    };

    ZoomSelection.prototype.start = function start (e) {
        if (acceptKey(e, this.options.key)) {
            var chart = this.chart;
            var point = chart._eventCoordinates(e);
            var zoomPane = this._zoomPane = chart._plotArea.paneByPoint(point);
            var clipBox = zoomPane ? zoomPane.chartsBox().clone() : null;

            if (zoomPane && clipBox) {
                var offset = this._elementOffset();

                clipBox.translate(offset.left, offset.top);
                this._zoomPaneClipBox = clipBox;

                document.body.appendChild(this._marquee);
                this.setStyles({
                    left: e.pageX + 1,
                    top: e.pageY + 1,
                    width: 0,
                    height: 0
                });

                return true;
            }
        }
        return false;
    };

    ZoomSelection.prototype._elementOffset = function _elementOffset () {
        var chartElement = this.chart.element;
        var ref = elementStyles(chartElement, [ "paddingLeft", "paddingTop" ]);
        var paddingLeft = ref.paddingLeft;
        var paddingTop = ref.paddingTop;
        var offset = elementOffset(chartElement);

        return {
            left: paddingLeft + offset.left,
            top: paddingTop + offset.top
        };
    };

    ZoomSelection.prototype.move = function move (e) {
        var zoomPane = this._zoomPane;
        if (zoomPane) {
            this.setStyles(this._selectionPosition(e));
        }
    };

    ZoomSelection.prototype.end = function end (e) {
        var zoomPane = this._zoomPane;
        if (zoomPane) {
            var elementOffset$$1 = this._elementOffset();
            var selectionPosition = this._selectionPosition(e);
            selectionPosition.left -= elementOffset$$1.left;
            selectionPosition.top -= elementOffset$$1.top;

            var start = { x: selectionPosition.left, y: selectionPosition.top };
            var end = { x: selectionPosition.left + selectionPosition.width, y: selectionPosition.top + selectionPosition.height };
            this._updateAxisRanges(start, end);

            this.removeElement();
            delete this._zoomPane;

            return toChartAxisRanges(this.axisRanges);
        }
    };

    ZoomSelection.prototype.zoom = function zoom () {
        var axisRanges = this.axisRanges;
        if (axisRanges && axisRanges.length) {
            var plotArea = this.chart._plotArea;
            for (var idx = 0; idx < axisRanges.length; idx++) {
                var axisRange = axisRanges[idx];
                plotArea.updateAxisOptions(axisRange.axis, axisRange.range);
            }
            plotArea.redraw(plotArea.panes);
        }
    };

    ZoomSelection.prototype.destroy = function destroy () {
        this.removeElement();
        delete this._marquee;
        delete this.chart;
    };

    ZoomSelection.prototype._updateAxisRanges = function _updateAxisRanges (start, end) {
        var lock = (this.options.lock || "").toLowerCase();
        var axisRanges = [];

        var axes = this._zoomPane.axes;
        for (var idx = 0; idx < axes.length; idx++) {
            var axis = axes[idx];
            var vertical = axis.options.vertical;
            if (!(lock === X && !vertical) && !(lock === Y && vertical) && defined(axis.axisIndex)) {
                var range = axis.pointsRange(start, end);
                if (range) {
                    axisRanges.push({
                        axis: axis,
                        range: range
                    });
                }
            }
        }

        this.axisRanges = axisRanges;
    };

    ZoomSelection.prototype._selectionPosition = function _selectionPosition (e) {
        var clipBox = this._zoomPaneClipBox;
        var startLocation = {
            x: e.x.startLocation,
            y: e.y.startLocation
        };
        var pageX = e.x.location;
        var pageY = e.y.location;
        var lock = (this.options.lock || "").toLowerCase();
        var left = Math.min(startLocation.x, pageX);
        var top = Math.min(startLocation.y, pageY);
        var width = Math.abs(startLocation.x - pageX);
        var height = Math.abs(startLocation.y - pageY);

        if (lock === X) {
            left = clipBox.x1;
            width = clipBox.width();
        }
        if (lock === Y) {
            top = clipBox.y1;
            height = clipBox.height();
        }

        if (pageX > clipBox.x2) {
            width = clipBox.x2 - startLocation.x;
        }

        if (pageX < clipBox.x1) {
            width = startLocation.x - clipBox.x1;
        }

        if (pageY > clipBox.y2) {
            height = clipBox.y2 - startLocation.y;
        }

        if (pageY < clipBox.y1) {
            height = startLocation.y - clipBox.y1;
        }

        return {
            left: Math.max(left, clipBox.x1),
            top: Math.max(top, clipBox.y1),
            width: width,
            height: height
        };
    };

    return ZoomSelection;
}(_progress_kendoDrawing.Class));

ZoomSelection.prototype.options = {
    key: "shift",
    lock: "none"
};

var MousewheelZoom = (function (Class$$1) {
    function MousewheelZoom(chart, options) {
        Class$$1.call(this);

        this.chart = chart;
        this.options = deepExtend({}, this.options, options);
    }

    if ( Class$$1 ) MousewheelZoom.__proto__ = Class$$1;
    MousewheelZoom.prototype = Object.create( Class$$1 && Class$$1.prototype );
    MousewheelZoom.prototype.constructor = MousewheelZoom;

    MousewheelZoom.prototype.updateRanges = function updateRanges (delta) {
        var lock = (this.options.lock || "").toLowerCase();
        var axisRanges = [];
        var axes = this.chart._plotArea.axes;

        for (var idx = 0; idx < axes.length; idx++) {
            var axis = axes[idx];
            var vertical = axis.options.vertical;

            if (!(lock === X && !vertical) && !(lock === Y && vertical) && axis.zoomRange) {
                var range = axis.zoomRange(-delta);

                if (range) {
                    axisRanges.push({
                        axis: axis,
                        range: range
                    });
                }
            }
        }

        this.axisRanges = axisRanges;
        return toChartAxisRanges(axisRanges);
    };

    MousewheelZoom.prototype.zoom = function zoom () {
        var axisRanges = this.axisRanges;
        var plotArea = this.chart._plotArea;

        if (axisRanges && axisRanges.length && plotArea.updateAxisOptions) {
            for (var idx = 0; idx < axisRanges.length; idx++) {
                var axisRange = axisRanges[idx];
                plotArea.updateAxisOptions(axisRange.axis, axisRange.range);
            }
            plotArea.redraw(plotArea.panes);
        }
    };

    MousewheelZoom.prototype.destroy = function destroy () {
        delete this.chart;
    };

    return MousewheelZoom;
}(_progress_kendoDrawing.Class));

var LegendLayout = (function (ChartElement$$1) {
    function LegendLayout(options, chartService) {
        ChartElement$$1.call(this, options);

        this.chartService = chartService;
    }

    if ( ChartElement$$1 ) LegendLayout.__proto__ = ChartElement$$1;
    LegendLayout.prototype = Object.create( ChartElement$$1 && ChartElement$$1.prototype );
    LegendLayout.prototype.constructor = LegendLayout;

    LegendLayout.prototype.render = function render () {
        var ref = this;
        var children = ref.children;
        var options = ref.options;
        var vertical = options.vertical;

        this.visual = new _progress_kendoDrawing.drawing.Layout(null, {
            spacing: vertical ? 0 : options.spacing,
            lineSpacing: vertical ? options.spacing : 0,
            orientation: vertical ? "vertical" : "horizontal",
            reverse: options.rtl,
            alignItems: vertical ? "start" : "center"
        });

        for (var idx = 0; idx < children.length; idx++) {
            var legendItem = children[idx];
            legendItem.reflow(new Box());
            legendItem.renderVisual();
        }
    };

    LegendLayout.prototype.reflow = function reflow (box) {
        this.visual.rect(box.toRect());
        this.visual.reflow();
        var bbox = this.visual.clippedBBox();

        if (bbox) {
            this.box = rectToBox(bbox);
        } else {
            this.box = new Box();
        }
    };

    LegendLayout.prototype.renderVisual = function renderVisual () {
        this.addVisual();
    };

    LegendLayout.prototype.createVisual = function createVisual () {};

    return LegendLayout;
}(ChartElement));

var LegendItem = (function (BoxElement$$1) {
    function LegendItem(options) {
        BoxElement$$1.call(this, options);

        this.createContainer();
        if (!options.rtl) {
            this.createMarker();
            this.createLabel();
        } else {
            this.createLabel();
            this.createMarker();
        }
    }

    if ( BoxElement$$1 ) LegendItem.__proto__ = BoxElement$$1;
    LegendItem.prototype = Object.create( BoxElement$$1 && BoxElement$$1.prototype );
    LegendItem.prototype.constructor = LegendItem;

    LegendItem.prototype.createContainer = function createContainer () {
        this.container = new FloatElement({ vertical: false, wrap: false, align: CENTER, spacing: this.options.spacing });
        this.append(this.container);
    };

    LegendItem.prototype.createMarker = function createMarker () {
        this.container.append(new ShapeElement(this.markerOptions()));
    };

    LegendItem.prototype.markerOptions = function markerOptions () {
        var options = this.options;
        var markerColor = options.markerColor;
        return deepExtend({}, options.markers, {
            background: markerColor,
            border: {
                color: markerColor
            }
        });
    };

    LegendItem.prototype.createLabel = function createLabel () {
        var options = this.options;
        var labelOptions = deepExtend({}, options.labels);

        this.container.append(new TextBox(options.text, labelOptions));
    };

    LegendItem.prototype.renderComplete = function renderComplete () {
        BoxElement$$1.prototype.renderComplete.call(this);

        var cursor = this.options.cursor || {};
        var eventSink = this._itemOverlay = _progress_kendoDrawing.drawing.Path.fromRect(this.container.box.toRect(), {
            fill: {
                color: WHITE,
                opacity: 0
            },
            stroke: null,
            cursor: cursor.style || cursor
        });

        this.appendVisual(eventSink);
    };

    LegendItem.prototype.click = function click (widget, e) {
        var args = this.eventArgs(e);

        if (!widget.trigger(LEGEND_ITEM_CLICK, args) && e && e.type === 'contextmenu') {
            e.preventDefault();
        }
    };

    LegendItem.prototype.over = function over (widget, e) {
        var args = this.eventArgs(e);

        if (!widget.trigger(LEGEND_ITEM_HOVER, args)) {
            widget._legendItemHover(args.seriesIndex, args.pointIndex);
        }

        // Don't trigger point hover for legend items
        return true;
    };

    LegendItem.prototype.out = function out (widget, e) {
        widget._unsetActivePoint();

        widget.trigger(LEGEND_ITEM_LEAVE, this.eventArgs(e));
    };

    LegendItem.prototype.eventArgs = function eventArgs (e) {
        var options = this.options;

        return {
            element: eventElement(e),
            text: options.text,
            series: options.series,
            seriesIndex: options.series.index,
            pointIndex: options.pointIndex
        };
    };

    LegendItem.prototype.renderVisual = function renderVisual () {
        var this$1 = this;

        var options = this.options;
        var customVisual = options.visual;

        if (customVisual) {
            this.visual = customVisual({
                active: options.active,
                series: options.series,
                sender: this.getSender(),
                pointIndex: options.pointIndex,
                options: {
                    markers: this.markerOptions(),
                    labels: options.labels
                },
                createVisual: function () {
                    this$1.createVisual();
                    this$1.renderChildren();
                    this$1.renderComplete();

                    var defaultVisual = this$1.visual;

                    delete this$1.visual;

                    return defaultVisual;
                }
            });
            this.addVisual();
        } else {
            BoxElement$$1.prototype.renderVisual.call(this);
        }
    };

    return LegendItem;
}(BoxElement));

var HORIZONTAL = "horizontal";
var POINTER = "pointer";
var CUSTOM = "custom";

var Legend = (function (ChartElement$$1) {
    function Legend(options, chartService) {
        if ( chartService === void 0 ) chartService = {};

        ChartElement$$1.call(this, options);

        this.chartService = chartService;

        if (!inArray(this.options.position, [ TOP, RIGHT, BOTTOM, LEFT, CUSTOM ])) {
            this.options.position = RIGHT;
        }

        this.createContainers();

        this.createLegendTitle(options.title);

        this.createItems();
    }

    if ( ChartElement$$1 ) Legend.__proto__ = ChartElement$$1;
    Legend.prototype = Object.create( ChartElement$$1 && ChartElement$$1.prototype );
    Legend.prototype.constructor = Legend;

    Legend.prototype.createContainers = function createContainers () {
        var options = this.options;
        var position = options.position;
        var userAlign = options.align;
        var align = position;
        var vAlign = CENTER;

        if (position === CUSTOM) {
            align = LEFT;
        } else if (inArray(position, [ TOP, BOTTOM ])) {
            if (userAlign === "start") {
                align = LEFT;
            } else if (userAlign === "end") {
                align = RIGHT;
            } else {
                align = CENTER;
            }
            vAlign = position;
        } else if (userAlign) {
            if (userAlign === "start") {
                vAlign = TOP;
            } else if (userAlign === "end") {
                vAlign = BOTTOM;
            }
        }

        this.container = new BoxElement({
            margin: options.margin,
            padding: options.padding,
            background: options.background,
            border: options.border,
            vAlign: vAlign,
            align: align,
            zIndex: options.zIndex,
            shrinkToFit: true
        });

        if (this.hasTitle()) {
            this.itemsContainer = new BoxElement({
                vAlign: vAlign,
                align: align,
                zIndex: options.zIndex,
                shrinkToFit: true
            });
        } else {
            this.itemsContainer = this.container;
        }

        this.append(this.container);
    };

    Legend.prototype.createItems = function createItems () {
        var chartService = this.getService();
        var options = this.options;
        var vertical = this.isVertical();
        var innerElement = new LegendLayout({
            vertical: vertical,
            spacing: options.spacing,
            rtl: chartService.rtl
        }, chartService);
        var items = options.items;

        if (options.reverse) {
            items = items.slice(0).reverse();
        }

        var count = items.length;

        for (var i = 0; i < count; i++) {
            var item = items[i];

            innerElement.append(new LegendItem(deepExtend({}, {
                markers: options.markers,
                labels: options.labels,
                rtl: chartService.rtl
            }, options.item, item)));
        }

        innerElement.render();
        this.itemsContainer.append(innerElement);
    };

    Legend.prototype.isVertical = function isVertical () {
        var ref = this.options;
        var orientation = ref.orientation;
        var position = ref.position;
        var vertical = (position === CUSTOM && orientation !== HORIZONTAL) ||
               (defined(orientation) ? orientation !== HORIZONTAL : inArray(position, [ LEFT, RIGHT ]));

        return vertical;
    };

    Legend.prototype.hasItems = function hasItems () {
        return this.container.children[0].children.length > 0;
    };

    Legend.prototype.reflow = function reflow (targetBox) {
        var options = this.options;
        var legendBox = targetBox.clone();

        if (!this.hasItems()) {
            this.box = legendBox;
            return;
        }

        if (options.position === CUSTOM) {
            this.containerCustomReflow(legendBox);
            this.box = legendBox;
        } else {
            this.containerReflow(legendBox);
        }

        if (this.hasTitle()) {
            this.title.reflow(new Box(this.container.box.x1, this.title.box.y1, this.container.box.x2, this.title.box.y2));
        }
    };

    Legend.prototype.containerReflow = function containerReflow (targetBox) {
        var ref = this;
        var options = ref.options;
        var container = ref.container;
        var position = options.position;
        var width = options.width;
        var height = options.height;
        var pos = position === TOP || position === BOTTOM ? X : Y;
        var vertical = this.isVertical();
        var alignTarget = targetBox.clone();
        var containerBox = targetBox.clone();

        if (position === LEFT || position === RIGHT) {
            containerBox.y1 = alignTarget.y1 = 0;
        }

        if (vertical && height) {
            containerBox.y2 = containerBox.y1 + height;
            containerBox.align(alignTarget, Y, container.options.vAlign);
        } else if (!vertical && width) {
            containerBox.x2 = containerBox.x1 + width;
            containerBox.align(alignTarget, X, container.options.align);
        }

        container.reflow(containerBox);
        containerBox = container.box;

        var box = containerBox.clone();

        if (options.offsetX || options.offsetY) {
            containerBox.translate(options.offsetX, options.offsetY);
            container.reflow(containerBox);
        }

        box[pos + 1] = targetBox[pos + 1];
        box[pos + 2] = targetBox[pos + 2];

        this.box = box;
    };

    Legend.prototype.containerCustomReflow = function containerCustomReflow (targetBox) {
        var ref = this;
        var options = ref.options;
        var container = ref.container;
        var offsetX = options.offsetX;
        var offsetY = options.offsetY;
        var width = options.width;
        var height = options.height;
        var vertical = this.isVertical();
        var containerBox = targetBox.clone();

        if (vertical && height) {
            containerBox.y2 = containerBox.y1 + height;
        } else if (!vertical && width) {
            containerBox.x2 = containerBox.x1 + width;
        }
        container.reflow(containerBox);
        containerBox = container.box;

        container.reflow(new Box(
            offsetX, offsetY,
            offsetX + containerBox.width(), offsetY + containerBox.height()
        ));
    };

    Legend.prototype.renderVisual = function renderVisual () {
        if (this.hasItems()) {
            ChartElement$$1.prototype.renderVisual.call(this);
        }
    };

    Legend.prototype.createLegendTitle = function createLegendTitle (title) {
        var titleOptions = deepExtend({}, {
            color: BLACK,
            position: TOP,
            align: CENTER
        }, title);
        var text = titleOptions.text;

        if (!title || title.visible === false) {
            return;
        }

        if (defined(titleOptions) && titleOptions.visible) {
            var labelTemplate = getTemplate(titleOptions);
            if (labelTemplate) {
                text = labelTemplate({ text: text });
            } else if (titleOptions.format) {
                text = this.chartService.format.auto(titleOptions.format, text);
            }
        }

        this.title = new TextBox(text, titleOptions);

        this.createTitleLayout();

        this.appendTitleLayoutContent();
    };

    Legend.prototype.createTitleLayout = function createTitleLayout () {
        this.layout = new FloatElement({
            vertical: true,
            wrap: false
        });

        this.container.append(this.layout);
    };

    Legend.prototype.hasTitle = function hasTitle () {
        return Boolean(this.options.title && this.options.title.visible !== false);
    };

    Legend.prototype.appendTitleLayoutContent = function appendTitleLayoutContent () {
        var options = this.options;

        if (options.title.position === BOTTOM) {
            this.layout.append(this.itemsContainer);
            this.layout.append(this.title);
        } else {
            this.layout.append(this.title);
            this.layout.append(this.itemsContainer);
        }
    };

    return Legend;
}(ChartElement));

setDefaultOptions(Legend, {
    position: RIGHT,
    items: [],
    offsetX: 0,
    offsetY: 0,
    margin: getSpacing(5),
    padding: getSpacing(5),
    border: {
        color: BLACK,
        width: 0
    },
    item: {
        cursor: POINTER,
        spacing: 6
    },
    spacing: 6,
    background: "",
    zIndex: 1,
    markers: {
        border: {
            width: 0
        },
        width: 15,
        height: 3,
        type: "rect",
        align: LEFT,
        vAlign: CENTER
    }
});

var PlotAreaFactory = (function (Class$$1) {
    function PlotAreaFactory() {
        Class$$1.call(this);

        this._registry = [];
    }

    if ( Class$$1 ) PlotAreaFactory.__proto__ = Class$$1;
    PlotAreaFactory.prototype = Object.create( Class$$1 && Class$$1.prototype );
    PlotAreaFactory.prototype.constructor = PlotAreaFactory;

    PlotAreaFactory.prototype.register = function register (type, seriesTypes) {
        this._registry.push({
            type: type,
            seriesTypes: seriesTypes
        });
    };

    PlotAreaFactory.prototype.create = function create (srcSeries, options, chartService) {
        var registry = this._registry;
        var match = registry[0];
        var series;

        for (var idx = 0; idx < registry.length; idx++) {
            var entry = registry[idx];
            series = filterSeriesByType(srcSeries, entry.seriesTypes);

            if (series.length > 0) {
                match = entry;
                break;
            }
        }

        return new match.type(series, options, chartService);
    };

    return PlotAreaFactory;
}(_progress_kendoDrawing.Class));

PlotAreaFactory.current = new PlotAreaFactory();

var ZOOM_ACCELERATION = 3;
var SELECTOR_HEIGHT_ADJUST = 0.1;

function createDiv(className) {
    var element = document.createElement("div");
    if (className) {
        element.className = className;
    }

    return element;
}

function closestHandle(element) {
    var current = element;
    while (current && !hasClasses(current, "k-handle")) {
        current = current.parentNode;
    }

    return current;
}

var Selection = (function (Class$$1) {
    function Selection(chart, categoryAxis, options, observer) {
        Class$$1.call(this);

        var chartElement = chart.element;

        this.options = deepExtend({}, this.options, options);
        this.chart = chart;
        this.observer = observer;
        this.chartElement = chartElement;
        this.categoryAxis = categoryAxis;
        this._dateAxis = this.categoryAxis instanceof DateCategoryAxis;

        this.initOptions();

        this.visible = this.options.visible && chartElement.offsetHeight;

        if (this.visible) {
            this.createElements();

            this.set(this._index(this.options.from), this._index(this.options.to));

            this.bindEvents();
        }
    }

    if ( Class$$1 ) Selection.__proto__ = Class$$1;
    Selection.prototype = Object.create( Class$$1 && Class$$1.prototype );
    Selection.prototype.constructor = Selection;

    Selection.prototype.onPane = function onPane (pane) {
        return this.categoryAxis.pane === pane;
    };

    Selection.prototype.createElements = function createElements () {
        var options = this.options;
        var wrapper = this.wrapper = createDiv("k-selector");
        elementStyles(wrapper, {
            top: options.offset.top,
            left: options.offset.left,
            width: options.width,
            height: options.height,
            direction: 'ltr'
        });
        var selection = this.selection = createDiv("k-selection");
        this.leftMask = createDiv("k-mask");
        this.rightMask = createDiv("k-mask");

        wrapper.appendChild(this.leftMask);
        wrapper.appendChild(this.rightMask);
        wrapper.appendChild(selection);

        selection.appendChild(createDiv("k-selection-bg"));

        var leftHandle = this.leftHandle = createDiv("k-handle k-left-handle");
        var rightHandle = this.rightHandle = createDiv("k-handle k-right-handle");
        leftHandle.appendChild(createDiv());
        rightHandle.appendChild(createDiv());

        selection.appendChild(leftHandle);
        selection.appendChild(rightHandle);

        this.chartElement.appendChild(wrapper);
        var selectionStyles = elementStyles(selection, [ "borderLeftWidth", "borderRightWidth", "height" ]);
        var leftHandleHeight = elementStyles(leftHandle, "height").height;
        var rightHandleHeight = elementStyles(rightHandle, "height").height;

        options.selection = {
            border: {
                left: selectionStyles.borderLeftWidth,
                right: selectionStyles.borderRightWidth
            }
        };

        elementStyles(leftHandle, {
            top: (selectionStyles.height - leftHandleHeight) / 2
        });

        elementStyles(rightHandle, {
            top: (selectionStyles.height - rightHandleHeight) / 2
        });

        wrapper.style.cssText = wrapper.style.cssText;
    };

    Selection.prototype.bindEvents = function bindEvents$1 () {
        if (this.options.mousewheel !== false) {
            this._mousewheelHandler = this._mousewheel.bind(this);
            var obj;
            bindEvents(this.wrapper, ( obj = {}, obj[ MOUSEWHEEL ] = this._mousewheelHandler, obj ));
        }

        this._domEvents = DomEventsBuilder.create(this.wrapper, {
            stopPropagation: true, // applicable for the jQuery UserEvents
            start: this._start.bind(this),
            move: this._move.bind(this),
            end: this._end.bind(this),
            tap: this._tap.bind(this),
            press: this._press.bind(this),
            gesturestart: this._gesturestart.bind(this),
            gesturechange: this._gesturechange.bind(this),
            gestureend: this._gestureend.bind(this)
        });
    };

    Selection.prototype.initOptions = function initOptions () {
        var ref = this;
        var options = ref.options;
        var categoryAxis = ref.categoryAxis;
        var box = categoryAxis.pane.chartsBox();
        var intlService = this.chart.chartService.intl;

        if (this._dateAxis) {
            deepExtend(options, {
                min: parseDate(intlService, options.min),
                max: parseDate(intlService, options.max),
                from: parseDate(intlService, options.from),
                to: parseDate(intlService, options.to)
            });
        }

        var ref$1 = elementStyles(this.chartElement, [ "paddingLeft", "paddingTop" ]);
        var paddingLeft = ref$1.paddingLeft;
        var paddingTop = ref$1.paddingTop;

        this.options = deepExtend({}, {
            width: box.width(),
            height: box.height() + SELECTOR_HEIGHT_ADJUST, //workaround for sub-pixel hover on the paths in chrome
            padding: {
                left: paddingLeft,
                top: paddingTop
            },
            offset: {
                left: box.x1 + paddingLeft,
                top: box.y1 + paddingTop
            },
            from: options.min,
            to: options.max
        }, options);
    };

    Selection.prototype.destroy = function destroy () {
        if (this._domEvents) {
            this._domEvents.destroy();
            delete this._domEvents;
        }

        clearTimeout(this._mwTimeout);
        this._state = null;

        if (this.wrapper) {
            if (this._mousewheelHandler) {
                var obj;
                unbindEvents(this.wrapper, ( obj = {}, obj[ MOUSEWHEEL ] = this._mousewheelHandler, obj ));
                this._mousewheelHandler = null;
            }
            this.chartElement.removeChild(this.wrapper);
            this.wrapper = null;
        }
    };

    Selection.prototype._rangeEventArgs = function _rangeEventArgs (range) {

        return {
            axis: this.categoryAxis.options,
            from: this._value(range.from),
            to: this._value(range.to)
        };
    };

    Selection.prototype._start = function _start (e) {
        var options = this.options;
        var target = eventElement(e);

        if (this._state || !target) {
            return;
        }

        this.chart._unsetActivePoint();
        this._state = {
            moveTarget: closestHandle(target) || target,
            startLocation: e.x ? e.x.location : 0,
            range: {
                from: this._index(options.from),
                to: this._index(options.to)
            }
        };

        var args = this._rangeEventArgs({
            from: this._index(options.from),
            to: this._index(options.to)
        });

        if (this.trigger(SELECT_START, args)) {
            this._state = null;
        }
    };

    Selection.prototype._press = function _press (e) {
        var handle;
        if (this._state) {
            handle = this._state.moveTarget;
        } else {
            handle = closestHandle(eventElement(e));
        }
        if (handle) {
            addClass(handle, "k-handle-active");
        }
    };

    Selection.prototype._move = function _move (e) {
        if (!this._state) {
            return;
        }

        var ref = this;
        var state = ref._state;
        var options = ref.options;
        var categoryAxis = ref.categoryAxis;
        var range = state.range;
        var target = state.moveTarget;
        var reverse = categoryAxis.options.reverse;
        var from = this._index(options.from);
        var to = this._index(options.to);
        var min = this._index(options.min);
        var max = this._index(options.max);
        var delta = state.startLocation - e.x.location;
        var oldRange = { from: range.from, to: range.to };
        var span = range.to - range.from;
        var scale = elementStyles(this.wrapper, "width").width / (categoryAxis.categoriesCount() - 1);
        var offset = Math.round(delta / scale) * (reverse ? -1 : 1);

        if (!target) {
            return;
        }

        var leftHandle = hasClasses(target, "k-left-handle");
        var rightHandle = hasClasses(target, "k-right-handle");

        if (hasClasses(target, "k-selection k-selection-bg")) {
            range.from = Math.min(
                Math.max(min, from - offset),
                max - span
            );
            range.to = Math.min(
                range.from + span,
                max
            );
        } else if ((leftHandle && !reverse) || (rightHandle && reverse)) {
            range.from = Math.min(
                Math.max(min, from - offset),
                max - 1
            );
            range.to = Math.max(range.from + 1, range.to);
        } else if ((leftHandle && reverse) || (rightHandle && !reverse)) {
            range.to = Math.min(
                Math.max(min + 1, to - offset),
                max
            );
            range.from = Math.min(range.to - 1, range.from);
        }

        if (range.from !== oldRange.from || range.to !== oldRange.to) {
            this.move(range.from, range.to);
            this.trigger(SELECT, this._rangeEventArgs(range));
        }
    };

    Selection.prototype._end = function _end () {
        if (this._state) {
            var moveTarget = this._state.moveTarget;
            if (moveTarget) {
                removeClass(moveTarget, "k-handle-active");
            }

            var range = this._state.range;
            this.set(range.from, range.to);
            this.trigger(SELECT_END, this._rangeEventArgs(range));

            delete this._state;
        }
    };

    Selection.prototype._tap = function _tap (e) {
        var ref = this;
        var options = ref.options;
        var categoryAxis = ref.categoryAxis;
        var coords = this.chart._eventCoordinates(e);
        var categoryIx = categoryAxis.pointCategoryIndex(new Point(coords.x, categoryAxis.box.y1));
        var from = this._index(options.from);
        var to = this._index(options.to);
        var min = this._index(options.min);
        var max = this._index(options.max);
        var span = to - from;
        var mid = from + span / 2;
        var range = {};
        var rightClick = e.event.which === 3;
        var offset = Math.round(mid - categoryIx);

        if (this._state || rightClick) {
            return;
        }


        this.chart._unsetActivePoint();

        if (!categoryAxis.options.justified) {
            offset--;
        }

        range.from = Math.min(
            Math.max(min, from - offset),
            max - span
        );

        range.to = Math.min(range.from + span, max);

        this._start(e);
        if (this._state) {
            this._state.range = range;
            this.trigger(SELECT, this._rangeEventArgs(range));
            this._end();
        }
    };

    Selection.prototype._mousewheel = function _mousewheel (e) {
        var this$1 = this;

        var delta = mousewheelDelta(e);

        this._start({ target: this.selection });

        if (this._state) {
            var range = this._state.range;

            e.preventDefault();
            e.stopPropagation();

            if (Math.abs(delta) > 1) {
                delta *= ZOOM_ACCELERATION;
            }

            if (this.options.mousewheel.reverse) {
                delta *= -1;
            }

            if (this.expand(delta)) {
                this.trigger(SELECT, {
                    axis: this.categoryAxis.options,
                    delta: delta,
                    originalEvent: e,
                    from: this._value(range.from),
                    to: this._value(range.to)
                });
            }

            if (this._mwTimeout) {
                clearTimeout(this._mwTimeout);
            }

            this._mwTimeout = setTimeout(function () {
                this$1._end();
            }, MOUSEWHEEL_DELAY);
        }
    };

    Selection.prototype._gesturestart = function _gesturestart (e) {
        var options = this.options;

        this._state = {
            range: {
                from: this._index(options.from),
                to: this._index(options.to)
            }
        };
        var args = this._rangeEventArgs(this._state.range);

        if (this.trigger(SELECT_START, args)) {
            this._state = null;
        } else {
            e.preventDefault();
        }
    };

    Selection.prototype._gestureend = function _gestureend () {
        if (this._state) {
            this.trigger(SELECT_END, this._rangeEventArgs(this._state.range));
            delete this._state;
        }
    };

    Selection.prototype._gesturechange = function _gesturechange (e) {
        var ref = this;
        var chart = ref.chart;
        var state = ref._state;
        var options = ref.options;
        var categoryAxis = ref.categoryAxis;
        var range = state.range;
        var p0 = chart._toModelCoordinates(e.touches[0].x.location).x;
        var p1 = chart._toModelCoordinates(e.touches[1].x.location).x;
        var left = Math.min(p0, p1);
        var right = Math.max(p0, p1);

        e.preventDefault();

        range.from = categoryAxis.pointCategoryIndex(new Point(left)) || options.min;

        range.to = categoryAxis.pointCategoryIndex(new Point(right)) || options.max;

        this.move(range.from, range.to);

        this.trigger(SELECT, this._rangeEventArgs(range));
    };

    Selection.prototype._index = function _index (value) {
        var index = value;

        if (value instanceof Date) {
            index = this.categoryAxis.categoryIndex(value);
        }

        return index;
    };

    Selection.prototype._value = function _value (index) {
        var value = index;
        if (this._dateAxis) {
            value = this.categoryAxis.categoryAt(index);
            if (value > this.options.max) {
                value = this.options.max;
            }
        }

        return value;
    };

    Selection.prototype._slot = function _slot (value) {
        var categoryAxis = this.categoryAxis;
        var index = this._index(value);

        return categoryAxis.getSlot(index, index, true);
    };

    Selection.prototype.move = function move (from, to) {
        var options = this.options;
        var reverse = this.categoryAxis.options.reverse;
        var offset = options.offset;
        var padding = options.padding;
        var border = options.selection.border;
        var left = reverse ? to : from;
        var right = reverse ? from : to;
        var edge = 'x' + (reverse ? 2 : 1);

        var box = this._slot(left);
        var leftMaskWidth = round(box[edge] - offset.left + padding.left);

        elementStyles(this.leftMask, {
            width: leftMaskWidth
        });
        elementStyles(this.selection, {
            left: leftMaskWidth
        });

        box = this._slot(right);

        var rightMaskWidth = round(options.width - (box[edge] - offset.left + padding.left));
        elementStyles(this.rightMask, {
            width: rightMaskWidth
        });

        var distance = options.width - rightMaskWidth;
        if (distance !== options.width) {
            distance += border.right;
        }

        elementStyles(this.rightMask, {
            left: distance
        });
        elementStyles(this.selection, {
            width: Math.max(options.width - (leftMaskWidth + rightMaskWidth) - border.right, 0)
        });
    };

    Selection.prototype.set = function set (from, to) {
        var options = this.options;
        var min = this._index(options.min);
        var max = this._index(options.max);
        var fromValue = limitValue(this._index(from), min, max);
        var toValue = limitValue(this._index(to), fromValue + 1, max);

        if (options.visible) {
            this.move(fromValue, toValue);
        }

        options.from = this._value(fromValue);
        options.to = this._value(toValue);
    };

    Selection.prototype.expand = function expand (delta) {
        var options = this.options;
        var min = this._index(options.min);
        var max = this._index(options.max);
        var zDir = options.mousewheel.zoom;
        var from = this._index(options.from);
        var to = this._index(options.to);
        var range = { from: from, to: to };
        var oldRange = deepExtend({}, range);

        if (this._state) {
            range = this._state.range;
        }

        if (zDir !== RIGHT) {
            range.from = limitValue(
                limitValue(from - delta, 0, to - 1),
                min, max
            );
        }

        if (zDir !== LEFT) {
            range.to = limitValue(
                limitValue(to + delta, range.from + 1, max),
                min,
                max
             );
        }

        if (range.from !== oldRange.from || range.to !== oldRange.to) {
            this.set(range.from, range.to);
            return true;
        }
    };

    Selection.prototype.trigger = function trigger (name, args) {
        return (this.observer || this.chart).trigger(name, args);
    };

    return Selection;
}(_progress_kendoDrawing.Class));

setDefaultOptions(Selection, {
    visible: true,
    mousewheel: {
        zoom: "both"
    },
    min: MIN_VALUE,
    max: MAX_VALUE
});

var Tooltip = (function (BaseTooltip$$1) {
    function Tooltip () {
        BaseTooltip$$1.apply(this, arguments);
    }

    if ( BaseTooltip$$1 ) Tooltip.__proto__ = BaseTooltip$$1;
    Tooltip.prototype = Object.create( BaseTooltip$$1 && BaseTooltip$$1.prototype );
    Tooltip.prototype.constructor = Tooltip;

    Tooltip.prototype.show = function show (point) {
        if (!point || !point.tooltipAnchor || (this._current && this._current === point)) {
            return;
        }

        var options = deepExtend({}, this.options, point.options.tooltip);
        var anchor = point.tooltipAnchor();

        if (anchor) {
            this._current = point;
            BaseTooltip$$1.prototype.show.call(this, {
                point: point,
                anchor: anchor
            }, options, point);
        } else {
            this.hide();
        }
    };

    Tooltip.prototype.hide = function hide () {
        delete this._current;
        BaseTooltip$$1.prototype.hide.call(this);
    };

    return Tooltip;
}(BaseTooltip));

var SharedTooltip = (function (BaseTooltip$$1) {
    function SharedTooltip(plotArea, options) {
        BaseTooltip$$1.call(this, plotArea.chartService, options);

        this.plotArea = plotArea;
        this.formatService = plotArea.chartService.format;
    }

    if ( BaseTooltip$$1 ) SharedTooltip.__proto__ = BaseTooltip$$1;
    SharedTooltip.prototype = Object.create( BaseTooltip$$1 && BaseTooltip$$1.prototype );
    SharedTooltip.prototype.constructor = SharedTooltip;

    SharedTooltip.prototype.showAt = function showAt (points, coords) {
        var tooltipPoints = grep(points, function(point) {
            var tooltip = point.series.tooltip;
            var excluded = tooltip && tooltip.visible === false;

            return !excluded;
        });

        if (tooltipPoints.length > 0) {
            var point = tooltipPoints[0];
            var slot = this.plotArea.categoryAxis.getSlot(point.categoryIx);

            var anchor = coords ? this._slotAnchor(coords, slot) : this._defaultAnchor(point, slot);

            this.show({
                anchor: anchor,
                shared: true,
                points: points,
                category: point.category,
                categoryText: this.formatService.auto(this.options.categoryFormat, point.category),
                series: this.plotArea.series
            }, this.options);
        }
    };

    SharedTooltip.prototype._slotAnchor = function _slotAnchor (point, slot) {
        var axis = this.plotArea.categoryAxis;
        var align = {
            horizontal: "left",
            vertical: "center"
        };

        if (!axis.options.vertical) {
            point.x = slot.center().x;
        }

        return {
            point: point,
            align: align
        };
    };

    SharedTooltip.prototype._defaultAnchor = function _defaultAnchor (point, slot) {
        var box = point.owner.pane.chartsBox();
        var vertical = this.plotArea.categoryAxis.options.vertical;
        var center = box.center();
        var slotCenter = slot.center();
        var align = {
            horizontal: "center",
            vertical: "center"
        };

        var centerPoint;
        if (vertical) {
            centerPoint = new Point(center.x, slotCenter.y);
        } else {
            centerPoint = new Point(slotCenter.x, center.y);
        }

        return {
            point: centerPoint,
            align: align
        };
    };

    return SharedTooltip;
}(BaseTooltip));

setDefaultOptions(SharedTooltip, {
    categoryFormat: '{0:d}'
});

var BarChartAnimation = (function (superclass) {
    function BarChartAnimation () {
        superclass.apply(this, arguments);
    }

    if ( superclass ) BarChartAnimation.__proto__ = superclass;
    BarChartAnimation.prototype = Object.create( superclass && superclass.prototype );
    BarChartAnimation.prototype.constructor = BarChartAnimation;

    BarChartAnimation.prototype.setup = function setup () {
        var ref = this;
        var element = ref.element;
        var options = ref.options;
        var bbox = element.bbox();

        if (bbox) {
            this.origin = options.origin;
            var axis = options.vertical ? Y : X;

            var fromScale = this.fromScale = new _progress_kendoDrawing.geometry.Point(1, 1);
            fromScale[axis] = START_SCALE;

            element.transform(_progress_kendoDrawing.geometry.transform()
                .scale(fromScale.x, fromScale.y)
            );
        } else {
            this.abort();
        }
    };

    BarChartAnimation.prototype.step = function step (pos) {
        var scaleX = interpolateValue(this.fromScale.x, 1, pos);
        var scaleY = interpolateValue(this.fromScale.y, 1, pos);

        this.element.transform(_progress_kendoDrawing.geometry.transform()
            .scale(scaleX, scaleY, this.origin)
        );
    };

    BarChartAnimation.prototype.abort = function abort () {
        superclass.prototype.abort.call(this);
        this.element.transform(null);
    };

    return BarChartAnimation;
}(_progress_kendoDrawing.drawing.Animation));

setDefaultOptions(BarChartAnimation, {
    duration: INITIAL_ANIMATION_DURATION
});

_progress_kendoDrawing.drawing.AnimationFactory.current.register(BAR, BarChartAnimation);

var BubbleAnimation = (function (superclass) {
    function BubbleAnimation () {
        superclass.apply(this, arguments);
    }

    if ( superclass ) BubbleAnimation.__proto__ = superclass;
    BubbleAnimation.prototype = Object.create( superclass && superclass.prototype );
    BubbleAnimation.prototype.constructor = BubbleAnimation;

    BubbleAnimation.prototype.setup = function setup () {
        var center = this.center = this.element.bbox().center();
        this.element.transform(_progress_kendoDrawing.geometry.transform()
            .scale(START_SCALE, START_SCALE, center)
        );
    };

    BubbleAnimation.prototype.step = function step (pos) {
        this.element.transform(_progress_kendoDrawing.geometry.transform()
            .scale(pos, pos, this.center)
        );
    };

    return BubbleAnimation;
}(_progress_kendoDrawing.drawing.Animation));

setDefaultOptions(BubbleAnimation, {
    easing: "easeOutElastic"
});

_progress_kendoDrawing.drawing.AnimationFactory.current.register(BUBBLE, BubbleAnimation);

var FadeInAnimation = (function (superclass) {
    function FadeInAnimation () {
        superclass.apply(this, arguments);
    }

    if ( superclass ) FadeInAnimation.__proto__ = superclass;
    FadeInAnimation.prototype = Object.create( superclass && superclass.prototype );
    FadeInAnimation.prototype.constructor = FadeInAnimation;

    FadeInAnimation.prototype.setup = function setup () {
        this.fadeTo = this.element.opacity();
        this.element.opacity(0);
    };

    FadeInAnimation.prototype.step = function step (pos) {
        this.element.opacity(pos * this.fadeTo);
    };

    return FadeInAnimation;
}(_progress_kendoDrawing.drawing.Animation));

setDefaultOptions(FadeInAnimation, {
    duration: 200,
    easing: "linear"
});

_progress_kendoDrawing.drawing.AnimationFactory.current.register(FADEIN, FadeInAnimation);

var PieAnimation = (function (superclass) {
    function PieAnimation () {
        superclass.apply(this, arguments);
    }

    if ( superclass ) PieAnimation.__proto__ = superclass;
    PieAnimation.prototype = Object.create( superclass && superclass.prototype );
    PieAnimation.prototype.constructor = PieAnimation;

    PieAnimation.prototype.setup = function setup () {
        this.element.transform(_progress_kendoDrawing.geometry.transform()
            .scale(START_SCALE, START_SCALE, this.options.center)
        );
    };

    PieAnimation.prototype.step = function step (pos) {
        this.element.transform(_progress_kendoDrawing.geometry.transform()
            .scale(pos, pos, this.options.center)
        );
    };

    return PieAnimation;
}(_progress_kendoDrawing.drawing.Animation));

setDefaultOptions(PieAnimation, {
    easing: "easeOutElastic",
    duration: INITIAL_ANIMATION_DURATION
});

_progress_kendoDrawing.drawing.AnimationFactory.current.register(PIE, PieAnimation);

var ScatterLineChart = (function (ScatterChart$$1) {
    function ScatterLineChart () {
        ScatterChart$$1.apply(this, arguments);
    }

    if ( ScatterChart$$1 ) ScatterLineChart.__proto__ = ScatterChart$$1;
    ScatterLineChart.prototype = Object.create( ScatterChart$$1 && ScatterChart$$1.prototype );
    ScatterLineChart.prototype.constructor = ScatterLineChart;

    ScatterLineChart.prototype.render = function render () {
        ScatterChart$$1.prototype.render.call(this);

        this.renderSegments();
    };

    ScatterLineChart.prototype.createSegment = function createSegment (linePoints, currentSeries, seriesIx) {
        var style = currentSeries.style;
        var pointType;

        if (style === SMOOTH) {
            pointType = SplineSegment;
        } else {
            pointType = LineSegment;
        }

        return new pointType(linePoints, currentSeries, seriesIx);
    };

    ScatterLineChart.prototype.animationPoints = function animationPoints () {
        var points = ScatterChart$$1.prototype.animationPoints.call(this);
        return points.concat(this._segments);
    };

    ScatterLineChart.prototype.createMissingValue = function createMissingValue (value, missingValues) {
        if (missingValues === ZERO) {
            var missingValue = {
                x: value.x,
                y: value.y
            };
            if (!hasValue(missingValue.x)) {
                missingValue.x = 0;
            }
            if (!hasValue(missingValue.y)) {
                missingValue.y = 0;
            }
            return missingValue;
        }
    };

    return ScatterLineChart;
}(ScatterChart));

deepExtend(ScatterLineChart.prototype, LineChartMixin);

var XYPlotArea = (function (PlotAreaBase$$1) {
    function XYPlotArea () {
        PlotAreaBase$$1.apply(this, arguments);
    }

    if ( PlotAreaBase$$1 ) XYPlotArea.__proto__ = PlotAreaBase$$1;
    XYPlotArea.prototype = Object.create( PlotAreaBase$$1 && PlotAreaBase$$1.prototype );
    XYPlotArea.prototype.constructor = XYPlotArea;

    XYPlotArea.prototype.initFields = function initFields () {
        this.namedXAxes = {};
        this.namedYAxes = {};

        this.xAxisRangeTracker = new AxisGroupRangeTracker();
        this.yAxisRangeTracker = new AxisGroupRangeTracker();
    };

    XYPlotArea.prototype.render = function render (panes) {
        var this$1 = this;
        if ( panes === void 0 ) panes = this.panes;

        var seriesByPane = this.groupSeriesByPane();

        for (var i = 0; i < panes.length; i++) {
            var pane = panes[i];
            var paneSeries = seriesByPane[pane.options.name || "default"] || [];
            this$1.addToLegend(paneSeries);
            var filteredSeries = this$1.filterVisibleSeries(paneSeries);

            if (!filteredSeries) {
                continue;
            }

            this$1.createScatterChart(
                filterSeriesByType(filteredSeries, SCATTER),
                pane
            );

            this$1.createScatterLineChart(
                filterSeriesByType(filteredSeries, SCATTER_LINE),
                pane
            );

            this$1.createBubbleChart(
                filterSeriesByType(filteredSeries, BUBBLE),
                pane
            );
        }

        this.createAxes(panes);
    };

    XYPlotArea.prototype.appendChart = function appendChart (chart, pane) {
        this.xAxisRangeTracker.update(chart.xAxisRanges);
        this.yAxisRangeTracker.update(chart.yAxisRanges);

        PlotAreaBase$$1.prototype.appendChart.call(this, chart, pane);
    };

    XYPlotArea.prototype.removeAxis = function removeAxis (axis) {
        var axisName = axis.options.name;

        PlotAreaBase$$1.prototype.removeAxis.call(this, axis);

        if (axis.options.vertical) {
            this.yAxisRangeTracker.reset(axisName);
            delete this.namedYAxes[axisName];
        } else {
            this.xAxisRangeTracker.reset(axisName);
            delete this.namedXAxes[axisName];
        }

        if (axis === this.axisX) {
            delete this.axisX;
        }

        if (axis === this.axisY) {
            delete this.axisY;
        }
    };

    // TODO: Refactor, optionally use series.pane option
    XYPlotArea.prototype.seriesPaneName = function seriesPaneName (series) {
        var options = this.options;
        var xAxisName = series.xAxis;
        var xAxisOptions = [].concat(options.xAxis);
        var xAxis = grep(xAxisOptions, function(a) { return a.name === xAxisName; })[0];
        var yAxisName = series.yAxis;
        var yAxisOptions = [].concat(options.yAxis);
        var yAxis = grep(yAxisOptions, function(a) { return a.name === yAxisName; })[0];
        var panes = options.panes || [ {} ];
        var defaultPaneName = panes[0].name || "default";
        var paneName = (xAxis || {}).pane || (yAxis || {}).pane || defaultPaneName;

        return paneName;
    };

    XYPlotArea.prototype.createScatterChart = function createScatterChart (series, pane) {
        if (series.length > 0) {
            this.appendChart(
                new ScatterChart(this, { series: series, clip: pane.options.clip }),
                pane
            );
        }
    };

    XYPlotArea.prototype.createScatterLineChart = function createScatterLineChart (series, pane) {
        if (series.length > 0) {
            this.appendChart(
                new ScatterLineChart(this, { series: series, clip: pane.options.clip }),
                pane
            );
        }
    };

    XYPlotArea.prototype.createBubbleChart = function createBubbleChart (series, pane) {
        if (series.length > 0) {
            this.appendChart(
                new BubbleChart(this, { series: series, clip: pane.options.clip }),
                pane
            );
        }
    };

    XYPlotArea.prototype.createXYAxis = function createXYAxis (options, vertical, axisIndex) {
        var axisName = options.name;
        var namedAxes = vertical ? this.namedYAxes : this.namedXAxes;
        var tracker = vertical ? this.yAxisRangeTracker : this.xAxisRangeTracker;
        var axisOptions = deepExtend({ reverse: !vertical && this.chartService.rtl }, options, { vertical: vertical });
        var isLog = equalsIgnoreCase(axisOptions.type, LOGARITHMIC);
        var defaultRange = tracker.query();
        var defaultAxisRange = isLog ? { min: 0.1, max: 1 } : { min: 0, max: 1 };
        var range = tracker.query(axisName) || defaultRange || defaultAxisRange;
        var typeSamples = [ axisOptions.min, axisOptions.max ];
        var series = this.series;

        for (var seriesIx = 0; seriesIx < series.length; seriesIx++) {
            var currentSeries = series[seriesIx];
            var seriesAxisName = currentSeries[vertical ? "yAxis" : "xAxis"];
            if ((seriesAxisName === axisOptions.name) || (axisIndex === 0 && !seriesAxisName)) {
                var firstPointValue = SeriesBinder.current.bindPoint(currentSeries, 0).valueFields;
                typeSamples.push(firstPointValue[vertical ? "y" : "x"]);

                break;
            }
        }

        if (axisIndex === 0 && defaultRange) {
            range.min = Math.min(range.min, defaultRange.min);
            range.max = Math.max(range.max, defaultRange.max);
        }

        var inferredDate;

        for (var i = 0; i < typeSamples.length; i++) {
            if (typeSamples[i] instanceof Date) {
                inferredDate = true;
                break;
            }
        }

        var axisType;
        if (equalsIgnoreCase(axisOptions.type, DATE) || (!axisOptions.type && inferredDate)) {
            axisType = DateValueAxis;
        } else if (isLog) {
            axisType = LogarithmicAxis;
        } else {
            axisType = NumericAxis;
        }

        var axis = new axisType(range.min, range.max, axisOptions, this.chartService);
        axis.axisIndex = axisIndex;

        if (axisName) {
            if (namedAxes[axisName]) {
                throw new Error(((vertical ? "Y" : "X") + " axis with name " + axisName + " is already defined"));
            }
            namedAxes[axisName] = axis;
        }

        this.appendAxis(axis);

        return axis;
    };

    XYPlotArea.prototype.createAxes = function createAxes (panes) {
        var this$1 = this;

        var options = this.options;
        var xAxesOptions = [].concat(options.xAxis);
        var xAxes = [];
        var yAxesOptions = [].concat(options.yAxis);
        var yAxes = [];

        for (var idx = 0; idx < xAxesOptions.length; idx++) {
            var axisPane = this$1.findPane(xAxesOptions[idx].pane);
            if (inArray(axisPane, panes)) {
                xAxes.push(this$1.createXYAxis(xAxesOptions[idx], false, idx));
            }
        }

        for (var idx$1 = 0; idx$1 < yAxesOptions.length; idx$1++) {
            var axisPane$1 = this$1.findPane(yAxesOptions[idx$1].pane);
            if (inArray(axisPane$1, panes)) {
                yAxes.push(this$1.createXYAxis(yAxesOptions[idx$1], true, idx$1));
            }
        }

        this.axisX = this.axisX || xAxes[0];
        this.axisY = this.axisY || yAxes[0];
    };

    XYPlotArea.prototype._dispatchEvent = function _dispatchEvent (chart, e, eventType) {
        var coords = chart._eventCoordinates(e);
        var point = new Point(coords.x, coords.y);
        var allAxes = this.axes;
        var length = allAxes.length;
        var xValues = [];
        var yValues = [];

        for (var i = 0; i < length; i++) {
            var axis = allAxes[i];
            var values = axis.options.vertical ? yValues : xValues;
            var currentValue = axis.getValue(point);
            if (currentValue !== null) {
                values.push(currentValue);
            }
        }

        if (xValues.length > 0 && yValues.length > 0) {
            chart.trigger(eventType, {
                element: eventElement(e),
                originalEvent: e,
                x: singleItemOrArray(xValues),
                y: singleItemOrArray(yValues)
            });
        }
    };

    XYPlotArea.prototype.updateAxisOptions = function updateAxisOptions$1 (axis, options) {
        var vertical = axis.options.vertical;
        var axes = this.groupAxes(this.panes);
        var index = (vertical ? axes.y : axes.x).indexOf(axis);

        updateAxisOptions$1$1(this.options, index, vertical, options);
        updateAxisOptions$1$1(this.originalOptions, index, vertical, options);
    };

    return XYPlotArea;
}(PlotAreaBase));

function updateAxisOptions$1$1(targetOptions, axisIndex, vertical, options) {
    var axisOptions = ([].concat(vertical ? targetOptions.yAxis : targetOptions.xAxis))[axisIndex];
    deepExtend(axisOptions, options);
}

setDefaultOptions(XYPlotArea, {
    xAxis: {},
    yAxis: {}
});

deepExtend(XYPlotArea.prototype, PlotAreaEventsMixin);

var PieSegment = (function (ChartElement$$1) {
    function PieSegment(value, sector, options) {
        ChartElement$$1.call(this, options);

        this.value = value;
        this.sector = sector;
    }

    if ( ChartElement$$1 ) PieSegment.__proto__ = ChartElement$$1;
    PieSegment.prototype = Object.create( ChartElement$$1 && ChartElement$$1.prototype );
    PieSegment.prototype.constructor = PieSegment;

    PieSegment.prototype.render = function render () {
        var labels = this.options.labels;
        var chartService = this.owner.chartService;
        var labelText = this.value;

        if (this._rendered || this.visible === false) {
            return;
        }
        this._rendered = true;

        var labelTemplate = getTemplate(labels);
        var pointData = this.pointData();

        if (labelTemplate) {
            labelText = labelTemplate(pointData);
        } else if (labels.format) {
            labelText = chartService.format.auto(labels.format, labelText);
        }

        if (labels.visible && (labelText || labelText === 0)) {
            if (labels.position === CENTER || labels.position === INSIDE_END) {
                if (!labels.color) {
                    var brightnessValue = new _progress_kendoDrawing.Color(this.options.color).percBrightness();
                    if (brightnessValue > 180) {
                        labels.color = BLACK;
                    } else {
                        labels.color = WHITE;
                    }
                }
                if (!labels.background) {
                    labels.background = this.options.color;
                }
            } else {
                var themeLabels = chartService.theme.seriesDefaults.labels;
                labels.color = labels.color || themeLabels.color;
                labels.background = labels.background || themeLabels.background;
            }


            this.label = new TextBox(labelText, deepExtend({}, labels, {
                align: CENTER,
                vAlign: "",
                animation: {
                    type: FADEIN,
                    delay: this.animationDelay
                }
            }), pointData);

            this.append(this.label);
        }
    };

    PieSegment.prototype.reflow = function reflow (targetBox) {
        this.render();
        this.box = targetBox;
        this.reflowLabel();
    };

    PieSegment.prototype.reflowLabel = function reflowLabel () {
        var ref = this;
        var labelsOptions = ref.options.labels;
        var label = ref.label;
        var sector = this.sector.clone();
        var labelsDistance = labelsOptions.distance;
        var angle = sector.middle();

        if (label) {
            var labelHeight = label.box.height();
            var labelWidth = label.box.width();
            var lp;

            if (labelsOptions.position === CENTER) {
                sector.radius = Math.abs((sector.radius - labelHeight) / 2) + labelHeight;
                lp = sector.point(angle);
                label.reflow(new Box(lp.x, lp.y - labelHeight / 2, lp.x, lp.y));
            } else if (labelsOptions.position === INSIDE_END) {
                sector.radius = sector.radius - labelHeight / 2;
                lp = sector.point(angle);
                label.reflow(new Box(lp.x, lp.y - labelHeight / 2, lp.x, lp.y));
            } else {
                var x1;
                lp = sector.clone().expand(labelsDistance).point(angle);
                if (lp.x >= sector.center.x) {
                    x1 = lp.x + labelWidth;
                    label.orientation = RIGHT;
                } else {
                    x1 = lp.x - labelWidth;
                    label.orientation = LEFT;
                }
                label.reflow(new Box(x1, lp.y - labelHeight, lp.x, lp.y));
            }
        }
    };

    PieSegment.prototype.createVisual = function createVisual () {
        var this$1 = this;

        var ref = this;
        var sector = ref.sector;
        var options = ref.options;

        ChartElement$$1.prototype.createVisual.call(this);

        if (this.value) {
            if (options.visual) {
                var startAngle = (sector.startAngle + 180) % 360;
                var visual = options.visual({
                    category: this.category,
                    dataItem: this.dataItem,
                    value: this.value,
                    series: this.series,
                    percentage: this.percentage,
                    center: new _progress_kendoDrawing.geometry.Point(sector.center.x, sector.center.y),
                    radius: sector.radius,
                    innerRadius: sector.innerRadius,
                    startAngle: startAngle,
                    endAngle: startAngle + sector.angle,
                    options: options,
                    sender: this.getSender(),
                    createVisual: function () {
                        var group = new _progress_kendoDrawing.drawing.Group();
                        this$1.createSegmentVisual(group);

                        return group;
                    }
                });

                if (visual) {
                    this.visual.append(visual);
                }
            } else {
                this.createSegmentVisual(this.visual);
            }
        }
    };

    PieSegment.prototype.createSegmentVisual = function createSegmentVisual (group) {
        var ref = this;
        var sector = ref.sector;
        var options = ref.options;
        var borderOptions = options.border || {};
        var border = borderOptions.width > 0 ? {
            stroke: {
                color: borderOptions.color,
                width: borderOptions.width,
                opacity: borderOptions.opacity,
                dashType: borderOptions.dashType
            }
        } : {};
        var color = options.color;
        var fill = {
            color: color,
            opacity: options.opacity
        };
        var visual = this.createSegment(sector, deepExtend({
            fill: fill,
            stroke: {
                opacity: options.opacity
            },
            zIndex: options.zIndex
        }, border));

        group.append(visual);

        if (hasGradientOverlay(options)) {
            group.append(this.createGradientOverlay(visual, {
                baseColor: color,
                fallbackFill: fill
            }, deepExtend({
                center: [ sector.center.x, sector.center.y ],
                innerRadius: sector.innerRadius,
                radius: sector.radius,
                userSpace: true
            }, options.overlay)));
        }
    };

    PieSegment.prototype.createSegment = function createSegment (sector, options) {
        if (options.singleSegment) {
            return new _progress_kendoDrawing.drawing.Circle(new _progress_kendoDrawing.geometry.Circle(new _progress_kendoDrawing.geometry.Point(sector.center.x, sector.center.y), sector.radius), options);
        }

        return ShapeBuilder.current.createRing(sector, options);
    };

    PieSegment.prototype.createAnimation = function createAnimation () {
        var ref = this;
        var options = ref.options;
        var center = ref.sector.center;

        deepExtend(options, {
            animation: {
                center: [ center.x, center.y ],
                delay: this.animationDelay
            }
        });

        ChartElement$$1.prototype.createAnimation.call(this);
    };

    PieSegment.prototype.createHighlight = function createHighlight (options) {
        var highlight = this.options.highlight || {};
        var border = highlight.border || {};

        return this.createSegment(this.sector, deepExtend({}, options, {
            fill: {
                color: highlight.color,
                opacity: highlight.opacity
            },
            stroke: {
                opacity: border.opacity,
                width: border.width,
                color: border.color
            }
        }));
    };

    PieSegment.prototype.highlightVisual = function highlightVisual () {
        return this.visual.children[0];
    };

    PieSegment.prototype.highlightVisualArgs = function highlightVisualArgs () {
        var sector = this.sector;

        return {
            options: this.options,
            radius: sector.radius,
            innerRadius: sector.innerRadius,
            center: new _progress_kendoDrawing.geometry.Point(sector.center.x, sector.center.y),
            startAngle: sector.startAngle,
            endAngle: sector.angle + sector.startAngle,
            visual: this.visual
        };
    };

    PieSegment.prototype.tooltipAnchor = function tooltipAnchor () {
        var sector = this.sector.clone().expand(TOOLTIP_OFFSET);
        var midAndle = sector.middle();
        var midPoint = sector.point(midAndle);

        return {
            point: midPoint,
            align: tooltipAlignment(midAndle + 180)
        };
    };

    PieSegment.prototype.formatValue = function formatValue (format) {
        return this.owner.formatPointValue(this, format);
    };

    PieSegment.prototype.pointData = function pointData () {
        return {
            dataItem: this.dataItem,
            category: this.category,
            value: this.value,
            series: this.series,
            percentage: this.percentage
        };
    };

    return PieSegment;
}(ChartElement));

var RAD_30 = round(rad(30), DEFAULT_PRECISION);
var RAD_60 = round(rad(60), DEFAULT_PRECISION);

function tooltipAlignment(angle) {
    var radians = rad(angle);
    var sine = round(Math.sin(radians), DEFAULT_PRECISION);
    var cosine = round(Math.cos(radians), DEFAULT_PRECISION);


    var horizontal;
    if (Math.abs(sine) > RAD_60) {
        horizontal = CENTER;
    } else if (cosine < 0) {
        horizontal = RIGHT;
    } else {
        horizontal = LEFT;
    }

    var vertical;
    if (Math.abs(sine) < RAD_30) {
        vertical = CENTER;
    } else if (sine < 0) {
        vertical = BOTTOM;
    } else {
        vertical = TOP;
    }

    return {
        horizontal: horizontal,
        vertical: vertical
    };
}

setDefaultOptions(PieSegment, {
    color: WHITE,
    overlay: {
        gradient: "roundedBevel"
    },
    border: {
        width: 0.5
    },
    labels: {
        visible: false,
        distance: 35,
        font: DEFAULT_FONT,
        margin: getSpacing(0.5),
        align: CIRCLE,
        zIndex: 1,
        position: OUTSIDE_END
    },
    animation: {
        type: PIE
    },
    highlight: {
        visible: true,
        border: {
            width: 1
        }
    },
    visible: true
});

deepExtend(PieSegment.prototype, PointEventsMixin);

var PieChartMixin = {
    createLegendItem: function(value, point, options) {
        var legendOptions = this.options.legend || {};
        var labelsOptions = legendOptions.labels || {};
        var inactiveItems = legendOptions.inactiveItems || {};
        var inactiveItemsLabels = inactiveItems.labels || {};

        if (options && options.visibleInLegend !== false) {
            var pointVisible = options.visible !== false;
            var labelTemplate = pointVisible ? getTemplate(labelsOptions) :
                getTemplate(inactiveItemsLabels) || getTemplate(labelsOptions);
            var text = options.category;

            if (labelTemplate) {
                text = labelTemplate({
                    text: text,
                    series: options.series,
                    dataItem: options.dataItem,
                    percentage: options.percentage,
                    value: value
                });
            }

            var itemLabelOptions, markerColor;
            if (pointVisible) {
                itemLabelOptions = {};
                markerColor = point.color;
            } else {
                itemLabelOptions = {
                    color: inactiveItemsLabels.color,
                    font: inactiveItemsLabels.font
                };
                markerColor = (inactiveItems.markers || {}).color;
            }

            if (hasValue(text) && text !== "") {
                this.legendItems.push({
                    active: pointVisible,
                    pointIndex: options.index,
                    text: text,
                    series: options.series,
                    markerColor: markerColor,
                    labels: itemLabelOptions
                });
            }
        }
    }
};

var PIE_SECTOR_ANIM_DELAY = 70;

var PieChart = (function (ChartElement$$1) {
    function PieChart(plotArea, options) {
        ChartElement$$1.call(this, options);

        this.plotArea = plotArea;
        this.chartService = plotArea.chartService;
        this.points = [];
        this.legendItems = [];
        this.render();
    }

    if ( ChartElement$$1 ) PieChart.__proto__ = ChartElement$$1;
    PieChart.prototype = Object.create( ChartElement$$1 && ChartElement$$1.prototype );
    PieChart.prototype.constructor = PieChart;

    PieChart.prototype.render = function render () {
        this.traverseDataPoints(this.addValue.bind(this));
    };

    PieChart.prototype.traverseDataPoints = function traverseDataPoints (callback) {
        var this$1 = this;

        var ref = this;
        var options = ref.options;
        var seriesColors = ref.plotArea.options.seriesColors; if ( seriesColors === void 0 ) seriesColors = [];
        var colorsCount = seriesColors.length;
        var series = options.series;
        var seriesCount = series.length;

        for (var seriesIx = 0; seriesIx < seriesCount; seriesIx++) {
            var currentSeries = series[seriesIx];
            var data = currentSeries.data;
            var ref$1 = bindSegments(currentSeries);
            var total = ref$1.total;
            var points = ref$1.points;
            var count = ref$1.count;
            var anglePerValue = 360 / total;
            var constantAngle = (void 0);
            if (!isFinite(anglePerValue)) {
                constantAngle = 360 / count;
            }
            var currentAngle = (void 0);

            if (defined(currentSeries.startAngle)) {
                currentAngle = currentSeries.startAngle;
            } else {
                currentAngle = options.startAngle;
            }

            if (seriesIx !== seriesCount - 1) {
                if (currentSeries.labels.position === OUTSIDE_END) {
                    currentSeries.labels.position = CENTER;
                }
            }

            for (var i = 0; i < points.length; i++) {
                var pointData = points[i];
                if (!pointData) {
                    continue;
                }

                var fields = pointData.fields;
                var value = pointData.value;
                var visible = pointData.visible;
                var angle = value !== 0 ? (constantAngle || (value * anglePerValue)) : 0;
                var explode = data.length !== 1 && Boolean(fields.explode);

                if (!isFunction(currentSeries.color)) {
                    currentSeries.color = fields.color || seriesColors[i % colorsCount];
                }

                callback(pointData.valueFields.value, new Ring(null, 0, 0, currentAngle, angle), {
                    owner: this$1,
                    category: defined(fields.category) ? fields.category : "",
                    index: i,
                    series: currentSeries,
                    seriesIx: seriesIx,
                    dataItem: data[i],
                    percentage: total !== 0 ? value / total : 0,
                    explode: explode,
                    visibleInLegend: fields.visibleInLegend,
                    visible: visible,
                    zIndex: seriesCount - seriesIx,
                    animationDelay: this$1.animationDelay(i, seriesIx, seriesCount)
                });

                if (visible !== false) {
                    currentAngle += angle;
                }
            }
        }
    };

    PieChart.prototype.evalSegmentOptions = function evalSegmentOptions (options, value, fields) {
        var series = fields.series;

        evalOptions(options, {
            value: value,
            series: series,
            dataItem: fields.dataItem,
            category: fields.category,
            percentage: fields.percentage
        }, { defaults: series._defaults, excluded: [ "data", "content", "template", "visual", "toggle" ] });
    };

    PieChart.prototype.addValue = function addValue (value, sector, fields) {
        var segmentOptions = deepExtend({}, fields.series, { index: fields.index });
        this.evalSegmentOptions(segmentOptions, value, fields);

        this.createLegendItem(value, segmentOptions, fields);

        if (fields.visible === false) {
            return;
        }

        var segment = new PieSegment(value, sector, segmentOptions);
        Object.assign(segment, fields);
        this.append(segment);
        this.points.push(segment);
    };

    PieChart.prototype.reflow = function reflow (targetBox) {
        var ref = this;
        var options = ref.options;
        var points = ref.points;
        var seriesConfigs = ref.seriesConfigs; if ( seriesConfigs === void 0 ) seriesConfigs = [];
        var count = points.length;
        var box = targetBox.clone();
        var space = 5;
        var minWidth = Math.min(box.width(), box.height());
        var halfMinWidth = minWidth / 2;
        var defaultPadding = minWidth - minWidth * 0.85;
        var newBox = new Box(box.x1, box.y1, box.x1 + minWidth, box.y1 + minWidth);
        var newBoxCenter = newBox.center();
        var boxCenter = box.center();
        var seriesCount = options.series.length;
        var leftSideLabels = [];
        var rightSideLabels = [];
        var padding = valueOrDefault(options.padding, defaultPadding);

        this.targetBox = targetBox;

        padding = padding > halfMinWidth - space ? halfMinWidth - space : padding;
        newBox.translate(boxCenter.x - newBoxCenter.x, boxCenter.y - newBoxCenter.y);

        var radius = halfMinWidth - padding;
        var center = new Point(
            radius + newBox.x1 + padding,
            radius + newBox.y1 + padding
        );

        for (var i = 0; i < count; i++) {
            var segment = points[i];
            var sector = segment.sector;
            var seriesIndex = segment.seriesIx;
            sector.radius = radius;
            sector.center = center;

            if (seriesConfigs.length) {
                var seriesConfig = seriesConfigs[seriesIndex];
                sector.innerRadius = seriesConfig.innerRadius;
                sector.radius = seriesConfig.radius;
            }

            if (seriesIndex === seriesCount - 1 && segment.explode) {
                sector.center = sector.clone().setRadius(sector.radius * 0.15).point(sector.middle());
            }

            segment.reflow(newBox);

            var label = segment.label;
            if (label) {
                if (label.options.position === OUTSIDE_END) {
                    if (seriesIndex === seriesCount - 1) {
                        if (label.orientation === RIGHT) {
                            rightSideLabels.push(label);
                        } else {
                            leftSideLabels.push(label);
                        }
                    }
                }
            }
        }

        if (leftSideLabels.length > 0) {
            leftSideLabels.sort(this.labelComparator(true));
            this.leftLabelsReflow(leftSideLabels);
        }

        if (rightSideLabels.length > 0) {
            rightSideLabels.sort(this.labelComparator(false));
            this.rightLabelsReflow(rightSideLabels);
        }

        this.box = newBox;
    };

    PieChart.prototype.leftLabelsReflow = function leftLabelsReflow (labels) {
        var distances = this.distanceBetweenLabels(labels);

        this.distributeLabels(distances, labels);
    };

    PieChart.prototype.rightLabelsReflow = function rightLabelsReflow (labels) {
        var distances = this.distanceBetweenLabels(labels);

        this.distributeLabels(distances, labels);
    };

    PieChart.prototype.distanceBetweenLabels = function distanceBetweenLabels (labels) {
        var segment = last(this.points);
        var sector = segment.sector;
        var count = labels.length - 1;
        var lr = sector.radius + segment.options.labels.distance;
        var distances = [];
        var firstBox = labels[0].box;
        var distance = round(firstBox.y1 - (sector.center.y - lr - firstBox.height() - firstBox.height() / 2));

        distances.push(distance);

        for (var i = 0; i < count; i++) {
            var secondBox = labels[i + 1].box;

            firstBox = labels[i].box;
            distance = round(secondBox.y1 - firstBox.y2);
            distances.push(distance);
        }
        distance = round(sector.center.y + lr - labels[count].box.y2 - labels[count].box.height() / 2);
        distances.push(distance);

        return distances;
    };

    PieChart.prototype.distributeLabels = function distributeLabels (distances, labels) {
        var this$1 = this;

        var count = distances.length;
        var left, right, remaining;

        for (var i = 0; i < count; i++) {
            remaining = -distances[i];
            left = right = i;

            while (remaining > 0 && (left >= 0 || right < count)) {
                remaining = this$1._takeDistance(distances, i, --left, remaining);
                remaining = this$1._takeDistance(distances, i, ++right, remaining);
            }
        }

        this.reflowLabels(distances, labels);
    };

    PieChart.prototype._takeDistance = function _takeDistance (distances, anchor, position, amount) {
        var result = amount;
        if (distances[position] > 0) {
            var available = Math.min(distances[position], result);
            result -= available;
            distances[position] -= available;
            distances[anchor] += available;
        }

        return result;
    };

    PieChart.prototype.reflowLabels = function reflowLabels (distances, labels) {
        var this$1 = this;

        var segment = last(this.points);
        var sector = segment.sector;
        var labelOptions = segment.options.labels;
        var labelsCount = labels.length;
        var labelDistance = labelOptions.distance;
        var boxY = sector.center.y - (sector.radius + labelDistance) - labels[0].box.height();
        var boxX;

        distances[0] += 2;
        for (var i = 0; i < labelsCount; i++) {
            var label = labels[i];
            var box = label.box;

            boxY += distances[i];
            boxX = this$1.hAlignLabel(
                box.x2,
                sector.clone().expand(labelDistance),
                boxY,
                boxY + box.height(),
                label.orientation === RIGHT);

            if (label.orientation === RIGHT) {
                if (labelOptions.align !== CIRCLE) {
                    boxX = sector.radius + sector.center.x + labelDistance;
                }
                label.reflow(new Box(boxX + box.width(), boxY, boxX, boxY));
            } else {
                if (labelOptions.align !== CIRCLE) {
                    boxX = sector.center.x - sector.radius - labelDistance;
                }
                label.reflow(new Box(boxX - box.width(), boxY, boxX, boxY));
            }

            boxY += box.height();
        }
    };

    PieChart.prototype.createVisual = function createVisual () {
        var this$1 = this;

        var ref = this;
        var connectors = ref.options.connectors;
        var points = ref.points;
        var count = points.length;
        var space = 4;

        ChartElement$$1.prototype.createVisual.call(this);

        this._connectorLines = [];

        for (var i = 0; i < count; i++) {
            var segment = points[i];
            var sector = segment.sector;
            var label = segment.label;
            var angle = sector.middle();
            var connectorsColor = (segment.options.connectors || {}).color || connectors.color;

            if (label) {
                var connectorLine = new _progress_kendoDrawing.drawing.Path({
                    stroke: {
                        color: connectorsColor,
                        width: connectors.width
                    },
                    animation: {
                        type: FADEIN,
                        delay: segment.animationDelay
                    }
                });

                if (label.options.position === OUTSIDE_END) {
                    var box = label.box;
                    var centerPoint = sector.center;
                    var start = sector.point(angle);
                    var middle = new Point(box.x1, box.center().y);
                    var sr = (void 0), end = (void 0), crossing = (void 0);

                    start = sector.clone().expand(connectors.padding).point(angle);
                    connectorLine.moveTo(start.x, start.y);
                    // TODO: Extract into a method to remove duplication
                    if (label.orientation === RIGHT) {
                        end = new Point(box.x1 - connectors.padding, box.center().y);
                        crossing = intersection(centerPoint, start, middle, end);
                        middle = new Point(end.x - space, end.y);
                        crossing = crossing || middle;
                        crossing.x = Math.min(crossing.x, middle.x);

                        if (this$1.pointInCircle(crossing, sector.center, sector.radius + space) ||
                            crossing.x < sector.center.x) {
                            sr = sector.center.x + sector.radius + space;
                            if (segment.options.labels.align !== COLUMN) {
                                if (sr < middle.x) {
                                    connectorLine.lineTo(sr, start.y);
                                } else {
                                    connectorLine.lineTo(start.x + space * 2, start.y);
                                }
                            } else {
                                connectorLine.lineTo(sr, start.y);
                            }
                            connectorLine.lineTo(middle.x, end.y);
                        } else {
                            crossing.y = end.y;
                            connectorLine.lineTo(crossing.x, crossing.y);
                        }
                    } else {
                        end = new Point(box.x2 + connectors.padding, box.center().y);
                        crossing = intersection(centerPoint, start, middle, end);
                        middle = new Point(end.x + space, end.y);
                        crossing = crossing || middle;
                        crossing.x = Math.max(crossing.x, middle.x);

                        if (this$1.pointInCircle(crossing, sector.center, sector.radius + space) ||
                            crossing.x > sector.center.x) {
                            sr = sector.center.x - sector.radius - space;
                            if (segment.options.labels.align !== COLUMN) {
                                if (sr > middle.x) {
                                    connectorLine.lineTo(sr, start.y);
                                } else {
                                    connectorLine.lineTo(start.x - space * 2, start.y);
                                }
                            } else {
                                connectorLine.lineTo(sr, start.y);
                            }
                            connectorLine.lineTo(middle.x, end.y);
                        } else {
                            crossing.y = end.y;
                            connectorLine.lineTo(crossing.x, crossing.y);
                        }
                    }

                    connectorLine.lineTo(end.x, end.y);

                    this$1._connectorLines.push(connectorLine);
                    this$1.visual.append(connectorLine);
                }
            }
        }
    };

    PieChart.prototype.renderVisual = function renderVisual () {
        ChartElement$$1.prototype.renderVisual.call(this);

        if (find(this.options.series, function (options) { return options.autoFit; })) {
            var targetBox = this.targetBox;
            var pieCenter = this.box.center();
            var bbox = this.visual.bbox();
            if (!bbox) {
                return;
            }

            var bboxBottom = bbox.bottomRight();

            var scale = Math.min(
                (pieCenter.y - targetBox.y1) / (pieCenter.y - bbox.origin.y),
                (targetBox.y2 - pieCenter.y) / (bboxBottom.y - pieCenter.y),
                (pieCenter.x - targetBox.x1) / (pieCenter.x - bbox.origin.x),
                (targetBox.x2 - pieCenter.x) / (bboxBottom.x - pieCenter.x)
            );

            if (scale < 1) {
                this.visual.transform(_progress_kendoDrawing.geometry.transform().scale(scale, scale, [ pieCenter.x, pieCenter.y ]));
            }
        }
    };

    PieChart.prototype.labelComparator = function labelComparator (reverse) {
        var reverseValue = reverse ? -1 : 1;

        return function(a, b) {
            var first = (a.parent.sector.middle() + 270) % 360;
            var second = (b.parent.sector.middle() + 270) % 360;
            return (first - second) * reverseValue;
        };
    };

    PieChart.prototype.hAlignLabel = function hAlignLabel (originalX, sector, y1, y2, direction) {
        var radius = sector.radius;
        var sector_center = sector.center;
        var cx = sector_center.x;
        var cy = sector_center.y;
        var t = Math.min(Math.abs(cy - y1), Math.abs(cy - y2));

        if (t > radius) {
            return originalX;
        }

        return cx + Math.sqrt((radius * radius) - (t * t)) * (direction ? 1 : -1);
    };

    PieChart.prototype.pointInCircle = function pointInCircle (point, center, radius) {
        return Math.pow(center.x - point.x, 2) + Math.pow(center.y - point.y, 2) < Math.pow(radius, 2);
    };

    PieChart.prototype.formatPointValue = function formatPointValue (point, format) {
        return this.chartService.format.auto(format, point.value);
    };

    PieChart.prototype.animationDelay = function animationDelay (categoryIndex) {
        return categoryIndex * PIE_SECTOR_ANIM_DELAY;
    };

    PieChart.prototype.stackRoot = function stackRoot () {
        return this;
    };

    return PieChart;
}(ChartElement));

function intersection(a1, a2, b1, b2) {
    var uat = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x);
    var ub = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);

    var result;
    if (ub !== 0) {
        var ua = (uat / ub);

        result = new Point(
            a1.x + ua * (a2.x - a1.x),
            a1.y + ua * (a2.y - a1.y)
        );
    }

    return result;
}

setDefaultOptions(PieChart, {
    startAngle: 90,
    connectors: {
        width: 2,
        color: "#939393",
        padding: 8
    },
    inactiveItems: {
        markers: {},
        labels: {}
    }
});

deepExtend(PieChart.prototype, PieChartMixin);

PieChart.prototype.isStackRoot = true;

var PiePlotArea = (function (PlotAreaBase$$1) {
    function PiePlotArea () {
        PlotAreaBase$$1.apply(this, arguments);
    }

    if ( PlotAreaBase$$1 ) PiePlotArea.__proto__ = PlotAreaBase$$1;
    PiePlotArea.prototype = Object.create( PlotAreaBase$$1 && PlotAreaBase$$1.prototype );
    PiePlotArea.prototype.constructor = PiePlotArea;

    PiePlotArea.prototype.render = function render () {
        this.createPieChart(this.series);
    };

    PiePlotArea.prototype.createPieChart = function createPieChart (series) {
        var firstSeries = series[0];
        var pieChart = new PieChart(this, {
            series: series,
            padding: firstSeries.padding,
            startAngle: firstSeries.startAngle,
            connectors: firstSeries.connectors,
            legend: this.options.legend
        });

        this.appendChart(pieChart);
    };

    PiePlotArea.prototype.appendChart = function appendChart (chart, pane) {
        PlotAreaBase$$1.prototype.appendChart.call(this, chart, pane);
        append$1(this.options.legend.items, chart.legendItems);
    };

    return PiePlotArea;
}(PlotAreaBase));

var DonutSegment = (function (PieSegment$$1) {
    function DonutSegment () {
        PieSegment$$1.apply(this, arguments);
    }

    if ( PieSegment$$1 ) DonutSegment.__proto__ = PieSegment$$1;
    DonutSegment.prototype = Object.create( PieSegment$$1 && PieSegment$$1.prototype );
    DonutSegment.prototype.constructor = DonutSegment;

    DonutSegment.prototype.reflowLabel = function reflowLabel () {
        var ref = this;
        var labelsOptions = ref.options.labels;
        var label = ref.label;
        var sector = this.sector.clone();
        var angle = sector.middle();

        if (label) {
            var labelHeight = label.box.height();
            if (labelsOptions.position === CENTER) {
                sector.radius -= (sector.radius - sector.innerRadius) / 2;

                var lp = sector.point(angle);

                label.reflow(new Box(lp.x, lp.y - labelHeight / 2, lp.x, lp.y));
            } else {
                PieSegment$$1.prototype.reflowLabel.call(this);
            }
        }
    };

    DonutSegment.prototype.createSegment = function createSegment (sector, options) {
        return ShapeBuilder.current.createRing(sector, options);
    };

    return DonutSegment;
}(PieSegment));

setDefaultOptions(DonutSegment, {
    overlay: {
        gradient: "roundedGlass"
    },
    labels: {
        position: CENTER
    },
    animation: {
        type: PIE
    }
});

deepExtend(DonutSegment.prototype, PointEventsMixin);

var DONUT_SECTOR_ANIM_DELAY = 50;

var DonutChart = (function (PieChart$$1) {
    function DonutChart () {
        PieChart$$1.apply(this, arguments);
    }

    if ( PieChart$$1 ) DonutChart.__proto__ = PieChart$$1;
    DonutChart.prototype = Object.create( PieChart$$1 && PieChart$$1.prototype );
    DonutChart.prototype.constructor = DonutChart;

    DonutChart.prototype.addValue = function addValue (value, sector, fields) {
        var segmentOptions = deepExtend({}, fields.series, { index: fields.index });
        this.evalSegmentOptions(segmentOptions, value, fields);

        this.createLegendItem(value, segmentOptions, fields);

        if (!value || fields.visible === false) {
            return;
        }

        var segment = new DonutSegment(value, sector, segmentOptions);

        Object.assign(segment, fields);
        this.append(segment);
        this.points.push(segment);
    };

    DonutChart.prototype.reflow = function reflow (targetBox) {
        var this$1 = this;

        var options = this.options;
        var box = targetBox.clone();
        var space = 5;
        var minWidth = Math.min(box.width(), box.height());
        var halfMinWidth = minWidth / 2;
        var defaultPadding = minWidth - minWidth * 0.85;
        var series = options.series;
        var seriesCount = series.length;

        var padding = valueOrDefault(options.padding, defaultPadding);
        padding = padding > halfMinWidth - space ? halfMinWidth - space : padding;

        var totalSize = halfMinWidth - padding;
        var seriesWithoutSize = 0;
        var holeSize;

        for (var i = 0; i < seriesCount; i++) {
            var currentSeries = series[i];
            if (i === 0) {
                if (defined(currentSeries.holeSize)) {
                    holeSize = currentSeries.holeSize;
                    totalSize -= currentSeries.holeSize;
                }
            }

            if (defined(currentSeries.size)) {
                totalSize -= currentSeries.size;
            } else {
                seriesWithoutSize++;
            }

            if (defined(currentSeries.margin) && i !== seriesCount - 1) {
                totalSize -= currentSeries.margin;
            }
        }

        if (!defined(holeSize)) {
            var currentSize = (halfMinWidth - padding) / (seriesCount + 0.75);
            holeSize = currentSize * 0.75;
            totalSize -= holeSize;
        }

        var innerRadius = holeSize;
        var margin = 0;
        var size, radius;

        this.seriesConfigs = [];

        for (var i$1 = 0; i$1 < seriesCount; i$1++) {
            var currentSeries$1 = series[i$1];
            size = valueOrDefault(currentSeries$1.size, totalSize / seriesWithoutSize);
            innerRadius += margin;
            radius = innerRadius + size;
            this$1.seriesConfigs.push({ innerRadius: innerRadius, radius: radius });
            margin = currentSeries$1.margin || 0;
            innerRadius = radius;
        }

        PieChart$$1.prototype.reflow.call(this, targetBox);
    };

    DonutChart.prototype.animationDelay = function animationDelay (categoryIndex, seriesIndex, seriesCount) {
        return categoryIndex * DONUT_SECTOR_ANIM_DELAY +
            (INITIAL_ANIMATION_DURATION * (seriesIndex + 1) / (seriesCount + 1));
    };

    return DonutChart;
}(PieChart));


setDefaultOptions(DonutChart, {
    startAngle: 90,
    connectors: {
        width: 2,
        color: "#939393",
        padding: 8
    }
});

var DonutPlotArea = (function (PiePlotArea$$1) {
    function DonutPlotArea () {
        PiePlotArea$$1.apply(this, arguments);
    }

    if ( PiePlotArea$$1 ) DonutPlotArea.__proto__ = PiePlotArea$$1;
    DonutPlotArea.prototype = Object.create( PiePlotArea$$1 && PiePlotArea$$1.prototype );
    DonutPlotArea.prototype.constructor = DonutPlotArea;

    DonutPlotArea.prototype.render = function render () {
        this.createDonutChart(this.series);
    };

    DonutPlotArea.prototype.createDonutChart = function createDonutChart (series) {
        var firstSeries = series[0];
        var donutChart = new DonutChart(this, {
            series: series,
            padding: firstSeries.padding,
            connectors: firstSeries.connectors,
            legend: this.options.legend
        });

        this.appendChart(donutChart);
    };

    return DonutPlotArea;
}(PiePlotArea));

var DEFAULT_PADDING = 0.15;

var PolarPlotAreaBase = (function (PlotAreaBase$$1) {
    function PolarPlotAreaBase () {
        PlotAreaBase$$1.apply(this, arguments);
    }

    if ( PlotAreaBase$$1 ) PolarPlotAreaBase.__proto__ = PlotAreaBase$$1;
    PolarPlotAreaBase.prototype = Object.create( PlotAreaBase$$1 && PlotAreaBase$$1.prototype );
    PolarPlotAreaBase.prototype.constructor = PolarPlotAreaBase;

    PolarPlotAreaBase.prototype.initFields = function initFields () {
        this.valueAxisRangeTracker = new AxisGroupRangeTracker();
    };

    PolarPlotAreaBase.prototype.render = function render () {
        this.addToLegend(this.series);
        this.createPolarAxis();
        this.createCharts();
        this.createValueAxis();
    };

    PolarPlotAreaBase.prototype.alignAxes = function alignAxes () {
        var axis = this.valueAxis;
        var range = axis.range();
        var crossingValue = axis.options.reverse ? range.max : range.min;
        var slot = axis.getSlot(crossingValue);
        var center = this.polarAxis.getSlot(0).center;
        var axisBox = axis.box.translate(
            center.x - slot.x1,
            center.y - slot.y1
        );

        axis.reflow(axisBox);
    };

    PolarPlotAreaBase.prototype.createValueAxis = function createValueAxis () {
        var tracker = this.valueAxisRangeTracker;
        var defaultRange = tracker.query();
        var axisOptions = this.valueAxisOptions({
            roundToMajorUnit: false,
            zIndex: -1
        });
        var axisType, axisDefaultRange;

        if (axisOptions.type === LOGARITHMIC) {
            axisType = RadarLogarithmicAxis;
            axisDefaultRange = { min: 0.1, max: 1 };
        } else {
            axisType = RadarNumericAxis;
            axisDefaultRange = { min: 0, max: 1 };
        }

        var range = tracker.query(name) || defaultRange || axisDefaultRange;

        if (range && defaultRange) {
            range.min = Math.min(range.min, defaultRange.min);
            range.max = Math.max(range.max, defaultRange.max);
        }

        var valueAxis = new axisType(
            range.min, range.max,
            axisOptions,
            this.chartService
        );

        this.valueAxis = valueAxis;
        this.appendAxis(valueAxis);
    };

    PolarPlotAreaBase.prototype.reflowAxes = function reflowAxes () {
        var ref = this;
        var options = ref.options.plotArea;
        var valueAxis = ref.valueAxis;
        var polarAxis = ref.polarAxis;
        var box = ref.box;
        var defaultPadding = Math.min(box.width(), box.height()) * DEFAULT_PADDING;
        var padding = getSpacing(options.padding || {}, defaultPadding);
        var paddingBox = box.clone().unpad(padding);
        var axisBox = paddingBox.clone();

        axisBox.y2 = axisBox.y1 + Math.min(axisBox.width(), axisBox.height());
        axisBox.align(paddingBox, Y, CENTER);

        var valueAxisBox = axisBox.clone().shrink(0, axisBox.height() / 2);

        polarAxis.reflow(axisBox);
        valueAxis.reflow(valueAxisBox);
        var heightDiff = valueAxis.lineBox().height() - valueAxis.box.height();
        valueAxis.reflow(valueAxis.box.unpad({ top: heightDiff }));

        this.axisBox = axisBox;
        this.alignAxes(axisBox);
    };

    PolarPlotAreaBase.prototype.backgroundBox = function backgroundBox () {
        return this.box;
    };

    PolarPlotAreaBase.prototype.detachLabels = function detachLabels () {};

    return PolarPlotAreaBase;
}(PlotAreaBase));

var PolarScatterChart = (function (ScatterChart$$1) {
    function PolarScatterChart () {
        ScatterChart$$1.apply(this, arguments);
    }

    if ( ScatterChart$$1 ) PolarScatterChart.__proto__ = ScatterChart$$1;
    PolarScatterChart.prototype = Object.create( ScatterChart$$1 && ScatterChart$$1.prototype );
    PolarScatterChart.prototype.constructor = PolarScatterChart;

    PolarScatterChart.prototype.pointSlot = function pointSlot (slotX, slotY) {
        var valueRadius = slotX.center.y - slotY.y1;
        var slot = Point.onCircle(slotX.center, slotX.startAngle, valueRadius);

        return new Box(slot.x, slot.y, slot.x, slot.y);
    };

    return PolarScatterChart;
}(ScatterChart));

setDefaultOptions(PolarScatterChart, {
    clip: false
});

var PolarLineChart = (function (ScatterLineChart$$1) {
    function PolarLineChart () {
        ScatterLineChart$$1.apply(this, arguments);
    }if ( ScatterLineChart$$1 ) PolarLineChart.__proto__ = ScatterLineChart$$1;
    PolarLineChart.prototype = Object.create( ScatterLineChart$$1 && ScatterLineChart$$1.prototype );
    PolarLineChart.prototype.constructor = PolarLineChart;

    

    return PolarLineChart;
}(ScatterLineChart));

PolarLineChart.prototype.pointSlot = PolarScatterChart.prototype.pointSlot;

setDefaultOptions(PolarLineChart, {
    clip: false
});

var SplinePolarAreaSegment = (function (SplineAreaSegment$$1) {
    function SplinePolarAreaSegment () {
        SplineAreaSegment$$1.apply(this, arguments);
    }

    if ( SplineAreaSegment$$1 ) SplinePolarAreaSegment.__proto__ = SplineAreaSegment$$1;
    SplinePolarAreaSegment.prototype = Object.create( SplineAreaSegment$$1 && SplineAreaSegment$$1.prototype );
    SplinePolarAreaSegment.prototype.constructor = SplinePolarAreaSegment;

    SplinePolarAreaSegment.prototype.fillToAxes = function fillToAxes (fillPath) {
        var center = this._polarAxisCenter();
        fillPath.lineTo(center.x, center.y);
    };

    SplinePolarAreaSegment.prototype._polarAxisCenter = function _polarAxisCenter () {
        var polarAxis = this.parent.plotArea.polarAxis;
        var center = polarAxis.box.center();
        return center;
    };

    SplinePolarAreaSegment.prototype.strokeSegments = function strokeSegments () {
        var segments = this._strokeSegments;

        if (!segments) {
            var center = this._polarAxisCenter();
            var curveProcessor = new CurveProcessor(false);
            var linePoints = this.points();

            linePoints.push(center);
            segments = this._strokeSegments = curveProcessor.process(linePoints);
            segments.pop();
        }

        return segments;
    };

    return SplinePolarAreaSegment;
}(SplineAreaSegment));

var PolarAreaSegment = (function (AreaSegment$$1) {
    function PolarAreaSegment () {
        AreaSegment$$1.apply(this, arguments);
    }

    if ( AreaSegment$$1 ) PolarAreaSegment.__proto__ = AreaSegment$$1;
    PolarAreaSegment.prototype = Object.create( AreaSegment$$1 && AreaSegment$$1.prototype );
    PolarAreaSegment.prototype.constructor = PolarAreaSegment;

    PolarAreaSegment.prototype.fillToAxes = function fillToAxes (fillPath) {
        var polarAxis = this.parent.plotArea.polarAxis;
        var center = polarAxis.box.center();
        var centerSegment = new _progress_kendoDrawing.geometry.Segment([ center.x, center.y ]);

        fillPath.segments.unshift(centerSegment);
        fillPath.segments.push(centerSegment);
    };

    return PolarAreaSegment;
}(AreaSegment));

var PolarAreaChart = (function (PolarLineChart$$1) {
    function PolarAreaChart () {
        PolarLineChart$$1.apply(this, arguments);
    }

    if ( PolarLineChart$$1 ) PolarAreaChart.__proto__ = PolarLineChart$$1;
    PolarAreaChart.prototype = Object.create( PolarLineChart$$1 && PolarLineChart$$1.prototype );
    PolarAreaChart.prototype.constructor = PolarAreaChart;

    PolarAreaChart.prototype.createSegment = function createSegment (linePoints, currentSeries, seriesIx) {
        var style = (currentSeries.line || {}).style;
        var segment;

        if (style === SMOOTH) {
            segment = new SplinePolarAreaSegment(linePoints, currentSeries, seriesIx);
        } else {
            segment = new PolarAreaSegment(linePoints, currentSeries, seriesIx);
        }
        return segment;
    };

    PolarAreaChart.prototype.createMissingValue = function createMissingValue (value, missingValues) {
        var missingValue;

        if (hasValue(value.x) && missingValues !== INTERPOLATE) {
            missingValue = {
                x: value.x,
                y: value.y
            };
            if (missingValues === ZERO) {
                missingValue.y = 0;
            }
        }

        return missingValue;
    };

    PolarAreaChart.prototype.seriesMissingValues = function seriesMissingValues (series) {
        return series.missingValues || ZERO;
    };

    PolarAreaChart.prototype._hasMissingValuesGap = function _hasMissingValuesGap () {
        var this$1 = this;

        var series = this.options.series;

        for (var idx = 0; idx < series.length; idx++) {
            if (this$1.seriesMissingValues(series[idx]) === GAP) {
                return true;
            }
        }
    };

    PolarAreaChart.prototype.sortPoints = function sortPoints (points) {
        var this$1 = this;

        points.sort(xComparer);

        if (this._hasMissingValuesGap()) {
            for (var idx = 0; idx < points.length; idx++) {
                var point = points[idx];
                if (point) {
                    var value = point.value;
                    if (!hasValue(value.y) && this$1.seriesMissingValues(point.series) === GAP) {
                        delete points[idx];
                    }
                }
            }
        }

        return points;
    };

    return PolarAreaChart;
}(PolarLineChart));

function xComparer(a, b) {
    return a.value.x - b.value.x;
}

var PolarPlotArea = (function (PolarPlotAreaBase$$1) {
    function PolarPlotArea () {
        PolarPlotAreaBase$$1.apply(this, arguments);
    }

    if ( PolarPlotAreaBase$$1 ) PolarPlotArea.__proto__ = PolarPlotAreaBase$$1;
    PolarPlotArea.prototype = Object.create( PolarPlotAreaBase$$1 && PolarPlotAreaBase$$1.prototype );
    PolarPlotArea.prototype.constructor = PolarPlotArea;

    PolarPlotArea.prototype.createPolarAxis = function createPolarAxis () {
        var polarAxis = new PolarAxis(this.options.xAxis, this.chartService);

        this.polarAxis = polarAxis;
        this.axisX = polarAxis;
        this.appendAxis(polarAxis);
    };

    PolarPlotArea.prototype.valueAxisOptions = function valueAxisOptions (defaults) {
        return deepExtend(defaults, {
            majorGridLines: { type: ARC },
            minorGridLines: { type: ARC }
        }, this.options.yAxis);
    };

    PolarPlotArea.prototype.createValueAxis = function createValueAxis () {
        PolarPlotAreaBase$$1.prototype.createValueAxis.call(this);
        this.axisY = this.valueAxis;
    };

    PolarPlotArea.prototype.appendChart = function appendChart (chart, pane) {
        this.valueAxisRangeTracker.update(chart.yAxisRanges);

        PlotAreaBase.prototype.appendChart.call(this, chart, pane);
    };

    PolarPlotArea.prototype.createCharts = function createCharts () {
        var series = this.filterVisibleSeries(this.series);
        var pane = this.panes[0];

        this.createLineChart(
            filterSeriesByType(series, [ POLAR_LINE ]),
            pane
        );

        this.createScatterChart(
            filterSeriesByType(series, [ POLAR_SCATTER ]),
            pane
        );

        this.createAreaChart(
            filterSeriesByType(series, [ POLAR_AREA ]),
            pane
        );
    };

    PolarPlotArea.prototype.createLineChart = function createLineChart (series, pane) {
        if (series.length === 0) {
            return;
        }

        var lineChart = new PolarLineChart(this, { series: series });

        this.appendChart(lineChart, pane);
    };

    PolarPlotArea.prototype.createScatterChart = function createScatterChart (series, pane) {
        if (series.length === 0) {
            return;
        }

        var scatterChart = new PolarScatterChart(this, { series: series });

        this.appendChart(scatterChart, pane);
    };

    PolarPlotArea.prototype.createAreaChart = function createAreaChart (series, pane) {
        if (series.length === 0) {
            return;
        }

        var areaChart = new PolarAreaChart(this, { series: series });

        this.appendChart(areaChart, pane);
    };

    PolarPlotArea.prototype._dispatchEvent = function _dispatchEvent (chart, e, eventType) {
        var coords = chart._eventCoordinates(e);
        var point = new Point(coords.x, coords.y);
        var xValue = this.axisX.getValue(point);
        var yValue = this.axisY.getValue(point);

        if (xValue !== null && yValue !== null) {
            chart.trigger(eventType, {
                element: eventElement(e),
                x: xValue,
                y: yValue
            });
        }
    };

    PolarPlotArea.prototype.createCrosshairs = function createCrosshairs () {};

    return PolarPlotArea;
}(PolarPlotAreaBase));

setDefaultOptions(PolarPlotArea, {
    xAxis: {},
    yAxis: {}
});

deepExtend(PolarPlotArea.prototype, PlotAreaEventsMixin);

function groupBySeriesIx(segments) {
    var seriesSegments = [];
    for (var idx = 0; idx < segments.length; idx++) {
        var segment = segments[idx];
        seriesSegments[segment.seriesIx] = seriesSegments[segment.seriesIx] || [];
        seriesSegments[segment.seriesIx].push(segment);
    }

    return seriesSegments;
}

var RadarLineChart = (function (LineChart$$1) {
    function RadarLineChart () {
        LineChart$$1.apply(this, arguments);
    }

    if ( LineChart$$1 ) RadarLineChart.__proto__ = LineChart$$1;
    RadarLineChart.prototype = Object.create( LineChart$$1 && LineChart$$1.prototype );
    RadarLineChart.prototype.constructor = RadarLineChart;

    RadarLineChart.prototype.pointSlot = function pointSlot (categorySlot, valueSlot) {
        var valueRadius = categorySlot.center.y - valueSlot.y1;
        var slot = Point.onCircle(categorySlot.center, categorySlot.middle(), valueRadius);

        return new Box(slot.x, slot.y, slot.x, slot.y);
    };

    RadarLineChart.prototype.renderSegments = function renderSegments () {
        LineChart$$1.prototype.renderSegments.call(this);

        if (this._segments && this._segments.length > 1) {
            var seriesSegments = groupBySeriesIx(this._segments);

            for (var idx = 0; idx < seriesSegments.length; idx++) {
                var segments = seriesSegments[idx];
                if (segments && segments.length > 1) {
                    var firstPoint = segments[0].linePoints[0];
                    var lastSegment = last(segments);
                    var lastPoint = last(lastSegment.linePoints);
                    var isFirstDataPoint = firstPoint.categoryIx === 0;
                    var isLastDataPoint = lastPoint.categoryIx === lastPoint.categoriesCount - 1;
                    if (isFirstDataPoint && isLastDataPoint) {
                        last(segments).linePoints.push(firstPoint);
                    }
                }
            }
        }
    };

    RadarLineChart.prototype.createSegment = function createSegment (linePoints, currentSeries, seriesIx) {
        var style = currentSeries.style;
        var pointType;

        if (style === SMOOTH) {
            pointType = SplineSegment;
        } else {
            pointType = LineSegment;
        }

        var segment = new pointType(linePoints, currentSeries, seriesIx);
        var missingValues = this.seriesMissingValues(currentSeries);

        if (linePoints.length === currentSeries.data.length || missingValues === INTERPOLATE) {
            segment.options.closed = true;
        }

        return segment;
    };

    return RadarLineChart;
}(LineChart));

setDefaultOptions(RadarLineChart, {
    clip: false,
    limitPoints: false
});

var SplineRadarAreaSegment = (function (SplineAreaSegment$$1) {
    function SplineRadarAreaSegment () {
        SplineAreaSegment$$1.apply(this, arguments);
    }

    if ( SplineAreaSegment$$1 ) SplineRadarAreaSegment.__proto__ = SplineAreaSegment$$1;
    SplineRadarAreaSegment.prototype = Object.create( SplineAreaSegment$$1 && SplineAreaSegment$$1.prototype );
    SplineRadarAreaSegment.prototype.constructor = SplineRadarAreaSegment;

    SplineRadarAreaSegment.prototype.fillToAxes = function fillToAxes () {};

    return SplineRadarAreaSegment;
}(SplineAreaSegment));

var RadarAreaSegment = (function (AreaSegment$$1) {
    function RadarAreaSegment () {
        AreaSegment$$1.apply(this, arguments);
    }

    if ( AreaSegment$$1 ) RadarAreaSegment.__proto__ = AreaSegment$$1;
    RadarAreaSegment.prototype = Object.create( AreaSegment$$1 && AreaSegment$$1.prototype );
    RadarAreaSegment.prototype.constructor = RadarAreaSegment;

    RadarAreaSegment.prototype.fillToAxes = function fillToAxes () {};

    return RadarAreaSegment;
}(AreaSegment));

var RadarAreaChart = (function (RadarLineChart$$1) {
    function RadarAreaChart () {
        RadarLineChart$$1.apply(this, arguments);
    }

    if ( RadarLineChart$$1 ) RadarAreaChart.__proto__ = RadarLineChart$$1;
    RadarAreaChart.prototype = Object.create( RadarLineChart$$1 && RadarLineChart$$1.prototype );
    RadarAreaChart.prototype.constructor = RadarAreaChart;

    RadarAreaChart.prototype.createSegment = function createSegment (linePoints, currentSeries, seriesIx, prevSegment) {
        var isStacked = this.options.isStacked;
        var style = (currentSeries.line || {}).style;
        var previousSegment;
        var stackPoints;
        var segment;

        if (isStacked && seriesIx > 0 && prevSegment) {
            stackPoints = prevSegment.linePoints.slice(0);
            previousSegment = prevSegment;
        }

        if (style === SMOOTH) {
            segment = new SplineRadarAreaSegment(linePoints, currentSeries, seriesIx, previousSegment, stackPoints);
            segment.options.closed = true;
        } else {
            linePoints.push(linePoints[0]);
            segment = new RadarAreaSegment(linePoints, currentSeries, seriesIx, previousSegment, stackPoints);
        }

        return segment;
    };

    RadarAreaChart.prototype.seriesMissingValues = function seriesMissingValues (series) {
        return series.missingValues || ZERO;
    };

    return RadarAreaChart;
}(RadarLineChart));

var RadarSegment = (function (DonutSegment$$1) {
    function RadarSegment(value, options) {
        DonutSegment$$1.call(this, value, null, options);
    }

    if ( DonutSegment$$1 ) RadarSegment.__proto__ = DonutSegment$$1;
    RadarSegment.prototype = Object.create( DonutSegment$$1 && DonutSegment$$1.prototype );
    RadarSegment.prototype.constructor = RadarSegment;

    return RadarSegment;
}(DonutSegment));

setDefaultOptions(RadarSegment, {
    overlay: {
        gradient: "none"
    },
    labels: {
        distance: 10
    }
});

var RadarClusterLayout = (function (ChartElement$$1) {
    function RadarClusterLayout(options) {
        ChartElement$$1.call(this, options);

        this.forEach = options.rtl ? forEachReverse : forEach;
    }

    if ( ChartElement$$1 ) RadarClusterLayout.__proto__ = ChartElement$$1;
    RadarClusterLayout.prototype = Object.create( ChartElement$$1 && ChartElement$$1.prototype );
    RadarClusterLayout.prototype.constructor = RadarClusterLayout;

    RadarClusterLayout.prototype.reflow = function reflow (sector) {
        var ref = this;
        var options = ref.options;
        var children = ref.children;
        var gap = options.gap;
        var spacing = options.spacing;
        var count = children.length;
        var slots = count + gap + (spacing * (count - 1));
        var slotAngle = sector.angle / slots;
        var angle = sector.startAngle + slotAngle * (gap / 2);

        this.forEach(children, function (child) {
            var slotSector = sector.clone();
            slotSector.startAngle = angle;
            slotSector.angle = slotAngle;

            if (child.sector) {
                slotSector.radius = child.sector.radius;
            }

            child.reflow(slotSector);
            child.sector = slotSector;

            angle += slotAngle + (slotAngle * spacing);
        });
    };

    return RadarClusterLayout;
}(ChartElement));

setDefaultOptions(RadarClusterLayout, {
    gap: 1,
    spacing: 0
});

var RadarStackLayout = (function (ChartElement$$1) {
    function RadarStackLayout () {
        ChartElement$$1.apply(this, arguments);
    }

    if ( ChartElement$$1 ) RadarStackLayout.__proto__ = ChartElement$$1;
    RadarStackLayout.prototype = Object.create( ChartElement$$1 && ChartElement$$1.prototype );
    RadarStackLayout.prototype.constructor = RadarStackLayout;

    RadarStackLayout.prototype.reflow = function reflow (sector) {
        var ref = this;
        var reverse = ref.options.reverse;
        var children = ref.children;
        var childrenCount = children.length;
        var first = reverse ? childrenCount - 1 : 0;
        var step = reverse ? -1 : 1;

        this.box = new Box();

        for (var i = first; i >= 0 && i < childrenCount; i += step) {
            var childSector = children[i].sector;
            childSector.startAngle = sector.startAngle;
            childSector.angle = sector.angle;
        }
    };

    return RadarStackLayout;
}(ChartElement));

var RadarBarChart = (function (BarChart$$1) {
    function RadarBarChart () {
        BarChart$$1.apply(this, arguments);
    }

    if ( BarChart$$1 ) RadarBarChart.__proto__ = BarChart$$1;
    RadarBarChart.prototype = Object.create( BarChart$$1 && BarChart$$1.prototype );
    RadarBarChart.prototype.constructor = RadarBarChart;

    RadarBarChart.prototype.pointType = function pointType () {
        return RadarSegment;
    };

    RadarBarChart.prototype.clusterType = function clusterType () {
        return RadarClusterLayout;
    };

    RadarBarChart.prototype.stackType = function stackType () {
        return RadarStackLayout;
    };

    RadarBarChart.prototype.categorySlot = function categorySlot (categoryAxis, categoryIx) {
        return categoryAxis.getSlot(categoryIx);
    };

    RadarBarChart.prototype.pointSlot = function pointSlot (categorySlot, valueSlot) {
        var slot = categorySlot.clone();
        var y = categorySlot.center.y;

        slot.radius = y - valueSlot.y1;
        slot.innerRadius = y - valueSlot.y2;

        return slot;
    };

    RadarBarChart.prototype.reflowPoint = function reflowPoint (point, pointSlot) {
        point.sector = pointSlot;
        point.reflow();
    };

    RadarBarChart.prototype.createAnimation = function createAnimation () {
        this.options.animation.center = this.box.toRect().center();
        BarChart$$1.prototype.createAnimation.call(this);
    };

    return RadarBarChart;
}(BarChart));

RadarBarChart.prototype.reflow = CategoricalChart.prototype.reflow;

setDefaultOptions(RadarBarChart, {
    clip: false,
    limitPoints: false,
    animation: {
        type: "pie"
    }
});

var RadarPlotArea = (function (PolarPlotAreaBase$$1) {
    function RadarPlotArea () {
        PolarPlotAreaBase$$1.apply(this, arguments);
    }

    if ( PolarPlotAreaBase$$1 ) RadarPlotArea.__proto__ = PolarPlotAreaBase$$1;
    RadarPlotArea.prototype = Object.create( PolarPlotAreaBase$$1 && PolarPlotAreaBase$$1.prototype );
    RadarPlotArea.prototype.constructor = RadarPlotArea;

    RadarPlotArea.prototype.createPolarAxis = function createPolarAxis () {
        var categoryAxis = new RadarCategoryAxis(this.options.categoryAxis, this.chartService);

        this.polarAxis = categoryAxis;
        this.categoryAxis = categoryAxis;
        this.appendAxis(categoryAxis);
        this.aggregateCategories();
        this.createCategoryAxesLabels();
    };

    RadarPlotArea.prototype.valueAxisOptions = function valueAxisOptions (defaults) {
        if (this._hasBarCharts) {
            deepExtend(defaults, {
                majorGridLines: { type: ARC },
                minorGridLines: { type: ARC }
            });
        }

        if (this._isStacked100) {
            deepExtend(defaults, {
                roundToMajorUnit: false,
                labels: { format: "P0" }
            });
        }

        return deepExtend(defaults, this.options.valueAxis);
    };

    RadarPlotArea.prototype.aggregateCategories = function aggregateCategories () {
        // No separate panes in radar charts
        CategoricalPlotArea.prototype.aggregateCategories.call(this, this.panes);
    };

    RadarPlotArea.prototype.createCategoryAxesLabels = function createCategoryAxesLabels () {
        CategoricalPlotArea.prototype.createCategoryAxesLabels.call(this, this.panes);
    };

    RadarPlotArea.prototype.filterSeries = function filterSeries (currentSeries) {
        // Not supported for radar charts
        return currentSeries;
    };

    RadarPlotArea.prototype.createCharts = function createCharts () {
        var series = this.filterVisibleSeries(this.series);
        var pane = this.panes[0];

        this.createAreaChart(
            filterSeriesByType(series, [ RADAR_AREA ]),
            pane
        );

        this.createLineChart(
            filterSeriesByType(series, [ RADAR_LINE ]),
            pane
        );

        this.createBarChart(
            filterSeriesByType(series, [ RADAR_COLUMN ]),
            pane
        );
    };

    RadarPlotArea.prototype.chartOptions = function chartOptions (series) {
        var options = { series: series };
        var firstSeries = series[0];
        if (firstSeries) {
            var filteredSeries = this.filterVisibleSeries(series);
            var stack = firstSeries.stack;
            options.isStacked = stack && filteredSeries.length > 1;
            options.isStacked100 = stack && stack.type === "100%" && filteredSeries.length > 1;

            if (options.isStacked100) {
                this._isStacked100 = true;
            }
        }

        return options;
    };

    RadarPlotArea.prototype.createAreaChart = function createAreaChart (series, pane) {
        if (series.length === 0) {
            return;
        }

        var areaChart = new RadarAreaChart(this, this.chartOptions(series));
        this.appendChart(areaChart, pane);
    };

    RadarPlotArea.prototype.createLineChart = function createLineChart (series, pane) {
        if (series.length === 0) {
            return;
        }

        var lineChart = new RadarLineChart(this, this.chartOptions(series));
        this.appendChart(lineChart, pane);
    };

    RadarPlotArea.prototype.createBarChart = function createBarChart (series, pane) {
        if (series.length === 0) {
            return;
        }

        var firstSeries = series[0];
        var options = this.chartOptions(series);
        options.gap = firstSeries.gap;
        options.spacing = firstSeries.spacing;

        var barChart = new RadarBarChart(this, options);
        this.appendChart(barChart, pane);

        this._hasBarCharts = true;
    };

    RadarPlotArea.prototype.seriesCategoryAxis = function seriesCategoryAxis () {
        return this.categoryAxis;
    };

    RadarPlotArea.prototype._dispatchEvent = function _dispatchEvent (chart, e, eventType) {
        var coords = chart._eventCoordinates(e);
        var point = new Point(coords.x, coords.y);
        var category = this.categoryAxis.getCategory(point);
        var value = this.valueAxis.getValue(point);

        if (category !== null && value !== null) {
            chart.trigger(eventType, {
                element: eventElement(e),
                category: category,
                value: value
            });
        }
    };

    RadarPlotArea.prototype.createCrosshairs = function createCrosshairs () {};

    return RadarPlotArea;
}(PolarPlotAreaBase));

deepExtend(RadarPlotArea.prototype, PlotAreaEventsMixin, {
    appendChart: CategoricalPlotArea.prototype.appendChart,
    aggregateSeries: CategoricalPlotArea.prototype.aggregateSeries,
    seriesSourcePoints: CategoricalPlotArea.prototype.seriesSourcePoints
});

setDefaultOptions(RadarPlotArea, {
    categoryAxis: {
        categories: []
    },
    valueAxis: {}
});

var FunnelSegment = (function (ChartElement$$1) {
    function FunnelSegment(value, options, segmentOptions) {
        ChartElement$$1.call(this, options);

        this.value = value;
        this.options.index = segmentOptions.index;
    }

    if ( ChartElement$$1 ) FunnelSegment.__proto__ = ChartElement$$1;
    FunnelSegment.prototype = Object.create( ChartElement$$1 && ChartElement$$1.prototype );
    FunnelSegment.prototype.constructor = FunnelSegment;

    FunnelSegment.prototype.reflow = function reflow (chartBox) {
        var points = this.points;
        var label = this.children[0];

        this.box = new Box(points[0].x, points[0].y, points[1].x, points[2].y);

        if (label) {
            label.reflow(new Box(chartBox.x1, points[0].y, chartBox.x2, points[2].y));
        }
    };

    FunnelSegment.prototype.createVisual = function createVisual () {
        var this$1 = this;

        var options = this.options;
        var visual;

        ChartElement$$1.prototype.createVisual.call(this);

        if (options.visual) {
            visual = options.visual({
                category: this.category,
                dataItem: this.dataItem,
                value: this.value,
                series: this.series,
                percentage: this.percentage,
                points: this.points,
                options: options,
                sender: this.getSender(),
                createVisual: function () { return this$1.createPath(); }
            });
        } else {
            visual = this.createPath();
        }

        if (visual) {
            this.visual.append(visual);
        }
    };

    FunnelSegment.prototype.createPath = function createPath () {
        var options = this.options;
        var border = options.border;
        var path = _progress_kendoDrawing.drawing.Path.fromPoints(this.points, {
            fill: {
                color: options.color,
                opacity: options.opacity
            },
            stroke: {
                color: border.color,
                opacity: border.opacity,
                width: border.width
            }
        }).close();

        return path;
    };

    FunnelSegment.prototype.createHighlight = function createHighlight (style) {
        return _progress_kendoDrawing.drawing.Path.fromPoints(this.points, style);
    };

    FunnelSegment.prototype.highlightVisual = function highlightVisual () {
        return this.visual.children[0];
    };

    FunnelSegment.prototype.highlightVisualArgs = function highlightVisualArgs () {
        var path = _progress_kendoDrawing.drawing.Path.fromPoints(this.points).close();

        return {
            options: this.options,
            path: path
        };
    };

    FunnelSegment.prototype.tooltipAnchor = function tooltipAnchor () {
        var box = this.box;
        return {
            point: new Point(box.center().x, box.y1),
            align: {
                horizontal: "center",
                vertical: "top"
            }
        };
    };

    FunnelSegment.prototype.formatValue = function formatValue (format) {
        var point = this;
        return point.owner.formatPointValue(point, format);
    };

    return FunnelSegment;
}(ChartElement));

setDefaultOptions(FunnelSegment, {
    color: WHITE,
    border: {
        width: 1
    }
});

deepExtend(FunnelSegment.prototype, PointEventsMixin);

var FunnelChart = (function (ChartElement$$1) {
    function FunnelChart(plotArea, options) {
        ChartElement$$1.call(this, options);

        this.plotArea = plotArea;
        this.points = [];
        this.labels = [];
        this.legendItems = [];
        this.render();
    }

    if ( ChartElement$$1 ) FunnelChart.__proto__ = ChartElement$$1;
    FunnelChart.prototype = Object.create( ChartElement$$1 && ChartElement$$1.prototype );
    FunnelChart.prototype.constructor = FunnelChart;

    FunnelChart.prototype.formatPointValue = function formatPointValue (point, format) {
        return this.chartService.format.auto(format,point.value);
    };

    FunnelChart.prototype.render = function render () {
        var this$1 = this;

        var ref = this;
        var options = ref.options;
        var seriesColors = ref.plotArea.options.seriesColors; if ( seriesColors === void 0 ) seriesColors = [];
        var series = options.series[0];
        var data = series.data;

        if (!data) {
            return;
        }

        var ref$1 = bindSegments(series);
        var total = ref$1.total;
        var points = ref$1.points;

        for (var i = 0; i < points.length; i++) {
            var pointData = points[i];

            if (!pointData) {
                continue;
            }

            var fields = pointData.fields;

            if (!isFunction(series.color)) {
                series.color = fields.color || seriesColors[i % seriesColors.length];
            }

            fields = deepExtend({
                index: i,
                owner: this$1,
                series: series,
                dataItem: data[i],
                percentage: pointData.value / total
            }, fields, { visible: pointData.visible });

            var value = pointData.valueFields.value;
            var segment = this$1.createSegment(value, fields);
            var label = this$1.createLabel(value, fields);

            if (segment && label) {
                segment.append(label);
            }
        }
    };

    FunnelChart.prototype.evalSegmentOptions = function evalSegmentOptions (options, value, fields) {
        var series = fields.series;

        evalOptions(options, {
            value: value,
            series: series,
            dataItem: fields.dataItem,
            index: fields.index
        }, { defaults: series._defaults, excluded: [ "data", "content", "template", "toggle", "visual" ] });
    };

    FunnelChart.prototype.createSegment = function createSegment (value, fields) {
        var seriesOptions = deepExtend({}, fields.series);
        this.evalSegmentOptions(seriesOptions, value, fields);

        this.createLegendItem(value, seriesOptions, fields);

        if (fields.visible !== false) {

            var segment = new FunnelSegment(value, seriesOptions, fields);
            Object.assign(segment, fields);

            this.append(segment);
            this.points.push(segment);

            return segment;
        }
    };

    FunnelChart.prototype.createLabel = function createLabel (value, fields) {
        var series = fields.series;
        var dataItem = fields.dataItem;
        var labels = deepExtend({}, this.options.labels, series.labels);
        var text = value;

        if (labels.visible) {
            var labelTemplate = getTemplate(labels);
            var data = {
                dataItem: dataItem,
                value: value,
                percentage: fields.percentage,
                category: fields.category,
                series: series
            };
            if (labelTemplate) {
                text = labelTemplate(data);
            } else if (labels.format) {
                text = this.plotArea.chartService.format.auto(labels.format, text);
            }

            if (!labels.color) {
                var brightnessValue = new _progress_kendoDrawing.Color(series.color).percBrightness();
                if (brightnessValue > 180) {
                    labels.color = BLACK;
                } else {
                    labels.color = WHITE;
                }
                if (!labels.background) {
                    labels.background = series.color;
                }
            }

            this.evalSegmentOptions(labels, value, fields);
            var textBox = new TextBox(text, deepExtend({
                vAlign: labels.position
            }, labels), data);

            this.labels.push(textBox);

            return textBox;
        }
    };

    FunnelChart.prototype.labelPadding = function labelPadding () {
        var labels = this.labels;
        var padding = { left: 0, right: 0 };

        for (var i = 0; i < labels.length; i++) {
            var label = labels[i];
            var align = label.options.align;
            if (align !== CENTER) {
                var width = labels[i].box.width();

                if (align === LEFT) {
                    padding.left = Math.max(padding.left, width);
                } else {
                    padding.right = Math.max(padding.right, width);
                }
            }
        }

        return padding;
    };

    FunnelChart.prototype.dynamicSlopeReflow = function dynamicSlopeReflow (box, width, totalHeight) {
        var ref = this;
        var options = ref.options;
        var segments = ref.points;
        var count = segments.length;
        var firstSegment = segments[0];
        var maxSegment = firstSegment;

        for (var idx = 0; idx < segments.length; idx++) {
            if (segments[idx].percentage > maxSegment.percentage) {
                maxSegment = segments[idx];
            }
        }

        var lastUpperSide = (firstSegment.percentage / maxSegment.percentage) * width;
        var previousOffset = (width - lastUpperSide) / 2;
        var previousHeight = 0;

        for (var idx$1 = 0; idx$1 < count; idx$1++) {
            var percentage = segments[idx$1].percentage;
            var nextSegment = segments[idx$1 + 1];
            var nextPercentage = (nextSegment ? nextSegment.percentage : percentage);
            var points = segments[idx$1].points = [];
            var height = (options.dynamicHeight) ? (totalHeight * percentage) : (totalHeight / count);
            var offset = (void 0);

            if (!percentage) {
                offset = nextPercentage ? 0 : width / 2;
            } else {
                offset = (width - lastUpperSide * (nextPercentage / percentage)) / 2;
            }

            offset = limitValue(offset, 0, width);

            points.push(new _progress_kendoDrawing.geometry.Point(box.x1 + previousOffset, box.y1 + previousHeight));
            points.push(new _progress_kendoDrawing.geometry.Point(box.x1 + width - previousOffset, box.y1 + previousHeight));
            points.push(new _progress_kendoDrawing.geometry.Point(box.x1 + width - offset, box.y1 + height + previousHeight));
            points.push(new _progress_kendoDrawing.geometry.Point(box.x1 + offset, box.y1 + height + previousHeight));

            previousOffset = offset;
            previousHeight += height + options.segmentSpacing;
            lastUpperSide = limitValue(width - 2 * offset, 0, width);
        }
    };

    FunnelChart.prototype.constantSlopeReflow = function constantSlopeReflow (box, width, totalHeight) {
        var ref = this;
        var options = ref.options;
        var segments = ref.points;
        var count = segments.length;
        var decreasingWidth = options.neckRatio <= 1;
        var neckRatio = decreasingWidth ? options.neckRatio * width : width;
        var previousOffset = decreasingWidth ? 0 : (width - width / options.neckRatio) / 2;
        var topMostWidth = decreasingWidth ? width : width - previousOffset * 2;
        var finalNarrow = (topMostWidth - neckRatio) / 2;
        var previousHeight = 0;

        for (var idx = 0; idx < count; idx++) {
            var points = segments[idx].points = [];
            var percentage = segments[idx].percentage;
            var offset = (options.dynamicHeight) ? (finalNarrow * percentage) : (finalNarrow / count);
            var height = (options.dynamicHeight) ? (totalHeight * percentage) : (totalHeight / count);

            points.push(new _progress_kendoDrawing.geometry.Point(box.x1 + previousOffset, box.y1 + previousHeight));
            points.push(new _progress_kendoDrawing.geometry.Point(box.x1 + width - previousOffset, box.y1 + previousHeight));
            points.push(new _progress_kendoDrawing.geometry.Point(box.x1 + width - previousOffset - offset, box.y1 + height + previousHeight));
            points.push(new _progress_kendoDrawing.geometry.Point(box.x1 + previousOffset + offset,box.y1 + height + previousHeight));
            previousOffset += offset;
            previousHeight += height + options.segmentSpacing;
        }
    };

    FunnelChart.prototype.reflow = function reflow (chartBox) {
        var points = this.points;
        var count = points.length;

        if (!count) {
            return;
        }

        var options = this.options;
        var box = chartBox.clone().unpad(this.labelPadding());
        var totalHeight = box.height() - options.segmentSpacing * (count - 1);
        var width = box.width();

        if (options.dynamicSlope) {
            this.dynamicSlopeReflow(box, width, totalHeight);
        } else {
            this.constantSlopeReflow(box, width, totalHeight);
        }

        for (var idx = 0; idx < count; idx++) {
            points[idx].reflow(chartBox);
        }
    };

    return FunnelChart;
}(ChartElement));

setDefaultOptions(FunnelChart, {
    neckRatio: 0.3,
    width: 300,
    dynamicSlope: false,
    dynamicHeight: true,
    segmentSpacing: 0,
    labels: {
        visible: false,
        align: CENTER,
        position: CENTER,
        zIndex: 1
    }
});

deepExtend(FunnelChart.prototype, PieChartMixin);

var FunnelPlotArea = (function (PlotAreaBase$$1) {
    function FunnelPlotArea () {
        PlotAreaBase$$1.apply(this, arguments);
    }

    if ( PlotAreaBase$$1 ) FunnelPlotArea.__proto__ = PlotAreaBase$$1;
    FunnelPlotArea.prototype = Object.create( PlotAreaBase$$1 && PlotAreaBase$$1.prototype );
    FunnelPlotArea.prototype.constructor = FunnelPlotArea;

    FunnelPlotArea.prototype.render = function render () {
        this.createFunnelChart(this.series);
    };

    FunnelPlotArea.prototype.createFunnelChart = function createFunnelChart (series) {
        var firstSeries = series[0];
        var funnelChart = new FunnelChart(this, {
            series: series,
            legend: this.options.legend,
            neckRatio: firstSeries.neckRatio,
            dynamicHeight: firstSeries.dynamicHeight,
            dynamicSlope: firstSeries.dynamicSlope,
            segmentSpacing: firstSeries.segmentSpacing,
            highlight: firstSeries.highlight
        });

        this.appendChart(funnelChart);
    };

    FunnelPlotArea.prototype.appendChart = function appendChart (chart, pane) {
        PlotAreaBase$$1.prototype.appendChart.call(this, chart, pane);
        append$1(this.options.legend.items, chart.legendItems);
    };

    return FunnelPlotArea;
}(PlotAreaBase));

var COLOR = "color";
var FIRST = "first";
var FROM = "from";
var MAX = "max";
var MIN = "min";
var NOTE_TEXT = "noteText";
var SUMMARY_FIELD = "summary";
var TO = "to";

PlotAreaFactory.current.register(CategoricalPlotArea, [
    BAR, COLUMN, LINE, VERTICAL_LINE, AREA, VERTICAL_AREA,
    CANDLESTICK, OHLC, BULLET, VERTICAL_BULLET, BOX_PLOT, VERTICAL_BOX_PLOT,
    RANGE_COLUMN, RANGE_BAR, WATERFALL, HORIZONTAL_WATERFALL, RANGE_AREA, VERTICAL_RANGE_AREA
]);

PlotAreaFactory.current.register(XYPlotArea, [
    SCATTER, SCATTER_LINE, BUBBLE
]);

PlotAreaFactory.current.register(PiePlotArea, [ PIE ]);
PlotAreaFactory.current.register(DonutPlotArea, [ DONUT ]);
PlotAreaFactory.current.register(FunnelPlotArea, [ FUNNEL ]);

PlotAreaFactory.current.register(PolarPlotArea, [ POLAR_AREA, POLAR_LINE, POLAR_SCATTER ]);
PlotAreaFactory.current.register(RadarPlotArea, [ RADAR_AREA, RADAR_COLUMN, RADAR_LINE ]);

SeriesBinder.current.register(
    [ BAR, COLUMN, LINE, VERTICAL_LINE, AREA, VERTICAL_AREA ],
    [ VALUE ], [ CATEGORY, COLOR, NOTE_TEXT, ERROR_LOW_FIELD, ERROR_HIGH_FIELD ]
);

SeriesBinder.current.register(
    [ RANGE_COLUMN, RANGE_BAR, RANGE_AREA, VERTICAL_RANGE_AREA ],
    [ FROM, TO ], [ CATEGORY, COLOR, NOTE_TEXT ]
);

SeriesBinder.current.register(
    [ WATERFALL, HORIZONTAL_WATERFALL ],
    [ VALUE ], [ CATEGORY, COLOR, NOTE_TEXT, SUMMARY_FIELD ]
);

SeriesBinder.current.register([ POLAR_AREA, POLAR_LINE, POLAR_SCATTER ], [ X, Y ], [ COLOR ]);
SeriesBinder.current.register([ RADAR_AREA, RADAR_COLUMN, RADAR_LINE ], [ VALUE ], [ COLOR ]);

SeriesBinder.current.register(
    [ FUNNEL ],
    [ VALUE ], [ CATEGORY, COLOR, "visibleInLegend", "visible" ]
);

DefaultAggregates.current.register(
    [ BAR, COLUMN, LINE, VERTICAL_LINE, AREA, VERTICAL_AREA, WATERFALL, HORIZONTAL_WATERFALL ],
    { value: MAX, color: FIRST, noteText: FIRST, errorLow: MIN, errorHigh: MAX }
);

DefaultAggregates.current.register(
    [ RANGE_COLUMN, RANGE_BAR, RANGE_AREA, VERTICAL_RANGE_AREA ],
    { from: MIN, to: MAX, color: FIRST, noteText: FIRST }
);

DefaultAggregates.current.register(
    [ RADAR_AREA, RADAR_COLUMN, RADAR_LINE ],
    { value: MAX, color: FIRST }
);

SeriesBinder.current.register(
    [ SCATTER, SCATTER_LINE, BUBBLE ],
    [ X, Y ], [ COLOR, NOTE_TEXT, X_ERROR_LOW_FIELD, X_ERROR_HIGH_FIELD, Y_ERROR_LOW_FIELD, Y_ERROR_HIGH_FIELD ]
);

SeriesBinder.current.register(
    [ BUBBLE ], [ X, Y, "size" ], [ COLOR, CATEGORY, NOTE_TEXT ]
);

SeriesBinder.current.register(
    [ CANDLESTICK, OHLC ],
    [ "open", "high", "low", "close" ], [ CATEGORY, COLOR, "downColor", NOTE_TEXT ]
);

DefaultAggregates.current.register(
    [ CANDLESTICK, OHLC ],
    { open: MAX, high: MAX, low: MIN, close: MAX,
      color: FIRST, downColor: FIRST, noteText: FIRST }
);

SeriesBinder.current.register(
    [ BOX_PLOT, VERTICAL_BOX_PLOT ],
    [ "lower", "q1", "median", "q3", "upper", "mean", "outliers" ], [ CATEGORY, COLOR, NOTE_TEXT ]
);

DefaultAggregates.current.register(
    [ BOX_PLOT, VERTICAL_BOX_PLOT ],
    { lower: MAX, q1: MAX, median: MAX, q3: MAX, upper: MAX, mean: MAX, outliers: FIRST,
      color: FIRST, noteText: FIRST }
);

SeriesBinder.current.register(
    [ BULLET, VERTICAL_BULLET ],
    [ "current", "target" ], [ CATEGORY, COLOR, "visibleInLegend", NOTE_TEXT ]
);

DefaultAggregates.current.register(
    [ BULLET, VERTICAL_BULLET ],
    { current: MAX, target: MAX, color: FIRST, noteText: FIRST }
);

SeriesBinder.current.register(
    [ PIE, DONUT ],
    [ VALUE ], [ CATEGORY, COLOR, "explode", "visibleInLegend", "visible" ]
);

var AXIS_NAMES = [ CATEGORY, VALUE, X, Y ];

var MOUSEMOVE = "mousemove";
var CONTEXTMENU = "contextmenu";
var MOUSELEAVE = "mouseleave";
var MOUSEMOVE_DELAY = 20;

var Chart = (function (Class$$1) {
    function Chart(element, userOptions, themeOptions, context) {
        var this$1 = this;
        if ( context === void 0 ) context = {};

        Class$$1.call(this);

        this.observers = [];
        this.addObserver(context.observer);
        this.chartService = new ChartService(this, context);
        this.chartService.theme = themeOptions;

        this._initElement(element);

        var options = deepExtend({}, this.options, userOptions);
        this._originalOptions = deepExtend({}, options);
        this._theme = themeOptions;
        this._initTheme(options, themeOptions);

        this._initHandlers();
        this._initSurface();

        this.bindCategories();
        FontLoader.preloadFonts(userOptions, function () {
            this$1.fontLoaded = true;
            if (!this$1._destroyed) {
                this$1.trigger('init');
                this$1._redraw();
                this$1._attachEvents();
            }
        });
    }

    if ( Class$$1 ) Chart.__proto__ = Class$$1;
    Chart.prototype = Object.create( Class$$1 && Class$$1.prototype );
    Chart.prototype.constructor = Chart;

    Chart.prototype._initElement = function _initElement (element) {
        this._setElementClass(element);
        element.style.position = "relative";
        while (element.firstChild) {
            element.removeChild(element.firstChild);
        }
        this.element = element;
    };

    Chart.prototype._setElementClass = function _setElementClass (element) {
        addClass(element, "k-chart");
    };

    Chart.prototype._initTheme = function _initTheme (options, themeOptions) {
        var seriesCopies = [];
        var series = options.series || [];

        for (var i = 0; i < series.length; i++) {
            seriesCopies.push(Object.assign({}, series[i]));
        }
        options.series = seriesCopies;

        resolveAxisAliases(options);
        this.applyDefaults(options, themeOptions);

        // Clean up default if not overriden by data attributes
        if (options.seriesColors === null) {
            delete options.seriesColors;
        }

        this.options = deepExtend({}, themeOptions, options);
        this.applySeriesColors();
    };

    Chart.prototype.getSize = function getSize () {
        var chartArea = this.options.chartArea || {};
        var width = chartArea.width ? parseInt(chartArea.width, 10) : Math.floor(this.element.offsetWidth);
        var height = chartArea.height ? parseInt(chartArea.height, 10) : Math.floor(this.element.offsetHeight);

        return {
            width: width,
            height: height
        };
    };

    Chart.prototype.resize = function resize (force) {
        var size = this.getSize();
        var currentSize = this._size;
        var hasSize = size.width > 0 || size.height > 0;

        if (force || hasSize && (!currentSize || size.width !== currentSize.width || size.height !== currentSize.height)) {
            this._size = size;
            this._resize(size, force);
            this.trigger("resize", size);
        } else if (hasSize && this._selections && find(this._selections, function (s) { return !s.visible; })) {
            this._destroySelections();
            this._setupSelection();
        }
    };

    Chart.prototype._resize = function _resize () {
        this._noTransitionsRedraw();
    };

    Chart.prototype.redraw = function redraw (paneName) {
        this.applyDefaults(this.options);
        this.applySeriesColors();

        if (paneName) {
            var plotArea = this._model._plotArea;
            var pane = plotArea.findPane(paneName);
            plotArea.redraw(pane);
        } else {
            this._redraw();
        }
    };

    Chart.prototype.getAxis = function getAxis (name) {
        return findAxisByName(name, this._plotArea.axes);
    };

    Chart.prototype.findAxisByName = function findAxisByName$1 (name) {
        return this.getAxis(name);
    };

    Chart.prototype.findPaneByName = function findPaneByName (name) {
        var panes = this._plotArea.panes;

        for (var idx = 0; idx < panes.length; idx++) {
            if (panes[idx].options.name === name) {
                return new ChartPane(panes[idx]);
            }
        }
    };

    Chart.prototype.findPaneByIndex = function findPaneByIndex (idx) {
        var panes = this._plotArea.panes;
        if (panes[idx]) {
            return new ChartPane(panes[idx]);
        }
    };

    Chart.prototype.plotArea = function plotArea () {
        return new ChartPlotArea(this._plotArea);
    };

    Chart.prototype.toggleHighlight = function toggleHighlight (show, filter) {
        var plotArea = this._plotArea;
        var firstSeries = (plotArea.srcSeries || plotArea.series || [])[0];
        var points;

        if (isFunction(filter)) {
            points = plotArea.filterPoints(filter);
        } else {
            var seriesName, categoryName;
            if (isObject(filter)) {
                seriesName = filter.series;
                categoryName = filter.category;
            } else {
                seriesName = categoryName = filter;
            }

            if (firstSeries.type === DONUT) {
                points = pointByCategoryName(plotArea.pointsBySeriesName(seriesName), categoryName);
            } else if (firstSeries.type === PIE || firstSeries.type === FUNNEL) {
                points = pointByCategoryName((plotArea.charts[0] || {}).points, categoryName);
            } else {
                points = plotArea.pointsBySeriesName(seriesName);
            }
        }

        if (points) {
            this.togglePointsHighlight(show, points);
        }
    };

    Chart.prototype.togglePointsHighlight = function togglePointsHighlight (show, points) {
        var highlight = this._highlight;
        for (var idx = 0; idx < points.length; idx++) {
            highlight.togglePointHighlight(points[idx], show);
        }
    };

    Chart.prototype.showTooltip = function showTooltip (filter) {
        var shared = this._sharedTooltip();
        var ref = this;
        var tooltip = ref._tooltip;
        var plotArea = ref._plotArea;
        var point, categoryIndex;

        if (isFunction(filter)) {
            point = plotArea.findPoint(filter);
            if (point && shared) {
                categoryIndex = point.categoryIx;
            }
        } else if (shared && defined(filter)) {
            categoryIndex = plotArea.categoryAxis.categoryIndex(filter);
        }

        if (shared) {
            if (categoryIndex >= 0) {
                var points = this._plotArea.pointsByCategoryIndex(categoryIndex);
                tooltip.showAt(points);
            }
        } else if (point) {
            tooltip.show(point);
        }
    };

    Chart.prototype.hideTooltip = function hideTooltip () {
        this._tooltip.hide();
    };

    Chart.prototype._initSurface = function _initSurface () {
        var surface = this.surface;
        var wrap = this._surfaceWrap();

        var chartArea = this.options.chartArea || {};
        if (chartArea.width) {
            elementSize$1(wrap, { width: chartArea.width });
        }
        if (chartArea.height) {
            elementSize$1(wrap, { height: chartArea.height });
        }

        if (!surface || surface.options.type !== this.options.renderAs) {
            this._destroySurface();

            this.surface = _progress_kendoDrawing.drawing.Surface.create(wrap, {
                type: this.options.renderAs
            });

            this.surface.bind("mouseenter", this._surfaceMouseenterHandler);
            this.surface.bind("mouseleave", this._surfaceMouseleaveHandler);

        } else {
            this.surface.clear();
            this.surface.resize();
        }
    };

    Chart.prototype._surfaceWrap = function _surfaceWrap () {
        return this.element;
    };

    Chart.prototype._redraw = function _redraw () {
        var model = this._getModel();
        this._size = {
            width: model.options.width,
            height: model.options.height
        };

        this._destroyView();

        this._model = model;
        this._plotArea = model._plotArea;

        model.renderVisual();

        if (this.options.transitions !== false) {
            model.traverse(function(element) {
                if (element.animation) {
                    element.animation.setup();
                }
            });
        }

        this._initSurface();
        this.surface.draw(model.visual);

        if (this.options.transitions !== false) {
            model.traverse(function(element) {
                if (element.animation) {
                    element.animation.play();
                }
            });
        }

        this._tooltip = this._createTooltip();
        this._highlight = new Highlight();
        this._setupSelection();
        this._createPannable();
        this._createZoomSelection();
        this._createMousewheelZoom();

        this.trigger(RENDER);
        triggerPaneRender(this._plotArea.panes);

        if (!this._navState) {
            this._cancelDomEvents();
        }
    };

    Chart.prototype.exportVisual = function exportVisual (exportOptions) {
        var visual;
        if (exportOptions && (exportOptions.width || exportOptions.height || exportOptions.options)) {
            var currentOptions = this.options;
            var options = deepExtend({}, exportOptions.options, {
                chartArea: {
                    width: exportOptions.width,
                    height: exportOptions.height
                }
            });

            clearMissingValues(this._originalOptions, options);
            this.options = deepExtend({}, this._originalOptions, options);
            this._initTheme(this.options, this._theme);
            this.bindCategories();

            var model = this._getModel();

            model.renderVisual();
            triggerPaneRender(model._plotArea.panes);

            visual = model.visual;

            this.options = currentOptions;
        } else {
            visual = this.surface.exportVisual();
        }

        return visual;
    };

    Chart.prototype._sharedTooltip = function _sharedTooltip () {
        return this._plotArea instanceof CategoricalPlotArea && this.options.tooltip && this.options.tooltip.shared;
    };

    Chart.prototype._createPannable = function _createPannable () {
        var options = this.options;
        if (options.pannable !== false) {
            this._pannable = new Pannable(this._plotArea, options.pannable);
        }
    };

    Chart.prototype._createZoomSelection = function _createZoomSelection () {
        var zoomable = this.options.zoomable;
        var selection = (zoomable || {}).selection;
        if (zoomable !== false && selection !== false) {
            this._zoomSelection = new ZoomSelection(this, selection);
        }
    };

    Chart.prototype._createMousewheelZoom = function _createMousewheelZoom () {
        var zoomable = this.options.zoomable;
        var mousewheel = (zoomable || {}).mousewheel;
        if (zoomable !== false && mousewheel !== false) {
            this._mousewheelZoom = new MousewheelZoom(this, mousewheel);
        }
    };

    Chart.prototype._toggleDragZoomEvents = function _toggleDragZoomEvents () {
        var pannable = this.options.pannable;
        var zoomable = this.options.zoomable;
        var selection = (zoomable || {}).selection;
        var mousewheel = (zoomable || {}).mousewheel;
        var allowDrag = !pannable && (zoomable === false || selection === false) && !this.requiresHandlers([ DRAG_START, DRAG, DRAG_END ]);
        var allowZoom = (zoomable === false || mousewheel === false) && !this.requiresHandlers([ ZOOM_START, ZOOM, ZOOM_END ]);
        var element = this.element;

        if (this._dragZoomEnabled && allowDrag && allowZoom) {
            element.style.touchAction = this._touchAction || '';
            this._dragZoomEnabled = false;
        } else if (!this._dragZoomEnabled && !(allowDrag && allowZoom)) {
            element.style.touchAction = "none";

            this._dragZoomEnabled = true;
        }

        this._toggleDomEvents(!allowDrag, !allowZoom);
    };

    Chart.prototype._toggleDomEvents = function _toggleDomEvents (drag, zoom) {
        var domEvents = this.domEvents;
        if (!domEvents) {
            return;
        }

        if (domEvents.toggleDrag) {
            domEvents.toggleDrag(drag);
        }

        if (domEvents.toggleZoom) {
            domEvents.toggleZoom(zoom);
        }
    };

    Chart.prototype._createTooltip = function _createTooltip () {
        var ref = this;
        var tooltipOptions = ref.options.tooltip;
        var tooltip;

        if (this._sharedTooltip()) {
            tooltip = this._createSharedTooltip(tooltipOptions);
        } else {
            tooltip = new Tooltip(this.chartService, tooltipOptions);
        }

        return tooltip;
    };

    Chart.prototype._createSharedTooltip = function _createSharedTooltip (options) {
        return new SharedTooltip(this._plotArea, options);
    };

    Chart.prototype.applyDefaults = function applyDefaults (options, themeOptions) {
        applyAxisDefaults(options, themeOptions);
        applySeriesDefaults(options, themeOptions);
    };

    Chart.prototype.applySeriesColors = function applySeriesColors () {
        var options = this.options;
        var series = options.series;
        var colors = options.seriesColors || [];

        for (var i = 0; i < series.length; i++) {
            var currentSeries = series[i];
            var seriesColor = colors[i % colors.length];
            var defaults = currentSeries._defaults;

            currentSeries.color = currentSeries.color || seriesColor;
            if (defaults) {
                defaults.color = defaults.color || seriesColor;
            }
        }
    };

    Chart.prototype._getModel = function _getModel () {
        var options = this.options;
        var plotArea = this._createPlotArea();
        var model = new RootElement(this._modelOptions());
        model.chart = this;
        model._plotArea = plotArea;

        Title.buildTitle(options.title, model);

        if (options.legend && options.legend.visible) {
            model.append(new Legend(plotArea.options.legend, this.chartService));
        }
        model.append(plotArea);
        model.reflow();

        return model;
    };

    Chart.prototype._modelOptions = function _modelOptions () {
        var options = this.options;
        var size = this.getSize();

        return deepExtend({
            transitions: options.transitions,
            width: size.width || DEFAULT_WIDTH,
            height: size.height || DEFAULT_HEIGHT
        }, options.chartArea);
    };

    Chart.prototype._createPlotArea = function _createPlotArea (skipSeries) {
        var options = this.options;

        var plotArea = PlotAreaFactory.current.create(skipSeries ? [] : options.series, options, this.chartService);

        return plotArea;
    };

    Chart.prototype._setupSelection = function _setupSelection () {
        var this$1 = this;

        var ref = this;
        var axes = ref._plotArea.axes;
        var selections = this._selections = [];

        for (var i = 0; i < axes.length; i++) {
            var axis = axes[i];
            var options = axis.options;
            if (axis instanceof CategoryAxis && options.select && !options.vertical) {
                var range = axis.range();

                var selection = new Selection(this$1, axis,
                    deepExtend({ min: range.min, max: range.max }, options.select)
                );

                selections.push(selection);
            }
        }
    };

    Chart.prototype._selectStart = function _selectStart (e) {
        return this.trigger(SELECT_START, e);
    };

    Chart.prototype._select = function _select (e) {
        return this.trigger(SELECT, e);
    };

    Chart.prototype._selectEnd = function _selectEnd (e) {
        return this.trigger(SELECT_END, e);
    };

    Chart.prototype._initHandlers = function _initHandlers () {
        this._clickHandler = this._click.bind(this);
        this._mousewheelHandler = this._mousewheel.bind(this);
        this._mouseleaveHandler = this._mouseleave.bind(this);
        this._surfaceMouseenterHandler = this._mouseover.bind(this);
        this._surfaceMouseleaveHandler = this._mouseout.bind(this);

        this._mousemove = _progress_kendoDrawing.throttle(
            this._mousemove.bind(this),
            MOUSEMOVE_DELAY
        );
    };

    Chart.prototype.addObserver = function addObserver (observer) {
        if (observer) {
            this.observers.push(observer);
        }
    };

    Chart.prototype.removeObserver = function removeObserver (observer) {
        var index = this.observers.indexOf(observer);
        if (index >= 0) {
            this.observers.splice(index, 1);
        }
    };

    Chart.prototype.requiresHandlers = function requiresHandlers (eventNames) {
        var observers = this.observers;
        for (var idx = 0; idx < observers.length; idx++) {
            if (observers[idx].requiresHandlers(eventNames)) {
                return true;
            }
        }
    };

    Chart.prototype.trigger = function trigger (name, args) {
        if ( args === void 0 ) args = {};

        if (name === SHOW_TOOLTIP) {
            args.anchor.point = this._toDocumentCoordinates(args.anchor.point);
        }
        args.sender = this;

        var observers = this.observers;
        var isDefaultPrevented = false;
        for (var idx = 0; idx < observers.length; idx++) {
            if (observers[idx].trigger(name, args)) {
                isDefaultPrevented = true;
            }
        }

        return isDefaultPrevented;
    };

    Chart.prototype._attachEvents = function _attachEvents () {
        var element = this.element;

        this._touchAction = element.style.touchAction;

        var obj;
        bindEvents(element, ( obj = {}, obj[ CONTEXTMENU ] = this._clickHandler, obj[ MOUSEWHEEL ] = this._mousewheelHandler, obj[ MOUSELEAVE ] = this._mouseleaveHandler, obj ));

        if (this._shouldAttachMouseMove()) {
            var obj$1;
            bindEvents(element, ( obj$1 = {}, obj$1[ MOUSEMOVE ] = this._mousemove, obj$1 ));
        }

        this.domEvents = DomEventsBuilder.create(this.element, {
            start: this._start.bind(this),
            move: this._move.bind(this),
            end: this._end.bind(this),
            tap: this._tap.bind(this),
            gesturestart: this._gesturestart.bind(this),
            gesturechange: this._gesturechange.bind(this),
            gestureend: this._gestureend.bind(this)
        });

        this._toggleDragZoomEvents();
    };

    Chart.prototype._mouseleave = function _mouseleave (e) {
        if (this._hoveredPoint) {
            this._hoveredPoint.out(this, e);
            this._hoveredPoint = null;
        }

        if (this._plotArea.hovered) {
            this.trigger(PLOT_AREA_LEAVE);
            this._plotArea.hovered = false;
        }
    };

    Chart.prototype._cancelDomEvents = function _cancelDomEvents () {
        if (this.domEvents && this.domEvents.cancel) {
            this.domEvents.cancel();
        }
    };

    Chart.prototype._gesturestart = function _gesturestart (e) {
        if (this._mousewheelZoom && !this._stopChartHandlers(e)) {
            this._gestureDistance = e.distance;
            this._unsetActivePoint();
            this.surface.suspendTracking();
        }
    };

    Chart.prototype._gestureend = function _gestureend (e) {
        if (this._zooming && !this._stopChartHandlers(e)) {
            if (this.surface) {
                this.surface.resumeTracking();
            }
            this._zooming = false;
            this.trigger(ZOOM_END, {});
        }
    };

    Chart.prototype._gesturechange = function _gesturechange (e) {
        var mousewheelZoom = this._mousewheelZoom;

        if (mousewheelZoom && !this._stopChartHandlers(e)) {
            e.preventDefault();
            var previousGestureDistance = this._gestureDistance;
            var scaleDelta = -e.distance / previousGestureDistance + 1;

            if (Math.abs(scaleDelta) >= 0.1) {
                scaleDelta = Math.round(scaleDelta * 10);

                this._gestureDistance = e.distance;
                var args = { delta: scaleDelta, axisRanges: axisRanges(this._plotArea.axes), originalEvent: e };
                if (this._zooming || !this.trigger(ZOOM_START, args)) {

                    if (!this._zooming) {
                        this._zooming = true;
                    }

                    var ranges = args.axisRanges = mousewheelZoom.updateRanges(scaleDelta);
                    if (ranges && !this.trigger(ZOOM, args)) {
                        mousewheelZoom.zoom();
                    }
                }
            }
        }
    };

    Chart.prototype._mouseout = function _mouseout (e) {
        if (e.element) {
            var element = this._drawingChartElement(e.element, e);

            if (element && element.leave) {
                element.leave(this, e.originalEvent);
            }
        }
    };

    Chart.prototype._start = function _start (e) {
        var coords = this._eventCoordinates(e);

        if (this._stopChartHandlers(e) || !this._plotArea.backgroundContainsPoint(coords)) {
            return;
        }


        if (this.requiresHandlers([ DRAG_START, DRAG, DRAG_END ])) {
            this._startNavigation(e, coords, DRAG_START);
        }

        if (this._pannable && this._pannable.start(e)) {
            this.surface.suspendTracking();
            this._unsetActivePoint();
            this._suppressHover = true;
            this.chartService.panning = true;
        }

        if (this._zoomSelection) {
            if (this._zoomSelection.start(e)) {
                this.trigger(ZOOM_START, { axisRanges: axisRanges(this._plotArea.axes), originalEvent: e });
            }
        }
    };

    Chart.prototype._move = function _move (e) {
        var ref = this;
        var state = ref._navState;
        var pannable = ref._pannable;

        if (this._stopChartHandlers(e)) {
            return;
        }

        if (pannable) {
            var ranges = pannable.move(e);

            if (ranges && !this.trigger(DRAG, { axisRanges: ranges, originalEvent: e })) {
                pannable.pan();
            }
        } else if (state) {
            var ranges$1 = {};
            var axes = state.axes;

            for (var i = 0; i < axes.length; i++) {
                var currentAxis = axes[i];
                var axisName = currentAxis.options.name;
                if (axisName) {
                    var axis = currentAxis.options.vertical ? e.y : e.x;
                    var delta = axis.startLocation - axis.location;

                    if (delta !== 0) {
                        ranges$1[currentAxis.options.name] = currentAxis.translateRange(delta);
                    }
                }
            }

            state.axisRanges = ranges$1;
            this.trigger(DRAG, {
                axisRanges: ranges$1,
                originalEvent: e
            });
        }

        if (this._zoomSelection) {
            this._zoomSelection.move(e);
        }
    };

    Chart.prototype._end = function _end (e) {
        if (this._stopChartHandlers(e)) {
            return;
        }

        var pannable = this._pannable;
        if (pannable && pannable.end(e)) {
            this.surface.resumeTracking();
            this.trigger(DRAG_END, {
                axisRanges: axisRanges(this._plotArea.axes),
                originalEvent: e
            });
            this._suppressHover = false;
            this.chartService.panning = false;
        } else {
            this._endNavigation(e, DRAG_END);
        }

        if (this._zoomSelection) {
            var ranges = this._zoomSelection.end(e);
            if (ranges && !this.trigger(ZOOM, { axisRanges: ranges, originalEvent: e })) {
                this._zoomSelection.zoom();
                this.trigger(ZOOM_END, { axisRanges: ranges, originalEvent: e });
            }
        }
    };

    Chart.prototype._stopChartHandlers = function _stopChartHandlers (e) {
        var selections = this._selections || [];
        if (!selections.length) {
            return false;
        }

        var coords = this._eventCoordinates(e);
        var pane = this._plotArea.paneByPoint(coords);
        if (pane) {
            for (var idx = 0; idx < selections.length; idx++) {
                if (selections[idx].onPane(pane)) {
                    return true;
                }
            }
        }
    };

    Chart.prototype._mousewheel = function _mousewheel (e) {
        var this$1 = this;

        var delta = mousewheelDelta(e);
        var mousewheelZoom = this._mousewheelZoom;
        var coords = this._eventCoordinates(e);

        if (this._stopChartHandlers(e) || !this._plotArea.backgroundContainsPoint(coords)) {
            return;
        }

        if (mousewheelZoom) {
            var args = { delta: delta, axisRanges: axisRanges(this._plotArea.axes), originalEvent: e };
            if (this._zooming || !this.trigger(ZOOM_START, args)) {
                e.preventDefault();

                if (!this._zooming) {
                    this._unsetActivePoint();
                    this.surface.suspendTracking();
                    this._zooming = true;
                }

                if (this._mwTimeout) {
                    clearTimeout(this._mwTimeout);
                }

                args.axisRanges = mousewheelZoom.updateRanges(delta);
                if (args.axisRanges && !this.trigger(ZOOM, args)) {
                    mousewheelZoom.zoom();
                }

                this._mwTimeout = setTimeout(function () {
                    this$1.trigger(ZOOM_END, args);
                    this$1._zooming = false;
                    if (this$1.surface) {
                        this$1.surface.resumeTracking();
                    }
                }, MOUSEWHEEL_DELAY);
            }
        } else {
            var state = this._navState;
            if (!state) {
                var prevented = this._startNavigation(e, coords, ZOOM_START);
                if (!prevented) {
                    state = this._navState;
                }
            }

            if (state) {
                var totalDelta = state.totalDelta || delta;
                state.totalDelta = totalDelta + delta;

                var axes = this._navState.axes;
                var ranges = {};

                for (var i = 0; i < axes.length; i++) {
                    var currentAxis = axes[i];
                    var axisName = currentAxis.options.name;
                    if (axisName) {
                        ranges[axisName] = currentAxis.scaleRange(-totalDelta);
                    }
                }

                this.trigger(ZOOM, {
                    delta: delta,
                    axisRanges: ranges,
                    originalEvent: e
                });

                if (this._mwTimeout) {
                    clearTimeout(this._mwTimeout);
                }

                this._mwTimeout = setTimeout(function () {
                    this$1._endNavigation(e, ZOOM_END);
                }, MOUSEWHEEL_DELAY);
            }
        }
    };

    Chart.prototype._startNavigation = function _startNavigation (e, coords, chartEvent) {
        var plotArea = this._model._plotArea;
        var pane = plotArea.findPointPane(coords);
        var axes = plotArea.axes.slice(0);

        if (!pane) {
            return;
        }

        var ranges = axisRanges(axes);

        var prevented = this.trigger(chartEvent, {
            axisRanges: ranges,
            originalEvent: e
        });

        if (prevented) {
            this._cancelDomEvents();
        } else {
            this._suppressHover = true;
            this._unsetActivePoint();
            this._navState = {
                axisRanges: ranges,
                pane: pane,
                axes: axes
            };
        }
    };

    Chart.prototype._endNavigation = function _endNavigation (e, chartEvent) {
        if (this._navState) {
            this.trigger(chartEvent, {
                axisRanges: this._navState.axisRanges,
                originalEvent: e
            });
            this._suppressHover = false;
            this._navState = null;
        }
    };

    Chart.prototype._getChartElement = function _getChartElement (e, match) {
        var element = this.surface.eventTarget(e);
        if (element) {
            return this._drawingChartElement(element, e, match);
        }
    };

    Chart.prototype._drawingChartElement = function _drawingChartElement (element, e, match) {
        var current = element;
        var chartElement;
        while (current && !chartElement) {
            chartElement = current.chartElement;
            current = current.parent;
        }

        if (chartElement) {
            if (chartElement.aliasFor) {
                chartElement = chartElement.aliasFor(e, this._eventCoordinates(e));
            }

            if (match) {
                chartElement = chartElement.closest(match);
                if (chartElement && chartElement.aliasFor) {
                    chartElement = chartElement.aliasFor();
                }
            }

            return chartElement;
        }
    };

    Chart.prototype._eventCoordinates = function _eventCoordinates (e) {
        var coordinates = eventCoordinates(e);
        return this._toModelCoordinates(coordinates.x, coordinates.y);
    };

    Chart.prototype._elementPadding = function _elementPadding () {
        if (!this._padding) {
            var ref = elementStyles(this.element, [ "paddingLeft", "paddingTop" ]);
            var paddingLeft = ref.paddingLeft;
            var paddingTop = ref.paddingTop;
            this._padding = {
                top: paddingTop,
                left: paddingLeft
            };
        }

        return this._padding;
    };

    Chart.prototype._toDocumentCoordinates = function _toDocumentCoordinates (point) {
        var padding = this._elementPadding();
        var offset = elementOffset(this.element);

        return {
            left: round(point.x + padding.left + offset.left),
            top: round(point.y + padding.top + offset.top)
        };
    };

    // TODO: Breaking change due to peer version change
    // Reuse by exposing _surfacePoint on Surface
    Chart.prototype._toModelCoordinates = function _toModelCoordinates (clientX, clientY) {
        var element = this.element;
        var offset = elementOffset(element);
        var padding = this._elementPadding();
        var inverseTransform = elementScale(element).invert();
        var point = new _progress_kendoDrawing.geometry.Point(
            clientX - offset.left - padding.left,
            clientY - offset.top - padding.top
        ).transform(inverseTransform);

        return new Point(point.x, point.y);
    };

    Chart.prototype._tap = function _tap (e) {
        var this$1 = this;

        var drawingElement = this.surface.eventTarget(e);
        var element = this._drawingChartElement(drawingElement, e);
        var sharedTooltip = this._sharedTooltip();

        if (!this._startHover(drawingElement, e) && !sharedTooltip) {
            this._unsetActivePoint();
        }

        if (sharedTooltip) {
            this._trackSharedTooltip(this._eventCoordinates(e), e, true);
        }

        this._propagateClick(element, e);

        //part of fix for hover issue on windows touch
        this.handlingTap = true;
        setTimeout(function () {
            this$1.handlingTap = false;
        }, 0);
    };

    Chart.prototype._click = function _click (e) {
        var element = this._getChartElement(e);
        this._propagateClick(element, e);
    };

    Chart.prototype._propagateClick = function _propagateClick (element, e) {
        var this$1 = this;

        var current = element;
        while (current) {
            if (current.click) {
                current.click(this$1, e);
            }

            current = current.parent;
        }
    };

    Chart.prototype._startHover = function _startHover (element, e) {
        if (this._suppressHover) {
            return false;
        }

        var point = this._drawingChartElement(element, e, function(element) {
            return (element.hover || element.over) && !(element instanceof PlotAreaBase);
        });

        var activePoint = this._activePoint;
        var multipleSeries = this._plotArea.series.length > 1;
        var hasInactiveOpacity = this._hasInactiveOpacity();

        this._updateHoveredPoint(point, e);

        if (point && activePoint !== point && point.hover) {
            this._activePoint = point;

            if (!this._sharedTooltip() && !point.hover(this, e)) {
                var tooltipOptions = deepExtend({}, this.options.tooltip, point.options.tooltip);
                if (tooltipOptions.visible) {
                    this._tooltip.show(point);
                }

                if (multipleSeries && hasInactiveOpacity) {
                    point = this._displayInactiveOpacity(point, true, e);
                } else if (!multipleSeries && hasInactiveOpacity) {
                    this._displayInactiveOpacity(point);
                } else {
                    this._highlight.show(point);
                }
            }
        } else if (!point && hasInactiveOpacity) {
            if (multipleSeries) {
                this._updateSeriesOpacity(point, true);
                this.noTransitionsRedraw();
            } else {
                this._highlight && this._highlight.hide();
                this._activePoint = null;
            }
        }

        return point;
    };

    Chart.prototype._displayInactiveOpacity = function _displayInactiveOpacity (activePoint, multipleSeries, event) {
        var point = activePoint;
        if (multipleSeries) {
            this._updateSeriesOpacity(point);
            this.noTransitionsRedraw();
            point = this._findNewPoint(this._plotArea.children, point.dataItem, point.series);
            this._updateHoveredPoint(point, event);
            this._highlight.show(point);
        } else {
            var inactivePoints;
            var chartInstance = activePoint.parent;

            while (!chartInstance.plotArea) {
                chartInstance = chartInstance.parent;
            }

            if (!chartInstance.supportsPointInactiveOpacity()) {
                this._highlight.show(point);
                return null;
            }

            inactivePoints = this._getInactivePoints(point, chartInstance);

            if (inactivePoints && inactivePoints.length) {
                this._highlight.show(inactivePoints, 1 - this._getInactiveOpacityForSeries(point.series));
            }
        }

        return point;
    };

    Chart.prototype._getInactivePoints = function _getInactivePoints (activePoint, chartInstance) {
        var allPoints = this._getAllPointsOfType(chartInstance, activePoint.constructor);

        return allPoints.filter(function (point) { return point !== activePoint; });
    };

    Chart.prototype._getAllPointsOfType = function _getAllPointsOfType (container, type) {
        var this$1 = this;

        var points = [];

        for (var i = 0; i < container.children.length; i++) {
            var element = container.children[i];

            if (element.constructor === type) {
                points.push(element);
            } else if (element.children && element.children.length) {
                points = points.concat(this$1._getAllPointsOfType(element, type));
            }
        }

        return points;
    };

    Chart.prototype._findNewPoint = function _findNewPoint (children, dataItem, series) {
        var this$1 = this;

        for (var i = 0; i < children.length; i++) {
            var child = children[i];

            if (child.dataItem === dataItem && child.series === series) {
                return child;
            }

            if (child.children) {
                var result = this$1._findNewPoint(child.children, dataItem, series);

                if (result) {
                    return result;
                }
            }
        }
    };

    Chart.prototype._updateHoveredPoint = function _updateHoveredPoint (point, e) {
        var hoveredPoint = this._hoveredPoint;

        if (hoveredPoint && hoveredPoint !== point) {
            hoveredPoint.out(this, e);
            this._hoveredPoint = null;
        }

        if (point && hoveredPoint !== point && point.over) {
            this._hoveredPoint = point;
            point.over(this, e);
        }
    };

    Chart.prototype._updateSeriesOpacity = function _updateSeriesOpacity (point, resetOpacity) {
        var this$1 = this;

        var plotArea = this._plotArea;
        var length = plotArea.series.length;

        for (var i = 0; i < length; i++) {
            var currSeries = plotArea.series[i];
            var defaultOpacity = this$1._getDefaultOpacityForSeries(currSeries);
            var inactiveOpacity = this$1._getInactiveOpacityForSeries(currSeries);

            if (!resetOpacity && currSeries !== point.series) {
                currSeries.defaultOpacity = defaultOpacity;
                currSeries.opacity = inactiveOpacity;

                if (currSeries.line) {
                    currSeries.line.opacity = inactiveOpacity;
                }
            } else {
                currSeries.opacity = defaultOpacity;

                if (currSeries.line) {
                    currSeries.line.opacity = defaultOpacity;
                }
            }
        }
    };

    Chart.prototype._hasInactiveOpacity = function _hasInactiveOpacity () {
        var hasDefaultInactiveOpacity = this.options.seriesDefaults.highlight.inactiveOpacity !== undefined;
        var hasInactiveOpacity = this.options.series.filter(function (s) { return s.highlight.inactiveOpacity !== undefined; } ).length > 0;
        return hasDefaultInactiveOpacity || hasInactiveOpacity;
    };

    Chart.prototype._getInactiveOpacityForSeries = function _getInactiveOpacityForSeries (series) {
        var defaultInactiveOpacity = this.options.seriesDefaults.highlight.inactiveOpacity;
        var seriesInactiveOpacity = series.highlight.inactiveOpacity;
        return seriesInactiveOpacity || defaultInactiveOpacity || series.opacity || DEFAULT_SERIES_OPACITY;
    };

    Chart.prototype._getDefaultOpacityForSeries = function _getDefaultOpacityForSeries (series) {
        return series.defaultOpacity || series.opacity || DEFAULT_SERIES_OPACITY;
    };

    Chart.prototype._mouseover = function _mouseover (e) {
        var point = this._startHover(e.element, e.originalEvent);

        if (point && point.tooltipTracking && !this._mouseMoveTrackHandler && !this._sharedTooltip()) {
            this._mouseMoveTrackHandler = this._mouseMoveTracking.bind(this);
            var obj;
            bindEvents(document, ( obj = {}, obj[ MOUSEMOVE ] = this._mouseMoveTrackHandler, obj ));
        }
    };

    Chart.prototype._mouseMoveTracking = function _mouseMoveTracking (e) {
        var ref = this;
        var options = ref.options;
        var tooltip = ref._tooltip;
        var highlight = ref._highlight;
        var point = ref._activePoint;
        var coords = this._eventCoordinates(e);

        if (this._plotArea.box.containsPoint(coords)) {
            if (point && point.tooltipTracking && point.series && point.parent.getNearestPoint) {
                var seriesPoint = point.parent.getNearestPoint(coords.x, coords.y, point.seriesIx);
                if (seriesPoint && seriesPoint !== point) {
                    this._activePoint = seriesPoint;

                    if (!seriesPoint.hover(this, e)) {
                        var tooltipOptions = deepExtend({}, options.tooltip, seriesPoint.options.tooltip);
                        if (tooltipOptions.visible) {
                            tooltip.show(seriesPoint);
                        }

                        highlight.show(seriesPoint);
                    }
                }
            }
        } else {
            var obj;
            unbindEvents(document, ( obj = {}, obj[ MOUSEMOVE ] = this._mouseMoveTrackHandler, obj ));
            this._unsetActivePoint();
            this._mouseMoveTrackHandler = null;
        }
    };

    Chart.prototype._mousemove = function _mousemove (e) {
        var coords = this._eventCoordinates(e);
        var plotArea = this._plotArea;

        this._trackCrosshairs(coords);

        if (plotArea.hover) {
            var overPlotArea = plotArea.backgroundContainsPoint(coords);
            if (overPlotArea) {
                plotArea.hovered = true;
                this._plotArea.hover(this, e);
            } else if (plotArea.hovered && !overPlotArea) {
                this.trigger(PLOT_AREA_LEAVE);
                plotArea.hovered = false;
            }
        }

        if (this._sharedTooltip()) {
            this._trackSharedTooltip(coords, e);
        }
    };

    Chart.prototype._trackCrosshairs = function _trackCrosshairs (coords) {
        var crosshairs = this._plotArea.crosshairs;

        for (var i = 0; i < crosshairs.length; i++) {
            var current = crosshairs[i];

            if (current.box.containsPoint(coords)) {
                current.showAt(coords);
            } else {
                current.hide();
            }
        }
    };

    Chart.prototype._trackSharedTooltip = function _trackSharedTooltip (coords, e, toggle) {
        if (this._suppressHover) {
            return;
        }

        var ref = this;
        var tooltipOptions = ref.options.tooltip;
        var plotArea = ref._plotArea;
        var categoryAxis = ref._plotArea.categoryAxis;
        var tooltip = ref._tooltip;
        var highlight = ref._highlight;

        if (plotArea.backgroundContainsPoint(coords)) {
            var index = categoryAxis.pointCategoryIndex(coords);
            if (index !== this._tooltipCategoryIx || (!this._sharedHighlight && toggle)) {
                var points = plotArea.pointsByCategoryIndex(index);
                var pointArgs = points.map(function(point) {
                    return point.eventArgs(e);
                });
                var hoverArgs = pointArgs[0] || {};
                hoverArgs.categoryPoints = pointArgs;

                if (points.length > 0 && !this.trigger(SERIES_HOVER, hoverArgs)) {
                    if (tooltipOptions.visible) {
                        tooltip.showAt(points, coords);
                    }

                    highlight.show(points);

                    this._sharedHighlight = true;
                } else {
                    tooltip.hide();
                }

                this._tooltipCategoryIx = index;
            } else if (toggle && this._sharedHighlight) {
                highlight.hide();
                tooltip.hide();
                this._sharedHighlight = false;
            }
        } else if (this._sharedHighlight) {
            highlight.hide();
            tooltip.hide();
            this._tooltipCategoryIx = null;
            this._sharedHighlight = false;
        }
    };

    Chart.prototype.hideElements = function hideElements (options) {
        var plotArea = this._plotArea;
        this._mousemove.cancel();

        plotArea.hideCrosshairs();

        this._unsetActivePoint(options);
    };

    Chart.prototype._unsetActivePoint = function _unsetActivePoint (options) {
        var ref = this;
        var tooltip = ref._tooltip;
        var highlight = ref._highlight;

        this._activePoint = null;
        this._hoveredPoint = null;

        if (tooltip && !(options && options.keepTooltipOpen)) {
            tooltip.hide();
        }

        this._tooltipCategoryIx = null;
        this._sharedHighlight = false;

        if (highlight) {
            highlight.hide();
        }
    };

    Chart.prototype._deferRedraw = function _deferRedraw () {
        this._redraw();
    };

    Chart.prototype._clearRedrawTimeout = function _clearRedrawTimeout () {
        if (this._redrawTimeout) {
            clearInterval(this._redrawTimeout);
            this._redrawTimeout = null;
        }
    };

    Chart.prototype.bindCategories = function bindCategories () {
        var this$1 = this;

        var options = this.options;
        var definitions = [].concat(options.categoryAxis);

        for (var axisIx = 0; axisIx < definitions.length; axisIx++) {
            var axis = definitions[axisIx];
            if (axis.autoBind !== false) {
                this$1.bindCategoryAxisFromSeries(axis, axisIx);
            }
        }
    };

    Chart.prototype.bindCategoryAxisFromSeries = function bindCategoryAxisFromSeries (axis, axisIx) {
        var this$1 = this;

        var series = this.options.series;
        var seriesLength = series.length;
        var uniqueCategories = new HashMap();//perf improvement in case type category with dates
        var items = [];
        var bindable = false;
        var dateAxis;

        for (var seriesIx = 0; seriesIx < seriesLength; seriesIx++) {
            var s = series[seriesIx];
            var onAxis = s.categoryAxis === axis.name || (!s.categoryAxis && axisIx === 0);
            var data = s.data;
            var dataLength = data.length;
            var bind = s.categoryField && onAxis;
            bindable = bind || bindable;

            if (bind && dataLength > 0) {
                dateAxis = isDateAxis(axis, getField(s.categoryField, data[0]));

                var getFn = dateAxis ? getDateField : getField;

                for (var dataIx = 0; dataIx < dataLength; dataIx++) {
                    var dataRow = data[dataIx];
                    var category = getFn(s.categoryField, dataRow, this$1.chartService.intl);

                    if (dateAxis || !uniqueCategories.get(category)) {
                        items.push([ category, dataRow ]);

                        if (!dateAxis) {
                            uniqueCategories.set(category, true);
                        }
                    }
                }
            }
        }

        if (items.length > 0) {
            if (dateAxis) {
                items = uniqueDates(items, function(a, b) {
                    return dateComparer(a[0], b[0]);
                });
            }

            var result = transpose(items);
            axis.categories = result[0];
        } else if (bindable) {
            axis.categories = [];
        }
    };

    Chart.prototype._isBindable = function _isBindable (series) {
        var valueFields = SeriesBinder.current.valueFields(series);
        var result = true;

        for (var i = 0; i < valueFields.length; i++) {
            var field = valueFields[i];
            if (field === VALUE) {
                field = "field";
            } else {
                field = field + "Field";
            }

            if (!defined(series[field])) {
                result = false;
                break;
            }
        }

        return result;
    };

    Chart.prototype._noTransitionsRedraw = function _noTransitionsRedraw () {
        var options = this.options;
        var transitionsState;

        if (options.transitions !== false) {
            options.transitions = false;
            transitionsState = true;
        }

        this._redraw();

        if (transitionsState) {
            options.transitions = true;
        }
    };

    Chart.prototype._legendItemHover = function _legendItemHover (seriesIndex, pointIndex) {
        var ref = this;
        var plotArea = ref._plotArea;
        var highlight = ref._highlight;
        var currentSeries = (plotArea.srcSeries || plotArea.series)[seriesIndex];
        var items;

        if (inArray(currentSeries.type, [ PIE, DONUT, FUNNEL ])) {
            items = plotArea.findPoint(function(point) {
                return point.series.index === seriesIndex && point.index === pointIndex;
            });
        } else {
            items = plotArea.pointsBySeriesIndex(seriesIndex);
        }

        if (this._hasInactiveOpacity()) {
            var multipleSeries = plotArea.series.length > 1;
            var point = items[0];

            if (multipleSeries) {
                this._displayInactiveOpacity(point, true);
            } else {
                this._displayInactiveOpacity(point);
            }
        } else {
            highlight.show(items);
        }
    };

    Chart.prototype._shouldAttachMouseMove = function _shouldAttachMouseMove () {
        return this._plotArea.crosshairs.length || (this._tooltip && this._sharedTooltip()) || this.requiresHandlers([ PLOT_AREA_HOVER, PLOT_AREA_LEAVE ]);
    };

    Chart.prototype.updateMouseMoveHandler = function updateMouseMoveHandler () {
        var obj;
        unbindEvents(this.element, ( obj = {}, obj[ MOUSEMOVE ] = this._mousemove, obj ));

        if (this._shouldAttachMouseMove()) {
            var obj$1;
            bindEvents(this.element, ( obj$1 = {}, obj$1[ MOUSEMOVE ] = this._mousemove, obj$1 ));
        }
    };

    Chart.prototype.applyOptions = function applyOptions (options, theme) {
        clearMissingValues(this._originalOptions, options);
        this._originalOptions = deepExtend(this._originalOptions, options);
        this.options = deepExtend({}, this._originalOptions);

        if (theme) {
            this._theme = theme;
            this.chartService.theme = theme;
        }
        this._initTheme(this.options, this._theme);

        this._toggleDragZoomEvents();
    };

    Chart.prototype.setOptions = function setOptions (options, theme) {
        this.applyOptions(options, theme);
        this.bindCategories();
        this.redraw();
        this.updateMouseMoveHandler();
    };

    Chart.prototype.setDirection = function setDirection (rtl) {
        this.chartService.rtl = Boolean(rtl);
        if (this.surface && this.surface.type === 'svg') {
            this._destroySurface();
        }
    };

    Chart.prototype.setIntlService = function setIntlService (intl) {
        this.chartService.intl = intl;
    };

    Chart.prototype.noTransitionsRedraw = function noTransitionsRedraw () {
        this._noTransitionsRedraw();
    };

    Chart.prototype.destroy = function destroy () {
        this._destroyed = true;

        var obj;
        unbindEvents(this.element, ( obj = {}, obj[ CONTEXTMENU ] = this._clickHandler, obj[ MOUSEWHEEL ] = this._mousewheelHandler, obj[ MOUSEMOVE ] = this._mousemove, obj[ MOUSELEAVE ] = this._mouseleaveHandler, obj ));

        if (this.domEvents) {
            this.domEvents.destroy();
            delete this.domEvents;
        }

        if (this._mouseMoveTrackHandler) {
            var obj$1;
            unbindEvents(document, ( obj$1 = {}, obj$1[ MOUSEMOVE ] = this._mouseMoveTrackHandler, obj$1 ));
        }

        this._destroyView();

        this._destroySurface();

        this._clearRedrawTimeout();
    };

    Chart.prototype._destroySurface = function _destroySurface () {
        var surface = this.surface;
        if (surface) {
            surface.unbind("mouseenter", this._surfaceMouseenterHandler);
            surface.unbind("mouseleave", this._surfaceMouseleaveHandler);
            surface.destroy();

            this.surface = null;
        }
    };

    Chart.prototype._destroySelections = function _destroySelections () {
        var selections = this._selections;

        if (selections) {
            while (selections.length > 0) {
                selections.shift().destroy();
            }
        }
    };

    Chart.prototype._destroyView = function _destroyView () {
        var model = this._model;

        if (model) {
            model.destroy();
            this._model = null;
        }

        this._unsetActivePoint();

        this._destroySelections();

        if (this._tooltip) {
            this._tooltip.destroy();
        }

        if (this._highlight) {
            this._highlight.destroy();
        }

        if (this._zoomSelection) {
            this._zoomSelection.destroy();
            delete this._zoomSelection;
        }

        if (this._pannable) {
            this._pannable.destroy();
            delete this._pannable;
        }

        if (this._mousewheelZoom) {
            this._mousewheelZoom.destroy();
            delete this._mousewheelZoom;
        }
    };

    return Chart;
}(_progress_kendoDrawing.Class));

function resolveAxisAliases(options) {
    var aliases = AXIS_NAMES;

    for (var idx = 0; idx < aliases.length; idx++) {
        var alias = aliases[idx] + "Axes";
        if (options[alias]) {
            options[aliases[idx] + "Axis"] = options[alias];
            delete options[alias];
        }
    }
}

function pointByCategoryName(points, name) {
    if (points) {
        for (var idx = 0; idx < points.length; idx++) {
            if (points[idx].category === name) {
                return [ points[idx] ];
            }
        }
    }
}

function applyAxisDefaults(options, themeOptions) {
    var themeAxisDefaults = ((themeOptions || {}).axisDefaults) || {};
    var axisName, axisDefaults, axes;

    function mapAxisOptions(axisOptions) {
        var axisColor = (axisOptions || {}).color || axisDefaults.color;
        var result = deepExtend({},
            themeAxisDefaults,
            themeAxisDefaults[axisName],
            axisDefaults,
            axisDefaults[axisName], {
                line: { color: axisColor },
                labels: { color: axisColor },
                title: { color: axisColor }
            },
            axisOptions
        );

        delete result[axisName];

        return result;
    }

    for (var idx = 0; idx < AXIS_NAMES.length; idx++) {
        axisName = AXIS_NAMES[idx] + "Axis";
        axisDefaults = options.axisDefaults || {};
        axes = [].concat(options[axisName]);

        axes = axes.map(mapAxisOptions);

        options[axisName] = axes.length > 1 ? axes : axes[0];
    }
}

function applySeriesDefaults(options, themeOptions) {
    var series = options.series;
    var seriesLength = series.length;
    var seriesDefaults = options.seriesDefaults;
    var commonDefaults = deepExtend({}, options.seriesDefaults);
    var themeSeriesDefaults = themeOptions ? deepExtend({}, themeOptions.seriesDefaults) : {};
    var commonThemeDefaults = deepExtend({}, themeSeriesDefaults);

    cleanupNestedSeriesDefaults(commonDefaults);
    cleanupNestedSeriesDefaults(commonThemeDefaults);

    for (var i = 0; i < seriesLength; i++) {
        var seriesType = series[i].type || options.seriesDefaults.type;

        var baseOptions = deepExtend(
            { data: [] },
            commonThemeDefaults,
            themeSeriesDefaults[seriesType],
            { tooltip: options.tooltip },
            commonDefaults,
            seriesDefaults[seriesType]
        );

        series[i]._defaults = baseOptions;
        series[i] = deepExtend({}, baseOptions, series[i]);
        series[i].data = series[i].data || [];
    }
}

function cleanupNestedSeriesDefaults(seriesDefaults) {
    delete seriesDefaults.bar;
    delete seriesDefaults.column;
    delete seriesDefaults.rangeColumn;
    delete seriesDefaults.line;
    delete seriesDefaults.verticalLine;
    delete seriesDefaults.pie;
    delete seriesDefaults.donut;
    delete seriesDefaults.area;
    delete seriesDefaults.verticalArea;
    delete seriesDefaults.scatter;
    delete seriesDefaults.scatterLine;
    delete seriesDefaults.bubble;
    delete seriesDefaults.candlestick;
    delete seriesDefaults.ohlc;
    delete seriesDefaults.boxPlot;
    delete seriesDefaults.bullet;
    delete seriesDefaults.verticalBullet;
    delete seriesDefaults.polarArea;
    delete seriesDefaults.polarLine;
    delete seriesDefaults.radarArea;
    delete seriesDefaults.radarLine;
    delete seriesDefaults.waterfall;
}


function axisRanges(axes) {
    var ranges = {};

    for (var i = 0; i < axes.length; i++) {
        var axis = axes[i];
        var axisName = axis.options.name;
        if (axisName) {
            ranges[axisName] = axis.range();
        }
    }

    return ranges;
}

function sortDates(dates, comparer) {
    if ( comparer === void 0 ) comparer = dateComparer;

    for (var i = 1, length = dates.length; i < length; i++) {
        if (comparer(dates[i], dates[i - 1]) < 0) {
            dates.sort(comparer);
            break;
        }
    }

    return dates;
}

function uniqueDates(srcDates, comparer) {
    if ( comparer === void 0 ) comparer = dateComparer;

    var dates = sortDates(srcDates, comparer);
    var length = dates.length;
    var result = length > 0 ? [ dates[0] ] : [];

    for (var i = 1; i < length; i++) {
        if (comparer(dates[i], last(result)) !== 0) {
            result.push(dates[i]);
        }
    }

    return result;
}

function transpose(rows) {
    var rowCount = rows.length;
    var result = [];

    for (var rowIx = 0; rowIx < rowCount; rowIx++) {
        var row = rows[rowIx];
        var colCount = row.length;

        for (var colIx = 0; colIx < colCount; colIx++) {
            result[colIx] = result[colIx] || [];
            result[colIx].push(row[colIx]);
        }
    }

    return result;
}

var DATA_FIELDS = [ 'data', 'categories' ];

function clearMissingValues(originalOptions, options) {
    for (var field in options) {
        if (!inArray(field, DATA_FIELDS) && options.hasOwnProperty(field)) {
            var fieldValue = options[field];
            var originalValue = originalOptions[field];
            if (defined(originalValue)) {
                var nullValue = fieldValue === null;
                if ((nullValue || !defined(fieldValue))) {
                    delete originalOptions[field];
                    if (nullValue) {
                        delete options[field];
                    }
                } else if (originalValue && isObject(fieldValue)) {
                    if (isObject(originalValue)) {
                        clearMissingValues(originalValue, fieldValue);
                    }
                }
            }
        }
    }
}

function triggerPaneRender(panes) {
    for (var idx = 0; idx < panes.length; idx++) {
        panes[idx].notifyRender();
    }
}

setDefaultOptions(Chart, {
    renderAs: "",
    chartArea: {},
    legend: {
        visible: true,
        labels: {}
    },
    categoryAxis: {},
    seriesDefaults: {
        type: COLUMN,
        data: [],
        highlight: {
            visible: true
        },
        labels: {},
        negativeValues: {
            visible: false
        }
    },
    series: [],
    seriesColors: null,
    tooltip: {
        visible: false
    },
    transitions: true,
    valueAxis: {},
    plotArea: {},
    title: {},
    xAxis: {},
    yAxis: {},
    panes: [ {} ],
    pannable: false,
    zoomable: false
});

var TOP_OFFSET = -2;

var SharedTooltip$1 = (function (ChartSharedTooltip) {
    function SharedTooltip$$1 () {
        ChartSharedTooltip.apply(this, arguments);
    }

    if ( ChartSharedTooltip ) SharedTooltip$$1.__proto__ = ChartSharedTooltip;
    SharedTooltip$$1.prototype = Object.create( ChartSharedTooltip && ChartSharedTooltip.prototype );
    SharedTooltip$$1.prototype.constructor = SharedTooltip$$1;

    SharedTooltip$$1.prototype._slotAnchor = function _slotAnchor (coords, slot) {
        var axis = this.plotArea.categoryAxis;
        var vertical = axis.options.vertical;
        var align = vertical ? {
            horizontal: "left",
            vertical: "center"
        } : {
            horizontal: "center",
            vertical: "bottom"
        };

        var point;

        if (vertical) {
            point = new Point(this.plotArea.box.x2, slot.center().y);
        } else {
            point = new Point(slot.center().x, TOP_OFFSET);
        }

        return {
            point: point,
            align: align
        };
    };

    SharedTooltip$$1.prototype._defaultAnchor = function _defaultAnchor (point, slot) {
        return this._slotAnchor({}, slot);
    };

    return SharedTooltip$$1;
}(SharedTooltip));

var DEAULT_BAR_WIDTH = 150;
var DEAULT_BULLET_WIDTH = 150;
var NO_CROSSHAIR = [ BAR, BULLET ];

function hide$1(children) {
    var state = [];
    for (var idx = 0; idx < children.length; idx++) {
        var child = children[idx];
        state[idx] = child.style.display;
        child.style.display = "none";
    }

    return state;
}

function show$1(children, state) {
    for (var idx = 0; idx < children.length; idx++) {
        children[idx].style.display = state[idx];
    }
}

function wrapNumber(value) {
    return isNumber(value) ? [ value ] : value;
}

var Sparkline = (function (Chart$$1) {
    function Sparkline () {
        Chart$$1.apply(this, arguments);
    }

    if ( Chart$$1 ) Sparkline.__proto__ = Chart$$1;
    Sparkline.prototype = Object.create( Chart$$1 && Chart$$1.prototype );
    Sparkline.prototype.constructor = Sparkline;

    Sparkline.prototype._setElementClass = function _setElementClass (element) {
        addClass(element, 'k-sparkline');
    };

    Sparkline.prototype._initElement = function _initElement (element) {
        Chart$$1.prototype._initElement.call(this, element);

        this._initialWidth = Math.floor(elementSize$1(element).width);
    };

    Sparkline.prototype._resize = function _resize () {
        var element = this.element;
        var state = hide$1(element.childNodes);

        this._initialWidth = Math.floor(elementSize$1(element).width);

        show$1(element.childNodes, state);

        Chart$$1.prototype._resize.call(this);
    };

    Sparkline.prototype._modelOptions = function _modelOptions () {
        var chartOptions = this.options;
        var stage = this._surfaceWrap();
        var displayState = hide$1(stage.childNodes);

        var space = document.createElement('span');
        space.innerHTML = '&nbsp;';

        stage.appendChild(space);

        var options = deepExtend({
            width: this._autoWidth,
            height: elementSize$1(stage).height,
            transitions: chartOptions.transitions
        }, chartOptions.chartArea, {
            inline: true,
            align: false
        });

        elementSize$1(stage, {
            width: options.width,
            height: options.height
        });

        stage.removeChild(space);

        show$1(stage.childNodes, displayState);

        if (this.surface) {
            this.surface.resize();
        }

        return options;
    };

    Sparkline.prototype._surfaceWrap = function _surfaceWrap () {
        if (!this.stage) {
            var stage = this.stage = document.createElement('span');
            this.element.appendChild(stage);
        }
        return this.stage;
    };

    Sparkline.prototype._createPlotArea = function _createPlotArea (skipSeries) {
        var plotArea = Chart$$1.prototype._createPlotArea.call(this, skipSeries);
        this._autoWidth = this._initialWidth || this._calculateWidth(plotArea);

        return plotArea;
    };

    Sparkline.prototype._calculateWidth = function _calculateWidth (plotArea) {
        var options = this.options;
        var margin = getSpacing(options.chartArea.margin);
        var charts = plotArea.charts;
        var stage = this._surfaceWrap();
        var total = 0;


        for (var i = 0; i < charts.length; i++) {
            var currentChart = charts[i];
            var firstSeries = (currentChart.options.series || [])[0];
            if (!firstSeries) {
                continue;
            }

            if (firstSeries.type === BAR) {
                return DEAULT_BAR_WIDTH;
            }

            if (firstSeries.type === BULLET) {
                return DEAULT_BULLET_WIDTH;
            }

            if (firstSeries.type === PIE) {
                return elementSize$1(stage).height;
            }

            var categoryAxis = currentChart.categoryAxis;
            if (categoryAxis) {
                var pointsCount = categoryAxis.categoriesCount() *
                    (!currentChart.options.isStacked && inArray(firstSeries.type, [ COLUMN, VERTICAL_BULLET ]) ? currentChart.seriesOptions.length : 1);

                total = Math.max(total, pointsCount);
            }
        }

        var size = total * options.pointWidth;
        if (size > 0) {
            size += margin.left + margin.right;
        }

        return size;
    };

    Sparkline.prototype._createSharedTooltip = function _createSharedTooltip (options) {
        return new SharedTooltip$1(this._plotArea, options);
    };

    Sparkline.normalizeOptions = function normalizeOptions (userOptions) {
        var options = wrapNumber(userOptions);

        if (isArray(options)) {
            options = { seriesDefaults: { data: options } };
        } else {
            options = deepExtend({}, options);
        }

        if (!options.series) {
            options.series = [ { data: wrapNumber(options.data) } ];
        }

        deepExtend(options, {
            seriesDefaults: {
                type: options.type
            }
        });

        if (inArray(options.series[0].type, NO_CROSSHAIR) ||
            inArray(options.seriesDefaults.type, NO_CROSSHAIR)) {
            options = deepExtend({}, {
                categoryAxis: {
                    crosshair: {
                        visible: false
                    }
                }
            }, options);
        }

        return options;
    };

    return Sparkline;
}(Chart));

setDefaultOptions(Sparkline, {
    chartArea: {
        margin: 2
    },
    axisDefaults: {
        visible: false,
        majorGridLines: {
            visible: false
        },
        valueAxis: {
            narrowRange: true
        }
    },
    seriesDefaults: {
        type: "line",
        area: {
            line: {
                width: 0.5
            }
        },
        bar: {
            stack: true
        },
        padding: 2,
        width: 0.5,
        overlay: {
            gradient: null
        },
        highlight: {
            visible: false
        },
        border: {
            width: 0
        },
        markers: {
            size: 2,
            visible: false
        }
    },
    tooltip: {
        visible: true,
        shared: true
    },
    categoryAxis: {
        crosshair: {
            visible: true,
            tooltip: {
                visible: false
            }
        }
    },
    legend: {
        visible: false
    },
    transitions: false,

    pointWidth: 5,

    panes: [ { clip: false } ]
});

var FadeOutAnimation = (function (superclass) {
    function FadeOutAnimation () {
        superclass.apply(this, arguments);
    }

    if ( superclass ) FadeOutAnimation.__proto__ = superclass;
    FadeOutAnimation.prototype = Object.create( superclass && superclass.prototype );
    FadeOutAnimation.prototype.constructor = FadeOutAnimation;

    FadeOutAnimation.prototype.setup = function setup () {
        this._initialOpacity = parseFloat(elementStyles(this.element, 'opacity').opacity);
    };

    FadeOutAnimation.prototype.step = function step (pos) {
        elementStyles(this.element, {
            opacity: String(interpolateValue(this._initialOpacity, 0, pos))
        });
    };

    FadeOutAnimation.prototype.abort = function abort () {
        superclass.prototype.abort.call(this);
        elementStyles(this.element, {
            display: 'none',
            opacity: String(this._initialOpacity)
        });
    };

    FadeOutAnimation.prototype.cancel = function cancel () {
        superclass.prototype.abort.call(this);
        elementStyles(this.element, {
            opacity: String(this._initialOpacity)
        });
    };

    return FadeOutAnimation;
}(_progress_kendoDrawing.drawing.Animation));

function createDiv$1(className, style) {
    var div = document.createElement("div");
    div.className = className;
    if (style) {
        div.style.cssText = style;
    }

    return div;
}

var NavigatorHint = (function (Class$$1) {
    function NavigatorHint(container, chartService, options) {
        Class$$1.call(this);

        this.options = deepExtend({}, this.options, options);
        this.container = container;
        this.chartService = chartService;

        var padding = elementStyles(container, [ "paddingLeft", "paddingTop" ]);
        this.chartPadding = {
            top: padding.paddingTop,
            left: padding.paddingLeft
        };

        this.createElements();
        container.appendChild(this.element);
    }

    if ( Class$$1 ) NavigatorHint.__proto__ = Class$$1;
    NavigatorHint.prototype = Object.create( Class$$1 && Class$$1.prototype );
    NavigatorHint.prototype.constructor = NavigatorHint;

    NavigatorHint.prototype.createElements = function createElements () {
        var element = this.element = createDiv$1('k-navigator-hint', 'display: none; position: absolute; top: 1px; left: 1px;');
        var tooltip = this.tooltip = createDiv$1('k-tooltip k-chart-tooltip');
        var scroll = this.scroll = createDiv$1('k-scroll');

        tooltip.innerHTML = '&nbsp;';

        element.appendChild(tooltip);
        element.appendChild(scroll);
    };

    NavigatorHint.prototype.show = function show (from, to, bbox) {
        var ref = this;
        var element = ref.element;
        var options = ref.options;
        var scroll = ref.scroll;
        var tooltip = ref.tooltip;
        var middle = toDate(toTime(from) + toTime(to - from) / 2);
        var scrollWidth = bbox.width() * 0.4;
        var minPos = bbox.center().x - scrollWidth;
        var maxPos = bbox.center().x;
        var posRange = maxPos - minPos;
        var range = options.max - options.min;
        var scale = posRange / range;
        var offset = middle - options.min;
        var text = this.chartService.intl.format(options.format, from, to);
        var template = getTemplate(options);

        this.clearHideTimeout();

        if (!this._visible) {
            elementStyles(element, {
                visibility: 'hidden',
                display: 'block'
            });
            this._visible = true;
        }

        if (template) {
            text = template({
                from: from,
                to: to
            });
        }

        tooltip.innerHTML = text;
        elementStyles(tooltip, {
            left: bbox.center().x - tooltip.offsetWidth / 2,
            top: bbox.y1
        });

        var tooltipStyle = elementStyles(tooltip, [ 'marginTop', 'borderTopWidth', 'height' ]);

        elementStyles(scroll, {
            width: scrollWidth,
            left: minPos + offset * scale,
            top: bbox.y1 + tooltipStyle.marginTop + tooltipStyle.borderTopWidth + tooltipStyle.height / 2
        });

        elementStyles(element, {
            visibility: 'visible'
        });
    };

    NavigatorHint.prototype.clearHideTimeout = function clearHideTimeout () {
        if (this._hideTimeout) {
            clearTimeout(this._hideTimeout);
        }

        if (this._hideAnimation) {
            this._hideAnimation.cancel();
        }
    };

    NavigatorHint.prototype.hide = function hide () {
        var this$1 = this;

        this.clearHideTimeout();

        this._hideTimeout = setTimeout(function () {
            this$1._visible = false;
            this$1._hideAnimation = new FadeOutAnimation(this$1.element);
            this$1._hideAnimation.setup();
            this$1._hideAnimation.play();
        }, this.options.hideDelay);
    };

    NavigatorHint.prototype.destroy = function destroy () {
        this.clearHideTimeout();
        if (this.container) {
            this.container.removeChild(this.element);
        }
        delete this.container;
        delete this.chartService;
        delete this.element;
        delete this.tooltip;
        delete this.scroll;
    };

    return NavigatorHint;
}(_progress_kendoDrawing.Class));

setDefaultOptions(NavigatorHint, {
    format: "{0:d} - {1:d}",
    hideDelay: 500
});

var NAVIGATOR_PANE = "_navigator";
var NAVIGATOR_AXIS = NAVIGATOR_PANE;



var constants = Object.freeze({
	NAVIGATOR_AXIS: NAVIGATOR_AXIS,
	NAVIGATOR_PANE: NAVIGATOR_PANE
});

var ZOOM_ACCELERATION$1 = 3;

var Navigator = (function (Class$$1) {
    function Navigator(chart) {
        Class$$1.call(this);

        this.chart = chart;
        var options = this.options = deepExtend({}, this.options, chart.options.navigator);
        var select = options.select;
        if (select) {
            select.from = this.parseDate(select.from);
            select.to = this.parseDate(select.to);
        }

        if (!defined(options.hint.visible)) {
            options.hint.visible = options.visible;
        }

        var obj;
        this.chartObserver = new InstanceObserver(this, ( obj = {}, obj[DRAG] = '_drag', obj[DRAG_END] = '_dragEnd', obj[ZOOM] = '_zoom', obj[ZOOM_END] = '_zoomEnd', obj ));
        chart.addObserver(this.chartObserver);
    }

    if ( Class$$1 ) Navigator.__proto__ = Class$$1;
    Navigator.prototype = Object.create( Class$$1 && Class$$1.prototype );
    Navigator.prototype.constructor = Navigator;

    Navigator.prototype.parseDate = function parseDate$1 (value) {
        return parseDate(this.chart.chartService.intl, value);
    };

    Navigator.prototype.clean = function clean () {
        if (this.selection) {
            this.selection.destroy();
            this.selection = null;
        }

        if (this.hint) {
            this.hint.destroy();
            this.hint = null;
        }
    };

    Navigator.prototype.destroy = function destroy () {
        if (this.chart) {
            this.chart.removeObserver(this.chartObserver);
            delete this.chart;
        }

        this.clean();
    };

    Navigator.prototype.redraw = function redraw () {
        this._redrawSelf();
        this.initSelection();
    };

    Navigator.prototype.initSelection = function initSelection () {
        var ref = this;
        var chart = ref.chart;
        var options = ref.options;
        var axis = this.mainAxis();
        var ref$1 = axis.roundedRange();
        var min = ref$1.min;
        var max = ref$1.max;
        var ref$2 = options.select;
        var from = ref$2.from;
        var to = ref$2.to;
        var mousewheel = ref$2.mousewheel;
        var axisClone = clone$1(axis);

        if (axis.categoriesCount() === 0) {
            return;
        }

        this.clean();

        // "Freeze" the selection axis position until the next redraw
        axisClone.box = axis.box;

        this.selection = new Selection(chart, axisClone, {
            min: min,
            max: max,
            from: from || min,
            to: to || max,
            mousewheel: valueOrDefault(mousewheel, { zoom: "left" }),
            visible: options.visible
        }, new InstanceObserver(this, {
            selectStart: '_selectStart',
            select: '_select',
            selectEnd: '_selectEnd'
        }));

        if (options.hint.visible) {
            this.hint = new NavigatorHint(chart.element, chart.chartService, {
                min: min,
                max: max,
                template: getTemplate(options.hint),
                format: options.hint.format
            });
        }
    };

    Navigator.prototype.setRange = function setRange () {
        var plotArea = this.chart._createPlotArea(true);
        var axis = plotArea.namedCategoryAxes[NAVIGATOR_AXIS];

        var ref = axis.roundedRange();
        var min = ref.min;
        var max = ref.max;

        var select = this.options.select || {};
        var from = select.from || min;
        if (from < min) {
            from = min;
        }

        var to = select.to || max;
        if (to > max) {
            to = max;
        }

        this.options.select = deepExtend({}, select, {
            from: from,
            to: to
        });

        this.filterAxes();
    };

    Navigator.prototype._redrawSelf = function _redrawSelf (silent) {
        var plotArea = this.chart._plotArea;

        if (plotArea) {
            plotArea.redraw(last(plotArea.panes), silent);
        }
    };

    Navigator.prototype.redrawSlaves = function redrawSlaves () {
        var chart = this.chart;
        var plotArea = chart._plotArea;
        var slavePanes = plotArea.panes.slice(0, -1);

        // Update the original series and categoryAxis before partial refresh.
        plotArea.srcSeries = chart.options.series;
        plotArea.options.categoryAxis = chart.options.categoryAxis;
        plotArea.clearSeriesPointsCache();

        plotArea.redraw(slavePanes);
    };

    Navigator.prototype._drag = function _drag (e) {
        var ref = this;
        var chart = ref.chart;
        var selection = ref.selection;
        var coords = chart._eventCoordinates(e.originalEvent);
        var navigatorAxis = this.mainAxis();
        var naviRange = navigatorAxis.roundedRange();
        var inNavigator = navigatorAxis.pane.box.containsPoint(coords);
        var axis = chart._plotArea.categoryAxis;
        var range = e.axisRanges[axis.options.name];
        var select = this.options.select;
        var duration$$1;

        if (!range || inNavigator || !selection) {
            return;
        }

        if (select.from && select.to) {
            duration$$1 = toTime(select.to) - toTime(select.from);
        } else {
            duration$$1 = toTime(selection.options.to) - toTime(selection.options.from);
        }

        var from = toDate(limitValue(
            toTime(range.min),
            naviRange.min, toTime(naviRange.max) - duration$$1
        ));

        var to = toDate(limitValue(
            toTime(from) + duration$$1,
            toTime(naviRange.min) + duration$$1, naviRange.max
        ));

        this.options.select = { from: from, to: to };

        if (this.options.liveDrag) {
            this.filterAxes();
            this.redrawSlaves();
        }

        selection.set(from, to);

        this.showHint(from, to);
    };

    Navigator.prototype._dragEnd = function _dragEnd () {
        this.filterAxes();
        this.filter();
        this.redrawSlaves();

        if (this.hint) {
            this.hint.hide();
        }
    };

    Navigator.prototype.readSelection = function readSelection () {
        var ref = this;
        var ref_selection_options = ref.selection.options;
        var from = ref_selection_options.from;
        var to = ref_selection_options.to;
        var select = ref.options.select;

        select.from = from;
        select.to = to;
    };

    Navigator.prototype.filterAxes = function filterAxes () {
        var ref = this;
        var select = ref.options.select; if ( select === void 0 ) select = { };
        var chart = ref.chart;
        var allAxes = chart.options.categoryAxis;
        var from = select.from;
        var to = select.to;

        for (var idx = 0; idx < allAxes.length; idx++) {
            var axis = allAxes[idx];
            if (axis.pane !== NAVIGATOR_PANE) {
                axis.min = from;
                axis.max = to;
            }
        }
    };

    Navigator.prototype.filter = function filter () {
        var ref = this;
        var chart = ref.chart;
        var select = ref.options.select;

        if (!chart.requiresHandlers([ "navigatorFilter" ])) {
            return;
        }

        var mainAxis = this.mainAxis();
        var args = {
            from: select.from,
            to: select.to
        };

        if (mainAxis.options.type !== 'category') {
            var axisOptions = new DateCategoryAxis(deepExtend({
                baseUnit: "fit"
            }, chart.options.categoryAxis[0], {
                categories: [ select.from, select.to ]
            }), chart.chartService).options;

            args.from = addDuration(axisOptions.min, -axisOptions.baseUnitStep, axisOptions.baseUnit);
            args.to = addDuration(axisOptions.max, axisOptions.baseUnitStep, axisOptions.baseUnit);
        }

        this.chart.trigger("navigatorFilter", args);
    };

    Navigator.prototype._zoom = function _zoom (e) {
        var ref = this;
        var axis = ref.chart._plotArea.categoryAxis;
        var selection = ref.selection;
        var ref_options = ref.options;
        var select = ref_options.select;
        var liveDrag = ref_options.liveDrag;
        var mainAxis = this.mainAxis();
        var delta = e.delta;

        if (!selection) {
            return;
        }

        var fromIx = mainAxis.categoryIndex(selection.options.from);
        var toIx = mainAxis.categoryIndex(selection.options.to);

        e.originalEvent.preventDefault();

        if (Math.abs(delta) > 1) {
            delta *= ZOOM_ACCELERATION$1;
        }

        if (toIx - fromIx > 1) {
            selection.expand(delta);
            this.readSelection();
        } else {
            axis.options.min = select.from;
            select.from = axis.scaleRange(-e.delta).min;
        }

        if (liveDrag) {
            this.filterAxes();
            this.redrawSlaves();
        }

        selection.set(select.from, select.to);

        this.showHint(this.options.select.from, this.options.select.to);
    };

    Navigator.prototype._zoomEnd = function _zoomEnd (e) {
        this._dragEnd(e);
    };

    Navigator.prototype.showHint = function showHint (from, to) {
        var plotArea = this.chart._plotArea;

        if (this.hint) {
            this.hint.show(from, to, plotArea.backgroundBox());
        }
    };

    Navigator.prototype._selectStart = function _selectStart (e) {
        return this.chart._selectStart(e);
    };

    Navigator.prototype._select = function _select (e) {
        this.showHint(e.from, e.to);

        return this.chart._select(e);
    };

    Navigator.prototype._selectEnd = function _selectEnd (e) {
        if (this.hint) {
            this.hint.hide();
        }

        this.readSelection();
        this.filterAxes();
        this.filter();
        this.redrawSlaves();

        return this.chart._selectEnd(e);
    };

    Navigator.prototype.mainAxis = function mainAxis () {
        var plotArea = this.chart._plotArea;

        if (plotArea) {
            return plotArea.namedCategoryAxes[NAVIGATOR_AXIS];
        }
    };

    Navigator.prototype.select = function select (from, to) {
        var select = this.options.select;

        if (from && to) {
            select.from = this.parseDate(from);
            select.to = this.parseDate(to);

            this.filterAxes();
            this.filter();
            this.redrawSlaves();

            this.selection.set(from, to);
        }

        return {
            from: select.from,
            to: select.to
        };
    };

    Navigator.setup = function setup (options, themeOptions) {
        if ( options === void 0 ) options = {};
        if ( themeOptions === void 0 ) themeOptions = {};

        if (options.__navi) {
            return;
        }
        options.__navi = true;

        var naviOptions = deepExtend({}, themeOptions.navigator, options.navigator);
        var panes = options.panes = [].concat(options.panes);
        var paneOptions = deepExtend({}, naviOptions.pane, { name: NAVIGATOR_PANE });

        if (!naviOptions.visible) {
            paneOptions.visible = false;
            paneOptions.height = 0.1;
        }

        panes.push(paneOptions);

        Navigator.attachAxes(options, naviOptions);
        Navigator.attachSeries(options, naviOptions, themeOptions);
    };

    Navigator.attachAxes = function attachAxes (options, naviOptions) {
        var series = naviOptions.series || [];
        var categoryAxes = options.categoryAxis = [].concat(options.categoryAxis);
        var valueAxes = options.valueAxis = [].concat(options.valueAxis);

        var equallySpacedSeries = filterSeriesByType(series, EQUALLY_SPACED_SERIES);
        var justifyAxis = equallySpacedSeries.length === 0;

        var base = deepExtend({
            type: "date",
            pane: NAVIGATOR_PANE,
            roundToBaseUnit: !justifyAxis,
            justified: justifyAxis,
            _collapse: false,
            majorTicks: { visible: true },
            tooltip: { visible: false },
            labels: { step: 1 },
            autoBind: naviOptions.autoBindElements,
            autoBaseUnitSteps: {
                minutes: [ 1 ],
                hours: [ 1, 2 ],
                days: [ 1, 2 ],
                weeks: [],
                months: [ 1 ],
                years: [ 1 ]
            }
        });
        var user = naviOptions.categoryAxis;

        categoryAxes.push(
            deepExtend({}, base, {
                maxDateGroups: 200
            }, user, {
                name: NAVIGATOR_AXIS,
                title: null,
                baseUnit: "fit",
                baseUnitStep: "auto",
                labels: { visible: false },
                majorTicks: { visible: false }
            }), deepExtend({}, base, user, {
                name: NAVIGATOR_AXIS + "_labels",
                maxDateGroups: 20,
                baseUnitStep: "auto",
                labels: { position: "" },
                plotBands: [],
                autoBaseUnitSteps: {
                    minutes: []
                },
                _overlap: true
            }), deepExtend({}, base, user, {
                name: NAVIGATOR_AXIS + "_ticks",
                maxDateGroups: 200,
                majorTicks: {
                    width: 0.5
                },
                plotBands: [],
                title: null,
                labels: { visible: false, mirror: true },
                _overlap: true
            })
        );

        valueAxes.push(deepExtend({
            name: NAVIGATOR_AXIS,
            pane: NAVIGATOR_PANE,
            majorGridLines: {
                visible: false
            },
            visible: false
        }, naviOptions.valueAxis));
    };

    Navigator.attachSeries = function attachSeries (options, naviOptions, themeOptions) {
        var series = options.series = options.series || [];
        var navigatorSeries = [].concat(naviOptions.series || []);
        var seriesColors = themeOptions.seriesColors;
        var defaults = naviOptions.seriesDefaults;

        for (var idx = 0; idx < navigatorSeries.length; idx++) {
            series.push(
                deepExtend({
                    color: seriesColors[idx % seriesColors.length],
                    categoryField: naviOptions.dateField,
                    visibleInLegend: false,
                    tooltip: {
                        visible: false
                    }
                }, defaults, navigatorSeries[idx], {
                    axis: NAVIGATOR_AXIS,
                    categoryAxis: NAVIGATOR_AXIS,
                    autoBind: naviOptions.autoBindElements
                })
            );
        }
    };

    return Navigator;
}(_progress_kendoDrawing.Class));

function ClonedObject() { }
function clone$1(obj) {
    ClonedObject.prototype = obj;
    return new ClonedObject();
}

var AUTO_CATEGORY_WIDTH = 28;

var StockChart = (function (Chart$$1) {
    function StockChart () {
        Chart$$1.apply(this, arguments);
    }

    if ( Chart$$1 ) StockChart.__proto__ = Chart$$1;
    StockChart.prototype = Object.create( Chart$$1 && Chart$$1.prototype );
    StockChart.prototype.constructor = StockChart;

    StockChart.prototype.applyDefaults = function applyDefaults (options, themeOptions) {
        var width = elementSize$1(this.element).width || DEFAULT_WIDTH;
        var theme = themeOptions;

        var stockDefaults = {
            seriesDefaults: {
                categoryField: options.dateField
            },
            axisDefaults: {
                categoryAxis: {
                    name: "default",
                    majorGridLines: {
                        visible: false
                    },
                    labels: {
                        step: 2
                    },
                    majorTicks: {
                        visible: false
                    },
                    maxDateGroups: Math.floor(width / AUTO_CATEGORY_WIDTH)
                }
            }
        };

        if (theme) {
            theme = deepExtend({}, theme, stockDefaults);
        }

        Navigator.setup(options, theme);

        Chart$$1.prototype.applyDefaults.call(this, options, theme);
    };

    StockChart.prototype._setElementClass = function _setElementClass (element) {
        addClass(element, 'k-chart k-stockchart');
    };

    StockChart.prototype.setOptions = function setOptions (options) {
        this.destroyNavigator();
        Chart$$1.prototype.setOptions.call(this, options);
    };

    StockChart.prototype.noTransitionsRedraw = function noTransitionsRedraw () {
        var transitions = this.options.transitions;

        this.options.transitions = false;
        this._fullRedraw();
        this.options.transitions = transitions;
    };

    StockChart.prototype._resize = function _resize () {
        this.noTransitionsRedraw();
    };

    StockChart.prototype._redraw = function _redraw () {
        var navigator = this.navigator;

        if (!this._dirty() && navigator && navigator.options.partialRedraw) {
            navigator.redrawSlaves();
        } else {
            this._fullRedraw();
        }
    };

    StockChart.prototype._dirty = function _dirty () {
        var options = this.options;
        var series = [].concat(options.series, options.navigator.series);
        var seriesCount = grep(series, function(s) { return s && s.visible; }).length;
        var dirty = this._seriesCount !== seriesCount;
        this._seriesCount = seriesCount;

        return dirty;
    };

    StockChart.prototype._fullRedraw = function _fullRedraw () {
        var navigator = this.navigator;

        if (!navigator) {
            navigator = this.navigator = new Navigator(this);
            this.trigger("navigatorCreated", { navigator: navigator });
        }

        navigator.clean();
        navigator.setRange();

        Chart$$1.prototype._redraw.call(this);

        navigator.initSelection();
    };

    StockChart.prototype._trackSharedTooltip = function _trackSharedTooltip (coords) {
        var plotArea = this._plotArea;
        var pane = plotArea.paneByPoint(coords);

        if (pane && pane.options.name === NAVIGATOR_PANE) {
            this._unsetActivePoint();
        } else {
            Chart$$1.prototype._trackSharedTooltip.call(this, coords);
        }
    };

    StockChart.prototype.bindCategories = function bindCategories () {
        Chart$$1.prototype.bindCategories.call(this);
        this.copyNavigatorCategories();
    };

    StockChart.prototype.copyNavigatorCategories = function copyNavigatorCategories () {
        var definitions = [].concat(this.options.categoryAxis);
        var categories;

        for (var axisIx = 0; axisIx < definitions.length; axisIx++) {
            var axis = definitions[axisIx];
            if (axis.name === NAVIGATOR_AXIS) {
                categories = axis.categories;
            } else if (categories && axis.pane === NAVIGATOR_PANE) {
                axis.categories = categories;
            }
        }
    };

    StockChart.prototype.destroyNavigator = function destroyNavigator () {
        if (this.navigator) {
            this.navigator.destroy();
            this.navigator = null;
        }
    };

    StockChart.prototype.destroy = function destroy () {
        this.destroyNavigator();
        Chart$$1.prototype.destroy.call(this);
    };

    StockChart.prototype._stopChartHandlers = function _stopChartHandlers (e) {
        var coords = this._eventCoordinates(e);
        var pane = this._plotArea.paneByPoint(coords);

        return Chart$$1.prototype._stopChartHandlers.call(this, e) || (pane && pane.options.name === NAVIGATOR_PANE);
    };

    StockChart.prototype._toggleDragZoomEvents = function _toggleDragZoomEvents () {
        if (!this._dragZoomEnabled) {
            this.element.style.touchAction = "none";

            this._dragZoomEnabled = true;
        }
    };

    return StockChart;
}(Chart));

setDefaultOptions(StockChart, {
    dateField: "date",
    axisDefaults: {
        categoryAxis: {
            type: "date",
            baseUnit: "fit",
            justified: true
        },
        valueAxis: {
            narrowRange: true,
            labels: {
                format: "C"
            }
        }
    },
    navigator: {
        select: {},
        seriesDefaults: {
            markers: {
                visible: false
            },
            tooltip: {
                visible: true
            },
            line: {
                width: 2
            }
        },
        hint: {},
        visible: true
    },
    tooltip: {
        visible: true
    },
    legend: {
        visible: false
    }
});

var ANGULAR_SPEED = 150;
var LINEAR_SPEED = 250;
var ARROW = "arrow";
var ARROW_POINTER = "arrowPointer";
var BAR_POINTER = "barPointer";
var DEFAULT_HEIGHT$1 = 200;
var DEFAULT_LINE_WIDTH = 0.5;
var DEFAULT_WIDTH$1 = 200;
var DEGREE = Math.PI / 180;
var INSIDE$1 = "inside";
var LINEAR$1 = "linear";
var OUTSIDE$1 = "outside";
var RADIAL_POINTER = "radialPointer";
var RADIAL_RANGE_POINTER = "radialRangePointer";

function pad$1(bbox, value) {
    var origin = bbox.getOrigin();
    var size = bbox.getSize();
    var spacing = getSpacing(value);

    bbox.setOrigin([ origin.x - spacing.left, origin.y - spacing.top ]);
    bbox.setSize([ size.width + (spacing.left + spacing.right), size.height + (spacing.top + spacing.bottom) ]);

    return bbox;
}

var Group = _progress_kendoDrawing.drawing.Group;
var Path$1 = _progress_kendoDrawing.drawing.Path;
var Text$2 = _progress_kendoDrawing.drawing.Text;

function buildLabelElement(label, options) {
    var labelBox = label.box;
    var textBox = label.children[0].box;
    var border = options.border || {};
    var background = options.background || "";

    var wrapper = Path$1.fromRect(new _progress_kendoDrawing.geometry.Rect([ labelBox.x1, labelBox.y1 ], [ labelBox.width(), labelBox.height() ]), {
        stroke: {}
    });

    var text = new Text$2(label.text, new _progress_kendoDrawing.geometry.Point(textBox.x1, textBox.y1), {
        font: options.font,
        fill: { color: options.color }
    });

    var styleGeometry = pad$1(text.bbox().clone(), options.padding);

    var styleBox = Path$1.fromRect(styleGeometry, {
        stroke: {
            color: border.width ? border.color : "",
            width: border.width,
            opacity: border.opacity,
            dashType: border.dashType,
            lineJoin: "round",
            lineCap: "round"
        },
        fill: {
            color: background
        }
    });

    var elements = new Group();
    elements.append(wrapper);
    elements.append(styleBox);
    elements.append(text);

    return elements;
}

function getRange(range, min, max) {
    var from = defined(range.from) ? range.from : MIN_VALUE;
    var to = defined(range.to) ? range.to : MAX_VALUE;

    range.from = Math.max(Math.min(to, from), min);
    range.to = Math.min(Math.max(to, from), max);

    return range;
}

function unpad$1(bbox, value) {
    var spacing = getSpacing(value);

    spacing.left = -spacing.left; spacing.top = -spacing.top;
    spacing.right = -spacing.right; spacing.bottom = -spacing.bottom;

    return pad$1(bbox, spacing);
}

var DEFAULT_MARGIN = 5;
var Path = _progress_kendoDrawing.drawing.Path;
var Surface = _progress_kendoDrawing.drawing.Surface;

var Gauge = (function (Class$$1) {
    function Gauge(element, userOptions, theme, context) {
        if ( context === void 0 ) context = {};

        Class$$1.call(this);

        this.element = element;
        this.theme = theme;
        this.contextService = new ChartService(this, context);
        this._originalOptions = deepExtend({}, this.options, userOptions);
        this.options = deepExtend({}, this._originalOptions);
        this._initTheme(theme);

        this.redraw();
    }

    if ( Class$$1 ) Gauge.__proto__ = Class$$1;
    Gauge.prototype = Object.create( Class$$1 && Class$$1.prototype );
    Gauge.prototype.constructor = Gauge;

    Gauge.prototype.destroy = function destroy () {
        if (this.surface) {
            this.surface.destroy();
            this.surface = null;
        }

        delete this.element;
        delete this.surfaceElement;
    };

    Gauge.prototype.value = function value (pointerValue) {
        var pointer = this.pointers[0];

        if (arguments.length === 0) {
            return pointer.value();
        }

        pointer.value(pointerValue);
        this._setValueOptions(pointerValue);
    };

    Gauge.prototype._draw = function _draw () {
        var surface = this.surface;

        surface.clear();
        surface.draw(this._visuals);
    };

    Gauge.prototype.exportVisual = function exportVisual () {
        return this._visuals;
    };

    Gauge.prototype.allValues = function allValues (values) {
        var pointers = this.pointers;
        var allValues = [];

        if (arguments.length === 0) {
            for (var i = 0; i < pointers.length; i++) {
                allValues.push(pointers[i].value());
            }

            return allValues;
        }

        if (isArray(values)) {
            for (var i$1 = 0; i$1 < values.length; i$1++) {
                if (isNumber(values[i$1])) {
                    pointers[i$1].value(values[i$1]);
                }
            }
        }

        this._setValueOptions(values);
    };

    Gauge.prototype._setValueOptions = function _setValueOptions (values) {
        var pointers = [].concat(this.options.pointer);
        var arrayValues = [].concat(values);

        for (var i = 0; i < arrayValues.length; i++) {
            pointers[i].value = arrayValues[i];
        }
    };

    Gauge.prototype.resize = function resize () {
        this.noTransitionsRedraw();
    };

    Gauge.prototype.noTransitionsRedraw = function noTransitionsRedraw () {
        var transitions = this.options.transitions;

        this._toggleTransitions(false);

        this.redraw();

        this._toggleTransitions(transitions);
    };

    Gauge.prototype.redraw = function redraw () {
        var size = this._surfaceSize();
        var wrapper = new _progress_kendoDrawing.geometry.Rect([ 0, 0 ], [ size.width, size.height ]);

        this._initSurface();

        this.gaugeArea = this._createGaugeArea();

        this._createModel();

        var bbox = unpad$1(wrapper.bbox(), this._gaugeAreaMargin);
        this.reflow(bbox);
    };

    Gauge.prototype.setOptions = function setOptions (options, theme) {
        this._originalOptions = deepExtend(this._originalOptions, options);
        this.options = deepExtend({}, this._originalOptions);

        this._initTheme(theme);

        this.redraw();
    };

    Gauge.prototype.setDirection = function setDirection (rtl) {
        this.contextService.rtl = Boolean(rtl);
        if (this.surface && this.surface.type === 'svg') {
            this.surface.destroy();
            this.surface = null;
        }
    };

    Gauge.prototype.setIntlService = function setIntlService (intl) {
        this.contextService.intl = intl;
    };

    Gauge.prototype._initTheme = function _initTheme (theme) {
        var currentTheme = theme || this.theme || {};
        this.theme = currentTheme;

        this.options = deepExtend({}, currentTheme, this.options);
        var options = this.options;
        var pointer = options.pointer;

        if (isArray(pointer)) {
            var pointers = [];
            for (var i = 0; i < pointer.length; i++) {
                pointers.push(deepExtend({}, currentTheme.pointer, pointer[i]));
            }
            options.pointer = pointers;
        }
    };

    Gauge.prototype._createGaugeArea = function _createGaugeArea () {
        var options = this.options.gaugeArea;
        var size = this.surface.size();
        var border = options.border || {};
        var areaGeometry = new _progress_kendoDrawing.geometry.Rect([ 0, 0 ], [ size.width, size.height ]);

        this._gaugeAreaMargin = options.margin || DEFAULT_MARGIN;

        if (border.width > 0) {
            areaGeometry = unpad$1(areaGeometry, border.width);
        }

        var gaugeArea = Path.fromRect(areaGeometry, {
            stroke: {
                color: border.width ? border.color : "",
                width: border.width,
                dashType: border.dashType,
                lineJoin: "round",
                lineCap: "round"
            },
            fill: {
                color: options.background
            }
        });

        return gaugeArea;
    };

    Gauge.prototype._initSurface = function _initSurface () {
        var ref = this;
        var options = ref.options;
        var surface = ref.surface;
        var element = this._surfaceElement();
        var size = this._surfaceSize();

        elementSize$1(element, size);

        if (!surface || surface.options.type !== options.renderAs) {
            if (surface) {
                surface.destroy();
            }

            this.surface = Surface.create(element, {
                type: options.renderAs
            });
        } else {
            this.surface.clear();
            this.surface.resize();
        }
    };

    Gauge.prototype._surfaceSize = function _surfaceSize () {
        var options = this.options;
        var size = this._getSize();

        if (options.gaugeArea) {
            deepExtend(size, options.gaugeArea);
        }

        return size;
    };

    Gauge.prototype._surfaceElement = function _surfaceElement () {
        if (!this.surfaceElement) {
            this.surfaceElement = document.createElement('div');
            this.element.appendChild(this.surfaceElement);
        }

        return this.surfaceElement;
    };

    Gauge.prototype.getSize = function getSize () {
        return this._getSize();
    };

    Gauge.prototype._getSize = function _getSize () {
        var element = this.element;
        var defaultSize = this._defaultSize();
        var width = element.offsetWidth;
        var height = element.offsetHeight;

        if (!width) {
            width = defaultSize.width;
        }

        if (!height) {
            height = defaultSize.height;
        }

        return { width: width, height: height };
    };

    Gauge.prototype._defaultSize = function _defaultSize () {
        return {
            width: DEFAULT_WIDTH$1,
            height: DEFAULT_HEIGHT$1
        };
    };

    Gauge.prototype._toggleTransitions = function _toggleTransitions (value) {
        var this$1 = this;

        this.options.transitions = value;
        for (var i = 0; i < this.pointers.length; i++) {
            this$1.pointers[i].options.animation.transitions = value;
        }
    };

    return Gauge;
}(_progress_kendoDrawing.Class));

setDefaultOptions(Gauge, {
    plotArea: {},
    theme: "default",
    renderAs: "",
    pointer: {},
    scale: {},
    gaugeArea: {}
});

var Path$2 = _progress_kendoDrawing.drawing.Path;
var Group$2 = _progress_kendoDrawing.drawing.Group;
var Point$2 = _progress_kendoDrawing.geometry.Point;

function renderAxisTick(tickRenderOptions, tickOptions) {
    var position = tickRenderOptions.position;
    var tickX = tickRenderOptions.tickX;
    var tickY = tickRenderOptions.tickY;
    var start, end;

    if (tickRenderOptions.vertical) {
        start = new Point$2(tickX, position);
        end = new Point$2(tickX + tickOptions.size, position);
    } else {
        start = new Point$2(position, tickY);
        end = new Point$2(position, tickY + tickOptions.size);
    }

    var tickPath = new Path$2({
        stroke: {
            color: tickOptions.color,
            width: tickOptions.width
        }
    }).moveTo(start).lineTo(end);

    return tickPath;
}

function renderTicks$1$1(tickGroup, tickPositions, tickRenderOptions, tickOptions) {
    var count = tickPositions.length;

    if (tickOptions.visible) {
        var mirror = tickRenderOptions.mirror;
        var lineBox = tickRenderOptions.lineBox;
        for (var i = tickOptions.skip; i < count; i += tickOptions.step) {
            if (i % tickOptions.skipUnit === 0) {
                continue;
            }

            tickRenderOptions.tickX = mirror ? lineBox.x2 : lineBox.x2 - tickOptions.size;
            tickRenderOptions.tickY = mirror ? lineBox.y1 - tickOptions.size : lineBox.y1;
            tickRenderOptions.position = tickPositions[i];

            tickGroup.append(renderAxisTick(tickRenderOptions, tickOptions));
        }
    }
}

var LinearScale = (function (NumericAxis$$1) {
    function LinearScale(options, service) {
        var scaleOptions = options || {};
        if (!defined(scaleOptions.reverse) && scaleOptions.vertical === false && (service || {}).rtl) {
            scaleOptions = Object.assign({}, scaleOptions, {
                reverse: true
            });
        }

        NumericAxis$$1.call(this, 0, 1, scaleOptions, service);

        this.options.minorUnit = this.options.minorUnit || this.options.majorUnit / 10;
    }

    if ( NumericAxis$$1 ) LinearScale.__proto__ = NumericAxis$$1;
    LinearScale.prototype = Object.create( NumericAxis$$1 && NumericAxis$$1.prototype );
    LinearScale.prototype.constructor = LinearScale;

    LinearScale.prototype.initUserOptions = function initUserOptions (options) {
        var scaleOptions = deepExtend({}, this.options, options);
        scaleOptions = deepExtend({}, scaleOptions , { labels: { mirror: scaleOptions.mirror } });
        scaleOptions.majorUnit = scaleOptions.majorUnit || autoMajorUnit(scaleOptions.min, scaleOptions.max);

        return scaleOptions;
    };

    LinearScale.prototype.initFields = function initFields () {
    };

    LinearScale.prototype.render = function render () {
        var elements = this.elements = new Group$2();
        var labels = this.renderLabels();
        var scaleLine = this.renderLine();
        var scaleTicks = this.renderTicks();
        var ranges = this.renderRanges();

        elements.append(scaleLine, labels, scaleTicks, ranges);

        return elements;
    };

    LinearScale.prototype.renderRanges = function renderRanges () {
        var this$1 = this;

        var options = this.options;
        var min = options.min;
        var max = options.max;
        var vertical = options.vertical;
        var mirror = options.labels.mirror;
        var ranges = options.ranges || [];
        var elements = new Group$2();
        var count = ranges.length;
        var rangeSize = options.rangeSize || options.minorTicks.size / 2;

        for (var i = 0; i < count; i++) {
            var range = getRange(ranges[i], min, max);
            var slot = this$1.getSlot(range.from, range.to);
            var slotX = vertical ? this$1.lineBox() : slot;
            var slotY = vertical ? slot : this$1.lineBox();
            if (vertical) {
                slotX.x1 -= rangeSize * (mirror ? -1 : 1);
            } else {
                slotY.y2 += rangeSize * (mirror ? -1 : 1);
            }

            elements.append(Path$2.fromRect(new _progress_kendoDrawing.geometry.Rect([ slotX.x1, slotY.y1 ], [ slotX.x2 - slotX.x1, slotY.y2 - slotY.y1 ]), {
                fill: { color: range.color, opacity: range.opacity },
                stroke: { }
            }));
        }

        return elements;
    };

    LinearScale.prototype.renderLabels = function renderLabels () {
        var ref = this;
        var labels = ref.labels;
        var options = ref.options;
        var elements = new Group$2();

        for (var i = 0; i < labels.length; i++) {
            elements.append(buildLabelElement(labels[i], options.labels));
        }

        return elements;
    };

    LinearScale.prototype.renderLine = function renderLine () {
        var line = this.options.line;
        var lineBox = this.lineBox();
        var elements = new Group$2();

        if (line.width > 0 && line.visible) {
            var linePath = new Path$2({
                stroke: {
                    color: line.color,
                    dashType: line.dashType,
                    width: line.width
                }
            });

            linePath.moveTo(lineBox.x1, lineBox.y1).lineTo(lineBox.x2, lineBox.y2);
            elements.append(linePath);
        }

        return elements;
    };

    LinearScale.prototype.renderTicks = function renderTicks$1 () {
        var ticks = new Group$2();
        var options = this.options;
        var majorUnit = options.majorTicks.visible ? options.majorUnit : 0;
        var tickRenderOptions = {
            vertical: options.vertical,
            mirror: options.labels.mirror,
            lineBox: this.lineBox()
        };

        renderTicks$1$1(ticks, this.getMajorTickPositions(), tickRenderOptions, options.majorTicks);
        renderTicks$1$1(ticks, this.getMinorTickPositions(), tickRenderOptions, deepExtend({}, {
            skipUnit: majorUnit / options.minorUnit
        }, options.minorTicks));

        return ticks;
    };

    return LinearScale;
}(NumericAxis));

setDefaultOptions(LinearScale, {
    min: 0,
    max: 50,

    majorTicks: {
        size: 15,
        align: INSIDE$1,
        color: BLACK,
        width: DEFAULT_LINE_WIDTH,
        visible: true
    },

    minorTicks: {
        size: 10,
        align: INSIDE$1,
        color: BLACK,
        width: DEFAULT_LINE_WIDTH,
        visible: true
    },

    line: {
        width: DEFAULT_LINE_WIDTH
    },

    labels: {
        position: INSIDE$1,
        padding: 2
    },
    mirror: false,
    _alignLines: false
});

var Pointer = (function (Class$$1) {
    function Pointer(scale, userOptions) {
        Class$$1.call(this);

        var ref = scale.options;
        var min = ref.min;
        var max = ref.max;
        var options = this.options = deepExtend({}, this.options, userOptions);

        options.fill = options.color;

        this.scale = scale;

        if (defined(options.value)) {
            options.value = limitValue(options.value, min, max);
        } else {
            options.value = min;
        }
    }

    if ( Class$$1 ) Pointer.__proto__ = Class$$1;
    Pointer.prototype = Object.create( Class$$1 && Class$$1.prototype );
    Pointer.prototype.constructor = Pointer;

    Pointer.prototype.value = function value (newValue) {
        var options = this.options;
        var value = options.value;

        if (arguments.length === 0) {
            return value;
        }

        var ref = this.scale.options;
        var min = ref.min;
        var max = ref.max;

        options._oldValue = defined(options._oldValue) ? options.value : min;
        options.value = limitValue(newValue, min, max);

        if (this.elements) {
            this.repaint();
        }
    };

    return Pointer;
}(_progress_kendoDrawing.Class));

setDefaultOptions(Pointer, {
    color: BLACK
});

var LinearPointer = (function (Pointer$$1) {
    function LinearPointer(scale, options) {
        Pointer$$1.call(this, scale, options);

        this.options = deepExtend({
            track: {
                visible: defined(options.track)
            }
        }, this.options);
    }

    if ( Pointer$$1 ) LinearPointer.__proto__ = Pointer$$1;
    LinearPointer.prototype = Object.create( Pointer$$1 && Pointer$$1.prototype );
    LinearPointer.prototype.constructor = LinearPointer;

    LinearPointer.prototype.reflow = function reflow () {
        var ref = this;
        var options = ref.options;
        var scale = ref.scale;
        var ref$1 = scale.options;
        var mirror = ref$1.mirror;
        var vertical = ref$1.vertical;
        var scaleLine = scale.lineBox();
        var trackSize = options.track.size || options.size;
        var pointerHalfSize = options.size / 2;
        var margin = getSpacing(options.margin);
        var space = vertical ?
                 margin[mirror ? "left" : "right"] :
                 margin[mirror ? "bottom" : "top"];
        var pointerBox, pointerRangeBox, trackBox;

        space = mirror ? -space : space;

        if (vertical) {
            trackBox = new Box(
                scaleLine.x1 + space, scaleLine.y1,
                scaleLine.x1 + space, scaleLine.y2);

            if (mirror) {
                trackBox.x1 -= trackSize;
            } else {
                trackBox.x2 += trackSize;
            }

            if (options.shape !== BAR_POINTER) {
                pointerRangeBox = new Box(
                    scaleLine.x2 + space, scaleLine.y1 - pointerHalfSize,
                    scaleLine.x2 + space, scaleLine.y2 + pointerHalfSize
                );
                pointerBox = pointerRangeBox;
            }
        } else {
            trackBox = new Box(
                scaleLine.x1, scaleLine.y1 - space,
                scaleLine.x2, scaleLine.y1 - space);

            if (mirror) {
                trackBox.y2 += trackSize;
            } else {
                trackBox.y1 -= trackSize;
            }

            if (options.shape !== BAR_POINTER) {
                pointerRangeBox = new Box(
                    scaleLine.x1 - pointerHalfSize, scaleLine.y1 - space,
                    scaleLine.x2 + pointerHalfSize, scaleLine.y1 - space
                );
                pointerBox = pointerRangeBox;
            }
        }

        this.trackBox = trackBox;
        this.pointerRangeBox = pointerRangeBox;
        this.box = pointerBox || trackBox.clone().pad(options.border.width);
    };

    LinearPointer.prototype.getElementOptions = function getElementOptions () {
        var options = this.options;

        return {
            fill: {
                color: options.color,
                opacity: options.opacity
            },
            stroke: defined(options.border) ? {
                color: options.border.width ? options.border.color || options.color : "",
                width: options.border.width,
                dashType: options.border.dashType,
                opacity: options.opacity
            } : null
        };
    };

    LinearPointer.prototype._margin = function _margin () {
        var ref = this;
        var scale = ref.scale;
        var options = ref.options;
        var ref$1 = scale.options;
        var mirror = ref$1.mirror;
        var vertical = ref$1.vertical;
        var margin = getSpacing(options.margin);

        var space = vertical ?
            margin[mirror ? "left" : "right"] :
            margin[mirror ? "bottom" : "top"];

        return space;
    };

    return LinearPointer;
}(Pointer));

setDefaultOptions(LinearPointer, {
    shape: BAR_POINTER,

    track: {
        border: {
            width: 1
        }
    },

    color: BLACK,
    border: {
        width: 1
    },
    opacity: 1,

    margin: getSpacing(3),
    animation: {
        type: BAR_POINTER
    },
    visible: true
});

var ArrowLinearPointerAnimation = (function (superclass) {
    function ArrowLinearPointerAnimation () {
        superclass.apply(this, arguments);
    }

    if ( superclass ) ArrowLinearPointerAnimation.__proto__ = superclass;
    ArrowLinearPointerAnimation.prototype = Object.create( superclass && superclass.prototype );
    ArrowLinearPointerAnimation.prototype.constructor = ArrowLinearPointerAnimation;

    ArrowLinearPointerAnimation.prototype.setup = function setup () {
        var options = this.options;
        var margin = options.margin;
        var from = options.from;
        var to = options.to;
        var vertical = options.vertical;
        var axis = vertical ? "x1" : "y1";

        if (options.mirror === vertical) {
            from[axis] -= margin; to[axis] -= margin;
        } else {
            from[axis] += margin; to[axis] += margin;
        }

        var fromScale = this.fromScale = new _progress_kendoDrawing.geometry.Point(from.x1, from.y1);
        var toScale = this.toScale = new _progress_kendoDrawing.geometry.Point(to.x1, to.y1);

        if (options.duration !== 0) {
            options.duration = Math.max((fromScale.distanceTo(toScale) / options.duration) * 1000, 1);
        }
    };

    ArrowLinearPointerAnimation.prototype.step = function step (pos) {
        var translateX = interpolateValue(this.fromScale.x, this.toScale.x, pos);
        var translateY = interpolateValue(this.fromScale.y, this.toScale.y, pos);

        this.element.transform(_progress_kendoDrawing.geometry.transform().translate(translateX, translateY));
    };

    return ArrowLinearPointerAnimation;
}(_progress_kendoDrawing.drawing.Animation));

setDefaultOptions(ArrowLinearPointerAnimation, {
    easing: LINEAR$1,
    duration: LINEAR_SPEED
});

_progress_kendoDrawing.drawing.AnimationFactory.current.register(ARROW_POINTER, ArrowLinearPointerAnimation);

var Point$3 = _progress_kendoDrawing.geometry.Point;
var Path$3 = _progress_kendoDrawing.drawing.Path;

var ArrowLinearPointer = (function (LinearPointer$$1) {
    function ArrowLinearPointer(scale, options) {
        LinearPointer$$1.call(this, scale, options);

        if (!defined(this.options.size)) {
            this.options.size = this.scale.options.majorTicks.size * 0.6;
        }
    }

    if ( LinearPointer$$1 ) ArrowLinearPointer.__proto__ = LinearPointer$$1;
    ArrowLinearPointer.prototype = Object.create( LinearPointer$$1 && LinearPointer$$1.prototype );
    ArrowLinearPointer.prototype.constructor = ArrowLinearPointer;

    ArrowLinearPointer.prototype.pointerShape = function pointerShape () {
        var ref = this;
        var scale = ref.scale;
        var size = ref.options.size;
        var halfSize = size / 2;
        var sign = (scale.options.mirror ? -1 : 1);
        var shape;

        if (scale.options.vertical) {
            shape = [
                new Point$3(0, 0 - halfSize), new Point$3(0 - sign * size, 0), new Point$3(0, 0 + halfSize)
            ];
        } else {
            shape = [
                new Point$3(0 - halfSize, 0), new Point$3(0, 0 + sign * size), new Point$3(0 + halfSize, 0)
            ];
        }

        return shape;
    };

    ArrowLinearPointer.prototype.repaint = function repaint () {
        var ref = this;
        var scale = ref.scale;
        var options = ref.options;
        var animation = new ArrowLinearPointerAnimation(this.elements, deepExtend(options.animation, {
            vertical: scale.options.vertical,
            mirror: scale.options.mirror,
            margin: this._margin(options.margin),
            from: scale.getSlot(options._oldValue),
            to: scale.getSlot(options.value)
        }));

        if (options.animation.transitions === false) {
            animation.options.duration = 0;
        }

        animation.setup();
        animation.play();
    };

    ArrowLinearPointer.prototype.render = function render () {
        var ref = this;
        var scale = ref.scale;
        var options = ref.options;
        var elementOptions = this.getElementOptions();
        var shape = this.pointerShape(options.value);

        options.animation.type = ARROW_POINTER;

        var elements = new Path$3({
            stroke: elementOptions.stroke,
            fill: elementOptions.fill
        }).moveTo(shape[0]).lineTo(shape[1]).lineTo(shape[2]).close();

        var slot = scale.getSlot(options.value);
        elements.transform(_progress_kendoDrawing.geometry.transform().translate(slot.x1, slot.y1));

        this.elements = elements;

        return elements;
    };

    return ArrowLinearPointer;
}(LinearPointer));

var BarLinearPointerAnimation = (function (superclass) {
    function BarLinearPointerAnimation () {
        superclass.apply(this, arguments);
    }

    if ( superclass ) BarLinearPointerAnimation.__proto__ = superclass;
    BarLinearPointerAnimation.prototype = Object.create( superclass && superclass.prototype );
    BarLinearPointerAnimation.prototype.constructor = BarLinearPointerAnimation;

    BarLinearPointerAnimation.prototype.setup = function setup () {
        var options = this.options;
        var axis = this.axis = options.vertical ? Y : X;
        var to = this.to = options.newPoints[0][axis];
        var from = this.from = options.oldPoints[0][axis];

        if (options.duration !== 0) {
            options.duration = Math.max((Math.abs(to - from) / options.speed) * 1000, 1);
        }

        this._set(from);
    };

    BarLinearPointerAnimation.prototype.step = function step (pos) {
        var value = interpolateValue(this.from, this.to, pos);
        this._set(value);
    };

    BarLinearPointerAnimation.prototype._set = function _set (value) {
        var setter = "set" + this.axis.toUpperCase();
        var points = this.options.newPoints;

        points[0][setter](value);
        points[1][setter](value);
    };

    return BarLinearPointerAnimation;
}(_progress_kendoDrawing.drawing.Animation));

setDefaultOptions(BarLinearPointerAnimation, {
    easing: LINEAR$1,
    speed: LINEAR_SPEED
});

_progress_kendoDrawing.drawing.AnimationFactory.current.register(BAR_POINTER, BarLinearPointerAnimation);

var Group$3 = _progress_kendoDrawing.drawing.Group;
var Path$4 = _progress_kendoDrawing.drawing.Path;

var BarLinearPointer = (function (LinearPointer$$1) {
    function BarLinearPointer(scale, options) {
        LinearPointer$$1.call(this, scale, options);

        if (!defined(this.options.size)) {
            this.options.size = this.scale.options.majorTicks.size * 0.3;
        }
    }

    if ( LinearPointer$$1 ) BarLinearPointer.__proto__ = LinearPointer$$1;
    BarLinearPointer.prototype = Object.create( LinearPointer$$1 && LinearPointer$$1.prototype );
    BarLinearPointer.prototype.constructor = BarLinearPointer;

    BarLinearPointer.prototype.pointerShape = function pointerShape (value) {
        var ref = this;
        var scale = ref.scale;
        var options = ref.options;
        var ref$1 = scale.options;
        var mirror = ref$1.mirror;
        var vertical = ref$1.vertical;
        var dir = mirror === vertical ? -1 : 1;
        var size = options.size * dir;
        var minSlot = scale.getSlot(scale.options.min);
        var slot = scale.getSlot(value);
        var axis = vertical ? Y : X;
        var sizeAxis = vertical ? X : Y;
        var margin = this._margin() * dir;

        var p1 = new _progress_kendoDrawing.geometry.Point();
        p1[axis] = minSlot[axis + "1"];
        p1[sizeAxis] = minSlot[sizeAxis + "1"];

        var p2 = new _progress_kendoDrawing.geometry.Point();
        p2[axis] = slot[axis + "1"];
        p2[sizeAxis] = slot[sizeAxis + "1"];

        if (vertical) {
            p1.translate(margin, 0);
            p2.translate(margin, 0);
        } else {
            p1.translate(0, margin);
            p2.translate(0, margin);
        }

        var p3 = p2.clone();
        var p4 = p1.clone();

        if (vertical) {
            p3.translate(size, 0);
            p4.translate(size, 0);
        } else {
            p3.translate(0, size);
            p4.translate(0, size);
        }

        return [ p1, p2, p3, p4 ];
    };

    BarLinearPointer.prototype.repaint = function repaint () {
        var ref = this;
        var scale = ref.scale;
        var options = ref.options;
        var shape = this.pointerShape(options.value);
        var pointerPath = this.pointerPath;
        var oldShape = this.pointerShape(options._oldValue);

        pointerPath.moveTo(shape[0]).lineTo(shape[1]).lineTo(shape[2]).lineTo(shape[3]).close();

        var animation = new BarLinearPointerAnimation(pointerPath, deepExtend(options.animation, {
            reverse: scale.options.reverse,
            vertical: scale.options.vertical,
            oldPoints: [ oldShape[1], oldShape[2] ],
            newPoints: [ shape[1], shape[2] ]
        }));

        if (options.animation.transitions === false) {
            animation.options.duration = 0;
        }

        animation.setup();
        animation.play();
    };

    BarLinearPointer.prototype.render = function render () {
        var group = new Group$3();
        var elementOptions = this.getElementOptions();

        if (this.options.track.visible) {
            group.append(this.renderTrack());
        }

        var pointer = this.pointerPath = new Path$4({
            stroke: elementOptions.stroke,
            fill: elementOptions.fill
        });

        group.append(pointer);

        this.elements = group;

        return group;
    };

    BarLinearPointer.prototype.renderTrack = function renderTrack () {
        var trackOptions = this.options.track;
        var border = trackOptions.border || {};
        var trackBox = this.trackBox.clone().pad(border.width || 0);

        return new Path$4.fromRect(trackBox.toRect(), {
            fill: {
                color: trackOptions.color,
                opacity: trackOptions.opacity
            },
            stroke: {
                color: border.width ? border.color || trackOptions.color : "",
                width: border.width,
                dashType: border.dashType
            }
        });
    };

    return BarLinearPointer;
}(LinearPointer));

var DEFAULT_MIN_WIDTH = 60;
var DEFAULT_MIN_HEIGHT = 60;

var Group$1 = _progress_kendoDrawing.drawing.Group;

var LinearGauge = (function (Gauge$$1) {
    function LinearGauge () {
        Gauge$$1.apply(this, arguments);
    }

    if ( Gauge$$1 ) LinearGauge.__proto__ = Gauge$$1;
    LinearGauge.prototype = Object.create( Gauge$$1 && Gauge$$1.prototype );
    LinearGauge.prototype.constructor = LinearGauge;

    LinearGauge.prototype.reflow = function reflow (bbox) {
        var pointers = this.pointers;
        var bboxX = bbox.origin.x;
        var bboxY = bbox.origin.y;

        var box = new Box(bboxX, bboxY, bboxX + bbox.width(), bboxY + bbox.height());

        this.scale.reflow(box);
        this._shrinkScaleWidth(box);

        for (var i = 0; i < pointers.length; i++) {
            pointers[i].reflow();
        }

        this.bbox = this._getBox(box);
        this._alignElements();
        this._shrinkElements();
        this._buildVisual();
        this._draw();
    };

    LinearGauge.prototype._buildVisual = function _buildVisual () {
        var visuals = new Group$1();
        var scaleElements = this.scale.render();
        var pointers = this.pointers;

        visuals.append(this.gaugeArea);
        visuals.append(scaleElements);

        for (var i = 0; i < pointers.length; i++) {
            var current = pointers[i];
            visuals.append(current.render());
            current.value(current.options.value);
        }

        this._visuals = visuals;
    };

    LinearGauge.prototype._createModel = function _createModel () {
        var this$1 = this;

        var options = this.options;
        var scale = this.scale = new LinearScale(options.scale, this.contextService);

        this.pointers = [];

        var pointers = options.pointer;
        pointers = isArray(pointers) ? pointers : [ pointers ];

        for (var i = 0; i < pointers.length; i++) {
            var currentOptions = deepExtend({}, pointers[i], {
                animation: {
                    transitions: options.transitions
                }
            });
            var pointerType = currentOptions.shape === ARROW ? ArrowLinearPointer : BarLinearPointer;

            this$1.pointers.push(new pointerType(scale, currentOptions));
        }
    };

    LinearGauge.prototype._defaultSize = function _defaultSize () {
        var vertical = this.options.scale.vertical;

        return {
            width: vertical ? DEFAULT_MIN_WIDTH : DEFAULT_WIDTH$1,
            height: vertical ? DEFAULT_HEIGHT$1 : DEFAULT_MIN_HEIGHT
        };
    };

    LinearGauge.prototype._getBox = function _getBox (box) {
        var ref = this;
        var scale = ref.scale;
        var pointers = ref.pointers;
        var boxCenter = box.center();
        var plotAreaBox = pointers[0].box.clone().wrap(scale.box);

        for (var i = 0; i < pointers.length; i++) {
            plotAreaBox.wrap(pointers[i].box.clone());
        }

        var size;
        if (scale.options.vertical) {
            size = plotAreaBox.width() / 2;
            plotAreaBox = new Box(
                boxCenter.x - size, box.y1,
                boxCenter.x + size, box.y2
            );
        } else {
            size = plotAreaBox.height() / 2;
            plotAreaBox = new Box(
                box.x1, boxCenter.y - size,
                box.x2, boxCenter.y + size
            );
        }

        return plotAreaBox;
    };

    LinearGauge.prototype._alignElements = function _alignElements () {
        var this$1 = this;

        var ref = this;
        var scale = ref.scale;
        var pointers = ref.pointers;
        var scaleBox = scale.box;
        var box = pointers[0].box.clone().wrap(scale.box);
        var plotAreaBox = this.bbox;

        for (var i = 0; i < pointers.length; i++) {
            box.wrap(pointers[i].box.clone());
        }

        var diff;
        if (scale.options.vertical) {
            diff = plotAreaBox.center().x - box.center().x;
            scale.reflow(new Box(
                scaleBox.x1 + diff, plotAreaBox.y1,
                scaleBox.x2 + diff, plotAreaBox.y2
            ));
        } else {
            diff = plotAreaBox.center().y - box.center().y;
            scale.reflow(new Box(
                scaleBox.x1, scaleBox.y1 + diff,
                scaleBox.x2, scaleBox.y2 + diff
            ));
        }

        for (var i$1 = 0; i$1 < pointers.length; i$1++) {
            pointers[i$1].reflow(this$1.bbox);
        }
    };

    LinearGauge.prototype._shrinkScaleWidth = function _shrinkScaleWidth (bbox) {
        var ref = this;
        var scale = ref.scale;
        if (!scale.options.vertical) {
            var overflow = scale.contentBox().width() - bbox.width();
            if (overflow > 0) {
                scale.box.shrink(overflow, 0);
                scale.box.alignTo(bbox, 'center');
                scale.reflow(scale.box);
            }
        }
    };

    LinearGauge.prototype._shrinkElements = function _shrinkElements () {
        var this$1 = this;

        var ref = this;
        var scale = ref.scale;
        var pointers = ref.pointers;
        var scaleBox = scale.box.clone();
        var pos = scale.options.vertical ? "y" : "x";
        var pointerBox = pointers[0].box;

        for (var i = 0; i < pointers.length; i++) {
            pointerBox.wrap(pointers[i].box.clone());
        }

        scaleBox[pos + 1] += Math.max(scaleBox[pos + 1] - pointerBox[pos + 1], 0);
        scaleBox[pos + 2] -= Math.max(pointerBox[pos + 2] - scaleBox[pos + 2], 0);

        scale.reflow(scaleBox);

        for (var i$1 = 0; i$1 < pointers.length; i$1++) {
            pointers[i$1].reflow(this$1.bbox);
        }
    };

    return LinearGauge;
}(Gauge));

setDefaultOptions(LinearGauge, {
    transitions: true,
    gaugeArea: {
        background: ""
    },
    scale: {
        vertical: true
    }
});

var GEO_ARC_ADJUST_ANGLE = 180;

var Arc = _progress_kendoDrawing.drawing.Arc;
var Path$5 = _progress_kendoDrawing.drawing.Path;
var Group$5 = _progress_kendoDrawing.drawing.Group;

function drawTicks(arc, tickAngles, unit, tickOptions) {
    var ticks = new Group$5();
    var center = arc.center;
    var radius = arc.getRadiusX();

    if (tickOptions.visible) {
        for (var i = 0; i < tickAngles.length; i++) {
            var tickStart = arc.pointAt(tickAngles[i]);
            var tickEnd = new _progress_kendoDrawing.geometry.Point(center.x + radius - tickOptions.size, center.y).rotate(tickAngles[i], center);

            ticks.append(new Path$5({
                stroke: {
                    color: tickOptions.color,
                    width: tickOptions.width
                }
            }).moveTo(tickStart).lineTo(tickEnd));
        }
    }

    return ticks;
}

function rangeSegment(from, to, color, opacity) {
    return { from: from, to: to, color: color, opacity: opacity };
}

var RadialScale = (function (NumericAxis$$1) {
    function RadialScale(options, service) {
        NumericAxis$$1.call(this, 0, 1, options, service);
    }

    if ( NumericAxis$$1 ) RadialScale.__proto__ = NumericAxis$$1;
    RadialScale.prototype = Object.create( NumericAxis$$1 && NumericAxis$$1.prototype );
    RadialScale.prototype.constructor = RadialScale;

    RadialScale.prototype.initUserOptions = function initUserOptions (options) {
        var scaleOptions = deepExtend({}, this.options, options);
        scaleOptions.majorUnit = scaleOptions.majorUnit || autoMajorUnit(scaleOptions.min, scaleOptions.max);
        scaleOptions.minorUnit = scaleOptions.minorUnit || scaleOptions.majorUnit / 10;

        return scaleOptions;
    };

    RadialScale.prototype.initFields = function initFields () {
    };

    RadialScale.prototype.render = function render (center, radius) {
        var arc = this.renderArc(center, radius);

        this.bbox = arc.bbox();
        this.labelElements = this.renderLabels();
        this.ticks = this.renderTicks();
        this.ranges = this.renderRanges();
    };

    RadialScale.prototype.reflow = function reflow (bbox) {
        var center = bbox.center();
        var radius = Math.min(bbox.height(), bbox.width()) / 2;

        if (defined(this.bbox)) {
            this.bbox = this.arc.bbox();
            this.radius(this.arc.getRadiusX());
            this.repositionRanges();
            this.renderLabels();
        } else {
            return this.render(center, radius);
        }
    };

    RadialScale.prototype.slotAngle = function slotAngle (value) {
        var ref = this.options;
        var min = ref.min;
        var max = ref.max;
        var reverse = ref.reverse;
        var startAngle = ref.startAngle;
        var endAngle = ref.endAngle;
        var angle = endAngle - startAngle;
        var result;

        if (reverse) {
            result = endAngle - (value - min) / (max - min) * angle;
        } else {
            result = ((value - min) / (max - min) * angle) + startAngle;
        }

        return result + GEO_ARC_ADJUST_ANGLE;
    };

    RadialScale.prototype.hasRanges = function hasRanges () {
        var ranges = this.options.ranges;

        return ranges && ranges.length;
    };

    RadialScale.prototype.ticksSize = function ticksSize () {
        var ref = this.options;
        var majorTicks = ref.majorTicks;
        var minorTicks = ref.minorTicks;
        var size = 0;
        if (majorTicks.visible) {
            size = majorTicks.size;
        }

        if (minorTicks.visible) {
            size = Math.max(minorTicks.size, size);
        }

        return size;
    };

    RadialScale.prototype.renderLabels = function renderLabels () {
        var this$1 = this;

        var options = this.options;
        var arc = this.arc.clone();
        var radius = arc.getRadiusX();
        var tickAngles = this.tickAngles(arc, options.majorUnit);
        var rangeSize = options.rangeSize = options.rangeSize || radius * 0.1;
        var labelsGroup = new Group$5();

        var rangeDistance = radius * 0.05;
        if (defined(options.rangeDistance)) {
            rangeDistance = options.rangeDistance;
        } else {
            options.rangeDistance = rangeDistance;
        }

        var labelsOptions = options.labels;
        var isInside = labelsOptions.position === INSIDE$1;
        var hasLabelElements = defined(this.labelElements);

        if (isInside) {
            radius -= this.ticksSize();

            if (this.hasRanges() && !hasLabelElements) {
                radius -= rangeSize + rangeDistance;
            }
            arc.setRadiusX(radius).setRadiusY(radius);
        }

        var labels = this.labels;
        var count = labels.length;
        var padding = getSpacing(labelsOptions.padding);
        var paddingWidth = (padding.left + padding.right) / 2;
        var paddingHeight = (padding.top + padding.bottom) / 2;

        for (var i = 0; i < count; i++) {
            var label = labels[i];
            var halfWidth = label.box.width() / 2;
            var halfHeight = label.box.height() / 2;
            var angle = tickAngles[i];
            var labelAngle = (angle - GEO_ARC_ADJUST_ANGLE) * DEGREE;

            var lp = arc.pointAt(angle);
            var cx = lp.x + (Math.cos(labelAngle) * (halfWidth + paddingWidth) * (isInside ? 1 : -1));
            var cy = lp.y + (Math.sin(labelAngle) * (halfHeight + paddingHeight) * (isInside ? 1 : -1));

            label.reflow(new Box(cx - halfWidth, cy - halfHeight, cx + halfWidth, cy + halfHeight));
            var labelPos = new _progress_kendoDrawing.geometry.Point(label.box.x1, label.box.y1);

            var labelElement = (void 0);
            if (!hasLabelElements) {
                labelElement = buildLabelElement(label, options.labels);
                labelsGroup.append(labelElement);
            } else {
                labelElement = this$1.labelElements.children[i];
                var prevLabelPos = labelElement.bbox().origin;

                var labelTransform = labelElement.transform() || _progress_kendoDrawing.geometry.transform();
                labelTransform.translate(labelPos.x - prevLabelPos.x, labelPos.y - prevLabelPos.y);
                labelElement.transform(labelTransform);
            }

            this$1.bbox = _progress_kendoDrawing.geometry.Rect.union(this$1.bbox, labelElement.bbox());
        }

        return labelsGroup;
    };

    RadialScale.prototype.repositionRanges = function repositionRanges () {
        var ranges = this.ranges.children;

        if (ranges.length > 0) {
            var ref = this.options;
            var rangeDistance = ref.rangeDistance;
            var rangeSize = ref.rangeSize;
            var rangeRadius = this.getRangeRadius();

            if (this.options.labels.position === INSIDE$1) {
                rangeRadius += rangeSize + rangeDistance;
            }

            var newRadius = rangeRadius + (rangeSize / 2);

            for (var i = 0; i < ranges.length; i++) {
                ranges[i]._geometry.setRadiusX(newRadius).setRadiusY(newRadius);
            }

            this.bbox = _progress_kendoDrawing.geometry.Rect.union(this.bbox, this.ranges.bbox());
        }
    };

    RadialScale.prototype.renderRanges = function renderRanges () {
        var this$1 = this;

        var segments = this.rangeSegments();
        var segmentsCount = segments.length;
        var result = new Group$5();

        if (segmentsCount) {
            var ref = this.options;
            var rangeSize = ref.rangeSize;
            var reverse = ref.reverse;
            var rangeDistance = ref.rangeDistance;
            var rangeRadius = this.getRangeRadius();

            // move the ticks with a range distance and a range size
            this.radius(this.radius() - rangeSize - rangeDistance);

            for (var i = 0; i < segmentsCount; i++) {
                var segment = segments[i];
                var from = this$1.slotAngle(segment[reverse ? "to" : "from"]);
                var to = this$1.slotAngle(segment[!reverse ? "to" : "from"]);

                if (to - from !== 0) {
                    result.append(this$1.createRange(from, to, rangeRadius, segment));
                }
            }
        }

        return result;
    };

    RadialScale.prototype.createRange = function createRange (startAngle, endAngle, rangeRadius, options) {
        var rangeSize = this.options.rangeSize;
        var rangeGeom = new _progress_kendoDrawing.geometry.Arc(this.arc.center, {
            radiusX: rangeRadius + (rangeSize / 2),
            radiusY: rangeRadius + (rangeSize / 2),
            startAngle: startAngle,
            endAngle: endAngle
        });

        return new Arc(rangeGeom, {
            stroke: {
                width: rangeSize,
                color: options.color,
                opacity: options.opacity,
                lineCap: options.lineCap
            }
        });
    };

    RadialScale.prototype.rangeSegments = function rangeSegments () {
        var options = this.options;
        var ranges = options.ranges || [];
        var count = ranges.length;
        var segments = [];

        if (count) {
            var min = options.min;
            var max = options.max;
            var defaultColor = options.rangePlaceholderColor;
            segments.push(rangeSegment(min, max, defaultColor));

            for (var i = 0; i < count; i++) {
                var range = getRange(ranges[i], min, max);
                var segmentsCount = segments.length;

                for (var j = 0; j < segmentsCount; j++) {
                    var segment = segments[j];

                    if (segment.from <= range.from && range.from <= segment.to) {
                        segments.push(rangeSegment(range.from, range.to, range.color, range.opacity));

                        if (segment.from <= range.to && range.to <= segment.to) {
                            segments.push(rangeSegment(range.to, segment.to, defaultColor, range.opacity));
                        }

                        segment.to = range.from;

                        break;
                    }
                }
            }
        }

        return segments;
    };

    RadialScale.prototype.getRangeRadius = function getRangeRadius () {
        var ref = this;
        var arc = ref.arc;
        var options = ref.options;
        var rangeSize = options.rangeSize;
        var rangeDistance = options.rangeDistance;
        var majorTickSize = options.majorTicks.size;
        var radius;

        if (options.labels.position === OUTSIDE$1) {
            radius = arc.getRadiusX() - majorTickSize - rangeDistance - rangeSize;
        } else {
            radius = arc.getRadiusX() - rangeSize;
        }

        return radius;
    };

    RadialScale.prototype.renderArc = function renderArc (center, radius) {
        var options = this.options;

        var arc = this.arc = new _progress_kendoDrawing.geometry.Arc(center, {
            radiusX: radius,
            radiusY: radius,
            startAngle: options.startAngle + GEO_ARC_ADJUST_ANGLE,
            endAngle: options.endAngle + GEO_ARC_ADJUST_ANGLE
        });

        return arc;
    };

    RadialScale.prototype.renderTicks = function renderTicks () {
        var ref = this;
        var arc = ref.arc;
        var options = ref.options;
        var tickArc = arc.clone();

        this.majorTickAngles = this.tickAngles(arc, options.majorUnit);
        this.majorTicks = drawTicks(tickArc, this.majorTickAngles, options.majorUnit, options.majorTicks);

        var allTicks = new Group$5();
        allTicks.append(this.majorTicks);

        var majorTickSize = options.majorTicks.size;
        var minorTickSize = options.minorTicks.size;

        this._tickDifference = majorTickSize - minorTickSize;

        if (options.labels.position === OUTSIDE$1) {
            var radius = tickArc.getRadiusX();
            tickArc.setRadiusX(radius - majorTickSize + minorTickSize)
                   .setRadiusY(radius - majorTickSize + minorTickSize);
        }

        this.minorTickAngles = this.normalizeTickAngles(this.tickAngles(arc, options.minorUnit));
        this.minorTicks = drawTicks(tickArc, this.minorTickAngles, options.minorUnit, options.minorTicks);
        allTicks.append(this.minorTicks);

        return allTicks;
    };

    RadialScale.prototype.normalizeTickAngles = function normalizeTickAngles (angles) {
        var options = this.options;
        var skip = options.majorUnit / options.minorUnit;

        for (var i = angles.length - 1; i >= 0; i--) {
            if (i % skip === 0) {
                angles.splice(i, 1);
            }
        }

        return angles;
    };

    RadialScale.prototype.tickAngles = function tickAngles (ring, stepValue) {
        var options = this.options;
        var reverse = options.reverse;
        var range = options.max - options.min;
        var angle = ring.endAngle - ring.startAngle;
        var tickCount = range / stepValue;
        var pos = ring.startAngle;
        var step = angle / tickCount;

        if (reverse) {
            pos += angle;
            step = -step;
        }

        var positions = [];
        for (var i = 0; i < tickCount; i++) {
            positions.push(round(pos, COORD_PRECISION));
            pos += step;
        }

        if (round(pos) <= ring.endAngle) {
            positions.push(pos);
        }

        return positions;
    };

    RadialScale.prototype.radius = function radius (value) {
        if (value) {
            this.arc.setRadiusX(value).setRadiusY(value);
            this.repositionTicks(this.majorTicks.children, this.majorTickAngles);
            this.repositionTicks(this.minorTicks.children, this.minorTickAngles, true);
        } else {
            return this.arc.getRadiusX();
        }
    };

    RadialScale.prototype.repositionTicks = function repositionTicks (ticks, tickAngles, minor) {
        var diff = minor ? (this._tickDifference || 0) : 0;
        var tickArc = this.arc;
        var radius = tickArc.getRadiusX();

        if (minor && this.options.labels.position === OUTSIDE$1 && diff !== 0) {
            tickArc = this.arc.clone();
            tickArc.setRadiusX(radius - diff).setRadiusY(radius - diff);
        }

        for (var i = 0; i < ticks.length; i++) {
            var newPoint = tickArc.pointAt(tickAngles[i]);
            var segments = ticks[i].segments;
            var xDiff = newPoint.x - segments[0].anchor().x;
            var yDiff = newPoint.y - segments[0].anchor().y;

            ticks[i].transform(new _progress_kendoDrawing.geometry.transform().translate(xDiff, yDiff));
        }
    };

    return RadialScale;
}(NumericAxis));

setDefaultOptions(RadialScale, {
    min: 0,
    max: 100,

    majorTicks: {
        size: 15,
        align: INSIDE$1,
        color: BLACK,
        width: DEFAULT_LINE_WIDTH,
        visible: true
    },

    minorTicks: {
        size: 10,
        align: INSIDE$1,
        color: BLACK,
        width: DEFAULT_LINE_WIDTH,
        visible: true
    },

    startAngle: -30,
    endAngle: 210,

    labels: {
        position: INSIDE$1,
        padding: 2
    }
});

var RadialPointerAnimation = (function (superclass) {
    function RadialPointerAnimation(element, options) {
        superclass.call(this, element, options);

        var animationOptions = this.options;

        animationOptions.duration = Math.max((Math.abs(animationOptions.newAngle - animationOptions.oldAngle) / animationOptions.duration) * 1000, 1);
    }

    if ( superclass ) RadialPointerAnimation.__proto__ = superclass;
    RadialPointerAnimation.prototype = Object.create( superclass && superclass.prototype );
    RadialPointerAnimation.prototype.constructor = RadialPointerAnimation;

    RadialPointerAnimation.prototype.step = function step (pos) {
        var options = this.options;
        var angle = interpolateValue(options.oldAngle, options.newAngle, pos);

        this.element.transform(_progress_kendoDrawing.geometry.transform().rotate(angle, options.center));
    };

    return RadialPointerAnimation;
}(_progress_kendoDrawing.drawing.Animation));

setDefaultOptions(RadialPointerAnimation, {
    easing: LINEAR$1,
    duration: ANGULAR_SPEED
});

_progress_kendoDrawing.drawing.AnimationFactory.current.register(RADIAL_POINTER, RadialPointerAnimation);

var CAP_SIZE = 0.05;
var Circle = _progress_kendoDrawing.drawing.Circle;
var Group$6 = _progress_kendoDrawing.drawing.Group;
var Path$6 = _progress_kendoDrawing.drawing.Path;

var RadialPointer = (function (Pointer$$1) {
    function RadialPointer () {
        Pointer$$1.apply(this, arguments);
    }

    if ( Pointer$$1 ) RadialPointer.__proto__ = Pointer$$1;
    RadialPointer.prototype = Object.create( Pointer$$1 && Pointer$$1.prototype );
    RadialPointer.prototype.constructor = RadialPointer;

    RadialPointer.prototype.setAngle = function setAngle (angle) {
        this.elements.transform(_progress_kendoDrawing.geometry.transform().rotate(angle, this.center));
    };

    RadialPointer.prototype.repaint = function repaint () {
        var ref = this;
        var scale = ref.scale;
        var options = ref.options;
        var oldAngle = scale.slotAngle(options._oldValue);
        var newAngle = scale.slotAngle(options.value);

        if (options.animation.transitions === false) {
            this.setAngle(newAngle);
        } else {
            new RadialPointerAnimation(this.elements, deepExtend(options.animation, {
                oldAngle: oldAngle,
                newAngle: newAngle
            })).play();
        }
    };

    RadialPointer.prototype.render = function render () {
        var ref = this;
        var scale = ref.scale;
        var options = ref.options;
        var elements = new Group$6();

        if (options.animation !== false) {
            deepExtend(options.animation, {
                startAngle: 0,
                center: scale.arc.center,
                reverse: scale.options.reverse
            });
        }

        elements.append(this._renderNeedle(), this._renderCap());

        this.elements = elements;
        this.setAngle(DEGREE);

        return elements;
    };

    RadialPointer.prototype.reflow = function reflow (arc) {
        var center = this.center = arc.center;
        var length = limitValue(this.options.length || 1, 0.1, 1.5);
        var radius = this.radius = arc.getRadiusX() * length;
        var capSize = this.capSize = Math.round(radius * this.options.cap.size);

        this.bbox = _progress_kendoDrawing.geometry.Rect.fromPoints(new _progress_kendoDrawing.geometry.Point(center.x - capSize, center.y - capSize),
                                    new _progress_kendoDrawing.geometry.Point(center.x + capSize, center.y + capSize));
    };

    RadialPointer.prototype._renderNeedle = function _renderNeedle () {
        var minorTickSize = this.scale.options.minorTicks.size;
        var center = this.center;
        var needleColor = this.options.color;

        var needlePath = new Path$6({
            fill: { color: needleColor },
            stroke: { color: needleColor, width: DEFAULT_LINE_WIDTH }
        });

        needlePath.moveTo(center.x + this.radius - minorTickSize, center.y)
                  .lineTo(center.x, center.y - (this.capSize / 2))
                  .lineTo(center.x, center.y + (this.capSize / 2))
                  .close();

        return needlePath;
    };

    RadialPointer.prototype._renderCap = function _renderCap () {
        var options = this.options;
        var capColor = options.cap.color || options.color;
        var circle = new _progress_kendoDrawing.geometry.Circle(this.center, this.capSize);

        var cap = new Circle(circle, {
            fill: { color: capColor },
            stroke: { color: capColor }
        });

        return cap;
    };

    return RadialPointer;
}(Pointer));

setDefaultOptions(RadialPointer, {
    cap: {
        size: CAP_SIZE
    },
    arrow: {
        width: 16,
        height: 14
    },
    animation: {
        type: RADIAL_POINTER,
        duration: ANGULAR_SPEED
    }
});

var Group$4 = _progress_kendoDrawing.drawing.Group;

var RadialGauge = (function (Gauge$$1) {
    function RadialGauge () {
        Gauge$$1.apply(this, arguments);
    }

    if ( Gauge$$1 ) RadialGauge.__proto__ = Gauge$$1;
    RadialGauge.prototype = Object.create( Gauge$$1 && Gauge$$1.prototype );
    RadialGauge.prototype.constructor = RadialGauge;

    RadialGauge.prototype.reflow = function reflow (bbox) {
        var this$1 = this;

        var pointers = this.pointers;
        this.scale.reflow(bbox);
        this._initialPlotArea = this.scale.bbox;

        for (var i = 0; i < pointers.length; i++) {
            pointers[i].reflow(this$1.scale.arc);
            this$1._initialPlotArea = _progress_kendoDrawing.geometry.Rect.union(this$1._initialPlotArea, pointers[i].bbox);
        }

        this.fitScale(bbox);
        this.alignScale(bbox);
        this._buildVisual(this.gaugeArea, pointers, this.scale);
        this._draw();
    };

    RadialGauge.prototype._buildVisual = function _buildVisual (gaugeArea, pointers, scale) {
        var visuals = this._visuals = new Group$4();

        visuals.append(gaugeArea);
        visuals.append(scale.ticks);
        visuals.append(scale.ranges);
        this._buildPointers(pointers);
        visuals.append(scale.labelElements);
    };

    RadialGauge.prototype._buildPointers = function _buildPointers (pointers) {
        var this$1 = this;

        for (var i = 0; i < pointers.length; i++) {
            var current = pointers[i];
            current.render();
            this$1._visuals.append(current.elements);

            current.value(current.options.value);
        }
    };

    RadialGauge.prototype.fitScale = function fitScale (bbox) {
        var this$1 = this;

        var arc = this.scale.arc;
        var plotAreaBox = this._initialPlotArea;
        var step = Math.abs(this.getDiff(plotAreaBox, bbox));
        var min = round(step, COORD_PRECISION);
        var max = round(-step, COORD_PRECISION);
        var minDiff, midDiff, maxDiff, mid, oldDiff;
        var staleFlag = 0;
        var i = 0;

        while (i++ < 100) {
            staleFlag = (oldDiff === maxDiff) ? (staleFlag + 1) : 0;

            if (staleFlag > 5) {
                break;
            }

            if (min !== mid) {
                minDiff = this$1.getPlotBox(min, bbox, arc);
                if (0 <= minDiff && minDiff <= 2) {
                    break;
                }
            }

            if (max !== mid) {
                maxDiff = this$1.getPlotBox(max, bbox, arc);
                if (0 <= maxDiff && maxDiff <= 2) {
                    break;
                }
            }

            if (minDiff > 0 && maxDiff > 0) {
                mid = min * 2;
            } else if (minDiff < 0 && maxDiff < 0) {
                mid = max * 2;
            } else {
                mid = round(((min + max) / 2) || 1, COORD_PRECISION);
            }

            midDiff = this$1.getPlotBox(mid, bbox, arc);
            if (0 <= midDiff && midDiff <= 2) {
                break;
            }

            oldDiff = maxDiff;

            if (midDiff > 0) {
                max = mid;
                maxDiff = midDiff;
            } else {
                min = mid;
                minDiff = midDiff;
            }
        }
    };

    RadialGauge.prototype.getPlotBox = function getPlotBox (step, bbox, arc) {
        var this$1 = this;

        var scale = this.scale;
        var pointers = this.pointers;
        var radius = arc.getRadiusX();
        var scaleArc = arc.clone();

        scaleArc.setRadiusX(radius + step).setRadiusY(radius + step);

        scale.arc = scaleArc;
        scale.reflow(bbox);
        this.plotBbox = scale.bbox;

        for (var i = 0; i < pointers.length; i++) {
            pointers[i].reflow(scaleArc);
            this$1.plotBbox = _progress_kendoDrawing.geometry.Rect.union(this$1.plotBbox, pointers[i].bbox);
        }

        return this.getDiff(this.plotBbox, bbox);
    };

    RadialGauge.prototype.getDiff = function getDiff (plotBox, box) {
        return Math.min(box.width() - plotBox.width(), box.height() - plotBox.height());
    };

    RadialGauge.prototype.alignScale = function alignScale (bbox) {
        var this$1 = this;

        var plotBoxCenter = this.plotBbox.center();
        var boxCenter = bbox.center();
        var paddingX = plotBoxCenter.x - boxCenter.x;
        var paddingY = plotBoxCenter.y - boxCenter.y;
        var ref = this;
        var scale = ref.scale;
        var pointers = ref.pointers;

        scale.arc.center.x -= paddingX;
        scale.arc.center.y -= paddingY;

        scale.reflow(bbox);

        for (var i = 0; i < pointers.length; i++) {
            pointers[i].reflow(scale.arc);
            this$1.plotBbox = _progress_kendoDrawing.geometry.Rect.union(scale.bbox, pointers[i].bbox);
        }
    };

    RadialGauge.prototype._createModel = function _createModel () {
        var this$1 = this;

        var options = this.options;
        var pointers = options.pointer;
        var scale = this.scale = new RadialScale(options.scale, this.contextService);

        this.pointers = [];

        var pointersArr = isArray(pointers) ? pointers : [ pointers ];
        for (var i = 0; i < pointersArr.length; i++) {
            var current = new RadialPointer(scale, deepExtend({}, pointersArr[i], {
                animation: {
                    transitions: options.transitions
                }
            }));

            this$1.pointers.push(current);
        }
    };

    return RadialGauge;
}(Gauge));

setDefaultOptions(RadialGauge, {
    transitions: true,
    gaugeArea: {
        background: ""
    }
});

var ArcScale = (function (RadialScale$$1) {
    function ArcScale () {
        RadialScale$$1.apply(this, arguments);
    }

    if ( RadialScale$$1 ) ArcScale.__proto__ = RadialScale$$1;
    ArcScale.prototype = Object.create( RadialScale$$1 && RadialScale$$1.prototype );
    ArcScale.prototype.constructor = ArcScale;

    ArcScale.prototype.rangeSegments = function rangeSegments () {
        var ref = this.options;
        var min = ref.min;
        var max = ref.max;
        var rangePlaceholderColor = ref.rangePlaceholderColor;
        var rangeLineCap = ref.rangeLineCap;

        return [ { from: min, to: max, color: rangePlaceholderColor, lineCap: rangeLineCap } ];
    };

    ArcScale.prototype.hasRanges = function hasRanges () {
        return true;
    };

    ArcScale.prototype.placeholderRangeAngle = function placeholderRangeAngle (angle) {
        var geometry$$1 = this.ranges.children[0].geometry();

        if (this.options.reverse) {
            geometry$$1.setEndAngle(angle);
        } else {
            geometry$$1.setStartAngle(angle);
        }
    };

    ArcScale.prototype.addRange = function addRange (from, to, options) {
        var reverse = this.options.reverse;

        var startAngle = this.slotAngle(reverse ? to : from);
        var endAngle = this.slotAngle(reverse ? from : to);

        var range = this.createRange(startAngle, endAngle, this.getRangeRadius(), options);

        this.ranges.append(range);

        return range;
    };

    return ArcScale;
}(RadialScale));

setDefaultOptions(ArcScale, {
    min: 0,
    max: 100,

    majorTicks: {
        visible: false
    },

    minorTicks: {
        visible: false
    },

    labels: {
        visible: false
    },

    startAngle: 0,
    endAngle: 180,
    rangeLineCap: 'round'
});

var MAX_DURATION = 800;

var RangePointerAnimation = (function (superclass) {
    function RangePointerAnimation(element, options) {
        superclass.call(this, element, options);

        var animationOptions = this.options;
        var duration = (Math.abs(animationOptions.newAngle - animationOptions.oldAngle) / animationOptions.duration) * 1000;
        animationOptions.duration = limitValue(duration, ANGULAR_SPEED, MAX_DURATION);

        var startColor = element.elements.options.get("stroke.color");
        var color = element.currentColor();
        if (startColor !== color) {
            this.startColor = new _progress_kendoDrawing.Color(startColor);
            this.color = new _progress_kendoDrawing.Color(color);
        }
    }

    if ( superclass ) RangePointerAnimation.__proto__ = superclass;
    RangePointerAnimation.prototype = Object.create( superclass && superclass.prototype );
    RangePointerAnimation.prototype.constructor = RangePointerAnimation;

    RangePointerAnimation.prototype.step = function step (pos) {
        var ref = this;
        var options = ref.options;
        var startColor = ref.startColor;
        var color = ref.color;
        var angle = interpolateValue(options.oldAngle, options.newAngle, pos);
        this.element.angle(angle);

        if (color) {
            var r = round(interpolateValue(startColor.r, color.r, pos));
            var g = round(interpolateValue(startColor.g, color.g, pos));
            var b = round(interpolateValue(startColor.b, color.b, pos));

            this.element.stroke(new _progress_kendoDrawing.Color(r, g, b).toHex());
        }
    };

    return RangePointerAnimation;
}(_progress_kendoDrawing.drawing.Animation));

setDefaultOptions(RangePointerAnimation, {
    easing: LINEAR$1,
    duration: ANGULAR_SPEED
});

_progress_kendoDrawing.drawing.AnimationFactory.current.register(RADIAL_RANGE_POINTER, RangePointerAnimation);

var RangePointer = (function (Pointer$$1) {
    function RangePointer () {
        Pointer$$1.apply(this, arguments);
    }

    if ( Pointer$$1 ) RangePointer.__proto__ = Pointer$$1;
    RangePointer.prototype = Object.create( Pointer$$1 && Pointer$$1.prototype );
    RangePointer.prototype.constructor = RangePointer;

    RangePointer.prototype.repaint = function repaint () {
        var ref = this;
        var scale = ref.scale;
        var options = ref.options;
        var oldAngle = scale.slotAngle(options._oldValue);
        var newAngle = scale.slotAngle(options.value);

        if (this.animation) {
            this.animation.abort();
        }

        if (options.animation.transitions === false) {
            this.angle(newAngle);
            this.stroke(this.currentColor());
        } else {
            this.animation = new RangePointerAnimation(this, deepExtend(options.animation, {
                oldAngle: oldAngle,
                newAngle: newAngle
            }));

            this.animation.play();
        }
    };

    RangePointer.prototype.angle = function angle (value) {
        var geometry$$1 = this.elements.geometry();
        if (this.scale.options.reverse) {
            geometry$$1.setStartAngle(value);
        } else {
            geometry$$1.setEndAngle(value);
        }
        this.scale.placeholderRangeAngle(value);
    };

    RangePointer.prototype.stroke = function stroke (value) {
        this.elements.stroke(value);
    };

    RangePointer.prototype.render = function render () {
        if (this.elements) {
            return;
        }

        var ref = this;
        var scale = ref.scale;
        var options = ref.options;

        if (options.animation !== false) {
            deepExtend(options.animation, {
                startAngle: 0,
                center: scale.arc.center,
                reverse: scale.options.reverse
            });
        }

        this.elements = scale.addRange(scale.options.min, this.options.value, {
            color: this.currentColor(),
            opacity: options.opacity,
            lineCap: scale.options.rangeLineCap
        });
    };

    RangePointer.prototype.currentColor = function currentColor () {
        var ref = this.scale.options;
        var min = ref.min;
        var max = ref.max;
        var ref$1 = this.options;
        var colors = ref$1.colors;
        var color = ref$1.color;
        var value = ref$1.value;
        var currentValue = isNumber(value) ? value : min;

        if (colors) {
            for (var idx = 0; idx < colors.length; idx++) {
                var ref$2 = colors[idx];
                var rangeColor = ref$2.color;
                var from = ref$2.from; if ( from === void 0 ) from = min;
                var to = ref$2.to; if ( to === void 0 ) to = max;

                if (from <= currentValue && currentValue <= to) {
                    return rangeColor;
                }
            }
        }

        return color;
    };

    RangePointer.prototype.reflow = function reflow () {
        this.render();

        this.bbox = this.elements.bbox();
    };

    return RangePointer;
}(Pointer));

setDefaultOptions(RangePointer, {
    animation: {
        type: RADIAL_RANGE_POINTER,
        duration: ANGULAR_SPEED
    }
});

var ArcGauge = (function (RadialGauge$$1) {
    function ArcGauge () {
        RadialGauge$$1.apply(this, arguments);
    }

    if ( RadialGauge$$1 ) ArcGauge.__proto__ = RadialGauge$$1;
    ArcGauge.prototype = Object.create( RadialGauge$$1 && RadialGauge$$1.prototype );
    ArcGauge.prototype.constructor = ArcGauge;

    ArcGauge.prototype._initTheme = function _initTheme (theme) {
        RadialGauge$$1.prototype._initTheme.call(this, theme);

        this.options.color = this.options.color || (this.theme.pointer || {}).color;
    };

    ArcGauge.prototype._createModel = function _createModel () {
        var options = this.options;
        var scale = this.scale = new ArcScale(options.scale, this.contextService);

        var pointer = new RangePointer(scale, deepExtend({}, {
            colors: options.colors,
            color: options.color,
            value: options.value,
            opacity: options.opacity,
            animation: {
                transitions: options.transitions
            }
        }));

        this.pointers = [ pointer ];
    };

    ArcGauge.prototype._buildPointers = function _buildPointers (pointers) {
        for (var i = 0; i < pointers.length; i++) {
            var current = pointers[i];
            current.render();

            current.value(current.options.value);
        }
    };

    ArcGauge.prototype._setValueOptions = function _setValueOptions (value) {
        this.options.value = value;
    };

    ArcGauge.prototype.currentColor = function currentColor () {
        var pointer = this.pointers[0];
        if (pointer) {
            return pointer.currentColor();
        }
    };

    ArcGauge.prototype.centerLabelPosition = function centerLabelPosition (width, height) {
        var size = this.getSize();
        var center = this.scale.arc.center;

        var left = center.x - width / 2;
        var top = center.y - height / 2;

        if (width < size.width) {
            var right = left + width;

            left = Math.max(left, 0);

            if (right > size.width) {
                left -= right - size.width;
            }
        }

        if (height < size.height) {
            var bbox = this.scale.bbox;
            var yLimit = bbox.bottomRight().y;
            var bottom = top + height;

            top = Math.max(top, bbox.origin.y);

            if (bottom > yLimit) {
                top -= bottom - yLimit;
            }
        }

        return {
            left: left,
            top: top
        };
    };

    return ArcGauge;
}(RadialGauge));

var BAR_GAP = 1.5;
var BAR_SPACING = 0.4;
var BLACK$1 = '#000';
var SANS = 'Arial, Helvetica, sans-serif';
var SANS11 = "11px " + SANS;
var SANS12 = '12px ' + SANS;
var SANS16 = '16px ' + SANS;
var TRANSPARENT = 'transparent';
var WHITE$1 = '#fff';

var notes = function () { return ({
    icon: {
        border: {
            width: 1
        }
    },
    label: {
        font: SANS12,
        padding: 3
    },
    line: {
        length: 10,
        width: 2
    },
    visible: true
}); };

var axisDefaults = function () { return ({
    labels: {
        font: SANS12
    },
    notes: notes(),
    title: {
        font: SANS16,
        margin: 5
    }
}); };

var areaSeries = function () { return ({
    highlight: {
        markers: {
            border: {}
        }
    },
    line: {
        opacity: 1,
        width: 0
    },
    markers: {
        size: 6,
        visible: false
    },
    opacity: 0.4
}); };

var rangeAreaSeries = function () { return ({
    highlight: {
        markers: {
            border: {}
        }
    },
    line: {
        opacity: 1,
        width: 0
    },
    markers: {
        size: 6,
        visible: false
    },
    opacity: 0.4
}); };

var barSeries = function () { return ({
    gap: BAR_GAP,
    spacing: BAR_SPACING
}); };

var boxPlotSeries = function () { return ({
    outliersField: "",
    meanField: "",
    border: {
        _brightness: 0.8,
        width: 1
    },
    downColor: WHITE$1,
    gap: 1,
    highlight: {
        border: {
            opacity: 1,
            width: 2
        },
        whiskers: {
            width: 3
        },
        mean: {
            width: 2
        },
        median: {
            width: 2
        }
    },
    mean: {
        width: 2
    },
    median: {
        width: 2
    },
    spacing: 0.3,
    whiskers: {
        width: 2
    }
}); };

var bubbleSeries = function () { return ({
    border: {
        width: 0
    },
    labels: {
        background: TRANSPARENT
    },
    opacity: 0.6
}); };

var bulletSeries = function () { return ({
    gap: BAR_GAP,
    spacing: BAR_SPACING,
    target: {
        color: "#ff0000"
    }
}); };

var candlestickSeries = function () { return ({
    border: {
        _brightness: 0.8,
        width: 1
    },
    downColor: WHITE$1,
    gap: 1,
    highlight: {
        border: {
            opacity: 1,
            width: 2
        },
        line: {
            width: 2
        }
    },
    line: {
        color: BLACK$1,
        width: 1
    },
    spacing: 0.3
}); };

var columnSeries = function () { return ({
    gap: BAR_GAP,
    spacing: BAR_SPACING
}); };

var donutSeries = function () { return ({
    margin: 1
}); };

var lineSeries = function () { return ({
    width: 2
}); };

var ohlcSeries = function () { return ({
    gap: 1,
    highlight: {
        line: {
            opacity: 1,
            width: 3
        }
    },
    line: {
        width: 1
    },
    spacing: 0.3
}); };

var radarAreaSeries = function () { return ({
    line: {
        opacity: 1,
        width: 0
    },
    markers: {
        size: 6,
        visible: false
    },
    opacity: 0.5
}); };

var radarLineSeries = function () { return ({
    markers: {
        visible: false
    },
    width: 2
}); };

var rangeBarSeries = function () { return ({
    gap: BAR_GAP,
    spacing: BAR_SPACING
}); };

var rangeColumnSeries = function () { return ({
    gap: BAR_GAP,
    spacing: BAR_SPACING
}); };

var scatterLineSeries = function () { return ({
    width: 1
}); };

var waterfallSeries = function () { return ({
    gap: 0.5,
    line: {
        color: BLACK$1,
        width: 1
    },
    spacing: BAR_SPACING
}); };

var pieSeries = function () { return ({
    labels: {
        background: '',
        color: '',
        padding: {
            top: 5,
            bottom: 5,
            left: 7,
            right: 7
        }
    }
}); };

var funnelSeries = function () { return ({
    labels: {
        background: '',
        color: '',
        padding: {
            top: 5,
            bottom: 5,
            left: 7,
            right: 7
        }
    }
}); };

var seriesDefaults = function (options) { return ({
    visible: true,
    labels: {
        font: SANS11
    },
    overlay: options.gradients ? {} : {
        gradient: "none"
    },
    area: areaSeries(),
    rangeArea: rangeAreaSeries(),
    verticalRangeArea: rangeAreaSeries(),
    bar: barSeries(),
    boxPlot: boxPlotSeries(),
    bubble: bubbleSeries(),
    bullet: bulletSeries(),
    candlestick: candlestickSeries(),
    column: columnSeries(),
    pie: pieSeries(),
    donut: donutSeries(),
    funnel: funnelSeries(),
    horizontalWaterfall: waterfallSeries(),
    line: lineSeries(),
    notes: notes(),
    ohlc: ohlcSeries(),
    radarArea: radarAreaSeries(),
    radarLine: radarLineSeries(),
    polarArea: radarAreaSeries(),
    polarLine: radarLineSeries(),
    rangeBar: rangeBarSeries(),
    rangeColumn: rangeColumnSeries(),
    scatterLine: scatterLineSeries(),
    verticalArea: areaSeries(),
    verticalBoxPlot: boxPlotSeries(),
    verticalBullet: bulletSeries(),
    verticalLine: lineSeries(),
    waterfall: waterfallSeries()
}); };

var title = function () { return ({
    font: SANS16
}); };

var legend = function () { return ({
    labels: {
        font: SANS12
    }
}); };

var baseTheme = function (options) {
    if ( options === void 0 ) options = {};

    return ({
    axisDefaults: axisDefaults(),
    categoryAxis: {
        majorGridLines: {
            visible: true
        }
    },
    navigator: {
        pane: {
            height: 90,
            margin: {
                top: 10
            }
        }
    },
    seriesDefaults: seriesDefaults(options),
    title: title(),
    legend: legend()
});
};

exports.chartBaseTheme = baseTheme;
exports.autoMajorUnit = autoMajorUnit;
exports.Point = Point;
exports.Box = Box;
exports.Ring = Ring;
exports.Sector = Sector;
exports.ShapeBuilder = ShapeBuilder;
exports.ShapeElement = ShapeElement;
exports.ChartElement = ChartElement;
exports.BoxElement = BoxElement;
exports.RootElement = RootElement;
exports.FloatElement = FloatElement;
exports.Text = Text;
exports.TextBox = TextBox;
exports.Title = Title;
exports.AxisLabel = AxisLabel;
exports.Axis = Axis;
exports.Note = Note;
exports.CategoryAxis = CategoryAxis;
exports.DateCategoryAxis = DateCategoryAxis;
exports.DateValueAxis = DateValueAxis;
exports.NumericAxis = NumericAxis;
exports.LogarithmicAxis = LogarithmicAxis;
exports.PolarAxis = PolarAxis;
exports.RadarCategoryAxis = RadarCategoryAxis;
exports.RadarNumericAxis = RadarNumericAxis;
exports.RadarLogarithmicAxis = RadarLogarithmicAxis;
exports.CurveProcessor = CurveProcessor;
exports.Gradients = GRADIENTS;
exports.rectToBox = rectToBox;
exports.Aggregates = Aggregates;
exports.AreaChart = AreaChart;
exports.AreaSegment = AreaSegment;
exports.AxisGroupRangeTracker = AxisGroupRangeTracker;
exports.Bar = Bar;
exports.BarChart = BarChart;
exports.BarLabel = BarLabel;
exports.BoxPlotChart = BoxPlotChart;
exports.BoxPlot = BoxPlot;
exports.BubbleChart = BubbleChart;
exports.Bullet = Bullet;
exports.BulletChart = BulletChart;
exports.CandlestickChart = CandlestickChart;
exports.Candlestick = Candlestick;
exports.CategoricalChart = CategoricalChart;
exports.CategoricalErrorBar = CategoricalErrorBar;
exports.CategoricalPlotArea = CategoricalPlotArea;
exports.Chart = Chart;
exports.ChartContainer = ChartContainer;
exports.ClipAnimation = ClipAnimation;
exports.ClusterLayout = ClusterLayout;
exports.Crosshair = Crosshair;
exports.CrosshairTooltip = CrosshairTooltip;
exports.DefaultAggregates = DefaultAggregates;
exports.DonutChart = DonutChart;
exports.DonutPlotArea = DonutPlotArea;
exports.DonutSegment = DonutSegment;
exports.ErrorBarBase = ErrorBarBase;
exports.ErrorRangeCalculator = ErrorRangeCalculator;
exports.Highlight = Highlight;
exports.SharedTooltip = SharedTooltip;
exports.Legend = Legend;
exports.LegendItem = LegendItem;
exports.LegendLayout = LegendLayout;
exports.LineChart = LineChart;
exports.LinePoint = LinePoint;
exports.LineSegment = LineSegment;
exports.Pane = Pane;
exports.PieAnimation = PieAnimation;
exports.PieChart = PieChart;
exports.PieChartMixin = PieChartMixin;
exports.PiePlotArea = PiePlotArea;
exports.PieSegment = PieSegment;
exports.PlotAreaBase = PlotAreaBase;
exports.PlotAreaEventsMixin = PlotAreaEventsMixin;
exports.PlotAreaFactory = PlotAreaFactory;
exports.PointEventsMixin = PointEventsMixin;
exports.RangeBar = RangeBar;
exports.RangeBarChart = RangeBarChart;
exports.RangeAreaPoint = RangeAreaPoint;
exports.RangeAreaChart = RangeAreaChart;
exports.ScatterChart = ScatterChart;
exports.ScatterErrorBar = ScatterErrorBar;
exports.ScatterLineChart = ScatterLineChart;
exports.Selection = Selection;
exports.SeriesAggregator = SeriesAggregator;
exports.SeriesBinder = SeriesBinder;
exports.SplineSegment = SplineSegment;
exports.SplineAreaSegment = SplineAreaSegment;
exports.StackWrap = StackWrap;
exports.Tooltip = Tooltip;
exports.OHLCChart = OHLCChart;
exports.OHLCPoint = OHLCPoint;
exports.WaterfallChart = WaterfallChart;
exports.WaterfallSegment = WaterfallSegment;
exports.XYPlotArea = XYPlotArea;
exports.MousewheelZoom = MousewheelZoom;
exports.ZoomSelection = ZoomSelection;
exports.Pannable = Pannable;
exports.ChartAxis = ChartAxis;
exports.ChartPane = ChartPane;
exports.ChartPlotArea = ChartPlotArea;
exports.findAxisByName = findAxisByName;
exports.anyHasZIndex = anyHasZIndex;
exports.appendIfNotNull = appendIfNotNull;
exports.areNumbers = areNumbers;
exports.bindSegments = bindSegments;
exports.categoriesCount = categoriesCount$1;
exports.countNumbers = countNumbers;
exports.equalsIgnoreCase = equalsIgnoreCase;
exports.evalOptions = evalOptions;
exports.filterSeriesByType = filterSeriesByType;
exports.getDateField = getDateField;
exports.getField = getField;
exports.hasGradientOverlay = hasGradientOverlay;
exports.hasValue = hasValue;
exports.isDateAxis = isDateAxis;
exports.segmentVisible = segmentVisible;
exports.singleItemOrArray = singleItemOrArray;
exports.createOutOfRangePoints = createOutOfRangePoints;
exports.ChartService = ChartService;
exports.DomEventsBuilder = DomEventsBuilder;
exports.FormatService = FormatService;
exports.IntlService = IntlService;
exports.TemplateService = TemplateService;
exports.Sparkline = Sparkline;
exports.constants = constants;
exports.Navigator = Navigator;
exports.NavigatorHint = NavigatorHint;
exports.StockChart = StockChart;
exports.Gauge = Gauge;
exports.LinearGauge = LinearGauge;
exports.LinearPointer = LinearPointer;
exports.ArrowLinearPointer = ArrowLinearPointer;
exports.BarLinearPointer = BarLinearPointer;
exports.LinearScale = LinearScale;
exports.RadialGauge = RadialGauge;
exports.RadialPointer = RadialPointer;
exports.RadialScale = RadialScale;
exports.ArcGauge = ArcGauge;
exports.RangePointer = RangePointer;
exports.ArcScale = ArcScale;
exports.addClass = addClass;
exports.removeClass = removeClass;
exports.alignPathToPixel = alignPathToPixel;
exports.clockwise = clockwise;
exports.convertableToNumber = convertableToNumber;
exports.deepExtend = deepExtend;
exports.elementStyles = elementStyles;
exports.getSpacing = getSpacing;
exports.getTemplate = getTemplate;
exports.getter = getter;
exports.grep = grep;
exports.hasClasses = hasClasses;
exports.HashMap = HashMap;
exports.inArray = inArray;
exports.interpolateValue = interpolateValue;
exports.InstanceObserver = InstanceObserver;
exports.isArray = isArray;
exports.isFunction = isFunction;
exports.isNumber = isNumber;
exports.isObject = isObject;
exports.isString = isString;
exports.map = map;
exports.mousewheelDelta = mousewheelDelta;
exports.FontLoader = FontLoader;
exports.setDefaultOptions = setDefaultOptions;
exports.sparseArrayLimits = sparseArrayLimits;
exports.styleValue = styleValue;
exports.find = find;
exports.elementScale = elementScale;
exports.append = append$1;
exports.bindEvents = bindEvents;
exports.Class = _progress_kendoDrawing.Class;
exports.defined = defined;
exports.deg = deg;
exports.elementOffset = elementOffset;
exports.elementSize = elementSize$1;
exports.eventElement = eventElement;
exports.eventCoordinates = eventCoordinates;
exports.last = last;
exports.limitValue = limitValue;
exports.logToConsole = _progress_kendoDrawing.logToConsole;
exports.objectKey = objectKey;
exports.rad = rad;
exports.round = round;
exports.unbindEvents = unbindEvents;
exports.valueOrDefault = valueOrDefault;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jb21tb24vY29uc3RhbnRzLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NvbW1vbi9pcy1hcnJheS5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jb21tb24vYWRkLWNsYXNzLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NvbW1vbi9yZW1vdmUtY2xhc3MuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY29tbW9uL2FsaWduLXBhdGgtdG8tcGl4ZWwuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY29tbW9uL2Nsb2Nrd2lzZS5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jb21tb24vaXMtbnVtYmVyLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NvbW1vbi9pcy1zdHJpbmcuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY29tbW9uL2NvbnZlcnRhYmxlLXRvLW51bWJlci5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jb21tb24vaXMtZnVuY3Rpb24uanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY29tbW9uL2RlZXAtZXh0ZW5kLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NvbW1vbi9pcy1vYmplY3QuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY29tbW9uL3N0eWxlLXZhbHVlLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NvbW1vbi9lbGVtZW50LXN0eWxlcy5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jb21tb24vZ2V0LXNwYWNpbmcuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvc2VydmljZXMvaW50bC1zZXJ2aWNlLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL3NlcnZpY2VzL2Zvcm1hdC1zZXJ2aWNlLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL3NlcnZpY2VzL2NoYXJ0LXNlcnZpY2UuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvc2VydmljZXMvZG9tLWV2ZW50cy1idWlsZGVyLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL3NlcnZpY2VzL3RlbXBsYXRlLXNlcnZpY2UuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY29tbW9uL2dldC10ZW1wbGF0ZS5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jb21tb24vZ2V0dGVyLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NvbW1vbi9ncmVwLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NvbW1vbi9oYXMtY2xhc3Nlcy5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jb21tb24vaGFzaC1tYXAuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY29tbW9uL2luLWFycmF5LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NvbW1vbi9pbnRlcnBvbGF0ZS12YWx1ZS5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jb21tb24vaW5zdGFuY2Utb2JzZXJ2ZXIuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY29tbW9uL21hcC5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jb21tb24vbW91c2V3aGVlbC1kZWx0YS5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9kcmF3aW5nLXV0aWxzLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NvbW1vbi9mb250LWxvYWRlci5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jb21tb24vc2V0LWRlZmF1bHQtb3B0aW9ucy5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jb21tb24vc3BhcnNlLWFycmF5LWxpbWl0cy5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jb21tb24vZmluZC5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jb21tb24vZWxlbWVudC1zY2FsZS5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jb3JlL3V0aWxzL2F1dG8tbWFqb3ItdW5pdC5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jb3JlL3BvaW50LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NvcmUvYm94LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NvcmUvcmluZy5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jb3JlL3NlY3Rvci5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jb3JlL3NoYXBlLWJ1aWxkZXIuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY29yZS9jaGFydC1lbGVtZW50LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NvcmUvYm94LWVsZW1lbnQuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY29yZS9zaGFwZS1lbGVtZW50LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NvcmUvZ3JhZGllbnRzLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NvcmUvdXRpbHMvYm94LWRpZmYuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY29yZS9yb290LWVsZW1lbnQuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY29yZS9mbG9hdC1lbGVtZW50LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NvcmUvdGV4dC5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jb3JlL3V0aWxzL3JlY3QtdG8tYm94LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NvcmUvdGV4dC1ib3guanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY29yZS90aXRsZS5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jb3JlL2F4aXMtbGFiZWwuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY29yZS9ub3RlLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NvcmUvdXRpbHMvY3JlYXRlLWF4aXMtdGljay5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jb3JlL3V0aWxzL2NyZWF0ZS1heGlzLWdyaWQtbGluZS5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jb3JlL2F4aXMuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvZGF0ZS11dGlscy9jb25zdGFudHMuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvZGF0ZS11dGlscy9hYnNvbHV0ZS1kYXRlLWRpZmYuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvZGF0ZS11dGlscy9hZGQtdGlja3MuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvZGF0ZS11dGlscy90by1kYXRlLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2RhdGUtdXRpbHMvc3RhcnQtb2Ytd2Vlay5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9kYXRlLXV0aWxzL2FkZC1kdXJhdGlvbi5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9kYXRlLXV0aWxzL2Zsb29yLWRhdGUuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvZGF0ZS11dGlscy9jZWlsLWRhdGUuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvZGF0ZS11dGlscy9kYXRlLWNvbXBhcmVyLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2RhdGUtdXRpbHMvZGF0ZS1kaWZmLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2RhdGUtdXRpbHMvdG8tdGltZS5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9kYXRlLXV0aWxzL2RhdGUtZXF1YWxzLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2RhdGUtdXRpbHMvZGF0ZS1pbmRleC5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9kYXRlLXV0aWxzL2R1cmF0aW9uLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2RhdGUtdXRpbHMvcGFyc2UtZGF0ZS5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9kYXRlLXV0aWxzL3BhcnNlLWRhdGVzLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2RhdGUtdXRpbHMvZmlyc3QtZGF5LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NvcmUvY2F0ZWdvcnktYXhpcy5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jb3JlL2NvbnN0YW50cy5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jb3JlL2RhdGUtY2F0ZWdvcnktYXhpcy5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jb3JlL3V0aWxzL2F1dG8tYXhpcy1taW4uanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY29yZS91dGlscy9hdXRvLWF4aXMtbWF4LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NvcmUvdXRpbHMvZmxvb3IuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY29yZS91dGlscy9jZWlsLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NvcmUvdXRpbHMvbGltaXQtY29vcmRpbmF0ZS5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jb3JlL251bWVyaWMtYXhpcy5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jb3JlL2RhdGUtdmFsdWUtYXhpcy5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jb3JlL2xvZ2FyaXRobWljLWF4aXMuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY29yZS9taXhpbnMvZ3JpZC1saW5lcy1taXhpbi5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jb3JlL3JhZGFyLWNhdGVnb3J5LWF4aXMuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY29yZS9wb2xhci1heGlzLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NvcmUvbWl4aW5zL3JhZGFyLW51bWVyaWMtYXhpcy1taXhpbi5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jb3JlL3JhZGFyLW51bWVyaWMtYXhpcy5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jb3JlL3JhZGFyLWxvZ2FyaXRobWljLWF4aXMuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY29yZS9jdXJ2ZS1wcm9jZXNzb3IuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY2hhcnQvYXBpLWVsZW1lbnRzL2NoYXJ0LWF4aXMuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY2hhcnQvYXBpLWVsZW1lbnRzL2ZpbmQtYXhpcy1ieS1uYW1lLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L2FwaS1lbGVtZW50cy9jaGFydC1wYW5lLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L2FwaS1lbGVtZW50cy9jaGFydC1wbG90YXJlYS5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jaGFydC91dGlscy9jb3VudC1udW1iZXJzLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L2FnZ3JlZ2F0ZXMvYWdncmVnYXRlcy5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jaGFydC91dGlscy9nZXQtZmllbGQuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY2hhcnQvc2VyaWVzLWJpbmRlci5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jaGFydC9lcnJvci1iYXJzL2Vycm9yLXJhbmdlLWNhbGN1bGF0b3IuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY2hhcnQvY29uc3RhbnRzLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L2Vycm9yLWJhcnMvZXJyb3ItYmFyLWJhc2UuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY2hhcnQvZXJyb3ItYmFycy9jYXRlZ29yaWNhbC1lcnJvci1iYXIuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY2hhcnQvdXRpbHMvZXZhbC1vcHRpb25zLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L3V0aWxzL2NhdGVnb3JpZXMtY291bnQuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY2hhcnQvY2F0ZWdvcmljYWwtY2hhcnQuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY2hhcnQvbWl4aW5zL3BvaW50LWV2ZW50cy1taXhpbi5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jaGFydC9taXhpbnMvbm90ZS1taXhpbi5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jaGFydC9saW5lLWNoYXJ0L2xpbmUtcG9pbnQuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY2hhcnQvbGluZS1jaGFydC9saW5lLXNlZ21lbnQuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY2hhcnQvbGluZS1jaGFydC9zdGVwLWxpbmUtbWl4aW4uanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY2hhcnQvbGluZS1jaGFydC9zdGVwLWxpbmUtc2VnbWVudC5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jaGFydC9saW5lLWNoYXJ0L3NwbGluZS1zZWdtZW50LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L21peGlucy9saW5lLWNoYXJ0LW1peGluLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L2FuaW1hdGlvbnMvY2xpcC1hbmltYXRpb24uanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY2hhcnQvdXRpbHMvYW55LWhhcy16LWluZGV4LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L21peGlucy9jbGlwLWFuaW1hdGlvbi1taXhpbi5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jaGFydC9saW5lLWNoYXJ0L2xpbmUtY2hhcnQuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY2hhcnQvYXJlYS1jaGFydC9hcmVhLXNlZ21lbnQuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY2hhcnQvYXJlYS1jaGFydC9zdGVwLWFyZWEtc2VnbWVudC5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jaGFydC9hcmVhLWNoYXJ0L3NwbGluZS1hcmVhLXNlZ21lbnQuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY2hhcnQvYXJlYS1jaGFydC9hcmVhLWNoYXJ0LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L2F4aXMtZ3JvdXAtcmFuZ2UtdHJhY2tlci5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jaGFydC9iYXItY2hhcnQvYmFyLWxhYmVsLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L3V0aWxzL2hhcy1ncmFkaWVudC1vdmVybGF5LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L2Jhci1jaGFydC9iYXIuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY2hhcnQvbGF5b3V0L3V0aWxzLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L2xheW91dC9jbHVzdGVyLWxheW91dC5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jaGFydC9sYXlvdXQvc3RhY2std3JhcC5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jaGFydC9iYXItY2hhcnQvYmFyLWNoYXJ0LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L2NhbmRsZXN0aWNrLWNoYXJ0L2NhbmRsZXN0aWNrLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L3V0aWxzL2FyZS1udW1iZXJzLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L2NhbmRsZXN0aWNrLWNoYXJ0L2NhbmRsZXN0aWNrLWNoYXJ0LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L2JveC1wbG90LWNoYXJ0L2JveC1wbG90LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L2JveC1wbG90LWNoYXJ0L3ZlcnRpY2FsLWJveC1wbG90LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L2JveC1wbG90LWNoYXJ0L2JveC1wbG90LWNoYXJ0LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L2Vycm9yLWJhcnMvc2NhdHRlci1lcnJvci1iYXIuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY2hhcnQvdXRpbHMvaGFzLXZhbHVlLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L3NjYXR0ZXItY2hhcnRzL3NjYXR0ZXItY2hhcnQuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY2hhcnQvYnViYmxlLWNoYXJ0L2J1YmJsZS5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jaGFydC9idWJibGUtY2hhcnQvYnViYmxlLWNoYXJ0LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L2J1bGxldC1jaGFydC90YXJnZXQuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY2hhcnQvYnVsbGV0LWNoYXJ0L2J1bGxldC5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jaGFydC9idWxsZXQtY2hhcnQvYnVsbGV0LWNoYXJ0LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L3Rvb2x0aXAvYmFzZS10b29sdGlwLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L2Nyb3NzaGFpci9jcm9zc2hhaXItdG9vbHRpcC5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jaGFydC9jcm9zc2hhaXIvY3Jvc3NoYWlyLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L2NoYXJ0LWNvbnRhaW5lci5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jaGFydC9wYW5lLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L3V0aWxzL2FwcGVuZC1pZi1ub3QtbnVsbC5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jaGFydC91dGlscy9zZWdtZW50LXZpc2libGUuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY2hhcnQvdXRpbHMvYmluZC1zZWdtZW50cy5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jaGFydC91dGlscy9lcXVhbHMtaWdub3JlLWNhc2UuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY2hhcnQvdXRpbHMvZmlsdGVyLXNlcmllcy1ieS10eXBlLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L3V0aWxzL2dldC1kYXRlLWZpZWxkLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L3V0aWxzL2lzLWRhdGUtYXhpcy5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jaGFydC91dGlscy9zaW5nbGUtaXRlbS1vci1hcnJheS5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jaGFydC91dGlscy9jcmVhdGUtb3V0LW9mLXJhbmdlLXBvaW50cy5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jaGFydC9wbG90YXJlYS9wbG90YXJlYS1iYXNlLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L21peGlucy9wbG90YXJlYS1ldmVudHMtbWl4aW4uanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY2hhcnQvYWdncmVnYXRlcy9zZXJpZXMtYWdncmVnYXRvci5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jaGFydC9hZ2dyZWdhdGVzL2RlZmF1bHQtYWdncmVnYXRlcy5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jaGFydC9yYW5nZS1iYXItY2hhcnQvcmFuZ2UtYmFyLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L3JhbmdlLWJhci1jaGFydC9yYW5nZS1iYXItY2hhcnQuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY2hhcnQvcmFuZ2UtYXJlYS1jaGFydC9yYW5nZS1saW5lLXBvaW50LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L3JhbmdlLWFyZWEtY2hhcnQvcmFuZ2UtYXJlYS1wb2ludC5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jaGFydC9yYW5nZS1hcmVhLWNoYXJ0L3JhbmdlLWFyZWEtc2VnbWVudC5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jaGFydC9yYW5nZS1hcmVhLWNoYXJ0L3NwbGluZS1yYW5nZS1hcmVhLXNlZ21lbnQuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY2hhcnQvcmFuZ2UtYXJlYS1jaGFydC9zdGVwLXJhbmdlLWFyZWEtc2VnbWVudC5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jaGFydC9yYW5nZS1hcmVhLWNoYXJ0L3JhbmdlLWFyZWEtY2hhcnQuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY2hhcnQvb2hsYy1jaGFydC9vaGxjLXBvaW50LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L29obGMtY2hhcnQvb2hsYy1jaGFydC5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jaGFydC93YXRlcmZhbGwtY2hhcnQvd2F0ZXJmYWxsLXNlZ21lbnQuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY2hhcnQvd2F0ZXJmYWxsLWNoYXJ0L3dhdGVyZmFsbC1jaGFydC5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jaGFydC9wbG90YXJlYS9jYXRlZ29yaWNhbC1wbG90YXJlYS5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jaGFydC9oaWdobGlnaHQuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY2hhcnQvcGFuLWFuZC16b29tL2FjY2VwdC1rZXkuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY2hhcnQvcGFuLWFuZC16b29tL3RvLWNoYXJ0LWF4aXMtcmFuZ2VzLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L3Bhbi1hbmQtem9vbS9wYW5uYWJsZS5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jaGFydC9wYW4tYW5kLXpvb20vem9vbS1zZWxlY3Rpb24uanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY2hhcnQvcGFuLWFuZC16b29tL21vdXNld2hlZWwtem9vbS5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jaGFydC9sZWdlbmQvbGVnZW5kLWxheW91dC5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jaGFydC9sZWdlbmQvbGVnZW5kLWl0ZW0uanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY2hhcnQvbGVnZW5kL2xlZ2VuZC5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jaGFydC9wbG90YXJlYS9wbG90YXJlYS1mYWN0b3J5LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L3NlbGVjdGlvbi5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jaGFydC90b29sdGlwL3Rvb2x0aXAuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY2hhcnQvdG9vbHRpcC9zaGFyZWQtdG9vbHRpcC5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jaGFydC9hbmltYXRpb25zL2Jhci1jaGFydC1hbmltYXRpb24uanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY2hhcnQvYW5pbWF0aW9ucy9idWJibGUtYW5pbWF0aW9uLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L2FuaW1hdGlvbnMvZmFkZS1pbi1hbmltYXRpb24uanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY2hhcnQvYW5pbWF0aW9ucy9waWUtYW5pbWF0aW9uLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L3NjYXR0ZXItY2hhcnRzL3NjYXR0ZXItbGluZS1jaGFydC5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jaGFydC9wbG90YXJlYS94eS1wbG90YXJlYS5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jaGFydC9waWUtY2hhcnQvcGllLXNlZ21lbnQuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY2hhcnQvbWl4aW5zL3BpZS1jaGFydC1taXhpbi5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jaGFydC9waWUtY2hhcnQvcGllLWNoYXJ0LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L3Bsb3RhcmVhL3BpZS1wbG90YXJlYS5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jaGFydC9kb251dC1jaGFydC9kb251dC1zZWdtZW50LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L2RvbnV0LWNoYXJ0L2RvbnV0LWNoYXJ0LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L3Bsb3RhcmVhL2RvbnV0LXBsb3RhcmVhLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L3Bsb3RhcmVhL3BvbGFyLXBsb3RhcmVhLWJhc2UuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY2hhcnQvcG9sYXItc2NhdHRlci1jaGFydC9wb2xhci1zY2F0dGVyLWNoYXJ0LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L3BvbGFyLWxpbmUtY2hhcnQvcG9sYXItbGluZS1jaGFydC5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jaGFydC9wb2xhci1hcmVhLWNoYXJ0L3NwbGluZS1wb2xhci1hcmVhLXNlZ21lbnQuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY2hhcnQvcG9sYXItYXJlYS1jaGFydC9wb2xhci1hcmVhLXNlZ21lbnQuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY2hhcnQvcG9sYXItYXJlYS1jaGFydC9wb2xhci1hcmVhLWNoYXJ0LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L3Bsb3RhcmVhL3BvbGFyLXBsb3RhcmVhLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L3JhZGFyLWxpbmUtY2hhcnQvcmFkYXItbGluZS1jaGFydC5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jaGFydC9yYWRhci1hcmVhLWNoYXJ0L3NwbGluZS1yYWRhci1hcmVhLXNlZ21lbnQuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY2hhcnQvcmFkYXItYXJlYS1jaGFydC9yYWRhci1hcmVhLXNlZ21lbnQuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY2hhcnQvcmFkYXItYXJlYS1jaGFydC9yYWRhci1hcmVhLWNoYXJ0LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L3JhZGFyLWJhci1jaGFydC9yYWRhci1zZWdtZW50LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L2xheW91dC9yYWRhci1jbHVzdGVyLWxheW91dC5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jaGFydC9sYXlvdXQvcmFkYXItc3RhY2stbGF5b3V0LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L3JhZGFyLWJhci1jaGFydC9yYWRhci1iYXItY2hhcnQuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY2hhcnQvcGxvdGFyZWEvcmFkYXItcGxvdGFyZWEuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY2hhcnQvZnVubmVsLWNoYXJ0L2Z1bm5lbC1zZWdtZW50LmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L2Z1bm5lbC1jaGFydC9mdW5uZWwtY2hhcnQuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvY2hhcnQvcGxvdGFyZWEvZnVubmVsLXBsb3RhcmVhLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2NoYXJ0L3JlZ2lzdGVyLWNoYXJ0cy5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jaGFydC9jaGFydC5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9zcGFya2xpbmUvc2hhcmVkLXRvb2x0aXAuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvc3BhcmtsaW5lL3NwYXJrbGluZS5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9zdG9jay9mYWRlLW91dC1hbmltYXRpb24uanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvc3RvY2svbmF2aWdhdG9yLWhpbnQuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvc3RvY2svY29uc3RhbnRzLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL3N0b2NrL25hdmlnYXRvci5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9zdG9jay9zdG9jay1jaGFydC5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9nYXVnZXMvY29uc3RhbnRzLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2dhdWdlcy91dGlscy9wYWQuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvZ2F1Z2VzL3V0aWxzL2J1aWxkLWxhYmVsLWVsZW1lbnQuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvZ2F1Z2VzL3V0aWxzL2dldC1yYW5nZS5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9nYXVnZXMvdXRpbHMvdW5wYWQuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvZ2F1Z2VzL2dhdWdlLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2dhdWdlcy9saW5lYXIvbGluZWFyLXNjYWxlLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2dhdWdlcy9wb2ludGVyLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2dhdWdlcy9saW5lYXIvbGluZWFyLXBvaW50ZXIuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvZ2F1Z2VzL2xpbmVhci9hcnJvdy1saW5lYXItcG9pbnRlci1hbmltYXRpb24uanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvZ2F1Z2VzL2xpbmVhci9hcnJvdy1saW5lYXItcG9pbnRlci5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9nYXVnZXMvbGluZWFyL2Jhci1saW5lYXItcG9pbnRlci1hbmltYXRpb24uanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvZ2F1Z2VzL2xpbmVhci9iYXItbGluZWFyLXBvaW50ZXIuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvZ2F1Z2VzL2xpbmVhci9saW5lYXItZ2F1Z2UuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvZ2F1Z2VzL3JhZGlhbC9yYWRpYWwtc2NhbGUuanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvZ2F1Z2VzL3JhZGlhbC9yYWRpYWwtcG9pbnRlci1hbmltYXRpb24uanMiLCIvcm9vdC9zcmMvZ2l0aHViLmNvbS90ZWxlcmlrL2tlbmRvLWNoYXJ0cy9zcmMvZ2F1Z2VzL3JhZGlhbC9yYWRpYWwtcG9pbnRlci5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9nYXVnZXMvcmFkaWFsL3JhZGlhbC1nYXVnZS5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9nYXVnZXMvYXJjL2FyYy1zY2FsZS5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9nYXVnZXMvYXJjL3JhbmdlLXBvaW50ZXItYW5pbWF0aW9uLmpzIiwiL3Jvb3Qvc3JjL2dpdGh1Yi5jb20vdGVsZXJpay9rZW5kby1jaGFydHMvc3JjL2dhdWdlcy9hcmMvcmFuZ2UtcG9pbnRlci5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9nYXVnZXMvYXJjL2FyYy1nYXVnZS5qcyIsIi9yb290L3NyYy9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tY2hhcnRzL3NyYy9jaGFydC9iYXNlLXRoZW1lLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBBUkMgPSBcImFyY1wiO1xuZXhwb3J0IGNvbnN0IEFYSVNfTEFCRUxfQ0xJQ0sgPSBcImF4aXNMYWJlbENsaWNrXCI7XG5leHBvcnQgY29uc3QgQkxBQ0sgPSBcIiMwMDBcIjtcbmV4cG9ydCBjb25zdCBCT1RUT00gPSBcImJvdHRvbVwiO1xuZXhwb3J0IGNvbnN0IENFTlRFUiA9IFwiY2VudGVyXCI7XG5leHBvcnQgY29uc3QgQ0lSQ0xFID0gXCJjaXJjbGVcIjtcbmV4cG9ydCBjb25zdCBDT09SRF9QUkVDSVNJT04gPSAzO1xuZXhwb3J0IGNvbnN0IENST1NTID0gXCJjcm9zc1wiO1xuZXhwb3J0IGNvbnN0IERBVEUgPSBcImRhdGVcIjtcbmV4cG9ydCBjb25zdCBERUZBVUxUX0ZPTlQgPSBcIjEycHggc2Fucy1zZXJpZlwiO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfSEVJR0hUID0gNDAwO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfUFJFQ0lTSU9OID0gMTA7XG5leHBvcnQgY29uc3QgREVGQVVMVF9XSURUSCA9IDYwMDtcbmV4cG9ydCBjb25zdCBFTkQgPSBcImVuZFwiO1xuZXhwb3J0IGNvbnN0IEZPUk1BVF9SRUdFWCA9IC9cXHtcXGQrOj8vO1xuZXhwb3J0IGNvbnN0IEhFSUdIVCA9IFwiaGVpZ2h0XCI7XG5leHBvcnQgY29uc3QgSElHSExJR0hUX1pJTkRFWCA9IDEwMDtcbmV4cG9ydCBjb25zdCBJTlNJREUgPSBcImluc2lkZVwiO1xuZXhwb3J0IGNvbnN0IExFRlQgPSBcImxlZnRcIjtcbmV4cG9ydCBjb25zdCBNQVhfVkFMVUUgPSBOdW1iZXIuTUFYX1ZBTFVFO1xuZXhwb3J0IGNvbnN0IE1JTl9WQUxVRSA9IC1OdW1iZXIuTUFYX1ZBTFVFO1xuZXhwb3J0IGNvbnN0IE5PTkUgPSBcIm5vbmVcIjtcbmV4cG9ydCBjb25zdCBOT1RFX0NMSUNLID0gXCJub3RlQ2xpY2tcIjtcbmV4cG9ydCBjb25zdCBOT1RFX0hPVkVSID0gXCJub3RlSG92ZXJcIjtcbmV4cG9ydCBjb25zdCBOT1RFX0xFQVZFID0gXCJub3RlTGVhdmVcIjtcbmV4cG9ydCBjb25zdCBPQkpFQ1QgPSBcIm9iamVjdFwiO1xuZXhwb3J0IGNvbnN0IE9VVFNJREUgPSBcIm91dHNpZGVcIjtcbmV4cG9ydCBjb25zdCBSSUdIVCA9IFwicmlnaHRcIjtcbmV4cG9ydCBjb25zdCBTVEFSVCA9IFwic3RhcnRcIjtcbmV4cG9ydCBjb25zdCBTVFJJTkcgPSBcInN0cmluZ1wiO1xuZXhwb3J0IGNvbnN0IFRPUCA9IFwidG9wXCI7XG5leHBvcnQgY29uc3QgVFJJQU5HTEUgPSBcInRyaWFuZ2xlXCI7XG5leHBvcnQgY29uc3QgVkFMVUUgPSBcInZhbHVlXCI7XG5leHBvcnQgY29uc3QgV0hJVEUgPSBcIiNmZmZcIjtcbmV4cG9ydCBjb25zdCBXSURUSCA9IFwid2lkdGhcIjtcbmV4cG9ydCBjb25zdCBYID0gXCJ4XCI7XG5leHBvcnQgY29uc3QgWSA9IFwieVwiO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfU0VSSUVTX09QQUNJVFkgPSAxO1xuXG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0FycmF5KHZhbHVlKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpO1xufSIsImltcG9ydCBpc0FycmF5IGZyb20gJy4vaXMtYXJyYXknO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRDbGFzcyhlbGVtZW50LCBjbGFzc2VzKSB7XG4gICAgY29uc3QgY2xhc3NBcnJheSA9IGlzQXJyYXkoY2xhc3NlcykgPyBjbGFzc2VzIDogWyBjbGFzc2VzIF07XG5cbiAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBjbGFzc0FycmF5Lmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgY29uc3QgY2xhc3NOYW1lID0gY2xhc3NBcnJheVtpZHhdO1xuICAgICAgICBpZiAoZWxlbWVudC5jbGFzc05hbWUuaW5kZXhPZihjbGFzc05hbWUpID09PSAtMSkge1xuICAgICAgICAgICAgZWxlbWVudC5jbGFzc05hbWUgKz0gXCIgXCIgKyBjbGFzc05hbWU7XG4gICAgICAgIH1cbiAgICB9XG59IiwiY29uc3QgU1BBQ0VfUkVHRVggPSAvXFxzKy9nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW1vdmVDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpIHtcbiAgICBpZiAoZWxlbWVudCAmJiBlbGVtZW50LmNsYXNzTmFtZSkge1xuICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IGVsZW1lbnQuY2xhc3NOYW1lLnJlcGxhY2UoY2xhc3NOYW1lLCBcIlwiKS5yZXBsYWNlKFNQQUNFX1JFR0VYLCBcIiBcIik7XG4gICAgfVxufSIsImltcG9ydCB7IGRyYXdpbmcgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tZHJhd2luZyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFsaWduUGF0aFRvUGl4ZWwocGF0aCkge1xuICAgIGxldCBvZmZzZXQgPSAwLjU7XG4gICAgaWYgKHBhdGgub3B0aW9ucy5zdHJva2UgJiYgZHJhd2luZy51dGlsLmRlZmluZWQocGF0aC5vcHRpb25zLnN0cm9rZS53aWR0aCkpIHtcbiAgICAgICAgaWYgKHBhdGgub3B0aW9ucy5zdHJva2Uud2lkdGggJSAyID09PSAwKSB7XG4gICAgICAgICAgICBvZmZzZXQgPSAwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXRoLnNlZ21lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHBhdGguc2VnbWVudHNbaV0uYW5jaG9yKCkucm91bmQoMCkudHJhbnNsYXRlKG9mZnNldCwgb2Zmc2V0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGF0aDtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjbG9ja3dpc2UoYW5nbGUxLCBhbmdsZTIpIHtcbiAgICAvLyBUcnVlIGlmIGFuZ2xlMiBpcyBjbG9ja3dpc2Ugb2YgYW5nbGUxXG4gICAgLy8gYXNzdW1pbmcgYW5nbGVzIGdyb3cgaW4gY2xvY2std2lzZSBkaXJlY3Rpb25cbiAgICAvLyAoYXMgaW4gdGhlIHBpZSBhbmQgcmFkYXIgY2hhcnRzKVxuICAgIHJldHVybiAtYW5nbGUxLnggKiBhbmdsZTIueSArIGFuZ2xlMS55ICogYW5nbGUyLnggPCAwO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIiAmJiAhaXNOYU4odmFsdWUpO1xufSIsImltcG9ydCB7IFNUUklORyB9IGZyb20gJy4vY29uc3RhbnRzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBTVFJJTkc7XG59IiwiaW1wb3J0IGlzTnVtYmVyIGZyb20gJy4vaXMtbnVtYmVyJztcbmltcG9ydCBpc1N0cmluZyBmcm9tICcuL2lzLXN0cmluZyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbnZlcnRhYmxlVG9OdW1iZXIodmFsdWUpIHtcbiAgICByZXR1cm4gaXNOdW1iZXIodmFsdWUpIHx8IChpc1N0cmluZyh2YWx1ZSkgJiYgaXNGaW5pdGUodmFsdWUpKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0Z1bmN0aW9uKGZuKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBmbiA9PT0gXCJmdW5jdGlvblwiO1xufSIsImltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4vaXMtZnVuY3Rpb24nO1xuXG5jb25zdCBPQkpFQ1QgPSBcIm9iamVjdFwiO1xuY29uc3QgVU5ERUZJTkVEID0gXCJ1bmRlZmluZWRcIjtcblxuZnVuY3Rpb24gZGVlcEV4dGVuZE9uZShkZXN0aW5hdGlvbiwgc291cmNlKSB7XG5cbiAgICBmb3IgKGxldCBwcm9wZXJ0eSBpbiBzb3VyY2UpIHtcbiAgICAgICAgbGV0IHByb3BWYWx1ZSA9IHNvdXJjZVtwcm9wZXJ0eV07XG4gICAgICAgIGxldCBwcm9wVHlwZSA9IHR5cGVvZiBwcm9wVmFsdWU7XG5cbiAgICAgICAgbGV0IHByb3BJbml0O1xuICAgICAgICBpZiAocHJvcFR5cGUgPT09IE9CSkVDVCAmJiBwcm9wVmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHByb3BJbml0ID0gcHJvcFZhbHVlLmNvbnN0cnVjdG9yO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvcEluaXQgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByb3BJbml0ICYmIHByb3BJbml0ICE9PSBBcnJheSkge1xuXG4gICAgICAgICAgICBpZiAocHJvcFZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uW3Byb3BlcnR5XSA9IG5ldyBEYXRlKHByb3BWYWx1ZS5nZXRUaW1lKCkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc0Z1bmN0aW9uKHByb3BWYWx1ZS5jbG9uZSkpIHtcbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbltwcm9wZXJ0eV0gPSBwcm9wVmFsdWUuY2xvbmUoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbGV0IGRlc3RQcm9wID0gZGVzdGluYXRpb25bcHJvcGVydHldO1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgKGRlc3RQcm9wKSA9PT0gT0JKRUNUKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uW3Byb3BlcnR5XSA9IGRlc3RQcm9wIHx8IHt9O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uW3Byb3BlcnR5XSA9IHt9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkZWVwRXh0ZW5kT25lKGRlc3RpbmF0aW9uW3Byb3BlcnR5XSwgcHJvcFZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChwcm9wVHlwZSAhPT0gVU5ERUZJTkVEKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbltwcm9wZXJ0eV0gPSBwcm9wVmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGVzdGluYXRpb247XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlZXBFeHRlbmQoZGVzdGluYXRpb24pIHtcbiAgICBjb25zdCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xuXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBkZWVwRXh0ZW5kT25lKGRlc3RpbmF0aW9uLCBhcmd1bWVudHNbaV0pO1xuICAgIH1cblxuICAgIHJldHVybiBkZXN0aW5hdGlvbjtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCI7XG59IiwiaW1wb3J0IGlzTnVtYmVyIGZyb20gJy4vaXMtbnVtYmVyJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3R5bGVWYWx1ZSh2YWx1ZSkge1xuICAgIGlmIChpc051bWJlcih2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlICsgXCJweFwiO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG59IiwiaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXMtb2JqZWN0JztcbmltcG9ydCBpc0FycmF5IGZyb20gJy4vaXMtYXJyYXknO1xuaW1wb3J0IGlzU3RyaW5nIGZyb20gJy4vaXMtc3RyaW5nJztcbmltcG9ydCBzdHlsZVZhbHVlIGZyb20gJy4vc3R5bGUtdmFsdWUnO1xuXG5jb25zdCBTSVpFX1NUWUxFU19SRUdFWCA9IC93aWR0aHxoZWlnaHR8dG9wfGxlZnR8Ym90dG9tfHJpZ2h0L2k7XG5cbmZ1bmN0aW9uIGlzU2l6ZUZpZWxkKGZpZWxkKSB7XG4gICAgcmV0dXJuIFNJWkVfU1RZTEVTX1JFR0VYLnRlc3QoZmllbGQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBlbGVtZW50U3R5bGVzKGVsZW1lbnQsIHN0eWxlcykge1xuICAgIGNvbnN0IHN0eWxlc0FycmF5ID0gaXNTdHJpbmcoc3R5bGVzKSA/IFsgc3R5bGVzIF0gOiBzdHlsZXM7XG5cbiAgICBpZiAoaXNBcnJheShzdHlsZXNBcnJheSkpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgICAgIGNvbnN0IHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG5cbiAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgc3R5bGVzQXJyYXkubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgbGV0IGZpZWxkID0gc3R5bGVzQXJyYXlbaWR4XTtcbiAgICAgICAgICAgIHJlc3VsdFtmaWVsZF0gPSBpc1NpemVGaWVsZChmaWVsZCkgPyBwYXJzZUZsb2F0KHN0eWxlW2ZpZWxkXSkgOiBzdHlsZVtmaWVsZF07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gZWxzZSBpZiAoaXNPYmplY3Qoc3R5bGVzKSkge1xuICAgICAgICBmb3IgKGxldCBmaWVsZCBpbiBzdHlsZXMpIHtcbiAgICAgICAgICAgIGVsZW1lbnQuc3R5bGVbZmllbGRdID0gc3R5bGVWYWx1ZShzdHlsZXNbZmllbGRdKTtcbiAgICAgICAgfVxuICAgIH1cbn0iLCJpbXBvcnQgeyBUT1AsIEJPVFRPTSwgTEVGVCwgUklHSFQgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFNwYWNpbmcodmFsdWUsIGRlZmF1bHRTcGFjaW5nID0gMCkge1xuICAgIGNvbnN0IHNwYWNpbmcgPSB7IHRvcDogMCwgcmlnaHQ6IDAsIGJvdHRvbTogMCwgbGVmdDogMCB9O1xuXG4gICAgaWYgKHR5cGVvZih2YWx1ZSkgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgc3BhY2luZ1tUT1BdID0gc3BhY2luZ1tSSUdIVF0gPSBzcGFjaW5nW0JPVFRPTV0gPSBzcGFjaW5nW0xFRlRdID0gdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc3BhY2luZ1tUT1BdID0gdmFsdWVbVE9QXSB8fCBkZWZhdWx0U3BhY2luZztcbiAgICAgICAgc3BhY2luZ1tSSUdIVF0gPSB2YWx1ZVtSSUdIVF0gfHwgZGVmYXVsdFNwYWNpbmc7XG4gICAgICAgIHNwYWNpbmdbQk9UVE9NXSA9IHZhbHVlW0JPVFRPTV0gfHwgZGVmYXVsdFNwYWNpbmc7XG4gICAgICAgIHNwYWNpbmdbTEVGVF0gPSB2YWx1ZVtMRUZUXSB8fCBkZWZhdWx0U3BhY2luZztcbiAgICB9XG5cbiAgICByZXR1cm4gc3BhY2luZztcbn0iLCJjb25zdCBkZWZhdWx0SW1wbGVtZW50YXRpb24gPSB7XG4gICAgZm9ybWF0OiAoZm9ybWF0LCB2YWx1ZSkgPT4gdmFsdWUsXG5cbiAgICB0b1N0cmluZzogKHZhbHVlKSA9PiB2YWx1ZSxcblxuICAgIHBhcnNlRGF0ZTogKHZhbHVlKSA9PiBuZXcgRGF0ZSh2YWx1ZSksXG5cbiAgICBmaXJzdERheTogKCkgPT4gMFxufTtcblxubGV0IGN1cnJlbnQgPSBkZWZhdWx0SW1wbGVtZW50YXRpb247XG5cbmNsYXNzIEludGxTZXJ2aWNlIHtcbiAgICBzdGF0aWMgcmVnaXN0ZXIodXNlckltcGxlbWVudGF0aW9uKSB7XG4gICAgICAgIGN1cnJlbnQgPSB1c2VySW1wbGVtZW50YXRpb247XG4gICAgfVxuXG4gICAgc3RhdGljIGdldCBpbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnQ7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBJbnRsU2VydmljZTtcbiIsImltcG9ydCBJbnRsU2VydmljZSBmcm9tICcuL2ludGwtc2VydmljZSc7XG5pbXBvcnQgeyBGT1JNQVRfUkVHRVggfSBmcm9tICcuLi9jb21tb24vY29uc3RhbnRzJztcbmltcG9ydCB7IGlzU3RyaW5nIH0gZnJvbSAnLi4vY29tbW9uJztcblxuY29uc3QgRk9STUFUX1JFUExBQ0VfUkVHRVggPSAvXFx7KFxcZCspKDpbXlxcfV0rKT9cXH0vZztcblxuY2xhc3MgRm9ybWF0U2VydmljZSB7XG4gICAgY29uc3RydWN0b3IoaW50bFNlcnZpY2UpIHtcbiAgICAgICAgdGhpcy5faW50bFNlcnZpY2UgPSBpbnRsU2VydmljZTtcbiAgICB9XG5cbiAgICBnZXQgaW50bCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludGxTZXJ2aWNlIHx8IEludGxTZXJ2aWNlLmltcGxlbWVudGF0aW9uO1xuICAgIH1cblxuICAgIHNldCBpbnRsKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2ludGxTZXJ2aWNlID0gdmFsdWU7XG4gICAgfVxuXG4gICAgYXV0byhmb3JtYXRTdHJpbmcsIC4uLnZhbHVlcykge1xuICAgICAgICBjb25zdCBpbnRsID0gdGhpcy5pbnRsO1xuXG4gICAgICAgIGlmIChpc1N0cmluZyhmb3JtYXRTdHJpbmcpICYmIGZvcm1hdFN0cmluZy5tYXRjaChGT1JNQVRfUkVHRVgpKSB7XG4gICAgICAgICAgICByZXR1cm4gaW50bC5mb3JtYXQoZm9ybWF0U3RyaW5nLCAuLi52YWx1ZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGludGwudG9TdHJpbmcodmFsdWVzWzBdLCBmb3JtYXRTdHJpbmcpO1xuICAgIH1cblxuICAgIGxvY2FsZUF1dG8oZm9ybWF0U3RyaW5nLCB2YWx1ZXMsIGxvY2FsZSkge1xuICAgICAgICBjb25zdCBpbnRsID0gdGhpcy5pbnRsO1xuICAgICAgICBsZXQgcmVzdWx0O1xuXG4gICAgICAgIGlmIChpc1N0cmluZyhmb3JtYXRTdHJpbmcpICYmIGZvcm1hdFN0cmluZy5tYXRjaChGT1JNQVRfUkVHRVgpKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBmb3JtYXRTdHJpbmcucmVwbGFjZShGT1JNQVRfUkVQTEFDRV9SRUdFWCwgZnVuY3Rpb24obWF0Y2gsIGluZGV4LCBwbGFjZWhvbGRlckZvcm1hdCkge1xuICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IHZhbHVlc1twYXJzZUludChpbmRleCwgMTApXTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBpbnRsLnRvU3RyaW5nKHZhbHVlLCBwbGFjZWhvbGRlckZvcm1hdCA/IHBsYWNlaG9sZGVyRm9ybWF0LnN1YnN0cmluZygxKSA6IFwiXCIsIGxvY2FsZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGludGwudG9TdHJpbmcodmFsdWVzWzBdLCBmb3JtYXRTdHJpbmcsIGxvY2FsZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRm9ybWF0U2VydmljZTsiLCJpbXBvcnQgSW50bFNlcnZpY2UgZnJvbSAnLi9pbnRsLXNlcnZpY2UnO1xuaW1wb3J0IEZvcm1hdFNlcnZpY2UgZnJvbSAnLi9mb3JtYXQtc2VydmljZSc7XG5cbmNsYXNzIENoYXJ0U2VydmljZSB7XG4gICAgY29uc3RydWN0b3IoY2hhcnQsIGNvbnRleHQgPSB7fSkge1xuICAgICAgICB0aGlzLl9pbnRsU2VydmljZSA9IGNvbnRleHQuaW50bFNlcnZpY2U7XG4gICAgICAgIHRoaXMuc2VuZGVyID0gY29udGV4dC5zZW5kZXIgfHwgY2hhcnQ7XG4gICAgICAgIHRoaXMuZm9ybWF0ID0gbmV3IEZvcm1hdFNlcnZpY2UoY29udGV4dC5pbnRsU2VydmljZSk7XG4gICAgICAgIHRoaXMuY2hhcnQgPSBjaGFydDtcbiAgICAgICAgdGhpcy5ydGwgPSBCb29sZWFuKGNvbnRleHQucnRsKTtcbiAgICB9XG5cbiAgICBnZXQgaW50bCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludGxTZXJ2aWNlIHx8IEludGxTZXJ2aWNlLmltcGxlbWVudGF0aW9uO1xuICAgIH1cblxuICAgIHNldCBpbnRsKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2ludGxTZXJ2aWNlID0gdmFsdWU7XG4gICAgICAgIHRoaXMuZm9ybWF0LmludGwgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBub3RpZnkobmFtZSwgYXJncykge1xuICAgICAgICBpZiAodGhpcy5jaGFydCkge1xuICAgICAgICAgICAgdGhpcy5jaGFydC50cmlnZ2VyKG5hbWUsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaXNQYW5uYWJsZShheGlzKSB7XG4gICAgICAgIGNvbnN0IHBhbm5hYmxlID0gKCh0aGlzLmNoYXJ0IHx8IHt9KS5vcHRpb25zIHx8IHt9KS5wYW5uYWJsZTtcbiAgICAgICAgcmV0dXJuIHBhbm5hYmxlICYmIHBhbm5hYmxlLmxvY2sgIT09IGF4aXM7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDaGFydFNlcnZpY2U7IiwibGV0IGN1cnJlbnQ7XG5cbmNsYXNzIERvbUV2ZW50c0J1aWxkZXIge1xuICAgIHN0YXRpYyByZWdpc3Rlcih1c2VySW1wbGVtZW50YXRpb24pIHtcbiAgICAgICAgY3VycmVudCA9IHVzZXJJbXBsZW1lbnRhdGlvbjtcbiAgICB9XG5cbiAgICBzdGF0aWMgY3JlYXRlKGVsZW1lbnQsIGV2ZW50cykge1xuICAgICAgICBpZiAoY3VycmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnQuY3JlYXRlKGVsZW1lbnQsIGV2ZW50cyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IERvbUV2ZW50c0J1aWxkZXI7XG4iLCJsZXQgY3VycmVudCA9IHtcbiAgICBjb21waWxlOiBmdW5jdGlvbih0ZW1wbGF0ZSkge1xuICAgICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgfVxufTtcblxuY2xhc3MgVGVtcGxhdGVTZXJ2aWNlIHtcbiAgICBzdGF0aWMgcmVnaXN0ZXIodXNlckltcGxlbWVudGF0aW9uKSB7XG4gICAgICAgIGN1cnJlbnQgPSB1c2VySW1wbGVtZW50YXRpb247XG4gICAgfVxuXG4gICAgc3RhdGljIGNvbXBpbGUodGVtcGxhdGUpIHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnQuY29tcGlsZSh0ZW1wbGF0ZSk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBUZW1wbGF0ZVNlcnZpY2U7XG4iLCJpbXBvcnQgeyBUZW1wbGF0ZVNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcyc7XG5pbXBvcnQgaXNGdW5jdGlvbiBmcm9tICcuL2lzLWZ1bmN0aW9uJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VGVtcGxhdGUob3B0aW9ucyA9IHt9KSB7XG4gICAgbGV0IHRlbXBsYXRlO1xuICAgIGlmIChvcHRpb25zLnRlbXBsYXRlKSB7XG4gICAgICAgIG9wdGlvbnMudGVtcGxhdGUgPSB0ZW1wbGF0ZSA9IFRlbXBsYXRlU2VydmljZS5jb21waWxlKG9wdGlvbnMudGVtcGxhdGUpO1xuICAgIH0gZWxzZSBpZiAoaXNGdW5jdGlvbihvcHRpb25zLmNvbnRlbnQpKSB7XG4gICAgICAgIHRlbXBsYXRlID0gb3B0aW9ucy5jb250ZW50O1xuICAgIH1cblxuICAgIHJldHVybiB0ZW1wbGF0ZTtcbn0iLCJpbXBvcnQgeyBkcmF3aW5nIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWRyYXdpbmcnO1xuXG5jb25zdCBGSUVMRF9SRUdFWCA9IC9cXFsoPzooXFxkKyl8WydcIl0oLio/KVsnXCJdKVxcXXwoKD86KD8hXFxbLio/XFxdfFxcLikuKSspL2c7XG5jb25zdCBnZXR0ZXJDYWNoZSA9IHt9O1xuXG5nZXR0ZXJDYWNoZVsndW5kZWZpbmVkJ10gPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gb2JqO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0dGVyKGZpZWxkKSB7XG4gICAgaWYgKGdldHRlckNhY2hlW2ZpZWxkXSkge1xuICAgICAgICByZXR1cm4gZ2V0dGVyQ2FjaGVbZmllbGRdO1xuICAgIH1cblxuICAgIGNvbnN0IGZpZWxkcyA9IFtdO1xuICAgIGZpZWxkLnJlcGxhY2UoRklFTERfUkVHRVgsIGZ1bmN0aW9uKG1hdGNoLCBpbmRleCwgaW5kZXhBY2Nlc3NvciwgZmllbGQpIHtcbiAgICAgICAgZmllbGRzLnB1c2goZHJhd2luZy51dGlsLmRlZmluZWQoaW5kZXgpID8gaW5kZXggOiAoaW5kZXhBY2Nlc3NvciB8fCBmaWVsZCkpO1xuICAgIH0pO1xuXG4gICAgZ2V0dGVyQ2FjaGVbZmllbGRdID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBvYmo7XG4gICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGZpZWxkcy5sZW5ndGggJiYgcmVzdWx0OyBpZHgrKykge1xuICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0W2ZpZWxkc1tpZHhdXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIHJldHVybiBnZXR0ZXJDYWNoZVtmaWVsZF07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ3JlcChhcnJheSwgY2FsbGJhY2spIHtcbiAgICBjb25zdCBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgbGVuZ3RoOyBpZHgrKykge1xuICAgICAgICBpZiAoY2FsbGJhY2soYXJyYXlbaWR4XSkpIHtcbiAgICAgICAgICAgIHJlc3VsdCAucHVzaChhcnJheVtpZHhdKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGFzQ2xhc3NlcyhlbGVtZW50LCBjbGFzc05hbWVzKSB7XG4gICAgaWYgKGVsZW1lbnQuY2xhc3NOYW1lKSB7XG4gICAgICAgIGNvbnN0IG5hbWVzID0gY2xhc3NOYW1lcy5zcGxpdChcIiBcIik7XG4gICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IG5hbWVzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgICAgIGlmIChlbGVtZW50LmNsYXNzTmFtZS5pbmRleE9mKG5hbWVzW2lkeF0pICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufSIsIlxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSGFzaE1hcCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuX21hcCA9IHt9O1xuICAgIH1cblxuICAgIGdldChuYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYXBbdGhpcy5fa2V5KG5hbWUpXTtcbiAgICB9XG5cbiAgICBzZXQobmFtZSwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5fbWFwW3RoaXMuX2tleShuYW1lKV0gPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBfa2V5KG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIG5hbWUgaW5zdGFuY2VvZiBEYXRlID8gbmFtZS5nZXRUaW1lKCkgOiBuYW1lO1xuICAgIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpbkFycmF5KHZhbHVlLCBhcnJheSkge1xuICAgIGlmIChhcnJheSkge1xuICAgICAgICByZXR1cm4gYXJyYXkuaW5kZXhPZih2YWx1ZSkgIT09IC0xO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBkcmF3aW5nIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWRyYXdpbmcnO1xuaW1wb3J0IHsgQ09PUkRfUFJFQ0lTSU9OIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpbnRlcnBvbGF0ZVZhbHVlKHN0YXJ0LCBlbmQsIHByb2dyZXNzKSB7XG4gICAgcmV0dXJuIGRyYXdpbmcudXRpbC5yb3VuZChzdGFydCArIChlbmQgLSBzdGFydCkgKiBwcm9ncmVzcywgQ09PUkRfUFJFQ0lTSU9OKTtcbn0iLCJpbXBvcnQgZGVlcEV4dGVuZCBmcm9tICcuL2RlZXAtZXh0ZW5kJztcblxuY29uc3QgVFJJR0dFUiA9ICd0cmlnZ2VyJztcblxuY2xhc3MgSW5zdGFuY2VPYnNlcnZlciB7XG4gICAgY29uc3RydWN0b3Iob2JzZXJ2ZXIsIGhhbmRsZXJzKSB7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXIgPSBvYnNlcnZlcjtcbiAgICAgICAgdGhpcy5oYW5kbGVyTWFwID0gZGVlcEV4dGVuZCh7fSwgdGhpcy5oYW5kbGVyTWFwLCBoYW5kbGVycyk7XG4gICAgfVxuXG4gICAgdHJpZ2dlcihuYW1lLCBhcmdzKSB7XG4gICAgICAgIGNvbnN0IHsgb2JzZXJ2ZXIsIGhhbmRsZXJNYXAgfSA9IHRoaXM7XG4gICAgICAgIGxldCBpc0RlZmF1bHRQcmV2ZW50ZWQ7XG4gICAgICAgIGlmIChoYW5kbGVyTWFwW25hbWVdKSB7XG4gICAgICAgICAgICBpc0RlZmF1bHRQcmV2ZW50ZWQgPSB0aGlzLmNhbGxPYnNlcnZlcihoYW5kbGVyTWFwW25hbWVdLCBhcmdzKTtcbiAgICAgICAgfSBlbHNlIGlmIChvYnNlcnZlcltUUklHR0VSXSkge1xuICAgICAgICAgICAgaXNEZWZhdWx0UHJldmVudGVkID0gdGhpcy5jYWxsT2JzZXJ2ZXIoVFJJR0dFUiwgbmFtZSwgYXJncyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaXNEZWZhdWx0UHJldmVudGVkO1xuICAgIH1cblxuICAgIGNhbGxPYnNlcnZlcihmbk5hbWUsIC4uLmFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub2JzZXJ2ZXJbZm5OYW1lXS5hcHBseSh0aGlzLm9ic2VydmVyLCBhcmdzKTtcbiAgICB9XG5cbiAgICByZXF1aXJlc0hhbmRsZXJzKG5hbWVzKSB7XG4gICAgICAgIGlmICh0aGlzLm9ic2VydmVyLnJlcXVpcmVzSGFuZGxlcnMpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm9ic2VydmVyLnJlcXVpcmVzSGFuZGxlcnMobmFtZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgbmFtZXMubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMuaGFuZGxlck1hcFtuYW1lc1tpZHhdXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBJbnN0YW5jZU9ic2VydmVyOyIsImltcG9ydCB7IGRyYXdpbmcgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tZHJhd2luZyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1hcChhcnJheSwgY2FsbGJhY2spIHtcbiAgICBjb25zdCBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgbGVuZ3RoOyBpZHgrKykge1xuICAgICAgICBsZXQgdmFsdWUgPSBjYWxsYmFjayhhcnJheVtpZHhdKTtcbiAgICAgICAgaWYgKGRyYXdpbmcudXRpbC5kZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59IiwiaW1wb3J0IHsgZHJhd2luZyB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1kcmF3aW5nJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbW91c2V3aGVlbERlbHRhKGUpIHtcbiAgICBsZXQgZGVsdGEgPSAwO1xuXG4gICAgaWYgKGUud2hlZWxEZWx0YSkge1xuICAgICAgICBkZWx0YSA9IC1lLndoZWVsRGVsdGEgLyAxMjA7XG4gICAgICAgIGRlbHRhID0gZGVsdGEgPiAwID8gTWF0aC5jZWlsKGRlbHRhKSA6IE1hdGguZmxvb3IoZGVsdGEpO1xuICAgIH1cblxuICAgIGlmIChlLmRldGFpbCkge1xuICAgICAgICBkZWx0YSA9IGRyYXdpbmcudXRpbC5yb3VuZChlLmRldGFpbCAvIDMpO1xuICAgIH1cblxuICAgIHJldHVybiBkZWx0YTtcbn0iLCJpbXBvcnQgeyBkcmF3aW5nLCBDbGFzcywgbG9nVG9Db25zb2xlIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWRyYXdpbmcnO1xuXG5jb25zdCB7IGFwcGVuZCwgYmluZEV2ZW50cywgZGVmaW5lZCwgZGVnLCBlbGVtZW50T2Zmc2V0LCBlbGVtZW50U2l6ZSwgZXZlbnRFbGVtZW50LCBldmVudENvb3JkaW5hdGVzLCBsYXN0LCBsaW1pdFZhbHVlLCBvYmplY3RLZXksIHJhZCwgcm91bmQsIHVuYmluZEV2ZW50cywgdmFsdWVPckRlZmF1bHQgfSA9IGRyYXdpbmcudXRpbDtcblxuZXhwb3J0IHsgYXBwZW5kLCBiaW5kRXZlbnRzLCBDbGFzcywgZGVmaW5lZCwgZGVnLCBlbGVtZW50T2Zmc2V0LCBlbGVtZW50U2l6ZSwgZXZlbnRFbGVtZW50LCBldmVudENvb3JkaW5hdGVzLCBsYXN0LCBsaW1pdFZhbHVlLCBsb2dUb0NvbnNvbGUsIG9iamVjdEtleSwgcmFkLCByb3VuZCwgdW5iaW5kRXZlbnRzLCB2YWx1ZU9yRGVmYXVsdCB9OyIsImltcG9ydCB7IGxvZ1RvQ29uc29sZSB9IGZyb20gJy4uL2RyYXdpbmctdXRpbHMnO1xuXG5jbGFzcyBGb250TG9hZGVyIHtcbiAgICBzdGF0aWMgZmV0Y2hGb250cyhvcHRpb25zLCBmb250cywgc3RhdGUgPSB7IGRlcHRoOiAwIH0pIHtcbiAgICAgICAgY29uc3QgTUFYX0RFUFRIID0gNTtcblxuICAgICAgICBpZiAoIW9wdGlvbnMgfHwgc3RhdGUuZGVwdGggPiBNQVhfREVQVEggfHwgIWRvY3VtZW50LmZvbnRzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBPYmplY3Qua2V5cyhvcHRpb25zKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBvcHRpb25zW2tleV07XG4gICAgICAgICAgICBpZiAoa2V5ID09PSBcImRhdGFTb3VyY2VcIiB8fCBrZXlbMF0gPT09IFwiJFwiIHx8ICF2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGtleSA9PT0gXCJmb250XCIpIHtcbiAgICAgICAgICAgICAgICBmb250cy5wdXNoKHZhbHVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgc3RhdGUuZGVwdGgrKztcbiAgICAgICAgICAgICAgICBGb250TG9hZGVyLmZldGNoRm9udHModmFsdWUsIGZvbnRzLCBzdGF0ZSk7XG4gICAgICAgICAgICAgICAgc3RhdGUuZGVwdGgtLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGxvYWRGb250cyhmb250cywgY2FsbGJhY2spIHtcbiAgICAgICAgbGV0IHByb21pc2VzID0gW107XG5cbiAgICAgICAgaWYgKGZvbnRzLmxlbmd0aCA+IDAgJiYgZG9jdW1lbnQuZm9udHMpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcHJvbWlzZXMgPSBmb250cy5tYXAoZnVuY3Rpb24oZm9udCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9jdW1lbnQuZm9udHMubG9hZChmb250KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAvLyBTaWxlbmNlIGZvbnQtbG9hZGluZyBlcnJvcnNcbiAgICAgICAgICAgICAgICBsb2dUb0NvbnNvbGUoZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKGNhbGxiYWNrLCBjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIHByZWxvYWRGb250cyhvcHRpb25zLCBjYWxsYmFjaykge1xuICAgICAgICBjb25zdCBmb250cyA9IFtdO1xuICAgICAgICBGb250TG9hZGVyLmZldGNoRm9udHMob3B0aW9ucywgZm9udHMpO1xuXG4gICAgICAgIEZvbnRMb2FkZXIubG9hZEZvbnRzKGZvbnRzLCBjYWxsYmFjayk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBGb250TG9hZGVyOyIsImltcG9ydCBkZWVwRXh0ZW5kIGZyb20gJy4vZGVlcC1leHRlbmQnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXREZWZhdWx0T3B0aW9ucyh0eXBlLCBvcHRpb25zKSB7XG4gICAgY29uc3QgcHJvdG8gPSB0eXBlLnByb3RvdHlwZTtcbiAgICBpZiAocHJvdG8ub3B0aW9ucykge1xuICAgICAgICBwcm90by5vcHRpb25zID0gZGVlcEV4dGVuZCh7fSwgcHJvdG8ub3B0aW9ucywgb3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcHJvdG8ub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxufSIsImltcG9ydCB7IE1JTl9WQUxVRSwgTUFYX1ZBTFVFIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzcGFyc2VBcnJheUxpbWl0cyhhcnIpIHtcbiAgICBsZXQgbWluID0gTUFYX1ZBTFVFO1xuICAgIGxldCBtYXggPSBNSU5fVkFMVUU7XG5cbiAgICBmb3IgKGxldCBpZHggPSAwLCBsZW5ndGggPSBhcnIubGVuZ3RoOyBpZHggPCBsZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gYXJyW2lkeF07XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiBpc0Zpbml0ZSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIG1pbiA9IE1hdGgubWluKG1pbiwgdmFsdWUpO1xuICAgICAgICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBtaW46IG1pbiA9PT0gTUFYX1ZBTFVFID8gdW5kZWZpbmVkIDogbWluLFxuICAgICAgICBtYXg6IG1heCA9PT0gTUlOX1ZBTFVFID8gdW5kZWZpbmVkIDogbWF4XG4gICAgfTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmaW5kKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBhcnJheVtpXTtcbiAgICAgICAgaWYgKHByZWRpY2F0ZShpdGVtLCBpLCBhcnJheSkpIHtcbiAgICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgZ2VvbWV0cnkgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tZHJhd2luZyc7XG5cbmNvbnN0IE1hdHJpeCA9IGdlb21ldHJ5Lk1hdHJpeDtcbmNvbnN0IG1hdHJpeFJlZ2V4cCA9IC9tYXRyaXhcXCgoLiopXFwpLztcblxuZnVuY3Rpb24gcGFyc2VNYXRyaXgobWF0cml4U3RyaW5nKSB7XG4gICAgY29uc3QgbWF0Y2ggPSBtYXRyaXhTdHJpbmcubWF0Y2gobWF0cml4UmVnZXhwKTtcbiAgICBpZiAobWF0Y2ggPT09IG51bGwgfHwgbWF0Y2gubGVuZ3RoICE9PSAyKSB7XG4gICAgICAgIHJldHVybiBNYXRyaXgudW5pdCgpO1xuICAgIH1cblxuICAgIGNvbnN0IG1lbWJlcnMgPSBtYXRjaFsxXS5zcGxpdCgnLCcpLm1hcCh4ID0+IHBhcnNlRmxvYXQoeCkpO1xuICAgIHJldHVybiBuZXcgTWF0cml4KC4uLm1lbWJlcnMpO1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm1NYXRyaXgoZWxlbWVudCkge1xuICAgIGNvbnN0IHRyYW5zZm9ybSA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkudHJhbnNmb3JtO1xuXG4gICAgaWYgKHRyYW5zZm9ybSA9PT0gJ25vbmUnKSB7XG4gICAgICAgIHJldHVybiBNYXRyaXgudW5pdCgpO1xuICAgIH1cblxuICAgIHJldHVybiBwYXJzZU1hdHJpeCh0cmFuc2Zvcm0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBlbGVtZW50U2NhbGUoZWxlbWVudCkge1xuICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICByZXR1cm4gTWF0cml4LnVuaXQoKTtcbiAgICB9XG5cbiAgICBsZXQgbWF0cml4ID0gdHJhbnNmb3JtTWF0cml4KGVsZW1lbnQpO1xuICAgIGxldCBwYXJlbnQgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4gICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgICBjb25zdCBwYXJlbnRNYXRyaXggPSB0cmFuc2Zvcm1NYXRyaXgocGFyZW50KTtcbiAgICAgICAgbWF0cml4ID0gbWF0cml4Lm11bHRpcGx5Q29weShwYXJlbnRNYXRyaXgpO1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50RWxlbWVudDtcbiAgICB9XG5cbiAgICBtYXRyaXguYiA9IG1hdHJpeC5jID0gbWF0cml4LmUgPSBtYXRyaXguZiA9IDA7XG4gICAgcmV0dXJuIG1hdHJpeDtcbn1cbiIsImltcG9ydCB7IERFRkFVTFRfUFJFQ0lTSU9OIH0gZnJvbSAnLi4vLi4vY29tbW9uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyByb3VuZCB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGF1dG9NYWpvclVuaXQobWluLCBtYXgpIHtcbiAgICBsZXQgZGlmZiA9IHJvdW5kKG1heCAtIG1pbiwgREVGQVVMVF9QUkVDSVNJT04gLSAxKTtcblxuICAgIGlmIChkaWZmID09PSAwKSB7XG4gICAgICAgIGlmIChtYXggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiAwLjE7XG4gICAgICAgIH1cblxuICAgICAgICBkaWZmID0gTWF0aC5hYnMobWF4KTtcbiAgICB9XG5cbiAgICBjb25zdCBzY2FsZSA9IE1hdGgucG93KDEwLCBNYXRoLmZsb29yKE1hdGgubG9nKGRpZmYpIC8gTWF0aC5sb2coMTApKSk7XG4gICAgY29uc3QgcmVsYXRpdmVWYWx1ZSA9IHJvdW5kKChkaWZmIC8gc2NhbGUpLCBERUZBVUxUX1BSRUNJU0lPTik7XG4gICAgbGV0IHNjYWxlTXVsdGlwbGllciA9IDE7XG5cbiAgICBpZiAocmVsYXRpdmVWYWx1ZSA8IDEuOTA0NzYyKSB7XG4gICAgICAgIHNjYWxlTXVsdGlwbGllciA9IDAuMjtcbiAgICB9IGVsc2UgaWYgKHJlbGF0aXZlVmFsdWUgPCA0Ljc2MTkwNCkge1xuICAgICAgICBzY2FsZU11bHRpcGxpZXIgPSAwLjU7XG4gICAgfSBlbHNlIGlmIChyZWxhdGl2ZVZhbHVlIDwgOS41MjM4MDkpIHtcbiAgICAgICAgc2NhbGVNdWx0aXBsaWVyID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzY2FsZU11bHRpcGxpZXIgPSAyO1xuICAgIH1cblxuICAgIHJldHVybiByb3VuZChzY2FsZSAqIHNjYWxlTXVsdGlwbGllciwgREVGQVVMVF9QUkVDSVNJT04pO1xufSIsImltcG9ydCB7IENPT1JEX1BSRUNJU0lPTiB9IGZyb20gJy4uL2NvbW1vbi9jb25zdGFudHMnO1xuaW1wb3J0IHsgQ2xhc3MsIHJhZCwgcm91bmQgfSBmcm9tICcuLi9jb21tb24nO1xuXG5jbGFzcyBQb2ludCBleHRlbmRzIENsYXNzIHtcbiAgICBjb25zdHJ1Y3Rvcih4LCB5KSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy54ID0geCB8fCAwO1xuICAgICAgICB0aGlzLnkgPSB5IHx8IDA7XG4gICAgfVxuXG4gICAgY2xvbmUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUG9pbnQodGhpcy54LCB0aGlzLnkpO1xuICAgIH1cblxuICAgIGVxdWFscyhwb2ludCkge1xuICAgICAgICByZXR1cm4gcG9pbnQgJiYgdGhpcy54ID09PSBwb2ludC54ICYmIHRoaXMueSA9PT0gcG9pbnQueTtcbiAgICB9XG5cbiAgICByb3RhdGUoY2VudGVyLCBkZWdyZWVzKSB7XG4gICAgICAgIGNvbnN0IHRoZXRhID0gcmFkKGRlZ3JlZXMpO1xuICAgICAgICBjb25zdCBjb3NUID0gTWF0aC5jb3ModGhldGEpO1xuICAgICAgICBjb25zdCBzaW5UID0gTWF0aC5zaW4odGhldGEpO1xuICAgICAgICBjb25zdCB7IHg6IGN4LCB5OiBjeSB9ID0gY2VudGVyO1xuICAgICAgICBjb25zdCB7IHgsIHkgfSA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy54ID0gcm91bmQoXG4gICAgICAgICAgICBjeCArICh4IC0gY3gpICogY29zVCArICh5IC0gY3kpICogc2luVCxcbiAgICAgICAgICAgIENPT1JEX1BSRUNJU0lPTlxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMueSA9IHJvdW5kKFxuICAgICAgICAgICAgY3kgKyAoeSAtIGN5KSAqIGNvc1QgLSAoeCAtIGN4KSAqIHNpblQsXG4gICAgICAgICAgICBDT09SRF9QUkVDSVNJT05cbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBtdWx0aXBseShhKSB7XG5cbiAgICAgICAgdGhpcy54ICo9IGE7XG4gICAgICAgIHRoaXMueSAqPSBhO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGRpc3RhbmNlVG8ocG9pbnQpIHtcbiAgICAgICAgY29uc3QgZHggPSB0aGlzLnggLSBwb2ludC54O1xuICAgICAgICBjb25zdCBkeSA9IHRoaXMueSAtIHBvaW50Lnk7XG5cbiAgICAgICAgcmV0dXJuIE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XG4gICAgfVxuXG4gICAgc3RhdGljIG9uQ2lyY2xlKGNlbnRlciwgYW5nbGUsIHJhZGl1cykge1xuICAgICAgICBjb25zdCByYWRpYW5zID0gcmFkKGFuZ2xlKTtcblxuICAgICAgICByZXR1cm4gbmV3IFBvaW50KFxuICAgICAgICAgICAgY2VudGVyLnggLSByYWRpdXMgKiBNYXRoLmNvcyhyYWRpYW5zKSxcbiAgICAgICAgICAgIGNlbnRlci55IC0gcmFkaXVzICogTWF0aC5zaW4ocmFkaWFucylcbiAgICAgICAgKTtcbiAgICB9XG59XG5cblxuZXhwb3J0IGRlZmF1bHQgUG9pbnQ7IiwiaW1wb3J0IHsgZ2VvbWV0cnkgYXMgZ2VvbSB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1kcmF3aW5nJztcblxuaW1wb3J0IFBvaW50IGZyb20gJy4vcG9pbnQnO1xuXG5pbXBvcnQgeyBYLCBZLCBUT1AsIEJPVFRPTSwgTEVGVCwgUklHSFQsIENFTlRFUiwgV0lEVEgsIEhFSUdIVCB9IGZyb20gJy4uL2NvbW1vbi9jb25zdGFudHMnO1xuaW1wb3J0IHsgQ2xhc3MsIGRlZmluZWQsIGdldFNwYWNpbmcsIGluQXJyYXksIGlzQXJyYXksIHJhZCB9IGZyb20gJy4uL2NvbW1vbic7XG5cbmNsYXNzIEJveCBleHRlbmRzIENsYXNzIHtcbiAgICBjb25zdHJ1Y3Rvcih4MSwgeTEsIHgyLCB5Mikge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMueDEgPSB4MSB8fCAwO1xuICAgICAgICB0aGlzLnkxID0geTEgfHwgMDtcbiAgICAgICAgdGhpcy54MiA9IHgyIHx8IDA7XG4gICAgICAgIHRoaXMueTIgPSB5MiB8fCAwO1xuICAgIH1cblxuICAgIGVxdWFscyhib3gpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMueDEgPT09IGJveC54MSAmJiB0aGlzLngyID09PSBib3gueDIgJiZcbiAgICAgICAgICAgIHRoaXMueTEgPT09IGJveC55MSAmJiB0aGlzLnkyID09PSBib3gueTI7XG4gICAgfVxuXG4gICAgd2lkdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLngyIC0gdGhpcy54MTtcbiAgICB9XG5cbiAgICBoZWlnaHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnkyIC0gdGhpcy55MTtcbiAgICB9XG5cbiAgICB0cmFuc2xhdGUoZHgsIGR5KSB7XG4gICAgICAgIHRoaXMueDEgKz0gZHg7XG4gICAgICAgIHRoaXMueDIgKz0gZHg7XG4gICAgICAgIHRoaXMueTEgKz0gZHk7XG4gICAgICAgIHRoaXMueTIgKz0gZHk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgbW92ZSh4LCB5KSB7XG4gICAgICAgIGNvbnN0IGhlaWdodCA9IHRoaXMuaGVpZ2h0KCk7XG4gICAgICAgIGNvbnN0IHdpZHRoID0gdGhpcy53aWR0aCgpO1xuXG4gICAgICAgIGlmIChkZWZpbmVkKHgpKSB7XG4gICAgICAgICAgICB0aGlzLngxID0geDtcbiAgICAgICAgICAgIHRoaXMueDIgPSB0aGlzLngxICsgd2lkdGg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGVmaW5lZCh5KSkge1xuICAgICAgICAgICAgdGhpcy55MSA9IHk7XG4gICAgICAgICAgICB0aGlzLnkyID0gdGhpcy55MSArIGhlaWdodDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHdyYXAodGFyZ2V0Qm94KSB7XG4gICAgICAgIHRoaXMueDEgPSBNYXRoLm1pbih0aGlzLngxLCB0YXJnZXRCb3gueDEpO1xuICAgICAgICB0aGlzLnkxID0gTWF0aC5taW4odGhpcy55MSwgdGFyZ2V0Qm94LnkxKTtcbiAgICAgICAgdGhpcy54MiA9IE1hdGgubWF4KHRoaXMueDIsIHRhcmdldEJveC54Mik7XG4gICAgICAgIHRoaXMueTIgPSBNYXRoLm1heCh0aGlzLnkyLCB0YXJnZXRCb3gueTIpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHdyYXBQb2ludChwb2ludCkge1xuICAgICAgICBjb25zdCBhcnJheVBvaW50ID0gaXNBcnJheShwb2ludCk7XG4gICAgICAgIGNvbnN0IHggPSBhcnJheVBvaW50ID8gcG9pbnRbMF0gOiBwb2ludC54O1xuICAgICAgICBjb25zdCB5ID0gYXJyYXlQb2ludCA/IHBvaW50WzFdIDogcG9pbnQueTtcbiAgICAgICAgdGhpcy53cmFwKG5ldyBCb3goeCwgeSwgeCwgeSkpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHNuYXBUbyh0YXJnZXRCb3gsIGF4aXMpIHtcblxuICAgICAgICBpZiAoYXhpcyA9PT0gWCB8fCAhYXhpcykge1xuICAgICAgICAgICAgdGhpcy54MSA9IHRhcmdldEJveC54MTtcbiAgICAgICAgICAgIHRoaXMueDIgPSB0YXJnZXRCb3gueDI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYXhpcyA9PT0gWSB8fCAhYXhpcykge1xuICAgICAgICAgICAgdGhpcy55MSA9IHRhcmdldEJveC55MTtcbiAgICAgICAgICAgIHRoaXMueTIgPSB0YXJnZXRCb3gueTI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBhbGlnblRvKHRhcmdldEJveCwgYW5jaG9yKSB7XG4gICAgICAgIGNvbnN0IGhlaWdodCA9IHRoaXMuaGVpZ2h0KCk7XG4gICAgICAgIGNvbnN0IHdpZHRoID0gdGhpcy53aWR0aCgpO1xuICAgICAgICBjb25zdCBheGlzID0gYW5jaG9yID09PSBUT1AgfHwgYW5jaG9yID09PSBCT1RUT00gPyBZIDogWDtcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gYXhpcyA9PT0gWSA/IGhlaWdodCA6IHdpZHRoO1xuXG4gICAgICAgIGlmIChhbmNob3IgPT09IENFTlRFUikge1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0Q2VudGVyID0gdGFyZ2V0Qm94LmNlbnRlcigpO1xuICAgICAgICAgICAgY29uc3QgY2VudGVyID0gdGhpcy5jZW50ZXIoKTtcblxuICAgICAgICAgICAgdGhpcy54MSArPSB0YXJnZXRDZW50ZXIueCAtIGNlbnRlci54O1xuICAgICAgICAgICAgdGhpcy55MSArPSB0YXJnZXRDZW50ZXIueSAtIGNlbnRlci55O1xuICAgICAgICB9IGVsc2UgaWYgKGFuY2hvciA9PT0gVE9QIHx8IGFuY2hvciA9PT0gTEVGVCkge1xuICAgICAgICAgICAgdGhpc1theGlzICsgMV0gPSB0YXJnZXRCb3hbYXhpcyArIDFdIC0gb2Zmc2V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpc1theGlzICsgMV0gPSB0YXJnZXRCb3hbYXhpcyArIDJdO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy54MiA9IHRoaXMueDEgKyB3aWR0aDtcbiAgICAgICAgdGhpcy55MiA9IHRoaXMueTEgKyBoZWlnaHQ7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc2hyaW5rKGR3LCBkaCkge1xuXG4gICAgICAgIHRoaXMueDIgLT0gZHc7XG4gICAgICAgIHRoaXMueTIgLT0gZGg7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZXhwYW5kKGR3LCBkaCkge1xuICAgICAgICB0aGlzLnNocmluaygtZHcsIC1kaCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHBhZChwYWRkaW5nKSB7XG4gICAgICAgIGNvbnN0IHNwYWNpbmcgPSBnZXRTcGFjaW5nKHBhZGRpbmcpO1xuXG4gICAgICAgIHRoaXMueDEgLT0gc3BhY2luZy5sZWZ0O1xuICAgICAgICB0aGlzLngyICs9IHNwYWNpbmcucmlnaHQ7XG4gICAgICAgIHRoaXMueTEgLT0gc3BhY2luZy50b3A7XG4gICAgICAgIHRoaXMueTIgKz0gc3BhY2luZy5ib3R0b207XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdW5wYWQocGFkZGluZykge1xuICAgICAgICBjb25zdCBzcGFjaW5nID0gZ2V0U3BhY2luZyhwYWRkaW5nKTtcblxuICAgICAgICBzcGFjaW5nLmxlZnQgPSAtc3BhY2luZy5sZWZ0O1xuICAgICAgICBzcGFjaW5nLnRvcCA9IC1zcGFjaW5nLnRvcDtcbiAgICAgICAgc3BhY2luZy5yaWdodCA9IC1zcGFjaW5nLnJpZ2h0O1xuICAgICAgICBzcGFjaW5nLmJvdHRvbSA9IC1zcGFjaW5nLmJvdHRvbTtcblxuICAgICAgICByZXR1cm4gdGhpcy5wYWQoc3BhY2luZyk7XG4gICAgfVxuXG4gICAgY2xvbmUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgQm94KHRoaXMueDEsIHRoaXMueTEsIHRoaXMueDIsIHRoaXMueTIpO1xuICAgIH1cblxuICAgIGNlbnRlcigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQb2ludChcbiAgICAgICAgICAgIHRoaXMueDEgKyB0aGlzLndpZHRoKCkgLyAyLFxuICAgICAgICAgICAgdGhpcy55MSArIHRoaXMuaGVpZ2h0KCkgLyAyXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgY29udGFpbnNQb2ludChwb2ludCkge1xuXG4gICAgICAgIHJldHVybiBwb2ludC54ID49IHRoaXMueDEgJiYgcG9pbnQueCA8PSB0aGlzLngyICYmXG4gICAgICAgICAgICAgICBwb2ludC55ID49IHRoaXMueTEgJiYgcG9pbnQueSA8PSB0aGlzLnkyO1xuICAgIH1cblxuICAgIHBvaW50cygpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIG5ldyBQb2ludCh0aGlzLngxLCB0aGlzLnkxKSxcbiAgICAgICAgICAgIG5ldyBQb2ludCh0aGlzLngyLCB0aGlzLnkxKSxcbiAgICAgICAgICAgIG5ldyBQb2ludCh0aGlzLngyLCB0aGlzLnkyKSxcbiAgICAgICAgICAgIG5ldyBQb2ludCh0aGlzLngxLCB0aGlzLnkyKVxuICAgICAgICBdO1xuICAgIH1cblxuICAgIGdldEhhc2goKSB7XG4gICAgICAgIHJldHVybiBbIHRoaXMueDEsIHRoaXMueTEsIHRoaXMueDIsIHRoaXMueTIgXS5qb2luKFwiLFwiKTtcbiAgICB9XG5cbiAgICBvdmVybGFwcyhib3gpIHtcbiAgICAgICAgcmV0dXJuICEoYm94LnkyIDwgdGhpcy55MSB8fCB0aGlzLnkyIDwgYm94LnkxIHx8IGJveC54MiA8IHRoaXMueDEgfHwgdGhpcy54MiA8IGJveC54MSk7XG4gICAgfVxuXG4gICAgcm90YXRlKHJvdGF0aW9uKSB7XG4gICAgICAgIGxldCB3aWR0aCA9IHRoaXMud2lkdGgoKTtcbiAgICAgICAgbGV0IGhlaWdodCA9IHRoaXMuaGVpZ2h0KCk7XG4gICAgICAgIGNvbnN0IHsgeDogY3gsIHk6IGN5IH0gPSB0aGlzLmNlbnRlcigpO1xuXG4gICAgICAgIGNvbnN0IHIxID0gcm90YXRlUG9pbnQoMCwgMCwgY3gsIGN5LCByb3RhdGlvbik7XG4gICAgICAgIGNvbnN0IHIyID0gcm90YXRlUG9pbnQod2lkdGgsIDAsIGN4LCBjeSwgcm90YXRpb24pO1xuICAgICAgICBjb25zdCByMyA9IHJvdGF0ZVBvaW50KHdpZHRoLCBoZWlnaHQsIGN4LCBjeSwgcm90YXRpb24pO1xuICAgICAgICBjb25zdCByNCA9IHJvdGF0ZVBvaW50KDAsIGhlaWdodCwgY3gsIGN5LCByb3RhdGlvbik7XG5cbiAgICAgICAgd2lkdGggPSBNYXRoLm1heChyMS54LCByMi54LCByMy54LCByNC54KSAtIE1hdGgubWluKHIxLngsIHIyLngsIHIzLngsIHI0LngpO1xuICAgICAgICBoZWlnaHQgPSBNYXRoLm1heChyMS55LCByMi55LCByMy55LCByNC55KSAtIE1hdGgubWluKHIxLnksIHIyLnksIHIzLnksIHI0LnkpO1xuXG4gICAgICAgIHRoaXMueDIgPSB0aGlzLngxICsgd2lkdGg7XG4gICAgICAgIHRoaXMueTIgPSB0aGlzLnkxICsgaGVpZ2h0O1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHRvUmVjdCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBnZW9tLlJlY3QoWyB0aGlzLngxLCB0aGlzLnkxIF0sIFsgdGhpcy53aWR0aCgpLCB0aGlzLmhlaWdodCgpIF0pO1xuICAgIH1cblxuICAgIGhhc1NpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLndpZHRoKCkgIT09IDAgJiYgdGhpcy5oZWlnaHQoKSAhPT0gMDtcbiAgICB9XG5cbiAgICBhbGlnbih0YXJnZXRCb3gsIGF4aXMsIGFsaWdubWVudCkge1xuICAgICAgICBjb25zdCBjMSA9IGF4aXMgKyAxO1xuICAgICAgICBjb25zdCBjMiA9IGF4aXMgKyAyO1xuICAgICAgICBjb25zdCBzaXplRnVuYyA9IGF4aXMgPT09IFggPyBXSURUSCA6IEhFSUdIVDtcbiAgICAgICAgY29uc3Qgc2l6ZSA9IHRoaXNbc2l6ZUZ1bmNdKCk7XG5cbiAgICAgICAgaWYgKGluQXJyYXkoYWxpZ25tZW50LCBbIExFRlQsIFRPUCBdKSkge1xuICAgICAgICAgICAgdGhpc1tjMV0gPSB0YXJnZXRCb3hbYzFdO1xuICAgICAgICAgICAgdGhpc1tjMl0gPSB0aGlzW2MxXSArIHNpemU7XG4gICAgICAgIH0gZWxzZSBpZiAoaW5BcnJheShhbGlnbm1lbnQsIFsgUklHSFQsIEJPVFRPTSBdKSkge1xuICAgICAgICAgICAgdGhpc1tjMl0gPSB0YXJnZXRCb3hbYzJdO1xuICAgICAgICAgICAgdGhpc1tjMV0gPSB0aGlzW2MyXSAtIHNpemU7XG4gICAgICAgIH0gZWxzZSBpZiAoYWxpZ25tZW50ID09PSBDRU5URVIpIHtcbiAgICAgICAgICAgIHRoaXNbYzFdID0gdGFyZ2V0Qm94W2MxXSArICh0YXJnZXRCb3hbc2l6ZUZ1bmNdKCkgLSBzaXplKSAvIDI7XG4gICAgICAgICAgICB0aGlzW2MyXSA9IHRoaXNbYzFdICsgc2l6ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gcm90YXRlUG9pbnQoeCwgeSwgY3gsIGN5LCBhbmdsZSkge1xuICAgIGNvbnN0IHRoZXRhID0gcmFkKGFuZ2xlKTtcblxuICAgIHJldHVybiBuZXcgUG9pbnQoXG4gICAgICAgIGN4ICsgKHggLSBjeCkgKiBNYXRoLmNvcyh0aGV0YSkgKyAoeSAtIGN5KSAqIE1hdGguc2luKHRoZXRhKSxcbiAgICAgICAgY3kgLSAoeCAtIGN4KSAqIE1hdGguc2luKHRoZXRhKSArICh5IC0gY3kpICogTWF0aC5jb3ModGhldGEpXG4gICAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgQm94O1xuIiwiaW1wb3J0IEJveCBmcm9tICcuL2JveCc7XG5pbXBvcnQgUG9pbnQgZnJvbSAnLi9wb2ludCc7XG5pbXBvcnQgeyBDT09SRF9QUkVDSVNJT04sIE1BWF9WQUxVRSwgTUlOX1ZBTFVFIH0gZnJvbSAnLi4vY29tbW9uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBDbGFzcywgY2xvY2t3aXNlLCByYWQsIHJvdW5kIH0gZnJvbSAnLi4vY29tbW9uJztcblxuY2xhc3MgUmluZyBleHRlbmRzIENsYXNzIHtcblxuICAgIGNvbnN0cnVjdG9yKGNlbnRlciwgaW5uZXJSYWRpdXMsIHJhZGl1cywgc3RhcnRBbmdsZSwgYW5nbGUpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLmNlbnRlciA9IGNlbnRlcjtcbiAgICAgICAgdGhpcy5pbm5lclJhZGl1cyA9IGlubmVyUmFkaXVzO1xuICAgICAgICB0aGlzLnJhZGl1cyA9IHJhZGl1cztcbiAgICAgICAgdGhpcy5zdGFydEFuZ2xlID0gc3RhcnRBbmdsZTtcbiAgICAgICAgdGhpcy5hbmdsZSA9IGFuZ2xlO1xuICAgIH1cblxuICAgIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gbmV3IFJpbmcodGhpcy5jZW50ZXIsIHRoaXMuaW5uZXJSYWRpdXMsIHRoaXMucmFkaXVzLCB0aGlzLnN0YXJ0QW5nbGUsIHRoaXMuYW5nbGUpO1xuICAgIH1cblxuICAgIG1pZGRsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhcnRBbmdsZSArIHRoaXMuYW5nbGUgLyAyO1xuICAgIH1cblxuICAgIHNldFJhZGl1cyhuZXdSYWRpdXMsIGlubmVyUmFkaXVzKSB7XG4gICAgICAgIGlmIChpbm5lclJhZGl1cykge1xuICAgICAgICAgICAgdGhpcy5pbm5lclJhZGl1cyA9IG5ld1JhZGl1cztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucmFkaXVzID0gbmV3UmFkaXVzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogUmVtb3ZlIGFuZCByZXBsYWNlIHdpdGggUG9pbnQub25DaXJjbGVcbiAgICBwb2ludChhbmdsZSwgaW5uZXJSYWRpdXMpIHtcbiAgICAgICAgY29uc3QgcmFkaWFuQW5nbGUgPSByYWQoYW5nbGUpO1xuICAgICAgICBjb25zdCBheCA9IE1hdGguY29zKHJhZGlhbkFuZ2xlKTtcbiAgICAgICAgY29uc3QgYXkgPSBNYXRoLnNpbihyYWRpYW5BbmdsZSk7XG4gICAgICAgIGNvbnN0IHJhZGl1cyA9IGlubmVyUmFkaXVzID8gdGhpcy5pbm5lclJhZGl1cyA6IHRoaXMucmFkaXVzO1xuICAgICAgICBjb25zdCB4ID0gcm91bmQodGhpcy5jZW50ZXIueCAtIChheCAqIHJhZGl1cyksIENPT1JEX1BSRUNJU0lPTik7XG4gICAgICAgIGNvbnN0IHkgPSByb3VuZCh0aGlzLmNlbnRlci55IC0gKGF5ICogcmFkaXVzKSwgQ09PUkRfUFJFQ0lTSU9OKTtcblxuICAgICAgICByZXR1cm4gbmV3IFBvaW50KHgsIHkpO1xuICAgIH1cblxuICAgIGFkamFjZW50Qm94KGRpc3RhbmNlLCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIGNvbnN0IHNlY3RvciA9IHRoaXMuY2xvbmUoKS5leHBhbmQoZGlzdGFuY2UpO1xuICAgICAgICBjb25zdCBtaWRBbmRsZSA9IHNlY3Rvci5taWRkbGUoKTtcbiAgICAgICAgY29uc3QgbWlkUG9pbnQgPSBzZWN0b3IucG9pbnQobWlkQW5kbGUpO1xuICAgICAgICBjb25zdCBodyA9IHdpZHRoIC8gMjtcbiAgICAgICAgY29uc3QgaGggPSBoZWlnaHQgLyAyO1xuICAgICAgICBjb25zdCBzYSA9IE1hdGguc2luKHJhZChtaWRBbmRsZSkpO1xuICAgICAgICBjb25zdCBjYSA9IE1hdGguY29zKHJhZChtaWRBbmRsZSkpO1xuICAgICAgICBsZXQgeCA9IG1pZFBvaW50LnggLSBodztcbiAgICAgICAgbGV0IHkgPSBtaWRQb2ludC55IC0gaGg7XG5cbiAgICAgICAgaWYgKE1hdGguYWJzKHNhKSA8IDAuOSkge1xuICAgICAgICAgICAgeCArPSBodyAqIC1jYSAvIE1hdGguYWJzKGNhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChNYXRoLmFicyhjYSkgPCAwLjkpIHtcbiAgICAgICAgICAgIHkgKz0gaGggKiAtc2EgLyBNYXRoLmFicyhzYSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IEJveCh4LCB5LCB4ICsgd2lkdGgsIHkgKyBoZWlnaHQpO1xuICAgIH1cblxuICAgIGNvbnRhaW5zUG9pbnQocCkge1xuICAgICAgICBjb25zdCBjZW50ZXIgPSB0aGlzLmNlbnRlcjtcbiAgICAgICAgY29uc3QgaW5uZXJSYWRpdXMgPSB0aGlzLmlubmVyUmFkaXVzO1xuICAgICAgICBjb25zdCByYWRpdXMgPSB0aGlzLnJhZGl1cztcbiAgICAgICAgY29uc3Qgc3RhcnRBbmdsZSA9IHRoaXMuc3RhcnRBbmdsZTtcbiAgICAgICAgY29uc3QgZW5kQW5nbGUgPSB0aGlzLnN0YXJ0QW5nbGUgKyB0aGlzLmFuZ2xlO1xuICAgICAgICBjb25zdCBkeCA9IHAueCAtIGNlbnRlci54O1xuICAgICAgICBjb25zdCBkeSA9IHAueSAtIGNlbnRlci55O1xuICAgICAgICBjb25zdCB2ZWN0b3IgPSBuZXcgUG9pbnQoZHgsIGR5KTtcbiAgICAgICAgY29uc3Qgc3RhcnRQb2ludCA9IHRoaXMucG9pbnQoc3RhcnRBbmdsZSk7XG4gICAgICAgIGNvbnN0IHN0YXJ0VmVjdG9yID0gbmV3IFBvaW50KHN0YXJ0UG9pbnQueCAtIGNlbnRlci54LCBzdGFydFBvaW50LnkgLSBjZW50ZXIueSk7XG4gICAgICAgIGNvbnN0IGVuZFBvaW50ID0gdGhpcy5wb2ludChlbmRBbmdsZSk7XG4gICAgICAgIGNvbnN0IGVuZFZlY3RvciA9IG5ldyBQb2ludChlbmRQb2ludC54IC0gY2VudGVyLngsIGVuZFBvaW50LnkgLSBjZW50ZXIueSk7XG4gICAgICAgIGNvbnN0IGRpc3QgPSByb3VuZChkeCAqIGR4ICsgZHkgKiBkeSwgQ09PUkRfUFJFQ0lTSU9OKTtcblxuICAgICAgICByZXR1cm4gKHN0YXJ0VmVjdG9yLmVxdWFscyh2ZWN0b3IpIHx8IGNsb2Nrd2lzZShzdGFydFZlY3RvciwgdmVjdG9yKSkgJiZcbiAgICAgICAgICAgICAgICFjbG9ja3dpc2UoZW5kVmVjdG9yLCB2ZWN0b3IpICYmXG4gICAgICAgICAgICAgICBkaXN0ID49IGlubmVyUmFkaXVzICogaW5uZXJSYWRpdXMgJiYgZGlzdCA8PSByYWRpdXMgKiByYWRpdXM7XG4gICAgfVxuXG4gICAgZ2V0QkJveCgpIHtcbiAgICAgICAgY29uc3QgYm94ID0gbmV3IEJveChNQVhfVkFMVUUsIE1BWF9WQUxVRSwgTUlOX1ZBTFVFLCBNSU5fVkFMVUUpO1xuICAgICAgICBjb25zdCBzdGFydEFuZ2xlID0gcm91bmQodGhpcy5zdGFydEFuZ2xlICUgMzYwKTtcbiAgICAgICAgY29uc3QgZW5kQW5nbGUgPSByb3VuZCgoc3RhcnRBbmdsZSArIHRoaXMuYW5nbGUpICUgMzYwKTtcbiAgICAgICAgY29uc3QgaW5uZXJSYWRpdXMgPSB0aGlzLmlubmVyUmFkaXVzO1xuICAgICAgICBjb25zdCBhbGxBbmdsZXMgPSBbIDAsIDkwLCAxODAsIDI3MCwgc3RhcnRBbmdsZSwgZW5kQW5nbGUgXS5zb3J0KG51bWVyaWNDb21wYXJlcik7XG4gICAgICAgIGNvbnN0IHN0YXJ0QW5nbGVJbmRleCA9IGFsbEFuZ2xlcy5pbmRleE9mKHN0YXJ0QW5nbGUpO1xuICAgICAgICBjb25zdCBlbmRBbmdsZUluZGV4ID0gYWxsQW5nbGVzLmluZGV4T2YoZW5kQW5nbGUpO1xuICAgICAgICBsZXQgYW5nbGVzO1xuXG4gICAgICAgIGlmIChzdGFydEFuZ2xlID09PSBlbmRBbmdsZSkge1xuICAgICAgICAgICAgYW5nbGVzID0gYWxsQW5nbGVzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHN0YXJ0QW5nbGVJbmRleCA8IGVuZEFuZ2xlSW5kZXgpIHtcbiAgICAgICAgICAgICAgICBhbmdsZXMgPSBhbGxBbmdsZXMuc2xpY2Uoc3RhcnRBbmdsZUluZGV4LCBlbmRBbmdsZUluZGV4ICsgMSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFuZ2xlcyA9IFtdLmNvbmNhdChcbiAgICAgICAgICAgICAgICAgICAgYWxsQW5nbGVzLnNsaWNlKDAsIGVuZEFuZ2xlSW5kZXggKyAxKSxcbiAgICAgICAgICAgICAgICAgICAgYWxsQW5nbGVzLnNsaWNlKHN0YXJ0QW5nbGVJbmRleCwgYWxsQW5nbGVzLmxlbmd0aClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhbmdsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBwb2ludCA9IHRoaXMucG9pbnQoYW5nbGVzW2ldKTtcbiAgICAgICAgICAgIGJveC53cmFwUG9pbnQocG9pbnQpO1xuICAgICAgICAgICAgYm94LndyYXBQb2ludChwb2ludCwgaW5uZXJSYWRpdXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpbm5lclJhZGl1cykge1xuICAgICAgICAgICAgYm94LndyYXBQb2ludCh0aGlzLmNlbnRlcik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYm94O1xuICAgIH1cblxuICAgIGV4cGFuZCh2YWx1ZSkge1xuICAgICAgICB0aGlzLnJhZGl1cyArPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBudW1lcmljQ29tcGFyZXIoYSwgYikge1xuICAgIHJldHVybiBhIC0gYjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgUmluZzsiLCJpbXBvcnQgUmluZyBmcm9tICcuL3JpbmcnO1xuXG5jbGFzcyBTZWN0b3IgZXh0ZW5kcyBSaW5nIHtcbiAgICBjb25zdHJ1Y3RvcihjZW50ZXIsIHJhZGl1cywgc3RhcnRBbmdsZSwgYW5nbGUpIHtcbiAgICAgICAgc3VwZXIoY2VudGVyLCAwLCByYWRpdXMsIHN0YXJ0QW5nbGUsIGFuZ2xlKTtcbiAgICB9XG5cbiAgICBleHBhbmQodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmV4cGFuZCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgY2xvbmUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2VjdG9yKHRoaXMuY2VudGVyLCB0aGlzLnJhZGl1cywgdGhpcy5zdGFydEFuZ2xlLCB0aGlzLmFuZ2xlKTtcbiAgICB9XG5cbiAgICBzZXRSYWRpdXMobmV3UmFkaXVzKSB7XG4gICAgICAgIHRoaXMucmFkaXVzID0gbmV3UmFkaXVzO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU2VjdG9yOyIsImltcG9ydCB7IGdlb21ldHJ5IGFzIGdlb20sIGRyYXdpbmcgYXMgZHJhdyB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1kcmF3aW5nJztcbmltcG9ydCB7IENsYXNzIH0gZnJvbSAnLi4vY29tbW9uJztcblxuY29uc3QgRElSRUNUSU9OX0FOR0xFID0gMC4wMDE7IC8vYW55IHZhbHVlIHRoYXQgd2lsbCBtYWtlIHRoZSBlbmRBbmdsZSBiaWdnZXIgdGhhbiB0aGUgc3RhcnQgYW5nbGUgd2lsbCB3b3JrIGhlcmUuXG5cbmNsYXNzIFNoYXBlQnVpbGRlciBleHRlbmRzIENsYXNzIHtcbiAgICBjcmVhdGVSaW5nKHNlY3Rvciwgb3B0aW9ucykge1xuICAgICAgICBjb25zdCBzdGFydEFuZ2xlID0gc2VjdG9yLnN0YXJ0QW5nbGUgKyAxODA7XG4gICAgICAgIGxldCBlbmRBbmdsZSA9IHNlY3Rvci5hbmdsZSArIHN0YXJ0QW5nbGU7XG5cbiAgICAgICAgLy9yZXF1aXJlZCBpbiBvcmRlciB0byBhdm9pZCByZXZlcnNpbmcgdGhlIGFyYyBkaXJlY3Rpb24gaW4gY2FzZXMgbGlrZSAwLjAwMDAwMDAwMDAwMDAwMSArIDEwMCA9PT0gMTAwXG4gICAgICAgIGlmIChzZWN0b3IuYW5nbGUgPiAwICYmIHN0YXJ0QW5nbGUgPT09IGVuZEFuZ2xlKSB7XG4gICAgICAgICAgICBlbmRBbmdsZSArPSBESVJFQ1RJT05fQU5HTEU7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjZW50ZXIgPSBuZXcgZ2VvbS5Qb2ludChzZWN0b3IuY2VudGVyLngsIHNlY3Rvci5jZW50ZXIueSk7XG4gICAgICAgIGNvbnN0IHJhZGl1cyA9IE1hdGgubWF4KHNlY3Rvci5yYWRpdXMsIDApO1xuICAgICAgICBjb25zdCBpbm5lclJhZGl1cyA9IE1hdGgubWF4KHNlY3Rvci5pbm5lclJhZGl1cywgMCk7XG4gICAgICAgIGNvbnN0IGFyYyA9IG5ldyBnZW9tLkFyYyhjZW50ZXIsIHtcbiAgICAgICAgICAgIHN0YXJ0QW5nbGU6IHN0YXJ0QW5nbGUsXG4gICAgICAgICAgICBlbmRBbmdsZTogZW5kQW5nbGUsXG4gICAgICAgICAgICByYWRpdXNYOiByYWRpdXMsXG4gICAgICAgICAgICByYWRpdXNZOiByYWRpdXNcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHBhdGggPSBkcmF3LlBhdGguZnJvbUFyYyhhcmMsIG9wdGlvbnMpLmNsb3NlKCk7XG5cbiAgICAgICAgaWYgKGlubmVyUmFkaXVzKSB7XG4gICAgICAgICAgICBhcmMucmFkaXVzWCA9IGFyYy5yYWRpdXNZID0gaW5uZXJSYWRpdXM7XG4gICAgICAgICAgICBjb25zdCBpbm5lckVuZCA9IGFyYy5wb2ludEF0KGVuZEFuZ2xlKTtcbiAgICAgICAgICAgIHBhdGgubGluZVRvKGlubmVyRW5kLngsIGlubmVyRW5kLnkpO1xuICAgICAgICAgICAgcGF0aC5hcmMoZW5kQW5nbGUsIHN0YXJ0QW5nbGUsIGlubmVyUmFkaXVzLCBpbm5lclJhZGl1cywgdHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXRoLmxpbmVUbyhjZW50ZXIueCwgY2VudGVyLnkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBhdGg7XG4gICAgfVxufVxuXG5TaGFwZUJ1aWxkZXIuY3VycmVudCA9IG5ldyBTaGFwZUJ1aWxkZXIoKTtcblxuZXhwb3J0IGRlZmF1bHQgU2hhcGVCdWlsZGVyOyIsImltcG9ydCB7IGRyYXdpbmcgYXMgZHJhdyB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1kcmF3aW5nJztcblxuaW1wb3J0IHsgV0hJVEUgfSBmcm9tICcuLi9jb21tb24vY29uc3RhbnRzJztcbmltcG9ydCB7IENsYXNzLCBkZWVwRXh0ZW5kLCBkZWZpbmVkLCB2YWx1ZU9yRGVmYXVsdCB9IGZyb20gJy4uL2NvbW1vbic7XG5cbmNsYXNzIENoYXJ0RWxlbWVudCBleHRlbmRzIENsYXNzIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xuXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IGRlZXBFeHRlbmQoe30sIHRoaXMub3B0aW9ucywgdGhpcy5pbml0VXNlck9wdGlvbnMob3B0aW9ucykpO1xuICAgIH1cblxuICAgIGluaXRVc2VyT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zO1xuICAgIH1cblxuICAgIHJlZmxvdyh0YXJnZXRCb3gpIHtcbiAgICAgICAgY29uc3QgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuICAgICAgICBsZXQgYm94O1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBjdXJyZW50Q2hpbGQgPSBjaGlsZHJlbltpXTtcbiAgICAgICAgICAgIGN1cnJlbnRDaGlsZC5yZWZsb3codGFyZ2V0Qm94KTtcblxuICAgICAgICAgICAgYm94ID0gYm94ID8gYm94LndyYXAoY3VycmVudENoaWxkLmJveCkgOiBjdXJyZW50Q2hpbGQuYm94LmNsb25lKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmJveCA9IGJveCB8fCB0YXJnZXRCb3g7XG4gICAgfVxuXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgY29uc3QgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuXG4gICAgICAgIGlmICh0aGlzLmFuaW1hdGlvbikge1xuICAgICAgICAgICAgdGhpcy5hbmltYXRpb24uZGVzdHJveSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY2hpbGRyZW5baV0uZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0Um9vdCgpIHtcbiAgICAgICAgY29uc3QgcGFyZW50ID0gdGhpcy5wYXJlbnQ7XG5cbiAgICAgICAgcmV0dXJuIHBhcmVudCA/IHBhcmVudC5nZXRSb290KCkgOiBudWxsO1xuICAgIH1cblxuICAgIGdldFNlbmRlcigpIHtcbiAgICAgICAgY29uc3Qgc2VydmljZSA9IHRoaXMuZ2V0U2VydmljZSgpO1xuICAgICAgICBpZiAoc2VydmljZSkge1xuICAgICAgICAgICAgcmV0dXJuIHNlcnZpY2Uuc2VuZGVyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0U2VydmljZSgpIHtcbiAgICAgICAgbGV0IGVsZW1lbnQgPSB0aGlzO1xuICAgICAgICB3aGlsZSAoZWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQuY2hhcnRTZXJ2aWNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQuY2hhcnRTZXJ2aWNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdHJhbnNsYXRlQ2hpbGRyZW4oZHgsIGR5KSB7XG4gICAgICAgIGNvbnN0IGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcbiAgICAgICAgY29uc3QgY2hpbGRyZW5Db3VudCA9IGNoaWxkcmVuLmxlbmd0aDtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuQ291bnQ7IGkrKykge1xuICAgICAgICAgICAgY2hpbGRyZW5baV0uYm94LnRyYW5zbGF0ZShkeCwgZHkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXBwZW5kKCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGl0ZW0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2goaXRlbSk7XG4gICAgICAgICAgICBpdGVtLnBhcmVudCA9IHRoaXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW5kZXJWaXN1YWwoKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMudmlzaWJsZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY3JlYXRlVmlzdWFsKCk7XG5cbiAgICAgICAgdGhpcy5hZGRWaXN1YWwoKTtcblxuICAgICAgICB0aGlzLnJlbmRlckNoaWxkcmVuKCk7XG5cbiAgICAgICAgdGhpcy5jcmVhdGVBbmltYXRpb24oKTtcbiAgICAgICAgdGhpcy5yZW5kZXJDb21wbGV0ZSgpO1xuICAgIH1cblxuICAgIGFkZFZpc3VhbCgpIHtcbiAgICAgICAgaWYgKHRoaXMudmlzdWFsKSB7XG4gICAgICAgICAgICB0aGlzLnZpc3VhbC5jaGFydEVsZW1lbnQgPSB0aGlzO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5wYXJlbnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudC5hcHBlbmRWaXN1YWwodGhpcy52aXN1YWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVyQ2hpbGRyZW4oKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjaGlsZHJlbltpXS5yZW5kZXJWaXN1YWwoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNyZWF0ZVZpc3VhbCgpIHtcbiAgICAgICAgdGhpcy52aXN1YWwgPSBuZXcgZHJhdy5Hcm91cCh7XG4gICAgICAgICAgICB6SW5kZXg6IHRoaXMub3B0aW9ucy56SW5kZXgsXG4gICAgICAgICAgICB2aXNpYmxlOiB2YWx1ZU9yRGVmYXVsdCh0aGlzLm9wdGlvbnMudmlzaWJsZSwgdHJ1ZSlcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY3JlYXRlQW5pbWF0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy52aXN1YWwgJiYgdGhpcy5vcHRpb25zLmFuaW1hdGlvbikge1xuICAgICAgICAgICAgdGhpcy5hbmltYXRpb24gPSBkcmF3LkFuaW1hdGlvbi5jcmVhdGUoXG4gICAgICAgICAgICAgICAgdGhpcy52aXN1YWwsIHRoaXMub3B0aW9ucy5hbmltYXRpb25cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhcHBlbmRWaXN1YWwoY2hpbGRWaXN1YWwpIHtcbiAgICAgICAgaWYgKCFjaGlsZFZpc3VhbC5jaGFydEVsZW1lbnQpIHtcbiAgICAgICAgICAgIGNoaWxkVmlzdWFsLmNoYXJ0RWxlbWVudCA9IHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2hpbGRWaXN1YWwub3B0aW9ucy5ub2NsaXApIHtcbiAgICAgICAgICAgIHRoaXMuY2xpcFJvb3QoKS52aXN1YWwuYXBwZW5kKGNoaWxkVmlzdWFsKTtcbiAgICAgICAgfSBlbHNlIGlmIChkZWZpbmVkKGNoaWxkVmlzdWFsLm9wdGlvbnMuekluZGV4KSkge1xuICAgICAgICAgICAgdGhpcy5zdGFja1Jvb3QoKS5zdGFja1Zpc3VhbChjaGlsZFZpc3VhbCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc1N0YWNrUm9vdCkge1xuICAgICAgICAgICAgdGhpcy5zdGFja1Zpc3VhbChjaGlsZFZpc3VhbCk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy52aXN1YWwpIHtcbiAgICAgICAgICAgIHRoaXMudmlzdWFsLmFwcGVuZChjaGlsZFZpc3VhbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBBbGxvdyBjaGFydCBlbGVtZW50cyB3aXRob3V0IHZpc3VhbHMgdG9cbiAgICAgICAgICAgIC8vIHBhc3MgdGhyb3VnaCBjaGlsZCB2aXN1YWxzXG4gICAgICAgICAgICB0aGlzLnBhcmVudC5hcHBlbmRWaXN1YWwoY2hpbGRWaXN1YWwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2xpcFJvb3QoKSB7XG4gICAgICAgIGlmICh0aGlzLnBhcmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50LmNsaXBSb290KCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBzdGFja1Jvb3QoKSB7XG4gICAgICAgIGlmICh0aGlzLnBhcmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50LnN0YWNrUm9vdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgc3RhY2tWaXN1YWwoY2hpbGRWaXN1YWwpIHtcbiAgICAgICAgY29uc3QgekluZGV4ID0gY2hpbGRWaXN1YWwub3B0aW9ucy56SW5kZXggfHwgMDtcbiAgICAgICAgY29uc3QgdmlzdWFscyA9IHRoaXMudmlzdWFsLmNoaWxkcmVuO1xuICAgICAgICBjb25zdCBsZW5ndGggPSB2aXN1YWxzLmxlbmd0aDtcbiAgICAgICAgbGV0IHBvcztcblxuICAgICAgICBmb3IgKHBvcyA9IDA7IHBvcyA8IGxlbmd0aDsgcG9zKyspIHtcbiAgICAgICAgICAgIGxldCBzaWJsaW5nID0gdmlzdWFsc1twb3NdO1xuICAgICAgICAgICAgbGV0IGhlcmUgPSB2YWx1ZU9yRGVmYXVsdChzaWJsaW5nLm9wdGlvbnMuekluZGV4LCAwKTtcbiAgICAgICAgICAgIGlmIChoZXJlID4gekluZGV4KSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnZpc3VhbC5pbnNlcnQocG9zLCBjaGlsZFZpc3VhbCk7XG4gICAgfVxuXG4gICAgdHJhdmVyc2UoY2FsbGJhY2spIHtcbiAgICAgICAgY29uc3QgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuICAgICAgICBjb25zdCBsZW5ndGggPSBjaGlsZHJlbi5sZW5ndGg7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGNoaWxkID0gY2hpbGRyZW5baV07XG5cbiAgICAgICAgICAgIGNhbGxiYWNrKGNoaWxkKTtcbiAgICAgICAgICAgIGlmIChjaGlsZC50cmF2ZXJzZSkge1xuICAgICAgICAgICAgICAgIGNoaWxkLnRyYXZlcnNlKGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNsb3Nlc3QobWF0Y2gpIHtcbiAgICAgICAgbGV0IGVsZW1lbnQgPSB0aGlzO1xuICAgICAgICBsZXQgbWF0Y2hlZCA9IGZhbHNlO1xuXG4gICAgICAgIHdoaWxlIChlbGVtZW50ICYmICFtYXRjaGVkKSB7XG4gICAgICAgICAgICBtYXRjaGVkID0gbWF0Y2goZWxlbWVudCk7XG5cbiAgICAgICAgICAgIGlmICghbWF0Y2hlZCkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtYXRjaGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlckNvbXBsZXRlKCkge31cblxuICAgIGhhc0hpZ2hsaWdodCgpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9ICh0aGlzLm9wdGlvbnMgfHwge30pLmhpZ2hsaWdodDtcbiAgICAgICAgcmV0dXJuICEoIXRoaXMuY3JlYXRlSGlnaGxpZ2h0IHx8IChvcHRpb25zICYmIG9wdGlvbnMudmlzaWJsZSA9PT0gZmFsc2UpKTtcbiAgICB9XG5cbiAgICB0b2dnbGVIaWdobGlnaHQoc2hvdywgb3BhY2l0eSkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gKHRoaXMub3B0aW9ucyB8fCB7fSkuaGlnaGxpZ2h0IHx8IHt9O1xuICAgICAgICBjb25zdCBjdXN0b21WaXN1YWwgPSBvcHRpb25zLnZpc3VhbDtcbiAgICAgICAgbGV0IGhpZ2hsaWdodCA9IHRoaXMuX2hpZ2hsaWdodDtcblxuICAgICAgICBpZiAoIWhpZ2hsaWdodCkge1xuICAgICAgICAgICAgY29uc3QgaGlnaGxpZ2h0T3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICBmaWxsOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBXSElURSxcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogb3BhY2l0eSB8fCAwLjJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHN0cm9rZToge1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogV0hJVEUsXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiAxLFxuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiBvcGFjaXR5IHx8IDAuMlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlmIChjdXN0b21WaXN1YWwpIHtcbiAgICAgICAgICAgICAgICBoaWdobGlnaHQgPSB0aGlzLl9oaWdobGlnaHQgPSBjdXN0b21WaXN1YWwoXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5oaWdobGlnaHRWaXN1YWxBcmdzKCksIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZVZpc3VhbDogKCkgPT4gdGhpcy5jcmVhdGVIaWdobGlnaHQoaGlnaGxpZ2h0T3B0aW9ucyksXG4gICAgICAgICAgICAgICAgICAgICAgICBzZW5kZXI6IHRoaXMuZ2V0U2VuZGVyKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXJpZXM6IHRoaXMuc2VyaWVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YUl0ZW06IHRoaXMuZGF0YUl0ZW0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeTogdGhpcy5jYXRlZ29yeSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGVyY2VudGFnZTogdGhpcy5wZXJjZW50YWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcnVubmluZ1RvdGFsOiB0aGlzLnJ1bm5pbmdUb3RhbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsOiB0aGlzLnRvdGFsXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApKTtcblxuICAgICAgICAgICAgICAgIGlmICghaGlnaGxpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGhpZ2hsaWdodCA9IHRoaXMuX2hpZ2hsaWdodCA9IHRoaXMuY3JlYXRlSGlnaGxpZ2h0KGhpZ2hsaWdodE9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWRlZmluZWQoaGlnaGxpZ2h0Lm9wdGlvbnMuekluZGV4KSkge1xuICAgICAgICAgICAgICAgIGhpZ2hsaWdodC5vcHRpb25zLnpJbmRleCA9IHZhbHVlT3JEZWZhdWx0KG9wdGlvbnMuekluZGV4LCB0aGlzLm9wdGlvbnMuekluZGV4KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5hcHBlbmRWaXN1YWwoaGlnaGxpZ2h0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGhpZ2hsaWdodC52aXNpYmxlKHNob3cpO1xuICAgIH1cblxuICAgIGNyZWF0ZUdyYWRpZW50T3ZlcmxheShlbGVtZW50LCBvcHRpb25zLCBncmFkaWVudE9wdGlvbnMpIHtcbiAgICAgICAgY29uc3Qgb3ZlcmxheSA9IG5ldyBkcmF3LlBhdGgoT2JqZWN0LmFzc2lnbih7XG4gICAgICAgICAgICBzdHJva2U6IHtcbiAgICAgICAgICAgICAgICBjb2xvcjogXCJub25lXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmaWxsOiB0aGlzLmNyZWF0ZUdyYWRpZW50KGdyYWRpZW50T3B0aW9ucyksXG4gICAgICAgICAgICBjbG9zZWQ6IGVsZW1lbnQub3B0aW9ucy5jbG9zZWRcbiAgICAgICAgfSwgb3B0aW9ucykpO1xuXG4gICAgICAgIG92ZXJsYXkuc2VnbWVudHMuZWxlbWVudHMoZWxlbWVudC5zZWdtZW50cy5lbGVtZW50cygpKTtcblxuICAgICAgICByZXR1cm4gb3ZlcmxheTtcbiAgICB9XG5cbiAgICBjcmVhdGVHcmFkaWVudChvcHRpb25zKSB7XG4gICAgICAgIGlmICh0aGlzLnBhcmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50LmNyZWF0ZUdyYWRpZW50KG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3VwcG9ydHNQb2ludEluYWN0aXZlT3BhY2l0eSgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuXG5DaGFydEVsZW1lbnQucHJvdG90eXBlLm9wdGlvbnMgPSB7IH07XG5cbmV4cG9ydCBkZWZhdWx0IENoYXJ0RWxlbWVudDtcbiIsImltcG9ydCB7IGRyYXdpbmcgYXMgZHJhdyB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1kcmF3aW5nJztcblxuaW1wb3J0IENoYXJ0RWxlbWVudCBmcm9tICcuL2NoYXJ0LWVsZW1lbnQnO1xuaW1wb3J0IEJveCBmcm9tICcuL2JveCc7XG5cbmltcG9ydCB7IEJMQUNLLCBMRUZULCBUT1AsIFgsIFkgfSBmcm9tICcuLi9jb21tb24vY29uc3RhbnRzJztcbmltcG9ydCB7IGdldFNwYWNpbmcsIHNldERlZmF1bHRPcHRpb25zLCB2YWx1ZU9yRGVmYXVsdCB9IGZyb20gJy4uL2NvbW1vbic7XG5cbmNsYXNzIEJveEVsZW1lbnQgZXh0ZW5kcyBDaGFydEVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5vcHRpb25zLm1hcmdpbiA9IGdldFNwYWNpbmcodGhpcy5vcHRpb25zLm1hcmdpbik7XG4gICAgICAgIHRoaXMub3B0aW9ucy5wYWRkaW5nID0gZ2V0U3BhY2luZyh0aGlzLm9wdGlvbnMucGFkZGluZyk7XG4gICAgfVxuXG4gICAgcmVmbG93KHRhcmdldEJveCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCB7IHdpZHRoLCBoZWlnaHQsIHNocmlua1RvRml0IH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCBoYXNTZXRTaXplID0gd2lkdGggJiYgaGVpZ2h0O1xuICAgICAgICBjb25zdCBtYXJnaW4gPSBvcHRpb25zLm1hcmdpbjtcbiAgICAgICAgY29uc3QgcGFkZGluZyA9IG9wdGlvbnMucGFkZGluZztcbiAgICAgICAgY29uc3QgYm9yZGVyV2lkdGggPSBvcHRpb25zLmJvcmRlci53aWR0aDtcbiAgICAgICAgbGV0IGJveDtcblxuICAgICAgICBjb25zdCByZWZsb3dQYWRkaW5nQm94ID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5hbGlnbih0YXJnZXRCb3gsIFgsIG9wdGlvbnMuYWxpZ24pO1xuICAgICAgICAgICAgdGhpcy5hbGlnbih0YXJnZXRCb3gsIFksIG9wdGlvbnMudkFsaWduKTtcbiAgICAgICAgICAgIHRoaXMucGFkZGluZ0JveCA9IGJveC5jbG9uZSgpLnVucGFkKG1hcmdpbikudW5wYWQoYm9yZGVyV2lkdGgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIGxldCBjb250ZW50Qm94ID0gdGFyZ2V0Qm94LmNsb25lKCk7XG4gICAgICAgIGlmIChoYXNTZXRTaXplKSB7XG4gICAgICAgICAgICBjb250ZW50Qm94LngyID0gY29udGVudEJveC54MSArIHdpZHRoO1xuICAgICAgICAgICAgY29udGVudEJveC55MiA9IGNvbnRlbnRCb3gueTEgKyBoZWlnaHQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hyaW5rVG9GaXQpIHtcbiAgICAgICAgICAgIGNvbnRlbnRCb3gudW5wYWQobWFyZ2luKS51bnBhZChib3JkZXJXaWR0aCkudW5wYWQocGFkZGluZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdXBlci5yZWZsb3coY29udGVudEJveCk7XG5cbiAgICAgICAgaWYgKGhhc1NldFNpemUpIHtcbiAgICAgICAgICAgIGJveCA9IHRoaXMuYm94ID0gbmV3IEJveCgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJveCA9IHRoaXMuYm94O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNocmlua1RvRml0ICYmIGhhc1NldFNpemUpIHtcbiAgICAgICAgICAgIHJlZmxvd1BhZGRpbmdCb3goKTtcbiAgICAgICAgICAgIGNvbnRlbnRCb3ggPSB0aGlzLmNvbnRlbnRCb3ggPSB0aGlzLnBhZGRpbmdCb3guY2xvbmUoKS51bnBhZChwYWRkaW5nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnRlbnRCb3ggPSB0aGlzLmNvbnRlbnRCb3ggPSBib3guY2xvbmUoKTtcbiAgICAgICAgICAgIGJveC5wYWQocGFkZGluZykucGFkKGJvcmRlcldpZHRoKS5wYWQobWFyZ2luKTtcbiAgICAgICAgICAgIHJlZmxvd1BhZGRpbmdCb3goKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudHJhbnNsYXRlQ2hpbGRyZW4oXG4gICAgICAgICAgICBib3gueDEgLSBjb250ZW50Qm94LngxICsgbWFyZ2luLmxlZnQgKyBib3JkZXJXaWR0aCArIHBhZGRpbmcubGVmdCxcbiAgICAgICAgICAgIGJveC55MSAtIGNvbnRlbnRCb3gueTEgKyBtYXJnaW4udG9wICsgYm9yZGVyV2lkdGggKyBwYWRkaW5nLnRvcFxuICAgICAgICApO1xuXG4gICAgICAgIGNvbnN0IGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGl0ZW0gPSBjaGlsZHJlbltpXTtcbiAgICAgICAgICAgIGl0ZW0ucmVmbG93KGl0ZW0uYm94KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFsaWduKHRhcmdldEJveCwgYXhpcywgYWxpZ25tZW50KSB7XG4gICAgICAgIHRoaXMuYm94LmFsaWduKHRhcmdldEJveCwgYXhpcywgYWxpZ25tZW50KTtcbiAgICB9XG5cbiAgICBoYXNCb3goKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIHJldHVybiBvcHRpb25zLmJvcmRlci53aWR0aCB8fCBvcHRpb25zLmJhY2tncm91bmQ7XG4gICAgfVxuXG4gICAgY3JlYXRlVmlzdWFsKCkge1xuICAgICAgICBzdXBlci5jcmVhdGVWaXN1YWwoKTtcblxuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBpZiAob3B0aW9ucy52aXNpYmxlICYmIHRoaXMuaGFzQm94KCkpIHtcbiAgICAgICAgICAgIHRoaXMudmlzdWFsLmFwcGVuZChkcmF3LlBhdGguZnJvbVJlY3QoXG4gICAgICAgICAgICAgICAgdGhpcy5wYWRkaW5nQm94LnRvUmVjdCgpLFxuICAgICAgICAgICAgICAgIHRoaXMudmlzdWFsU3R5bGUoKVxuICAgICAgICAgICAgKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2aXN1YWxTdHlsZSgpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgYm9yZGVyID0gb3B0aW9ucy5ib3JkZXIgfHwge307XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0cm9rZToge1xuICAgICAgICAgICAgICAgIHdpZHRoOiBib3JkZXIud2lkdGgsXG4gICAgICAgICAgICAgICAgY29sb3I6IGJvcmRlci5jb2xvcixcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiB2YWx1ZU9yRGVmYXVsdChib3JkZXIub3BhY2l0eSwgb3B0aW9ucy5vcGFjaXR5KSxcbiAgICAgICAgICAgICAgICBkYXNoVHlwZTogYm9yZGVyLmRhc2hUeXBlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmlsbDoge1xuICAgICAgICAgICAgICAgIGNvbG9yOiBvcHRpb25zLmJhY2tncm91bmQsXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogb3B0aW9ucy5vcGFjaXR5XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY3Vyc29yOiBvcHRpb25zLmN1cnNvclxuICAgICAgICB9O1xuICAgIH1cbn1cblxuc2V0RGVmYXVsdE9wdGlvbnMoQm94RWxlbWVudCwge1xuICAgIGFsaWduOiBMRUZULFxuICAgIHZBbGlnbjogVE9QLFxuICAgIG1hcmdpbjoge30sXG4gICAgcGFkZGluZzoge30sXG4gICAgYm9yZGVyOiB7XG4gICAgICAgIGNvbG9yOiBCTEFDSyxcbiAgICAgICAgd2lkdGg6IDBcbiAgICB9LFxuICAgIGJhY2tncm91bmQ6IFwiXCIsXG4gICAgc2hyaW5rVG9GaXQ6IGZhbHNlLFxuICAgIHdpZHRoOiAwLFxuICAgIGhlaWdodDogMCxcbiAgICB2aXNpYmxlOiB0cnVlXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgQm94RWxlbWVudDsiLCJpbXBvcnQgeyBkcmF3aW5nIGFzIGRyYXcsIGdlb21ldHJ5IGFzIGdlb20gfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tZHJhd2luZyc7XG5cbmltcG9ydCBCb3hFbGVtZW50IGZyb20gJy4vYm94LWVsZW1lbnQnO1xuXG5pbXBvcnQgeyBDSVJDTEUsIFRSSUFOR0xFLCBDUk9TUywgQ0VOVEVSLCBDT09SRF9QUkVDSVNJT04gfSBmcm9tICcuLi9jb21tb24vY29uc3RhbnRzJztcbmltcG9ydCB7IHJvdW5kLCBzZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gJy4uL2NvbW1vbic7XG5cbmNsYXNzIFNoYXBlRWxlbWVudCBleHRlbmRzIEJveEVsZW1lbnQge1xuXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucywgcG9pbnREYXRhKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuXG4gICAgICAgIHRoaXMucG9pbnREYXRhID0gcG9pbnREYXRhO1xuICAgIH1cblxuICAgIGdldEVsZW1lbnQoKSB7XG4gICAgICAgIGNvbnN0IHsgb3B0aW9ucywgcGFkZGluZ0JveDogYm94IH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7IHR5cGUsIHJvdGF0aW9uIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCBjZW50ZXIgPSBib3guY2VudGVyKCk7XG4gICAgICAgIGNvbnN0IGhhbGZXaWR0aCA9IGJveC53aWR0aCgpIC8gMjtcblxuICAgICAgICBpZiAoIW9wdGlvbnMudmlzaWJsZSB8fCAhdGhpcy5oYXNCb3goKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzdHlsZSA9IHRoaXMudmlzdWFsU3R5bGUoKTtcbiAgICAgICAgbGV0IGVsZW1lbnQ7XG5cbiAgICAgICAgaWYgKHR5cGUgPT09IENJUkNMRSkge1xuICAgICAgICAgICAgZWxlbWVudCA9IG5ldyBkcmF3LkNpcmNsZShcbiAgICAgICAgICAgICAgICBuZXcgZ2VvbS5DaXJjbGUoW1xuICAgICAgICAgICAgICAgICAgICByb3VuZChib3gueDEgKyBoYWxmV2lkdGgsIENPT1JEX1BSRUNJU0lPTiksXG4gICAgICAgICAgICAgICAgICAgIHJvdW5kKGJveC55MSArIGJveC5oZWlnaHQoKSAvIDIsIENPT1JEX1BSRUNJU0lPTilcbiAgICAgICAgICAgICAgICBdLCBoYWxmV2lkdGgpLFxuICAgICAgICAgICAgICAgIHN0eWxlXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IFRSSUFOR0xFKSB7XG4gICAgICAgICAgICBlbGVtZW50ID0gZHJhdy5QYXRoLmZyb21Qb2ludHMoW1xuICAgICAgICAgICAgICAgIFsgYm94LngxICsgaGFsZldpZHRoLCBib3gueTEgXSxcbiAgICAgICAgICAgICAgICBbIGJveC54MSwgYm94LnkyIF0sXG4gICAgICAgICAgICAgICAgWyBib3gueDIsIGJveC55MiBdXG4gICAgICAgICAgICBdLCBzdHlsZSkuY2xvc2UoKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBDUk9TUykge1xuICAgICAgICAgICAgZWxlbWVudCA9IG5ldyBkcmF3Lk11bHRpUGF0aChzdHlsZSk7XG5cbiAgICAgICAgICAgIGVsZW1lbnQubW92ZVRvKGJveC54MSwgYm94LnkxKS5saW5lVG8oYm94LngyLCBib3gueTIpO1xuICAgICAgICAgICAgZWxlbWVudC5tb3ZlVG8oYm94LngxLCBib3gueTIpLmxpbmVUbyhib3gueDIsIGJveC55MSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbGVtZW50ID0gZHJhdy5QYXRoLmZyb21SZWN0KGJveC50b1JlY3QoKSwgc3R5bGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJvdGF0aW9uKSB7XG4gICAgICAgICAgICBlbGVtZW50LnRyYW5zZm9ybShnZW9tLnRyYW5zZm9ybSgpXG4gICAgICAgICAgICAgICAgLnJvdGF0ZSgtcm90YXRpb24sIFsgY2VudGVyLngsIGNlbnRlci55IF0pXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgZWxlbWVudC5vcHRpb25zLnpJbmRleCA9IG9wdGlvbnMuekluZGV4O1xuICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICB9XG5cbiAgICBjcmVhdGVFbGVtZW50KCkge1xuICAgICAgICBjb25zdCBjdXN0b21WaXN1YWwgPSB0aGlzLm9wdGlvbnMudmlzdWFsO1xuICAgICAgICBjb25zdCBwb2ludERhdGEgPSB0aGlzLnBvaW50RGF0YSB8fCB7fTtcbiAgICAgICAgbGV0IHZpc3VhbDtcblxuICAgICAgICBpZiAoY3VzdG9tVmlzdWFsKSB7XG4gICAgICAgICAgICB2aXN1YWwgPSBjdXN0b21WaXN1YWwoe1xuICAgICAgICAgICAgICAgIHZhbHVlOiBwb2ludERhdGEudmFsdWUsXG4gICAgICAgICAgICAgICAgZGF0YUl0ZW06IHBvaW50RGF0YS5kYXRhSXRlbSxcbiAgICAgICAgICAgICAgICBzZW5kZXI6IHRoaXMuZ2V0U2VuZGVyKCksXG4gICAgICAgICAgICAgICAgc2VyaWVzOiBwb2ludERhdGEuc2VyaWVzLFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBwb2ludERhdGEuY2F0ZWdvcnksXG4gICAgICAgICAgICAgICAgcmVjdDogdGhpcy5wYWRkaW5nQm94LnRvUmVjdCgpLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IHRoaXMudmlzdWFsT3B0aW9ucygpLFxuICAgICAgICAgICAgICAgIGNyZWF0ZVZpc3VhbDogKCkgPT4gdGhpcy5nZXRFbGVtZW50KClcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmlzdWFsID0gdGhpcy5nZXRFbGVtZW50KCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmlzdWFsO1xuICAgIH1cblxuICAgIHZpc3VhbE9wdGlvbnMoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiBvcHRpb25zLmJhY2tncm91bmQsXG4gICAgICAgICAgICBib3JkZXI6IG9wdGlvbnMuYm9yZGVyLFxuICAgICAgICAgICAgbWFyZ2luOiBvcHRpb25zLm1hcmdpbixcbiAgICAgICAgICAgIHBhZGRpbmc6IG9wdGlvbnMucGFkZGluZyxcbiAgICAgICAgICAgIHR5cGU6IG9wdGlvbnMudHlwZSxcbiAgICAgICAgICAgIHNpemU6IG9wdGlvbnMud2lkdGgsXG4gICAgICAgICAgICB2aXNpYmxlOiBvcHRpb25zLnZpc2libGVcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBjcmVhdGVWaXN1YWwoKSB7XG4gICAgICAgIHRoaXMudmlzdWFsID0gdGhpcy5jcmVhdGVFbGVtZW50KCk7XG4gICAgfVxufVxuXG5zZXREZWZhdWx0T3B0aW9ucyhTaGFwZUVsZW1lbnQsIHtcbiAgICB0eXBlOiBDSVJDTEUsXG4gICAgYWxpZ246IENFTlRFUixcbiAgICB2QWxpZ246IENFTlRFUlxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IFNoYXBlRWxlbWVudDsiLCJpbXBvcnQgeyBXSElURSB9IGZyb20gJy4uL2NvbW1vbi9jb25zdGFudHMnO1xuXG5jb25zdCBMSU5FQVIgPSBcImxpbmVhclwiO1xuY29uc3QgUkFESUFMID0gXCJyYWRpYWxcIjtcblxuY29uc3QgR1JBRElFTlRTID0ge1xuICAgIGdsYXNzOiB7XG4gICAgICAgIHR5cGU6IExJTkVBUixcbiAgICAgICAgcm90YXRpb246IDAsXG4gICAgICAgIHN0b3BzOiBbIHtcbiAgICAgICAgICAgIG9mZnNldDogMCxcbiAgICAgICAgICAgIGNvbG9yOiBXSElURSxcbiAgICAgICAgICAgIG9wYWNpdHk6IDBcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgb2Zmc2V0OiAwLjI1LFxuICAgICAgICAgICAgY29sb3I6IFdISVRFLFxuICAgICAgICAgICAgb3BhY2l0eTogMC4zXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIG9mZnNldDogMSxcbiAgICAgICAgICAgIGNvbG9yOiBXSElURSxcbiAgICAgICAgICAgIG9wYWNpdHk6IDBcbiAgICAgICAgfSBdXG4gICAgfSxcbiAgICBzaGFycEJldmVsOiB7XG4gICAgICAgIHR5cGU6IFJBRElBTCxcbiAgICAgICAgc3RvcHM6IFsge1xuICAgICAgICAgICAgb2Zmc2V0OiAwLFxuICAgICAgICAgICAgY29sb3I6IFdISVRFLFxuICAgICAgICAgICAgb3BhY2l0eTogMC41NVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBvZmZzZXQ6IDAuNjUsXG4gICAgICAgICAgICBjb2xvcjogV0hJVEUsXG4gICAgICAgICAgICBvcGFjaXR5OiAwXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIG9mZnNldDogMC45NSxcbiAgICAgICAgICAgIGNvbG9yOiBXSElURSxcbiAgICAgICAgICAgIG9wYWNpdHk6IDAuMjVcbiAgICAgICAgfSBdXG4gICAgfSxcbiAgICByb3VuZGVkQmV2ZWw6IHtcbiAgICAgICAgdHlwZTogUkFESUFMLFxuICAgICAgICBzdG9wczogWyB7XG4gICAgICAgICAgICBvZmZzZXQ6IDAuMzMsXG4gICAgICAgICAgICBjb2xvcjogV0hJVEUsXG4gICAgICAgICAgICBvcGFjaXR5OiAwLjA2XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIG9mZnNldDogMC44MyxcbiAgICAgICAgICAgIGNvbG9yOiBXSElURSxcbiAgICAgICAgICAgIG9wYWNpdHk6IDAuMlxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBvZmZzZXQ6IDAuOTUsXG4gICAgICAgICAgICBjb2xvcjogV0hJVEUsXG4gICAgICAgICAgICBvcGFjaXR5OiAwXG4gICAgICAgIH0gXVxuICAgIH0sXG4gICAgcm91bmRlZEdsYXNzOiB7XG4gICAgICAgIHR5cGU6IFJBRElBTCxcbiAgICAgICAgc3VwcG9ydFZNTDogZmFsc2UsXG4gICAgICAgIHN0b3BzOiBbIHtcbiAgICAgICAgICAgIG9mZnNldDogMCxcbiAgICAgICAgICAgIGNvbG9yOiBXSElURSxcbiAgICAgICAgICAgIG9wYWNpdHk6IDBcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgb2Zmc2V0OiAwLjUsXG4gICAgICAgICAgICBjb2xvcjogV0hJVEUsXG4gICAgICAgICAgICBvcGFjaXR5OiAwLjNcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgb2Zmc2V0OiAwLjk5LFxuICAgICAgICAgICAgY29sb3I6IFdISVRFLFxuICAgICAgICAgICAgb3BhY2l0eTogMFxuICAgICAgICB9IF1cbiAgICB9LFxuICAgIHNoYXJwR2xhc3M6IHtcbiAgICAgICAgdHlwZTogUkFESUFMLFxuICAgICAgICBzdXBwb3J0Vk1MOiBmYWxzZSxcbiAgICAgICAgc3RvcHM6IFsge1xuICAgICAgICAgICAgb2Zmc2V0OiAwLFxuICAgICAgICAgICAgY29sb3I6IFdISVRFLFxuICAgICAgICAgICAgb3BhY2l0eTogMC4yXG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIG9mZnNldDogMC4xNSxcbiAgICAgICAgICAgIGNvbG9yOiBXSElURSxcbiAgICAgICAgICAgIG9wYWNpdHk6IDAuMTVcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgb2Zmc2V0OiAwLjE3LFxuICAgICAgICAgICAgY29sb3I6IFdISVRFLFxuICAgICAgICAgICAgb3BhY2l0eTogMC4zNVxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBvZmZzZXQ6IDAuODUsXG4gICAgICAgICAgICBjb2xvcjogV0hJVEUsXG4gICAgICAgICAgICBvcGFjaXR5OiAwLjA1XG4gICAgICAgIH0sIHtcbiAgICAgICAgICAgIG9mZnNldDogMC44NyxcbiAgICAgICAgICAgIGNvbG9yOiBXSElURSxcbiAgICAgICAgICAgIG9wYWNpdHk6IDAuMTVcbiAgICAgICAgfSwge1xuICAgICAgICAgICAgb2Zmc2V0OiAwLjk5LFxuICAgICAgICAgICAgY29sb3I6IFdISVRFLFxuICAgICAgICAgICAgb3BhY2l0eTogMFxuICAgICAgICB9IF1cbiAgICB9LFxuICAgIGJ1YmJsZVNoYWRvdzoge1xuICAgICAgICB0eXBlOiBSQURJQUwsXG4gICAgICAgIGNlbnRlcjogWyAwLjUsIDAuNSBdLFxuICAgICAgICByYWRpdXM6IDAuNVxuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IEdSQURJRU5UUzsiLCJpbXBvcnQgQm94IGZyb20gJy4uL2JveCc7XG5pbXBvcnQgeyBncmVwIH0gZnJvbSAnLi4vLi4vY29tbW9uJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYm94RGlmZihyLCBzKSB7XG4gICAgaWYgKHIueDEgPT09IHMueDEgJiYgci55MSA9PT0gcy55MSAmJiByLngyID09PSBzLngyICYmIHIueTIgPT09IHMueTIpIHtcbiAgICAgICAgcmV0dXJuIHM7XG4gICAgfVxuXG4gICAgY29uc3QgYSA9IE1hdGgubWluKHIueDEsIHMueDEpO1xuICAgIGNvbnN0IGIgPSBNYXRoLm1heChyLngxLCBzLngxKTtcbiAgICBjb25zdCBjID0gTWF0aC5taW4oci54Miwgcy54Mik7XG4gICAgY29uc3QgZCA9IE1hdGgubWF4KHIueDIsIHMueDIpO1xuICAgIGNvbnN0IGUgPSBNYXRoLm1pbihyLnkxLCBzLnkxKTtcbiAgICBjb25zdCBmID0gTWF0aC5tYXgoci55MSwgcy55MSk7XG4gICAgY29uc3QgZyA9IE1hdGgubWluKHIueTIsIHMueTIpO1xuICAgIGNvbnN0IGggPSBNYXRoLm1heChyLnkyLCBzLnkyKTtcbiAgICBjb25zdCBib3hlcyA9IFtdO1xuXG4gICAgLy8gWCA9IGludGVyc2VjdGlvbiwgMC03ID0gcG9zc2libGUgZGlmZmVyZW5jZSBhcmVhc1xuICAgIC8vIGggKy0rLSstK1xuICAgIC8vIC4gfDV8Nnw3fFxuICAgIC8vIGcgKy0rLSstK1xuICAgIC8vIC4gfDN8WHw0fFxuICAgIC8vIGYgKy0rLSstK1xuICAgIC8vIC4gfDB8MXwyfFxuICAgIC8vIGUgKy0rLSstK1xuICAgIC8vIC4gYSBiIGMgZFxuXG4gICAgLy8gd2UnbGwgYWx3YXlzIGhhdmUgcmVjdGFuZ2xlcyAxLCAzLCA0IGFuZCA2XG4gICAgYm94ZXNbMF0gPSBuZXcgQm94KGIsIGUsIGMsIGYpO1xuICAgIGJveGVzWzFdID0gbmV3IEJveChhLCBmLCBiLCBnKTtcbiAgICBib3hlc1syXSA9IG5ldyBCb3goYywgZiwgZCwgZyk7XG4gICAgYm94ZXNbM10gPSBuZXcgQm94KGIsIGcsIGMsIGgpO1xuXG4gICAgLy8gZGVjaWRlIHdoaWNoIGNvcm5lcnNcbiAgICBpZiAoci54MSA9PT0gYSAmJiByLnkxID09PSBlIHx8IHMueDEgPT09IGEgJiYgcy55MSA9PT0gZSkgeyAvLyBjb3JuZXJzIDAgYW5kIDdcbiAgICAgICAgYm94ZXNbNF0gPSBuZXcgQm94KGEsIGUsIGIsIGYpO1xuICAgICAgICBib3hlc1s1XSA9IG5ldyBCb3goYywgZywgZCwgaCk7XG4gICAgfSBlbHNlIHsgLy8gY29ybmVycyAyIGFuZCA1XG4gICAgICAgIGJveGVzWzRdID0gbmV3IEJveChjLCBlLCBkLCBmKTtcbiAgICAgICAgYm94ZXNbNV0gPSBuZXcgQm94KGEsIGcsIGIsIGgpO1xuICAgIH1cblxuICAgIHJldHVybiBncmVwKGJveGVzLCBmdW5jdGlvbihib3gpIHtcbiAgICAgICAgcmV0dXJuIGJveC5oZWlnaHQoKSA+IDAgJiYgYm94LndpZHRoKCkgPiAwO1xuICAgIH0pWzBdO1xufSIsImltcG9ydCB7IGRyYXdpbmcgYXMgZHJhdyB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1kcmF3aW5nJztcblxuaW1wb3J0IENoYXJ0RWxlbWVudCBmcm9tICcuL2NoYXJ0LWVsZW1lbnQnO1xuaW1wb3J0IEdSQURJRU5UUyBmcm9tICcuL2dyYWRpZW50cyc7XG5pbXBvcnQgQm94IGZyb20gJy4vYm94JztcblxuaW1wb3J0IGJveERpZmYgZnJvbSAnLi91dGlscy9ib3gtZGlmZic7XG5cbmltcG9ydCB7IERFRkFVTFRfV0lEVEgsIERFRkFVTFRfSEVJR0hULCBXSElURSwgQkxBQ0sgfSBmcm9tICcuLi9jb21tb24vY29uc3RhbnRzJztcbmltcG9ydCB7IGdldFNwYWNpbmcsIG9iamVjdEtleSwgc2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tICcuLi9jb21tb24nO1xuXG5jbGFzcyBSb290RWxlbWVudCBleHRlbmRzIENoYXJ0RWxlbWVudCB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcblxuICAgICAgICBjb25zdCByb290T3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgcm9vdE9wdGlvbnMud2lkdGggPSBwYXJzZUludChyb290T3B0aW9ucy53aWR0aCwgMTApO1xuICAgICAgICByb290T3B0aW9ucy5oZWlnaHQgPSBwYXJzZUludChyb290T3B0aW9ucy5oZWlnaHQsIDEwKTtcblxuICAgICAgICB0aGlzLmdyYWRpZW50cyA9IHt9O1xuICAgIH1cblxuICAgIHJlZmxvdygpIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zLCBjaGlsZHJlbiB9ID0gdGhpcztcbiAgICAgICAgbGV0IGN1cnJlbnRCb3ggPSBuZXcgQm94KDAsIDAsIG9wdGlvbnMud2lkdGgsIG9wdGlvbnMuaGVpZ2h0KTtcblxuICAgICAgICB0aGlzLmJveCA9IGN1cnJlbnRCb3gudW5wYWQob3B0aW9ucy5tYXJnaW4pO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNoaWxkcmVuW2ldLnJlZmxvdyhjdXJyZW50Qm94KTtcbiAgICAgICAgICAgIGN1cnJlbnRCb3ggPSBib3hEaWZmKGN1cnJlbnRCb3gsIGNoaWxkcmVuW2ldLmJveCkgfHwgbmV3IEJveCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY3JlYXRlVmlzdWFsKCkge1xuICAgICAgICB0aGlzLnZpc3VhbCA9IG5ldyBkcmF3Lkdyb3VwKCk7XG4gICAgICAgIHRoaXMuY3JlYXRlQmFja2dyb3VuZCgpO1xuICAgIH1cblxuICAgIGNyZWF0ZUJhY2tncm91bmQoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGJvcmRlciA9IG9wdGlvbnMuYm9yZGVyIHx8IHt9O1xuICAgICAgICBjb25zdCBib3ggPSB0aGlzLmJveC5jbG9uZSgpLnBhZChvcHRpb25zLm1hcmdpbikudW5wYWQoYm9yZGVyLndpZHRoKTtcblxuICAgICAgICBjb25zdCBiYWNrZ3JvdW5kID0gZHJhdy5QYXRoLmZyb21SZWN0KGJveC50b1JlY3QoKSwge1xuICAgICAgICAgICAgc3Ryb2tlOiB7XG4gICAgICAgICAgICAgICAgY29sb3I6IGJvcmRlci53aWR0aCA/IGJvcmRlci5jb2xvciA6IFwiXCIsXG4gICAgICAgICAgICAgICAgd2lkdGg6IGJvcmRlci53aWR0aCxcbiAgICAgICAgICAgICAgICBkYXNoVHlwZTogYm9yZGVyLmRhc2hUeXBlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmlsbDoge1xuICAgICAgICAgICAgICAgIGNvbG9yOiBvcHRpb25zLmJhY2tncm91bmQsXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogb3B0aW9ucy5vcGFjaXR5XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgekluZGV4OiAtMTBcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy52aXN1YWwuYXBwZW5kKGJhY2tncm91bmQpO1xuICAgIH1cblxuICAgIGdldFJvb3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGNyZWF0ZUdyYWRpZW50KG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgZ3JhZGllbnRzID0gdGhpcy5ncmFkaWVudHM7XG4gICAgICAgIGNvbnN0IGhhc2hDb2RlID0gb2JqZWN0S2V5KG9wdGlvbnMpO1xuICAgICAgICBjb25zdCBncmFkaWVudCA9IEdSQURJRU5UU1tvcHRpb25zLmdyYWRpZW50XTtcbiAgICAgICAgbGV0IGRyYXdpbmdHcmFkaWVudDtcblxuICAgICAgICBpZiAoZ3JhZGllbnRzW2hhc2hDb2RlXSkge1xuICAgICAgICAgICAgZHJhd2luZ0dyYWRpZW50ID0gZ3JhZGllbnRzW2hhc2hDb2RlXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGdyYWRpZW50T3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIGdyYWRpZW50LCBvcHRpb25zKTtcbiAgICAgICAgICAgIGlmIChncmFkaWVudC50eXBlID09PSBcImxpbmVhclwiKSB7XG4gICAgICAgICAgICAgICAgZHJhd2luZ0dyYWRpZW50ID0gbmV3IGRyYXcuTGluZWFyR3JhZGllbnQoZ3JhZGllbnRPcHRpb25zKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuaW5uZXJSYWRpdXMpIHtcbiAgICAgICAgICAgICAgICAgICAgZ3JhZGllbnRPcHRpb25zLnN0b3BzID0gaW5uZXJSYWRpYWxTdG9wcyhncmFkaWVudE9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkcmF3aW5nR3JhZGllbnQgPSBuZXcgZHJhdy5SYWRpYWxHcmFkaWVudChncmFkaWVudE9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGRyYXdpbmdHcmFkaWVudC5zdXBwb3J0Vk1MID0gZ3JhZGllbnQuc3VwcG9ydFZNTCAhPT0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBncmFkaWVudHNbaGFzaENvZGVdID0gZHJhd2luZ0dyYWRpZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRyYXdpbmdHcmFkaWVudDtcbiAgICB9XG5cbiAgICBjbGVhbkdyYWRpZW50cygpIHtcbiAgICAgICAgY29uc3QgZ3JhZGllbnRzID0gdGhpcy5ncmFkaWVudHM7XG4gICAgICAgIGZvciAobGV0IGhhc2hDb2RlIGluIGdyYWRpZW50cykge1xuICAgICAgICAgICAgZ3JhZGllbnRzW2hhc2hDb2RlXS5fb2JzZXJ2ZXJzID0gW107Ly9hZGQgY2xlYXIgb2JzZXJ2ZXJzIG1ldGhvZCBpbiBkcmF3aW5nIE9ic2VydmVyc01peGluXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzaXplKCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICByZXR1cm4gbmV3IEJveCgwLCAwLCBvcHRpb25zLndpZHRoLCBvcHRpb25zLmhlaWdodCk7XG4gICAgfVxufVxuXG5zZXREZWZhdWx0T3B0aW9ucyhSb290RWxlbWVudCwge1xuICAgIHdpZHRoOiBERUZBVUxUX1dJRFRILFxuICAgIGhlaWdodDogREVGQVVMVF9IRUlHSFQsXG4gICAgYmFja2dyb3VuZDogV0hJVEUsXG4gICAgYm9yZGVyOiB7XG4gICAgICAgIGNvbG9yOiBCTEFDSyxcbiAgICAgICAgd2lkdGg6IDBcbiAgICB9LFxuICAgIG1hcmdpbjogZ2V0U3BhY2luZyg1KSxcbiAgICB6SW5kZXg6IC0yXG59KTtcblxuZnVuY3Rpb24gaW5uZXJSYWRpYWxTdG9wcyhvcHRpb25zKSB7XG4gICAgY29uc3Qgc3RvcHMgPSBvcHRpb25zLnN0b3BzO1xuICAgIGNvbnN0IHVzZWRTcGFjZSA9ICgob3B0aW9ucy5pbm5lclJhZGl1cyAvIG9wdGlvbnMucmFkaXVzKSAqIDEwMCk7XG4gICAgY29uc3QgbGVuZ3RoID0gc3RvcHMubGVuZ3RoO1xuICAgIGNvbnN0IGN1cnJlbnRTdG9wcyA9IFtdO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgY3VycmVudFN0b3AgPSBPYmplY3QuYXNzaWduKHt9LCBzdG9wc1tpXSk7XG4gICAgICAgIGN1cnJlbnRTdG9wLm9mZnNldCA9IChjdXJyZW50U3RvcC5vZmZzZXQgKiAoMTAwIC0gdXNlZFNwYWNlKSArIHVzZWRTcGFjZSkgLyAxMDA7XG4gICAgICAgIGN1cnJlbnRTdG9wcy5wdXNoKGN1cnJlbnRTdG9wKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3VycmVudFN0b3BzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBSb290RWxlbWVudDsiLCJpbXBvcnQgQ2hhcnRFbGVtZW50IGZyb20gJy4vY2hhcnQtZWxlbWVudCc7XG5pbXBvcnQgQm94IGZyb20gJy4vYm94JztcblxuaW1wb3J0IHsgWCwgWSwgV0lEVEgsIEhFSUdIVCwgUklHSFQsIEJPVFRPTSwgQ0VOVEVSIH0gZnJvbSAnLi4vY29tbW9uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyByb3VuZCwgc2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tICcuLi9jb21tb24nO1xuXG5jbGFzcyBGbG9hdEVsZW1lbnQgZXh0ZW5kcyBDaGFydEVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgICAgIHRoaXMuX2luaXREaXJlY3Rpb24oKTtcbiAgICB9XG5cbiAgICBfaW5pdERpcmVjdGlvbigpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgaWYgKG9wdGlvbnMudmVydGljYWwpIHtcbiAgICAgICAgICAgIHRoaXMuZ3JvdXBBeGlzID0gWDtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudEF4aXMgPSBZO1xuICAgICAgICAgICAgdGhpcy5ncm91cFNpemVGaWVsZCA9IFdJRFRIO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50U2l6ZUZpZWxkID0gSEVJR0hUO1xuICAgICAgICAgICAgdGhpcy5ncm91cFNwYWNpbmcgPSBvcHRpb25zLnNwYWNpbmc7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnRTcGFjaW5nID0gb3B0aW9ucy52U3BhY2luZztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZ3JvdXBBeGlzID0gWTtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudEF4aXMgPSBYO1xuICAgICAgICAgICAgdGhpcy5ncm91cFNpemVGaWVsZCA9IEhFSUdIVDtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudFNpemVGaWVsZCA9IFdJRFRIO1xuICAgICAgICAgICAgdGhpcy5ncm91cFNwYWNpbmcgPSBvcHRpb25zLnZTcGFjaW5nO1xuICAgICAgICAgICAgdGhpcy5lbGVtZW50U3BhY2luZyA9IG9wdGlvbnMuc3BhY2luZztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlZmxvdyh0YXJnZXRCb3gpIHtcbiAgICAgICAgdGhpcy5ib3ggPSB0YXJnZXRCb3guY2xvbmUoKTtcbiAgICAgICAgdGhpcy5yZWZsb3dDaGlsZHJlbigpO1xuICAgIH1cblxuICAgIHJlZmxvd0NoaWxkcmVuKCkge1xuICAgICAgICBjb25zdCB7IGJveCwgZWxlbWVudEF4aXMsIGdyb3VwQXhpcywgZWxlbWVudFNpemVGaWVsZCwgZ3JvdXBTaXplRmllbGQgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHsgZ3JvdXBzLCBncm91cHNTaXplLCBtYXhHcm91cEVsZW1lbnRzU2l6ZSB9ID0gdGhpcy5ncm91cE9wdGlvbnMoKTtcbiAgICAgICAgY29uc3QgZ3JvdXBzQ291bnQgPSBncm91cHMubGVuZ3RoO1xuICAgICAgICBjb25zdCBncm91cHNTdGFydCA9IGJveFtncm91cEF4aXMgKyAxXSArIHRoaXMuYWxpZ25TdGFydChncm91cHNTaXplLCBib3hbZ3JvdXBTaXplRmllbGRdKCkpO1xuXG4gICAgICAgIGlmIChncm91cHNDb3VudCkge1xuICAgICAgICAgICAgbGV0IGdyb3VwU3RhcnQgPSBncm91cHNTdGFydDtcblxuICAgICAgICAgICAgZm9yIChsZXQgZ3JvdXBJZHggPSAwOyBncm91cElkeCA8IGdyb3Vwc0NvdW50OyBncm91cElkeCsrKSB7XG4gICAgICAgICAgICAgICAgbGV0IGdyb3VwID0gZ3JvdXBzW2dyb3VwSWR4XTtcbiAgICAgICAgICAgICAgICBsZXQgZ3JvdXBFbGVtZW50cyA9IGdyb3VwLmdyb3VwRWxlbWVudHM7XG4gICAgICAgICAgICAgICAgbGV0IGVsZW1lbnRTdGFydCA9IGJveFtlbGVtZW50QXhpcyArIDFdO1xuICAgICAgICAgICAgICAgIGxldCBncm91cEVsZW1lbnRzQ291bnQgPSBncm91cEVsZW1lbnRzLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGdyb3VwRWxlbWVudHNDb3VudDsgaWR4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGVsZW1lbnQgPSBncm91cEVsZW1lbnRzW2lkeF07XG4gICAgICAgICAgICAgICAgICAgIGxldCBlbGVtZW50U2l6ZSA9IHRoaXMuZWxlbWVudFNpemUoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBncm91cEVsZW1lbnRTdGFydCA9IGdyb3VwU3RhcnQgKyB0aGlzLmFsaWduU3RhcnQoZWxlbWVudFNpemVbZ3JvdXBTaXplRmllbGRdLCBncm91cC5ncm91cFNpemUpO1xuXG4gICAgICAgICAgICAgICAgICAgIGxldCBlbGVtZW50Qm94ID0gbmV3IEJveCgpO1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50Qm94W2dyb3VwQXhpcyArIDFdID0gZ3JvdXBFbGVtZW50U3RhcnQ7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnRCb3hbZ3JvdXBBeGlzICsgMl0gPSBncm91cEVsZW1lbnRTdGFydCArIGVsZW1lbnRTaXplW2dyb3VwU2l6ZUZpZWxkXTtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudEJveFtlbGVtZW50QXhpcyArIDFdID0gZWxlbWVudFN0YXJ0O1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50Qm94W2VsZW1lbnRBeGlzICsgMl0gPSBlbGVtZW50U3RhcnQgKyBlbGVtZW50U2l6ZVtlbGVtZW50U2l6ZUZpZWxkXTtcblxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnJlZmxvdyhlbGVtZW50Qm94KTtcblxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50U3RhcnQgKz0gZWxlbWVudFNpemVbZWxlbWVudFNpemVGaWVsZF0gKyB0aGlzLmVsZW1lbnRTcGFjaW5nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBncm91cFN0YXJ0ICs9IGdyb3VwLmdyb3VwU2l6ZSArIHRoaXMuZ3JvdXBTcGFjaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYm94W2dyb3VwQXhpcyArIDFdID0gZ3JvdXBzU3RhcnQ7XG4gICAgICAgICAgICBib3hbZ3JvdXBBeGlzICsgMl0gPSBncm91cHNTdGFydCArIGdyb3Vwc1NpemU7XG4gICAgICAgICAgICBib3hbZWxlbWVudEF4aXMgKyAyXSA9IGJveFtlbGVtZW50QXhpcyArIDFdICsgbWF4R3JvdXBFbGVtZW50c1NpemU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhbGlnblN0YXJ0KHNpemUsIG1heFNpemUpIHtcbiAgICAgICAgbGV0IHN0YXJ0ID0gMDtcbiAgICAgICAgY29uc3QgYWxpZ24gPSB0aGlzLm9wdGlvbnMuYWxpZ247XG4gICAgICAgIGlmIChhbGlnbiA9PT0gUklHSFQgfHwgYWxpZ24gPT09IEJPVFRPTSkge1xuICAgICAgICAgICAgc3RhcnQgPSBtYXhTaXplIC0gc2l6ZTtcbiAgICAgICAgfSBlbHNlIGlmIChhbGlnbiA9PT0gQ0VOVEVSKSB7XG4gICAgICAgICAgICBzdGFydCA9IChtYXhTaXplIC0gc2l6ZSkgLyAyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdGFydDtcbiAgICB9XG5cbiAgICBncm91cE9wdGlvbnMoKSB7XG4gICAgICAgIGNvbnN0IHsgYm94LCBjaGlsZHJlbiwgZWxlbWVudFNpemVGaWVsZCwgZ3JvdXBTaXplRmllbGQsIGVsZW1lbnRTcGFjaW5nLCBncm91cFNwYWNpbmcgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IG1heFNpemUgPSByb3VuZChib3hbZWxlbWVudFNpemVGaWVsZF0oKSk7XG4gICAgICAgIGNvbnN0IGNoaWxkcmVuQ291bnQgPSBjaGlsZHJlbi5sZW5ndGg7XG4gICAgICAgIGNvbnN0IGdyb3VwcyA9IFtdO1xuXG4gICAgICAgIGxldCBncm91cFNpemUgPSAwO1xuICAgICAgICBsZXQgZ3JvdXBFbGVtZW50c1NpemUgPSAwO1xuICAgICAgICBsZXQgZ3JvdXBzU2l6ZSA9IDA7XG4gICAgICAgIGxldCBtYXhHcm91cEVsZW1lbnRzU2l6ZSA9IDA7XG4gICAgICAgIGxldCBncm91cEVsZW1lbnRzID0gW107XG5cbiAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgY2hpbGRyZW5Db3VudDsgaWR4KyspIHtcbiAgICAgICAgICAgIGxldCBlbGVtZW50ID0gY2hpbGRyZW5baWR4XTtcbiAgICAgICAgICAgIGlmICghZWxlbWVudC5ib3gpIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LnJlZmxvdyhib3gpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgZWxlbWVudFNpemUgPSB0aGlzLmVsZW1lbnRTaXplKGVsZW1lbnQpO1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy53cmFwICYmIHJvdW5kKGdyb3VwRWxlbWVudHNTaXplICsgZWxlbWVudFNwYWNpbmcgKyBlbGVtZW50U2l6ZVtlbGVtZW50U2l6ZUZpZWxkXSkgPiBtYXhTaXplKSB7XG4gICAgICAgICAgICAgICAgZ3JvdXBzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBncm91cEVsZW1lbnRzOiBncm91cEVsZW1lbnRzLFxuICAgICAgICAgICAgICAgICAgICBncm91cFNpemU6IGdyb3VwU2l6ZSxcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXBFbGVtZW50c1NpemU6IGdyb3VwRWxlbWVudHNTaXplXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgbWF4R3JvdXBFbGVtZW50c1NpemUgPSBNYXRoLm1heChtYXhHcm91cEVsZW1lbnRzU2l6ZSwgZ3JvdXBFbGVtZW50c1NpemUpO1xuICAgICAgICAgICAgICAgIGdyb3Vwc1NpemUgKz0gZ3JvdXBTcGFjaW5nICsgZ3JvdXBTaXplO1xuICAgICAgICAgICAgICAgIGdyb3VwU2l6ZSA9IDA7XG4gICAgICAgICAgICAgICAgZ3JvdXBFbGVtZW50c1NpemUgPSAwO1xuICAgICAgICAgICAgICAgIGdyb3VwRWxlbWVudHMgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGdyb3VwU2l6ZSA9IE1hdGgubWF4KGdyb3VwU2l6ZSwgZWxlbWVudFNpemVbZ3JvdXBTaXplRmllbGRdKTtcbiAgICAgICAgICAgIGlmIChncm91cEVsZW1lbnRzU2l6ZSA+IDApIHtcbiAgICAgICAgICAgICAgICBncm91cEVsZW1lbnRzU2l6ZSArPSBlbGVtZW50U3BhY2luZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGdyb3VwRWxlbWVudHNTaXplICs9IGVsZW1lbnRTaXplW2VsZW1lbnRTaXplRmllbGRdO1xuICAgICAgICAgICAgZ3JvdXBFbGVtZW50cy5wdXNoKGVsZW1lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgZ3JvdXBzLnB1c2goe1xuICAgICAgICAgICAgZ3JvdXBFbGVtZW50czogZ3JvdXBFbGVtZW50cyxcbiAgICAgICAgICAgIGdyb3VwU2l6ZTogZ3JvdXBTaXplLFxuICAgICAgICAgICAgZ3JvdXBFbGVtZW50c1NpemU6IGdyb3VwRWxlbWVudHNTaXplXG4gICAgICAgIH0pO1xuICAgICAgICBtYXhHcm91cEVsZW1lbnRzU2l6ZSA9IE1hdGgubWF4KG1heEdyb3VwRWxlbWVudHNTaXplLCBncm91cEVsZW1lbnRzU2l6ZSk7XG4gICAgICAgIGdyb3Vwc1NpemUgKz0gZ3JvdXBTaXplO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBncm91cHM6IGdyb3VwcyxcbiAgICAgICAgICAgIGdyb3Vwc1NpemU6IGdyb3Vwc1NpemUsXG4gICAgICAgICAgICBtYXhHcm91cEVsZW1lbnRzU2l6ZTogbWF4R3JvdXBFbGVtZW50c1NpemVcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBlbGVtZW50U2l6ZShlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB3aWR0aDogZWxlbWVudC5ib3gud2lkdGgoKSxcbiAgICAgICAgICAgIGhlaWdodDogZWxlbWVudC5ib3guaGVpZ2h0KClcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBjcmVhdGVWaXN1YWwoKSB7fVxufVxuXG5zZXREZWZhdWx0T3B0aW9ucyhGbG9hdEVsZW1lbnQsIHtcbiAgICB2ZXJ0aWNhbDogdHJ1ZSxcbiAgICB3cmFwOiB0cnVlLFxuICAgIHZTcGFjaW5nOiAwLFxuICAgIHNwYWNpbmc6IDBcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBGbG9hdEVsZW1lbnQ7IiwiaW1wb3J0IHsgZHJhd2luZyBhcyBkcmF3IH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWRyYXdpbmcnO1xuXG5pbXBvcnQgQ2hhcnRFbGVtZW50IGZyb20gJy4vY2hhcnQtZWxlbWVudCc7XG5pbXBvcnQgQm94IGZyb20gJy4vYm94JztcblxuaW1wb3J0IHsgREVGQVVMVF9GT05ULCBCTEFDSyB9IGZyb20gJy4uL2NvbW1vbi9jb25zdGFudHMnO1xuaW1wb3J0IHsgc2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tICcuLi9jb21tb24nO1xuXG5jb25zdCBEcmF3aW5nVGV4dCA9IGRyYXcuVGV4dDtcblxuY2xhc3MgVGV4dCBleHRlbmRzIENoYXJ0RWxlbWVudCB7XG5cbiAgICBjb25zdHJ1Y3Rvcihjb250ZW50LCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuXG4gICAgICAgIHRoaXMuY29udGVudCA9IGNvbnRlbnQ7XG5cbiAgICAgICAgLy8gQ2FsY3VsYXRlIHNpemVcbiAgICAgICAgdGhpcy5yZWZsb3cobmV3IEJveCgpKTtcbiAgICB9XG5cbiAgICByZWZsb3codGFyZ2V0Qm94KSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHNpemUgPSBvcHRpb25zLnNpemUgPSBkcmF3LnV0aWwubWVhc3VyZVRleHQodGhpcy5jb250ZW50LCB7IGZvbnQ6IG9wdGlvbnMuZm9udCB9KTtcblxuICAgICAgICB0aGlzLmJhc2VsaW5lID0gc2l6ZS5iYXNlbGluZTtcblxuICAgICAgICB0aGlzLmJveCA9IG5ldyBCb3godGFyZ2V0Qm94LngxLCB0YXJnZXRCb3gueTEsXG4gICAgICAgICAgICAgICAgdGFyZ2V0Qm94LngxICsgc2l6ZS53aWR0aCwgdGFyZ2V0Qm94LnkxICsgc2l6ZS5oZWlnaHQpO1xuICAgIH1cblxuICAgIGNyZWF0ZVZpc3VhbCgpIHtcbiAgICAgICAgY29uc3QgeyBmb250LCBjb2xvciwgb3BhY2l0eSwgY3Vyc29yIH0gPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAgICAgdGhpcy52aXN1YWwgPSBuZXcgRHJhd2luZ1RleHQodGhpcy5jb250ZW50LCB0aGlzLmJveC50b1JlY3QoKS50b3BMZWZ0KCksIHtcbiAgICAgICAgICAgIGZvbnQ6IGZvbnQsXG4gICAgICAgICAgICBmaWxsOiB7IGNvbG9yOiBjb2xvciwgb3BhY2l0eTogb3BhY2l0eSB9LFxuICAgICAgICAgICAgY3Vyc29yOiBjdXJzb3JcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5zZXREZWZhdWx0T3B0aW9ucyhUZXh0LCB7XG4gICAgZm9udDogREVGQVVMVF9GT05ULFxuICAgIGNvbG9yOiBCTEFDS1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IFRleHQ7XG4iLCJpbXBvcnQgQm94IGZyb20gJy4uL2JveCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlY3RUb0JveChyZWN0KSB7XG4gICAgY29uc3Qgb3JpZ2luID0gcmVjdC5vcmlnaW47XG4gICAgY29uc3QgYm90dG9tUmlnaHQgPSByZWN0LmJvdHRvbVJpZ2h0KCk7XG5cbiAgICByZXR1cm4gbmV3IEJveChvcmlnaW4ueCwgb3JpZ2luLnksIGJvdHRvbVJpZ2h0LngsIGJvdHRvbVJpZ2h0LnkpO1xufSIsImltcG9ydCB7IGRyYXdpbmcgYXMgZHJhdywgZ2VvbWV0cnkgYXMgZ2VvbSB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1kcmF3aW5nJztcblxuaW1wb3J0IEJveEVsZW1lbnQgZnJvbSAnLi9ib3gtZWxlbWVudCc7XG5pbXBvcnQgRmxvYXRFbGVtZW50IGZyb20gJy4vZmxvYXQtZWxlbWVudCc7XG5pbXBvcnQgVGV4dCBmcm9tICcuL3RleHQnO1xuaW1wb3J0IEJveCBmcm9tICcuL2JveCc7XG5cbmltcG9ydCByZWN0VG9Cb3ggZnJvbSAnLi91dGlscy9yZWN0LXRvLWJveCc7XG5cbmltcG9ydCB7IGdldFNwYWNpbmcsIGRlZXBFeHRlbmQsIGRlZmluZWQgfSBmcm9tICcuLi9jb21tb24nO1xuaW1wb3J0IHsgWCwgWSB9IGZyb20gJy4uL2NvbW1vbi9jb25zdGFudHMnO1xuXG5jb25zdCBST1dTX1NQTElUX1JFR0VYID0gL1xcbi9tO1xuXG5jbGFzcyBUZXh0Qm94IGV4dGVuZHMgQm94RWxlbWVudCB7XG5cbiAgICBjb25zdHJ1Y3Rvcihjb250ZW50LCBvcHRpb25zLCBkYXRhKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmNvbnRlbnQgPSBjb250ZW50O1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuXG4gICAgICAgIHRoaXMuX2luaXRDb250YWluZXIoKTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5fYXV0b1JlZmxvdyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRoaXMucmVmbG93KG5ldyBCb3goKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfaW5pdENvbnRhaW5lcigpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3Qgcm93cyA9IFN0cmluZyh0aGlzLmNvbnRlbnQpLnNwbGl0KFJPV1NfU1BMSVRfUkVHRVgpO1xuICAgICAgICBjb25zdCBmbG9hdEVsZW1lbnQgPSBuZXcgRmxvYXRFbGVtZW50KHsgdmVydGljYWw6IHRydWUsIGFsaWduOiBvcHRpb25zLmFsaWduLCB3cmFwOiBmYWxzZSB9KTtcbiAgICAgICAgY29uc3QgdGV4dE9wdGlvbnMgPSBkZWVwRXh0ZW5kKHsgfSwgb3B0aW9ucywgeyBvcGFjaXR5OiAxLCBhbmltYXRpb246IG51bGwgfSk7XG5cbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBmbG9hdEVsZW1lbnQ7XG4gICAgICAgIHRoaXMuYXBwZW5kKGZsb2F0RWxlbWVudCk7XG5cbiAgICAgICAgZm9yIChsZXQgcm93SWR4ID0gMDsgcm93SWR4IDwgcm93cy5sZW5ndGg7IHJvd0lkeCsrKSB7XG4gICAgICAgICAgICBsZXQgdGV4dCA9IG5ldyBUZXh0KHJvd3Nbcm93SWR4XS50cmltKCksIHRleHRPcHRpb25zKTtcbiAgICAgICAgICAgIGZsb2F0RWxlbWVudC5hcHBlbmQodGV4dCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZWZsb3codGFyZ2V0Qm94KSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHZpc3VhbEZuID0gb3B0aW9ucy52aXN1YWw7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLm9wdGlvbnMuYWxpZ24gPSBvcHRpb25zLmFsaWduO1xuXG4gICAgICAgIGlmICh2aXN1YWxGbiAmJiAhdGhpcy5fYm94UmVmbG93KSB7XG4gICAgICAgICAgICBsZXQgdmlzdWFsQm94ID0gdGFyZ2V0Qm94O1xuICAgICAgICAgICAgaWYgKCF2aXN1YWxCb3guaGFzU2l6ZSgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYm94UmVmbG93ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlZmxvdyh2aXN1YWxCb3gpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2JveFJlZmxvdyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHZpc3VhbEJveCA9IHRoaXMuYm94O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdmlzdWFsID0gdGhpcy52aXN1YWwgPSB2aXN1YWxGbih0aGlzLnZpc3VhbENvbnRleHQodmlzdWFsQm94KSk7XG5cbiAgICAgICAgICAgIGlmICh2aXN1YWwpIHtcbiAgICAgICAgICAgICAgICB2aXN1YWxCb3ggPSByZWN0VG9Cb3godmlzdWFsLmNsaXBwZWRCQm94KCkgfHwgbmV3IGdlb20uUmVjdCgpKTtcblxuICAgICAgICAgICAgICAgIHZpc3VhbC5vcHRpb25zLnpJbmRleCA9IG9wdGlvbnMuekluZGV4O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmJveCA9IHRoaXMuY29udGVudEJveCA9IHRoaXMucGFkZGluZ0JveCA9IHZpc3VhbEJveDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN1cGVyLnJlZmxvdyh0YXJnZXRCb3gpO1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5yb3RhdGlvbikge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1hcmdpbiA9IGdldFNwYWNpbmcob3B0aW9ucy5tYXJnaW4pO1xuICAgICAgICAgICAgICAgIGxldCBib3ggPSB0aGlzLmJveC51bnBhZChtYXJnaW4pO1xuXG4gICAgICAgICAgICAgICAgdGhpcy50YXJnZXRCb3ggPSB0YXJnZXRCb3g7XG4gICAgICAgICAgICAgICAgdGhpcy5ub3JtYWxCb3ggPSBib3guY2xvbmUoKTtcblxuICAgICAgICAgICAgICAgIGJveCA9IHRoaXMucm90YXRlKCk7XG4gICAgICAgICAgICAgICAgYm94LnRyYW5zbGF0ZShtYXJnaW4ubGVmdCAtIG1hcmdpbi5yaWdodCwgbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b20pO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5yb3RhdGVkQm94ID0gYm94LmNsb25lKCk7XG5cbiAgICAgICAgICAgICAgICBib3gucGFkKG1hcmdpbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjcmVhdGVWaXN1YWwoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAgICAgdGhpcy52aXN1YWwgPSBuZXcgZHJhdy5Hcm91cCh7XG4gICAgICAgICAgICB0cmFuc2Zvcm06IHRoaXMucm90YXRpb25UcmFuc2Zvcm0oKSxcbiAgICAgICAgICAgIHpJbmRleDogb3B0aW9ucy56SW5kZXgsXG4gICAgICAgICAgICBub2NsaXA6IG9wdGlvbnMubm9jbGlwXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh0aGlzLmhhc0JveCgpKSB7XG4gICAgICAgICAgICBjb25zdCBib3ggPSBkcmF3LlBhdGguZnJvbVJlY3QodGhpcy5wYWRkaW5nQm94LnRvUmVjdCgpLCB0aGlzLnZpc3VhbFN0eWxlKCkpO1xuICAgICAgICAgICAgdGhpcy52aXN1YWwuYXBwZW5kKGJveCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW5kZXJWaXN1YWwoKSB7XG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLnZpc2libGUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMudmlzdWFsKSB7XG4gICAgICAgICAgICBjb25zdCB2aXN1YWwgPSB0aGlzLnZpc3VhbDtcbiAgICAgICAgICAgIGlmICh2aXN1YWwgJiYgIWRlZmluZWQodmlzdWFsLm9wdGlvbnMubm9jbGlwKSkge1xuICAgICAgICAgICAgICAgIHZpc3VhbC5vcHRpb25zLm5vY2xpcCA9IHRoaXMub3B0aW9ucy5ub2NsaXA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmFkZFZpc3VhbCgpO1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVBbmltYXRpb24oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN1cGVyLnJlbmRlclZpc3VhbCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmlzdWFsQ29udGV4dCh0YXJnZXRCb3gpIHtcbiAgICAgICAgY29uc3QgY29udGV4dCA9IHtcbiAgICAgICAgICAgIHRleHQ6IHRoaXMuY29udGVudCxcbiAgICAgICAgICAgIHJlY3Q6IHRhcmdldEJveC50b1JlY3QoKSxcbiAgICAgICAgICAgIHNlbmRlcjogdGhpcy5nZXRTZW5kZXIoKSxcbiAgICAgICAgICAgIG9wdGlvbnM6IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICAgIGNyZWF0ZVZpc3VhbDogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX2JveFJlZmxvdyA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWZsb3codGFyZ2V0Qm94KTtcbiAgICAgICAgICAgICAgICB0aGlzLl9ib3hSZWZsb3cgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXREZWZhdWx0VmlzdWFsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGlmICh0aGlzLmRhdGEpIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oY29udGV4dCwgdGhpcy5kYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb250ZXh0O1xuICAgIH1cblxuICAgIGdldERlZmF1bHRWaXN1YWwoKSB7XG4gICAgICAgIHRoaXMuY3JlYXRlVmlzdWFsKCk7XG4gICAgICAgIHRoaXMucmVuZGVyQ2hpbGRyZW4oKTtcbiAgICAgICAgY29uc3QgdmlzdWFsID0gdGhpcy52aXN1YWw7XG4gICAgICAgIGRlbGV0ZSB0aGlzLnZpc3VhbDtcbiAgICAgICAgcmV0dXJuIHZpc3VhbDtcbiAgICB9XG5cbiAgICByb3RhdGUoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIHRoaXMuYm94LnJvdGF0ZShvcHRpb25zLnJvdGF0aW9uKTtcbiAgICAgICAgdGhpcy5hbGlnbih0aGlzLnRhcmdldEJveCwgWCwgb3B0aW9ucy5hbGlnbik7XG4gICAgICAgIHRoaXMuYWxpZ24odGhpcy50YXJnZXRCb3gsIFksIG9wdGlvbnMudkFsaWduKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuYm94O1xuICAgIH1cblxuICAgIHJvdGF0aW9uVHJhbnNmb3JtKCkge1xuICAgICAgICBjb25zdCByb3RhdGlvbiA9IHRoaXMub3B0aW9ucy5yb3RhdGlvbjtcbiAgICAgICAgaWYgKCFyb3RhdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB7IHg6IGN4LCB5OiBjeSB9ID0gdGhpcy5ub3JtYWxCb3guY2VudGVyKCk7XG4gICAgICAgIGNvbnN0IGJveENlbnRlciA9IHRoaXMucm90YXRlZEJveC5jZW50ZXIoKTtcblxuICAgICAgICByZXR1cm4gZ2VvbS50cmFuc2Zvcm0oKVxuICAgICAgICAgICAgICAgICAgIC50cmFuc2xhdGUoYm94Q2VudGVyLnggLSBjeCwgYm94Q2VudGVyLnkgLSBjeSlcbiAgICAgICAgICAgICAgICAgICAucm90YXRlKHJvdGF0aW9uLCBbIGN4LCBjeSBdKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRleHRCb3g7IiwiaW1wb3J0IENoYXJ0RWxlbWVudCBmcm9tICcuL2NoYXJ0LWVsZW1lbnQnO1xuaW1wb3J0IFRleHRCb3ggZnJvbSAnLi90ZXh0LWJveCc7XG5cbmltcG9ydCB7IFgsIEJMQUNLLCBUT1AsIENFTlRFUiB9IGZyb20gJy4uL2NvbW1vbi9jb25zdGFudHMnO1xuaW1wb3J0IHsgZ2V0U3BhY2luZywgc2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tICcuLi9jb21tb24nO1xuXG5jbGFzcyBUaXRsZSBleHRlbmRzIENoYXJ0RWxlbWVudCB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcblxuICAgICAgICB0aGlzLmFwcGVuZChcbiAgICAgICAgICAgIG5ldyBUZXh0Qm94KHRoaXMub3B0aW9ucy50ZXh0LCBPYmplY3QuYXNzaWduKHt9LCB0aGlzLm9wdGlvbnMsIHtcbiAgICAgICAgICAgICAgICB2QWxpZ246IHRoaXMub3B0aW9ucy5wb3NpdGlvblxuICAgICAgICAgICAgfSkpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcmVmbG93KHRhcmdldEJveCkge1xuICAgICAgICBzdXBlci5yZWZsb3codGFyZ2V0Qm94KTtcbiAgICAgICAgdGhpcy5ib3guc25hcFRvKHRhcmdldEJveCwgWCk7XG4gICAgfVxuXG4gICAgc3RhdGljIGJ1aWxkVGl0bGUob3B0aW9ucywgcGFyZW50LCBkZWZhdWx0T3B0aW9ucykge1xuICAgICAgICBsZXQgdGl0bGVPcHRpb25zID0gb3B0aW9ucztcblxuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHRpdGxlT3B0aW9ucyA9IHsgdGV4dDogb3B0aW9ucyB9O1xuICAgICAgICB9XG5cbiAgICAgICAgdGl0bGVPcHRpb25zID0gT2JqZWN0LmFzc2lnbih7IHZpc2libGU6IHRydWUgfSwgZGVmYXVsdE9wdGlvbnMsIHRpdGxlT3B0aW9ucyk7XG5cbiAgICAgICAgbGV0IHRpdGxlO1xuICAgICAgICBpZiAodGl0bGVPcHRpb25zICYmIHRpdGxlT3B0aW9ucy52aXNpYmxlICYmIHRpdGxlT3B0aW9ucy50ZXh0KSB7XG4gICAgICAgICAgICB0aXRsZSA9IG5ldyBUaXRsZSh0aXRsZU9wdGlvbnMpO1xuICAgICAgICAgICAgcGFyZW50LmFwcGVuZCh0aXRsZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGl0bGU7XG4gICAgfVxufVxuXG5zZXREZWZhdWx0T3B0aW9ucyhUaXRsZSwge1xuICAgIGNvbG9yOiBCTEFDSyxcbiAgICBwb3NpdGlvbjogVE9QLFxuICAgIGFsaWduOiBDRU5URVIsXG4gICAgbWFyZ2luOiBnZXRTcGFjaW5nKDUpLFxuICAgIHBhZGRpbmc6IGdldFNwYWNpbmcoNSlcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBUaXRsZTsiLCJpbXBvcnQgeyBnZW9tZXRyeSBhcyBnZW9tIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWRyYXdpbmcnO1xuXG5pbXBvcnQgVGV4dEJveCBmcm9tICcuL3RleHQtYm94JztcbmltcG9ydCBCb3ggZnJvbSAnLi9ib3gnO1xuXG5pbXBvcnQgcmVjdFRvQm94IGZyb20gJy4vdXRpbHMvcmVjdC10by1ib3gnO1xuXG5pbXBvcnQgeyBBWElTX0xBQkVMX0NMSUNLLCBDRU5URVIsIFRPUCwgQk9UVE9NLCBMRUZULCBERUZBVUxUX1BSRUNJU0lPTiwgWCwgWSB9IGZyb20gJy4uL2NvbW1vbi9jb25zdGFudHMnO1xuXG5pbXBvcnQgeyBldmVudEVsZW1lbnQsIHJvdW5kLCBzZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gJy4uL2NvbW1vbic7XG5cbmNsYXNzIEF4aXNMYWJlbCBleHRlbmRzIFRleHRCb3gge1xuICAgIGNvbnN0cnVjdG9yKHZhbHVlLCB0ZXh0LCBpbmRleCwgZGF0YUl0ZW0sIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIodGV4dCwgb3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLmluZGV4ID0gaW5kZXg7XG4gICAgICAgIHRoaXMuZGF0YUl0ZW0gPSBkYXRhSXRlbTtcbiAgICAgICAgdGhpcy5yZWZsb3cobmV3IEJveCgpKTtcbiAgICB9XG5cbiAgICB2aXN1YWxDb250ZXh0KHRhcmdldEJveCkge1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gc3VwZXIudmlzdWFsQ29udGV4dCh0YXJnZXRCb3gpO1xuXG4gICAgICAgIGNvbnRleHQudmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgICAgICBjb250ZXh0LmRhdGFJdGVtID0gdGhpcy5kYXRhSXRlbTtcbiAgICAgICAgY29udGV4dC5mb3JtYXQgPSB0aGlzLm9wdGlvbnMuZm9ybWF0O1xuICAgICAgICBjb250ZXh0LmN1bHR1cmUgPSB0aGlzLm9wdGlvbnMuY3VsdHVyZTtcblxuICAgICAgICByZXR1cm4gY29udGV4dDtcbiAgICB9XG5cbiAgICBjbGljayh3aWRnZXQsIGUpIHtcblxuICAgICAgICB3aWRnZXQudHJpZ2dlcihBWElTX0xBQkVMX0NMSUNLLCB7XG4gICAgICAgICAgICBlbGVtZW50OiBldmVudEVsZW1lbnQoZSksXG4gICAgICAgICAgICB2YWx1ZTogdGhpcy52YWx1ZSxcbiAgICAgICAgICAgIHRleHQ6IHRoaXMudGV4dCxcbiAgICAgICAgICAgIGluZGV4OiB0aGlzLmluZGV4LFxuICAgICAgICAgICAgZGF0YUl0ZW06IHRoaXMuZGF0YUl0ZW0sXG4gICAgICAgICAgICBheGlzOiB0aGlzLnBhcmVudC5vcHRpb25zXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJvdGF0ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5hbGlnblJvdGF0aW9uICE9PSBDRU5URVIpIHtcbiAgICAgICAgICAgIGNvbnN0IGJveCA9IHRoaXMubm9ybWFsQm94LnRvUmVjdCgpO1xuICAgICAgICAgICAgY29uc3QgdHJhbnNmb3JtID0gdGhpcy5yb3RhdGlvblRyYW5zZm9ybSgpO1xuXG4gICAgICAgICAgICB0aGlzLmJveCA9IHJlY3RUb0JveChib3guYmJveCh0cmFuc2Zvcm0ubWF0cml4KCkpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN1cGVyLnJvdGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuYm94O1xuICAgIH1cblxuICAgIHJvdGF0aW9uVHJhbnNmb3JtKCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCByb3RhdGlvbiA9IG9wdGlvbnMucm90YXRpb247XG4gICAgICAgIGlmICghcm90YXRpb24pIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuYWxpZ25Sb3RhdGlvbiA9PT0gQ0VOVEVSKSB7XG4gICAgICAgICAgICByZXR1cm4gc3VwZXIucm90YXRpb25UcmFuc2Zvcm0oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHJvdGF0aW9uTWF0cml4ID0gZ2VvbS50cmFuc2Zvcm0oKS5yb3RhdGUocm90YXRpb24pLm1hdHJpeCgpO1xuICAgICAgICBjb25zdCBib3ggPSB0aGlzLm5vcm1hbEJveC50b1JlY3QoKTtcbiAgICAgICAgY29uc3QgcmVjdCA9IHRoaXMudGFyZ2V0Qm94LnRvUmVjdCgpO1xuXG4gICAgICAgIGNvbnN0IHJvdGF0aW9uT3JpZ2luID0gb3B0aW9ucy5yb3RhdGlvbk9yaWdpbiB8fCBUT1A7XG4gICAgICAgIGNvbnN0IGFsaWduQXhpcyA9IHJvdGF0aW9uT3JpZ2luID09PSBUT1AgfHwgcm90YXRpb25PcmlnaW4gPT09IEJPVFRPTSA/IFggOiBZO1xuICAgICAgICBjb25zdCBkaXN0YW5jZUF4aXMgPSByb3RhdGlvbk9yaWdpbiA9PT0gVE9QIHx8IHJvdGF0aW9uT3JpZ2luID09PSBCT1RUT00gPyBZIDogWDtcbiAgICAgICAgY29uc3QgYXhpc0FuY2hvciA9IHJvdGF0aW9uT3JpZ2luID09PSBUT1AgfHwgcm90YXRpb25PcmlnaW4gPT09IExFRlQgPyByZWN0Lm9yaWdpbiA6IHJlY3QuYm90dG9tUmlnaHQoKTtcblxuICAgICAgICBjb25zdCB0b3BMZWZ0ID0gYm94LnRvcExlZnQoKS50cmFuc2Zvcm1Db3B5KHJvdGF0aW9uTWF0cml4KTtcbiAgICAgICAgY29uc3QgdG9wUmlnaHQgPSBib3gudG9wUmlnaHQoKS50cmFuc2Zvcm1Db3B5KHJvdGF0aW9uTWF0cml4KTtcbiAgICAgICAgY29uc3QgYm90dG9tUmlnaHQgPSBib3guYm90dG9tUmlnaHQoKS50cmFuc2Zvcm1Db3B5KHJvdGF0aW9uTWF0cml4KTtcbiAgICAgICAgY29uc3QgYm90dG9tTGVmdCA9IGJveC5ib3R0b21MZWZ0KCkudHJhbnNmb3JtQ29weShyb3RhdGlvbk1hdHJpeCk7XG4gICAgICAgIGNvbnN0IHJvdGF0ZWRCb3ggPSBnZW9tLlJlY3QuZnJvbVBvaW50cyh0b3BMZWZ0LCB0b3BSaWdodCwgYm90dG9tUmlnaHQsIGJvdHRvbUxlZnQpO1xuXG4gICAgICAgIGNvbnN0IHRyYW5zbGF0ZSA9IHtcbiAgICAgICAgICAgIFtkaXN0YW5jZUF4aXNdOiByZWN0Lm9yaWdpbltkaXN0YW5jZUF4aXNdIC0gcm90YXRlZEJveC5vcmlnaW5bZGlzdGFuY2VBeGlzXVxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IGRpc3RhbmNlTGVmdCA9IE1hdGguYWJzKHRvcExlZnRbZGlzdGFuY2VBeGlzXSArIHRyYW5zbGF0ZVtkaXN0YW5jZUF4aXNdIC0gYXhpc0FuY2hvcltkaXN0YW5jZUF4aXNdKTtcbiAgICAgICAgY29uc3QgZGlzdGFuY2VSaWdodCA9IE1hdGguYWJzKHRvcFJpZ2h0W2Rpc3RhbmNlQXhpc10gKyB0cmFuc2xhdGVbZGlzdGFuY2VBeGlzXSAtIGF4aXNBbmNob3JbZGlzdGFuY2VBeGlzXSk7XG5cbiAgICAgICAgbGV0IGFsaWduU3RhcnQsIGFsaWduRW5kO1xuXG4gICAgICAgIGlmIChyb3VuZChkaXN0YW5jZUxlZnQsIERFRkFVTFRfUFJFQ0lTSU9OKSA9PT0gcm91bmQoZGlzdGFuY2VSaWdodCwgREVGQVVMVF9QUkVDSVNJT04pKSB7XG4gICAgICAgICAgICBhbGlnblN0YXJ0ID0gdG9wTGVmdDtcbiAgICAgICAgICAgIGFsaWduRW5kID0gdG9wUmlnaHQ7XG4gICAgICAgIH0gZWxzZSBpZiAoZGlzdGFuY2VSaWdodCA8IGRpc3RhbmNlTGVmdCkge1xuICAgICAgICAgICAgYWxpZ25TdGFydCA9IHRvcFJpZ2h0O1xuICAgICAgICAgICAgYWxpZ25FbmQgPSBib3R0b21SaWdodDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFsaWduU3RhcnQgPSB0b3BMZWZ0O1xuICAgICAgICAgICAgYWxpZ25FbmQgPSBib3R0b21MZWZ0O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYWxpZ25DZW50ZXIgPSBhbGlnblN0YXJ0W2FsaWduQXhpc10gKyAoYWxpZ25FbmRbYWxpZ25BeGlzXSAtIGFsaWduU3RhcnRbYWxpZ25BeGlzXSkgLyAyO1xuICAgICAgICB0cmFuc2xhdGVbYWxpZ25BeGlzXSA9IHJlY3QuY2VudGVyKClbYWxpZ25BeGlzXSAtIGFsaWduQ2VudGVyO1xuXG4gICAgICAgIHJldHVybiBnZW9tLnRyYW5zZm9ybSgpXG4gICAgICAgICAgICAudHJhbnNsYXRlKHRyYW5zbGF0ZS54LCB0cmFuc2xhdGUueSlcbiAgICAgICAgICAgIC5yb3RhdGUocm90YXRpb24pO1xuICAgIH1cbn1cblxuc2V0RGVmYXVsdE9wdGlvbnMoQXhpc0xhYmVsLCB7XG4gICAgX2F1dG9SZWZsb3c6IGZhbHNlXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgQXhpc0xhYmVsO1xuIiwiaW1wb3J0IHsgZHJhd2luZyBhcyBkcmF3IH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWRyYXdpbmcnO1xuXG5pbXBvcnQgQm94RWxlbWVudCBmcm9tICcuL2JveC1lbGVtZW50JztcbmltcG9ydCBUZXh0Qm94IGZyb20gJy4vdGV4dC1ib3gnO1xuaW1wb3J0IFNoYXBlRWxlbWVudCBmcm9tICcuL3NoYXBlLWVsZW1lbnQnO1xuaW1wb3J0IEJveCBmcm9tICcuL2JveCc7XG5cbmltcG9ydCB7IENJUkNMRSwgVE9QLCBCT1RUT00sIExFRlQsIFJJR0hULCBDRU5URVIsIElOU0lERSwgT1VUU0lERSwgTk9URV9DTElDSywgTk9URV9IT1ZFUiwgTk9URV9MRUFWRSB9IGZyb20gJy4uL2NvbW1vbi9jb25zdGFudHMnO1xuaW1wb3J0IHsgYWxpZ25QYXRoVG9QaXhlbCwgZGVmaW5lZCwgZGVlcEV4dGVuZCwgZXZlbnRFbGVtZW50LCBnZXRUZW1wbGF0ZSwgaW5BcnJheSwgc2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tICcuLi9jb21tb24nO1xuXG5jb25zdCBERUZBVUxUX0lDT05fU0laRSA9IDc7XG5jb25zdCBERUZBVUxUX0xBQkVMX0NPTE9SID0gXCIjZmZmXCI7XG5cbmNsYXNzIE5vdGUgZXh0ZW5kcyBCb3hFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcihmaWVsZHMsIG9wdGlvbnMsIGNoYXJ0U2VydmljZSkge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcblxuICAgICAgICB0aGlzLmZpZWxkcyA9IGZpZWxkcztcbiAgICAgICAgdGhpcy5jaGFydFNlcnZpY2UgPSBjaGFydFNlcnZpY2U7XG5cbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICB9XG5cbiAgICBoaWRlKCkge1xuICAgICAgICB0aGlzLm9wdGlvbnMudmlzaWJsZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIHNob3coKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy52aXNpYmxlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMudmlzaWJsZSkge1xuICAgICAgICAgICAgY29uc3QgeyBsYWJlbCwgaWNvbiB9ID0gb3B0aW9ucztcbiAgICAgICAgICAgIGNvbnN0IGJveCA9IG5ldyBCb3goKTtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkQWxpYXMgPSAoKSA9PiB0aGlzO1xuICAgICAgICAgICAgbGV0IHNpemUgPSBpY29uLnNpemU7XG4gICAgICAgICAgICBsZXQgdGV4dCA9IHRoaXMuZmllbGRzLnRleHQ7XG4gICAgICAgICAgICBsZXQgd2lkdGgsIGhlaWdodDtcblxuICAgICAgICAgICAgaWYgKGRlZmluZWQobGFiZWwpICYmIGxhYmVsLnZpc2libGUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBub3RlVGVtcGxhdGUgPSBnZXRUZW1wbGF0ZShsYWJlbCk7XG4gICAgICAgICAgICAgICAgaWYgKG5vdGVUZW1wbGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0ID0gbm90ZVRlbXBsYXRlKHRoaXMuZmllbGRzKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGxhYmVsLmZvcm1hdCkge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0ID0gdGhpcy5jaGFydFNlcnZpY2UuZm9ybWF0LmF1dG8obGFiZWwuZm9ybWF0LCB0ZXh0KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoIWxhYmVsLmNvbG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsLmNvbG9yID0gbGFiZWwucG9zaXRpb24gPT09IElOU0lERSA/IERFRkFVTFRfTEFCRUxfQ09MT1IgOiBpY29uLmJhY2tncm91bmQ7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5sYWJlbCA9IG5ldyBUZXh0Qm94KHRleHQsIGRlZXBFeHRlbmQoe30sIGxhYmVsKSk7XG4gICAgICAgICAgICAgICAgdGhpcy5sYWJlbC5hbGlhc0ZvciA9IGNoaWxkQWxpYXM7XG5cbiAgICAgICAgICAgICAgICBpZiAobGFiZWwucG9zaXRpb24gPT09IElOU0lERSAmJiAhZGVmaW5lZChzaXplKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaWNvbi50eXBlID09PSBDSVJDTEUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemUgPSBNYXRoLm1heCh0aGlzLmxhYmVsLmJveC53aWR0aCgpLCB0aGlzLmxhYmVsLmJveC5oZWlnaHQoKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IHRoaXMubGFiZWwuYm94LndpZHRoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSB0aGlzLmxhYmVsLmJveC5oZWlnaHQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBib3gud3JhcCh0aGlzLmxhYmVsLmJveCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpY29uLndpZHRoID0gd2lkdGggfHwgc2l6ZSB8fCBERUZBVUxUX0lDT05fU0laRTtcbiAgICAgICAgICAgIGljb24uaGVpZ2h0ID0gaGVpZ2h0IHx8IHNpemUgfHwgREVGQVVMVF9JQ09OX1NJWkU7XG5cbiAgICAgICAgICAgIGNvbnN0IG1hcmtlciA9IG5ldyBTaGFwZUVsZW1lbnQoZGVlcEV4dGVuZCh7fSwgaWNvbikpO1xuICAgICAgICAgICAgbWFya2VyLmFsaWFzRm9yID0gY2hpbGRBbGlhcztcblxuICAgICAgICAgICAgdGhpcy5tYXJrZXIgPSBtYXJrZXI7XG4gICAgICAgICAgICB0aGlzLmFwcGVuZChtYXJrZXIpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5sYWJlbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYXBwZW5kKHRoaXMubGFiZWwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBtYXJrZXIucmVmbG93KG5ldyBCb3goKSk7XG4gICAgICAgICAgICB0aGlzLndyYXBwZXJCb3ggPSBib3gud3JhcChtYXJrZXIuYm94KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlZmxvdyh0YXJnZXRCb3gpIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zLCBsYWJlbCwgbWFya2VyLCB3cmFwcGVyQm94IH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBjZW50ZXIgPSB0YXJnZXRCb3guY2VudGVyKCk7XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IG9wdGlvbnMubGluZS5sZW5ndGg7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0gb3B0aW9ucy5wb3NpdGlvbjtcblxuICAgICAgICAvLyBUT0RPOiBSZXZpZXdcbiAgICAgICAgaWYgKG9wdGlvbnMudmlzaWJsZSkge1xuICAgICAgICAgICAgbGV0IGxpbmVTdGFydCwgYm94LCBjb250ZW50Qm94O1xuXG4gICAgICAgICAgICBpZiAoaW5BcnJheShwb3NpdGlvbiwgWyBMRUZULCBSSUdIVCBdKSkge1xuICAgICAgICAgICAgICAgIGlmIChwb3NpdGlvbiA9PT0gTEVGVCkge1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50Qm94ID0gd3JhcHBlckJveC5hbGlnblRvKHRhcmdldEJveCwgcG9zaXRpb24pLnRyYW5zbGF0ZSgtbGVuZ3RoLCB0YXJnZXRCb3guY2VudGVyKCkueSAtIHdyYXBwZXJCb3guY2VudGVyKCkueSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMubGluZS52aXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lU3RhcnQgPSBbIHRhcmdldEJveC54MSwgY2VudGVyLnkgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGluZVBvaW50cyA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lU3RhcnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgWyBjb250ZW50Qm94LngyLCBjZW50ZXIueSBdXG4gICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgYm94ID0gY29udGVudEJveC5jbG9uZSgpLndyYXBQb2ludChsaW5lU3RhcnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGVudEJveCA9IHdyYXBwZXJCb3guYWxpZ25Ubyh0YXJnZXRCb3gsIHBvc2l0aW9uKS50cmFuc2xhdGUobGVuZ3RoLCB0YXJnZXRCb3guY2VudGVyKCkueSAtIHdyYXBwZXJCb3guY2VudGVyKCkueSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMubGluZS52aXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lU3RhcnQgPSBbIHRhcmdldEJveC54MiwgY2VudGVyLnkgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGluZVBvaW50cyA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lU3RhcnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgWyBjb250ZW50Qm94LngxLCBjZW50ZXIueSBdXG4gICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgYm94ID0gY29udGVudEJveC5jbG9uZSgpLndyYXBQb2ludChsaW5lU3RhcnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAocG9zaXRpb24gPT09IEJPVFRPTSkge1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50Qm94ID0gd3JhcHBlckJveC5hbGlnblRvKHRhcmdldEJveCwgcG9zaXRpb24pLnRyYW5zbGF0ZSh0YXJnZXRCb3guY2VudGVyKCkueCAtIHdyYXBwZXJCb3guY2VudGVyKCkueCwgbGVuZ3RoKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5saW5lLnZpc2libGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVTdGFydCA9IFsgY2VudGVyLngsIHRhcmdldEJveC55MiBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5saW5lUG9pbnRzID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVTdGFydCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbIGNlbnRlci54LCBjb250ZW50Qm94LnkxIF1cbiAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgICAgICBib3ggPSBjb250ZW50Qm94LmNsb25lKCkud3JhcFBvaW50KGxpbmVTdGFydCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjb250ZW50Qm94ID0gd3JhcHBlckJveC5hbGlnblRvKHRhcmdldEJveCwgcG9zaXRpb24pLnRyYW5zbGF0ZSh0YXJnZXRCb3guY2VudGVyKCkueCAtIHdyYXBwZXJCb3guY2VudGVyKCkueCwgLWxlbmd0aCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMubGluZS52aXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5lU3RhcnQgPSBbIGNlbnRlci54LCB0YXJnZXRCb3gueTEgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGluZVBvaW50cyA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lU3RhcnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgWyBjZW50ZXIueCwgY29udGVudEJveC55MiBdXG4gICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgYm94ID0gY29udGVudEJveC5jbG9uZSgpLndyYXBQb2ludChsaW5lU3RhcnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobWFya2VyKSB7XG4gICAgICAgICAgICAgICAgbWFya2VyLnJlZmxvdyhjb250ZW50Qm94KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGxhYmVsKSB7XG4gICAgICAgICAgICAgICAgbGFiZWwucmVmbG93KGNvbnRlbnRCb3gpO1xuICAgICAgICAgICAgICAgIGlmIChtYXJrZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMubGFiZWwucG9zaXRpb24gPT09IE9VVFNJREUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsLmJveC5hbGlnblRvKG1hcmtlci5ib3gsIHBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsYWJlbC5yZWZsb3cobGFiZWwuYm94KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuY29udGVudEJveCA9IGNvbnRlbnRCb3g7XG4gICAgICAgICAgICB0aGlzLnRhcmdldEJveCA9IHRhcmdldEJveDtcbiAgICAgICAgICAgIHRoaXMuYm94ID0gYm94IHx8IGNvbnRlbnRCb3g7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjcmVhdGVWaXN1YWwoKSB7XG4gICAgICAgIHN1cGVyLmNyZWF0ZVZpc3VhbCgpO1xuICAgICAgICB0aGlzLnZpc3VhbC5vcHRpb25zLm5vY2xpcCA9IHRoaXMub3B0aW9ucy5ub2NsaXA7XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy52aXNpYmxlKSB7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUxpbmUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlclZpc3VhbCgpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgY3VzdG9tVmlzdWFsID0gb3B0aW9ucy52aXN1YWw7XG4gICAgICAgIGlmIChvcHRpb25zLnZpc2libGUgJiYgY3VzdG9tVmlzdWFsKSB7XG4gICAgICAgICAgICB0aGlzLnZpc3VhbCA9IGN1c3RvbVZpc3VhbChPYmplY3QuYXNzaWduKHRoaXMuZmllbGRzLCB7XG4gICAgICAgICAgICAgICAgc2VuZGVyOiB0aGlzLmdldFNlbmRlcigpLFxuICAgICAgICAgICAgICAgIHJlY3Q6IHRoaXMudGFyZ2V0Qm94LnRvUmVjdCgpLFxuICAgICAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogb3B0aW9ucy5iYWNrZ3JvdW5kLFxuICAgICAgICAgICAgICAgICAgICBib3JkZXI6IG9wdGlvbnMuYmFja2dyb3VuZCxcbiAgICAgICAgICAgICAgICAgICAgaWNvbjogb3B0aW9ucy5pY29uLFxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogb3B0aW9ucy5sYWJlbCxcbiAgICAgICAgICAgICAgICAgICAgbGluZTogb3B0aW9ucy5saW5lLFxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogb3B0aW9ucy5wb3NpdGlvbixcbiAgICAgICAgICAgICAgICAgICAgdmlzaWJsZTogb3B0aW9ucy52aXNpYmxlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjcmVhdGVWaXN1YWw6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVWaXN1YWwoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJDaGlsZHJlbigpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBkZWZhdWx0VmlzdWFsID0gdGhpcy52aXN1YWw7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnZpc3VhbDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRWaXN1YWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgdGhpcy5hZGRWaXN1YWwoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN1cGVyLnJlbmRlclZpc3VhbCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY3JlYXRlTGluZSgpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucy5saW5lO1xuXG4gICAgICAgIGlmICh0aGlzLmxpbmVQb2ludHMpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhdGggPSBkcmF3LlBhdGguZnJvbVBvaW50cyh0aGlzLmxpbmVQb2ludHMsIHtcbiAgICAgICAgICAgICAgICBzdHJva2U6IHtcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IG9wdGlvbnMuY29sb3IsXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBvcHRpb25zLndpZHRoLFxuICAgICAgICAgICAgICAgICAgICBkYXNoVHlwZTogb3B0aW9ucy5kYXNoVHlwZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBhbGlnblBhdGhUb1BpeGVsKHBhdGgpO1xuICAgICAgICAgICAgdGhpcy52aXN1YWwuYXBwZW5kKHBhdGgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2xpY2sod2lkZ2V0LCBlKSB7XG4gICAgICAgIGNvbnN0IGFyZ3MgPSB0aGlzLmV2ZW50QXJncyhlKTtcblxuICAgICAgICBpZiAoIXdpZGdldC50cmlnZ2VyKE5PVEVfQ0xJQ0ssIGFyZ3MpKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvdmVyKHdpZGdldCwgZSkge1xuICAgICAgICBjb25zdCBhcmdzID0gdGhpcy5ldmVudEFyZ3MoZSk7XG5cbiAgICAgICAgaWYgKCF3aWRnZXQudHJpZ2dlcihOT1RFX0hPVkVSLCBhcmdzKSkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb3V0KHdpZGdldCwgZSkge1xuICAgICAgICBjb25zdCBhcmdzID0gdGhpcy5ldmVudEFyZ3MoZSk7XG5cbiAgICAgICAgd2lkZ2V0LnRyaWdnZXIoTk9URV9MRUFWRSwgYXJncyk7XG4gICAgfVxuXG4gICAgZXZlbnRBcmdzKGUpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih0aGlzLmZpZWxkcywge1xuICAgICAgICAgICAgZWxlbWVudDogZXZlbnRFbGVtZW50KGUpLFxuICAgICAgICAgICAgdGV4dDogZGVmaW5lZChvcHRpb25zLmxhYmVsKSA/IG9wdGlvbnMubGFiZWwudGV4dCA6IFwiXCIsXG4gICAgICAgICAgICB2aXN1YWw6IHRoaXMudmlzdWFsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuc2V0RGVmYXVsdE9wdGlvbnMoTm90ZSwge1xuICAgIGljb246IHtcbiAgICAgICAgdmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgdHlwZTogQ0lSQ0xFXG4gICAgfSxcbiAgICBsYWJlbDoge1xuICAgICAgICBwb3NpdGlvbjogSU5TSURFLFxuICAgICAgICB2aXNpYmxlOiB0cnVlLFxuICAgICAgICBhbGlnbjogQ0VOVEVSLFxuICAgICAgICB2QWxpZ246IENFTlRFUlxuICAgIH0sXG4gICAgbGluZToge1xuICAgICAgICB2aXNpYmxlOiB0cnVlXG4gICAgfSxcbiAgICB2aXNpYmxlOiB0cnVlLFxuICAgIHBvc2l0aW9uOiBUT1AsXG4gICAgekluZGV4OiAyXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgTm90ZTsiLCJpbXBvcnQgeyBkcmF3aW5nIGFzIGRyYXcgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tZHJhd2luZyc7XG5cbmltcG9ydCB7IGFsaWduUGF0aFRvUGl4ZWwgfSBmcm9tICcuLi8uLi9jb21tb24nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVBeGlzVGljayhvcHRpb25zLCB0aWNrT3B0aW9ucykge1xuICAgIGNvbnN0IHsgdGlja1gsIHRpY2tZLCBwb3NpdGlvbiB9ID0gb3B0aW9ucztcblxuICAgIGNvbnN0IHRpY2sgPSBuZXcgZHJhdy5QYXRoKHtcbiAgICAgICAgc3Ryb2tlOiB7XG4gICAgICAgICAgICB3aWR0aDogdGlja09wdGlvbnMud2lkdGgsXG4gICAgICAgICAgICBjb2xvcjogdGlja09wdGlvbnMuY29sb3JcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKG9wdGlvbnMudmVydGljYWwpIHtcbiAgICAgICAgdGljay5tb3ZlVG8odGlja1gsIHBvc2l0aW9uKVxuICAgICAgICAgICAgLmxpbmVUbyh0aWNrWCArIHRpY2tPcHRpb25zLnNpemUsIHBvc2l0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aWNrLm1vdmVUbyhwb3NpdGlvbiwgdGlja1kpXG4gICAgICAgICAgICAubGluZVRvKHBvc2l0aW9uLCB0aWNrWSArIHRpY2tPcHRpb25zLnNpemUpO1xuICAgIH1cblxuICAgIGFsaWduUGF0aFRvUGl4ZWwodGljayk7XG5cbiAgICByZXR1cm4gdGljaztcbn0iLCJpbXBvcnQgeyBkcmF3aW5nIGFzIGRyYXcgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tZHJhd2luZyc7XG5cbmltcG9ydCB7IGFsaWduUGF0aFRvUGl4ZWwgfSBmcm9tICcuLi8uLi9jb21tb24nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVBeGlzR3JpZExpbmUob3B0aW9ucywgZ3JpZExpbmUpIHtcbiAgICBjb25zdCB7IGxpbmVTdGFydCwgbGluZUVuZCwgcG9zaXRpb24gfSA9IG9wdGlvbnM7XG5cbiAgICBjb25zdCBsaW5lID0gbmV3IGRyYXcuUGF0aCh7XG4gICAgICAgIHN0cm9rZToge1xuICAgICAgICAgICAgd2lkdGg6IGdyaWRMaW5lLndpZHRoLFxuICAgICAgICAgICAgY29sb3I6IGdyaWRMaW5lLmNvbG9yLFxuICAgICAgICAgICAgZGFzaFR5cGU6IGdyaWRMaW5lLmRhc2hUeXBlXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChvcHRpb25zLnZlcnRpY2FsKSB7XG4gICAgICAgIGxpbmUubW92ZVRvKGxpbmVTdGFydCwgcG9zaXRpb24pXG4gICAgICAgICAgICAubGluZVRvKGxpbmVFbmQsIHBvc2l0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBsaW5lLm1vdmVUbyhwb3NpdGlvbiwgbGluZVN0YXJ0KVxuICAgICAgICAgICAgLmxpbmVUbyhwb3NpdGlvbiwgbGluZUVuZCk7XG4gICAgfVxuXG4gICAgYWxpZ25QYXRoVG9QaXhlbChsaW5lKTtcblxuICAgIHJldHVybiBsaW5lO1xufSIsImltcG9ydCB7IGRyYXdpbmcgYXMgZHJhdywgZ2VvbWV0cnkgYXMgZ2VvbSB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1kcmF3aW5nJztcblxuaW1wb3J0IENoYXJ0RWxlbWVudCBmcm9tICcuL2NoYXJ0LWVsZW1lbnQnO1xuaW1wb3J0IFRleHRCb3ggZnJvbSAnLi90ZXh0LWJveCc7XG5pbXBvcnQgQXhpc0xhYmVsIGZyb20gJy4vYXhpcy1sYWJlbCc7XG5pbXBvcnQgTm90ZSBmcm9tICcuL25vdGUnO1xuaW1wb3J0IEJveCBmcm9tICcuL2JveCc7XG5pbXBvcnQgeyBDaGFydFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcyc7XG5cbmltcG9ydCBjcmVhdGVBeGlzVGljayBmcm9tICcuL3V0aWxzL2NyZWF0ZS1heGlzLXRpY2snO1xuaW1wb3J0IGNyZWF0ZUF4aXNHcmlkTGluZSBmcm9tICcuL3V0aWxzL2NyZWF0ZS1heGlzLWdyaWQtbGluZSc7XG5cbmltcG9ydCB7IE5PTkUsIEJMQUNLLCBDRU5URVIsIFRPUCwgQk9UVE9NLCBMRUZULCBSSUdIVCwgT1VUU0lERSwgWCwgWSwgV0lEVEgsIEhFSUdIVCB9IGZyb20gJy4uL2NvbW1vbi9jb25zdGFudHMnO1xuaW1wb3J0IHsgYWxpZ25QYXRoVG9QaXhlbCwgZGVlcEV4dGVuZCwgZ2V0VGVtcGxhdGUsIGdyZXAsIGRlZmluZWQsIGlzT2JqZWN0LCBpbkFycmF5LCBsaW1pdFZhbHVlLCByb3VuZCwgc2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tICcuLi9jb21tb24nO1xuXG5jbGFzcyBBeGlzIGV4dGVuZHMgQ2hhcnRFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zLCBjaGFydFNlcnZpY2UgPSBuZXcgQ2hhcnRTZXJ2aWNlKCkpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5jaGFydFNlcnZpY2UgPSBjaGFydFNlcnZpY2U7XG5cbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMudmlzaWJsZSkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zID0gZGVlcEV4dGVuZCh7fSwgdGhpcy5vcHRpb25zLCB7XG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgICAgIHZpc2libGU6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBsaW5lOiB7XG4gICAgICAgICAgICAgICAgICAgIHZpc2libGU6IGZhbHNlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBtYXJnaW46IDAsXG4gICAgICAgICAgICAgICAgbWFqb3JUaWNrU2l6ZTogMCxcbiAgICAgICAgICAgICAgICBtaW5vclRpY2tTaXplOiAwXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMub3B0aW9ucy5taW5vclRpY2tzID0gZGVlcEV4dGVuZCh7fSwge1xuICAgICAgICAgICAgY29sb3I6IHRoaXMub3B0aW9ucy5saW5lLmNvbG9yLFxuICAgICAgICAgICAgd2lkdGg6IHRoaXMub3B0aW9ucy5saW5lLndpZHRoLFxuICAgICAgICAgICAgdmlzaWJsZTogdGhpcy5vcHRpb25zLm1pbm9yVGlja1R5cGUgIT09IE5PTkVcbiAgICAgICAgfSwgdGhpcy5vcHRpb25zLm1pbm9yVGlja3MsIHtcbiAgICAgICAgICAgIHNpemU6IHRoaXMub3B0aW9ucy5taW5vclRpY2tTaXplLFxuICAgICAgICAgICAgYWxpZ246IHRoaXMub3B0aW9ucy5taW5vclRpY2tUeXBlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMub3B0aW9ucy5tYWpvclRpY2tzID0gZGVlcEV4dGVuZCh7fSwge1xuICAgICAgICAgICAgY29sb3I6IHRoaXMub3B0aW9ucy5saW5lLmNvbG9yLFxuICAgICAgICAgICAgd2lkdGg6IHRoaXMub3B0aW9ucy5saW5lLndpZHRoLFxuICAgICAgICAgICAgdmlzaWJsZTogdGhpcy5vcHRpb25zLm1ham9yVGlja1R5cGUgIT09IE5PTkVcbiAgICAgICAgfSwgdGhpcy5vcHRpb25zLm1ham9yVGlja3MsIHtcbiAgICAgICAgICAgIHNpemU6IHRoaXMub3B0aW9ucy5tYWpvclRpY2tTaXplLFxuICAgICAgICAgICAgYWxpZ246IHRoaXMub3B0aW9ucy5tYWpvclRpY2tUeXBlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuaW5pdEZpZWxkcygpO1xuXG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLl9kZWZlckxhYmVscykge1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVMYWJlbHMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY3JlYXRlVGl0bGUoKTtcbiAgICAgICAgdGhpcy5jcmVhdGVOb3RlcygpO1xuICAgIH1cblxuICAgIGluaXRGaWVsZHMoKSB7XG4gICAgfVxuXG4gICAgLy8gYWJzdHJhY3QgbGFiZWxzQ291bnQoKTogTnVtYmVyXG4gICAgLy8gYWJzdHJhY3QgY3JlYXRlQXhpc0xhYmVsKGluZGV4LCBvcHRpb25zKTogQXhpc0xhYmVsXG5cbiAgICBsYWJlbHNSYW5nZSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1pbjogdGhpcy5vcHRpb25zLmxhYmVscy5za2lwLFxuICAgICAgICAgICAgbWF4OiB0aGlzLmxhYmVsc0NvdW50KClcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBjcmVhdGVMYWJlbHMoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGFsaWduID0gb3B0aW9ucy52ZXJ0aWNhbCA/IFJJR0hUIDogQ0VOVEVSO1xuICAgICAgICBjb25zdCBsYWJlbE9wdGlvbnMgPSBkZWVwRXh0ZW5kKHsgfSwgb3B0aW9ucy5sYWJlbHMsIHtcbiAgICAgICAgICAgIGFsaWduOiBhbGlnbixcbiAgICAgICAgICAgIHpJbmRleDogb3B0aW9ucy56SW5kZXhcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHN0ZXAgPSBNYXRoLm1heCgxLCBsYWJlbE9wdGlvbnMuc3RlcCk7XG5cbiAgICAgICAgdGhpcy5jbGVhckxhYmVscygpO1xuXG4gICAgICAgIGlmIChsYWJlbE9wdGlvbnMudmlzaWJsZSkge1xuICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSB0aGlzLmxhYmVsc1JhbmdlKCk7XG4gICAgICAgICAgICBjb25zdCByb3RhdGlvbiA9IGxhYmVsT3B0aW9ucy5yb3RhdGlvbjtcblxuICAgICAgICAgICAgaWYgKGlzT2JqZWN0KHJvdGF0aW9uKSkge1xuICAgICAgICAgICAgICAgIGxhYmVsT3B0aW9ucy5hbGlnblJvdGF0aW9uID0gcm90YXRpb24uYWxpZ247XG4gICAgICAgICAgICAgICAgbGFiZWxPcHRpb25zLnJvdGF0aW9uID0gcm90YXRpb24uYW5nbGU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChsYWJlbE9wdGlvbnMucm90YXRpb24gPT09IFwiYXV0b1wiKSB7XG4gICAgICAgICAgICAgICAgbGFiZWxPcHRpb25zLnJvdGF0aW9uID0gMDtcbiAgICAgICAgICAgICAgICBvcHRpb25zLmF1dG9Sb3RhdGVMYWJlbHMgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKGxldCBpZHggPSByYW5nZS5taW47IGlkeCA8IHJhbmdlLm1heDsgaWR4ICs9IHN0ZXApIHtcbiAgICAgICAgICAgICAgICBsZXQgbGFiZWwgPSB0aGlzLmNyZWF0ZUF4aXNMYWJlbChpZHgsIGxhYmVsT3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgaWYgKGxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwZW5kKGxhYmVsKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sYWJlbHMucHVzaChsYWJlbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2xlYXJMYWJlbHMoKSB7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4gPSBncmVwKHRoaXMuY2hpbGRyZW4sIGNoaWxkID0+ICEoY2hpbGQgaW5zdGFuY2VvZiBBeGlzTGFiZWwpKTtcbiAgICAgICAgdGhpcy5sYWJlbHMgPSBbXTtcbiAgICB9XG5cbiAgICBjbGVhclRpdGxlKCkge1xuICAgICAgICBpZiAodGhpcy50aXRsZSkge1xuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbiA9IGdyZXAodGhpcy5jaGlsZHJlbiwgY2hpbGQgPT4gY2hpbGQgIT09IHRoaXMudGl0bGUpO1xuICAgICAgICAgICAgdGhpcy50aXRsZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNsZWFyKCkge1xuICAgICAgICB0aGlzLmNsZWFyTGFiZWxzKCk7XG4gICAgICAgIHRoaXMuY2xlYXJUaXRsZSgpO1xuICAgIH1cblxuICAgIGxpbmVCb3goKSB7XG4gICAgICAgIGNvbnN0IHsgb3B0aW9ucywgYm94IH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB2ZXJ0aWNhbCA9IG9wdGlvbnMudmVydGljYWw7XG4gICAgICAgIGNvbnN0IG1pcnJvciA9IG9wdGlvbnMubGFiZWxzLm1pcnJvcjtcbiAgICAgICAgY29uc3QgYXhpc1ggPSBtaXJyb3IgPyBib3gueDEgOiBib3gueDI7XG4gICAgICAgIGNvbnN0IGF4aXNZID0gbWlycm9yID8gYm94LnkyIDogYm94LnkxO1xuICAgICAgICBjb25zdCBsaW5lV2lkdGggPSBvcHRpb25zLmxpbmUud2lkdGggfHwgMDtcblxuICAgICAgICByZXR1cm4gdmVydGljYWwgP1xuICAgICAgICAgICAgbmV3IEJveChheGlzWCwgYm94LnkxLCBheGlzWCwgYm94LnkyIC0gbGluZVdpZHRoKSA6XG4gICAgICAgICAgICBuZXcgQm94KGJveC54MSwgYXhpc1ksIGJveC54MiAtIGxpbmVXaWR0aCwgYXhpc1kpO1xuICAgIH1cblxuICAgIGNyZWF0ZVRpdGxlKCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCB0aXRsZU9wdGlvbnMgPSBkZWVwRXh0ZW5kKHtcbiAgICAgICAgICAgIHJvdGF0aW9uOiBvcHRpb25zLnZlcnRpY2FsID8gLTkwIDogMCxcbiAgICAgICAgICAgIHRleHQ6IFwiXCIsXG4gICAgICAgICAgICB6SW5kZXg6IDEsXG4gICAgICAgICAgICB2aXN1YWxTaXplOiB0cnVlXG4gICAgICAgIH0sIG9wdGlvbnMudGl0bGUpO1xuXG4gICAgICAgIGlmICh0aXRsZU9wdGlvbnMudmlzaWJsZSAmJiB0aXRsZU9wdGlvbnMudGV4dCkge1xuICAgICAgICAgICAgY29uc3QgdGl0bGUgPSBuZXcgVGV4dEJveCh0aXRsZU9wdGlvbnMudGV4dCwgdGl0bGVPcHRpb25zKTtcbiAgICAgICAgICAgIHRoaXMuYXBwZW5kKHRpdGxlKTtcbiAgICAgICAgICAgIHRoaXMudGl0bGUgPSB0aXRsZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNyZWF0ZU5vdGVzKCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBub3RlcyA9IG9wdGlvbnMubm90ZXM7XG4gICAgICAgIGNvbnN0IGl0ZW1zID0gbm90ZXMuZGF0YSB8fCBbXTtcblxuICAgICAgICB0aGlzLm5vdGVzID0gW107XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgaXRlbSA9IGRlZXBFeHRlbmQoe30sIG5vdGVzLCBpdGVtc1tpXSk7XG4gICAgICAgICAgICBpdGVtLnZhbHVlID0gdGhpcy5wYXJzZU5vdGVWYWx1ZShpdGVtLnZhbHVlKTtcblxuICAgICAgICAgICAgY29uc3Qgbm90ZSA9IG5ldyBOb3RlKHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogaXRlbS52YWx1ZSxcbiAgICAgICAgICAgICAgICB0ZXh0OiBpdGVtLmxhYmVsLnRleHQsXG4gICAgICAgICAgICAgICAgZGF0YUl0ZW06IGl0ZW1cbiAgICAgICAgICAgIH0sIGl0ZW0sIHRoaXMuY2hhcnRTZXJ2aWNlKTtcblxuICAgICAgICAgICAgaWYgKG5vdGUub3B0aW9ucy52aXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRlZmluZWQobm90ZS5vcHRpb25zLnBvc2l0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy52ZXJ0aWNhbCAmJiAhaW5BcnJheShub3RlLm9wdGlvbnMucG9zaXRpb24sIFsgTEVGVCwgUklHSFQgXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vdGUub3B0aW9ucy5wb3NpdGlvbiA9IG9wdGlvbnMucmV2ZXJzZSA/IExFRlQgOiBSSUdIVDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghb3B0aW9ucy52ZXJ0aWNhbCAmJiAhaW5BcnJheShub3RlLm9wdGlvbnMucG9zaXRpb24sIFsgVE9QLCBCT1RUT00gXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vdGUub3B0aW9ucy5wb3NpdGlvbiA9IG9wdGlvbnMucmV2ZXJzZSA/IEJPVFRPTSA6IFRPUDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnZlcnRpY2FsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub3RlLm9wdGlvbnMucG9zaXRpb24gPSBvcHRpb25zLnJldmVyc2UgPyBMRUZUIDogUklHSFQ7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub3RlLm9wdGlvbnMucG9zaXRpb24gPSBvcHRpb25zLnJldmVyc2UgPyBCT1RUT00gOiBUT1A7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5hcHBlbmQobm90ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5ub3Rlcy5wdXNoKG5vdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcGFyc2VOb3RlVmFsdWUodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIHJlbmRlclZpc3VhbCgpIHtcbiAgICAgICAgc3VwZXIucmVuZGVyVmlzdWFsKCk7XG5cbiAgICAgICAgdGhpcy5jcmVhdGVQbG90QmFuZHMoKTtcbiAgICB9XG5cbiAgICBjcmVhdGVWaXN1YWwoKSB7XG4gICAgICAgIHN1cGVyLmNyZWF0ZVZpc3VhbCgpO1xuXG4gICAgICAgIHRoaXMuY3JlYXRlQmFja2dyb3VuZCgpO1xuICAgICAgICB0aGlzLmNyZWF0ZUxpbmUoKTtcbiAgICB9XG5cbiAgICBncmlkTGluZXNWaXN1YWwoKSB7XG4gICAgICAgIGxldCBncmlkTGluZXMgPSB0aGlzLl9ncmlkTGluZXM7XG4gICAgICAgIGlmICghZ3JpZExpbmVzKSB7XG4gICAgICAgICAgICBncmlkTGluZXMgPSB0aGlzLl9ncmlkTGluZXMgPSBuZXcgZHJhdy5Hcm91cCh7XG4gICAgICAgICAgICAgICAgekluZGV4OiAtMlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmFwcGVuZFZpc3VhbCh0aGlzLl9ncmlkTGluZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGdyaWRMaW5lcztcbiAgICB9XG5cbiAgICBjcmVhdGVUaWNrcyhsaW5lR3JvdXApIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgbGluZUJveCA9IHRoaXMubGluZUJveCgpO1xuICAgICAgICBjb25zdCBtaXJyb3IgPSBvcHRpb25zLmxhYmVscy5taXJyb3I7XG4gICAgICAgIGNvbnN0IG1ham9yVW5pdCA9IG9wdGlvbnMubWFqb3JUaWNrcy52aXNpYmxlID8gb3B0aW9ucy5tYWpvclVuaXQgOiAwO1xuICAgICAgICBjb25zdCB0aWNrTGluZU9wdGlvbnMgPSB7XG4gICAgICAgICAgICAvLyBUT0RPXG4gICAgICAgICAgICAvLyBfYWxpZ25MaW5lczogb3B0aW9ucy5fYWxpZ25MaW5lcyxcbiAgICAgICAgICAgIHZlcnRpY2FsOiBvcHRpb25zLnZlcnRpY2FsXG4gICAgICAgIH07XG5cbiAgICAgICAgZnVuY3Rpb24gcmVuZGVyKHRpY2tQb3NpdGlvbnMsIHRpY2tPcHRpb25zLCBza2lwVW5pdCkge1xuICAgICAgICAgICAgY29uc3QgY291bnQgPSB0aWNrUG9zaXRpb25zLmxlbmd0aDtcbiAgICAgICAgICAgIGNvbnN0IHN0ZXAgPSBNYXRoLm1heCgxLCB0aWNrT3B0aW9ucy5zdGVwKTtcblxuICAgICAgICAgICAgaWYgKHRpY2tPcHRpb25zLnZpc2libGUpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gdGlja09wdGlvbnMuc2tpcDsgaSA8IGNvdW50OyBpICs9IHN0ZXApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlZmluZWQoc2tpcFVuaXQpICYmIChpICUgc2tpcFVuaXQgPT09IDApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRpY2tMaW5lT3B0aW9ucy50aWNrWCA9IG1pcnJvciA/IGxpbmVCb3gueDIgOiBsaW5lQm94LngyIC0gdGlja09wdGlvbnMuc2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgdGlja0xpbmVPcHRpb25zLnRpY2tZID0gbWlycm9yID8gbGluZUJveC55MSAtIHRpY2tPcHRpb25zLnNpemUgOiBsaW5lQm94LnkxO1xuICAgICAgICAgICAgICAgICAgICB0aWNrTGluZU9wdGlvbnMucG9zaXRpb24gPSB0aWNrUG9zaXRpb25zW2ldO1xuXG4gICAgICAgICAgICAgICAgICAgIGxpbmVHcm91cC5hcHBlbmQoY3JlYXRlQXhpc1RpY2sodGlja0xpbmVPcHRpb25zLCB0aWNrT3B0aW9ucykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJlbmRlcih0aGlzLmdldE1ham9yVGlja1Bvc2l0aW9ucygpLCBvcHRpb25zLm1ham9yVGlja3MpO1xuICAgICAgICByZW5kZXIodGhpcy5nZXRNaW5vclRpY2tQb3NpdGlvbnMoKSwgb3B0aW9ucy5taW5vclRpY2tzLCBtYWpvclVuaXQgLyBvcHRpb25zLm1pbm9yVW5pdCk7XG4gICAgfVxuXG4gICAgY3JlYXRlTGluZSgpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgbGluZSA9IG9wdGlvbnMubGluZTtcbiAgICAgICAgY29uc3QgbGluZUJveCA9IHRoaXMubGluZUJveCgpO1xuXG4gICAgICAgIGlmIChsaW5lLndpZHRoID4gMCAmJiBsaW5lLnZpc2libGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhdGggPSBuZXcgZHJhdy5QYXRoKHtcbiAgICAgICAgICAgICAgICBzdHJva2U6IHtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IGxpbmUud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBsaW5lLmNvbG9yLFxuICAgICAgICAgICAgICAgICAgICBkYXNoVHlwZTogbGluZS5kYXNoVHlwZVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8qIFRPRE9cbiAgICAgICAgICAgICAgICB6SW5kZXg6IGxpbmUuekluZGV4LFxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcGF0aC5tb3ZlVG8obGluZUJveC54MSwgbGluZUJveC55MSlcbiAgICAgICAgICAgICAgICAubGluZVRvKGxpbmVCb3gueDIsIGxpbmVCb3gueTIpO1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5fYWxpZ25MaW5lcykge1xuICAgICAgICAgICAgICAgIGFsaWduUGF0aFRvUGl4ZWwocGF0aCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGdyb3VwID0gdGhpcy5fbGluZUdyb3VwID0gbmV3IGRyYXcuR3JvdXAoKTtcbiAgICAgICAgICAgIGdyb3VwLmFwcGVuZChwYXRoKTtcblxuICAgICAgICAgICAgdGhpcy52aXN1YWwuYXBwZW5kKGdyb3VwKTtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlVGlja3MoZ3JvdXApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0QWN0dWFsVGlja1NpemUoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGxldCB0aWNrU2l6ZSA9IDA7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMubWFqb3JUaWNrcy52aXNpYmxlICYmIG9wdGlvbnMubWlub3JUaWNrcy52aXNpYmxlKSB7XG4gICAgICAgICAgICB0aWNrU2l6ZSA9IE1hdGgubWF4KG9wdGlvbnMubWFqb3JUaWNrcy5zaXplLCBvcHRpb25zLm1pbm9yVGlja3Muc2l6ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5tYWpvclRpY2tzLnZpc2libGUpIHtcbiAgICAgICAgICAgIHRpY2tTaXplID0gb3B0aW9ucy5tYWpvclRpY2tzLnNpemU7XG4gICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5taW5vclRpY2tzLnZpc2libGUpIHtcbiAgICAgICAgICAgIHRpY2tTaXplID0gb3B0aW9ucy5taW5vclRpY2tzLnNpemU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGlja1NpemU7XG4gICAgfVxuXG4gICAgY3JlYXRlQmFja2dyb3VuZCgpIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zLCBib3ggfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGJhY2tncm91bmQgPSBvcHRpb25zLmJhY2tncm91bmQ7XG5cbiAgICAgICAgaWYgKGJhY2tncm91bmQpIHtcbiAgICAgICAgICAgIHRoaXMuX2JhY2tncm91bmRQYXRoID0gZHJhdy5QYXRoLmZyb21SZWN0KGJveC50b1JlY3QoKSwge1xuICAgICAgICAgICAgICAgIGZpbGw6IHtcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IGJhY2tncm91bmRcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHN0cm9rZTogbnVsbFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMudmlzdWFsLmFwcGVuZCh0aGlzLl9iYWNrZ3JvdW5kUGF0aCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjcmVhdGVQbG90QmFuZHMoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHBsb3RCYW5kcyA9IG9wdGlvbnMucGxvdEJhbmRzIHx8IFtdO1xuICAgICAgICBjb25zdCB2ZXJ0aWNhbCA9IG9wdGlvbnMudmVydGljYWw7XG4gICAgICAgIGNvbnN0IHBsb3RBcmVhID0gdGhpcy5wbG90QXJlYTtcblxuICAgICAgICBpZiAocGxvdEJhbmRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZ3JvdXAgPSB0aGlzLl9wbG90YmFuZEdyb3VwID0gbmV3IGRyYXcuR3JvdXAoe1xuICAgICAgICAgICAgekluZGV4OiAtMVxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBhbHRBeGlzID0gZ3JlcCh0aGlzLnBhbmUuYXhlcywgYXhpcyA9PiBheGlzLm9wdGlvbnMudmVydGljYWwgIT09IHRoaXMub3B0aW9ucy52ZXJ0aWNhbClbMF07XG5cbiAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgcGxvdEJhbmRzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgICAgIGxldCBpdGVtID0gcGxvdEJhbmRzW2lkeF07XG4gICAgICAgICAgICBsZXQgc2xvdFgsIHNsb3RZO1xuICAgICAgICAgICAgbGV0IGxhYmVsT3B0aW9ucyA9IGl0ZW0ubGFiZWw7XG4gICAgICAgICAgICBsZXQgbGFiZWw7XG5cbiAgICAgICAgICAgIGlmICh2ZXJ0aWNhbCkge1xuICAgICAgICAgICAgICAgIHNsb3RYID0gKGFsdEF4aXMgfHwgcGxvdEFyZWEuYXhpc1gpLmxpbmVCb3goKTtcbiAgICAgICAgICAgICAgICBzbG90WSA9IHRoaXMuZ2V0U2xvdChpdGVtLmZyb20sIGl0ZW0udG8sIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzbG90WCA9IHRoaXMuZ2V0U2xvdChpdGVtLmZyb20sIGl0ZW0udG8sIHRydWUpO1xuICAgICAgICAgICAgICAgIHNsb3RZID0gKGFsdEF4aXMgfHwgcGxvdEFyZWEuYXhpc1kpLmxpbmVCb3goKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGxhYmVsT3B0aW9ucykge1xuICAgICAgICAgICAgICAgIGxhYmVsT3B0aW9ucy52QWxpZ24gPSBsYWJlbE9wdGlvbnMucG9zaXRpb24gfHwgTEVGVDtcbiAgICAgICAgICAgICAgICBsYWJlbCA9IHRoaXMuY3JlYXRlUGxvdEJhbmRMYWJlbChcbiAgICAgICAgICAgICAgICAgICAgbGFiZWxPcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICBpdGVtLFxuICAgICAgICAgICAgICAgICAgICBuZXcgQm94KFxuICAgICAgICAgICAgICAgICAgICAgICAgc2xvdFgueDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBzbG90WS55MSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsb3RYLngyLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2xvdFkueTJcbiAgICAgICAgICAgICAgICAgICAgKVxuXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHNsb3RYLndpZHRoKCkgIT09IDAgJiYgc2xvdFkuaGVpZ2h0KCkgIT09IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBiYW5kUmVjdCA9IG5ldyBnZW9tLlJlY3QoXG4gICAgICAgICAgICAgICAgICAgIFsgc2xvdFgueDEsIHNsb3RZLnkxIF0sXG4gICAgICAgICAgICAgICAgICAgIFsgc2xvdFgud2lkdGgoKSwgc2xvdFkuaGVpZ2h0KCkgXVxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBwYXRoID0gZHJhdy5QYXRoLmZyb21SZWN0KGJhbmRSZWN0LCB7XG4gICAgICAgICAgICAgICAgICAgIGZpbGw6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBpdGVtLmNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogaXRlbS5vcGFjaXR5XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZTogbnVsbFxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgZ3JvdXAuYXBwZW5kKHBhdGgpO1xuICAgICAgICAgICAgICAgIGlmIChsYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBncm91cC5hcHBlbmQobGFiZWwpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYXBwZW5kVmlzdWFsKGdyb3VwKTtcbiAgICB9XG5cbiAgICBjcmVhdGVQbG90QmFuZExhYmVsKGxhYmVsLCBpdGVtLCBib3gpIHtcblxuICAgICAgICBpZiAobGFiZWwudmlzaWJsZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHRleHQgPSBsYWJlbC50ZXh0O1xuICAgICAgICBsZXQgdGV4dGJveDtcblxuICAgICAgICBpZiAoZGVmaW5lZChsYWJlbCkgJiYgbGFiZWwudmlzaWJsZSkge1xuICAgICAgICAgICAgY29uc3QgbGFiZWxUZW1wbGF0ZSA9IGdldFRlbXBsYXRlKGxhYmVsKTtcbiAgICAgICAgICAgIGlmIChsYWJlbFRlbXBsYXRlKSB7XG4gICAgICAgICAgICAgICAgdGV4dCA9IGxhYmVsVGVtcGxhdGUoeyB0ZXh0OiB0ZXh0LCBpdGVtOiBpdGVtIH0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsYWJlbC5mb3JtYXQpIHtcbiAgICAgICAgICAgICAgICB0ZXh0ID0gdGhpcy5jaGFydFNlcnZpY2UuZm9ybWF0LmF1dG8obGFiZWwuZm9ybWF0LCB0ZXh0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFsYWJlbC5jb2xvcikge1xuICAgICAgICAgICAgICAgIGxhYmVsLmNvbG9yID0gdGhpcy5vcHRpb25zLmxhYmVscy5jb2xvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRleHRib3ggPSBuZXcgVGV4dEJveCh0ZXh0LCBsYWJlbCk7XG4gICAgICAgIHRleHRib3gucmVmbG93KGJveCk7XG4gICAgICAgIHRleHRib3gucmVuZGVyVmlzdWFsKCk7XG5cbiAgICAgICAgcmV0dXJuIHRleHRib3gudmlzdWFsO1xuICAgIH1cblxuICAgIGNyZWF0ZUdyaWRMaW5lcyhhbHRBeGlzKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHsgbWlub3JHcmlkTGluZXMsIG1ham9yR3JpZExpbmVzLCBtaW5vclVuaXQsIHZlcnRpY2FsIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCBheGlzTGluZVZpc2libGUgPSBhbHRBeGlzLm9wdGlvbnMubGluZS52aXNpYmxlO1xuICAgICAgICBjb25zdCBtYWpvclVuaXQgPSBtYWpvckdyaWRMaW5lcy52aXNpYmxlID8gb3B0aW9ucy5tYWpvclVuaXQgOiAwO1xuICAgICAgICBjb25zdCBsaW5lQm94ID0gYWx0QXhpcy5saW5lQm94KCk7XG4gICAgICAgIGNvbnN0IGxpbmVQb3MgPSBsaW5lQm94W3ZlcnRpY2FsID8gXCJ5MVwiIDogXCJ4MVwiXTtcbiAgICAgICAgY29uc3QgbGluZU9wdGlvbnMgPSB7XG4gICAgICAgICAgICBsaW5lU3RhcnQ6IGxpbmVCb3hbdmVydGljYWwgPyBcIngxXCIgOiBcInkxXCJdLFxuICAgICAgICAgICAgbGluZUVuZDogbGluZUJveFt2ZXJ0aWNhbCA/IFwieDJcIiA6IFwieTJcIl0sXG4gICAgICAgICAgICB2ZXJ0aWNhbDogdmVydGljYWxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgbWFqb3JUaWNrcyA9IFtdO1xuXG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuZ3JpZExpbmVzVmlzdWFsKCk7XG5cbiAgICAgICAgZnVuY3Rpb24gcmVuZGVyKHRpY2tQb3NpdGlvbnMsIGdyaWRMaW5lLCBza2lwVW5pdCkge1xuICAgICAgICAgICAgY29uc3QgY291bnQgPSB0aWNrUG9zaXRpb25zLmxlbmd0aDtcbiAgICAgICAgICAgIGNvbnN0IHN0ZXAgPSBNYXRoLm1heCgxLCBncmlkTGluZS5zdGVwKTtcblxuICAgICAgICAgICAgaWYgKGdyaWRMaW5lLnZpc2libGUpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gZ3JpZExpbmUuc2tpcDsgaSA8IGNvdW50OyBpICs9IHN0ZXApIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHBvcyA9IHJvdW5kKHRpY2tQb3NpdGlvbnNbaV0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWluQXJyYXkocG9zLCBtYWpvclRpY2tzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgJSBza2lwVW5pdCAhPT0gMCAmJiAoIWF4aXNMaW5lVmlzaWJsZSB8fCBsaW5lUG9zICE9PSBwb3MpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZU9wdGlvbnMucG9zaXRpb24gPSBwb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZChjcmVhdGVBeGlzR3JpZExpbmUobGluZU9wdGlvbnMsIGdyaWRMaW5lKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWpvclRpY2tzLnB1c2gocG9zKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJlbmRlcih0aGlzLmdldE1ham9yVGlja1Bvc2l0aW9ucygpLCBtYWpvckdyaWRMaW5lcyk7XG4gICAgICAgIHJlbmRlcih0aGlzLmdldE1pbm9yVGlja1Bvc2l0aW9ucygpLCBtaW5vckdyaWRMaW5lcywgbWFqb3JVbml0IC8gbWlub3JVbml0KTtcblxuICAgICAgICByZXR1cm4gY29udGFpbmVyLmNoaWxkcmVuO1xuICAgIH1cblxuICAgIHJlZmxvdyhib3gpIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zLCBsYWJlbHMsIHRpdGxlIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB2ZXJ0aWNhbCA9IG9wdGlvbnMudmVydGljYWw7XG4gICAgICAgIGNvbnN0IGNvdW50ID0gbGFiZWxzLmxlbmd0aDtcbiAgICAgICAgY29uc3Qgc2l6ZUZuID0gdmVydGljYWwgPyBXSURUSCA6IEhFSUdIVDtcbiAgICAgICAgY29uc3QgdGl0bGVTaXplID0gdGl0bGUgPyB0aXRsZS5ib3hbc2l6ZUZuXSgpIDogMDtcbiAgICAgICAgY29uc3Qgc3BhY2UgPSB0aGlzLmdldEFjdHVhbFRpY2tTaXplKCkgKyBvcHRpb25zLm1hcmdpbiArIHRpdGxlU2l6ZTtcbiAgICAgICAgY29uc3Qgcm9vdEJveCA9ICh0aGlzLmdldFJvb3QoKSB8fCB7fSkuYm94IHx8IGJveDtcbiAgICAgICAgY29uc3QgYm94U2l6ZSA9IHJvb3RCb3hbc2l6ZUZuXSgpO1xuICAgICAgICBsZXQgbWF4TGFiZWxTaXplID0gMDtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgICAgICAgIGxldCBsYWJlbFNpemUgPSBsYWJlbHNbaV0uYm94W3NpemVGbl0oKTtcbiAgICAgICAgICAgIGlmIChsYWJlbFNpemUgKyBzcGFjZSA8PSBib3hTaXplKSB7XG4gICAgICAgICAgICAgICAgbWF4TGFiZWxTaXplID0gTWF0aC5tYXgobWF4TGFiZWxTaXplLCBsYWJlbFNpemUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZlcnRpY2FsKSB7XG4gICAgICAgICAgICB0aGlzLmJveCA9IG5ldyBCb3goXG4gICAgICAgICAgICAgICAgYm94LngxLCBib3gueTEsXG4gICAgICAgICAgICAgICAgYm94LngxICsgbWF4TGFiZWxTaXplICsgc3BhY2UsIGJveC55MlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYm94ID0gbmV3IEJveChcbiAgICAgICAgICAgICAgICBib3gueDEsIGJveC55MSxcbiAgICAgICAgICAgICAgICBib3gueDIsIGJveC55MSArIG1heExhYmVsU2l6ZSArIHNwYWNlXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5hcnJhbmdlVGl0bGUoKTtcbiAgICAgICAgdGhpcy5hcnJhbmdlTGFiZWxzKCk7XG4gICAgICAgIHRoaXMuYXJyYW5nZU5vdGVzKCk7XG4gICAgfVxuXG4gICAgZ2V0TGFiZWxzVGlja1Bvc2l0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TWFqb3JUaWNrUG9zaXRpb25zKCk7XG4gICAgfVxuXG4gICAgbGFiZWxUaWNrSW5kZXgobGFiZWwpIHtcbiAgICAgICAgcmV0dXJuIGxhYmVsLmluZGV4O1xuICAgIH1cblxuICAgIGFycmFuZ2VMYWJlbHMoKSB7XG4gICAgICAgIGNvbnN0IHsgb3B0aW9ucywgbGFiZWxzIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBsYWJlbHNCZXR3ZWVuVGlja3MgPSB0aGlzLmxhYmVsc0JldHdlZW5UaWNrcygpO1xuICAgICAgICBjb25zdCB2ZXJ0aWNhbCA9IG9wdGlvbnMudmVydGljYWw7XG4gICAgICAgIGNvbnN0IGxpbmVCb3ggPSB0aGlzLmxpbmVCb3goKTtcbiAgICAgICAgY29uc3QgbWlycm9yID0gb3B0aW9ucy5sYWJlbHMubWlycm9yO1xuICAgICAgICBjb25zdCB0aWNrUG9zaXRpb25zID0gdGhpcy5nZXRMYWJlbHNUaWNrUG9zaXRpb25zKCk7XG4gICAgICAgIGNvbnN0IGxhYmVsT2Zmc2V0ID0gdGhpcy5nZXRBY3R1YWxUaWNrU2l6ZSgpICsgb3B0aW9ucy5tYXJnaW47XG5cbiAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgbGFiZWxzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgICAgIGNvbnN0IGxhYmVsID0gbGFiZWxzW2lkeF07XG4gICAgICAgICAgICBjb25zdCB0aWNrSXggPSB0aGlzLmxhYmVsVGlja0luZGV4KGxhYmVsKTtcbiAgICAgICAgICAgIGNvbnN0IGxhYmVsU2l6ZSA9IHZlcnRpY2FsID8gbGFiZWwuYm94LmhlaWdodCgpIDogbGFiZWwuYm94LndpZHRoKCk7XG4gICAgICAgICAgICBsZXQgbGFiZWxQb3MgPSB0aWNrUG9zaXRpb25zW3RpY2tJeF0gLSAobGFiZWxTaXplIC8gMik7XG4gICAgICAgICAgICBsZXQgbGFiZWxCb3gsIGZpcnN0VGlja1Bvc2l0aW9uLCBuZXh0VGlja1Bvc2l0aW9uO1xuXG4gICAgICAgICAgICBpZiAodmVydGljYWwpIHtcbiAgICAgICAgICAgICAgICBpZiAobGFiZWxzQmV0d2VlblRpY2tzKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpcnN0VGlja1Bvc2l0aW9uID0gdGlja1Bvc2l0aW9uc1t0aWNrSXhdO1xuICAgICAgICAgICAgICAgICAgICBuZXh0VGlja1Bvc2l0aW9uID0gdGlja1Bvc2l0aW9uc1t0aWNrSXggKyAxXTtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgbWlkZGxlID0gZmlyc3RUaWNrUG9zaXRpb24gKyAobmV4dFRpY2tQb3NpdGlvbiAtIGZpcnN0VGlja1Bvc2l0aW9uKSAvIDI7XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsUG9zID0gbWlkZGxlIC0gKGxhYmVsU2l6ZSAvIDIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCBsYWJlbFggPSBsaW5lQm94LngyO1xuXG4gICAgICAgICAgICAgICAgaWYgKG1pcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbFggKz0gbGFiZWxPZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsLm9wdGlvbnMucm90YXRpb25PcmlnaW4gPSBMRUZUO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsWCAtPSBsYWJlbE9mZnNldCArIGxhYmVsLmJveC53aWR0aCgpO1xuICAgICAgICAgICAgICAgICAgICBsYWJlbC5vcHRpb25zLnJvdGF0aW9uT3JpZ2luID0gUklHSFQ7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbGFiZWxCb3ggPSBsYWJlbC5ib3gubW92ZShsYWJlbFgsIGxhYmVsUG9zKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGxhYmVsc0JldHdlZW5UaWNrcykge1xuICAgICAgICAgICAgICAgICAgICBmaXJzdFRpY2tQb3NpdGlvbiA9IHRpY2tQb3NpdGlvbnNbdGlja0l4XTtcbiAgICAgICAgICAgICAgICAgICAgbmV4dFRpY2tQb3NpdGlvbiA9IHRpY2tQb3NpdGlvbnNbdGlja0l4ICsgMV07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZmlyc3RUaWNrUG9zaXRpb24gPSBsYWJlbFBvcztcbiAgICAgICAgICAgICAgICAgICAgbmV4dFRpY2tQb3NpdGlvbiA9IGxhYmVsUG9zICsgbGFiZWxTaXplO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCBsYWJlbFkgPSBsaW5lQm94LnkxO1xuXG4gICAgICAgICAgICAgICAgaWYgKG1pcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbFkgLT0gbGFiZWxPZmZzZXQgKyBsYWJlbC5ib3guaGVpZ2h0KCk7XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsLm9wdGlvbnMucm90YXRpb25PcmlnaW4gPSBCT1RUT007XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbGFiZWxZICs9IGxhYmVsT2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICBsYWJlbC5vcHRpb25zLnJvdGF0aW9uT3JpZ2luID0gVE9QO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxhYmVsQm94ID0gbmV3IEJveChmaXJzdFRpY2tQb3NpdGlvbiwgbGFiZWxZLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0VGlja1Bvc2l0aW9uLCBsYWJlbFkgKyBsYWJlbC5ib3guaGVpZ2h0KCkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsYWJlbC5yZWZsb3cobGFiZWxCb3gpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXV0b1JvdGF0ZUxhYmVscygpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5hdXRvUm90YXRlTGFiZWxzICYmICF0aGlzLm9wdGlvbnMudmVydGljYWwpIHtcbiAgICAgICAgICAgIGNvbnN0IHRpY2tQb3NpdGlvbnMgPSB0aGlzLmdldE1ham9yVGlja1Bvc2l0aW9ucygpO1xuICAgICAgICAgICAgY29uc3QgbGFiZWxzID0gdGhpcy5sYWJlbHM7XG4gICAgICAgICAgICBsZXQgYW5nbGU7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGxhYmVscy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgd2lkdGggPSBNYXRoLmFicyh0aWNrUG9zaXRpb25zW2lkeCArIDFdIC0gdGlja1Bvc2l0aW9uc1tpZHhdKTtcbiAgICAgICAgICAgICAgICBjb25zdCBsYWJlbEJveCA9IGxhYmVsc1tpZHhdLmJveDtcblxuICAgICAgICAgICAgICAgIGlmIChsYWJlbEJveC53aWR0aCgpID4gd2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxhYmVsQm94LmhlaWdodCgpID4gd2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ2xlID0gLTkwO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYW5nbGUgPSAtNDU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYW5nbGUpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBsYWJlbHMubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbHNbaWR4XS5vcHRpb25zLnJvdGF0aW9uID0gYW5nbGU7XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsc1tpZHhdLnJlZmxvdyhuZXcgQm94KCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFycmFuZ2VUaXRsZSgpIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zLCB0aXRsZSB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgbWlycm9yID0gb3B0aW9ucy5sYWJlbHMubWlycm9yO1xuICAgICAgICBjb25zdCB2ZXJ0aWNhbCA9IG9wdGlvbnMudmVydGljYWw7XG5cbiAgICAgICAgaWYgKHRpdGxlKSB7XG4gICAgICAgICAgICBpZiAodmVydGljYWwpIHtcbiAgICAgICAgICAgICAgICB0aXRsZS5vcHRpb25zLmFsaWduID0gbWlycm9yID8gUklHSFQgOiBMRUZUO1xuICAgICAgICAgICAgICAgIHRpdGxlLm9wdGlvbnMudkFsaWduID0gdGl0bGUub3B0aW9ucy5wb3NpdGlvbjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGl0bGUub3B0aW9ucy5hbGlnbiA9IHRpdGxlLm9wdGlvbnMucG9zaXRpb247XG4gICAgICAgICAgICAgICAgdGl0bGUub3B0aW9ucy52QWxpZ24gPSBtaXJyb3IgPyBUT1AgOiBCT1RUT007XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRpdGxlLnJlZmxvdyh0aGlzLmJveCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhcnJhbmdlTm90ZXMoKSB7XG4gICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IHRoaXMubm90ZXMubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMubm90ZXNbaWR4XTtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gaXRlbS5vcHRpb25zLnZhbHVlO1xuICAgICAgICAgICAgbGV0IHNsb3Q7XG5cbiAgICAgICAgICAgIGlmIChkZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNob3VsZFJlbmRlck5vdGUodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uc2hvdygpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uaGlkZSgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHNsb3QgPSB0aGlzLm5vdGVTbG90KHZhbHVlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaXRlbS5oaWRlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGl0ZW0ucmVmbG93KHNsb3QgfHwgdGhpcy5saW5lQm94KCkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbm90ZVNsb3QodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U2xvdCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgYWxpZ25UbyhzZWNvbmRBeGlzKSB7XG4gICAgICAgIGNvbnN0IGxpbmVCb3ggPSBzZWNvbmRBeGlzLmxpbmVCb3goKTtcbiAgICAgICAgY29uc3QgdmVydGljYWwgPSB0aGlzLm9wdGlvbnMudmVydGljYWw7XG4gICAgICAgIGNvbnN0IHBvcyA9IHZlcnRpY2FsID8gWSA6IFg7XG5cbiAgICAgICAgdGhpcy5ib3guc25hcFRvKGxpbmVCb3gsIHBvcyk7XG4gICAgICAgIGlmICh2ZXJ0aWNhbCkge1xuICAgICAgICAgICAgdGhpcy5ib3guc2hyaW5rKDAsIHRoaXMubGluZUJveCgpLmhlaWdodCgpIC0gbGluZUJveC5oZWlnaHQoKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmJveC5zaHJpbmsodGhpcy5saW5lQm94KCkud2lkdGgoKSAtIGxpbmVCb3gud2lkdGgoKSwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ib3hbcG9zICsgMV0gLT0gdGhpcy5saW5lQm94KClbcG9zICsgMV0gLSBsaW5lQm94W3BvcyArIDFdO1xuICAgICAgICB0aGlzLmJveFtwb3MgKyAyXSAtPSB0aGlzLmxpbmVCb3goKVtwb3MgKyAyXSAtIGxpbmVCb3hbcG9zICsgMl07XG4gICAgfVxuXG4gICAgYXhpc0xhYmVsVGV4dCh2YWx1ZSwgZGF0YUl0ZW0sIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgdG1wbCA9IGdldFRlbXBsYXRlKG9wdGlvbnMpO1xuICAgICAgICBsZXQgdGV4dCA9IHZhbHVlO1xuXG4gICAgICAgIGlmICh0bXBsKSB7XG4gICAgICAgICAgICB0ZXh0ID0gdG1wbCh7IHZhbHVlOiB2YWx1ZSwgZGF0YUl0ZW06IGRhdGFJdGVtLCBmb3JtYXQ6IG9wdGlvbnMuZm9ybWF0LCBjdWx0dXJlOiBvcHRpb25zLmN1bHR1cmUgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5mb3JtYXQpIHtcbiAgICAgICAgICAgIHRleHQgPSB0aGlzLmNoYXJ0U2VydmljZS5mb3JtYXQubG9jYWxlQXV0byhvcHRpb25zLmZvcm1hdCwgWyB2YWx1ZSBdLCBvcHRpb25zLmN1bHR1cmUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgfVxuXG4gICAgc2xvdChmcm9tICwgdG8sIGxpbWl0KSB7XG4gICAgICAgIGNvbnN0IHNsb3QgPSB0aGlzLmdldFNsb3QoZnJvbSwgdG8sIGxpbWl0KTtcbiAgICAgICAgaWYgKHNsb3QpIHtcbiAgICAgICAgICAgIHJldHVybiBzbG90LnRvUmVjdCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29udGVudEJveCgpIHtcbiAgICAgICAgY29uc3QgYm94ID0gdGhpcy5ib3guY2xvbmUoKTtcbiAgICAgICAgY29uc3QgbGFiZWxzID0gdGhpcy5sYWJlbHM7XG4gICAgICAgIGlmIChsYWJlbHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBheGlzID0gdGhpcy5vcHRpb25zLnZlcnRpY2FsID8gWSA6IFg7XG4gICAgICAgICAgICBpZiAodGhpcy5jaGFydFNlcnZpY2UuaXNQYW5uYWJsZShheGlzKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IHRoaXMubWF4TGFiZWxPZmZzZXQoKTtcbiAgICAgICAgICAgICAgICBib3hbYXhpcyArIDFdIC09IG9mZnNldC5zdGFydDtcbiAgICAgICAgICAgICAgICBib3hbYXhpcyArIDJdICs9IG9mZnNldC5lbmQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChsYWJlbHNbMF0ub3B0aW9ucy52aXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGJveC53cmFwKGxhYmVsc1swXS5ib3gpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBsYXN0TGFiZWwgPSBsYWJlbHNbbGFiZWxzLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgIGlmIChsYXN0TGFiZWwub3B0aW9ucy52aXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGJveC53cmFwKGxhc3RMYWJlbC5ib3gpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBib3g7XG4gICAgfVxuXG4gICAgbWF4TGFiZWxPZmZzZXQoKSB7XG4gICAgICAgIGNvbnN0IHsgdmVydGljYWwsIHJldmVyc2UgfSA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgbGFiZWxzQmV0d2VlblRpY2tzID0gdGhpcy5sYWJlbHNCZXR3ZWVuVGlja3MoKTtcbiAgICAgICAgY29uc3QgdGlja1Bvc2l0aW9ucyA9IHRoaXMuZ2V0TGFiZWxzVGlja1Bvc2l0aW9ucygpO1xuICAgICAgICBjb25zdCBvZmZzZXRGaWVsZCA9IHZlcnRpY2FsID8gWSA6IFg7XG4gICAgICAgIGNvbnN0IGxhYmVscyA9IHRoaXMubGFiZWxzO1xuICAgICAgICBjb25zdCBzdGFydFBvc2l0aW9uID0gcmV2ZXJzZSA/IDEgOiAwO1xuICAgICAgICBjb25zdCBlbmRQb3NpdGlvbiA9IHJldmVyc2UgPyAwIDogMTtcbiAgICAgICAgbGV0IG1heFN0YXJ0T2Zmc2V0ID0gMDtcbiAgICAgICAgbGV0IG1heEVuZE9mZnNldCA9IDA7XG5cbiAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgbGFiZWxzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgICAgIGNvbnN0IGxhYmVsID0gbGFiZWxzW2lkeF07XG4gICAgICAgICAgICBjb25zdCB0aWNrSXggPSB0aGlzLmxhYmVsVGlja0luZGV4KGxhYmVsKTtcbiAgICAgICAgICAgIGxldCBzdGFydFRpY2ssIGVuZFRpY2s7XG5cbiAgICAgICAgICAgIGlmIChsYWJlbHNCZXR3ZWVuVGlja3MpIHtcbiAgICAgICAgICAgICAgICBzdGFydFRpY2sgPSB0aWNrUG9zaXRpb25zW3RpY2tJeCArIHN0YXJ0UG9zaXRpb25dO1xuICAgICAgICAgICAgICAgIGVuZFRpY2sgPSB0aWNrUG9zaXRpb25zW3RpY2tJeCArIGVuZFBvc2l0aW9uXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3RhcnRUaWNrID0gZW5kVGljayA9IHRpY2tQb3NpdGlvbnNbdGlja0l4XTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbWF4U3RhcnRPZmZzZXQgPSBNYXRoLm1heChtYXhTdGFydE9mZnNldCwgc3RhcnRUaWNrIC0gbGFiZWwuYm94W29mZnNldEZpZWxkICsgMV0pO1xuICAgICAgICAgICAgbWF4RW5kT2Zmc2V0ID0gTWF0aC5tYXgobWF4RW5kT2Zmc2V0LCBsYWJlbC5ib3hbb2Zmc2V0RmllbGQgKyAyXSAtIGVuZFRpY2spO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0YXJ0OiBtYXhTdGFydE9mZnNldCxcbiAgICAgICAgICAgIGVuZDogbWF4RW5kT2Zmc2V0XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgbGltaXRSYW5nZShmcm9tLCB0bywgbWluLCBtYXgsIG9mZnNldCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG4gICAgICAgIGlmICgoZnJvbSA8IG1pbiAmJiBvZmZzZXQgPCAwICYmICghZGVmaW5lZChvcHRpb25zLm1pbikgfHwgb3B0aW9ucy5taW4gPD0gbWluKSkgfHwgKG1heCA8IHRvICYmIG9mZnNldCA+IDAgJiYgKCFkZWZpbmVkKG9wdGlvbnMubWF4KSB8fCBtYXggPD0gb3B0aW9ucy5tYXgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoKHRvIDwgbWluICYmIG9mZnNldCA+IDApIHx8IChtYXggPCBmcm9tICYmIG9mZnNldCA8IDApKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1pbjogZnJvbSxcbiAgICAgICAgICAgICAgICBtYXg6IHRvXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmFuZ2VTaXplID0gdG8gLSBmcm9tO1xuICAgICAgICBsZXQgbWluVmFsdWUgPSBmcm9tO1xuICAgICAgICBsZXQgbWF4VmFsdWUgPSB0bztcblxuICAgICAgICBpZiAoZnJvbSA8IG1pbiAmJiBvZmZzZXQgPCAwKSB7XG4gICAgICAgICAgICBtaW5WYWx1ZSA9IGxpbWl0VmFsdWUoZnJvbSwgbWluLCBtYXgpO1xuICAgICAgICAgICAgbWF4VmFsdWUgPSBsaW1pdFZhbHVlKGZyb20gKyByYW5nZVNpemUsIG1pbiArIHJhbmdlU2l6ZSwgbWF4KTtcbiAgICAgICAgfSBlbHNlIGlmICh0byA+IG1heCAmJiBvZmZzZXQgPiAwKSB7XG4gICAgICAgICAgICBtYXhWYWx1ZSA9IGxpbWl0VmFsdWUodG8sIG1pbiwgbWF4KTtcbiAgICAgICAgICAgIG1pblZhbHVlID0gbGltaXRWYWx1ZSh0byAtIHJhbmdlU2l6ZSwgbWluLCBtYXggLSByYW5nZVNpemUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1pbjogbWluVmFsdWUsXG4gICAgICAgICAgICBtYXg6IG1heFZhbHVlXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFsdWVSYW5nZSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1pbjogdGhpcy5zZXJpZXNNaW4sXG4gICAgICAgICAgICBtYXg6IHRoaXMuc2VyaWVzTWF4XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgbGFiZWxzQmV0d2VlblRpY2tzKCkge1xuICAgICAgICByZXR1cm4gIXRoaXMub3B0aW9ucy5qdXN0aWZpZWQ7XG4gICAgfVxuXG4gICAgLy9hZGQgbGVnYWN5IGZpZWxkcyB0byB0aGUgb3B0aW9ucyB0aGF0IGFyZSBubyBsb25nZXIgZ2VuZXJhdGVkIGJ5IGRlZmF1bHRcbiAgICBwcmVwYXJlVXNlck9wdGlvbnMoKSB7XG4gICAgfVxufVxuXG5zZXREZWZhdWx0T3B0aW9ucyhBeGlzLCB7XG4gICAgbGFiZWxzOiB7XG4gICAgICAgIHZpc2libGU6IHRydWUsXG4gICAgICAgIHJvdGF0aW9uOiAwLFxuICAgICAgICBtaXJyb3I6IGZhbHNlLFxuICAgICAgICBzdGVwOiAxLFxuICAgICAgICBza2lwOiAwXG4gICAgfSxcbiAgICBsaW5lOiB7XG4gICAgICAgIHdpZHRoOiAxLFxuICAgICAgICBjb2xvcjogQkxBQ0ssXG4gICAgICAgIHZpc2libGU6IHRydWVcbiAgICB9LFxuICAgIHRpdGxlOiB7XG4gICAgICAgIHZpc2libGU6IHRydWUsXG4gICAgICAgIHBvc2l0aW9uOiBDRU5URVJcbiAgICB9LFxuICAgIG1ham9yVGlja3M6IHtcbiAgICAgICAgYWxpZ246IE9VVFNJREUsXG4gICAgICAgIHNpemU6IDQsXG4gICAgICAgIHNraXA6IDAsXG4gICAgICAgIHN0ZXA6IDFcbiAgICB9LFxuICAgIG1pbm9yVGlja3M6IHtcbiAgICAgICAgYWxpZ246IE9VVFNJREUsXG4gICAgICAgIHNpemU6IDMsXG4gICAgICAgIHNraXA6IDAsXG4gICAgICAgIHN0ZXA6IDFcbiAgICB9LFxuICAgIGF4aXNDcm9zc2luZ1ZhbHVlOiAwLFxuICAgIG1ham9yVGlja1R5cGU6IE9VVFNJREUsXG4gICAgbWlub3JUaWNrVHlwZTogTk9ORSxcbiAgICBtYWpvckdyaWRMaW5lczoge1xuICAgICAgICBza2lwOiAwLFxuICAgICAgICBzdGVwOiAxXG4gICAgfSxcbiAgICBtaW5vckdyaWRMaW5lczoge1xuICAgICAgICB2aXNpYmxlOiBmYWxzZSxcbiAgICAgICAgd2lkdGg6IDEsXG4gICAgICAgIGNvbG9yOiBCTEFDSyxcbiAgICAgICAgc2tpcDogMCxcbiAgICAgICAgc3RlcDogMVxuICAgIH0sXG4gICAgLy8gVE9ETzogTW92ZSB0byBsaW5lIG9yIGxhYmVscyBvcHRpb25zXG4gICAgbWFyZ2luOiA1LFxuICAgIHZpc2libGU6IHRydWUsXG4gICAgcmV2ZXJzZTogZmFsc2UsXG4gICAganVzdGlmaWVkOiB0cnVlLFxuICAgIG5vdGVzOiB7XG4gICAgICAgIGxhYmVsOiB7XG4gICAgICAgICAgICB0ZXh0OiBcIlwiXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgX2FsaWduTGluZXM6IHRydWUsXG4gICAgX2RlZmVyTGFiZWxzOiBmYWxzZVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IEF4aXM7XG4iLCJleHBvcnQgY29uc3QgTUlMTElTRUNPTkRTID0gXCJtaWxsaXNlY29uZHNcIjtcbmV4cG9ydCBjb25zdCBTRUNPTkRTID0gXCJzZWNvbmRzXCI7XG5leHBvcnQgY29uc3QgTUlOVVRFUyA9IFwibWludXRlc1wiO1xuZXhwb3J0IGNvbnN0IEhPVVJTID0gXCJob3Vyc1wiO1xuZXhwb3J0IGNvbnN0IERBWVMgPSBcImRheXNcIjtcbmV4cG9ydCBjb25zdCBXRUVLUyA9IFwid2Vla3NcIjtcbmV4cG9ydCBjb25zdCBNT05USFMgPSBcIm1vbnRoc1wiO1xuZXhwb3J0IGNvbnN0IFlFQVJTID0gXCJ5ZWFyc1wiO1xuXG5leHBvcnQgY29uc3QgVElNRV9QRVJfTUlMTElTRUNPTkQgPSAxO1xuZXhwb3J0IGNvbnN0IFRJTUVfUEVSX1NFQ09ORCA9IDEwMDA7XG5leHBvcnQgY29uc3QgVElNRV9QRVJfTUlOVVRFID0gNjAgKiBUSU1FX1BFUl9TRUNPTkQ7XG5leHBvcnQgY29uc3QgVElNRV9QRVJfSE9VUiA9IDYwICogVElNRV9QRVJfTUlOVVRFO1xuZXhwb3J0IGNvbnN0IFRJTUVfUEVSX0RBWSA9IDI0ICogVElNRV9QRVJfSE9VUjtcbmV4cG9ydCBjb25zdCBUSU1FX1BFUl9XRUVLID0gNyAqIFRJTUVfUEVSX0RBWTtcbmV4cG9ydCBjb25zdCBUSU1FX1BFUl9NT05USCA9IDMxICogVElNRV9QRVJfREFZO1xuZXhwb3J0IGNvbnN0IFRJTUVfUEVSX1lFQVIgPSAzNjUgKiBUSU1FX1BFUl9EQVk7XG5leHBvcnQgY29uc3QgVElNRV9QRVJfVU5JVCA9IHtcbiAgICBcInllYXJzXCI6IFRJTUVfUEVSX1lFQVIsXG4gICAgXCJtb250aHNcIjogVElNRV9QRVJfTU9OVEgsXG4gICAgXCJ3ZWVrc1wiOiBUSU1FX1BFUl9XRUVLLFxuICAgIFwiZGF5c1wiOiBUSU1FX1BFUl9EQVksXG4gICAgXCJob3Vyc1wiOiBUSU1FX1BFUl9IT1VSLFxuICAgIFwibWludXRlc1wiOiBUSU1FX1BFUl9NSU5VVEUsXG4gICAgXCJzZWNvbmRzXCI6IFRJTUVfUEVSX1NFQ09ORCxcbiAgICBcIm1pbGxpc2Vjb25kc1wiOiBUSU1FX1BFUl9NSUxMSVNFQ09ORFxufTtcblxuIiwiaW1wb3J0IHsgVElNRV9QRVJfTUlOVVRFIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhYnNvbHV0ZURhdGVEaWZmKGEsIGIpIHtcbiAgICBjb25zdCBkaWZmID0gYS5nZXRUaW1lKCkgLSBiO1xuICAgIGNvbnN0IG9mZnNldERpZmYgPSBhLmdldFRpbWV6b25lT2Zmc2V0KCkgLSBiLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICByZXR1cm4gZGlmZiAtIChvZmZzZXREaWZmICogVElNRV9QRVJfTUlOVVRFKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRUaWNrcyhkYXRlLCB0aWNrcykge1xuICAgIHJldHVybiBuZXcgRGF0ZShkYXRlLmdldFRpbWUoKSArIHRpY2tzKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b0RhdGUodmFsdWUpIHtcbiAgICBsZXQgcmVzdWx0O1xuXG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlKSB7XG4gICAgICAgIHJlc3VsdCA9IG5ldyBEYXRlKHZhbHVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufSIsImltcG9ydCB7IFRJTUVfUEVSX0RBWSB9IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCBhZGRUaWNrcyBmcm9tICcuL2FkZC10aWNrcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZXZWVrKGRhdGUsIHdlZWtTdGFydERheSA9IDApIHtcbiAgICBsZXQgZGF5c1RvU3VidHJhY3QgPSAwO1xuICAgIGxldCBkYXkgPSBkYXRlLmdldERheSgpO1xuXG4gICAgaWYgKCFpc05hTihkYXkpKSB7XG4gICAgICAgIHdoaWxlIChkYXkgIT09IHdlZWtTdGFydERheSkge1xuICAgICAgICAgICAgaWYgKGRheSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGRheSA9IDY7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRheS0tO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkYXlzVG9TdWJ0cmFjdCsrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZFRpY2tzKGRhdGUsIC1kYXlzVG9TdWJ0cmFjdCAqIFRJTUVfUEVSX0RBWSk7XG59IiwiaW1wb3J0IHsgTUlMTElTRUNPTkRTLCBTRUNPTkRTLCBNSU5VVEVTLCBIT1VSUywgREFZUywgV0VFS1MsIE1PTlRIUywgWUVBUlMsXG4gICAgVElNRV9QRVJfU0VDT05ELCBUSU1FX1BFUl9NSU5VVEUsIFRJTUVfUEVSX0hPVVIgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgYWRkVGlja3MgZnJvbSAnLi9hZGQtdGlja3MnO1xuaW1wb3J0IHRvRGF0ZSBmcm9tICcuL3RvLWRhdGUnO1xuaW1wb3J0IHN0YXJ0T2ZXZWVrIGZyb20gJy4vc3RhcnQtb2Ytd2Vlayc7XG5cbmZ1bmN0aW9uIGFkanVzdERTVChkYXRlLCBob3Vycykge1xuICAgIGlmIChob3VycyA9PT0gMCAmJiBkYXRlLmdldEhvdXJzKCkgPT09IDIzKSB7XG4gICAgICAgIGRhdGUuc2V0SG91cnMoZGF0ZS5nZXRIb3VycygpICsgMik7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gYWRkSG91cnMoZGF0ZSwgaG91cnMpIHtcbiAgICBjb25zdCByb3VuZGVkRGF0ZSA9IG5ldyBEYXRlKGRhdGUpO1xuXG4gICAgcm91bmRlZERhdGUuc2V0TWludXRlcygwLCAwLCAwKTtcblxuICAgIGNvbnN0IHR6RGlmZiA9IChkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCkgLSByb3VuZGVkRGF0ZS5nZXRUaW1lem9uZU9mZnNldCgpKSAqIFRJTUVfUEVSX01JTlVURTtcblxuICAgIHJldHVybiBhZGRUaWNrcyhyb3VuZGVkRGF0ZSwgdHpEaWZmICsgaG91cnMgKiBUSU1FX1BFUl9IT1VSKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkRHVyYXRpb24oZGF0ZVZhbHVlLCB2YWx1ZSwgdW5pdCwgd2Vla1N0YXJ0RGF5KSB7XG4gICAgbGV0IHJlc3VsdCA9IGRhdGVWYWx1ZTtcblxuICAgIGlmIChkYXRlVmFsdWUpIHtcbiAgICAgICAgbGV0IGRhdGUgPSB0b0RhdGUoZGF0ZVZhbHVlKTtcbiAgICAgICAgY29uc3QgaG91cnMgPSBkYXRlLmdldEhvdXJzKCk7XG5cbiAgICAgICAgaWYgKHVuaXQgPT09IFlFQVJTKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBuZXcgRGF0ZShkYXRlLmdldEZ1bGxZZWFyKCkgKyB2YWx1ZSwgMCwgMSk7XG4gICAgICAgICAgICBhZGp1c3REU1QocmVzdWx0LCAwKTtcbiAgICAgICAgfSBlbHNlIGlmICh1bml0ID09PSBNT05USFMpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpICsgdmFsdWUsIDEpO1xuICAgICAgICAgICAgYWRqdXN0RFNUKHJlc3VsdCwgaG91cnMpO1xuICAgICAgICB9IGVsc2UgaWYgKHVuaXQgPT09IFdFRUtTKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBhZGREdXJhdGlvbihzdGFydE9mV2VlayhkYXRlLCB3ZWVrU3RhcnREYXkpLCB2YWx1ZSAqIDcsIERBWVMpO1xuICAgICAgICAgICAgYWRqdXN0RFNUKHJlc3VsdCwgaG91cnMpO1xuICAgICAgICB9IGVsc2UgaWYgKHVuaXQgPT09IERBWVMpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpLCBkYXRlLmdldERhdGUoKSArIHZhbHVlKTtcbiAgICAgICAgICAgIGFkanVzdERTVChyZXN1bHQsIGhvdXJzKTtcbiAgICAgICAgfSBlbHNlIGlmICh1bml0ID09PSBIT1VSUykge1xuICAgICAgICAgICAgcmVzdWx0ID0gYWRkSG91cnMoZGF0ZSwgdmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKHVuaXQgPT09IE1JTlVURVMpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGFkZFRpY2tzKGRhdGUsIHZhbHVlICogVElNRV9QRVJfTUlOVVRFKTtcblxuICAgICAgICAgICAgaWYgKHJlc3VsdC5nZXRTZWNvbmRzKCkgPiAwKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnNldFNlY29uZHMoMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodW5pdCA9PT0gU0VDT05EUykge1xuICAgICAgICAgICAgcmVzdWx0ID0gYWRkVGlja3MoZGF0ZSwgdmFsdWUgKiBUSU1FX1BFUl9TRUNPTkQpO1xuICAgICAgICB9IGVsc2UgaWYgKHVuaXQgPT09IE1JTExJU0VDT05EUykge1xuICAgICAgICAgICAgcmVzdWx0ID0gYWRkVGlja3MoZGF0ZSwgdmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVuaXQgIT09IE1JTExJU0VDT05EUyAmJiByZXN1bHQuZ2V0TWlsbGlzZWNvbmRzKCkgPiAwKSB7XG4gICAgICAgICAgICByZXN1bHQuc2V0TWlsbGlzZWNvbmRzKDApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn0iLCJpbXBvcnQgYWRkRHVyYXRpb24gZnJvbSAnLi9hZGQtZHVyYXRpb24nO1xuaW1wb3J0IHRvRGF0ZSBmcm9tICcuL3RvLWRhdGUnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmbG9vckRhdGUoZGF0ZSwgdW5pdCwgd2Vla1N0YXJ0RGF5KSB7XG4gICAgcmV0dXJuIGFkZER1cmF0aW9uKHRvRGF0ZShkYXRlKSwgMCwgdW5pdCwgd2Vla1N0YXJ0RGF5KTtcbn0iLCJpbXBvcnQgZmxvb3JEYXRlIGZyb20gJy4vZmxvb3ItZGF0ZSc7XG5pbXBvcnQgYWRkRHVyYXRpb24gZnJvbSAnLi9hZGQtZHVyYXRpb24nO1xuaW1wb3J0IHRvRGF0ZSBmcm9tICcuL3RvLWRhdGUnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjZWlsRGF0ZShkYXRlVmFsdWUsIHVuaXQsIHdlZWtTdGFydERheSkge1xuICAgIGNvbnN0IGRhdGUgPSB0b0RhdGUoZGF0ZVZhbHVlKTtcblxuICAgIGlmIChkYXRlICYmIGZsb29yRGF0ZShkYXRlLCB1bml0LCB3ZWVrU3RhcnREYXkpLmdldFRpbWUoKSA9PT0gZGF0ZS5nZXRUaW1lKCkpIHtcbiAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZER1cmF0aW9uKGRhdGUsIDEsIHVuaXQsIHdlZWtTdGFydERheSk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGF0ZUNvbXBhcmVyKGEsIGIpIHtcbiAgICBpZiAoYSAmJiBiKSB7XG4gICAgICAgIHJldHVybiBhLmdldFRpbWUoKSAtIGIuZ2V0VGltZSgpO1xuICAgIH1cblxuICAgIHJldHVybiAtMTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkYXRlRGlmZihhLCBiKSB7XG4gICAgcmV0dXJuIGEuZ2V0VGltZSgpIC0gYjtcbn0iLCJpbXBvcnQgeyBpc0FycmF5IH0gZnJvbSAnLi4vY29tbW9uJztcbmltcG9ydCB0b0RhdGUgZnJvbSAnLi90by1kYXRlJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9UaW1lKHZhbHVlKSB7XG4gICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgdmFsdWUubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2godG9UaW1lKHZhbHVlW2lkeF0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSBlbHNlIGlmICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdG9EYXRlKHZhbHVlKS5nZXRUaW1lKCk7XG4gICAgfVxufSIsImltcG9ydCB0b1RpbWUgZnJvbSAnLi90by10aW1lJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGF0ZUVxdWFscyhhLCBiKSB7XG4gICAgaWYgKGEgJiYgYikge1xuICAgICAgICByZXR1cm4gdG9UaW1lKGEpID09PSB0b1RpbWUoYik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGEgPT09IGI7XG59IiwiaW1wb3J0IHsgREFZUywgV0VFS1MsIE1PTlRIUywgWUVBUlMsIFRJTUVfUEVSX1VOSVQgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgZGF0ZURpZmYgZnJvbSAnLi9kYXRlLWRpZmYnO1xuaW1wb3J0IGFic29sdXRlRGF0ZURpZmYgZnJvbSAnLi9hYnNvbHV0ZS1kYXRlLWRpZmYnO1xuaW1wb3J0IHRvRGF0ZSBmcm9tICcuL3RvLWRhdGUnO1xuXG5mdW5jdGlvbiB0aW1lSW5kZXgoZGF0ZSwgc3RhcnQsIGJhc2VVbml0KSB7XG4gICAgcmV0dXJuIGFic29sdXRlRGF0ZURpZmYoZGF0ZSwgc3RhcnQpIC8gVElNRV9QRVJfVU5JVFtiYXNlVW5pdF07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRhdGVJbmRleCh2YWx1ZSwgc3RhcnQsIGJhc2VVbml0LCBiYXNlVW5pdFN0ZXApIHtcbiAgICBjb25zdCBkYXRlID0gdG9EYXRlKHZhbHVlKTtcbiAgICBjb25zdCBzdGFydERhdGUgPSB0b0RhdGUoc3RhcnQpO1xuICAgIGxldCBpbmRleDtcblxuICAgIGlmIChiYXNlVW5pdCA9PT0gTU9OVEhTKSB7XG4gICAgICAgIGluZGV4ID0gKGRhdGUuZ2V0TW9udGgoKSAtIHN0YXJ0RGF0ZS5nZXRNb250aCgpICsgKGRhdGUuZ2V0RnVsbFllYXIoKSAtIHN0YXJ0RGF0ZS5nZXRGdWxsWWVhcigpKSAqIDEyKSArXG4gICAgICAgICAgICB0aW1lSW5kZXgoZGF0ZSwgbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCkpLCBEQVlTKSAvIG5ldyBEYXRlKGRhdGUuZ2V0RnVsbFllYXIoKSwgZGF0ZS5nZXRNb250aCgpICsgMSwgMCkuZ2V0RGF0ZSgpO1xuICAgIH0gZWxzZSBpZiAoYmFzZVVuaXQgPT09IFlFQVJTKSB7XG4gICAgICAgIGluZGV4ID0gZGF0ZS5nZXRGdWxsWWVhcigpIC0gc3RhcnREYXRlLmdldEZ1bGxZZWFyKCkgKyBkYXRlSW5kZXgoZGF0ZSwgbmV3IERhdGUoZGF0ZS5nZXRGdWxsWWVhcigpLCAwKSwgTU9OVEhTLCAxKSAvIDEyO1xuICAgIH0gZWxzZSBpZiAoYmFzZVVuaXQgPT09IERBWVMgfHwgYmFzZVVuaXQgPT09IFdFRUtTKSB7XG4gICAgICAgIGluZGV4ID0gdGltZUluZGV4KGRhdGUsIHN0YXJ0RGF0ZSwgYmFzZVVuaXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGluZGV4ID0gZGF0ZURpZmYoZGF0ZSwgc3RhcnQpIC8gVElNRV9QRVJfVU5JVFtiYXNlVW5pdF07XG4gICAgfVxuXG4gICAgcmV0dXJuIGluZGV4IC8gYmFzZVVuaXRTdGVwO1xufVxuXG4iLCJpbXBvcnQgeyBEQVlTLCBNT05USFMsIFlFQVJTLCBUSU1FX1BFUl9EQVksIFRJTUVfUEVSX1VOSVQgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgZGF0ZURpZmYgZnJvbSAnLi9kYXRlLWRpZmYnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkdXJhdGlvbihhLCBiLCB1bml0KSB7XG4gICAgbGV0IGRpZmY7XG5cbiAgICBpZiAodW5pdCA9PT0gWUVBUlMpIHtcbiAgICAgICAgZGlmZiA9IGIuZ2V0RnVsbFllYXIoKSAtIGEuZ2V0RnVsbFllYXIoKTtcbiAgICB9IGVsc2UgaWYgKHVuaXQgPT09IE1PTlRIUykge1xuICAgICAgICBkaWZmID0gZHVyYXRpb24oYSwgYiwgWUVBUlMpICogMTIgKyBiLmdldE1vbnRoKCkgLSBhLmdldE1vbnRoKCk7XG4gICAgfSBlbHNlIGlmICh1bml0ID09PSBEQVlTKSB7XG4gICAgICAgIGRpZmYgPSBNYXRoLmZsb29yKGRhdGVEaWZmKGIsIGEpIC8gVElNRV9QRVJfREFZKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBkaWZmID0gTWF0aC5mbG9vcihkYXRlRGlmZihiLCBhKSAvIFRJTUVfUEVSX1VOSVRbdW5pdF0pO1xuICAgIH1cblxuICAgIHJldHVybiBkaWZmO1xufSIsImltcG9ydCB7IGlzU3RyaW5nIH0gZnJvbSAnLi4vY29tbW9uJztcbmltcG9ydCB0b0RhdGUgZnJvbSAnLi90by1kYXRlJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGFyc2VEYXRlKGludGxTZXJ2aWNlLCBkYXRlKSB7XG4gICAgbGV0IHJlc3VsdDtcbiAgICBpZiAoaXNTdHJpbmcoZGF0ZSkpIHtcbiAgICAgICAgcmVzdWx0ID0gaW50bFNlcnZpY2UucGFyc2VEYXRlKGRhdGUpIHx8IHRvRGF0ZShkYXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgPSB0b0RhdGUoZGF0ZSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4iLCJpbXBvcnQgcGFyc2VEYXRlIGZyb20gJy4vcGFyc2UtZGF0ZSc7XG5cbmltcG9ydCB7IGlzQXJyYXkgfSBmcm9tICcuLi9jb21tb24nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwYXJzZURhdGVzKGludGxTZXJ2aWNlLCBkYXRlcykge1xuICAgIGlmIChpc0FycmF5KGRhdGVzKSkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgZGF0ZXMubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2gocGFyc2VEYXRlKGludGxTZXJ2aWNlLCBkYXRlc1tpZHhdKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHJldHVybiBwYXJzZURhdGUoaW50bFNlcnZpY2UsIGRhdGVzKTtcbn0iLCJpbXBvcnQgeyBpc051bWJlciB9IGZyb20gJy4uL2NvbW1vbic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZpcnN0RGF5KG9wdGlvbnMsIGludGxTZXJ2aWNlKSB7XG4gICAgaWYgKGlzTnVtYmVyKG9wdGlvbnMud2Vla1N0YXJ0RGF5KSkge1xuICAgICAgICByZXR1cm4gb3B0aW9ucy53ZWVrU3RhcnREYXk7XG4gICAgfVxuXG4gICAgaWYgKGludGxTZXJ2aWNlLmZpcnN0RGF5KSB7XG4gICAgICAgIHJldHVybiBpbnRsU2VydmljZS5maXJzdERheSgpO1xuICAgIH1cblxuICAgIHJldHVybiAwO1xufVxuIiwiaW1wb3J0IEF4aXMgZnJvbSAnLi9heGlzJztcbmltcG9ydCBBeGlzTGFiZWwgZnJvbSAnLi9heGlzLWxhYmVsJztcblxuaW1wb3J0IHsgQkxBQ0ssIENPT1JEX1BSRUNJU0lPTiwgREVGQVVMVF9QUkVDSVNJT04sIFgsIFkgfSBmcm9tICcuLi9jb21tb24vY29uc3RhbnRzJztcbmltcG9ydCB7IGRlZmluZWQsIGlzTnVtYmVyLCBsYXN0LCBsaW1pdFZhbHVlLCByb3VuZCwgc2V0RGVmYXVsdE9wdGlvbnMsIHZhbHVlT3JEZWZhdWx0LCBIYXNoTWFwIH0gZnJvbSAnLi4vY29tbW9uJztcbmltcG9ydCB7IGRhdGVFcXVhbHMgfSBmcm9tICcuLi9kYXRlLXV0aWxzJztcblxuY29uc3QgTUlOX0NBVEVHT1JZX1BPSU5UU19SQU5HRSA9IDAuMDE7XG5cbmZ1bmN0aW9uIGluZGV4T2YodmFsdWUsIGFycikge1xuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gYXJyLmxlbmd0aDtcbiAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgbGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgaWYgKGRhdGVFcXVhbHMoYXJyW2lkeF0sIHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpZHg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFyci5pbmRleE9mKHZhbHVlKTtcbn1cblxuY2xhc3MgQ2F0ZWdvcnlBeGlzIGV4dGVuZHMgQXhpcyB7XG4gICAgaW5pdEZpZWxkcygpIHtcbiAgICAgICAgdGhpcy5fdGlja3MgPSB7fTtcbiAgICB9XG5cbiAgICBjYXRlZ29yaWVzSGFzaCgpIHtcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuXG4gICAgY2xvbmUoKSB7XG4gICAgICAgIGNvbnN0IGNvcHkgPSBuZXcgQ2F0ZWdvcnlBeGlzKE9iamVjdC5hc3NpZ24oe30sIHRoaXMub3B0aW9ucywge1xuICAgICAgICAgICAgY2F0ZWdvcmllczogdGhpcy5vcHRpb25zLnNyY0NhdGVnb3JpZXNcbiAgICAgICAgfSksIHRoaXMuY2hhcnRTZXJ2aWNlKTtcbiAgICAgICAgY29weS5jcmVhdGVMYWJlbHMoKTtcblxuICAgICAgICByZXR1cm4gY29weTtcbiAgICB9XG5cbiAgICBpbml0VXNlck9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICBjb25zdCBjYXRlZ29yaWVzID0gb3B0aW9ucy5jYXRlZ29yaWVzIHx8IFtdO1xuICAgICAgICBjb25zdCBkZWZpbmVkTWluID0gZGVmaW5lZChvcHRpb25zLm1pbik7XG4gICAgICAgIGNvbnN0IGRlZmluZWRNYXggPSBkZWZpbmVkKG9wdGlvbnMubWF4KTtcbiAgICAgICAgb3B0aW9ucy5zcmNDYXRlZ29yaWVzID0gb3B0aW9ucy5jYXRlZ29yaWVzID0gY2F0ZWdvcmllcztcblxuICAgICAgICBpZiAoKGRlZmluZWRNaW4gfHwgZGVmaW5lZE1heCkgJiYgY2F0ZWdvcmllcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IG1pbiA9IGRlZmluZWRNaW4gPyBNYXRoLmZsb29yKG9wdGlvbnMubWluKSA6IDA7XG4gICAgICAgICAgICBsZXQgbWF4O1xuXG4gICAgICAgICAgICBpZiAoZGVmaW5lZE1heCkge1xuICAgICAgICAgICAgICAgIG1heCA9IG9wdGlvbnMuanVzdGlmaWVkID8gTWF0aC5mbG9vcihvcHRpb25zLm1heCkgKyAxIDogTWF0aC5jZWlsKG9wdGlvbnMubWF4KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbWF4ID0gY2F0ZWdvcmllcy5sZW5ndGg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG9wdGlvbnMuY2F0ZWdvcmllcyA9IG9wdGlvbnMuY2F0ZWdvcmllcy5zbGljZShtaW4sIG1heCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb3B0aW9ucztcbiAgICB9XG5cbiAgICByYW5nZUluZGljZXMoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IG9wdGlvbnMuY2F0ZWdvcmllcy5sZW5ndGggfHwgMTtcbiAgICAgICAgY29uc3QgbWluID0gaXNOdW1iZXIob3B0aW9ucy5taW4pID8gb3B0aW9ucy5taW4gJSAxIDogMDtcbiAgICAgICAgbGV0IG1heDtcblxuICAgICAgICBpZiAoaXNOdW1iZXIob3B0aW9ucy5tYXgpICYmIG9wdGlvbnMubWF4ICUgMSAhPT0gMCAmJiBvcHRpb25zLm1heCA8IHRoaXMudG90YWxSYW5nZSgpLm1heCkge1xuICAgICAgICAgICAgbWF4ID0gbGVuZ3RoIC0gKDEgLSBvcHRpb25zLm1heCAlIDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWF4ID0gbGVuZ3RoIC0gKG9wdGlvbnMuanVzdGlmaWVkID8gMSA6IDApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1pbjogbWluLFxuICAgICAgICAgICAgbWF4OiBtYXhcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB0b3RhbFJhbmdlSW5kaWNlcyhsaW1pdCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBsZXQgbWluID0gaXNOdW1iZXIob3B0aW9ucy5taW4pID8gb3B0aW9ucy5taW4gOiAwO1xuICAgICAgICBsZXQgbWF4O1xuXG4gICAgICAgIGlmIChpc051bWJlcihvcHRpb25zLm1heCkpIHtcbiAgICAgICAgICAgIG1heCA9IG9wdGlvbnMubWF4O1xuICAgICAgICB9IGVsc2UgaWYgKGlzTnVtYmVyKG9wdGlvbnMubWluKSkge1xuICAgICAgICAgICAgbWF4ID0gbWluICsgb3B0aW9ucy5jYXRlZ29yaWVzLmxlbmd0aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1heCA9IHRoaXMudG90YWxSYW5nZSgpLm1heCB8fCAxO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxpbWl0KSB7XG4gICAgICAgICAgICBjb25zdCB0b3RhbFJhbmdlID0gdGhpcy50b3RhbFJhbmdlKCk7XG4gICAgICAgICAgICBtaW4gPSBsaW1pdFZhbHVlKG1pbiwgMCwgdG90YWxSYW5nZS5tYXgpO1xuICAgICAgICAgICAgbWF4ID0gbGltaXRWYWx1ZShtYXgsIDAsIHRvdGFsUmFuZ2UubWF4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtaW46IG1pbixcbiAgICAgICAgICAgIG1heDogbWF4XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcmFuZ2UoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IG1pbiA9IGlzTnVtYmVyKG9wdGlvbnMubWluKSA/IG9wdGlvbnMubWluIDogMDtcbiAgICAgICAgY29uc3QgbWF4ID0gaXNOdW1iZXIob3B0aW9ucy5tYXgpID8gb3B0aW9ucy5tYXggOiB0aGlzLnRvdGFsUmFuZ2UoKS5tYXg7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1pbjogbWluLFxuICAgICAgICAgICAgbWF4OiBtYXhcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICByb3VuZGVkUmFuZ2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJhbmdlKCk7XG4gICAgfVxuXG4gICAgdG90YWxSYW5nZSgpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgcmV0dXJuIHsgbWluOiAwLCBtYXg6IE1hdGgubWF4KHRoaXMuX3Nlcmllc01heCB8fCAwLCBvcHRpb25zLnNyY0NhdGVnb3JpZXMubGVuZ3RoKSAtIChvcHRpb25zLmp1c3RpZmllZCA/IDEgOiAwKSB9O1xuICAgIH1cblxuICAgIHNjYWxlT3B0aW9ucygpIHtcbiAgICAgICAgY29uc3QgeyBtaW4sIG1heCB9ID0gdGhpcy5yYW5nZUluZGljZXMoKTtcbiAgICAgICAgY29uc3QgbGluZUJveCA9IHRoaXMubGluZUJveCgpO1xuICAgICAgICBjb25zdCBzaXplID0gdGhpcy5vcHRpb25zLnZlcnRpY2FsID8gbGluZUJveC5oZWlnaHQoKSA6IGxpbmVCb3gud2lkdGgoKTtcbiAgICAgICAgY29uc3Qgc2NhbGUgPSBzaXplIC8gKChtYXggLSBtaW4pIHx8IDEpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzY2FsZTogc2NhbGUgKiAodGhpcy5vcHRpb25zLnJldmVyc2UgPyAtMSA6IDEpLFxuICAgICAgICAgICAgYm94OiBsaW5lQm94LFxuICAgICAgICAgICAgbWluOiBtaW4sXG4gICAgICAgICAgICBtYXg6IG1heFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGFycmFuZ2VMYWJlbHMoKSB7XG4gICAgICAgIHN1cGVyLmFycmFuZ2VMYWJlbHMoKTtcbiAgICAgICAgdGhpcy5oaWRlT3V0T2ZSYW5nZUxhYmVscygpO1xuICAgIH1cblxuICAgIGhpZGVPdXRPZlJhbmdlTGFiZWxzKCkge1xuICAgICAgICBjb25zdCB7IGJveCwgbGFiZWxzIH0gPSB0aGlzO1xuXG4gICAgICAgIGlmIChsYWJlbHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZUF4aXMgPSB0aGlzLm9wdGlvbnMudmVydGljYWwgPyBZIDogWDtcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gYm94W3ZhbHVlQXhpcyArIDFdO1xuICAgICAgICAgICAgY29uc3QgZW5kID0gYm94W3ZhbHVlQXhpcyArIDJdO1xuICAgICAgICAgICAgY29uc3QgZmlyc3RMYWJlbCA9IGxhYmVsc1swXTtcbiAgICAgICAgICAgIGNvbnN0IGxhc3RMYWJlbCA9IGxhc3QobGFiZWxzKTtcblxuICAgICAgICAgICAgaWYgKGZpcnN0TGFiZWwuYm94W3ZhbHVlQXhpcyArIDFdID4gZW5kIHx8IGZpcnN0TGFiZWwuYm94W3ZhbHVlQXhpcyArIDJdIDwgc3RhcnQpIHtcbiAgICAgICAgICAgICAgICBmaXJzdExhYmVsLm9wdGlvbnMudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxhc3RMYWJlbC5ib3hbdmFsdWVBeGlzICsgMV0gPiBlbmQgfHwgbGFzdExhYmVsLmJveFt2YWx1ZUF4aXMgKyAyXSA8IHN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgbGFzdExhYmVsLm9wdGlvbnMudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0TWFqb3JUaWNrUG9zaXRpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRUaWNrcygpLm1ham9yVGlja3M7XG4gICAgfVxuXG4gICAgZ2V0TWlub3JUaWNrUG9zaXRpb25zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRUaWNrcygpLm1pbm9yVGlja3M7XG4gICAgfVxuXG4gICAgZ2V0TGFiZWxzVGlja1Bvc2l0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VGlja3MoKS5sYWJlbFRpY2tzO1xuICAgIH1cblxuICAgIHRpY2tJbmRpY2VzKHN0ZXBTaXplKSB7XG4gICAgICAgIGNvbnN0IHsgbWluLCBtYXggfSA9IHRoaXMucmFuZ2VJbmRpY2VzKCk7XG4gICAgICAgIGNvbnN0IGxpbWl0ID0gTWF0aC5jZWlsKG1heCk7XG4gICAgICAgIGxldCBjdXJyZW50ID0gTWF0aC5mbG9vcihtaW4pO1xuICAgICAgICBjb25zdCBpbmRpY2VzID0gW107XG5cbiAgICAgICAgd2hpbGUgKGN1cnJlbnQgPD0gbGltaXQpIHtcbiAgICAgICAgICAgIGluZGljZXMucHVzaChjdXJyZW50KTtcbiAgICAgICAgICAgIGN1cnJlbnQgKz0gc3RlcFNpemU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaW5kaWNlcztcbiAgICB9XG5cbiAgICBnZXRUaWNrUG9zaXRpb25zKHN0ZXBTaXplKSB7XG4gICAgICAgIGNvbnN0IHsgdmVydGljYWwsIHJldmVyc2UgfSA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgeyBzY2FsZSwgYm94LCBtaW4gfSA9IHRoaXMuc2NhbGVPcHRpb25zKCk7XG4gICAgICAgIGNvbnN0IHBvcyA9IGJveFsodmVydGljYWwgPyBZIDogWCkgKyAocmV2ZXJzZSA/IDIgOiAxKV07XG4gICAgICAgIGNvbnN0IGluZGljZXMgPSB0aGlzLnRpY2tJbmRpY2VzKHN0ZXBTaXplKTtcbiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gW107XG5cbiAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgaW5kaWNlcy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgICAgICBwb3NpdGlvbnMucHVzaChwb3MgKyByb3VuZChzY2FsZSAqIChpbmRpY2VzW2lkeF0gLSBtaW4pLCBDT09SRF9QUkVDSVNJT04pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwb3NpdGlvbnM7XG4gICAgfVxuXG4gICAgZ2V0VGlja3MoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGNhY2hlID0gdGhpcy5fdGlja3M7XG4gICAgICAgIGNvbnN0IHJhbmdlID0gdGhpcy5yYW5nZUluZGljZXMoKTtcbiAgICAgICAgY29uc3QgbGluZUJveCA9IHRoaXMubGluZUJveCgpO1xuICAgICAgICBjb25zdCBoYXNoID0gbGluZUJveC5nZXRIYXNoKCkgKyByYW5nZS5taW4gKyBcIixcIiArIHJhbmdlLm1heCArIG9wdGlvbnMucmV2ZXJzZSArIG9wdGlvbnMuanVzdGlmaWVkO1xuXG4gICAgICAgIGlmIChjYWNoZS5faGFzaCAhPT0gaGFzaCkge1xuICAgICAgICAgICAgY29uc3QgaGFzTWlub3IgPSBvcHRpb25zLm1pbm9yVGlja3MudmlzaWJsZSB8fCBvcHRpb25zLm1pbm9yR3JpZExpbmVzLnZpc2libGU7XG4gICAgICAgICAgICBjYWNoZS5faGFzaCA9IGhhc2g7XG4gICAgICAgICAgICBjYWNoZS5sYWJlbFRpY2tzID0gdGhpcy5nZXRUaWNrUG9zaXRpb25zKDEpO1xuICAgICAgICAgICAgY2FjaGUubWFqb3JUaWNrcyA9IHRoaXMuZmlsdGVyT3V0T2ZSYW5nZVBvc2l0aW9ucyhjYWNoZS5sYWJlbFRpY2tzLCBsaW5lQm94KTtcbiAgICAgICAgICAgIGNhY2hlLm1pbm9yVGlja3MgPSBoYXNNaW5vciA/IHRoaXMuZmlsdGVyT3V0T2ZSYW5nZVBvc2l0aW9ucyh0aGlzLmdldFRpY2tQb3NpdGlvbnMoMC41KSwgbGluZUJveCkgOiBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjYWNoZTtcbiAgICB9XG5cbiAgICBmaWx0ZXJPdXRPZlJhbmdlUG9zaXRpb25zKHBvc2l0aW9ucywgbGluZUJveCkge1xuICAgICAgICBpZiAoIXBvc2l0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBwb3NpdGlvbnM7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBheGlzID0gdGhpcy5vcHRpb25zLnZlcnRpY2FsID8gWSA6IFg7XG4gICAgICAgIGNvbnN0IGluUmFuZ2UgPSAocG9zaXRpb24pID0+IGxpbmVCb3hbYXhpcyArIDFdIDw9IHBvc2l0aW9uICYmIHBvc2l0aW9uIDw9IGxpbmVCb3hbYXhpcyArIDJdO1xuXG4gICAgICAgIGNvbnN0IGVuZCA9IHBvc2l0aW9ucy5sZW5ndGggLSAxO1xuICAgICAgICBsZXQgc3RhcnRJbmRleCA9IDA7XG4gICAgICAgIHdoaWxlICghaW5SYW5nZShwb3NpdGlvbnNbc3RhcnRJbmRleF0pICYmIHN0YXJ0SW5kZXggPD0gZW5kKSB7XG4gICAgICAgICAgICBzdGFydEluZGV4Kys7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZW5kSW5kZXggPSBlbmQ7XG5cbiAgICAgICAgd2hpbGUgKCFpblJhbmdlKHBvc2l0aW9uc1tlbmRJbmRleF0pICYmIGVuZEluZGV4ID49IDApIHtcbiAgICAgICAgICAgIGVuZEluZGV4LS07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcG9zaXRpb25zLnNsaWNlKHN0YXJ0SW5kZXgsIGVuZEluZGV4ICsgMSk7XG4gICAgfVxuXG4gICAgZ2V0U2xvdChmcm9tLCB0bywgbGltaXQpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgeyByZXZlcnNlLCBqdXN0aWZpZWQsIHZlcnRpY2FsIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCB7IHNjYWxlLCBib3gsIG1pbiB9ID0gdGhpcy5zY2FsZU9wdGlvbnMoKTtcbiAgICAgICAgY29uc3QgdmFsdWVBeGlzID0gdmVydGljYWwgPyBZIDogWDtcbiAgICAgICAgY29uc3QgbGluZVN0YXJ0ID0gYm94W3ZhbHVlQXhpcyArIChyZXZlcnNlID8gMiA6IDEpXTtcbiAgICAgICAgY29uc3Qgc2xvdEJveCA9IGJveC5jbG9uZSgpO1xuICAgICAgICBjb25zdCBzaW5nbGVTbG90ID0gIWRlZmluZWQodG8pO1xuXG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gdmFsdWVPckRlZmF1bHQoZnJvbSwgMCk7XG4gICAgICAgIGxldCBlbmQgPSB2YWx1ZU9yRGVmYXVsdCh0bywgc3RhcnQpO1xuICAgICAgICBlbmQgPSBNYXRoLm1heChlbmQgLSAxLCBzdGFydCk7XG5cbiAgICAgICAgLy8gRml4ZXMgdHJhbnNpZW50IGJ1ZyBjYXVzZWQgYnkgaU9TIDYuMCBKSVRcbiAgICAgICAgLy8gKG9uZSBjYW4gbmV2ZXIgYmUgdG9vIHN1cmUpXG4gICAgICAgIGVuZCA9IE1hdGgubWF4KHN0YXJ0LCBlbmQpO1xuXG4gICAgICAgIGxldCBwMSA9IGxpbmVTdGFydCArIChzdGFydCAtIG1pbikgKiBzY2FsZTtcbiAgICAgICAgbGV0IHAyID0gbGluZVN0YXJ0ICsgKGVuZCArIDEgLSBtaW4pICogc2NhbGU7XG5cbiAgICAgICAgaWYgKHNpbmdsZVNsb3QgJiYganVzdGlmaWVkKSB7XG4gICAgICAgICAgICBwMiA9IHAxO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxpbWl0KSB7XG4gICAgICAgICAgICBwMSA9IGxpbWl0VmFsdWUocDEsIGJveFt2YWx1ZUF4aXMgKyAxXSwgYm94W3ZhbHVlQXhpcyArIDJdKTtcbiAgICAgICAgICAgIHAyID0gbGltaXRWYWx1ZShwMiwgYm94W3ZhbHVlQXhpcyArIDFdLCBib3hbdmFsdWVBeGlzICsgMl0pO1xuICAgICAgICB9XG5cbiAgICAgICAgc2xvdEJveFt2YWx1ZUF4aXMgKyAxXSA9IHJldmVyc2UgPyBwMiA6IHAxO1xuICAgICAgICBzbG90Qm94W3ZhbHVlQXhpcyArIDJdID0gcmV2ZXJzZSA/IHAxIDogcDI7XG5cbiAgICAgICAgcmV0dXJuIHNsb3RCb3g7XG4gICAgfVxuXG4gICAgbGltaXRTbG90KHNsb3QpIHtcbiAgICAgICAgY29uc3QgdmVydGljYWwgPSB0aGlzLm9wdGlvbnMudmVydGljYWw7XG4gICAgICAgIGNvbnN0IHZhbHVlQXhpcyA9IHZlcnRpY2FsID8gWSA6IFg7XG4gICAgICAgIGNvbnN0IGxpbmVCb3ggPSB0aGlzLmxpbmVCb3goKTtcbiAgICAgICAgY29uc3QgbGltaXR0ZWRTbG90ID0gc2xvdC5jbG9uZSgpO1xuXG4gICAgICAgIGxpbWl0dGVkU2xvdFt2YWx1ZUF4aXMgKyAxXSA9IGxpbWl0VmFsdWUoc2xvdFt2YWx1ZUF4aXMgKyAxXSwgbGluZUJveFt2YWx1ZUF4aXMgKyAxXSwgbGluZUJveFt2YWx1ZUF4aXMgKyAyXSk7XG4gICAgICAgIGxpbWl0dGVkU2xvdFt2YWx1ZUF4aXMgKyAyXSA9IGxpbWl0VmFsdWUoc2xvdFt2YWx1ZUF4aXMgKyAyXSwgbGluZUJveFt2YWx1ZUF4aXMgKyAxXSwgbGluZUJveFt2YWx1ZUF4aXMgKyAyXSk7XG5cbiAgICAgICAgcmV0dXJuIGxpbWl0dGVkU2xvdDtcbiAgICB9XG5cbiAgICBzbG90KGZyb20sIHRvLCBsaW1pdCkge1xuICAgICAgICBjb25zdCBtaW4gPSBNYXRoLmZsb29yKHRoaXMub3B0aW9ucy5taW4gfHwgMCk7XG4gICAgICAgIGxldCBzdGFydCA9IGZyb207XG4gICAgICAgIGxldCBlbmQgPSB0bztcblxuICAgICAgICBpZiAodHlwZW9mIHN0YXJ0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBzdGFydCA9IHRoaXMuY2F0ZWdvcnlJbmRleChzdGFydCk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNOdW1iZXIoc3RhcnQpKSB7XG4gICAgICAgICAgICBzdGFydCAtPSBtaW47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGVuZCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgZW5kID0gdGhpcy5jYXRlZ29yeUluZGV4KGVuZCk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNOdW1iZXIoZW5kKSkge1xuICAgICAgICAgICAgZW5kIC09IG1pbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdXBlci5zbG90KHN0YXJ0LCBlbmQsIGxpbWl0KTtcbiAgICB9XG5cbiAgICBwb2ludENhdGVnb3J5SW5kZXgocG9pbnQpIHtcbiAgICAgICAgY29uc3QgeyByZXZlcnNlLCBqdXN0aWZpZWQsIHZlcnRpY2FsIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHZhbHVlQXhpcyA9IHZlcnRpY2FsID8gWSA6IFg7XG4gICAgICAgIGNvbnN0IHsgc2NhbGUsIGJveCwgbWluLCBtYXggfSA9IHRoaXMuc2NhbGVPcHRpb25zKCk7XG4gICAgICAgIGNvbnN0IHN0YXJ0VmFsdWUgPSByZXZlcnNlID8gbWF4IDogbWluO1xuICAgICAgICBjb25zdCBsaW5lU3RhcnQgPSBib3hbdmFsdWVBeGlzICsgMV07XG4gICAgICAgIGNvbnN0IGxpbmVFbmQgPSBib3hbdmFsdWVBeGlzICsgMl07XG4gICAgICAgIGNvbnN0IHBvcyA9IHBvaW50W3ZhbHVlQXhpc107XG5cbiAgICAgICAgaWYgKHBvcyA8IGxpbmVTdGFydCB8fCBwb3MgPiBsaW5lRW5kKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB2YWx1ZSA9IHN0YXJ0VmFsdWUgKyAocG9zIC0gbGluZVN0YXJ0KSAvIHNjYWxlO1xuICAgICAgICBjb25zdCBkaWZmID0gdmFsdWUgJSAxO1xuXG4gICAgICAgIGlmIChqdXN0aWZpZWQpIHtcbiAgICAgICAgICAgIHZhbHVlID0gTWF0aC5yb3VuZCh2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoZGlmZiA9PT0gMCAmJiB2YWx1ZSA+IDApIHtcbiAgICAgICAgICAgIHZhbHVlLS07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcih2YWx1ZSk7XG4gICAgfVxuXG4gICAgZ2V0Q2F0ZWdvcnkocG9pbnQpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLnBvaW50Q2F0ZWdvcnlJbmRleChwb2ludCk7XG5cbiAgICAgICAgaWYgKGluZGV4ID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuY2F0ZWdvcmllc1tpbmRleF07XG4gICAgfVxuXG4gICAgY2F0ZWdvcnlJbmRleCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy50b3RhbEluZGV4KHZhbHVlKSAtIE1hdGguZmxvb3IodGhpcy5vcHRpb25zLm1pbiB8fCAwKTtcbiAgICB9XG5cbiAgICBjYXRlZ29yeUF0KGluZGV4LCB0b3RhbCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG4gICAgICAgIHJldHVybiAodG90YWwgPyBvcHRpb25zLnNyY0NhdGVnb3JpZXMgOiBvcHRpb25zLmNhdGVnb3JpZXMpW2luZGV4XTtcbiAgICB9XG5cbiAgICBjYXRlZ29yaWVzQ291bnQoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5vcHRpb25zLmNhdGVnb3JpZXMgfHwgW10pLmxlbmd0aDtcbiAgICB9XG5cbiAgICB0cmFuc2xhdGVSYW5nZShkZWx0YSkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBsaW5lQm94ID0gdGhpcy5saW5lQm94KCk7XG4gICAgICAgIGNvbnN0IHNpemUgPSBvcHRpb25zLnZlcnRpY2FsID8gbGluZUJveC5oZWlnaHQoKSA6IGxpbmVCb3gud2lkdGgoKTtcbiAgICAgICAgY29uc3QgcmFuZ2UgPSBvcHRpb25zLmNhdGVnb3JpZXMubGVuZ3RoO1xuICAgICAgICBjb25zdCBzY2FsZSA9IHNpemUgLyByYW5nZTtcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gcm91bmQoZGVsdGEgLyBzY2FsZSwgREVGQVVMVF9QUkVDSVNJT04pO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtaW46IG9mZnNldCxcbiAgICAgICAgICAgIG1heDogcmFuZ2UgKyBvZmZzZXRcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB6b29tUmFuZ2UocmF0ZSkge1xuICAgICAgICBjb25zdCByYW5nZUluZGljZXMgPSB0aGlzLnRvdGFsUmFuZ2VJbmRpY2VzKCk7XG4gICAgICAgIGNvbnN0IHsgbWluOiB0b3RhbE1pbiwgbWF4OiB0b3RhbE1heCB9ID0gdGhpcy50b3RhbFJhbmdlKCk7XG4gICAgICAgIGNvbnN0IG1pbiA9IGxpbWl0VmFsdWUocmFuZ2VJbmRpY2VzLm1pbiArIHJhdGUsIHRvdGFsTWluLCB0b3RhbE1heCk7XG4gICAgICAgIGNvbnN0IG1heCA9IGxpbWl0VmFsdWUocmFuZ2VJbmRpY2VzLm1heCAtIHJhdGUsIHRvdGFsTWluLCB0b3RhbE1heCk7XG5cbiAgICAgICAgaWYgKG1heCAtIG1pbiA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbWluOiBtaW4sXG4gICAgICAgICAgICAgICAgbWF4OiBtYXhcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzY2FsZVJhbmdlKHNjYWxlKSB7XG4gICAgICAgIGNvbnN0IHJhbmdlID0gdGhpcy5vcHRpb25zLmNhdGVnb3JpZXMubGVuZ3RoO1xuICAgICAgICBjb25zdCBkZWx0YSA9IHNjYWxlICogcmFuZ2U7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1pbjogLWRlbHRhLFxuICAgICAgICAgICAgbWF4OiByYW5nZSArIGRlbHRhXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgbGFiZWxzQ291bnQoKSB7XG4gICAgICAgIGNvbnN0IGxhYmVsc1JhbmdlID0gdGhpcy5sYWJlbHNSYW5nZSgpO1xuXG4gICAgICAgIHJldHVybiBsYWJlbHNSYW5nZS5tYXggLSBsYWJlbHNSYW5nZS5taW47XG4gICAgfVxuXG4gICAgbGFiZWxzUmFuZ2UoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHsganVzdGlmaWVkLCBsYWJlbHM6IGxhYmVsT3B0aW9ucyB9ID0gb3B0aW9ucztcbiAgICAgICAgbGV0IHsgbWluLCBtYXggfSA9IHRoaXMudG90YWxSYW5nZUluZGljZXModHJ1ZSk7XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gTWF0aC5mbG9vcihtaW4pO1xuXG4gICAgICAgIGlmICghanVzdGlmaWVkKSB7XG4gICAgICAgICAgICBtaW4gPSBNYXRoLmZsb29yKG1pbik7XG4gICAgICAgICAgICBtYXggPSBNYXRoLmNlaWwobWF4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1pbiA9IE1hdGguY2VpbChtaW4pO1xuICAgICAgICAgICAgbWF4ID0gTWF0aC5mbG9vcihtYXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHNraXA7XG5cbiAgICAgICAgaWYgKG1pbiA+IGxhYmVsT3B0aW9ucy5za2lwKSB7XG4gICAgICAgICAgICBza2lwID0gbGFiZWxPcHRpb25zLnNraXAgKyBsYWJlbE9wdGlvbnMuc3RlcCAqIE1hdGguY2VpbCgobWluIC0gbGFiZWxPcHRpb25zLnNraXApIC8gbGFiZWxPcHRpb25zLnN0ZXApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2tpcCA9IGxhYmVsT3B0aW9ucy5za2lwO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1pbjogc2tpcCAtIHN0YXJ0LFxuICAgICAgICAgICAgbWF4OiAob3B0aW9ucy5jYXRlZ29yaWVzLmxlbmd0aCA/IG1heCArIChqdXN0aWZpZWQgPyAxIDogMCkgOiAwKSAtIHN0YXJ0XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgY3JlYXRlQXhpc0xhYmVsKGluZGV4LCBsYWJlbE9wdGlvbnMpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgZGF0YUl0ZW0gPSBvcHRpb25zLmRhdGFJdGVtcyA/IG9wdGlvbnMuZGF0YUl0ZW1zW2luZGV4XSA6IG51bGw7XG4gICAgICAgIGNvbnN0IGNhdGVnb3J5ID0gdmFsdWVPckRlZmF1bHQob3B0aW9ucy5jYXRlZ29yaWVzW2luZGV4XSwgXCJcIik7XG4gICAgICAgIGNvbnN0IHRleHQgPSB0aGlzLmF4aXNMYWJlbFRleHQoY2F0ZWdvcnksIGRhdGFJdGVtLCBsYWJlbE9wdGlvbnMpO1xuXG4gICAgICAgIHJldHVybiBuZXcgQXhpc0xhYmVsKGNhdGVnb3J5LCB0ZXh0LCBpbmRleCwgZGF0YUl0ZW0sIGxhYmVsT3B0aW9ucyk7XG4gICAgfVxuXG4gICAgc2hvdWxkUmVuZGVyTm90ZSh2YWx1ZSkge1xuICAgICAgICBjb25zdCByYW5nZSA9IHRoaXMudG90YWxSYW5nZUluZGljZXMoKTtcblxuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihyYW5nZS5taW4pIDw9IHZhbHVlICYmIHZhbHVlIDw9IE1hdGguY2VpbChyYW5nZS5tYXgpO1xuICAgIH1cblxuICAgIG5vdGVTbG90KHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdmFsdWUgLSBNYXRoLmZsb29yKG9wdGlvbnMubWluIHx8IDApO1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRTbG90KGluZGV4KTtcbiAgICB9XG5cbiAgICBhcnJhbmdlTm90ZXMoKSB7XG4gICAgICAgIHN1cGVyLmFycmFuZ2VOb3RlcygpO1xuICAgICAgICB0aGlzLmhpZGVPdXRPZlJhbmdlTm90ZXMoKTtcbiAgICB9XG5cbiAgICBoaWRlT3V0T2ZSYW5nZU5vdGVzKCkge1xuICAgICAgICBjb25zdCB7IG5vdGVzLCBib3ggfSA9IHRoaXM7XG4gICAgICAgIGlmIChub3RlcyAmJiBub3Rlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlQXhpcyA9IHRoaXMub3B0aW9ucy52ZXJ0aWNhbCA/IFkgOiBYO1xuICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSBib3hbdmFsdWVBeGlzICsgMV07XG4gICAgICAgICAgICBjb25zdCBlbmQgPSBib3hbdmFsdWVBeGlzICsgMl07XG5cbiAgICAgICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IG5vdGVzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBub3RlID0gbm90ZXNbaWR4XTtcbiAgICAgICAgICAgICAgICBpZiAobm90ZS5ib3ggJiYgKGVuZCA8IG5vdGUuYm94W3ZhbHVlQXhpcyArIDFdIHx8IG5vdGUuYm94W3ZhbHVlQXhpcyArIDJdIDwgc3RhcnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vdGUuaGlkZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHBhbihkZWx0YSkge1xuICAgICAgICBjb25zdCByYW5nZSA9IHRoaXMudG90YWxSYW5nZUluZGljZXModHJ1ZSk7XG4gICAgICAgIGNvbnN0IHsgc2NhbGUgfSA9IHRoaXMuc2NhbGVPcHRpb25zKCk7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IHJvdW5kKGRlbHRhIC8gc2NhbGUsIERFRkFVTFRfUFJFQ0lTSU9OKTtcbiAgICAgICAgY29uc3QgdG90YWxSYW5nZSA9IHRoaXMudG90YWxSYW5nZSgpO1xuICAgICAgICBjb25zdCBtaW4gPSByYW5nZS5taW4gKyBvZmZzZXQ7XG4gICAgICAgIGNvbnN0IG1heCA9IHJhbmdlLm1heCArIG9mZnNldDtcblxuICAgICAgICByZXR1cm4gdGhpcy5saW1pdFJhbmdlKG1pbiwgbWF4LCAwLCB0b3RhbFJhbmdlLm1heCwgb2Zmc2V0KTtcbiAgICB9XG5cbiAgICBwb2ludHNSYW5nZShzdGFydCwgZW5kKSB7XG4gICAgICAgIGNvbnN0IHsgcmV2ZXJzZSwgdmVydGljYWwgfSA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgdmFsdWVBeGlzID0gdmVydGljYWwgPyBZIDogWDtcbiAgICAgICAgY29uc3QgcmFuZ2UgPSB0aGlzLnRvdGFsUmFuZ2VJbmRpY2VzKHRydWUpO1xuICAgICAgICBjb25zdCB7IHNjYWxlLCBib3ggfSA9IHRoaXMuc2NhbGVPcHRpb25zKCk7XG4gICAgICAgIGNvbnN0IGxpbmVTdGFydCA9IGJveFt2YWx1ZUF4aXMgKyAocmV2ZXJzZSA/IDIgOiAxKV07XG5cbiAgICAgICAgY29uc3QgZGlmZlN0YXJ0ID0gc3RhcnRbdmFsdWVBeGlzXSAtIGxpbmVTdGFydDtcbiAgICAgICAgY29uc3QgZGlmZkVuZCA9IGVuZFt2YWx1ZUF4aXNdIC0gbGluZVN0YXJ0O1xuXG4gICAgICAgIGNvbnN0IG1pbiA9IHJhbmdlLm1pbiArIGRpZmZTdGFydCAvIHNjYWxlO1xuICAgICAgICBjb25zdCBtYXggPSByYW5nZS5taW4gKyBkaWZmRW5kIC8gc2NhbGU7XG4gICAgICAgIGNvbnN0IHJhbmdlTWluID0gTWF0aC5taW4obWluLCBtYXgpO1xuICAgICAgICBjb25zdCByYW5nZU1heCA9IE1hdGgubWF4KG1pbiwgbWF4KTtcblxuICAgICAgICBpZiAocmFuZ2VNYXggLSByYW5nZU1pbiA+PSBNSU5fQ0FURUdPUllfUE9JTlRTX1JBTkdFKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1pbjogcmFuZ2VNaW4sXG4gICAgICAgICAgICAgICAgbWF4OiByYW5nZU1heFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhbHVlUmFuZ2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJhbmdlKCk7XG4gICAgfVxuXG4gICAgdG90YWxJbmRleCh2YWx1ZSkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuX2NhdGVnb3JpZXNNYXAgP1xuICAgICAgICAgICAgdGhpcy5fY2F0ZWdvcmllc01hcC5nZXQodmFsdWUpIDogaW5kZXhPZih2YWx1ZSwgb3B0aW9ucy5zcmNDYXRlZ29yaWVzKTtcblxuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgfVxuXG4gICAgY3VycmVudFJhbmdlSW5kaWNlcygpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgbGV0IG1pbiA9IDA7XG5cbiAgICAgICAgaWYgKGlzTnVtYmVyKG9wdGlvbnMubWluKSkge1xuICAgICAgICAgICAgbWluID0gTWF0aC5mbG9vcihvcHRpb25zLm1pbik7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgbWF4O1xuICAgICAgICBpZiAoaXNOdW1iZXIob3B0aW9ucy5tYXgpKSB7XG4gICAgICAgICAgICBtYXggPSBvcHRpb25zLmp1c3RpZmllZCA/IE1hdGguZmxvb3Iob3B0aW9ucy5tYXgpIDogTWF0aC5jZWlsKG9wdGlvbnMubWF4KSAtIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtYXggPSB0aGlzLnRvdGFsQ291bnQoKSAtIDE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWluOiBtaW4sXG4gICAgICAgICAgICBtYXg6IG1heFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIG1hcENhdGVnb3JpZXMoKSB7XG4gICAgICAgIGlmICghdGhpcy5fY2F0ZWdvcmllc01hcCkge1xuICAgICAgICAgICAgY29uc3QgbWFwID0gdGhpcy5fY2F0ZWdvcmllc01hcCA9IG5ldyBIYXNoTWFwKCk7XG4gICAgICAgICAgICBjb25zdCBzcmNDYXRlZ29yaWVzID0gdGhpcy5vcHRpb25zLnNyY0NhdGVnb3JpZXM7XG4gICAgICAgICAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBzcmNDYXRlZ29yaWVzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgICAgICAgICBtYXAuc2V0KHNyY0NhdGVnb3JpZXNbaWR4XSwgaWR4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRvdGFsQ291bnQoKSB7XG4gICAgICAgIHJldHVybiBNYXRoLm1heCh0aGlzLm9wdGlvbnMuc3JjQ2F0ZWdvcmllcy5sZW5ndGgsIHRoaXMuX3Nlcmllc01heCB8fCAwKTtcbiAgICB9XG59XG5cbnNldERlZmF1bHRPcHRpb25zKENhdGVnb3J5QXhpcywge1xuICAgIHR5cGU6IFwiY2F0ZWdvcnlcIixcbiAgICB2ZXJ0aWNhbDogZmFsc2UsXG4gICAgbWFqb3JHcmlkTGluZXM6IHtcbiAgICAgICAgdmlzaWJsZTogZmFsc2UsXG4gICAgICAgIHdpZHRoOiAxLFxuICAgICAgICBjb2xvcjogQkxBQ0tcbiAgICB9LFxuICAgIGxhYmVsczoge1xuICAgICAgICB6SW5kZXg6IDFcbiAgICB9LFxuICAgIGp1c3RpZmllZDogZmFsc2UsXG4gICAgX2RlZmVyTGFiZWxzOiB0cnVlXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgQ2F0ZWdvcnlBeGlzO1xuIiwiY29uc3QgQ09PUkRJTkFURV9MSU1JVCA9IDMwMDAwMDtcblxuY29uc3QgRGF0ZUxhYmVsRm9ybWF0cyA9IHtcbiAgICBtaWxsaXNlY29uZHM6IFwiSEg6bW06c3MuZmZmXCIsXG4gICAgc2Vjb25kczogXCJISDptbTpzc1wiLFxuICAgIG1pbnV0ZXM6IFwiSEg6bW1cIixcbiAgICBob3VyczogXCJISDptbVwiLFxuICAgIGRheXM6IFwiTS9kXCIsXG4gICAgd2Vla3M6IFwiTS9kXCIsXG4gICAgbW9udGhzOiBcIk1NTSAneXlcIixcbiAgICB5ZWFyczogXCJ5eXl5XCJcbn07XG5cbmNvbnN0IFpFUk9fVEhSRVNIT0xEID0gMC4yO1xuXG5leHBvcnQge1xuICAgIENPT1JESU5BVEVfTElNSVQsIERhdGVMYWJlbEZvcm1hdHMsIFpFUk9fVEhSRVNIT0xEXG59OyIsImltcG9ydCBDYXRlZ29yeUF4aXMgZnJvbSAnLi9jYXRlZ29yeS1heGlzJztcbmltcG9ydCBBeGlzTGFiZWwgZnJvbSAnLi9heGlzLWxhYmVsJztcblxuaW1wb3J0IHsgREVGQVVMVF9QUkVDSVNJT04sIE1BWF9WQUxVRSwgT0JKRUNULCBEQVRFLCBYLCBZIH0gZnJvbSAnLi4vY29tbW9uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBkZWVwRXh0ZW5kLCBkZWZpbmVkLCBpbkFycmF5LCBsYXN0LCBsaW1pdFZhbHVlLCByb3VuZCwgc2V0RGVmYXVsdE9wdGlvbnMsIHNwYXJzZUFycmF5TGltaXRzIH0gZnJvbSAnLi4vY29tbW9uJztcblxuaW1wb3J0IHsgTUlMTElTRUNPTkRTLCBTRUNPTkRTLCBNSU5VVEVTLCBIT1VSUywgREFZUywgV0VFS1MsIE1PTlRIUywgWUVBUlMsXG4gICAgVElNRV9QRVJfTUlOVVRFLCBUSU1FX1BFUl9IT1VSLCBUSU1FX1BFUl9EQVksIFRJTUVfUEVSX1dFRUssXG4gICAgVElNRV9QRVJfTU9OVEgsIFRJTUVfUEVSX1lFQVIsIFRJTUVfUEVSX1VOSVQgfSBmcm9tICcuLi9kYXRlLXV0aWxzL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBkYXRlQ29tcGFyZXIsIHRvRGF0ZSwgYWRkVGlja3MsIGFkZER1cmF0aW9uLCBkYXRlRGlmZiwgYWJzb2x1dGVEYXRlRGlmZixcbiAgICBkYXRlSW5kZXgsIGRhdGVFcXVhbHMsIHRvVGltZSwgcGFyc2VEYXRlLCBwYXJzZURhdGVzLCBmaXJzdERheSB9IGZyb20gJy4uL2RhdGUtdXRpbHMnO1xuXG5pbXBvcnQgeyBEYXRlTGFiZWxGb3JtYXRzIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuXG5jb25zdCBBVVRPID0gXCJhdXRvXCI7XG5jb25zdCBCQVNFX1VOSVRTID0gW1xuICAgIE1JTExJU0VDT05EUywgU0VDT05EUywgTUlOVVRFUywgSE9VUlMsIERBWVMsIFdFRUtTLCBNT05USFMsIFlFQVJTXG5dO1xuY29uc3QgRklUID0gXCJmaXRcIjtcblxuXG5mdW5jdGlvbiBjYXRlZ29yeVJhbmdlKGNhdGVnb3JpZXMpIHtcbiAgICBsZXQgcmFuZ2UgPSBjYXRlZ29yaWVzLl9yYW5nZTtcbiAgICBpZiAoIXJhbmdlKSB7XG4gICAgICAgIHJhbmdlID0gY2F0ZWdvcmllcy5fcmFuZ2UgPSBzcGFyc2VBcnJheUxpbWl0cyhjYXRlZ29yaWVzKTtcbiAgICAgICAgcmFuZ2UubWluID0gdG9EYXRlKHJhbmdlLm1pbik7XG4gICAgICAgIHJhbmdlLm1heCA9IHRvRGF0ZShyYW5nZS5tYXgpO1xuICAgIH1cblxuICAgIHJldHVybiByYW5nZTtcbn1cblxuY2xhc3MgRW1wdHlEYXRlUmFuZ2Uge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG5cbiAgICBkaXNwbGF5SW5kaWNlcygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1pbjogMCxcbiAgICAgICAgICAgIG1heDogMVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGRpc3BsYXlSYW5nZSgpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH1cblxuICAgIHRvdGFsKCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgfVxuXG4gICAgdmFsdWVSYW5nZSgpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH1cblxuICAgIHZhbHVlSW5kZXgoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICB2YWx1ZXMoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICB0b3RhbEluZGV4KCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgdmFsdWVzQ291bnQoKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIHRvdGFsQ291bnQoKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIGRhdGVBdCgpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuXG5jbGFzcyBEYXRlUmFuZ2Uge1xuICAgIGNvbnN0cnVjdG9yKHN0YXJ0LCBlbmQsIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgb3B0aW9ucy5iYXNlVW5pdFN0ZXAgPSBvcHRpb25zLmJhc2VVbml0U3RlcCB8fCAxO1xuXG4gICAgICAgIGNvbnN0IHsgcm91bmRUb0Jhc2VVbml0LCBqdXN0aWZpZWQgfSA9IG9wdGlvbnM7XG5cbiAgICAgICAgdGhpcy5zdGFydCA9IGFkZER1cmF0aW9uKHN0YXJ0LCAwLCBvcHRpb25zLmJhc2VVbml0LCBvcHRpb25zLndlZWtTdGFydERheSk7XG4gICAgICAgIGNvbnN0IGxvd2VyRW5kID0gdGhpcy5yb3VuZFRvVG90YWxTdGVwKGVuZCk7XG4gICAgICAgIGNvbnN0IGV4cGFuZEVuZCA9ICFqdXN0aWZpZWQgJiYgZGF0ZUVxdWFscyhlbmQsIGxvd2VyRW5kKSAmJiAhb3B0aW9ucy5qdXN0aWZ5RW5kO1xuXG4gICAgICAgIHRoaXMuZW5kID0gdGhpcy5yb3VuZFRvVG90YWxTdGVwKGVuZCwgIWp1c3RpZmllZCwgZXhwYW5kRW5kID8gMSA6IDApO1xuXG4gICAgICAgIGNvbnN0IG1pbiA9IG9wdGlvbnMubWluIHx8IHN0YXJ0O1xuICAgICAgICB0aGlzLnZhbHVlU3RhcnQgPSB0aGlzLnJvdW5kVG9Ub3RhbFN0ZXAobWluKTtcbiAgICAgICAgdGhpcy5kaXNwbGF5U3RhcnQgPSByb3VuZFRvQmFzZVVuaXQgPyB0aGlzLnZhbHVlU3RhcnQgOiBtaW47XG5cbiAgICAgICAgY29uc3QgbWF4ID0gb3B0aW9ucy5tYXg7XG4gICAgICAgIGlmICghbWF4KSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlRW5kID0gbG93ZXJFbmQ7XG4gICAgICAgICAgICB0aGlzLmRpc3BsYXlFbmQgPSByb3VuZFRvQmFzZVVuaXQgfHwgZXhwYW5kRW5kID8gdGhpcy5lbmQgOiBlbmQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlRW5kID0gdGhpcy5yb3VuZFRvVG90YWxTdGVwKG1heCwgZmFsc2UsICFqdXN0aWZpZWQgJiYgZGF0ZUVxdWFscyhtYXgsIHRoaXMucm91bmRUb1RvdGFsU3RlcChtYXgpKSA/IC0xIDogMCk7XG4gICAgICAgICAgICB0aGlzLmRpc3BsYXlFbmQgPSByb3VuZFRvQmFzZVVuaXQgPyB0aGlzLnJvdW5kVG9Ub3RhbFN0ZXAobWF4LCAhanVzdGlmaWVkKSA6IG9wdGlvbnMubWF4O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMudmFsdWVFbmQgPCB0aGlzLnZhbHVlU3RhcnQpIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWVFbmQgPSB0aGlzLnZhbHVlU3RhcnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZGlzcGxheUVuZCA8PSB0aGlzLmRpc3BsYXlTdGFydCkge1xuICAgICAgICAgICAgdGhpcy5kaXNwbGF5RW5kID0gdGhpcy5yb3VuZFRvVG90YWxTdGVwKHRoaXMuZGlzcGxheVN0YXJ0LCBmYWxzZSwgMSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkaXNwbGF5UmFuZ2UoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtaW46IHRoaXMuZGlzcGxheVN0YXJ0LFxuICAgICAgICAgICAgbWF4OiB0aGlzLmRpc3BsYXlFbmRcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBkaXNwbGF5SW5kaWNlcygpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9pbmRpY2VzKSB7XG4gICAgICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG4gICAgICAgICAgICBjb25zdCB7IGJhc2VVbml0LCBiYXNlVW5pdFN0ZXAgfSA9IG9wdGlvbnM7XG5cbiAgICAgICAgICAgIGNvbnN0IG1pbklkeCA9IGRhdGVJbmRleCh0aGlzLmRpc3BsYXlTdGFydCwgdGhpcy52YWx1ZVN0YXJ0LCBiYXNlVW5pdCwgYmFzZVVuaXRTdGVwKTtcbiAgICAgICAgICAgIGNvbnN0IG1heElkeCA9IGRhdGVJbmRleCh0aGlzLmRpc3BsYXlFbmQsIHRoaXMudmFsdWVTdGFydCwgYmFzZVVuaXQsIGJhc2VVbml0U3RlcCk7XG5cbiAgICAgICAgICAgIHRoaXMuX2luZGljZXMgPSB7IG1pbjogbWluSWR4LCBtYXg6IG1heElkeCB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2luZGljZXM7XG4gICAgfVxuXG4gICAgdG90YWwoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtaW46IHRoaXMuc3RhcnQsXG4gICAgICAgICAgICBtYXg6IHRoaXMuZW5kXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdG90YWxDb3VudCgpIHtcbiAgICAgICAgY29uc3QgbGFzdCA9IHRoaXMudG90YWxJbmRleCh0aGlzLmVuZCk7XG5cbiAgICAgICAgcmV0dXJuIGxhc3QgKyAodGhpcy5vcHRpb25zLmp1c3RpZmllZCA/IDEgOiAwKTtcbiAgICB9XG5cbiAgICB2YWx1ZVJhbmdlKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWluOiB0aGlzLnZhbHVlU3RhcnQsXG4gICAgICAgICAgICBtYXg6IHRoaXMudmFsdWVFbmRcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YWx1ZUluZGV4KHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKGRhdGVJbmRleCh2YWx1ZSwgdGhpcy52YWx1ZVN0YXJ0LCBvcHRpb25zLmJhc2VVbml0LCBvcHRpb25zLmJhc2VVbml0U3RlcCkpO1xuICAgIH1cblxuICAgIHRvdGFsSW5kZXgodmFsdWUpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoZGF0ZUluZGV4KHZhbHVlLCB0aGlzLnN0YXJ0LCBvcHRpb25zLmJhc2VVbml0LCBvcHRpb25zLmJhc2VVbml0U3RlcCkpO1xuICAgIH1cblxuICAgIGRhdGVJbmRleCh2YWx1ZSkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICByZXR1cm4gZGF0ZUluZGV4KHZhbHVlLCB0aGlzLnZhbHVlU3RhcnQsIG9wdGlvbnMuYmFzZVVuaXQsIG9wdGlvbnMuYmFzZVVuaXRTdGVwKTtcbiAgICB9XG5cbiAgICB2YWx1ZXNDb3VudCgpIHtcbiAgICAgICAgY29uc3QgbWF4SWR4ID0gdGhpcy52YWx1ZUluZGV4KHRoaXMudmFsdWVFbmQpO1xuXG4gICAgICAgIHJldHVybiBtYXhJZHggKyAxO1xuICAgIH1cblxuICAgIHZhbHVlcygpIHtcbiAgICAgICAgbGV0IHZhbHVlcyA9IHRoaXMuX3ZhbHVlcztcbiAgICAgICAgaWYgKCF2YWx1ZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgICAgICBjb25zdCByYW5nZSA9IHRoaXMudmFsdWVSYW5nZSgpO1xuICAgICAgICAgICAgdGhpcy5fdmFsdWVzID0gdmFsdWVzID0gW107XG5cbiAgICAgICAgICAgIGZvciAobGV0IGRhdGUgPSByYW5nZS5taW47IGRhdGUgPD0gcmFuZ2UubWF4Oykge1xuICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKGRhdGUpO1xuICAgICAgICAgICAgICAgIGRhdGUgPSBhZGREdXJhdGlvbihkYXRlLCBvcHRpb25zLmJhc2VVbml0U3RlcCwgb3B0aW9ucy5iYXNlVW5pdCwgb3B0aW9ucy53ZWVrU3RhcnREYXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9XG5cbiAgICBkYXRlQXQoaW5kZXgsIHRvdGFsKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAgICAgcmV0dXJuIGFkZER1cmF0aW9uKHRvdGFsID8gdGhpcy5zdGFydCA6IHRoaXMudmFsdWVTdGFydCwgb3B0aW9ucy5iYXNlVW5pdFN0ZXAgKiBpbmRleCwgb3B0aW9ucy5iYXNlVW5pdCwgb3B0aW9ucy53ZWVrU3RhcnREYXkpO1xuICAgIH1cblxuICAgIHJvdW5kVG9Ub3RhbFN0ZXAodmFsdWUsIHVwcGVyLCBuZXh0KSB7XG4gICAgICAgIGNvbnN0IHsgYmFzZVVuaXQsIGJhc2VVbml0U3RlcCwgd2Vla1N0YXJ0RGF5IH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5zdGFydDtcblxuICAgICAgICBjb25zdCBzdGVwID0gZGF0ZUluZGV4KHZhbHVlLCBzdGFydCwgYmFzZVVuaXQsIGJhc2VVbml0U3RlcCk7XG4gICAgICAgIGxldCByb3VuZGVkU3RlcCA9IHVwcGVyID8gTWF0aC5jZWlsKHN0ZXApIDogTWF0aC5mbG9vcihzdGVwKTtcblxuICAgICAgICBpZiAobmV4dCkge1xuICAgICAgICAgICAgcm91bmRlZFN0ZXAgKz0gbmV4dDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhZGREdXJhdGlvbihzdGFydCwgcm91bmRlZFN0ZXAgKiBiYXNlVW5pdFN0ZXAsIGJhc2VVbml0LCB3ZWVrU3RhcnREYXkpO1xuICAgIH1cblxufVxuXG5mdW5jdGlvbiBhdXRvQmFzZVVuaXQob3B0aW9ucywgc3RhcnRVbml0LCBzdGFydFN0ZXApIHtcbiAgICBjb25zdCBjYXRlZ29yeUxpbWl0cyA9IGNhdGVnb3J5UmFuZ2Uob3B0aW9ucy5jYXRlZ29yaWVzKTtcbiAgICBjb25zdCBzcGFuID0gKG9wdGlvbnMubWF4IHx8IGNhdGVnb3J5TGltaXRzLm1heCkgLSAob3B0aW9ucy5taW4gfHwgY2F0ZWdvcnlMaW1pdHMubWluKTtcbiAgICBjb25zdCB7IGF1dG9CYXNlVW5pdFN0ZXBzLCBtYXhEYXRlR3JvdXBzIH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IGF1dG9Vbml0ID0gb3B0aW9ucy5iYXNlVW5pdCA9PT0gRklUO1xuICAgIGxldCBhdXRvVW5pdEl4ID0gc3RhcnRVbml0ID8gQkFTRV9VTklUUy5pbmRleE9mKHN0YXJ0VW5pdCkgOiAwO1xuICAgIGxldCBiYXNlVW5pdCA9IGF1dG9Vbml0ID8gQkFTRV9VTklUU1thdXRvVW5pdEl4KytdIDogb3B0aW9ucy5iYXNlVW5pdDtcbiAgICBsZXQgdW5pdHMgPSBzcGFuIC8gVElNRV9QRVJfVU5JVFtiYXNlVW5pdF07XG4gICAgbGV0IHRvdGFsVW5pdHMgPSB1bml0cztcbiAgICBsZXQgdW5pdFN0ZXBzLCBzdGVwLCBuZXh0U3RlcDtcblxuICAgIHdoaWxlICghc3RlcCB8fCB1bml0cyA+PSBtYXhEYXRlR3JvdXBzKSB7XG4gICAgICAgIHVuaXRTdGVwcyA9IHVuaXRTdGVwcyB8fCBhdXRvQmFzZVVuaXRTdGVwc1tiYXNlVW5pdF0uc2xpY2UoMCk7XG5cbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgbmV4dFN0ZXAgPSB1bml0U3RlcHMuc2hpZnQoKTtcbiAgICAgICAgfSB3aGlsZSAobmV4dFN0ZXAgJiYgc3RhcnRVbml0ID09PSBiYXNlVW5pdCAmJiBuZXh0U3RlcCA8IHN0YXJ0U3RlcCk7XG5cbiAgICAgICAgaWYgKG5leHRTdGVwKSB7XG4gICAgICAgICAgICBzdGVwID0gbmV4dFN0ZXA7XG4gICAgICAgICAgICB1bml0cyA9IHRvdGFsVW5pdHMgLyBzdGVwO1xuICAgICAgICB9IGVsc2UgaWYgKGJhc2VVbml0ID09PSBsYXN0KEJBU0VfVU5JVFMpKSB7XG4gICAgICAgICAgICBzdGVwID0gTWF0aC5jZWlsKHRvdGFsVW5pdHMgLyBtYXhEYXRlR3JvdXBzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9IGVsc2UgaWYgKGF1dG9Vbml0KSB7XG4gICAgICAgICAgICBiYXNlVW5pdCA9IEJBU0VfVU5JVFNbYXV0b1VuaXRJeCsrXSB8fCBsYXN0KEJBU0VfVU5JVFMpO1xuICAgICAgICAgICAgdG90YWxVbml0cyA9IHNwYW4gLyBUSU1FX1BFUl9VTklUW2Jhc2VVbml0XTtcbiAgICAgICAgICAgIHVuaXRTdGVwcyA9IG51bGw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodW5pdHMgPiBtYXhEYXRlR3JvdXBzKSB7XG4gICAgICAgICAgICAgICAgc3RlcCA9IE1hdGguY2VpbCh0b3RhbFVuaXRzIC8gbWF4RGF0ZUdyb3Vwcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9wdGlvbnMuYmFzZVVuaXRTdGVwID0gc3RlcDtcbiAgICBvcHRpb25zLmJhc2VVbml0ID0gYmFzZVVuaXQ7XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRCYXNlVW5pdChvcHRpb25zKSB7XG4gICAgY29uc3QgY2F0ZWdvcmllcyA9IG9wdGlvbnMuY2F0ZWdvcmllcztcbiAgICBjb25zdCBjb3VudCA9IGRlZmluZWQoY2F0ZWdvcmllcykgPyBjYXRlZ29yaWVzLmxlbmd0aCA6IDA7XG4gICAgbGV0IG1pbkRpZmYgPSBNQVhfVkFMVUU7XG4gICAgbGV0IGxhc3RDYXRlZ29yeSwgdW5pdDtcblxuICAgIGZvciAobGV0IGNhdGVnb3J5SXggPSAwOyBjYXRlZ29yeUl4IDwgY291bnQ7IGNhdGVnb3J5SXgrKykge1xuICAgICAgICBjb25zdCBjYXRlZ29yeSA9IGNhdGVnb3JpZXNbY2F0ZWdvcnlJeF07XG5cbiAgICAgICAgaWYgKGNhdGVnb3J5ICYmIGxhc3RDYXRlZ29yeSkge1xuICAgICAgICAgICAgY29uc3QgZGlmZiA9IGFic29sdXRlRGF0ZURpZmYoY2F0ZWdvcnksIGxhc3RDYXRlZ29yeSk7XG4gICAgICAgICAgICBpZiAoZGlmZiA+IDApIHtcbiAgICAgICAgICAgICAgICBtaW5EaWZmID0gTWF0aC5taW4obWluRGlmZiwgZGlmZik7XG5cbiAgICAgICAgICAgICAgICBpZiAobWluRGlmZiA+PSBUSU1FX1BFUl9ZRUFSKSB7XG4gICAgICAgICAgICAgICAgICAgIHVuaXQgPSBZRUFSUztcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1pbkRpZmYgPj0gVElNRV9QRVJfTU9OVEggLSBUSU1FX1BFUl9EQVkgKiAzKSB7XG4gICAgICAgICAgICAgICAgICAgIHVuaXQgPSBNT05USFM7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtaW5EaWZmID49IFRJTUVfUEVSX1dFRUspIHtcbiAgICAgICAgICAgICAgICAgICAgdW5pdCA9IFdFRUtTO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWluRGlmZiA+PSBUSU1FX1BFUl9EQVkpIHtcbiAgICAgICAgICAgICAgICAgICAgdW5pdCA9IERBWVM7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtaW5EaWZmID49IFRJTUVfUEVSX0hPVVIpIHtcbiAgICAgICAgICAgICAgICAgICAgdW5pdCA9IEhPVVJTO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWluRGlmZiA+PSBUSU1FX1BFUl9NSU5VVEUpIHtcbiAgICAgICAgICAgICAgICAgICAgdW5pdCA9IE1JTlVURVM7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdW5pdCA9IFNFQ09ORFM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGFzdENhdGVnb3J5ID0gY2F0ZWdvcnk7XG4gICAgfVxuXG4gICAgb3B0aW9ucy5iYXNlVW5pdCA9IHVuaXQgfHwgREFZUztcbn1cblxuZnVuY3Rpb24gaW5pdFVuaXQob3B0aW9ucykge1xuICAgIGNvbnN0IGJhc2VVbml0ID0gKG9wdGlvbnMuYmFzZVVuaXQgfHwgXCJcIikudG9Mb3dlckNhc2UoKTtcbiAgICBjb25zdCB1c2VEZWZhdWx0ID0gYmFzZVVuaXQgIT09IEZJVCAmJiAhaW5BcnJheShiYXNlVW5pdCwgQkFTRV9VTklUUyk7XG5cbiAgICBpZiAodXNlRGVmYXVsdCkge1xuICAgICAgICBkZWZhdWx0QmFzZVVuaXQob3B0aW9ucyk7XG4gICAgfVxuXG4gICAgaWYgKGJhc2VVbml0ID09PSBGSVQgfHwgb3B0aW9ucy5iYXNlVW5pdFN0ZXAgPT09IEFVVE8pIHtcbiAgICAgICAgYXV0b0Jhc2VVbml0KG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiBvcHRpb25zO1xufVxuXG5jbGFzcyBEYXRlQ2F0ZWdvcnlBeGlzIGV4dGVuZHMgQ2F0ZWdvcnlBeGlzIHtcblxuICAgIGNsb25lKCkge1xuICAgICAgICBjb25zdCBjb3B5ID0gbmV3IERhdGVDYXRlZ29yeUF4aXMoT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5vcHRpb25zKSwgdGhpcy5jaGFydFNlcnZpY2UpO1xuICAgICAgICBjb3B5LmNyZWF0ZUxhYmVscygpO1xuXG4gICAgICAgIHJldHVybiBjb3B5O1xuICAgIH1cblxuICAgIGNhdGVnb3JpZXNIYXNoKCkge1xuICAgICAgICBjb25zdCBzdGFydCA9IHRoaXMuZGF0YVJhbmdlLnRvdGFsKCkubWluO1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmJhc2VVbml0ICsgdGhpcy5vcHRpb25zLmJhc2VVbml0U3RlcCArIHN0YXJ0O1xuICAgIH1cblxuICAgIGluaXRVc2VyT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25zO1xuICAgIH1cblxuICAgIGluaXRGaWVsZHMoKSB7XG4gICAgICAgIHN1cGVyLmluaXRGaWVsZHMoKTtcblxuICAgICAgICBjb25zdCBjaGFydFNlcnZpY2UgPSB0aGlzLmNoYXJ0U2VydmljZTtcbiAgICAgICAgY29uc3QgaW50bFNlcnZpY2UgPSBjaGFydFNlcnZpY2UuaW50bDtcbiAgICAgICAgbGV0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAgICAgbGV0IGNhdGVnb3JpZXMgPSBvcHRpb25zLmNhdGVnb3JpZXMgfHwgW107XG4gICAgICAgIGlmICghY2F0ZWdvcmllcy5fcGFyc2VkKSB7XG4gICAgICAgICAgICBjYXRlZ29yaWVzID0gcGFyc2VEYXRlcyhpbnRsU2VydmljZSwgY2F0ZWdvcmllcyk7XG4gICAgICAgICAgICBjYXRlZ29yaWVzLl9wYXJzZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgb3B0aW9ucyA9IGRlZXBFeHRlbmQoe1xuICAgICAgICAgICAgcm91bmRUb0Jhc2VVbml0OiB0cnVlXG4gICAgICAgIH0sIG9wdGlvbnMsIHtcbiAgICAgICAgICAgIGNhdGVnb3JpZXM6IGNhdGVnb3JpZXMsXG4gICAgICAgICAgICBtaW46IHBhcnNlRGF0ZShpbnRsU2VydmljZSwgb3B0aW9ucy5taW4pLFxuICAgICAgICAgICAgbWF4OiBwYXJzZURhdGUoaW50bFNlcnZpY2UsIG9wdGlvbnMubWF4KSxcbiAgICAgICAgICAgIHdlZWtTdGFydERheTogZmlyc3REYXkob3B0aW9ucywgaW50bFNlcnZpY2UpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChjaGFydFNlcnZpY2UucGFubmluZyAmJiBjaGFydFNlcnZpY2UuaXNQYW5uYWJsZShvcHRpb25zLnZlcnRpY2FsID8gWSA6IFgpKSB7XG4gICAgICAgICAgICBvcHRpb25zLnJvdW5kVG9CYXNlVW5pdCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgb3B0aW9ucy51c2VyU2V0QmFzZVVuaXQgPSBvcHRpb25zLnVzZXJTZXRCYXNlVW5pdCB8fCBvcHRpb25zLmJhc2VVbml0O1xuICAgICAgICBvcHRpb25zLnVzZXJTZXRCYXNlVW5pdFN0ZXAgPSBvcHRpb25zLnVzZXJTZXRCYXNlVW5pdFN0ZXAgfHwgb3B0aW9ucy5iYXNlVW5pdFN0ZXA7XG5cbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgb3B0aW9ucy5zcmNDYXRlZ29yaWVzID0gY2F0ZWdvcmllcztcblxuICAgICAgICBpZiAoY2F0ZWdvcmllcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCByYW5nZSA9IGNhdGVnb3J5UmFuZ2UoY2F0ZWdvcmllcyk7XG4gICAgICAgICAgICBjb25zdCBtYXhEaXZpc2lvbnMgPSBvcHRpb25zLm1heERpdmlzaW9ucztcblxuICAgICAgICAgICAgdGhpcy5kYXRhUmFuZ2UgPSBuZXcgRGF0ZVJhbmdlKHJhbmdlLm1pbiwgcmFuZ2UubWF4LCBpbml0VW5pdChvcHRpb25zKSk7XG5cbiAgICAgICAgICAgIGlmIChtYXhEaXZpc2lvbnMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhUmFuZ2UgPSB0aGlzLmRhdGFSYW5nZS5kaXNwbGF5UmFuZ2UoKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGRpdmlzaW9uT3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMsIHtcbiAgICAgICAgICAgICAgICAgICAganVzdGlmaWVkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICByb3VuZFRvQmFzZVVuaXQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBiYXNlVW5pdDogJ2ZpdCcsXG4gICAgICAgICAgICAgICAgICAgIG1pbjogZGF0YVJhbmdlLm1pbixcbiAgICAgICAgICAgICAgICAgICAgbWF4OiBkYXRhUmFuZ2UubWF4LFxuICAgICAgICAgICAgICAgICAgICBtYXhEYXRlR3JvdXBzOiBtYXhEaXZpc2lvbnNcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGFSYW5nZU9wdGlvbnMgPSB0aGlzLmRhdGFSYW5nZS5vcHRpb25zO1xuXG4gICAgICAgICAgICAgICAgYXV0b0Jhc2VVbml0KGRpdmlzaW9uT3B0aW9ucywgZGF0YVJhbmdlT3B0aW9ucy5iYXNlVW5pdCwgZGF0YVJhbmdlT3B0aW9ucy5iYXNlVW5pdFN0ZXApO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5kaXZpc2lvblJhbmdlID0gbmV3IERhdGVSYW5nZShyYW5nZS5taW4sIHJhbmdlLm1heCwgZGl2aXNpb25PcHRpb25zKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kaXZpc2lvblJhbmdlID0gdGhpcy5kYXRhUmFuZ2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9wdGlvbnMuYmFzZVVuaXQgPSBvcHRpb25zLmJhc2VVbml0IHx8IERBWVM7XG4gICAgICAgICAgICB0aGlzLmRhdGFSYW5nZSA9IHRoaXMuZGl2aXNpb25SYW5nZSA9IG5ldyBFbXB0eURhdGVSYW5nZShvcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRpY2tJbmRpY2VzKHN0ZXBTaXplKSB7XG4gICAgICAgIGNvbnN0IHsgZGF0YVJhbmdlLCBkaXZpc2lvblJhbmdlIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB2YWx1ZXNDb3VudCA9IGRpdmlzaW9uUmFuZ2UudmFsdWVzQ291bnQoKTtcblxuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5tYXhEaXZpc2lvbnMgfHwgIXZhbHVlc0NvdW50KSB7XG4gICAgICAgICAgICByZXR1cm4gc3VwZXIudGlja0luZGljZXMoc3RlcFNpemUpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgaW5kaWNlcyA9IFtdO1xuICAgICAgICBsZXQgdmFsdWVzID0gZGl2aXNpb25SYW5nZS52YWx1ZXMoKTtcbiAgICAgICAgbGV0IG9mZnNldCA9IDA7XG5cbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuanVzdGlmaWVkKSB7XG4gICAgICAgICAgICB2YWx1ZXMgPSB2YWx1ZXMuY29uY2F0KGRpdmlzaW9uUmFuZ2UuZGF0ZUF0KHZhbHVlc0NvdW50KSk7XG4gICAgICAgICAgICBvZmZzZXQgPSAwLjU7Ly9hbGlnbiB0aWNrcyB0byB0aGUgY2VudGVyIG9mIG5vdCBqdXN0aWZpZWQgY2F0ZWdvcmllc1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgdmFsdWVzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgICAgIGluZGljZXMucHVzaChkYXRhUmFuZ2UuZGF0ZUluZGV4KHZhbHVlc1tpZHhdKSArIG9mZnNldCk7XG4gICAgICAgICAgICBpZiAoc3RlcFNpemUgIT09IDEgJiYgaWR4ID49IDEpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsYXN0ID0gaW5kaWNlcy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgIGluZGljZXMuc3BsaWNlKGlkeCwgMCwgaW5kaWNlc1tsYXN0IC0gMV0gKyAoaW5kaWNlc1tsYXN0XSAtIGluZGljZXNbbGFzdCAtIDFdKSAqIHN0ZXBTaXplKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpbmRpY2VzO1xuICAgIH1cblxuICAgIHNob3VsZFJlbmRlck5vdGUodmFsdWUpIHtcbiAgICAgICAgY29uc3QgcmFuZ2UgPSB0aGlzLnJhbmdlKCk7XG4gICAgICAgIGNvbnN0IGNhdGVnb3JpZXMgPSB0aGlzLm9wdGlvbnMuY2F0ZWdvcmllcyB8fCBbXTtcblxuICAgICAgICByZXR1cm4gZGF0ZUNvbXBhcmVyKHZhbHVlLCByYW5nZS5taW4pID49IDAgJiYgZGF0ZUNvbXBhcmVyKHZhbHVlLCByYW5nZS5tYXgpIDw9IDAgJiYgY2F0ZWdvcmllcy5sZW5ndGg7XG4gICAgfVxuXG4gICAgcGFyc2VOb3RlVmFsdWUodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlRGF0ZSh0aGlzLmNoYXJ0U2VydmljZS5pbnRsLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgbm90ZVNsb3QodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U2xvdCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgdHJhbnNsYXRlUmFuZ2UoZGVsdGEpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgeyBiYXNlVW5pdCwgd2Vla1N0YXJ0RGF5LCB2ZXJ0aWNhbCB9ID0gb3B0aW9ucztcbiAgICAgICAgY29uc3QgbGluZUJveCA9IHRoaXMubGluZUJveCgpO1xuICAgICAgICBjb25zdCBzaXplID0gdmVydGljYWwgPyBsaW5lQm94LmhlaWdodCgpIDogbGluZUJveC53aWR0aCgpO1xuICAgICAgICBsZXQgcmFuZ2UgPSB0aGlzLnJhbmdlKCk7XG4gICAgICAgIGNvbnN0IHNjYWxlID0gc2l6ZSAvIChyYW5nZS5tYXggLSByYW5nZS5taW4pO1xuICAgICAgICBjb25zdCBvZmZzZXQgPSByb3VuZChkZWx0YSAvIHNjYWxlLCBERUZBVUxUX1BSRUNJU0lPTik7XG5cbiAgICAgICAgaWYgKHJhbmdlLm1pbiAmJiByYW5nZS5tYXgpIHtcbiAgICAgICAgICAgIGNvbnN0IGZyb20gPSBhZGRUaWNrcyhvcHRpb25zLm1pbiB8fCByYW5nZS5taW4sIG9mZnNldCk7XG4gICAgICAgICAgICBjb25zdCB0byA9IGFkZFRpY2tzKG9wdGlvbnMubWF4IHx8IHJhbmdlLm1heCwgb2Zmc2V0KTtcblxuICAgICAgICAgICAgcmFuZ2UgPSB7XG4gICAgICAgICAgICAgICAgbWluOiBhZGREdXJhdGlvbihmcm9tLCAwLCBiYXNlVW5pdCwgd2Vla1N0YXJ0RGF5KSxcbiAgICAgICAgICAgICAgICBtYXg6IGFkZER1cmF0aW9uKHRvLCAwLCBiYXNlVW5pdCwgd2Vla1N0YXJ0RGF5KVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByYW5nZTtcbiAgICB9XG5cbiAgICBzY2FsZVJhbmdlKGRlbHRhKSB7XG4gICAgICAgIGxldCByb3VuZHMgPSBNYXRoLmFicyhkZWx0YSk7XG4gICAgICAgIGxldCByZXN1bHQgPSB0aGlzLnJhbmdlKCk7XG4gICAgICAgIGxldCB7IG1pbjogZnJvbSwgbWF4OiB0byB9ID0gcmVzdWx0O1xuXG4gICAgICAgIGlmIChmcm9tICYmIHRvKSB7XG4gICAgICAgICAgICB3aGlsZSAocm91bmRzLS0pIHtcbiAgICAgICAgICAgICAgICBjb25zdCByYW5nZSA9IGRhdGVEaWZmKGZyb20sIHRvKTtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGVwID0gTWF0aC5yb3VuZChyYW5nZSAqIDAuMSk7XG4gICAgICAgICAgICAgICAgaWYgKGRlbHRhIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICBmcm9tID0gYWRkVGlja3MoZnJvbSwgc3RlcCk7XG4gICAgICAgICAgICAgICAgICAgIHRvID0gYWRkVGlja3ModG8sIC1zdGVwKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBmcm9tID0gYWRkVGlja3MoZnJvbSwgLXN0ZXApO1xuICAgICAgICAgICAgICAgICAgICB0byA9IGFkZFRpY2tzKHRvLCBzdGVwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlc3VsdCA9IHsgbWluOiBmcm9tLCBtYXg6IHRvIH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGxhYmVsc1JhbmdlKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWluOiB0aGlzLm9wdGlvbnMubGFiZWxzLnNraXAsXG4gICAgICAgICAgICBtYXg6IHRoaXMuZGl2aXNpb25SYW5nZS52YWx1ZXNDb3VudCgpXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcGFuKGRlbHRhKSB7XG4gICAgICAgIGlmICh0aGlzLmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBsaW5lQm94ID0gdGhpcy5saW5lQm94KCk7XG4gICAgICAgIGNvbnN0IHNpemUgPSBvcHRpb25zLnZlcnRpY2FsID8gbGluZUJveC5oZWlnaHQoKSA6IGxpbmVCb3gud2lkdGgoKTtcbiAgICAgICAgY29uc3QgeyBtaW4sIG1heCB9ID0gdGhpcy5kYXRhUmFuZ2UuZGlzcGxheVJhbmdlKCk7XG4gICAgICAgIGNvbnN0IHRvdGFsTGltaXRzID0gdGhpcy5kYXRhUmFuZ2UudG90YWwoKTtcbiAgICAgICAgY29uc3Qgc2NhbGUgPSBzaXplIC8gKG1heCAtIG1pbik7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IHJvdW5kKGRlbHRhIC8gc2NhbGUsIERFRkFVTFRfUFJFQ0lTSU9OKSAqIChvcHRpb25zLnJldmVyc2UgPyAtMSA6IDEpO1xuICAgICAgICBjb25zdCBmcm9tID0gYWRkVGlja3MobWluLCBvZmZzZXQpO1xuICAgICAgICBjb25zdCB0byA9IGFkZFRpY2tzKG1heCwgb2Zmc2V0KTtcblxuICAgICAgICBjb25zdCBwYW5SYW5nZSA9IHRoaXMubGltaXRSYW5nZSh0b1RpbWUoZnJvbSksIHRvVGltZSh0byksIHRvVGltZSh0b3RhbExpbWl0cy5taW4pLCB0b1RpbWUodG90YWxMaW1pdHMubWF4KSwgb2Zmc2V0KTtcblxuICAgICAgICBpZiAocGFuUmFuZ2UpIHtcbiAgICAgICAgICAgIHBhblJhbmdlLm1pbiA9IHRvRGF0ZShwYW5SYW5nZS5taW4pO1xuICAgICAgICAgICAgcGFuUmFuZ2UubWF4ID0gdG9EYXRlKHBhblJhbmdlLm1heCk7XG4gICAgICAgICAgICBwYW5SYW5nZS5iYXNlVW5pdCA9IG9wdGlvbnMuYmFzZVVuaXQ7XG4gICAgICAgICAgICBwYW5SYW5nZS5iYXNlVW5pdFN0ZXAgPSBvcHRpb25zLmJhc2VVbml0U3RlcCB8fCAxO1xuICAgICAgICAgICAgcGFuUmFuZ2UudXNlclNldEJhc2VVbml0ID0gb3B0aW9ucy51c2VyU2V0QmFzZVVuaXQ7XG4gICAgICAgICAgICBwYW5SYW5nZS51c2VyU2V0QmFzZVVuaXRTdGVwID0gb3B0aW9ucy51c2VyU2V0QmFzZVVuaXRTdGVwO1xuXG4gICAgICAgICAgICByZXR1cm4gcGFuUmFuZ2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwb2ludHNSYW5nZShzdGFydCwgZW5kKSB7XG4gICAgICAgIGlmICh0aGlzLmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwb2ludHNSYW5nZSA9IHN1cGVyLnBvaW50c1JhbmdlKHN0YXJ0LCBlbmQpO1xuICAgICAgICBjb25zdCBkYXRlc1JhbmdlID0gdGhpcy5kYXRhUmFuZ2UuZGlzcGxheVJhbmdlKCk7XG4gICAgICAgIGNvbnN0IGluZGljZXNSYW5nZSA9IHRoaXMuZGF0YVJhbmdlLmRpc3BsYXlJbmRpY2VzKCk7XG4gICAgICAgIGNvbnN0IHNjYWxlID0gZGF0ZURpZmYoZGF0ZXNSYW5nZS5tYXgsIGRhdGVzUmFuZ2UubWluKSAvIChpbmRpY2VzUmFuZ2UubWF4IC0gaW5kaWNlc1JhbmdlLm1pbik7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAgICAgY29uc3QgbWluID0gYWRkVGlja3MoZGF0ZXNSYW5nZS5taW4sIHBvaW50c1JhbmdlLm1pbiAqIHNjYWxlKTtcbiAgICAgICAgY29uc3QgbWF4ID0gYWRkVGlja3MoZGF0ZXNSYW5nZS5taW4sIHBvaW50c1JhbmdlLm1heCAqIHNjYWxlKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWluOiBtaW4sXG4gICAgICAgICAgICBtYXg6IG1heCxcbiAgICAgICAgICAgIGJhc2VVbml0OiBvcHRpb25zLnVzZXJTZXRCYXNlVW5pdCB8fCBvcHRpb25zLmJhc2VVbml0LFxuICAgICAgICAgICAgYmFzZVVuaXRTdGVwOiBvcHRpb25zLnVzZXJTZXRCYXNlVW5pdFN0ZXAgfHwgb3B0aW9ucy5iYXNlVW5pdFN0ZXBcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB6b29tUmFuZ2UoZGVsdGEpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNFbXB0eSgpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGZpdCA9IG9wdGlvbnMudXNlclNldEJhc2VVbml0ID09PSBGSVQ7XG4gICAgICAgIGNvbnN0IHRvdGFsTGltaXRzID0gdGhpcy5kYXRhUmFuZ2UudG90YWwoKTtcbiAgICAgICAgY29uc3QgeyBtaW46IHJhbmdlTWluLCBtYXg6IHJhbmdlTWF4IH0gPSB0aGlzLmRhdGFSYW5nZS5kaXNwbGF5UmFuZ2UoKTtcbiAgICAgICAgbGV0IHsgd2Vla1N0YXJ0RGF5LCBiYXNlVW5pdCwgYmFzZVVuaXRTdGVwIH0gPSB0aGlzLmRhdGFSYW5nZS5vcHRpb25zO1xuICAgICAgICBsZXQgbWluID0gYWRkRHVyYXRpb24ocmFuZ2VNaW4sIGRlbHRhICogYmFzZVVuaXRTdGVwLCBiYXNlVW5pdCwgd2Vla1N0YXJ0RGF5KTtcbiAgICAgICAgbGV0IG1heCA9IGFkZER1cmF0aW9uKHJhbmdlTWF4LCAtZGVsdGEgKiBiYXNlVW5pdFN0ZXAsIGJhc2VVbml0LCB3ZWVrU3RhcnREYXkpO1xuXG4gICAgICAgIGlmIChmaXQpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgYXV0b0Jhc2VVbml0U3RlcHMsIG1heERhdGVHcm91cHMgfSA9IG9wdGlvbnM7XG5cbiAgICAgICAgICAgIGNvbnN0IG1heERpZmYgPSBsYXN0KGF1dG9CYXNlVW5pdFN0ZXBzW2Jhc2VVbml0XSkgKiBtYXhEYXRlR3JvdXBzICogVElNRV9QRVJfVU5JVFtiYXNlVW5pdF07XG4gICAgICAgICAgICBjb25zdCByYW5nZURpZmYgPSBkYXRlRGlmZihyYW5nZU1heCwgcmFuZ2VNaW4pO1xuICAgICAgICAgICAgY29uc3QgZGlmZiA9IGRhdGVEaWZmKG1heCwgbWluKTtcbiAgICAgICAgICAgIGxldCBiYXNlVW5pdEluZGV4ID0gQkFTRV9VTklUUy5pbmRleE9mKGJhc2VVbml0KTtcbiAgICAgICAgICAgIGxldCBhdXRvQmFzZVVuaXRTdGVwLCB0aWNrcztcblxuICAgICAgICAgICAgaWYgKGRpZmYgPCBUSU1FX1BFUl9VTklUW2Jhc2VVbml0XSAmJiBiYXNlVW5pdCAhPT0gTUlMTElTRUNPTkRTKSB7XG4gICAgICAgICAgICAgICAgYmFzZVVuaXQgPSBCQVNFX1VOSVRTW2Jhc2VVbml0SW5kZXggLSAxXTtcbiAgICAgICAgICAgICAgICBhdXRvQmFzZVVuaXRTdGVwID0gbGFzdChhdXRvQmFzZVVuaXRTdGVwc1tiYXNlVW5pdF0pO1xuICAgICAgICAgICAgICAgIHRpY2tzID0gKHJhbmdlRGlmZiAtIChtYXhEYXRlR3JvdXBzIC0gMSkgKiBhdXRvQmFzZVVuaXRTdGVwICogVElNRV9QRVJfVU5JVFtiYXNlVW5pdF0pIC8gMjtcbiAgICAgICAgICAgICAgICBtaW4gPSBhZGRUaWNrcyhyYW5nZU1pbiwgdGlja3MpO1xuICAgICAgICAgICAgICAgIG1heCA9IGFkZFRpY2tzKHJhbmdlTWF4LCAtdGlja3MpO1xuXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRpZmYgPiBtYXhEaWZmICYmIGJhc2VVbml0ICE9PSBZRUFSUykge1xuICAgICAgICAgICAgICAgIGxldCBzdGVwSW5kZXggPSAwO1xuXG4gICAgICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgICAgICBiYXNlVW5pdEluZGV4Kys7XG4gICAgICAgICAgICAgICAgICAgIGJhc2VVbml0ID0gQkFTRV9VTklUU1tiYXNlVW5pdEluZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgc3RlcEluZGV4ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgdGlja3MgPSAyICogVElNRV9QRVJfVU5JVFtiYXNlVW5pdF07XG4gICAgICAgICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9CYXNlVW5pdFN0ZXAgPSBhdXRvQmFzZVVuaXRTdGVwc1tiYXNlVW5pdF1bc3RlcEluZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0ZXBJbmRleCsrO1xuICAgICAgICAgICAgICAgICAgICB9IHdoaWxlIChzdGVwSW5kZXggPCBhdXRvQmFzZVVuaXRTdGVwc1tiYXNlVW5pdF0ubGVuZ3RoICYmIHRpY2tzICogYXV0b0Jhc2VVbml0U3RlcCA8IHJhbmdlRGlmZik7XG4gICAgICAgICAgICAgICAgfSB3aGlsZSAoYmFzZVVuaXQgIT09IFlFQVJTICYmIHRpY2tzICogYXV0b0Jhc2VVbml0U3RlcCA8IHJhbmdlRGlmZik7XG5cbiAgICAgICAgICAgICAgICB0aWNrcyA9ICh0aWNrcyAqIGF1dG9CYXNlVW5pdFN0ZXAgLSByYW5nZURpZmYpIC8gMjtcbiAgICAgICAgICAgICAgICBpZiAodGlja3MgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIG1pbiA9IGFkZFRpY2tzKHJhbmdlTWluLCAtdGlja3MpO1xuICAgICAgICAgICAgICAgICAgICBtYXggPSBhZGRUaWNrcyhyYW5nZU1heCwgdGlja3MpO1xuICAgICAgICAgICAgICAgICAgICBtaW4gPSBhZGRUaWNrcyhtaW4sIGxpbWl0VmFsdWUobWF4LCB0b3RhbExpbWl0cy5taW4sIHRvdGFsTGltaXRzLm1heCkgLSBtYXgpO1xuICAgICAgICAgICAgICAgICAgICBtYXggPSBhZGRUaWNrcyhtYXgsIGxpbWl0VmFsdWUobWluLCB0b3RhbExpbWl0cy5taW4sIHRvdGFsTGltaXRzLm1heCkgLSBtaW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtaW4gPCB0b3RhbExpbWl0cy5taW4pIHtcbiAgICAgICAgICAgIG1pbiA9IHRvdGFsTGltaXRzLm1pbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF4ID4gdG90YWxMaW1pdHMubWF4KSB7XG4gICAgICAgICAgICBtYXggPSB0b3RhbExpbWl0cy5tYXg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWluICYmIG1heCAmJiBkYXRlRGlmZihtYXgsIG1pbikgPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1pbjogbWluLFxuICAgICAgICAgICAgICAgIG1heDogbWF4LFxuICAgICAgICAgICAgICAgIGJhc2VVbml0OiBvcHRpb25zLnVzZXJTZXRCYXNlVW5pdCB8fCBvcHRpb25zLmJhc2VVbml0LFxuICAgICAgICAgICAgICAgIGJhc2VVbml0U3RlcDogb3B0aW9ucy51c2VyU2V0QmFzZVVuaXRTdGVwIHx8IG9wdGlvbnMuYmFzZVVuaXRTdGVwXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmFuZ2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFSYW5nZS5kaXNwbGF5UmFuZ2UoKTtcbiAgICB9XG5cbiAgICBjcmVhdGVBeGlzTGFiZWwoaW5kZXgsIGxhYmVsT3B0aW9ucykge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBkYXRhSXRlbSA9IG9wdGlvbnMuZGF0YUl0ZW1zICYmICFvcHRpb25zLm1heERpdmlzaW9ucyA/IG9wdGlvbnMuZGF0YUl0ZW1zW2luZGV4XSA6IG51bGw7XG4gICAgICAgIGNvbnN0IGRhdGUgPSB0aGlzLmRpdmlzaW9uUmFuZ2UuZGF0ZUF0KGluZGV4KTtcbiAgICAgICAgY29uc3QgdW5pdEZvcm1hdCA9IGxhYmVsT3B0aW9ucy5kYXRlRm9ybWF0c1t0aGlzLmRpdmlzaW9uUmFuZ2Uub3B0aW9ucy5iYXNlVW5pdF07XG5cbiAgICAgICAgbGFiZWxPcHRpb25zLmZvcm1hdCA9IGxhYmVsT3B0aW9ucy5mb3JtYXQgfHwgdW5pdEZvcm1hdDtcbiAgICAgICAgY29uc3QgdGV4dCA9IHRoaXMuYXhpc0xhYmVsVGV4dChkYXRlLCBkYXRhSXRlbSwgbGFiZWxPcHRpb25zKTtcbiAgICAgICAgaWYgKHRleHQpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQXhpc0xhYmVsKGRhdGUsIHRleHQsIGluZGV4LCBkYXRhSXRlbSwgbGFiZWxPcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNhdGVnb3J5SW5kZXgodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVJhbmdlLnZhbHVlSW5kZXgodmFsdWUpO1xuICAgIH1cblxuICAgIHNsb3QoZnJvbSwgdG8sIGxpbWl0KSB7XG4gICAgICAgIGNvbnN0IGRhdGVSYW5nZSA9IHRoaXMuZGF0YVJhbmdlO1xuICAgICAgICBsZXQgc3RhcnQgPSBmcm9tO1xuICAgICAgICBsZXQgZW5kID0gdG87XG5cbiAgICAgICAgaWYgKHN0YXJ0IGluc3RhbmNlb2YgRGF0ZSkge1xuICAgICAgICAgICAgc3RhcnQgPSBkYXRlUmFuZ2UuZGF0ZUluZGV4KHN0YXJ0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbmQgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgICAgICBlbmQgPSBkYXRlUmFuZ2UuZGF0ZUluZGV4KGVuZCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzbG90ID0gdGhpcy5nZXRTbG90KHN0YXJ0LCBlbmQsIGxpbWl0KTtcbiAgICAgICAgaWYgKHNsb3QpIHtcbiAgICAgICAgICAgIHJldHVybiBzbG90LnRvUmVjdCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0U2xvdChhLCBiLCBsaW1pdCkge1xuICAgICAgICBsZXQgc3RhcnQgPSBhO1xuICAgICAgICBsZXQgZW5kID0gYjtcblxuICAgICAgICBpZiAodHlwZW9mIHN0YXJ0ID09PSBPQkpFQ1QpIHtcbiAgICAgICAgICAgIHN0YXJ0ID0gdGhpcy5jYXRlZ29yeUluZGV4KHN0YXJ0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgZW5kID09PSBPQkpFQ1QpIHtcbiAgICAgICAgICAgIGVuZCA9IHRoaXMuY2F0ZWdvcnlJbmRleChlbmQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHN1cGVyLmdldFNsb3Qoc3RhcnQsIGVuZCwgbGltaXQpO1xuICAgIH1cblxuICAgIHZhbHVlUmFuZ2UoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHJhbmdlID0gY2F0ZWdvcnlSYW5nZShvcHRpb25zLnNyY0NhdGVnb3JpZXMpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtaW46IHRvRGF0ZShyYW5nZS5taW4pLFxuICAgICAgICAgICAgbWF4OiB0b0RhdGUocmFuZ2UubWF4KVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGNhdGVnb3J5QXQoaW5kZXgsIHRvdGFsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFSYW5nZS5kYXRlQXQoaW5kZXgsIHRvdGFsKTtcbiAgICB9XG5cbiAgICBjYXRlZ29yaWVzQ291bnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFSYW5nZS52YWx1ZXNDb3VudCgpO1xuICAgIH1cblxuICAgIHJhbmdlSW5kaWNlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVJhbmdlLmRpc3BsYXlJbmRpY2VzKCk7XG4gICAgfVxuXG4gICAgbGFiZWxzQmV0d2VlblRpY2tzKCkge1xuICAgICAgICByZXR1cm4gIXRoaXMuZGl2aXNpb25SYW5nZS5vcHRpb25zLmp1c3RpZmllZDtcbiAgICB9XG5cbiAgICBwcmVwYXJlVXNlck9wdGlvbnMoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5vcHRpb25zLmNhdGVnb3JpZXMgPSB0aGlzLmRhdGFSYW5nZS52YWx1ZXMoKTtcbiAgICB9XG5cbiAgICBnZXRDYXRlZ29yeShwb2ludCkge1xuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMucG9pbnRDYXRlZ29yeUluZGV4KHBvaW50KTtcblxuICAgICAgICBpZiAoaW5kZXggPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVJhbmdlLmRhdGVBdChpbmRleCk7XG4gICAgfVxuXG4gICAgdG90YWxJbmRleCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhUmFuZ2UudG90YWxJbmRleCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgY3VycmVudFJhbmdlSW5kaWNlcygpIHtcbiAgICAgICAgY29uc3QgcmFuZ2UgPSB0aGlzLmRhdGFSYW5nZS52YWx1ZVJhbmdlKCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtaW46IHRoaXMuZGF0YVJhbmdlLnRvdGFsSW5kZXgocmFuZ2UubWluKSxcbiAgICAgICAgICAgIG1heDogdGhpcy5kYXRhUmFuZ2UudG90YWxJbmRleChyYW5nZS5tYXgpXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdG90YWxSYW5nZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVJhbmdlLnRvdGFsKCk7XG4gICAgfVxuXG4gICAgdG90YWxDb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVJhbmdlLnRvdGFsQ291bnQoKTtcbiAgICB9XG5cbiAgICBpc0VtcHR5KCkge1xuICAgICAgICByZXR1cm4gIXRoaXMub3B0aW9ucy5zcmNDYXRlZ29yaWVzLmxlbmd0aDtcbiAgICB9XG5cbiAgICByb3VuZGVkUmFuZ2UoKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMucm91bmRUb0Jhc2VVbml0ICE9PSBmYWxzZSB8fCB0aGlzLmlzRW1wdHkoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmFuZ2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGRhdGVzUmFuZ2UgPSBjYXRlZ29yeVJhbmdlKG9wdGlvbnMuc3JjQ2F0ZWdvcmllcyk7XG5cbiAgICAgICAgY29uc3QgZGF0ZVJhbmdlID0gbmV3IERhdGVSYW5nZShkYXRlc1JhbmdlLm1pbiwgZGF0ZXNSYW5nZS5tYXgsIE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMsIHtcbiAgICAgICAgICAgIGp1c3RpZmllZDogZmFsc2UsXG4gICAgICAgICAgICByb3VuZFRvQmFzZVVuaXQ6IHRydWUsXG4gICAgICAgICAgICBqdXN0aWZ5RW5kOiBvcHRpb25zLmp1c3RpZmllZFxuICAgICAgICB9KSk7XG5cbiAgICAgICAgcmV0dXJuIGRhdGVSYW5nZS5kaXNwbGF5UmFuZ2UoKTtcbiAgICB9XG59XG5cbnNldERlZmF1bHRPcHRpb25zKERhdGVDYXRlZ29yeUF4aXMsIHtcbiAgICB0eXBlOiBEQVRFLFxuICAgIGxhYmVsczoge1xuICAgICAgICBkYXRlRm9ybWF0czogRGF0ZUxhYmVsRm9ybWF0c1xuICAgIH0sXG4gICAgYXV0b0Jhc2VVbml0U3RlcHM6IHtcbiAgICAgICAgbWlsbGlzZWNvbmRzOiBbIDEsIDEwLCAxMDAgXSxcbiAgICAgICAgc2Vjb25kczogWyAxLCAyLCA1LCAxNSwgMzAgXSxcbiAgICAgICAgbWludXRlczogWyAxLCAyLCA1LCAxNSwgMzAgXSxcbiAgICAgICAgaG91cnM6IFsgMSwgMiwgMyBdLFxuICAgICAgICBkYXlzOiBbIDEsIDIsIDMgXSxcbiAgICAgICAgd2Vla3M6IFsgMSwgMiBdLFxuICAgICAgICBtb250aHM6IFsgMSwgMiwgMywgNiBdLFxuICAgICAgICB5ZWFyczogWyAxLCAyLCAzLCA1LCAxMCwgMjUsIDUwIF1cbiAgICB9LFxuICAgIG1heERhdGVHcm91cHM6IDEwXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgRGF0ZUNhdGVnb3J5QXhpcztcbiIsImltcG9ydCB7IFpFUk9fVEhSRVNIT0xEIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYXV0b0F4aXNNaW4obWluLCBtYXgsIG5hcnJvdykge1xuICAgIGlmICghbWluICYmICFtYXgpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgbGV0IGF4aXNNaW47XG5cbiAgICBpZiAobWluID49IDAgJiYgbWF4ID49IDApIHtcbiAgICAgICAgY29uc3QgbWluVmFsdWUgPSBtaW4gPT09IG1heCA/IDAgOiBtaW47XG5cbiAgICAgICAgbGV0IGRpZmYgPSAobWF4IC0gbWluVmFsdWUpIC8gbWF4O1xuICAgICAgICBpZiAobmFycm93ID09PSBmYWxzZSB8fCAoIW5hcnJvdyAmJiBkaWZmID4gWkVST19USFJFU0hPTEQpKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGF4aXNNaW4gPSBNYXRoLm1heCgwLCBtaW5WYWx1ZSAtICgobWF4IC0gbWluVmFsdWUpIC8gMikpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGF4aXNNaW4gPSBtaW47XG4gICAgfVxuXG4gICAgcmV0dXJuIGF4aXNNaW47XG59XG4iLCJpbXBvcnQgeyBaRVJPX1RIUkVTSE9MRCB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGF1dG9BeGlzTWF4KG1pbiwgbWF4LCBuYXJyb3cpIHtcbiAgICBpZiAoIW1pbiAmJiAhbWF4KSB7XG4gICAgICAgIHJldHVybiAxO1xuICAgIH1cblxuICAgIGxldCBheGlzTWF4O1xuXG4gICAgaWYgKG1pbiA8PSAwICYmIG1heCA8PSAwKSB7XG4gICAgICAgIGNvbnN0IG1heFZhbHVlID0gbWluID09PSBtYXggPyAwIDogbWF4O1xuXG4gICAgICAgIGxldCBkaWZmID0gTWF0aC5hYnMoKG1heFZhbHVlIC0gbWluKSAvIG1heFZhbHVlKTtcbiAgICAgICAgaWYgKG5hcnJvdyA9PT0gZmFsc2UgfHwgKCFuYXJyb3cgJiYgZGlmZiA+IFpFUk9fVEhSRVNIT0xEKSkge1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cblxuICAgICAgICBheGlzTWF4ID0gTWF0aC5taW4oMCwgbWF4VmFsdWUgLSAoKG1pbiAtIG1heFZhbHVlKSAvIDIpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBheGlzTWF4ID0gbWF4O1xuICAgIH1cblxuICAgIHJldHVybiBheGlzTWF4O1xufSIsImltcG9ydCB7IERFRkFVTFRfUFJFQ0lTSU9OIH0gZnJvbSAnLi4vLi4vY29tbW9uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyByb3VuZCB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZsb29yKHZhbHVlLCBzdGVwKSB7XG4gICAgcmV0dXJuIHJvdW5kKE1hdGguZmxvb3IodmFsdWUgLyBzdGVwKSAqIHN0ZXAsIERFRkFVTFRfUFJFQ0lTSU9OKTtcbn1cbiIsImltcG9ydCB7IERFRkFVTFRfUFJFQ0lTSU9OIH0gZnJvbSAnLi4vLi4vY29tbW9uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyByb3VuZCB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNlaWwodmFsdWUsIHN0ZXApIHtcbiAgICByZXR1cm4gcm91bmQoTWF0aC5jZWlsKHZhbHVlIC8gc3RlcCkgKiBzdGVwLCBERUZBVUxUX1BSRUNJU0lPTik7XG59IiwiaW1wb3J0IHsgQ09PUkRJTkFURV9MSU1JVCB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxpbWl0Q29vcmRpbmF0ZSh2YWx1ZSkge1xuICAgIHJldHVybiBNYXRoLm1heChNYXRoLm1pbih2YWx1ZSwgQ09PUkRJTkFURV9MSU1JVCksIC1DT09SRElOQVRFX0xJTUlUKTtcbn0iLCJcbmltcG9ydCBBeGlzIGZyb20gJy4vYXhpcyc7XG5pbXBvcnQgQXhpc0xhYmVsIGZyb20gJy4vYXhpcy1sYWJlbCc7XG5pbXBvcnQgQm94IGZyb20gJy4vYm94JztcblxuaW1wb3J0IHsgQkxBQ0ssIERFRkFVTFRfUFJFQ0lTSU9OLCBDT09SRF9QUkVDSVNJT04sIFgsIFkgfSBmcm9tICcuLi9jb21tb24vY29uc3RhbnRzJztcbmltcG9ydCB7IGRlZXBFeHRlbmQsIGRlZmluZWQsIGxpbWl0VmFsdWUsIHJvdW5kLCBzZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gJy4uL2NvbW1vbic7XG5cbmltcG9ydCBhdXRvTWFqb3JVbml0IGZyb20gJy4vdXRpbHMvYXV0by1tYWpvci11bml0JztcbmltcG9ydCBhdXRvQXhpc01pbiBmcm9tICcuL3V0aWxzL2F1dG8tYXhpcy1taW4nO1xuaW1wb3J0IGF1dG9BeGlzTWF4IGZyb20gJy4vdXRpbHMvYXV0by1heGlzLW1heCc7XG5pbXBvcnQgZmxvb3IgZnJvbSAnLi91dGlscy9mbG9vcic7XG5pbXBvcnQgY2VpbCBmcm9tICcuL3V0aWxzL2NlaWwnO1xuaW1wb3J0IGxpbWl0Q29vcmRpbmF0ZSBmcm9tICcuL3V0aWxzL2xpbWl0LWNvb3JkaW5hdGUnO1xuXG5jb25zdCBNSU5fVkFMVUVfUkFOR0UgPSBNYXRoLnBvdygxMCwgLURFRkFVTFRfUFJFQ0lTSU9OICsgMSk7XG5cbmNsYXNzIE51bWVyaWNBeGlzIGV4dGVuZHMgQXhpcyB7XG5cbiAgICBjb25zdHJ1Y3RvcihzZXJpZXNNaW4sIHNlcmllc01heCwgb3B0aW9ucywgY2hhcnRTZXJ2aWNlKSB7XG4gICAgICAgIHN1cGVyKE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMsIHtcbiAgICAgICAgICAgIHNlcmllc01pbjogc2VyaWVzTWluLFxuICAgICAgICAgICAgc2VyaWVzTWF4OiBzZXJpZXNNYXhcbiAgICAgICAgfSksIGNoYXJ0U2VydmljZSk7XG4gICAgfVxuXG4gICAgaW5pdFVzZXJPcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgYXV0b09wdGlvbnMgPSBhdXRvQXhpc09wdGlvbnMob3B0aW9ucy5zZXJpZXNNaW4sIG9wdGlvbnMuc2VyaWVzTWF4LCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy50b3RhbE9wdGlvbnMgPSB0b3RhbEF4aXNPcHRpb25zKGF1dG9PcHRpb25zLCBvcHRpb25zKTtcblxuICAgICAgICByZXR1cm4gYXhpc09wdGlvbnMoYXV0b09wdGlvbnMsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIGluaXRGaWVsZHMoKSB7XG4gICAgICAgIHRoaXMudG90YWxNaW4gPSB0aGlzLnRvdGFsT3B0aW9ucy5taW47XG4gICAgICAgIHRoaXMudG90YWxNYXggPSB0aGlzLnRvdGFsT3B0aW9ucy5tYXg7XG4gICAgICAgIHRoaXMudG90YWxNYWpvclVuaXQgPSB0aGlzLnRvdGFsT3B0aW9ucy5tYWpvclVuaXQ7XG4gICAgICAgIHRoaXMuc2VyaWVzTWluID0gdGhpcy5vcHRpb25zLnNlcmllc01pbjtcbiAgICAgICAgdGhpcy5zZXJpZXNNYXggPSB0aGlzLm9wdGlvbnMuc2VyaWVzTWF4O1xuICAgIH1cblxuICAgIGNsb25lKCkge1xuICAgICAgICByZXR1cm4gbmV3IE51bWVyaWNBeGlzKFxuICAgICAgICAgICAgdGhpcy5zZXJpZXNNaW4sXG4gICAgICAgICAgICB0aGlzLnNlcmllc01heCxcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oe30sIHRoaXMub3B0aW9ucyksXG4gICAgICAgICAgICB0aGlzLmNoYXJ0U2VydmljZVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHN0YXJ0VmFsdWUoKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIHJhbmdlKCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICByZXR1cm4geyBtaW46IG9wdGlvbnMubWluLCBtYXg6IG9wdGlvbnMubWF4IH07XG4gICAgfVxuXG4gICAgZ2V0RGl2aXNpb25zKHN0ZXBWYWx1ZSkge1xuICAgICAgICBpZiAoc3RlcFZhbHVlID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHJhbmdlID0gb3B0aW9ucy5tYXggLSBvcHRpb25zLm1pbjtcblxuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihyb3VuZChyYW5nZSAvIHN0ZXBWYWx1ZSwgQ09PUkRfUFJFQ0lTSU9OKSkgKyAxO1xuICAgIH1cblxuICAgIGdldFRpY2tQb3NpdGlvbnModW5pdCwgc2tpcFVuaXQpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgeyB2ZXJ0aWNhbCwgcmV2ZXJzZSB9ID0gb3B0aW9ucztcbiAgICAgICAgY29uc3QgbGluZUJveCA9IHRoaXMubGluZUJveCgpO1xuICAgICAgICBjb25zdCBsaW5lU2l6ZSA9IHZlcnRpY2FsID8gbGluZUJveC5oZWlnaHQoKSA6IGxpbmVCb3gud2lkdGgoKTtcbiAgICAgICAgY29uc3QgcmFuZ2UgPSBvcHRpb25zLm1heCAtIG9wdGlvbnMubWluO1xuICAgICAgICBjb25zdCBzY2FsZSA9IGxpbmVTaXplIC8gcmFuZ2U7XG4gICAgICAgIGNvbnN0IHN0ZXAgPSB1bml0ICogc2NhbGU7XG4gICAgICAgIGNvbnN0IGRpdmlzaW9ucyA9IHRoaXMuZ2V0RGl2aXNpb25zKHVuaXQpO1xuICAgICAgICBjb25zdCBkaXIgPSAodmVydGljYWwgPyAtMSA6IDEpICogKHJldmVyc2UgPyAtMSA6IDEpO1xuICAgICAgICBjb25zdCBzdGFydEVkZ2UgPSBkaXIgPT09IDEgPyAxIDogMjtcbiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gW107XG4gICAgICAgIGxldCBwb3MgPSBsaW5lQm94Wyh2ZXJ0aWNhbCA/IFkgOiBYKSArIHN0YXJ0RWRnZV07XG4gICAgICAgIGxldCBza2lwU3RlcCA9IDA7XG5cbiAgICAgICAgaWYgKHNraXBVbml0KSB7XG4gICAgICAgICAgICBza2lwU3RlcCA9IHNraXBVbml0IC8gdW5pdDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGRpdmlzaW9uczsgaWR4KyspIHtcbiAgICAgICAgICAgIGlmIChpZHggJSBza2lwU3RlcCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9ucy5wdXNoKHJvdW5kKHBvcywgQ09PUkRfUFJFQ0lTSU9OKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHBvcyA9IHBvcyArIHN0ZXAgKiBkaXI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcG9zaXRpb25zO1xuICAgIH1cblxuICAgIGdldE1ham9yVGlja1Bvc2l0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VGlja1Bvc2l0aW9ucyh0aGlzLm9wdGlvbnMubWFqb3JVbml0KTtcbiAgICB9XG5cbiAgICBnZXRNaW5vclRpY2tQb3NpdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFRpY2tQb3NpdGlvbnModGhpcy5vcHRpb25zLm1pbm9yVW5pdCk7XG4gICAgfVxuXG4gICAgZ2V0U2xvdChhLCBiLCBsaW1pdCA9IGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHsgdmVydGljYWwsIHJldmVyc2UgfSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHZhbHVlQXhpcyA9IHZlcnRpY2FsID8gWSA6IFg7XG4gICAgICAgIGNvbnN0IGxpbmVCb3ggPSB0aGlzLmxpbmVCb3goKTtcbiAgICAgICAgY29uc3QgbGluZVN0YXJ0ID0gbGluZUJveFt2YWx1ZUF4aXMgKyAocmV2ZXJzZSA/IDIgOiAxKV07XG4gICAgICAgIGNvbnN0IGxpbmVTaXplID0gdmVydGljYWwgPyBsaW5lQm94LmhlaWdodCgpIDogbGluZUJveC53aWR0aCgpO1xuICAgICAgICBjb25zdCBkaXIgPSByZXZlcnNlID8gLTEgOiAxO1xuICAgICAgICBjb25zdCBzdGVwID0gZGlyICogKGxpbmVTaXplIC8gKG9wdGlvbnMubWF4IC0gb3B0aW9ucy5taW4pKTtcbiAgICAgICAgY29uc3Qgc2xvdEJveCA9IG5ldyBCb3gobGluZUJveC54MSwgbGluZUJveC55MSwgbGluZUJveC54MSwgbGluZUJveC55MSk7XG5cbiAgICAgICAgbGV0IHN0YXJ0ID0gYTtcbiAgICAgICAgbGV0IGVuZCA9IGI7XG5cbiAgICAgICAgaWYgKCFkZWZpbmVkKHN0YXJ0KSkge1xuICAgICAgICAgICAgc3RhcnQgPSBlbmQgfHwgMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZGVmaW5lZChlbmQpKSB7XG4gICAgICAgICAgICBlbmQgPSBzdGFydCB8fCAwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxpbWl0KSB7XG4gICAgICAgICAgICBzdGFydCA9IE1hdGgubWF4KE1hdGgubWluKHN0YXJ0LCBvcHRpb25zLm1heCksIG9wdGlvbnMubWluKTtcbiAgICAgICAgICAgIGVuZCA9IE1hdGgubWF4KE1hdGgubWluKGVuZCwgb3B0aW9ucy5tYXgpLCBvcHRpb25zLm1pbik7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcDEsIHAyO1xuXG4gICAgICAgIGlmICh2ZXJ0aWNhbCkge1xuICAgICAgICAgICAgcDEgPSBvcHRpb25zLm1heCAtIE1hdGgubWF4KHN0YXJ0LCBlbmQpO1xuICAgICAgICAgICAgcDIgPSBvcHRpb25zLm1heCAtIE1hdGgubWluKHN0YXJ0LCBlbmQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcDEgPSBNYXRoLm1pbihzdGFydCwgZW5kKSAtIG9wdGlvbnMubWluO1xuICAgICAgICAgICAgcDIgPSBNYXRoLm1heChzdGFydCwgZW5kKSAtIG9wdGlvbnMubWluO1xuICAgICAgICB9XG5cbiAgICAgICAgc2xvdEJveFt2YWx1ZUF4aXMgKyAxXSA9IGxpbWl0Q29vcmRpbmF0ZShsaW5lU3RhcnQgKyBzdGVwICogKHJldmVyc2UgPyBwMiA6IHAxKSk7XG4gICAgICAgIHNsb3RCb3hbdmFsdWVBeGlzICsgMl0gPSBsaW1pdENvb3JkaW5hdGUobGluZVN0YXJ0ICsgc3RlcCAqIChyZXZlcnNlID8gcDEgOiBwMikpO1xuXG4gICAgICAgIHJldHVybiBzbG90Qm94O1xuICAgIH1cblxuICAgIGdldFZhbHVlKHBvaW50KSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHsgdmVydGljYWwsIHJldmVyc2UgfSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IG1heCA9IE51bWJlcihvcHRpb25zLm1heCk7XG4gICAgICAgIGNvbnN0IG1pbiA9IE51bWJlcihvcHRpb25zLm1pbik7XG4gICAgICAgIGNvbnN0IHZhbHVlQXhpcyA9IHZlcnRpY2FsID8gWSA6IFg7XG4gICAgICAgIGNvbnN0IGxpbmVCb3ggPSB0aGlzLmxpbmVCb3goKTtcbiAgICAgICAgY29uc3QgbGluZVN0YXJ0ID0gbGluZUJveFt2YWx1ZUF4aXMgKyAocmV2ZXJzZSA/IDIgOiAxKV07XG4gICAgICAgIGNvbnN0IGxpbmVTaXplID0gdmVydGljYWwgPyBsaW5lQm94LmhlaWdodCgpIDogbGluZUJveC53aWR0aCgpO1xuICAgICAgICBjb25zdCBkaXIgPSByZXZlcnNlID8gLTEgOiAxO1xuICAgICAgICBjb25zdCBvZmZzZXQgPSBkaXIgKiAocG9pbnRbdmFsdWVBeGlzXSAtIGxpbmVTdGFydCk7XG4gICAgICAgIGNvbnN0IHN0ZXAgPSAobWF4IC0gbWluKSAvIGxpbmVTaXplO1xuICAgICAgICBjb25zdCB2YWx1ZU9mZnNldCA9IG9mZnNldCAqIHN0ZXA7XG5cbiAgICAgICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ID4gbGluZVNpemUpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdmFsdWUgPSB2ZXJ0aWNhbCA/XG4gICAgICAgICAgICAgICAgbWF4IC0gdmFsdWVPZmZzZXQgOlxuICAgICAgICAgICAgICAgIG1pbiArIHZhbHVlT2Zmc2V0O1xuXG4gICAgICAgIHJldHVybiByb3VuZCh2YWx1ZSwgREVGQVVMVF9QUkVDSVNJT04pO1xuICAgIH1cblxuICAgIHRyYW5zbGF0ZVJhbmdlKGRlbHRhKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHsgdmVydGljYWwsIHJldmVyc2UsIG1heCwgbWluIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCBsaW5lQm94ID0gdGhpcy5saW5lQm94KCk7XG4gICAgICAgIGNvbnN0IHNpemUgPSB2ZXJ0aWNhbCA/IGxpbmVCb3guaGVpZ2h0KCkgOiBsaW5lQm94LndpZHRoKCk7XG4gICAgICAgIGNvbnN0IHJhbmdlID0gbWF4IC0gbWluO1xuICAgICAgICBjb25zdCBzY2FsZSA9IHNpemUgLyByYW5nZTtcbiAgICAgICAgbGV0IG9mZnNldCA9IHJvdW5kKGRlbHRhIC8gc2NhbGUsIERFRkFVTFRfUFJFQ0lTSU9OKTtcblxuICAgICAgICBpZiAoKHZlcnRpY2FsIHx8IHJldmVyc2UpICYmICEodmVydGljYWwgJiYgcmV2ZXJzZSApKSB7XG4gICAgICAgICAgICBvZmZzZXQgPSAtb2Zmc2V0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1pbjogbWluICsgb2Zmc2V0LFxuICAgICAgICAgICAgbWF4OiBtYXggKyBvZmZzZXQsXG4gICAgICAgICAgICBvZmZzZXQ6IG9mZnNldFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHNjYWxlUmFuZ2UoZGVsdGEpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gLWRlbHRhICogb3B0aW9ucy5tYWpvclVuaXQ7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1pbjogb3B0aW9ucy5taW4gLSBvZmZzZXQsXG4gICAgICAgICAgICBtYXg6IG9wdGlvbnMubWF4ICsgb2Zmc2V0XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgbGFiZWxzQ291bnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldERpdmlzaW9ucyh0aGlzLm9wdGlvbnMubWFqb3JVbml0KTtcbiAgICB9XG5cbiAgICBjcmVhdGVBeGlzTGFiZWwoaW5kZXgsIGxhYmVsT3B0aW9ucykge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHJvdW5kKG9wdGlvbnMubWluICsgKGluZGV4ICogb3B0aW9ucy5tYWpvclVuaXQpLCBERUZBVUxUX1BSRUNJU0lPTik7XG4gICAgICAgIGNvbnN0IHRleHQgPSB0aGlzLmF4aXNMYWJlbFRleHQodmFsdWUsIG51bGwsIGxhYmVsT3B0aW9ucyk7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBBeGlzTGFiZWwodmFsdWUsIHRleHQsIGluZGV4LCBudWxsLCBsYWJlbE9wdGlvbnMpO1xuICAgIH1cblxuICAgIHNob3VsZFJlbmRlck5vdGUodmFsdWUpIHtcbiAgICAgICAgY29uc3QgcmFuZ2UgPSB0aGlzLnJhbmdlKCk7XG4gICAgICAgIHJldHVybiByYW5nZS5taW4gPD0gdmFsdWUgJiYgdmFsdWUgPD0gcmFuZ2UubWF4O1xuICAgIH1cblxuICAgIHBhbihkZWx0YSkge1xuICAgICAgICBjb25zdCByYW5nZSA9IHRoaXMudHJhbnNsYXRlUmFuZ2UoZGVsdGEpO1xuICAgICAgICByZXR1cm4gdGhpcy5saW1pdFJhbmdlKHJhbmdlLm1pbiwgcmFuZ2UubWF4LCB0aGlzLnRvdGFsTWluLCB0aGlzLnRvdGFsTWF4LCByYW5nZS5vZmZzZXQpO1xuICAgIH1cblxuICAgIHBvaW50c1JhbmdlKHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgY29uc3Qgc3RhcnRWYWx1ZSA9IHRoaXMuZ2V0VmFsdWUoc3RhcnQpO1xuICAgICAgICBjb25zdCBlbmRWYWx1ZSA9IHRoaXMuZ2V0VmFsdWUoZW5kKTtcbiAgICAgICAgY29uc3QgbWluID0gTWF0aC5taW4oc3RhcnRWYWx1ZSwgZW5kVmFsdWUpO1xuICAgICAgICBjb25zdCBtYXggPSBNYXRoLm1heChzdGFydFZhbHVlLCBlbmRWYWx1ZSk7XG5cbiAgICAgICAgaWYgKHRoaXMuaXNWYWxpZFJhbmdlKG1pbiwgbWF4KSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtaW46IG1pbixcbiAgICAgICAgICAgICAgICBtYXg6IG1heFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHpvb21SYW5nZShkZWx0YSkge1xuICAgICAgICBjb25zdCB7IHRvdGFsTWluLCB0b3RhbE1heCB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgbmV3UmFuZ2UgPSB0aGlzLnNjYWxlUmFuZ2UoZGVsdGEpO1xuICAgICAgICBjb25zdCBtaW4gPSBsaW1pdFZhbHVlKG5ld1JhbmdlLm1pbiwgdG90YWxNaW4sIHRvdGFsTWF4KTtcbiAgICAgICAgY29uc3QgbWF4ID0gbGltaXRWYWx1ZShuZXdSYW5nZS5tYXgsIHRvdGFsTWluLCB0b3RhbE1heCk7XG5cbiAgICAgICAgaWYgKHRoaXMuaXNWYWxpZFJhbmdlKG1pbiwgbWF4KSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtaW46IG1pbixcbiAgICAgICAgICAgICAgICBtYXg6IG1heFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlzVmFsaWRSYW5nZShtaW4sIG1heCkge1xuICAgICAgICByZXR1cm4gbWF4IC0gbWluID4gTUlOX1ZBTFVFX1JBTkdFO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gYXV0b0F4aXNPcHRpb25zKHNlcmllc01pbiwgc2VyaWVzTWF4LCBvcHRpb25zKSB7XG4gICAgY29uc3QgbmFycm93UmFuZ2UgPSBvcHRpb25zLm5hcnJvd1JhbmdlO1xuXG4gICAgbGV0IGF1dG9NaW4gPSBhdXRvQXhpc01pbihzZXJpZXNNaW4sIHNlcmllc01heCwgbmFycm93UmFuZ2UpO1xuICAgIGxldCBhdXRvTWF4ID0gYXV0b0F4aXNNYXgoc2VyaWVzTWluLCBzZXJpZXNNYXgsIG5hcnJvd1JhbmdlKTtcblxuICAgIGNvbnN0IG1ham9yVW5pdCA9IGF1dG9NYWpvclVuaXQoYXV0b01pbiwgYXV0b01heCk7XG4gICAgY29uc3QgYXV0b09wdGlvbnMgPSB7XG4gICAgICAgIG1ham9yVW5pdDogbWFqb3JVbml0XG4gICAgfTtcblxuICAgIGlmIChvcHRpb25zLnJvdW5kVG9NYWpvclVuaXQgIT09IGZhbHNlKSB7XG4gICAgICAgIGlmIChhdXRvTWluIDwgMCAmJiByZW1haW5kZXJDbG9zZShhdXRvTWluLCBtYWpvclVuaXQsIDEgLyAzKSkge1xuICAgICAgICAgICAgYXV0b01pbiAtPSBtYWpvclVuaXQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYXV0b01heCA+IDAgJiYgcmVtYWluZGVyQ2xvc2UoYXV0b01heCwgbWFqb3JVbml0LCAxIC8gMykpIHtcbiAgICAgICAgICAgIGF1dG9NYXggKz0gbWFqb3JVbml0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYXV0b09wdGlvbnMubWluID0gZmxvb3IoYXV0b01pbiwgbWFqb3JVbml0KTtcbiAgICBhdXRvT3B0aW9ucy5tYXggPSBjZWlsKGF1dG9NYXgsIG1ham9yVW5pdCk7XG5cbiAgICByZXR1cm4gYXV0b09wdGlvbnM7XG59XG5cbmZ1bmN0aW9uIHRvdGFsQXhpc09wdGlvbnMoYXV0b09wdGlvbnMsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBtaW46IGRlZmluZWQob3B0aW9ucy5taW4pID8gTWF0aC5taW4oYXV0b09wdGlvbnMubWluLCBvcHRpb25zLm1pbikgOiBhdXRvT3B0aW9ucy5taW4sXG4gICAgICAgIG1heDogZGVmaW5lZChvcHRpb25zLm1heCkgPyBNYXRoLm1heChhdXRvT3B0aW9ucy5tYXgsIG9wdGlvbnMubWF4KSA6IGF1dG9PcHRpb25zLm1heCxcbiAgICAgICAgbWFqb3JVbml0OiBhdXRvT3B0aW9ucy5tYWpvclVuaXRcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBjbGVhck51bGxWYWx1ZXMob3B0aW9ucywgZmllbGRzKSB7XG4gICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgZmllbGRzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgY29uc3QgZmllbGQgPSBmaWVsZHNbaWR4XTtcbiAgICAgICAgaWYgKG9wdGlvbnNbZmllbGRdID09PSBudWxsKSB7XG4gICAgICAgICAgICBvcHRpb25zW2ZpZWxkXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gYXhpc09wdGlvbnMoYXV0b09wdGlvbnMsIHVzZXJPcHRpb25zKSB7XG4gICAgbGV0IG9wdGlvbnMgPSB1c2VyT3B0aW9ucztcbiAgICBsZXQgdXNlclNldE1pbiwgdXNlclNldE1heDtcblxuICAgIGlmICh1c2VyT3B0aW9ucykge1xuICAgICAgICBjbGVhck51bGxWYWx1ZXModXNlck9wdGlvbnMsIFsgJ21pbicsICdtYXgnIF0pO1xuXG4gICAgICAgIHVzZXJTZXRNaW4gPSBkZWZpbmVkKHVzZXJPcHRpb25zLm1pbik7XG4gICAgICAgIHVzZXJTZXRNYXggPSBkZWZpbmVkKHVzZXJPcHRpb25zLm1heCk7XG5cbiAgICAgICAgY29uc3QgdXNlclNldExpbWl0cyA9IHVzZXJTZXRNaW4gfHwgdXNlclNldE1heDtcblxuICAgICAgICBpZiAodXNlclNldExpbWl0cykge1xuICAgICAgICAgICAgaWYgKHVzZXJPcHRpb25zLm1pbiA9PT0gdXNlck9wdGlvbnMubWF4KSB7XG4gICAgICAgICAgICAgICAgaWYgKHVzZXJPcHRpb25zLm1pbiA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdXNlck9wdGlvbnMubWluID0gMDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB1c2VyT3B0aW9ucy5tYXggPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1c2VyT3B0aW9ucy5tYWpvclVuaXQpIHtcbiAgICAgICAgICAgIGF1dG9PcHRpb25zLm1pbiA9IGZsb29yKGF1dG9PcHRpb25zLm1pbiwgdXNlck9wdGlvbnMubWFqb3JVbml0KTtcbiAgICAgICAgICAgIGF1dG9PcHRpb25zLm1heCA9IGNlaWwoYXV0b09wdGlvbnMubWF4LCB1c2VyT3B0aW9ucy5tYWpvclVuaXQpO1xuICAgICAgICB9IGVsc2UgaWYgKHVzZXJTZXRMaW1pdHMpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBkZWVwRXh0ZW5kKGF1dG9PcHRpb25zLCB1c2VyT3B0aW9ucyk7XG5cbiAgICAgICAgICAgIC8vIERldGVybWluZSBhbiBhdXRvIG1ham9yIHVuaXQgYWZ0ZXIgbWluL21heCBoYXZlIGJlZW4gc2V0XG4gICAgICAgICAgICBhdXRvT3B0aW9ucy5tYWpvclVuaXQgPSBhdXRvTWFqb3JVbml0KG9wdGlvbnMubWluLCBvcHRpb25zLm1heCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhdXRvT3B0aW9ucy5taW5vclVuaXQgPSAob3B0aW9ucy5tYWpvclVuaXQgfHwgYXV0b09wdGlvbnMubWFqb3JVbml0KSAvIDU7XG5cbiAgICBjb25zdCByZXN1bHQgPSBkZWVwRXh0ZW5kKGF1dG9PcHRpb25zLCBvcHRpb25zKTtcbiAgICBpZiAocmVzdWx0Lm1pbiA+PSByZXN1bHQubWF4KSB7XG4gICAgICAgIGlmICh1c2VyU2V0TWluICYmICF1c2VyU2V0TWF4KSB7XG4gICAgICAgICAgICByZXN1bHQubWF4ID0gcmVzdWx0Lm1pbiArIHJlc3VsdC5tYWpvclVuaXQ7XG4gICAgICAgIH0gZWxzZSBpZiAoIXVzZXJTZXRNaW4gJiYgdXNlclNldE1heCkge1xuICAgICAgICAgICAgcmVzdWx0Lm1pbiA9IHJlc3VsdC5tYXggLSByZXN1bHQubWFqb3JVbml0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gcmVtYWluZGVyQ2xvc2UodmFsdWUsIGRpdmlzb3IsIHJhdGlvKSB7XG4gICAgY29uc3QgcmVtYWluZGVyID0gcm91bmQoTWF0aC5hYnModmFsdWUgJSBkaXZpc29yKSwgREVGQVVMVF9QUkVDSVNJT04pO1xuICAgIGNvbnN0IHRocmVzaG9sZCA9IGRpdmlzb3IgKiAoMSAtIHJhdGlvKTtcblxuICAgIHJldHVybiByZW1haW5kZXIgPT09IDAgfHwgcmVtYWluZGVyID4gdGhyZXNob2xkO1xufVxuXG5zZXREZWZhdWx0T3B0aW9ucyhOdW1lcmljQXhpcywge1xuICAgIHR5cGU6IFwibnVtZXJpY1wiLFxuICAgIG1pbjogMCxcbiAgICBtYXg6IDEsXG4gICAgdmVydGljYWw6IHRydWUsXG4gICAgbWFqb3JHcmlkTGluZXM6IHtcbiAgICAgICAgdmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgd2lkdGg6IDEsXG4gICAgICAgIGNvbG9yOiBCTEFDS1xuICAgIH0sXG4gICAgbGFiZWxzOiB7XG4gICAgICAgIGZvcm1hdDogXCIjLiMjIyMjIyMjIyMjIyMjIyMjIyMjXCJcbiAgICB9LFxuICAgIHpJbmRleDogMVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IE51bWVyaWNBeGlzO1xuIiwiaW1wb3J0IEF4aXMgZnJvbSAnLi9heGlzJztcbmltcG9ydCBOdW1lcmljQXhpcyBmcm9tICcuL251bWVyaWMtYXhpcyc7XG5pbXBvcnQgQXhpc0xhYmVsIGZyb20gJy4vYXhpcy1sYWJlbCc7XG5pbXBvcnQgeyBEYXRlTGFiZWxGb3JtYXRzIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuXG5pbXBvcnQgeyBCTEFDSywgREFURSwgQ09PUkRfUFJFQ0lTSU9OLCBERUZBVUxUX1BSRUNJU0lPTiwgWCwgWSB9IGZyb20gJy4uL2NvbW1vbi9jb25zdGFudHMnO1xuaW1wb3J0IHsgc2V0RGVmYXVsdE9wdGlvbnMsIGRlZXBFeHRlbmQsIGxpbWl0VmFsdWUsIHJvdW5kIH0gZnJvbSAnLi4vY29tbW9uJztcblxuaW1wb3J0IGF1dG9NYWpvclVuaXQgZnJvbSAnLi91dGlscy9hdXRvLW1ham9yLXVuaXQnO1xuaW1wb3J0IGNlaWwgZnJvbSAnLi91dGlscy9jZWlsJztcblxuaW1wb3J0IHsgdG9EYXRlLCB0b1RpbWUsIGZsb29yRGF0ZSwgY2VpbERhdGUsIGR1cmF0aW9uLCBhZGREdXJhdGlvbiwgYWRkVGlja3MsIGRhdGVEaWZmLCBhYnNvbHV0ZURhdGVEaWZmLCBkYXRlQ29tcGFyZXIsIHBhcnNlRGF0ZSwgcGFyc2VEYXRlcywgZmlyc3REYXkgfSBmcm9tICcuLi9kYXRlLXV0aWxzJztcbmltcG9ydCB7IEhPVVJTLCBEQVlTLCBXRUVLUywgTU9OVEhTLCBZRUFSUywgVElNRV9QRVJfREFZLCBUSU1FX1BFUl9XRUVLLCBUSU1FX1BFUl9NT05USCwgVElNRV9QRVJfWUVBUiwgVElNRV9QRVJfVU5JVCB9IGZyb20gJy4uL2RhdGUtdXRpbHMvY29uc3RhbnRzJztcblxuY2xhc3MgRGF0ZVZhbHVlQXhpcyBleHRlbmRzIEF4aXMge1xuICAgIGNvbnN0cnVjdG9yKHNlcmllc01pbiwgc2VyaWVzTWF4LCBheGlzT3B0aW9ucywgY2hhcnRTZXJ2aWNlKSB7XG4gICAgICAgIGNvbnN0IG1pbiA9IHRvRGF0ZShzZXJpZXNNaW4pO1xuICAgICAgICBjb25zdCBtYXggPSB0b0RhdGUoc2VyaWVzTWF4KTtcblxuICAgICAgICBjb25zdCBpbnRsU2VydmljZSA9IGNoYXJ0U2VydmljZS5pbnRsO1xuICAgICAgICBsZXQgb3B0aW9ucyA9IGF4aXNPcHRpb25zIHx8IHt9O1xuICAgICAgICBvcHRpb25zID0gZGVlcEV4dGVuZChvcHRpb25zIHx8IHt9LCB7XG4gICAgICAgICAgICBtaW46IHBhcnNlRGF0ZShpbnRsU2VydmljZSwgb3B0aW9ucy5taW4pLFxuICAgICAgICAgICAgbWF4OiBwYXJzZURhdGUoaW50bFNlcnZpY2UsIG9wdGlvbnMubWF4KSxcbiAgICAgICAgICAgIGF4aXNDcm9zc2luZ1ZhbHVlOiBwYXJzZURhdGVzKGludGxTZXJ2aWNlLCBvcHRpb25zLmF4aXNDcm9zc2luZ1ZhbHVlcyB8fCBvcHRpb25zLmF4aXNDcm9zc2luZ1ZhbHVlKSxcbiAgICAgICAgICAgIHdlZWtTdGFydERheTogZmlyc3REYXkob3B0aW9ucywgaW50bFNlcnZpY2UpXG4gICAgICAgIH0pO1xuICAgICAgICBvcHRpb25zID0gYXBwbHlEZWZhdWx0cyhtaW4sIG1heCwgb3B0aW9ucyk7XG5cbiAgICAgICAgc3VwZXIob3B0aW9ucywgY2hhcnRTZXJ2aWNlKTtcblxuICAgICAgICB0aGlzLmludGxTZXJ2aWNlID0gaW50bFNlcnZpY2U7XG4gICAgICAgIHRoaXMuc2VyaWVzTWluID0gbWluO1xuICAgICAgICB0aGlzLnNlcmllc01heCA9IG1heDtcblxuICAgICAgICBjb25zdCB3ZWVrU3RhcnREYXkgPSBvcHRpb25zLndlZWtTdGFydERheSB8fCAwO1xuICAgICAgICB0aGlzLnRvdGFsTWluID0gdG9UaW1lKGZsb29yRGF0ZSh0b1RpbWUobWluKSAtIDEsIG9wdGlvbnMuYmFzZVVuaXQsIHdlZWtTdGFydERheSkpO1xuICAgICAgICB0aGlzLnRvdGFsTWF4ID0gdG9UaW1lKGNlaWxEYXRlKHRvVGltZShtYXgpICsgMSwgb3B0aW9ucy5iYXNlVW5pdCwgd2Vla1N0YXJ0RGF5KSk7XG4gICAgfVxuXG4gICAgY2xvbmUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZVZhbHVlQXhpcyh0aGlzLnNlcmllc01pbiwgdGhpcy5zZXJpZXNNYXgsIE9iamVjdC5hc3NpZ24oe30sIHRoaXMub3B0aW9ucyksIHRoaXMuY2hhcnRTZXJ2aWNlKTtcbiAgICB9XG5cbiAgICByYW5nZSgpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgcmV0dXJuIHsgbWluOiBvcHRpb25zLm1pbiwgbWF4OiBvcHRpb25zLm1heCB9O1xuICAgIH1cblxuICAgIGdldERpdmlzaW9ucyhzdGVwVmFsdWUpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihcbiAgICAgICAgICAgIGR1cmF0aW9uKG9wdGlvbnMubWluLCBvcHRpb25zLm1heCwgb3B0aW9ucy5iYXNlVW5pdCkgLyBzdGVwVmFsdWUgKyAxXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZ2V0VGlja1Bvc2l0aW9ucyhzdGVwKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHZlcnRpY2FsID0gb3B0aW9ucy52ZXJ0aWNhbDtcbiAgICAgICAgY29uc3QgbGluZUJveCA9IHRoaXMubGluZUJveCgpO1xuICAgICAgICBjb25zdCBkaXIgPSAodmVydGljYWwgPyAtMSA6IDEpICogKG9wdGlvbnMucmV2ZXJzZSA/IC0xIDogMSk7XG4gICAgICAgIGNvbnN0IHN0YXJ0RWRnZSA9IGRpciA9PT0gMSA/IDEgOiAyO1xuICAgICAgICBjb25zdCBzdGFydCA9IGxpbmVCb3hbKHZlcnRpY2FsID8gWSA6IFgpICsgc3RhcnRFZGdlXTtcbiAgICAgICAgY29uc3QgZGl2aXNpb25zID0gdGhpcy5nZXREaXZpc2lvbnMoc3RlcCk7XG4gICAgICAgIGNvbnN0IHRpbWVSYW5nZSA9IGRhdGVEaWZmKG9wdGlvbnMubWF4LCBvcHRpb25zLm1pbik7XG4gICAgICAgIGNvbnN0IGxpbmVTaXplID0gdmVydGljYWwgPyBsaW5lQm94LmhlaWdodCgpIDogbGluZUJveC53aWR0aCgpO1xuICAgICAgICBjb25zdCBzY2FsZSA9IGxpbmVTaXplIC8gdGltZVJhbmdlO1xuICAgICAgICBjb25zdCB3ZWVrU3RhcnREYXkgPSBvcHRpb25zLndlZWtTdGFydERheSB8fCAwO1xuXG4gICAgICAgIGNvbnN0IHBvc2l0aW9ucyA9IFsgc3RhcnQgXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBkaXZpc2lvbnM7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgZGF0ZSA9IGFkZER1cmF0aW9uKG9wdGlvbnMubWluLCBpICogc3RlcCwgb3B0aW9ucy5iYXNlVW5pdCwgd2Vla1N0YXJ0RGF5KTtcbiAgICAgICAgICAgIGNvbnN0IHBvcyA9IHN0YXJ0ICsgZGF0ZURpZmYoZGF0ZSwgb3B0aW9ucy5taW4pICogc2NhbGUgKiBkaXI7XG5cbiAgICAgICAgICAgIHBvc2l0aW9ucy5wdXNoKHJvdW5kKHBvcywgQ09PUkRfUFJFQ0lTSU9OKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcG9zaXRpb25zO1xuICAgIH1cblxuICAgIGdldE1ham9yVGlja1Bvc2l0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VGlja1Bvc2l0aW9ucyh0aGlzLm9wdGlvbnMubWFqb3JVbml0KTtcbiAgICB9XG5cbiAgICBnZXRNaW5vclRpY2tQb3NpdGlvbnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFRpY2tQb3NpdGlvbnModGhpcy5vcHRpb25zLm1pbm9yVW5pdCk7XG4gICAgfVxuXG4gICAgZ2V0U2xvdChhLCBiLCBsaW1pdCkge1xuICAgICAgICByZXR1cm4gTnVtZXJpY0F4aXMucHJvdG90eXBlLmdldFNsb3QuY2FsbChcbiAgICAgICAgICAgIHRoaXMsIHBhcnNlRGF0ZSh0aGlzLmludGxTZXJ2aWNlLCBhKSwgcGFyc2VEYXRlKHRoaXMuaW50bFNlcnZpY2UsIGIpLCBsaW1pdFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGdldFZhbHVlKHBvaW50KSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gTnVtZXJpY0F4aXMucHJvdG90eXBlLmdldFZhbHVlLmNhbGwodGhpcywgcG9pbnQpO1xuXG4gICAgICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbCA/IHRvRGF0ZSh2YWx1ZSkgOiBudWxsO1xuICAgIH1cblxuICAgIGxhYmVsc0NvdW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXREaXZpc2lvbnModGhpcy5vcHRpb25zLm1ham9yVW5pdCk7XG4gICAgfVxuXG4gICAgY3JlYXRlQXhpc0xhYmVsKGluZGV4LCBsYWJlbE9wdGlvbnMpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gaW5kZXggKiBvcHRpb25zLm1ham9yVW5pdDtcbiAgICAgICAgY29uc3Qgd2Vla1N0YXJ0RGF5ID0gb3B0aW9ucy53ZWVrU3RhcnREYXkgfHwgMDtcbiAgICAgICAgbGV0IGRhdGUgPSBvcHRpb25zLm1pbjtcblxuICAgICAgICBpZiAob2Zmc2V0ID4gMCkge1xuICAgICAgICAgICAgZGF0ZSA9IGFkZER1cmF0aW9uKGRhdGUsIG9mZnNldCwgb3B0aW9ucy5iYXNlVW5pdCwgd2Vla1N0YXJ0RGF5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHVuaXRGb3JtYXQgPSBsYWJlbE9wdGlvbnMuZGF0ZUZvcm1hdHNbb3B0aW9ucy5iYXNlVW5pdF07XG4gICAgICAgIGxhYmVsT3B0aW9ucy5mb3JtYXQgPSBsYWJlbE9wdGlvbnMuZm9ybWF0IHx8IHVuaXRGb3JtYXQ7XG5cbiAgICAgICAgY29uc3QgdGV4dCA9IHRoaXMuYXhpc0xhYmVsVGV4dChkYXRlLCBudWxsLCBsYWJlbE9wdGlvbnMpO1xuICAgICAgICByZXR1cm4gbmV3IEF4aXNMYWJlbChkYXRlLCB0ZXh0LCBpbmRleCwgbnVsbCwgbGFiZWxPcHRpb25zKTtcbiAgICB9XG5cbiAgICB0cmFuc2xhdGVSYW5nZShkZWx0YSwgZXhhY3QpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgYmFzZVVuaXQgPSBvcHRpb25zLmJhc2VVbml0O1xuICAgICAgICBjb25zdCB3ZWVrU3RhcnREYXkgPSBvcHRpb25zLndlZWtTdGFydERheSB8fCAwO1xuICAgICAgICBjb25zdCBsaW5lQm94ID0gdGhpcy5saW5lQm94KCk7XG4gICAgICAgIGNvbnN0IHNpemUgPSBvcHRpb25zLnZlcnRpY2FsID8gbGluZUJveC5oZWlnaHQoKSA6IGxpbmVCb3gud2lkdGgoKTtcbiAgICAgICAgY29uc3QgcmFuZ2UgPSB0aGlzLnJhbmdlKCk7XG4gICAgICAgIGNvbnN0IHNjYWxlID0gc2l6ZSAvIGRhdGVEaWZmKHJhbmdlLm1heCwgcmFuZ2UubWluKTtcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gcm91bmQoZGVsdGEgLyBzY2FsZSwgREVGQVVMVF9QUkVDSVNJT04pICogKG9wdGlvbnMucmV2ZXJzZSA/IC0xIDogMSk7XG4gICAgICAgIGxldCBmcm9tID0gYWRkVGlja3Mob3B0aW9ucy5taW4sIG9mZnNldCk7XG4gICAgICAgIGxldCB0byA9IGFkZFRpY2tzKG9wdGlvbnMubWF4LCBvZmZzZXQpO1xuXG4gICAgICAgIGlmICghZXhhY3QpIHtcbiAgICAgICAgICAgIGZyb20gPSBhZGREdXJhdGlvbihmcm9tLCAwLCBiYXNlVW5pdCwgd2Vla1N0YXJ0RGF5KTtcbiAgICAgICAgICAgIHRvID0gYWRkRHVyYXRpb24odG8sIDAsIGJhc2VVbml0LCB3ZWVrU3RhcnREYXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1pbjogZnJvbSxcbiAgICAgICAgICAgIG1heDogdG8sXG4gICAgICAgICAgICBvZmZzZXQ6IG9mZnNldFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHNjYWxlUmFuZ2UoZGVsdGEpIHtcbiAgICAgICAgbGV0IHsgbWluOiBmcm9tLCBtYXg6IHRvIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGxldCByb3VuZHMgPSBNYXRoLmFicyhkZWx0YSk7XG5cbiAgICAgICAgd2hpbGUgKHJvdW5kcy0tKSB7XG4gICAgICAgICAgICBjb25zdCByYW5nZSA9IGRhdGVEaWZmKGZyb20sIHRvKTtcbiAgICAgICAgICAgIGNvbnN0IHN0ZXAgPSBNYXRoLnJvdW5kKHJhbmdlICogMC4xKTtcbiAgICAgICAgICAgIGlmIChkZWx0YSA8IDApIHtcbiAgICAgICAgICAgICAgICBmcm9tID0gYWRkVGlja3MoZnJvbSwgc3RlcCk7XG4gICAgICAgICAgICAgICAgdG8gPSBhZGRUaWNrcyh0bywgLXN0ZXApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmcm9tID0gYWRkVGlja3MoZnJvbSwgLXN0ZXApO1xuICAgICAgICAgICAgICAgIHRvID0gYWRkVGlja3ModG8sIHN0ZXApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHsgbWluOiBmcm9tLCBtYXg6IHRvIH07XG4gICAgfVxuXG4gICAgc2hvdWxkUmVuZGVyTm90ZSh2YWx1ZSkge1xuICAgICAgICBjb25zdCByYW5nZSA9IHRoaXMucmFuZ2UoKTtcblxuICAgICAgICByZXR1cm4gZGF0ZUNvbXBhcmVyKHZhbHVlLCByYW5nZS5taW4pID49IDAgJiYgZGF0ZUNvbXBhcmVyKHZhbHVlLCByYW5nZS5tYXgpIDw9IDA7XG4gICAgfVxuXG4gICAgcGFuKGRlbHRhKSB7XG4gICAgICAgIGNvbnN0IHJhbmdlID0gdGhpcy50cmFuc2xhdGVSYW5nZShkZWx0YSwgdHJ1ZSk7XG4gICAgICAgIGNvbnN0IGxpbWl0dGVkUmFuZ2UgPSB0aGlzLmxpbWl0UmFuZ2UodG9UaW1lKHJhbmdlLm1pbiksIHRvVGltZShyYW5nZS5tYXgpLCB0aGlzLnRvdGFsTWluLCB0aGlzLnRvdGFsTWF4LCByYW5nZS5vZmZzZXQpO1xuXG4gICAgICAgIGlmIChsaW1pdHRlZFJhbmdlKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG1pbjogdG9EYXRlKGxpbWl0dGVkUmFuZ2UubWluKSxcbiAgICAgICAgICAgICAgICBtYXg6IHRvRGF0ZShsaW1pdHRlZFJhbmdlLm1heClcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwb2ludHNSYW5nZShzdGFydCwgZW5kKSB7XG4gICAgICAgIGNvbnN0IHN0YXJ0VmFsdWUgPSB0aGlzLmdldFZhbHVlKHN0YXJ0KTtcbiAgICAgICAgY29uc3QgZW5kVmFsdWUgPSB0aGlzLmdldFZhbHVlKGVuZCk7XG4gICAgICAgIGNvbnN0IG1pbiA9IE1hdGgubWluKHN0YXJ0VmFsdWUsIGVuZFZhbHVlKTtcbiAgICAgICAgY29uc3QgbWF4ID0gTWF0aC5tYXgoc3RhcnRWYWx1ZSwgZW5kVmFsdWUpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBtaW46IHRvRGF0ZShtaW4pLFxuICAgICAgICAgICAgbWF4OiB0b0RhdGUobWF4KVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHpvb21SYW5nZShkZWx0YSkge1xuICAgICAgICBjb25zdCByYW5nZSA9IHRoaXMuc2NhbGVSYW5nZShkZWx0YSk7XG4gICAgICAgIGNvbnN0IG1pbiA9IHRvRGF0ZShsaW1pdFZhbHVlKHRvVGltZShyYW5nZS5taW4pLCB0aGlzLnRvdGFsTWluLCB0aGlzLnRvdGFsTWF4KSk7XG4gICAgICAgIGNvbnN0IG1heCA9IHRvRGF0ZShsaW1pdFZhbHVlKHRvVGltZShyYW5nZS5tYXgpLCB0aGlzLnRvdGFsTWluLCB0aGlzLnRvdGFsTWF4KSk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1pbjogbWluLFxuICAgICAgICAgICAgbWF4OiBtYXhcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHRpbWVVbml0cyhkZWx0YSkge1xuICAgIGxldCB1bml0ID0gSE9VUlM7XG5cbiAgICBpZiAoZGVsdGEgPj0gVElNRV9QRVJfWUVBUikge1xuICAgICAgICB1bml0ID0gWUVBUlM7XG4gICAgfSBlbHNlIGlmIChkZWx0YSA+PSBUSU1FX1BFUl9NT05USCkge1xuICAgICAgICB1bml0ID0gTU9OVEhTO1xuICAgIH0gZWxzZSBpZiAoZGVsdGEgPj0gVElNRV9QRVJfV0VFSykge1xuICAgICAgICB1bml0ID0gV0VFS1M7XG4gICAgfSBlbHNlIGlmIChkZWx0YSA+PSBUSU1FX1BFUl9EQVkpIHtcbiAgICAgICAgdW5pdCA9IERBWVM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuaXQ7XG59XG5cbmZ1bmN0aW9uIGFwcGx5RGVmYXVsdHMoc2VyaWVzTWluLCBzZXJpZXNNYXgsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBtaW4gPSBvcHRpb25zLm1pbiB8fCBzZXJpZXNNaW47XG4gICAgY29uc3QgbWF4ID0gb3B0aW9ucy5tYXggfHwgc2VyaWVzTWF4O1xuICAgIGNvbnN0IGJhc2VVbml0ID0gb3B0aW9ucy5iYXNlVW5pdCB8fCAobWF4ICYmIG1pbiA/IHRpbWVVbml0cyhhYnNvbHV0ZURhdGVEaWZmKG1heCwgbWluKSkgOiBIT1VSUyk7XG4gICAgY29uc3QgYmFzZVVuaXRUaW1lID0gVElNRV9QRVJfVU5JVFtiYXNlVW5pdF07XG4gICAgY29uc3Qgd2Vla1N0YXJ0RGF5ID0gb3B0aW9ucy53ZWVrU3RhcnREYXkgfHwgMDtcbiAgICBjb25zdCBhdXRvTWluID0gZmxvb3JEYXRlKHRvVGltZShtaW4pIC0gMSwgYmFzZVVuaXQsIHdlZWtTdGFydERheSkgfHwgdG9EYXRlKG1heCk7XG4gICAgY29uc3QgYXV0b01heCA9IGNlaWxEYXRlKHRvVGltZShtYXgpICsgMSwgYmFzZVVuaXQsIHdlZWtTdGFydERheSk7XG4gICAgY29uc3QgdXNlck1ham9yVW5pdCA9IG9wdGlvbnMubWFqb3JVbml0ID8gb3B0aW9ucy5tYWpvclVuaXQgOiB1bmRlZmluZWQ7XG4gICAgY29uc3QgbWFqb3JVbml0ID0gdXNlck1ham9yVW5pdCB8fCBjZWlsKFxuICAgICAgICAgICAgICAgICAgICAgICAgYXV0b01ham9yVW5pdChhdXRvTWluLmdldFRpbWUoKSwgYXV0b01heC5nZXRUaW1lKCkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgYmFzZVVuaXRUaW1lXG4gICAgICAgICAgICAgICAgICAgICkgLyBiYXNlVW5pdFRpbWU7XG4gICAgY29uc3QgYWN0dWFsVW5pdHMgPSBkdXJhdGlvbihhdXRvTWluLCBhdXRvTWF4LCBiYXNlVW5pdCk7XG4gICAgY29uc3QgdG90YWxVbml0cyA9IGNlaWwoYWN0dWFsVW5pdHMsIG1ham9yVW5pdCk7XG4gICAgY29uc3QgdW5pdHNUb0FkZCA9IHRvdGFsVW5pdHMgLSBhY3R1YWxVbml0cztcbiAgICBjb25zdCBoZWFkID0gTWF0aC5mbG9vcih1bml0c1RvQWRkIC8gMik7XG4gICAgY29uc3QgdGFpbCA9IHVuaXRzVG9BZGQgLSBoZWFkO1xuXG4gICAgaWYgKCFvcHRpb25zLmJhc2VVbml0KSB7XG4gICAgICAgIGRlbGV0ZSBvcHRpb25zLmJhc2VVbml0O1xuICAgIH1cblxuICAgIG9wdGlvbnMuYmFzZVVuaXQgPSBvcHRpb25zLmJhc2VVbml0IHx8IGJhc2VVbml0O1xuICAgIG9wdGlvbnMubWluID0gb3B0aW9ucy5taW4gfHwgYWRkRHVyYXRpb24oYXV0b01pbiwgLWhlYWQsIGJhc2VVbml0LCB3ZWVrU3RhcnREYXkpO1xuICAgIG9wdGlvbnMubWF4ID0gb3B0aW9ucy5tYXggfHwgYWRkRHVyYXRpb24oYXV0b01heCwgdGFpbCwgYmFzZVVuaXQsIHdlZWtTdGFydERheSk7XG4gICAgb3B0aW9ucy5taW5vclVuaXQgPSBvcHRpb25zLm1pbm9yVW5pdCB8fCBtYWpvclVuaXQgLyA1O1xuICAgIG9wdGlvbnMubWFqb3JVbml0ID0gbWFqb3JVbml0O1xuXG4gICAgcmV0dXJuIG9wdGlvbnM7XG59XG5cbnNldERlZmF1bHRPcHRpb25zKERhdGVWYWx1ZUF4aXMsIHtcbiAgICB0eXBlOiBEQVRFLFxuICAgIG1ham9yR3JpZExpbmVzOiB7XG4gICAgICAgIHZpc2libGU6IHRydWUsXG4gICAgICAgIHdpZHRoOiAxLFxuICAgICAgICBjb2xvcjogQkxBQ0tcbiAgICB9LFxuICAgIGxhYmVsczoge1xuICAgICAgICBkYXRlRm9ybWF0czogRGF0ZUxhYmVsRm9ybWF0c1xuICAgIH1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBEYXRlVmFsdWVBeGlzO1xuIiwiXG5pbXBvcnQgQXhpcyBmcm9tICcuL2F4aXMnO1xuaW1wb3J0IEF4aXNMYWJlbCBmcm9tICcuL2F4aXMtbGFiZWwnO1xuaW1wb3J0IEJveCBmcm9tICcuL2JveCc7XG5cbmltcG9ydCBjcmVhdGVBeGlzVGljayBmcm9tICcuL3V0aWxzL2NyZWF0ZS1heGlzLXRpY2snO1xuaW1wb3J0IGNyZWF0ZUF4aXNHcmlkTGluZSBmcm9tICcuL3V0aWxzL2NyZWF0ZS1heGlzLWdyaWQtbGluZSc7XG5pbXBvcnQgbGltaXRDb29yZGluYXRlIGZyb20gJy4vdXRpbHMvbGltaXQtY29vcmRpbmF0ZSc7XG5cbmltcG9ydCB7IERFRkFVTFRfUFJFQ0lTSU9OLCBCTEFDSywgWCwgWSB9IGZyb20gJy4uL2NvbW1vbi9jb25zdGFudHMnO1xuaW1wb3J0IHsgZGVlcEV4dGVuZCwgZGVmaW5lZCwgaW5BcnJheSwgbGltaXRWYWx1ZSwgcm91bmQsIHNldERlZmF1bHRPcHRpb25zIH0gZnJvbSAnLi4vY29tbW9uJztcblxuY29uc3QgREVGQVVMVF9NQUpPUl9VTklUID0gMTA7XG5cbmNsYXNzIExvZ2FyaXRobWljQXhpcyBleHRlbmRzIEF4aXMge1xuICAgIGNvbnN0cnVjdG9yKHNlcmllc01pbiwgc2VyaWVzTWF4LCBvcHRpb25zLCBjaGFydFNlcnZpY2UpIHtcblxuICAgICAgICBjb25zdCBheGlzT3B0aW9ucyA9IGRlZXBFeHRlbmQoeyBtYWpvclVuaXQ6IERFRkFVTFRfTUFKT1JfVU5JVCwgbWluOiBzZXJpZXNNaW4sIG1heDogc2VyaWVzTWF4IH0sIG9wdGlvbnMpO1xuICAgICAgICBjb25zdCBiYXNlID0gYXhpc09wdGlvbnMubWFqb3JVbml0O1xuICAgICAgICBjb25zdCBhdXRvTWF4ID0gYXV0b0F4aXNNYXgoc2VyaWVzTWF4LCBiYXNlKTtcbiAgICAgICAgY29uc3QgYXV0b01pbiA9IGF1dG9BeGlzTWluKHNlcmllc01pbiwgc2VyaWVzTWF4LCBheGlzT3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IHJhbmdlID0gaW5pdFJhbmdlKGF1dG9NaW4sIGF1dG9NYXgsIGF4aXNPcHRpb25zLCBvcHRpb25zKTtcblxuICAgICAgICBheGlzT3B0aW9ucy5tYXggPSByYW5nZS5tYXg7XG4gICAgICAgIGF4aXNPcHRpb25zLm1pbiA9IHJhbmdlLm1pbjtcbiAgICAgICAgYXhpc09wdGlvbnMubWlub3JVbml0ID0gb3B0aW9ucy5taW5vclVuaXQgfHwgcm91bmQoYmFzZSAtIDEsIERFRkFVTFRfUFJFQ0lTSU9OKTtcblxuICAgICAgICBzdXBlcihheGlzT3B0aW9ucywgY2hhcnRTZXJ2aWNlKTtcblxuICAgICAgICB0aGlzLnRvdGFsTWluID0gZGVmaW5lZChvcHRpb25zLm1pbikgPyBNYXRoLm1pbihhdXRvTWluLCBvcHRpb25zLm1pbikgOiBhdXRvTWluO1xuICAgICAgICB0aGlzLnRvdGFsTWF4ID0gZGVmaW5lZChvcHRpb25zLm1heCkgPyBNYXRoLm1heChhdXRvTWF4LCBvcHRpb25zLm1heCkgOiBhdXRvTWF4O1xuICAgICAgICB0aGlzLmxvZ01pbiA9IHJvdW5kKGxvZyhyYW5nZS5taW4sIGJhc2UpLCBERUZBVUxUX1BSRUNJU0lPTik7XG4gICAgICAgIHRoaXMubG9nTWF4ID0gcm91bmQobG9nKHJhbmdlLm1heCwgYmFzZSksIERFRkFVTFRfUFJFQ0lTSU9OKTtcbiAgICAgICAgdGhpcy5zZXJpZXNNaW4gPSBzZXJpZXNNaW47XG4gICAgICAgIHRoaXMuc2VyaWVzTWF4ID0gc2VyaWVzTWF4O1xuXG4gICAgICAgIHRoaXMuY3JlYXRlTGFiZWxzKCk7XG4gICAgfVxuXG4gICAgY2xvbmUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgTG9nYXJpdGhtaWNBeGlzKFxuICAgICAgICAgICAgdGhpcy5zZXJpZXNNaW4sXG4gICAgICAgICAgICB0aGlzLnNlcmllc01heCxcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oe30sIHRoaXMub3B0aW9ucyksXG4gICAgICAgICAgICB0aGlzLmNoYXJ0U2VydmljZVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHN0YXJ0VmFsdWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMubWluO1xuICAgIH1cblxuICAgIGdldFNsb3QoYSwgYiwgbGltaXQpIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zLCBsb2dNaW4sIGxvZ01heCB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyByZXZlcnNlLCB2ZXJ0aWNhbCwgbWFqb3JVbml0OiBiYXNlIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCB2YWx1ZUF4aXMgPSB2ZXJ0aWNhbCA/IFkgOiBYO1xuICAgICAgICBjb25zdCBsaW5lQm94ID0gdGhpcy5saW5lQm94KCk7XG4gICAgICAgIGNvbnN0IGxpbmVTdGFydCA9IGxpbmVCb3hbdmFsdWVBeGlzICsgKHJldmVyc2UgPyAyIDogMSldO1xuICAgICAgICBjb25zdCBsaW5lU2l6ZSA9IHZlcnRpY2FsID8gbGluZUJveC5oZWlnaHQoKSA6IGxpbmVCb3gud2lkdGgoKTtcbiAgICAgICAgY29uc3QgZGlyID0gcmV2ZXJzZSA/IC0xIDogMTtcbiAgICAgICAgY29uc3Qgc3RlcCA9IGRpciAqIChsaW5lU2l6ZSAvIChsb2dNYXggLSBsb2dNaW4pKTtcbiAgICAgICAgY29uc3Qgc2xvdEJveCA9IG5ldyBCb3gobGluZUJveC54MSwgbGluZUJveC55MSwgbGluZUJveC54MSwgbGluZUJveC55MSk7XG4gICAgICAgIGxldCBzdGFydCA9IGE7XG4gICAgICAgIGxldCBlbmQgPSBiO1xuXG4gICAgICAgIGlmICghZGVmaW5lZChzdGFydCkpIHtcbiAgICAgICAgICAgIHN0YXJ0ID0gZW5kIHx8IDE7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWRlZmluZWQoZW5kKSkge1xuICAgICAgICAgICAgZW5kID0gc3RhcnQgfHwgMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdGFydCA8PSAwIHx8IGVuZCA8PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsaW1pdCkge1xuICAgICAgICAgICAgc3RhcnQgPSBNYXRoLm1heChNYXRoLm1pbihzdGFydCwgb3B0aW9ucy5tYXgpLCBvcHRpb25zLm1pbik7XG4gICAgICAgICAgICBlbmQgPSBNYXRoLm1heChNYXRoLm1pbihlbmQsIG9wdGlvbnMubWF4KSwgb3B0aW9ucy5taW4pO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhcnQgPSBsb2coc3RhcnQsIGJhc2UpO1xuICAgICAgICBlbmQgPSBsb2coZW5kLCBiYXNlKTtcblxuICAgICAgICBsZXQgcDEsIHAyO1xuXG4gICAgICAgIGlmICh2ZXJ0aWNhbCkge1xuICAgICAgICAgICAgcDEgPSBsb2dNYXggLSBNYXRoLm1heChzdGFydCwgZW5kKTtcbiAgICAgICAgICAgIHAyID0gbG9nTWF4IC0gTWF0aC5taW4oc3RhcnQsIGVuZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwMSA9IE1hdGgubWluKHN0YXJ0LCBlbmQpIC0gbG9nTWluO1xuICAgICAgICAgICAgcDIgPSBNYXRoLm1heChzdGFydCwgZW5kKSAtIGxvZ01pbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHNsb3RCb3hbdmFsdWVBeGlzICsgMV0gPSBsaW1pdENvb3JkaW5hdGUobGluZVN0YXJ0ICsgc3RlcCAqIChyZXZlcnNlID8gcDIgOiBwMSkpO1xuICAgICAgICBzbG90Qm94W3ZhbHVlQXhpcyArIDJdID0gbGltaXRDb29yZGluYXRlKGxpbmVTdGFydCArIHN0ZXAgKiAocmV2ZXJzZSA/IHAxIDogcDIpKTtcblxuICAgICAgICByZXR1cm4gc2xvdEJveDtcbiAgICB9XG5cbiAgICBnZXRWYWx1ZShwb2ludCkge1xuICAgICAgICBjb25zdCB7IG9wdGlvbnMsIGxvZ01pbiwgbG9nTWF4IH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7IHJldmVyc2UsIHZlcnRpY2FsLCBtYWpvclVuaXQ6IGJhc2UgfSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGxpbmVCb3ggPSB0aGlzLmxpbmVCb3goKTtcbiAgICAgICAgY29uc3QgZGlyID0gdmVydGljYWwgPT09IHJldmVyc2UgPyAxIDogLTE7XG4gICAgICAgIGNvbnN0IHN0YXJ0RWRnZSA9IGRpciA9PT0gMSA/IDEgOiAyO1xuICAgICAgICBjb25zdCBsaW5lU2l6ZSA9IHZlcnRpY2FsID8gbGluZUJveC5oZWlnaHQoKSA6IGxpbmVCb3gud2lkdGgoKTtcbiAgICAgICAgY29uc3Qgc3RlcCA9ICgobG9nTWF4IC0gbG9nTWluKSAvIGxpbmVTaXplKTtcbiAgICAgICAgY29uc3QgdmFsdWVBeGlzID0gdmVydGljYWwgPyBZIDogWDtcbiAgICAgICAgY29uc3QgbGluZVN0YXJ0ID0gbGluZUJveFt2YWx1ZUF4aXMgKyBzdGFydEVkZ2VdO1xuICAgICAgICBjb25zdCBvZmZzZXQgPSBkaXIgKiAocG9pbnRbdmFsdWVBeGlzXSAtIGxpbmVTdGFydCk7XG4gICAgICAgIGNvbnN0IHZhbHVlT2Zmc2V0ID0gb2Zmc2V0ICogc3RlcDtcblxuICAgICAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgPiBsaW5lU2l6ZSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB2YWx1ZSA9IGxvZ01pbiArIHZhbHVlT2Zmc2V0O1xuXG4gICAgICAgIHJldHVybiByb3VuZChNYXRoLnBvdyhiYXNlLCB2YWx1ZSksIERFRkFVTFRfUFJFQ0lTSU9OKTtcbiAgICB9XG5cbiAgICByYW5nZSgpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgcmV0dXJuIHsgbWluOiBvcHRpb25zLm1pbiwgbWF4OiBvcHRpb25zLm1heCB9O1xuICAgIH1cblxuICAgIHNjYWxlUmFuZ2UoZGVsdGEpIHtcbiAgICAgICAgY29uc3QgYmFzZSA9IHRoaXMub3B0aW9ucy5tYWpvclVuaXQ7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IC1kZWx0YTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWluOiBNYXRoLnBvdyhiYXNlLCB0aGlzLmxvZ01pbiAtIG9mZnNldCksXG4gICAgICAgICAgICBtYXg6IE1hdGgucG93KGJhc2UsIHRoaXMubG9nTWF4ICsgb2Zmc2V0KVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHRyYW5zbGF0ZVJhbmdlKGRlbHRhKSB7XG4gICAgICAgIGNvbnN0IHsgb3B0aW9ucywgbG9nTWluLCBsb2dNYXggfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHsgcmV2ZXJzZSwgdmVydGljYWwsIG1ham9yVW5pdDogYmFzZSB9ID0gb3B0aW9ucztcbiAgICAgICAgY29uc3QgbGluZUJveCA9IHRoaXMubGluZUJveCgpO1xuICAgICAgICBjb25zdCBzaXplID0gdmVydGljYWwgPyBsaW5lQm94LmhlaWdodCgpIDogbGluZUJveC53aWR0aCgpO1xuICAgICAgICBjb25zdCBzY2FsZSA9IHNpemUgLyAobG9nTWF4IC0gbG9nTWluKTtcbiAgICAgICAgbGV0IG9mZnNldCA9IHJvdW5kKGRlbHRhIC8gc2NhbGUsIERFRkFVTFRfUFJFQ0lTSU9OKTtcblxuICAgICAgICBpZiAoKHZlcnRpY2FsIHx8IHJldmVyc2UpICYmICEodmVydGljYWwgJiYgcmV2ZXJzZSApKSB7XG4gICAgICAgICAgICBvZmZzZXQgPSAtb2Zmc2V0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1pbjogTWF0aC5wb3coYmFzZSwgbG9nTWluICsgb2Zmc2V0KSxcbiAgICAgICAgICAgIG1heDogTWF0aC5wb3coYmFzZSwgbG9nTWF4ICsgb2Zmc2V0KSxcbiAgICAgICAgICAgIG9mZnNldDogb2Zmc2V0XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgbGFiZWxzQ291bnQoKSB7XG4gICAgICAgIGNvbnN0IGZsb29yTWF4ID0gTWF0aC5mbG9vcih0aGlzLmxvZ01heCk7XG4gICAgICAgIGNvbnN0IGNvdW50ID0gTWF0aC5mbG9vcihmbG9vck1heCAtIHRoaXMubG9nTWluKSArIDE7XG5cbiAgICAgICAgcmV0dXJuIGNvdW50O1xuICAgIH1cblxuICAgIGdldE1ham9yVGlja1Bvc2l0aW9ucygpIHtcbiAgICAgICAgY29uc3QgdGlja3MgPSBbXTtcblxuICAgICAgICB0aGlzLnRyYXZlcnNlTWFqb3JUaWNrc1Bvc2l0aW9ucygocG9zaXRpb24pID0+IHtcbiAgICAgICAgICAgIHRpY2tzLnB1c2gocG9zaXRpb24pO1xuICAgICAgICB9LCB7IHN0ZXA6IDEsIHNraXA6IDAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRpY2tzO1xuICAgIH1cblxuICAgIGNyZWF0ZVRpY2tzKGxpbmVHcm91cCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCB7IG1ham9yVGlja3MsIG1pbm9yVGlja3MsIHZlcnRpY2FsIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCBtaXJyb3IgPSBvcHRpb25zLmxhYmVscy5taXJyb3I7XG4gICAgICAgIGNvbnN0IGxpbmVCb3ggPSB0aGlzLmxpbmVCb3goKTtcbiAgICAgICAgY29uc3QgdGlja3MgPSBbXTtcbiAgICAgICAgY29uc3QgdGlja0xpbmVPcHRpb25zID0ge1xuICAgICAgICAgICAgLy8gVE9ET1xuICAgICAgICAgICAgLy8gX2FsaWduTGluZXM6IG9wdGlvbnMuX2FsaWduTGluZXMsXG4gICAgICAgICAgICB2ZXJ0aWNhbDogdmVydGljYWxcbiAgICAgICAgfTtcblxuICAgICAgICBmdW5jdGlvbiByZW5kZXIodGlja1Bvc2l0aW9uLCB0aWNrT3B0aW9ucykge1xuICAgICAgICAgICAgdGlja0xpbmVPcHRpb25zLnRpY2tYID0gbWlycm9yID8gbGluZUJveC54MiA6IGxpbmVCb3gueDIgLSB0aWNrT3B0aW9ucy5zaXplO1xuICAgICAgICAgICAgdGlja0xpbmVPcHRpb25zLnRpY2tZID0gbWlycm9yID8gbGluZUJveC55MSAtIHRpY2tPcHRpb25zLnNpemUgOiBsaW5lQm94LnkxO1xuICAgICAgICAgICAgdGlja0xpbmVPcHRpb25zLnBvc2l0aW9uID0gdGlja1Bvc2l0aW9uO1xuXG4gICAgICAgICAgICBsaW5lR3JvdXAuYXBwZW5kKGNyZWF0ZUF4aXNUaWNrKHRpY2tMaW5lT3B0aW9ucywgdGlja09wdGlvbnMpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtYWpvclRpY2tzLnZpc2libGUpIHtcbiAgICAgICAgICAgIHRoaXMudHJhdmVyc2VNYWpvclRpY2tzUG9zaXRpb25zKHJlbmRlciwgbWFqb3JUaWNrcyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWlub3JUaWNrcy52aXNpYmxlKSB7XG4gICAgICAgICAgICB0aGlzLnRyYXZlcnNlTWlub3JUaWNrc1Bvc2l0aW9ucyhyZW5kZXIsIG1pbm9yVGlja3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRpY2tzO1xuICAgIH1cblxuICAgIGNyZWF0ZUdyaWRMaW5lcyhhbHRBeGlzKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHsgbWlub3JHcmlkTGluZXMsIG1ham9yR3JpZExpbmVzLCB2ZXJ0aWNhbCB9ID0gb3B0aW9ucztcbiAgICAgICAgY29uc3QgbGluZUJveCA9IGFsdEF4aXMubGluZUJveCgpO1xuICAgICAgICBjb25zdCBsaW5lT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGxpbmVTdGFydDogbGluZUJveFt2ZXJ0aWNhbCA/IFwieDFcIiA6IFwieTFcIl0sXG4gICAgICAgICAgICBsaW5lRW5kOiBsaW5lQm94W3ZlcnRpY2FsID8gXCJ4MlwiIDogXCJ5MlwiXSxcbiAgICAgICAgICAgIHZlcnRpY2FsOiB2ZXJ0aWNhbFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCBtYWpvclRpY2tzID0gW107XG5cbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5ncmlkTGluZXNWaXN1YWwoKTtcbiAgICAgICAgZnVuY3Rpb24gcmVuZGVyKHRpY2tQb3NpdGlvbiwgZ3JpZExpbmUpIHtcbiAgICAgICAgICAgIGlmICghaW5BcnJheSh0aWNrUG9zaXRpb24sIG1ham9yVGlja3MpKSB7XG4gICAgICAgICAgICAgICAgbGluZU9wdGlvbnMucG9zaXRpb24gPSB0aWNrUG9zaXRpb247XG4gICAgICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZChjcmVhdGVBeGlzR3JpZExpbmUobGluZU9wdGlvbnMsIGdyaWRMaW5lKSk7XG5cbiAgICAgICAgICAgICAgICBtYWpvclRpY2tzLnB1c2godGlja1Bvc2l0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtYWpvckdyaWRMaW5lcy52aXNpYmxlKSB7XG4gICAgICAgICAgICB0aGlzLnRyYXZlcnNlTWFqb3JUaWNrc1Bvc2l0aW9ucyhyZW5kZXIsIG1ham9yR3JpZExpbmVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtaW5vckdyaWRMaW5lcy52aXNpYmxlKSB7XG4gICAgICAgICAgICB0aGlzLnRyYXZlcnNlTWlub3JUaWNrc1Bvc2l0aW9ucyhyZW5kZXIsIG1pbm9yR3JpZExpbmVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb250YWluZXIuY2hpbGRyZW47XG4gICAgfVxuXG4gICAgdHJhdmVyc2VNYWpvclRpY2tzUG9zaXRpb25zKGNhbGxiYWNrLCB0aWNrT3B0aW9ucykge1xuICAgICAgICBjb25zdCB7IGxpbmVTdGFydCwgc3RlcCB9ID0gdGhpcy5fbGluZU9wdGlvbnMoKTtcbiAgICAgICAgY29uc3QgeyBsb2dNaW4sIGxvZ01heCB9ID0gdGhpcztcblxuICAgICAgICBmb3IgKGxldCBwb3dlciA9IE1hdGguY2VpbChsb2dNaW4pICsgdGlja09wdGlvbnMuc2tpcDsgcG93ZXIgPD0gbG9nTWF4OyBwb3dlciArPSB0aWNrT3B0aW9ucy5zdGVwKSB7XG4gICAgICAgICAgICBsZXQgcG9zaXRpb24gPSByb3VuZChsaW5lU3RhcnQgKyBzdGVwICogKHBvd2VyIC0gbG9nTWluKSwgREVGQVVMVF9QUkVDSVNJT04pO1xuICAgICAgICAgICAgY2FsbGJhY2socG9zaXRpb24sIHRpY2tPcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRyYXZlcnNlTWlub3JUaWNrc1Bvc2l0aW9ucyhjYWxsYmFjaywgdGlja09wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyBtaW4sIG1heCwgbWlub3JVbml0LCBtYWpvclVuaXQ6IGJhc2UgfSA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgeyBsaW5lU3RhcnQsIHN0ZXAgfSA9IHRoaXMuX2xpbmVPcHRpb25zKCk7XG4gICAgICAgIGNvbnN0IHsgbG9nTWluLCBsb2dNYXggfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gTWF0aC5mbG9vcihsb2dNaW4pO1xuXG4gICAgICAgIGZvciAobGV0IHBvd2VyID0gc3RhcnQ7IHBvd2VyIDwgbG9nTWF4OyBwb3dlcisrKSB7XG4gICAgICAgICAgICBjb25zdCBtaW5vck9wdGlvbnMgPSB0aGlzLl9taW5vckludGVydmFsT3B0aW9ucyhwb3dlcik7XG4gICAgICAgICAgICBmb3IgKGxldCBpZHggPSB0aWNrT3B0aW9ucy5za2lwOyBpZHggPCBtaW5vclVuaXQ7IGlkeCArPSB0aWNrT3B0aW9ucy5zdGVwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBtaW5vck9wdGlvbnMudmFsdWUgKyBpZHggKiBtaW5vck9wdGlvbnMubWlub3JTdGVwO1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA+IG1heCkge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID49IG1pbikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHJvdW5kKGxpbmVTdGFydCArIHN0ZXAgKiAobG9nKHZhbHVlLCBiYXNlKSAtIGxvZ01pbiksIERFRkFVTFRfUFJFQ0lTSU9OKTtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2socG9zaXRpb24sIHRpY2tPcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjcmVhdGVBeGlzTGFiZWwoaW5kZXgsIGxhYmVsT3B0aW9ucykge1xuICAgICAgICBjb25zdCBwb3dlciA9IE1hdGguY2VpbCh0aGlzLmxvZ01pbiArIGluZGV4KTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBNYXRoLnBvdyh0aGlzLm9wdGlvbnMubWFqb3JVbml0LCBwb3dlcik7XG4gICAgICAgIGNvbnN0IHRleHQgPSB0aGlzLmF4aXNMYWJlbFRleHQodmFsdWUsIG51bGwsIGxhYmVsT3B0aW9ucyk7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBBeGlzTGFiZWwodmFsdWUsIHRleHQsIGluZGV4LCBudWxsLCBsYWJlbE9wdGlvbnMpO1xuICAgIH1cblxuICAgIHNob3VsZFJlbmRlck5vdGUodmFsdWUpIHtcbiAgICAgICAgY29uc3QgcmFuZ2UgPSB0aGlzLnJhbmdlKCk7XG4gICAgICAgIHJldHVybiByYW5nZS5taW4gPD0gdmFsdWUgJiYgdmFsdWUgPD0gcmFuZ2UubWF4O1xuICAgIH1cblxuICAgIHBhbihkZWx0YSkge1xuICAgICAgICBjb25zdCByYW5nZSA9IHRoaXMudHJhbnNsYXRlUmFuZ2UoZGVsdGEpO1xuICAgICAgICByZXR1cm4gdGhpcy5saW1pdFJhbmdlKHJhbmdlLm1pbiwgcmFuZ2UubWF4LCB0aGlzLnRvdGFsTWluLCB0aGlzLnRvdGFsTWF4LCByYW5nZS5vZmZzZXQpO1xuICAgIH1cblxuICAgIHBvaW50c1JhbmdlKHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgY29uc3Qgc3RhcnRWYWx1ZSA9IHRoaXMuZ2V0VmFsdWUoc3RhcnQpO1xuICAgICAgICBjb25zdCBlbmRWYWx1ZSA9IHRoaXMuZ2V0VmFsdWUoZW5kKTtcbiAgICAgICAgY29uc3QgbWluID0gTWF0aC5taW4oc3RhcnRWYWx1ZSwgZW5kVmFsdWUpO1xuICAgICAgICBjb25zdCBtYXggPSBNYXRoLm1heChzdGFydFZhbHVlLCBlbmRWYWx1ZSk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1pbjogbWluLFxuICAgICAgICAgICAgbWF4OiBtYXhcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB6b29tUmFuZ2UoZGVsdGEpIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zLCB0b3RhbE1pbiwgdG90YWxNYXggfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IG5ld1JhbmdlID0gdGhpcy5zY2FsZVJhbmdlKGRlbHRhKTtcbiAgICAgICAgY29uc3QgbWluID0gbGltaXRWYWx1ZShuZXdSYW5nZS5taW4sIHRvdGFsTWluLCB0b3RhbE1heCk7XG4gICAgICAgIGNvbnN0IG1heCA9IGxpbWl0VmFsdWUobmV3UmFuZ2UubWF4LCB0b3RhbE1pbiwgdG90YWxNYXgpO1xuICAgICAgICBjb25zdCBiYXNlID0gb3B0aW9ucy5tYWpvclVuaXQ7XG4gICAgICAgIGNvbnN0IGFjY2VwdE9wdGlvbnNSYW5nZSA9IG1heCA+IG1pbiAmJiBvcHRpb25zLm1pbiAmJiBvcHRpb25zLm1heCAmJiAocm91bmQobG9nKG9wdGlvbnMubWF4LCBiYXNlKSAtIGxvZyhvcHRpb25zLm1pbiwgYmFzZSksIERFRkFVTFRfUFJFQ0lTSU9OKSA8IDEpO1xuICAgICAgICBjb25zdCBhY2NlcHROZXdSYW5nZSA9ICEob3B0aW9ucy5taW4gPT09IHRvdGFsTWluICYmIG9wdGlvbnMubWF4ID09PSB0b3RhbE1heCkgJiYgcm91bmQobG9nKG1heCwgYmFzZSkgLSBsb2cobWluLCBiYXNlKSwgREVGQVVMVF9QUkVDSVNJT04pID49IDE7XG5cbiAgICAgICAgaWYgKGFjY2VwdE9wdGlvbnNSYW5nZSB8fCBhY2NlcHROZXdSYW5nZSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBtaW46IG1pbixcbiAgICAgICAgICAgICAgICBtYXg6IG1heFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9taW5vckludGVydmFsT3B0aW9ucyhwb3dlcikge1xuICAgICAgICBjb25zdCB7IG1pbm9yVW5pdCwgbWFqb3JVbml0OiBiYXNlIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gTWF0aC5wb3coYmFzZSwgcG93ZXIpO1xuICAgICAgICBjb25zdCBuZXh0VmFsdWUgPSBNYXRoLnBvdyhiYXNlLCBwb3dlciArIDEpO1xuICAgICAgICBjb25zdCBkaWZmZXJlbmNlID0gbmV4dFZhbHVlIC0gdmFsdWU7XG4gICAgICAgIGNvbnN0IG1pbm9yU3RlcCA9IGRpZmZlcmVuY2UgLyBtaW5vclVuaXQ7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgIG1pbm9yU3RlcDogbWlub3JTdGVwXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgX2xpbmVPcHRpb25zKCkge1xuICAgICAgICBjb25zdCB7IHJldmVyc2UsIHZlcnRpY2FsIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHZhbHVlQXhpcyA9IHZlcnRpY2FsID8gWSA6IFg7XG4gICAgICAgIGNvbnN0IGxpbmVCb3ggPSB0aGlzLmxpbmVCb3goKTtcbiAgICAgICAgY29uc3QgZGlyID0gdmVydGljYWwgPT09IHJldmVyc2UgPyAxIDogLTE7XG4gICAgICAgIGNvbnN0IHN0YXJ0RWRnZSA9IGRpciA9PT0gMSA/IDEgOiAyO1xuICAgICAgICBjb25zdCBsaW5lU2l6ZSA9IHZlcnRpY2FsID8gbGluZUJveC5oZWlnaHQoKSA6IGxpbmVCb3gud2lkdGgoKTtcbiAgICAgICAgY29uc3Qgc3RlcCA9IGRpciAqIChsaW5lU2l6ZSAvICh0aGlzLmxvZ01heCAtIHRoaXMubG9nTWluKSk7XG4gICAgICAgIGNvbnN0IGxpbmVTdGFydCA9IGxpbmVCb3hbdmFsdWVBeGlzICsgc3RhcnRFZGdlXTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3RlcDogc3RlcCxcbiAgICAgICAgICAgIGxpbmVTdGFydDogbGluZVN0YXJ0LFxuICAgICAgICAgICAgbGluZUJveDogbGluZUJveFxuICAgICAgICB9O1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaW5pdFJhbmdlKGF1dG9NaW4sIGF1dG9NYXgsIGF4aXNPcHRpb25zLCBvcHRpb25zKSB7XG4gICAgbGV0IHsgbWluLCBtYXggfSA9IGF4aXNPcHRpb25zO1xuXG4gICAgaWYgKGRlZmluZWQoYXhpc09wdGlvbnMuYXhpc0Nyb3NzaW5nVmFsdWUpICYmIGF4aXNPcHRpb25zLmF4aXNDcm9zc2luZ1ZhbHVlIDw9IDApIHtcbiAgICAgICAgdGhyb3dOZWdhdGl2ZVZhbHVlc0Vycm9yKCk7XG4gICAgfVxuXG4gICAgaWYgKCFkZWZpbmVkKG9wdGlvbnMubWF4KSkge1xuICAgICAgICBtYXggPSBhdXRvTWF4O1xuICAgIH0gZWxzZSBpZiAob3B0aW9ucy5tYXggPD0gMCkge1xuICAgICAgICB0aHJvd05lZ2F0aXZlVmFsdWVzRXJyb3IoKTtcbiAgICB9XG5cbiAgICBpZiAoIWRlZmluZWQob3B0aW9ucy5taW4pKSB7XG4gICAgICAgIG1pbiA9IGF1dG9NaW47XG4gICAgfSBlbHNlIGlmIChvcHRpb25zLm1pbiA8PSAwKSB7XG4gICAgICAgIHRocm93TmVnYXRpdmVWYWx1ZXNFcnJvcigpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIG1pbjogbWluLFxuICAgICAgICBtYXg6IG1heFxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGF1dG9BeGlzTWluKG1pbiwgbWF4LCBvcHRpb25zKSB7XG4gICAgY29uc3QgYmFzZSA9IG9wdGlvbnMubWFqb3JVbml0O1xuICAgIGxldCBhdXRvTWluID0gbWluO1xuICAgIGlmIChtaW4gPD0gMCkge1xuICAgICAgICBhdXRvTWluID0gbWF4IDw9IDEgPyBNYXRoLnBvdyhiYXNlLCAtMikgOiAxO1xuICAgIH0gZWxzZSBpZiAoIW9wdGlvbnMubmFycm93UmFuZ2UpIHtcbiAgICAgICAgYXV0b01pbiA9IE1hdGgucG93KGJhc2UsIE1hdGguZmxvb3IobG9nKG1pbiwgYmFzZSkpKTtcbiAgICB9XG4gICAgcmV0dXJuIGF1dG9NaW47XG59XG5cbmZ1bmN0aW9uIGF1dG9BeGlzTWF4KG1heCwgYmFzZSkge1xuICAgIGNvbnN0IGxvZ01heFJlbWFpbmRlciA9IHJvdW5kKGxvZyhtYXgsIGJhc2UpLCBERUZBVUxUX1BSRUNJU0lPTikgJSAxO1xuICAgIGxldCBhdXRvTWF4O1xuICAgIGlmIChtYXggPD0gMCkge1xuICAgICAgICBhdXRvTWF4ID0gYmFzZTtcbiAgICB9IGVsc2UgaWYgKGxvZ01heFJlbWFpbmRlciAhPT0gMCAmJiAobG9nTWF4UmVtYWluZGVyIDwgMC4zIHx8IGxvZ01heFJlbWFpbmRlciA+IDAuOSkpIHtcbiAgICAgICAgYXV0b01heCA9IE1hdGgucG93KGJhc2UsIGxvZyhtYXgsIGJhc2UpICsgMC4yKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBhdXRvTWF4ID0gTWF0aC5wb3coYmFzZSwgTWF0aC5jZWlsKGxvZyhtYXgsIGJhc2UpKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGF1dG9NYXg7XG59XG5cbmZ1bmN0aW9uIHRocm93TmVnYXRpdmVWYWx1ZXNFcnJvcigpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb24gcG9zaXRpdmUgdmFsdWVzIGNhbm5vdCBiZSB1c2VkIGZvciBhIGxvZ2FyaXRobWljIGF4aXNcIik7XG59XG5cbmZ1bmN0aW9uIGxvZyh5LCB4KSB7XG4gICAgcmV0dXJuIE1hdGgubG9nKHkpIC8gTWF0aC5sb2coeCk7XG59XG5cbnNldERlZmF1bHRPcHRpb25zKExvZ2FyaXRobWljQXhpcywge1xuICAgIHR5cGU6IFwibG9nXCIsXG4gICAgbWFqb3JVbml0OiBERUZBVUxUX01BSk9SX1VOSVQsXG4gICAgbWlub3JVbml0OiAxLFxuICAgIGF4aXNDcm9zc2luZ1ZhbHVlOiAxLFxuICAgIHZlcnRpY2FsOiB0cnVlLFxuICAgIG1ham9yR3JpZExpbmVzOiB7XG4gICAgICAgIHZpc2libGU6IHRydWUsXG4gICAgICAgIHdpZHRoOiAxLFxuICAgICAgICBjb2xvcjogQkxBQ0tcbiAgICB9LFxuICAgIHpJbmRleDogMSxcbiAgICBfZGVmZXJMYWJlbHM6IHRydWVcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBMb2dhcml0aG1pY0F4aXM7XG4iLCJpbXBvcnQgeyBnZW9tZXRyeSBhcyBnZW9tLCBkcmF3aW5nIGFzIGRyYXcgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tZHJhd2luZyc7XG5cbmltcG9ydCB7IGFwcGVuZCwgbWFwIH0gZnJvbSAnLi4vLi4vY29tbW9uJztcblxuY29uc3QgR3JpZExpbmVzTWl4aW4gPSB7XG4gICAgY3JlYXRlR3JpZExpbmVzOiBmdW5jdGlvbihhbHRBeGlzKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHJhZGl1cyA9IE1hdGguYWJzKHRoaXMuYm94LmNlbnRlcigpLnkgLSBhbHRBeGlzLmxpbmVCb3goKS55MSk7XG4gICAgICAgIGxldCBncmlkTGluZXMgPSBbXTtcbiAgICAgICAgbGV0IHNraXBNYWpvciA9IGZhbHNlO1xuICAgICAgICBsZXQgbWFqb3JBbmdsZXMsIG1pbm9yQW5nbGVzO1xuXG4gICAgICAgIGlmIChvcHRpb25zLm1ham9yR3JpZExpbmVzLnZpc2libGUpIHtcbiAgICAgICAgICAgIG1ham9yQW5nbGVzID0gdGhpcy5tYWpvckdyaWRMaW5lQW5nbGVzKGFsdEF4aXMpO1xuICAgICAgICAgICAgc2tpcE1ham9yID0gdHJ1ZTtcblxuICAgICAgICAgICAgZ3JpZExpbmVzID0gdGhpcy5yZW5kZXJNYWpvckdyaWRMaW5lcyhcbiAgICAgICAgICAgICAgICBtYWpvckFuZ2xlcywgcmFkaXVzLCBvcHRpb25zLm1ham9yR3JpZExpbmVzXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMubWlub3JHcmlkTGluZXMudmlzaWJsZSkge1xuICAgICAgICAgICAgbWlub3JBbmdsZXMgPSB0aGlzLm1pbm9yR3JpZExpbmVBbmdsZXMoYWx0QXhpcywgc2tpcE1ham9yKTtcblxuICAgICAgICAgICAgYXBwZW5kKGdyaWRMaW5lcywgdGhpcy5yZW5kZXJNaW5vckdyaWRMaW5lcyhcbiAgICAgICAgICAgICAgICBtaW5vckFuZ2xlcywgcmFkaXVzLCBvcHRpb25zLm1pbm9yR3JpZExpbmVzLCBhbHRBeGlzLCBza2lwTWFqb3JcbiAgICAgICAgICAgICkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGdyaWRMaW5lcztcbiAgICB9LFxuXG4gICAgcmVuZGVyTWFqb3JHcmlkTGluZXM6IGZ1bmN0aW9uKGFuZ2xlcywgcmFkaXVzLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlbmRlckdyaWRMaW5lcyhhbmdsZXMsIHJhZGl1cywgb3B0aW9ucyk7XG4gICAgfSxcblxuICAgIHJlbmRlck1pbm9yR3JpZExpbmVzOiBmdW5jdGlvbihhbmdsZXMsIHJhZGl1cywgb3B0aW9ucywgYWx0QXhpcywgc2tpcE1ham9yKSB7XG4gICAgICAgIGNvbnN0IHJhZGl1c0NhbGxiYWNrID0gdGhpcy5yYWRpdXNDYWxsYmFjayAmJiB0aGlzLnJhZGl1c0NhbGxiYWNrKHJhZGl1cywgYWx0QXhpcywgc2tpcE1ham9yKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyR3JpZExpbmVzKGFuZ2xlcywgcmFkaXVzLCBvcHRpb25zLCByYWRpdXNDYWxsYmFjayk7XG4gICAgfSxcblxuICAgIHJlbmRlckdyaWRMaW5lczogZnVuY3Rpb24oYW5nbGVzLCByYWRpdXMsIG9wdGlvbnMsIHJhZGl1c0NhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IHN0eWxlID0ge1xuICAgICAgICAgICAgc3Ryb2tlOiB7XG4gICAgICAgICAgICAgICAgd2lkdGg6IG9wdGlvbnMud2lkdGgsXG4gICAgICAgICAgICAgICAgY29sb3I6IG9wdGlvbnMuY29sb3IsXG4gICAgICAgICAgICAgICAgZGFzaFR5cGU6IG9wdGlvbnMuZGFzaFR5cGVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBjZW50ZXIgPSB0aGlzLmJveC5jZW50ZXIoKTtcbiAgICAgICAgY29uc3QgY2lyY2xlID0gbmV3IGdlb20uQ2lyY2xlKFsgY2VudGVyLngsIGNlbnRlci55IF0sIHJhZGl1cyk7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuZ3JpZExpbmVzVmlzdWFsKCk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhbmdsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGxpbmUgPSBuZXcgZHJhdy5QYXRoKHN0eWxlKTtcbiAgICAgICAgICAgIGlmIChyYWRpdXNDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIGNpcmNsZS5yYWRpdXMgPSByYWRpdXNDYWxsYmFjayhhbmdsZXNbaV0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsaW5lLm1vdmVUbyhjaXJjbGUuY2VudGVyKVxuICAgICAgICAgICAgICAgIC5saW5lVG8oY2lyY2xlLnBvaW50QXQoYW5nbGVzW2ldICsgMTgwKSk7XG5cbiAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmQobGluZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29udGFpbmVyLmNoaWxkcmVuO1xuICAgIH0sXG5cbiAgICBncmlkTGluZUFuZ2xlczogZnVuY3Rpb24oYWx0QXhpcywgc2l6ZSwgc2tpcCwgc3RlcCwgc2tpcEFuZ2xlcykge1xuICAgICAgICBjb25zdCBkaXZzID0gdGhpcy5pbnRlcnZhbHMoc2l6ZSwgc2tpcCwgc3RlcCwgc2tpcEFuZ2xlcyk7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBhbHRBeGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGFsdEF4aXNWaXNpYmxlID0gb3B0aW9ucy52aXNpYmxlICYmIChvcHRpb25zLmxpbmUgfHwge30pLnZpc2libGUgIT09IGZhbHNlO1xuXG4gICAgICAgIHJldHVybiBtYXAoZGl2cywgKGQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGFscGhhID0gdGhpcy5pbnRlcnZhbEFuZ2xlKGQpO1xuXG4gICAgICAgICAgICBpZiAoIWFsdEF4aXNWaXNpYmxlIHx8IGFscGhhICE9PSA5MCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhbHBoYTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgR3JpZExpbmVzTWl4aW47IiwiaW1wb3J0IHsgZ2VvbWV0cnkgYXMgZ2VvbSwgZHJhd2luZyBhcyBkcmF3IH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWRyYXdpbmcnO1xuXG5pbXBvcnQgR3JpZExpbmVzTWl4aW4gZnJvbSAnLi9taXhpbnMvZ3JpZC1saW5lcy1taXhpbic7XG5pbXBvcnQgQ2F0ZWdvcnlBeGlzIGZyb20gJy4vY2F0ZWdvcnktYXhpcyc7XG5pbXBvcnQgU2hhcGVCdWlsZGVyIGZyb20gJy4vc2hhcGUtYnVpbGRlcic7XG5pbXBvcnQgUmluZyBmcm9tICcuL3JpbmcnO1xuaW1wb3J0IEJveCBmcm9tICcuL2JveCc7XG5cbmltcG9ydCB7IENPT1JEX1BSRUNJU0lPTiwgQVJDIH0gZnJvbSAnLi4vY29tbW9uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBkZWVwRXh0ZW5kLCBnZXRTcGFjaW5nLCBpbkFycmF5LCBsaW1pdFZhbHVlLCBtYXAsIHJhZCwgcm91bmQsIHNldERlZmF1bHRPcHRpb25zIH0gZnJvbSAnLi4vY29tbW9uJztcblxuY2xhc3MgUmFkYXJDYXRlZ29yeUF4aXMgZXh0ZW5kcyBDYXRlZ29yeUF4aXMge1xuICAgIHJhbmdlKCkge1xuICAgICAgICByZXR1cm4geyBtaW46IDAsIG1heDogdGhpcy5vcHRpb25zLmNhdGVnb3JpZXMubGVuZ3RoIH07XG4gICAgfVxuXG4gICAgcmVmbG93KGJveCkge1xuICAgICAgICB0aGlzLmJveCA9IGJveDtcbiAgICAgICAgdGhpcy5yZWZsb3dMYWJlbHMoKTtcbiAgICB9XG5cbiAgICBsaW5lQm94KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ib3g7XG4gICAgfVxuXG4gICAgcmVmbG93TGFiZWxzKCkge1xuICAgICAgICBjb25zdCB7IGxhYmVscywgb3B0aW9uczogeyBsYWJlbHM6IGxhYmVsT3B0aW9ucyB9IH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBza2lwID0gbGFiZWxPcHRpb25zLnNraXAgfHwgMDtcbiAgICAgICAgY29uc3Qgc3RlcCA9IGxhYmVsT3B0aW9ucy5zdGVwIHx8IDE7XG4gICAgICAgIGNvbnN0IG1lYXN1cmVCb3ggPSBuZXcgQm94KCk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsYWJlbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxhYmVsc1tpXS5yZWZsb3cobWVhc3VyZUJveCk7XG4gICAgICAgICAgICBjb25zdCBsYWJlbEJveCA9IGxhYmVsc1tpXS5ib3g7XG5cbiAgICAgICAgICAgIGxhYmVsc1tpXS5yZWZsb3codGhpcy5nZXRTbG90KHNraXAgKyBpICogc3RlcCkuYWRqYWNlbnRCb3goXG4gICAgICAgICAgICAgICAgMCwgbGFiZWxCb3gud2lkdGgoKSwgbGFiZWxCb3guaGVpZ2h0KClcbiAgICAgICAgICAgICkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaW50ZXJ2YWxzKHNpemUsIHNraXBPcHRpb24sIHN0ZXBPcHRpb24sIHNraXBBbmdsZXMgPSBmYWxzZSkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBjYXRlZ29yaWVzID0gb3B0aW9ucy5jYXRlZ29yaWVzLmxlbmd0aDtcbiAgICAgICAgY29uc3QgZGl2Q291bnQgPSBjYXRlZ29yaWVzIC8gc2l6ZSB8fCAxO1xuICAgICAgICBjb25zdCBkaXZBbmdsZSA9IDM2MCAvIGRpdkNvdW50O1xuICAgICAgICBjb25zdCBza2lwID0gc2tpcE9wdGlvbiB8fCAwO1xuICAgICAgICBjb25zdCBzdGVwID0gc3RlcE9wdGlvbiB8fCAxO1xuICAgICAgICBjb25zdCBkaXZzID0gW107XG4gICAgICAgIGxldCBhbmdsZSA9IDA7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IHNraXA7IGkgPCBkaXZDb3VudDsgaSArPSBzdGVwKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5yZXZlcnNlKSB7XG4gICAgICAgICAgICAgICAgYW5nbGUgPSAzNjAgLSBpICogZGl2QW5nbGU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFuZ2xlID0gaSAqIGRpdkFuZ2xlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhbmdsZSA9IHJvdW5kKGFuZ2xlLCBDT09SRF9QUkVDSVNJT04pICUgMzYwO1xuXG4gICAgICAgICAgICBpZiAoIShza2lwQW5nbGVzICYmIGluQXJyYXkoYW5nbGUsIHNraXBBbmdsZXMpKSkge1xuICAgICAgICAgICAgICAgIGRpdnMucHVzaChhbmdsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGl2cztcbiAgICB9XG5cbiAgICBtYWpvckludGVydmFscygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW50ZXJ2YWxzKDEpO1xuICAgIH1cblxuICAgIG1pbm9ySW50ZXJ2YWxzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnRlcnZhbHMoMC41KTtcbiAgICB9XG5cbiAgICBpbnRlcnZhbEFuZ2xlKGludGVydmFsKSB7XG4gICAgICAgIHJldHVybiAoMzYwICsgaW50ZXJ2YWwgKyB0aGlzLm9wdGlvbnMuc3RhcnRBbmdsZSkgJSAzNjA7XG4gICAgfVxuXG4gICAgbWFqb3JBbmdsZXMoKSB7XG4gICAgICAgIHJldHVybiBtYXAodGhpcy5tYWpvckludGVydmFscygpLCAoaW50ZXJ2YWwpID0+IHRoaXMuaW50ZXJ2YWxBbmdsZShpbnRlcnZhbCkpO1xuICAgIH1cblxuICAgIGNyZWF0ZUxpbmUoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICBtYWpvckdyaWRMaW5lQW5nbGVzKGFsdEF4aXMpIHtcbiAgICAgICAgY29uc3QgbWFqb3JHcmlkTGluZXMgPSB0aGlzLm9wdGlvbnMubWFqb3JHcmlkTGluZXM7XG4gICAgICAgIHJldHVybiB0aGlzLmdyaWRMaW5lQW5nbGVzKGFsdEF4aXMsIDEsIG1ham9yR3JpZExpbmVzLnNraXAsIG1ham9yR3JpZExpbmVzLnN0ZXApO1xuICAgIH1cblxuICAgIG1pbm9yR3JpZExpbmVBbmdsZXMoYWx0QXhpcywgc2tpcE1ham9yKSB7XG4gICAgICAgIGNvbnN0IHsgbWlub3JHcmlkTGluZXMsIG1ham9yR3JpZExpbmVzIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IG1ham9yR3JpZExpbmVBbmdsZXMgPSBza2lwTWFqb3IgPyB0aGlzLmludGVydmFscygxLCBtYWpvckdyaWRMaW5lcy5za2lwLCBtYWpvckdyaWRMaW5lcy5zdGVwKSA6IG51bGw7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZ3JpZExpbmVBbmdsZXMoYWx0QXhpcywgMC41LCBtaW5vckdyaWRMaW5lcy5za2lwLCBtaW5vckdyaWRMaW5lcy5zdGVwLCBtYWpvckdyaWRMaW5lQW5nbGVzKTtcbiAgICB9XG5cbiAgICByYWRpdXNDYWxsYmFjayhyYWRpdXMsIGFsdEF4aXMsIHNraXBNYWpvcikge1xuICAgICAgICBpZiAoYWx0QXhpcy5vcHRpb25zLnR5cGUgIT09IEFSQykge1xuICAgICAgICAgICAgY29uc3QgbWlub3JBbmdsZSA9IHJhZCgzNjAgLyAodGhpcy5vcHRpb25zLmNhdGVnb3JpZXMubGVuZ3RoICogMikpO1xuICAgICAgICAgICAgY29uc3QgbWlub3JSYWRpdXMgPSBNYXRoLmNvcyhtaW5vckFuZ2xlKSAqIHJhZGl1cztcbiAgICAgICAgICAgIGNvbnN0IG1ham9yQW5nbGVzID0gdGhpcy5tYWpvckFuZ2xlcygpO1xuXG4gICAgICAgICAgICBjb25zdCByYWRpdXNDYWxsYmFjayA9IGZ1bmN0aW9uKGFuZ2xlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFza2lwTWFqb3IgJiYgaW5BcnJheShhbmdsZSwgbWFqb3JBbmdsZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByYWRpdXM7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG1pbm9yUmFkaXVzO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHJldHVybiByYWRpdXNDYWxsYmFjaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNyZWF0ZVBsb3RCYW5kcygpIHtcbiAgICAgICAgY29uc3QgcGxvdEJhbmRzID0gdGhpcy5vcHRpb25zLnBsb3RCYW5kcyB8fCBbXTtcblxuICAgICAgICBjb25zdCBncm91cCA9IHRoaXMuX3Bsb3RiYW5kR3JvdXAgPSBuZXcgZHJhdy5Hcm91cCh7XG4gICAgICAgICAgICB6SW5kZXg6IC0xXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGxvdEJhbmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBiYW5kID0gcGxvdEJhbmRzW2ldO1xuICAgICAgICAgICAgY29uc3Qgc2xvdCA9IHRoaXMucGxvdEJhbmRTbG90KGJhbmQpO1xuICAgICAgICAgICAgY29uc3Qgc2luZ2xlU2xvdCA9IHRoaXMuZ2V0U2xvdChiYW5kLmZyb20pO1xuXG4gICAgICAgICAgICBjb25zdCBoZWFkID0gYmFuZC5mcm9tIC0gTWF0aC5mbG9vcihiYW5kLmZyb20pO1xuICAgICAgICAgICAgc2xvdC5zdGFydEFuZ2xlICs9IGhlYWQgKiBzaW5nbGVTbG90LmFuZ2xlO1xuXG4gICAgICAgICAgICBjb25zdCB0YWlsID0gTWF0aC5jZWlsKGJhbmQudG8pIC0gYmFuZC50bztcbiAgICAgICAgICAgIHNsb3QuYW5nbGUgLT0gKHRhaWwgKyBoZWFkKSAqIHNpbmdsZVNsb3QuYW5nbGU7XG5cbiAgICAgICAgICAgIGNvbnN0IHJpbmcgPSBTaGFwZUJ1aWxkZXIuY3VycmVudC5jcmVhdGVSaW5nKHNsb3QsIHtcbiAgICAgICAgICAgICAgICBmaWxsOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBiYW5kLmNvbG9yLFxuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiBiYW5kLm9wYWNpdHlcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHN0cm9rZToge1xuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiBiYW5kLm9wYWNpdHlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGdyb3VwLmFwcGVuZChyaW5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYXBwZW5kVmlzdWFsKGdyb3VwKTtcbiAgICB9XG5cbiAgICBwbG90QmFuZFNsb3QoYmFuZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRTbG90KGJhbmQuZnJvbSwgYmFuZC50byAtIDEpO1xuICAgIH1cblxuICAgIGdldFNsb3QoZnJvbSwgdG8pIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QganVzdGlmaWVkID0gb3B0aW9ucy5qdXN0aWZpZWQ7XG4gICAgICAgIGNvbnN0IGJveCA9IHRoaXMuYm94O1xuICAgICAgICBjb25zdCBkaXZzID0gdGhpcy5tYWpvckFuZ2xlcygpO1xuICAgICAgICBjb25zdCB0b3RhbERpdnMgPSBkaXZzLmxlbmd0aDtcbiAgICAgICAgY29uc3Qgc2xvdEFuZ2xlID0gMzYwIC8gdG90YWxEaXZzO1xuICAgICAgICBsZXQgZnJvbVZhbHVlID0gZnJvbTtcblxuICAgICAgICBpZiAob3B0aW9ucy5yZXZlcnNlICYmICFqdXN0aWZpZWQpIHtcbiAgICAgICAgICAgIGZyb21WYWx1ZSA9IChmcm9tVmFsdWUgKyAxKSAlIHRvdGFsRGl2cztcbiAgICAgICAgfVxuXG4gICAgICAgIGZyb21WYWx1ZSA9IGxpbWl0VmFsdWUoTWF0aC5mbG9vcihmcm9tVmFsdWUpLCAwLCB0b3RhbERpdnMgLSAxKTtcbiAgICAgICAgbGV0IHNsb3RTdGFydCA9IGRpdnNbZnJvbVZhbHVlXTtcblxuICAgICAgICBpZiAoanVzdGlmaWVkKSB7XG4gICAgICAgICAgICBzbG90U3RhcnQgPSBzbG90U3RhcnQgLSBzbG90QW5nbGUgLyAyO1xuXG4gICAgICAgICAgICBpZiAoc2xvdFN0YXJ0IDwgMCkge1xuICAgICAgICAgICAgICAgIHNsb3RTdGFydCArPSAzNjA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0b1ZhbHVlID0gbGltaXRWYWx1ZShNYXRoLmNlaWwodG8gfHwgZnJvbVZhbHVlKSwgZnJvbVZhbHVlLCB0b3RhbERpdnMgLSAxKTtcbiAgICAgICAgY29uc3Qgc2xvdHMgPSB0b1ZhbHVlIC0gZnJvbVZhbHVlICsgMTtcbiAgICAgICAgY29uc3QgYW5nbGUgPSBzbG90QW5nbGUgKiBzbG90cztcblxuICAgICAgICByZXR1cm4gbmV3IFJpbmcoYm94LmNlbnRlcigpLCAwLCBib3guaGVpZ2h0KCkgLyAyLCBzbG90U3RhcnQsIGFuZ2xlKTtcbiAgICB9XG5cbiAgICBzbG90KGZyb20sIHRvKSB7XG4gICAgICAgIGNvbnN0IHNsb3QgPSB0aGlzLmdldFNsb3QoZnJvbSwgdG8pO1xuICAgICAgICBjb25zdCBzdGFydEFuZ2xlID0gc2xvdC5zdGFydEFuZ2xlICsgMTgwO1xuICAgICAgICBjb25zdCBlbmRBbmdsZSA9IHN0YXJ0QW5nbGUgKyBzbG90LmFuZ2xlO1xuXG4gICAgICAgIHJldHVybiBuZXcgZ2VvbS5BcmMoWyBzbG90LmNlbnRlci54LCBzbG90LmNlbnRlci55IF0sIHtcbiAgICAgICAgICAgIHN0YXJ0QW5nbGU6IHN0YXJ0QW5nbGUsXG4gICAgICAgICAgICBlbmRBbmdsZTogZW5kQW5nbGUsXG4gICAgICAgICAgICByYWRpdXNYOiBzbG90LnJhZGl1cyxcbiAgICAgICAgICAgIHJhZGl1c1k6IHNsb3QucmFkaXVzXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHBvaW50Q2F0ZWdvcnlJbmRleChwb2ludCkge1xuICAgICAgICBjb25zdCBsZW5ndGggPSB0aGlzLm9wdGlvbnMuY2F0ZWdvcmllcy5sZW5ndGg7XG4gICAgICAgIGxldCBpbmRleCA9IG51bGw7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3Qgc2xvdCA9IHRoaXMuZ2V0U2xvdChpKTtcbiAgICAgICAgICAgIGlmIChzbG90LmNvbnRhaW5zUG9pbnQocG9pbnQpKSB7XG4gICAgICAgICAgICAgICAgaW5kZXggPSBpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH1cbn1cblxuc2V0RGVmYXVsdE9wdGlvbnMoUmFkYXJDYXRlZ29yeUF4aXMsIHtcbiAgICBzdGFydEFuZ2xlOiA5MCxcbiAgICBsYWJlbHM6IHtcbiAgICAgICAgbWFyZ2luOiBnZXRTcGFjaW5nKDEwKVxuICAgIH0sXG4gICAgbWFqb3JHcmlkTGluZXM6IHtcbiAgICAgICAgdmlzaWJsZTogdHJ1ZVxuICAgIH0sXG4gICAganVzdGlmaWVkOiB0cnVlXG59KTtcbmRlZXBFeHRlbmQoUmFkYXJDYXRlZ29yeUF4aXMucHJvdG90eXBlLCBHcmlkTGluZXNNaXhpbik7XG5cbmV4cG9ydCBkZWZhdWx0IFJhZGFyQ2F0ZWdvcnlBeGlzOyIsImltcG9ydCB7IGdlb21ldHJ5IGFzIGdlb20gfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tZHJhd2luZyc7XG5cbmltcG9ydCBHcmlkTGluZXNNaXhpbiBmcm9tICcuL21peGlucy9ncmlkLWxpbmVzLW1peGluJztcbmltcG9ydCBSYWRhckNhdGVnb3J5QXhpcyBmcm9tICcuL3JhZGFyLWNhdGVnb3J5LWF4aXMnO1xuaW1wb3J0IE51bWVyaWNBeGlzIGZyb20gJy4vbnVtZXJpYy1heGlzJztcbmltcG9ydCBBeGlzIGZyb20gJy4vYXhpcyc7XG5pbXBvcnQgUmluZyBmcm9tICcuL3JpbmcnO1xuaW1wb3J0IEJveCBmcm9tICcuL2JveCc7XG5cbmltcG9ydCB7IEJMQUNLIH0gZnJvbSAnLi4vY29tbW9uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBkZWVwRXh0ZW5kLCBkZWcsIGdldFNwYWNpbmcsIGluQXJyYXksIGxpbWl0VmFsdWUsIHNldERlZmF1bHRPcHRpb25zIH0gZnJvbSAnLi4vY29tbW9uJztcblxuY2xhc3MgUG9sYXJBeGlzIGV4dGVuZHMgQXhpcyB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucywgY2hhcnRTZXJ2aWNlKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMsIGNoYXJ0U2VydmljZSk7XG5cbiAgICAgICAgY29uc3QgaW5zdGFuY2VPcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG4gICAgICAgIGluc3RhbmNlT3B0aW9ucy5taW5vclVuaXQgPSBpbnN0YW5jZU9wdGlvbnMubWlub3JVbml0IHx8IGluc3RhbmNlT3B0aW9ucy5tYWpvclVuaXQgLyAyO1xuICAgIH1cblxuICAgIGdldERpdmlzaW9ucyhzdGVwVmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIE51bWVyaWNBeGlzLnByb3RvdHlwZS5nZXREaXZpc2lvbnMuY2FsbCh0aGlzLCBzdGVwVmFsdWUpIC0gMTtcbiAgICB9XG5cbiAgICByZWZsb3coYm94KSB7XG4gICAgICAgIHRoaXMuYm94ID0gYm94O1xuICAgICAgICB0aGlzLnJlZmxvd0xhYmVscygpO1xuICAgIH1cblxuICAgIHJlZmxvd0xhYmVscygpIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zLCBsYWJlbHMsIG9wdGlvbnM6IHsgbGFiZWxzOiBsYWJlbE9wdGlvbnMgfSB9ID0gdGhpcztcbiAgICAgICAgY29uc3Qgc2tpcCA9IGxhYmVsT3B0aW9ucy5za2lwIHx8IDA7XG4gICAgICAgIGNvbnN0IHN0ZXAgPSBsYWJlbE9wdGlvbnMuc3RlcCB8fCAxO1xuXG4gICAgICAgIGNvbnN0IG1lYXN1cmVCb3ggPSBuZXcgQm94KCk7XG4gICAgICAgIGNvbnN0IGRpdnMgPSB0aGlzLmludGVydmFscyhvcHRpb25zLm1ham9yVW5pdCwgc2tpcCwgc3RlcCk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsYWJlbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxhYmVsc1tpXS5yZWZsb3cobWVhc3VyZUJveCk7XG4gICAgICAgICAgICBjb25zdCBsYWJlbEJveCA9IGxhYmVsc1tpXS5ib3g7XG5cbiAgICAgICAgICAgIGxhYmVsc1tpXS5yZWZsb3codGhpcy5nZXRTbG90KGRpdnNbaV0pLmFkamFjZW50Qm94KDAsIGxhYmVsQm94LndpZHRoKCksIGxhYmVsQm94LmhlaWdodCgpKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsaW5lQm94KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ib3g7XG4gICAgfVxuXG4gICAgaW50ZXJ2YWxzKHNpemUsIHNraXBPcHRpb24sIHN0ZXBPcHRpb24sIHNraXBBbmdsZXMgPSBmYWxzZSkge1xuICAgICAgICBjb25zdCBtaW4gPSB0aGlzLm9wdGlvbnMubWluO1xuICAgICAgICBjb25zdCBkaXZpc2lvbnMgPSB0aGlzLmdldERpdmlzaW9ucyhzaXplKTtcbiAgICAgICAgY29uc3QgZGl2cyA9IFtdO1xuICAgICAgICBjb25zdCBza2lwID0gc2tpcE9wdGlvbiB8fCAwO1xuICAgICAgICBjb25zdCBzdGVwID0gc3RlcE9wdGlvbiB8fCAxO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSBza2lwOyBpIDwgZGl2aXNpb25zOyBpICs9IHN0ZXApIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnQgPSAoMzYwICsgbWluICsgaSAqIHNpemUpICUgMzYwO1xuICAgICAgICAgICAgaWYgKCEoc2tpcEFuZ2xlcyAmJiBpbkFycmF5KGN1cnJlbnQsIHNraXBBbmdsZXMpKSkge1xuICAgICAgICAgICAgICAgIGRpdnMucHVzaChjdXJyZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkaXZzO1xuICAgIH1cblxuICAgIG1ham9ySW50ZXJ2YWxzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnRlcnZhbHModGhpcy5vcHRpb25zLm1ham9yVW5pdCk7XG4gICAgfVxuXG4gICAgbWlub3JJbnRlcnZhbHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmludGVydmFscyh0aGlzLm9wdGlvbnMubWlub3JVbml0KTtcbiAgICB9XG5cbiAgICBpbnRlcnZhbEFuZ2xlKGkpIHtcbiAgICAgICAgcmV0dXJuICg1NDAgLSBpIC0gdGhpcy5vcHRpb25zLnN0YXJ0QW5nbGUpICUgMzYwO1xuICAgIH1cblxuICAgIGNyZWF0ZUxpbmUoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICBtYWpvckdyaWRMaW5lQW5nbGVzKGFsdEF4aXMpIHtcbiAgICAgICAgY29uc3QgbWFqb3JHcmlkTGluZXMgPSB0aGlzLm9wdGlvbnMubWFqb3JHcmlkTGluZXM7XG4gICAgICAgIHJldHVybiB0aGlzLmdyaWRMaW5lQW5nbGVzKGFsdEF4aXMsIHRoaXMub3B0aW9ucy5tYWpvclVuaXQsIG1ham9yR3JpZExpbmVzLnNraXAsIG1ham9yR3JpZExpbmVzLnN0ZXApO1xuICAgIH1cblxuICAgIG1pbm9yR3JpZExpbmVBbmdsZXMoYWx0QXhpcywgc2tpcE1ham9yKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHsgbWlub3JHcmlkTGluZXMsIG1ham9yR3JpZExpbmVzIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCBtYWpvckdyaWRMaW5lQW5nbGVzID0gc2tpcE1ham9yID8gdGhpcy5pbnRlcnZhbHMob3B0aW9ucy5tYWpvclVuaXQsIG1ham9yR3JpZExpbmVzLnNraXAsIG1ham9yR3JpZExpbmVzLnN0ZXApIDogbnVsbDtcblxuICAgICAgICByZXR1cm4gdGhpcy5ncmlkTGluZUFuZ2xlcyhhbHRBeGlzLCBvcHRpb25zLm1pbm9yVW5pdCwgbWlub3JHcmlkTGluZXMuc2tpcCwgbWlub3JHcmlkTGluZXMuc3RlcCwgbWFqb3JHcmlkTGluZUFuZ2xlcyk7XG4gICAgfVxuXG4gICAgcGxvdEJhbmRTbG90KGJhbmQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U2xvdChiYW5kLmZyb20sIGJhbmQudG8pO1xuICAgIH1cblxuICAgIGdldFNsb3QoYSwgYikge1xuICAgICAgICBjb25zdCB7IG9wdGlvbnMsIGJveCB9ID0gdGhpcztcbiAgICAgICAgY29uc3Qgc3RhcnRBbmdsZSA9IG9wdGlvbnMuc3RhcnRBbmdsZTtcbiAgICAgICAgbGV0IHN0YXJ0ID0gbGltaXRWYWx1ZShhLCBvcHRpb25zLm1pbiwgb3B0aW9ucy5tYXgpO1xuICAgICAgICBsZXQgZW5kID0gbGltaXRWYWx1ZShiIHx8IHN0YXJ0LCBzdGFydCwgb3B0aW9ucy5tYXgpO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnJldmVyc2UpIHtcbiAgICAgICAgICAgIHN0YXJ0ICo9IC0xO1xuICAgICAgICAgICAgZW5kICo9IC0xO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhcnQgPSAoNTQwIC0gc3RhcnQgLSBzdGFydEFuZ2xlKSAlIDM2MDtcbiAgICAgICAgZW5kID0gKDU0MCAtIGVuZCAtIHN0YXJ0QW5nbGUpICUgMzYwO1xuXG4gICAgICAgIGlmIChlbmQgPCBzdGFydCkge1xuICAgICAgICAgICAgY29uc3QgdG1wID0gc3RhcnQ7XG4gICAgICAgICAgICBzdGFydCA9IGVuZDtcbiAgICAgICAgICAgIGVuZCA9IHRtcDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgUmluZyhib3guY2VudGVyKCksIDAsIGJveC5oZWlnaHQoKSAvIDIsIHN0YXJ0LCBlbmQgLSBzdGFydCk7XG4gICAgfVxuXG4gICAgc2xvdChmcm9tLCB0byA9IGZyb20pIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3Qgc3RhcnQgPSAzNjAgLSBvcHRpb25zLnN0YXJ0QW5nbGU7XG4gICAgICAgIGNvbnN0IHNsb3QgPSB0aGlzLmdldFNsb3QoZnJvbSwgdG8pO1xuICAgICAgICBjb25zdCBtaW4gPSBNYXRoLm1pbihmcm9tLCB0byk7XG4gICAgICAgIGNvbnN0IG1heCA9IE1hdGgubWF4KGZyb20sIHRvKTtcbiAgICAgICAgbGV0IHN0YXJ0QW5nbGUsIGVuZEFuZ2xlO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnJldmVyc2UpIHtcbiAgICAgICAgICAgIHN0YXJ0QW5nbGUgPSBtaW47XG4gICAgICAgICAgICBlbmRBbmdsZSA9IG1heDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0YXJ0QW5nbGUgPSAzNjAgLSBtYXg7XG4gICAgICAgICAgICBlbmRBbmdsZSA9IDM2MCAtIG1pbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXJ0QW5nbGUgPSAoc3RhcnRBbmdsZSArIHN0YXJ0KSAlIDM2MDtcbiAgICAgICAgZW5kQW5nbGUgPSAoZW5kQW5nbGUgKyBzdGFydCkgJSAzNjA7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBnZW9tLkFyYyhbIHNsb3QuY2VudGVyLngsIHNsb3QuY2VudGVyLnkgXSwge1xuICAgICAgICAgICAgc3RhcnRBbmdsZTogc3RhcnRBbmdsZSxcbiAgICAgICAgICAgIGVuZEFuZ2xlOiBlbmRBbmdsZSxcbiAgICAgICAgICAgIHJhZGl1c1g6IHNsb3QucmFkaXVzLFxuICAgICAgICAgICAgcmFkaXVzWTogc2xvdC5yYWRpdXNcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2V0VmFsdWUocG9pbnQpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgY2VudGVyID0gdGhpcy5ib3guY2VudGVyKCk7XG4gICAgICAgIGNvbnN0IGR4ID0gcG9pbnQueCAtIGNlbnRlci54O1xuICAgICAgICBjb25zdCBkeSA9IHBvaW50LnkgLSBjZW50ZXIueTtcbiAgICAgICAgbGV0IHRoZXRhID0gTWF0aC5yb3VuZChkZWcoTWF0aC5hdGFuMihkeSwgZHgpKSk7XG4gICAgICAgIGxldCBzdGFydCA9IG9wdGlvbnMuc3RhcnRBbmdsZTtcblxuICAgICAgICBpZiAoIW9wdGlvbnMucmV2ZXJzZSkge1xuICAgICAgICAgICAgdGhldGEgKj0gLTE7XG4gICAgICAgICAgICBzdGFydCAqPSAtMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAodGhldGEgKyBzdGFydCArIDM2MCkgJSAzNjA7XG4gICAgfVxuXG4gICAgdmFsdWVSYW5nZSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG1pbjogMCxcbiAgICAgICAgICAgIG1heDogTWF0aC5QSSAqIDJcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbnNldERlZmF1bHRPcHRpb25zKFBvbGFyQXhpcywge1xuICAgIHR5cGU6IFwicG9sYXJcIixcbiAgICBzdGFydEFuZ2xlOiAwLFxuICAgIHJldmVyc2U6IGZhbHNlLFxuICAgIG1ham9yVW5pdDogNjAsXG4gICAgbWluOiAwLFxuICAgIG1heDogMzYwLFxuICAgIGxhYmVsczoge1xuICAgICAgICBtYXJnaW46IGdldFNwYWNpbmcoMTApXG4gICAgfSxcbiAgICBtYWpvckdyaWRMaW5lczoge1xuICAgICAgICBjb2xvcjogQkxBQ0ssXG4gICAgICAgIHZpc2libGU6IHRydWUsXG4gICAgICAgIHdpZHRoOiAxXG4gICAgfSxcbiAgICBtaW5vckdyaWRMaW5lczoge1xuICAgICAgICBjb2xvcjogXCIjYWFhXCJcbiAgICB9XG59KTtcblxuZGVlcEV4dGVuZChQb2xhckF4aXMucHJvdG90eXBlLCBHcmlkTGluZXNNaXhpbiwge1xuICAgIGNyZWF0ZVBsb3RCYW5kczogUmFkYXJDYXRlZ29yeUF4aXMucHJvdG90eXBlLmNyZWF0ZVBsb3RCYW5kcyxcbiAgICBtYWpvckFuZ2xlczogUmFkYXJDYXRlZ29yeUF4aXMucHJvdG90eXBlLm1ham9yQW5nbGVzLFxuICAgIHJhbmdlOiBOdW1lcmljQXhpcy5wcm90b3R5cGUucmFuZ2UsXG4gICAgbGFiZWxzQ291bnQ6IE51bWVyaWNBeGlzLnByb3RvdHlwZS5sYWJlbHNDb3VudCxcbiAgICBjcmVhdGVBeGlzTGFiZWw6IE51bWVyaWNBeGlzLnByb3RvdHlwZS5jcmVhdGVBeGlzTGFiZWxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBQb2xhckF4aXM7IiwiaW1wb3J0IHsgZ2VvbWV0cnkgYXMgZ2VvbSwgZHJhd2luZyBhcyBkcmF3IH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWRyYXdpbmcnO1xuXG5pbXBvcnQgU2hhcGVCdWlsZGVyIGZyb20gJy4uL3NoYXBlLWJ1aWxkZXInO1xuaW1wb3J0IFJpbmcgZnJvbSAnLi4vcmluZyc7XG5pbXBvcnQgUG9pbnQgZnJvbSAnLi4vcG9pbnQnO1xuXG5pbXBvcnQgeyBBUkMgfSBmcm9tICcuLi8uLi9jb21tb24vY29uc3RhbnRzJztcbmltcG9ydCB7IGFwcGVuZCwgZGVnLCByYWQgfSBmcm9tICcuLi8uLi9jb21tb24nO1xuXG5jb25zdCBSYWRhck51bWVyaWNBeGlzTWl4aW4gPSB7XG4gICAgb3B0aW9uczoge1xuICAgICAgICBtYWpvckdyaWRMaW5lczoge1xuICAgICAgICAgICAgdmlzaWJsZTogdHJ1ZVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIGNyZWF0ZVBsb3RCYW5kczogZnVuY3Rpb24oKSB7XG4gICAgICAgIGNvbnN0IHsgbWFqb3JHcmlkTGluZXM6IHsgdHlwZSB9LCBwbG90QmFuZHMgPSBbXSB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBhbHRBeGlzID0gdGhpcy5wbG90QXJlYS5wb2xhckF4aXM7XG4gICAgICAgIGNvbnN0IG1ham9yQW5nbGVzID0gYWx0QXhpcy5tYWpvckFuZ2xlcygpO1xuICAgICAgICBjb25zdCBjZW50ZXIgPSBhbHRBeGlzLmJveC5jZW50ZXIoKTtcbiAgICAgICAgY29uc3QgZ3JvdXAgPSB0aGlzLl9wbG90YmFuZEdyb3VwID0gbmV3IGRyYXcuR3JvdXAoe1xuICAgICAgICAgICAgekluZGV4OiAtMVxuICAgICAgICB9KTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBsb3RCYW5kcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgYmFuZCA9IHBsb3RCYW5kc1tpXTtcbiAgICAgICAgICAgIGNvbnN0IGJhbmRTdHlsZSA9IHtcbiAgICAgICAgICAgICAgICBmaWxsOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBiYW5kLmNvbG9yLFxuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiBiYW5kLm9wYWNpdHlcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHN0cm9rZToge1xuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiBiYW5kLm9wYWNpdHlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBjb25zdCBzbG90ID0gdGhpcy5nZXRTbG90KGJhbmQuZnJvbSwgYmFuZC50bywgdHJ1ZSk7XG4gICAgICAgICAgICBjb25zdCByaW5nID0gbmV3IFJpbmcoY2VudGVyLCBjZW50ZXIueSAtIHNsb3QueTIsIGNlbnRlci55IC0gc2xvdC55MSwgMCwgMzYwKTtcblxuICAgICAgICAgICAgbGV0IHNoYXBlO1xuICAgICAgICAgICAgaWYgKHR5cGUgPT09IEFSQykge1xuICAgICAgICAgICAgICAgIHNoYXBlID0gU2hhcGVCdWlsZGVyLmN1cnJlbnQuY3JlYXRlUmluZyhyaW5nLCBiYW5kU3R5bGUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzaGFwZSA9IGRyYXcuUGF0aC5mcm9tUG9pbnRzKHRoaXMucGxvdEJhbmRQb2ludHMocmluZywgbWFqb3JBbmdsZXMpLCBiYW5kU3R5bGUpLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGdyb3VwLmFwcGVuZChzaGFwZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmFwcGVuZFZpc3VhbChncm91cCk7XG4gICAgfSxcblxuICAgIHBsb3RCYW5kUG9pbnRzOiBmdW5jdGlvbihyaW5nLCBhbmdsZXMpIHtcbiAgICAgICAgY29uc3QgaW5uZXJQb2ludHMgPSBbXTtcbiAgICAgICAgY29uc3Qgb3V0ZXJQb2ludHMgPSBbXTtcbiAgICAgICAgY29uc3QgY2VudGVyID0gWyByaW5nLmNlbnRlci54LCByaW5nLmNlbnRlci55IF07XG4gICAgICAgIGNvbnN0IGlubmVyQ2lyY2xlID0gbmV3IGdlb20uQ2lyY2xlKGNlbnRlciwgcmluZy5pbm5lclJhZGl1cyk7XG4gICAgICAgIGNvbnN0IG91dGVyQ2lyY2xlID0gbmV3IGdlb20uQ2lyY2xlKGNlbnRlciwgcmluZy5yYWRpdXMpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYW5nbGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpbm5lclBvaW50cy5wdXNoKGlubmVyQ2lyY2xlLnBvaW50QXQoYW5nbGVzW2ldICsgMTgwKSk7XG4gICAgICAgICAgICBvdXRlclBvaW50cy5wdXNoKG91dGVyQ2lyY2xlLnBvaW50QXQoYW5nbGVzW2ldICsgMTgwKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpbm5lclBvaW50cy5yZXZlcnNlKCk7XG4gICAgICAgIGlubmVyUG9pbnRzLnB1c2goaW5uZXJQb2ludHNbMF0pO1xuICAgICAgICBvdXRlclBvaW50cy5wdXNoKG91dGVyUG9pbnRzWzBdKTtcblxuICAgICAgICByZXR1cm4gb3V0ZXJQb2ludHMuY29uY2F0KGlubmVyUG9pbnRzKTtcbiAgICB9LFxuXG4gICAgY3JlYXRlR3JpZExpbmVzOiBmdW5jdGlvbihhbHRBeGlzKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IG1ham9yVGlja3MgPSB0aGlzLnJhZGFyTWFqb3JHcmlkTGluZVBvc2l0aW9ucygpO1xuICAgICAgICBjb25zdCBtYWpvckFuZ2xlcyA9IGFsdEF4aXMubWFqb3JBbmdsZXMoKTtcbiAgICAgICAgY29uc3QgY2VudGVyID0gYWx0QXhpcy5ib3guY2VudGVyKCk7XG4gICAgICAgIGxldCBncmlkTGluZXMgPSBbXTtcblxuICAgICAgICBpZiAob3B0aW9ucy5tYWpvckdyaWRMaW5lcy52aXNpYmxlKSB7XG4gICAgICAgICAgICBncmlkTGluZXMgPSB0aGlzLnJlbmRlckdyaWRMaW5lcyhcbiAgICAgICAgICAgICAgICBjZW50ZXIsIG1ham9yVGlja3MsIG1ham9yQW5nbGVzLCBvcHRpb25zLm1ham9yR3JpZExpbmVzXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMubWlub3JHcmlkTGluZXMudmlzaWJsZSkge1xuICAgICAgICAgICAgY29uc3QgbWlub3JUaWNrcyA9IHRoaXMucmFkYXJNaW5vckdyaWRMaW5lUG9zaXRpb25zKCk7XG4gICAgICAgICAgICBhcHBlbmQoZ3JpZExpbmVzLCB0aGlzLnJlbmRlckdyaWRMaW5lcyhcbiAgICAgICAgICAgICAgICBjZW50ZXIsIG1pbm9yVGlja3MsIG1ham9yQW5nbGVzLCBvcHRpb25zLm1pbm9yR3JpZExpbmVzXG4gICAgICAgICAgICApKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBncmlkTGluZXM7XG4gICAgfSxcblxuICAgIHJlbmRlckdyaWRMaW5lczogZnVuY3Rpb24oY2VudGVyLCB0aWNrcywgYW5nbGVzLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHN0eWxlID0ge1xuICAgICAgICAgICAgc3Ryb2tlOiB7XG4gICAgICAgICAgICAgICAgd2lkdGg6IG9wdGlvbnMud2lkdGgsXG4gICAgICAgICAgICAgICAgY29sb3I6IG9wdGlvbnMuY29sb3IsXG4gICAgICAgICAgICAgICAgZGFzaFR5cGU6IG9wdGlvbnMuZGFzaFR5cGVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgeyBza2lwID0gMCwgc3RlcCA9IDAgfSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuZ3JpZExpbmVzVmlzdWFsKCk7XG5cbiAgICAgICAgZm9yIChsZXQgdGlja0l4ID0gc2tpcDsgdGlja0l4IDwgdGlja3MubGVuZ3RoOyB0aWNrSXggKz0gc3RlcCkge1xuICAgICAgICAgICAgY29uc3QgdGlja1JhZGl1cyA9IGNlbnRlci55IC0gdGlja3NbdGlja0l4XTtcbiAgICAgICAgICAgIGlmICh0aWNrUmFkaXVzID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNpcmNsZSA9IG5ldyBnZW9tLkNpcmNsZShbIGNlbnRlci54LCBjZW50ZXIueSBdLCB0aWNrUmFkaXVzKTtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy50eXBlID09PSBBUkMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZChuZXcgZHJhdy5DaXJjbGUoY2lyY2xlLCBzdHlsZSkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmUgPSBuZXcgZHJhdy5QYXRoKHN0eWxlKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgYW5nbGVJeCA9IDA7IGFuZ2xlSXggPCBhbmdsZXMubGVuZ3RoOyBhbmdsZUl4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmUubGluZVRvKGNpcmNsZS5wb2ludEF0KGFuZ2xlc1thbmdsZUl4XSArIDE4MCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgbGluZS5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuYXBwZW5kKGxpbmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb250YWluZXIuY2hpbGRyZW47XG4gICAgfSxcblxuICAgIGdldFZhbHVlOiBmdW5jdGlvbihwb2ludCkge1xuICAgICAgICBjb25zdCBsaW5lQm94ID0gdGhpcy5saW5lQm94KCk7XG4gICAgICAgIGNvbnN0IGFsdEF4aXMgPSB0aGlzLnBsb3RBcmVhLnBvbGFyQXhpcztcbiAgICAgICAgY29uc3QgbWFqb3JBbmdsZXMgPSBhbHRBeGlzLm1ham9yQW5nbGVzKCk7XG4gICAgICAgIGNvbnN0IGNlbnRlciA9IGFsdEF4aXMuYm94LmNlbnRlcigpO1xuICAgICAgICBjb25zdCByYWRpdXMgPSBwb2ludC5kaXN0YW5jZVRvKGNlbnRlcik7XG4gICAgICAgIGxldCBkaXN0YW5jZSA9IHJhZGl1cztcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLm1ham9yR3JpZExpbmVzLnR5cGUgIT09IEFSQyAmJiBtYWpvckFuZ2xlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBjb25zdCBkeCA9IHBvaW50LnggLSBjZW50ZXIueDtcbiAgICAgICAgICAgIGNvbnN0IGR5ID0gcG9pbnQueSAtIGNlbnRlci55O1xuICAgICAgICAgICAgY29uc3QgdGhldGEgPSAoZGVnKE1hdGguYXRhbjIoZHksIGR4KSkgKyA1NDApICUgMzYwO1xuXG4gICAgICAgICAgICBtYWpvckFuZ2xlcy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYW5ndWxhckRpc3RhbmNlKGEsIHRoZXRhKSAtIGFuZ3VsYXJEaXN0YW5jZShiLCB0aGV0YSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gU29sdmUgdHJpYW5nbGUgKGNlbnRlciwgcG9pbnQsIGF4aXMgWCkgdXNpbmcgb25lIHNpZGUgKHJhZGl1cykgYW5kIHR3byBhbmdsZXMuXG4gICAgICAgICAgICAvLyBBbmdsZXMgYXJlIGRlcml2ZWQgZnJvbSB0cmlhbmdsZSAoY2VudGVyLCBwb2ludCwgZ3JpZGxpbmUgWClcbiAgICAgICAgICAgIGNvbnN0IG1pZEFuZ2xlID0gYW5ndWxhckRpc3RhbmNlKG1ham9yQW5nbGVzWzBdLCBtYWpvckFuZ2xlc1sxXSkgLyAyO1xuICAgICAgICAgICAgY29uc3QgYWxwaGEgPSBhbmd1bGFyRGlzdGFuY2UodGhldGEsIG1ham9yQW5nbGVzWzBdKTtcbiAgICAgICAgICAgIGNvbnN0IGdhbW1hID0gOTAgLSBtaWRBbmdsZTtcbiAgICAgICAgICAgIGNvbnN0IGJldGEgPSAxODAgLSBhbHBoYSAtIGdhbW1hO1xuXG4gICAgICAgICAgICBkaXN0YW5jZSA9IHJhZGl1cyAqIChNYXRoLnNpbihyYWQoYmV0YSkpIC8gTWF0aC5zaW4ocmFkKGdhbW1hKSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuYXhpc1R5cGUoKS5wcm90b3R5cGUuZ2V0VmFsdWUuY2FsbChcbiAgICAgICAgICAgIHRoaXMsIG5ldyBQb2ludChsaW5lQm94LngxLCBsaW5lQm94LnkyIC0gZGlzdGFuY2UpXG4gICAgICAgICk7XG4gICAgfVxufTtcblxuZnVuY3Rpb24gYW5ndWxhckRpc3RhbmNlKGEsIGIpIHtcbiAgICByZXR1cm4gMTgwIC0gTWF0aC5hYnMoTWF0aC5hYnMoYSAtIGIpIC0gMTgwKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgUmFkYXJOdW1lcmljQXhpc01peGluOyIsImltcG9ydCBOdW1lcmljQXhpcyBmcm9tICcuL251bWVyaWMtYXhpcyc7XG5pbXBvcnQgUmFkYXJOdW1lcmljQXhpc01peGluIGZyb20gJy4vbWl4aW5zL3JhZGFyLW51bWVyaWMtYXhpcy1taXhpbic7XG5cbmltcG9ydCB7IGRlZXBFeHRlbmQgfSBmcm9tICcuLi9jb21tb24nO1xuXG5jbGFzcyBSYWRhck51bWVyaWNBeGlzIGV4dGVuZHMgTnVtZXJpY0F4aXMge1xuICAgIHJhZGFyTWFqb3JHcmlkTGluZVBvc2l0aW9ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VGlja1Bvc2l0aW9ucyh0aGlzLm9wdGlvbnMubWFqb3JVbml0KTtcbiAgICB9XG5cbiAgICByYWRhck1pbm9yR3JpZExpbmVQb3NpdGlvbnMoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGxldCBtaW5vclNraXBTdGVwID0gMDtcblxuICAgICAgICBpZiAob3B0aW9ucy5tYWpvckdyaWRMaW5lcy52aXNpYmxlKSB7XG4gICAgICAgICAgICBtaW5vclNraXBTdGVwID0gb3B0aW9ucy5tYWpvclVuaXQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VGlja1Bvc2l0aW9ucyhvcHRpb25zLm1pbm9yVW5pdCwgbWlub3JTa2lwU3RlcCk7XG4gICAgfVxuXG4gICAgYXhpc1R5cGUoKSB7XG4gICAgICAgIHJldHVybiBOdW1lcmljQXhpcztcbiAgICB9XG59XG5cbmRlZXBFeHRlbmQoUmFkYXJOdW1lcmljQXhpcy5wcm90b3R5cGUsIFJhZGFyTnVtZXJpY0F4aXNNaXhpbik7XG5cbmV4cG9ydCBkZWZhdWx0IFJhZGFyTnVtZXJpY0F4aXM7IiwiaW1wb3J0IExvZ2FyaXRobWljQXhpcyBmcm9tICcuL2xvZ2FyaXRobWljLWF4aXMnO1xuaW1wb3J0IFJhZGFyTnVtZXJpY0F4aXNNaXhpbiBmcm9tICcuL21peGlucy9yYWRhci1udW1lcmljLWF4aXMtbWl4aW4nO1xuXG5pbXBvcnQgeyBkZWVwRXh0ZW5kIH0gZnJvbSAnLi4vY29tbW9uJztcblxuY2xhc3MgUmFkYXJMb2dhcml0aG1pY0F4aXMgZXh0ZW5kcyBMb2dhcml0aG1pY0F4aXMge1xuICAgIHJhZGFyTWFqb3JHcmlkTGluZVBvc2l0aW9ucygpIHtcbiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gW107XG5cbiAgICAgICAgdGhpcy50cmF2ZXJzZU1ham9yVGlja3NQb3NpdGlvbnMoZnVuY3Rpb24ocG9zaXRpb24pIHtcbiAgICAgICAgICAgIHBvc2l0aW9ucy5wdXNoKHBvc2l0aW9uKTtcbiAgICAgICAgfSwgdGhpcy5vcHRpb25zLm1ham9yR3JpZExpbmVzKTtcblxuICAgICAgICByZXR1cm4gcG9zaXRpb25zO1xuICAgIH1cblxuICAgIHJhZGFyTWlub3JHcmlkTGluZVBvc2l0aW9ucygpIHtcbiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gW107XG5cbiAgICAgICAgdGhpcy50cmF2ZXJzZU1pbm9yVGlja3NQb3NpdGlvbnMoZnVuY3Rpb24ocG9zaXRpb24pIHtcbiAgICAgICAgICAgIHBvc2l0aW9ucy5wdXNoKHBvc2l0aW9uKTtcbiAgICAgICAgfSwgdGhpcy5vcHRpb25zLm1pbm9yR3JpZExpbmVzKTtcblxuICAgICAgICByZXR1cm4gcG9zaXRpb25zO1xuICAgIH1cblxuICAgIGF4aXNUeXBlKCkge1xuICAgICAgICByZXR1cm4gTG9nYXJpdGhtaWNBeGlzO1xuICAgIH1cbn1cblxuZGVlcEV4dGVuZChSYWRhckxvZ2FyaXRobWljQXhpcy5wcm90b3R5cGUsIFJhZGFyTnVtZXJpY0F4aXNNaXhpbik7XG5cbmV4cG9ydCBkZWZhdWx0IFJhZGFyTG9nYXJpdGhtaWNBeGlzOyIsImltcG9ydCB7IGdlb21ldHJ5IGFzIGdlb20gfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tZHJhd2luZyc7XG5cbmltcG9ydCB7IFgsIFkgfSBmcm9tICcuLi9jb21tb24vY29uc3RhbnRzJztcbmltcG9ydCB7IENsYXNzLCBsYXN0LCByb3VuZCB9IGZyb20gJy4uL2NvbW1vbic7XG5cbmNvbnN0IFdFSUdIVCA9IDAuMzMzO1xuY29uc3QgRVhUUkVNVU1fQUxMT1dFRF9ERVZJQVRJT04gPSAwLjAxO1xuXG5jbGFzcyBDdXJ2ZVByb2Nlc3NvciBleHRlbmRzIENsYXNzIHtcblxuICAgIGNvbnN0cnVjdG9yKGNsb3NlZCkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMuY2xvc2VkID0gY2xvc2VkO1xuICAgIH1cblxuICAgIHByb2Nlc3MoZGF0YVBvaW50cykge1xuICAgICAgICBjb25zdCBwb2ludHMgPSBkYXRhUG9pbnRzLnNsaWNlKDApO1xuICAgICAgICBjb25zdCBzZWdtZW50cyA9IFtdO1xuICAgICAgICBsZXQgY2xvc2VkID0gdGhpcy5jbG9zZWQ7XG4gICAgICAgIGxldCBsZW5ndGggPSBwb2ludHMubGVuZ3RoO1xuXG4gICAgICAgIGlmIChsZW5ndGggPiAyKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUR1cGxpY2F0ZXMoMCwgcG9pbnRzKTtcbiAgICAgICAgICAgIGxlbmd0aCA9IHBvaW50cy5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGVuZ3RoIDwgMiB8fCAobGVuZ3RoID09PSAyICYmIHBvaW50c1swXS5lcXVhbHMocG9pbnRzWzFdKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBzZWdtZW50cztcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBwMCA9IHBvaW50c1swXTtcbiAgICAgICAgbGV0IHAxID0gcG9pbnRzWzFdO1xuICAgICAgICBsZXQgcDIgPSBwb2ludHNbMl07XG5cbiAgICAgICAgc2VnbWVudHMucHVzaChuZXcgZ2VvbS5TZWdtZW50KHAwKSk7XG5cbiAgICAgICAgd2hpbGUgKHAwLmVxdWFscyhwb2ludHNbbGVuZ3RoIC0gMV0pKSB7XG4gICAgICAgICAgICBjbG9zZWQgPSB0cnVlO1xuICAgICAgICAgICAgcG9pbnRzLnBvcCgpO1xuICAgICAgICAgICAgbGVuZ3RoLS07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICBjb25zdCB0YW5nZW50ID0gdGhpcy50YW5nZW50KHAwLHAxLCBYLCBZKTtcblxuICAgICAgICAgICAgbGFzdChzZWdtZW50cykuY29udHJvbE91dChcbiAgICAgICAgICAgICAgICB0aGlzLmZpcnN0Q29udHJvbFBvaW50KHRhbmdlbnQsIHAwLCBwMSwgWCwgWSlcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHNlZ21lbnRzLnB1c2gobmV3IGdlb20uU2VnbWVudChcbiAgICAgICAgICAgICAgICBwMSxcbiAgICAgICAgICAgICAgICB0aGlzLnNlY29uZENvbnRyb2xQb2ludCh0YW5nZW50LCBwMCwgcDEsIFgsIFkpXG4gICAgICAgICAgICApKTtcblxuICAgICAgICAgICAgcmV0dXJuIHNlZ21lbnRzO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGluaXRpYWxDb250cm9sUG9pbnQsIGxhc3RDb250cm9sUG9pbnQ7XG5cbiAgICAgICAgaWYgKGNsb3NlZCkge1xuICAgICAgICAgICAgcDAgPSBwb2ludHNbbGVuZ3RoIC0gMV07IHAxID0gcG9pbnRzWzBdOyBwMiA9IHBvaW50c1sxXTtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRyb2xQb2ludHMgPSB0aGlzLmNvbnRyb2xQb2ludHMocDAsIHAxLCBwMik7XG4gICAgICAgICAgICBpbml0aWFsQ29udHJvbFBvaW50ID0gY29udHJvbFBvaW50c1sxXTtcbiAgICAgICAgICAgIGxhc3RDb250cm9sUG9pbnQgPSBjb250cm9sUG9pbnRzWzBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgdGFuZ2VudCA9IHRoaXMudGFuZ2VudChwMCwgcDEsIFgsWSk7XG4gICAgICAgICAgICBpbml0aWFsQ29udHJvbFBvaW50ID0gdGhpcy5maXJzdENvbnRyb2xQb2ludCh0YW5nZW50LCBwMCwgcDEsIFgsIFkpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGNwMCA9IGluaXRpYWxDb250cm9sUG9pbnQ7XG4gICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8PSBsZW5ndGggLSAzOyBpZHgrKykge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVEdXBsaWNhdGVzKGlkeCwgcG9pbnRzKTtcbiAgICAgICAgICAgIGxlbmd0aCA9IHBvaW50cy5sZW5ndGg7XG4gICAgICAgICAgICBpZiAoaWR4ICsgMyA8PSBsZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBwMCA9IHBvaW50c1tpZHhdOyBwMSA9IHBvaW50c1tpZHggKyAxXTsgcDIgPSBwb2ludHNbaWR4ICsgMl07XG4gICAgICAgICAgICAgICAgY29uc3QgY29udHJvbFBvaW50cyA9IHRoaXMuY29udHJvbFBvaW50cyhwMCxwMSxwMik7XG5cbiAgICAgICAgICAgICAgICBsYXN0KHNlZ21lbnRzKS5jb250cm9sT3V0KGNwMCk7XG4gICAgICAgICAgICAgICAgY3AwID0gY29udHJvbFBvaW50c1sxXTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGNwMSA9IGNvbnRyb2xQb2ludHNbMF07XG4gICAgICAgICAgICAgICAgc2VnbWVudHMucHVzaChuZXcgZ2VvbS5TZWdtZW50KHAxLCBjcDEpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjbG9zZWQpIHtcbiAgICAgICAgICAgIHAwID0gcG9pbnRzW2xlbmd0aCAtIDJdOyBwMSA9IHBvaW50c1tsZW5ndGggLSAxXTsgcDIgPSBwb2ludHNbMF07XG4gICAgICAgICAgICBjb25zdCBjb250cm9sUG9pbnRzID0gdGhpcy5jb250cm9sUG9pbnRzKHAwLCBwMSwgcDIpO1xuXG4gICAgICAgICAgICBsYXN0KHNlZ21lbnRzKS5jb250cm9sT3V0KGNwMCk7XG4gICAgICAgICAgICBzZWdtZW50cy5wdXNoKG5ldyBnZW9tLlNlZ21lbnQoXG4gICAgICAgICAgICAgICAgcDEsXG4gICAgICAgICAgICAgICAgY29udHJvbFBvaW50c1swXVxuICAgICAgICAgICAgKSk7XG5cbiAgICAgICAgICAgIGxhc3Qoc2VnbWVudHMpLmNvbnRyb2xPdXQoY29udHJvbFBvaW50c1sxXSk7XG4gICAgICAgICAgICBzZWdtZW50cy5wdXNoKG5ldyBnZW9tLlNlZ21lbnQoXG4gICAgICAgICAgICAgICAgcDIsXG4gICAgICAgICAgICAgICAgbGFzdENvbnRyb2xQb2ludFxuICAgICAgICAgICAgKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB0YW5nZW50ID0gdGhpcy50YW5nZW50KHAxLCBwMiwgWCwgWSk7XG5cbiAgICAgICAgICAgIGxhc3Qoc2VnbWVudHMpLmNvbnRyb2xPdXQoY3AwKTtcbiAgICAgICAgICAgIHNlZ21lbnRzLnB1c2gobmV3IGdlb20uU2VnbWVudChcbiAgICAgICAgICAgICAgICBwMixcbiAgICAgICAgICAgICAgICB0aGlzLnNlY29uZENvbnRyb2xQb2ludCh0YW5nZW50LCBwMSwgcDIsIFgsIFkpXG4gICAgICAgICAgICApKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzZWdtZW50cztcbiAgICB9XG5cbiAgICByZW1vdmVEdXBsaWNhdGVzKGlkeCwgcG9pbnRzKSB7XG4gICAgICAgIHdoaWxlIChwb2ludHNbaWR4ICsgMV0gJiYgKHBvaW50c1tpZHhdLmVxdWFscyhwb2ludHNbaWR4ICsgMV0pIHx8IHBvaW50c1tpZHggKyAxXS5lcXVhbHMocG9pbnRzW2lkeCArIDJdKSkpIHtcbiAgICAgICAgICAgIHBvaW50cy5zcGxpY2UoaWR4ICsgMSwgMSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpbnZlcnRBeGlzKHAwLCBwMSwgcDIpIHtcbiAgICAgICAgbGV0IGludmVydEF4aXMgPSBmYWxzZTtcblxuICAgICAgICBpZiAocDAueCA9PT0gcDEueCkge1xuICAgICAgICAgICAgaW52ZXJ0QXhpcyA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAocDEueCA9PT0gcDIueCkge1xuICAgICAgICAgICAgaWYgKChwMS55IDwgcDIueSAmJiBwMC55IDw9IHAxLnkpIHx8IChwMi55IDwgcDEueSAmJiBwMS55IDw9IHAwLnkpKSB7XG4gICAgICAgICAgICAgICAgaW52ZXJ0QXhpcyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBmbiA9IHRoaXMubGluZUZ1bmN0aW9uKHAwLHAxKTtcbiAgICAgICAgICAgIGNvbnN0IHkyID0gdGhpcy5jYWxjdWxhdGVGdW5jdGlvbihmbiwgcDIueCk7XG4gICAgICAgICAgICBpZiAoIShwMC55IDw9IHAxLnkgJiYgcDIueSA8PSB5MikgJiZcbiAgICAgICAgICAgICAgICAhKHAxLnkgPD0gcDAueSAmJiBwMi55ID49IHkyKSkge1xuICAgICAgICAgICAgICAgIGludmVydEF4aXMgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGludmVydEF4aXM7XG4gICAgfVxuXG4gICAgaXNMaW5lKHAwLCBwMSwgcDIpIHtcbiAgICAgICAgY29uc3QgZm4gPSB0aGlzLmxpbmVGdW5jdGlvbihwMCwgcDEpO1xuICAgICAgICBjb25zdCB5MiA9IHRoaXMuY2FsY3VsYXRlRnVuY3Rpb24oZm4sIHAyLngpO1xuXG4gICAgICAgIHJldHVybiAocDAueCA9PT0gcDEueCAmJiBwMS54ID09PSBwMi54KSB8fCByb3VuZCh5MiwgMSkgPT09IHJvdW5kKHAyLnksIDEpO1xuICAgIH1cblxuICAgIGxpbmVGdW5jdGlvbihwMSwgcDIpIHtcbiAgICAgICAgY29uc3QgYSA9IChwMi55IC0gcDEueSkgLyAocDIueCAtIHAxLngpO1xuICAgICAgICBjb25zdCBiID0gcDEueSAtIGEgKiBwMS54O1xuXG4gICAgICAgIHJldHVybiBbIGIsIGEgXTtcbiAgICB9XG5cbiAgICBjb250cm9sUG9pbnRzKHAwLCBwMSwgcDIpIHtcbiAgICAgICAgbGV0IHhGaWVsZCA9IFg7XG4gICAgICAgIGxldCB5RmllbGQgPSBZO1xuICAgICAgICBsZXQgcmVzdHJpY3QgPSBmYWxzZTtcbiAgICAgICAgbGV0IHN3aXRjaE9yaWVudGF0aW9uID0gZmFsc2U7XG4gICAgICAgIGxldCB0YW5nZW50O1xuXG4gICAgICAgIGlmICh0aGlzLmlzTGluZShwMCwgcDEsIHAyKSkge1xuICAgICAgICAgICAgdGFuZ2VudCA9IHRoaXMudGFuZ2VudChwMCwgcDEsIFgsIFkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgbW9ub3RvbmljID0ge1xuICAgICAgICAgICAgICAgIHg6IHRoaXMuaXNNb25vdG9uaWNCeUZpZWxkKHAwLCBwMSwgcDIsIFgpLFxuICAgICAgICAgICAgICAgIHk6IHRoaXMuaXNNb25vdG9uaWNCeUZpZWxkKHAwLCBwMSwgcDIsIFkpXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpZiAobW9ub3RvbmljLnggJiYgbW9ub3RvbmljLnkpIHtcbiAgICAgICAgICAgICAgICB0YW5nZW50ID0gdGhpcy50YW5nZW50KHAwLCBwMiwgWCwgWSk7XG4gICAgICAgICAgICAgICAgcmVzdHJpY3QgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pbnZlcnRBeGlzKHAwLCBwMSwgcDIpKSB7XG4gICAgICAgICAgICAgICAgICAgIHhGaWVsZCA9IFk7XG4gICAgICAgICAgICAgICAgICAgIHlGaWVsZCA9IFg7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKG1vbm90b25pY1t4RmllbGRdKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhbmdlbnQgPSAwO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzaWduO1xuICAgICAgICAgICAgICAgICAgICBpZiAoKHAyW3lGaWVsZF0gPCBwMFt5RmllbGRdICYmIHAwW3lGaWVsZF0gPD0gcDFbeUZpZWxkXSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIChwMFt5RmllbGRdIDwgcDJbeUZpZWxkXSAmJiBwMVt5RmllbGRdIDw9IHAwW3lGaWVsZF0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaWduID0gbnVtYmVyU2lnbigocDJbeUZpZWxkXSAtIHAwW3lGaWVsZF0pICogKHAxW3hGaWVsZF0gLSBwMFt4RmllbGRdKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaWduID0gLW51bWJlclNpZ24oKHAyW3hGaWVsZF0gLSBwMFt4RmllbGRdKSAqIChwMVt5RmllbGRdIC0gcDBbeUZpZWxkXSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdGFuZ2VudCA9IEVYVFJFTVVNX0FMTE9XRURfREVWSUFUSU9OICogc2lnbjtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoT3JpZW50YXRpb24gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHNlY29uZENvbnRyb2xQb2ludCA9IHRoaXMuc2Vjb25kQ29udHJvbFBvaW50KHRhbmdlbnQsIHAwLCBwMSwgeEZpZWxkLCB5RmllbGQpO1xuXG4gICAgICAgIGlmIChzd2l0Y2hPcmllbnRhdGlvbikge1xuICAgICAgICAgICAgY29uc3Qgb2xkWEZpZWxkID0geEZpZWxkO1xuICAgICAgICAgICAgeEZpZWxkID0geUZpZWxkO1xuICAgICAgICAgICAgeUZpZWxkID0gb2xkWEZpZWxkO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZmlyc3RDb250cm9sUG9pbnQgPSB0aGlzLmZpcnN0Q29udHJvbFBvaW50KHRhbmdlbnQsIHAxLCBwMiwgeEZpZWxkLCB5RmllbGQpO1xuXG4gICAgICAgIGlmIChyZXN0cmljdCkge1xuICAgICAgICAgICAgdGhpcy5yZXN0cmljdENvbnRyb2xQb2ludChwMCwgcDEsIHNlY29uZENvbnRyb2xQb2ludCwgdGFuZ2VudCk7XG4gICAgICAgICAgICB0aGlzLnJlc3RyaWN0Q29udHJvbFBvaW50KHAxLCBwMiwgZmlyc3RDb250cm9sUG9pbnQsIHRhbmdlbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFsgc2Vjb25kQ29udHJvbFBvaW50LCBmaXJzdENvbnRyb2xQb2ludCBdO1xuICAgIH1cblxuICAgIHJlc3RyaWN0Q29udHJvbFBvaW50KHAxLCBwMiwgY3AsIHRhbmdlbnQpIHtcbiAgICAgICAgaWYgKHAxLnkgPCBwMi55KSB7XG4gICAgICAgICAgICBpZiAocDIueSA8IGNwLnkpIHtcbiAgICAgICAgICAgICAgICBjcC54ID0gcDEueCArIChwMi55IC0gcDEueSkgLyB0YW5nZW50O1xuICAgICAgICAgICAgICAgIGNwLnkgPSBwMi55O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjcC55IDwgcDEueSkge1xuICAgICAgICAgICAgICAgIGNwLnggPSBwMi54IC0gKHAyLnkgLSBwMS55KSAvIHRhbmdlbnQ7XG4gICAgICAgICAgICAgICAgY3AueSA9IHAxLnk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoY3AueSA8IHAyLnkpIHtcbiAgICAgICAgICAgICAgICBjcC54ID0gcDEueCAtIChwMS55IC0gcDIueSkgLyB0YW5nZW50O1xuICAgICAgICAgICAgICAgIGNwLnkgPSBwMi55O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwMS55IDwgY3AueSkge1xuICAgICAgICAgICAgICAgIGNwLnggPSBwMi54ICsgKHAxLnkgLSBwMi55KSAvIHRhbmdlbnQ7XG4gICAgICAgICAgICAgICAgY3AueSA9IHAxLnk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0YW5nZW50KHAwLCBwMSwgeEZpZWxkLCB5RmllbGQpIHtcbiAgICAgICAgY29uc3QgeCA9IHAxW3hGaWVsZF0gLSBwMFt4RmllbGRdO1xuICAgICAgICBjb25zdCB5ID0gcDFbeUZpZWxkXSAtIHAwW3lGaWVsZF07XG4gICAgICAgIGxldCB0YW5nZW50O1xuXG4gICAgICAgIGlmICh4ID09PSAwKSB7XG4gICAgICAgICAgICB0YW5nZW50ID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRhbmdlbnQgPSB5IC8geDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0YW5nZW50O1xuICAgIH1cblxuICAgIGlzTW9ub3RvbmljQnlGaWVsZChwMCwgcDEsIHAyLCBmaWVsZCkge1xuICAgICAgICByZXR1cm4gKHAyW2ZpZWxkXSA+IHAxW2ZpZWxkXSAmJiBwMVtmaWVsZF0gPiBwMFtmaWVsZF0pIHx8XG4gICAgICAgICAgICAgICAgICAgIChwMltmaWVsZF0gPCBwMVtmaWVsZF0gJiYgcDFbZmllbGRdIDwgcDBbZmllbGRdKTtcbiAgICB9XG5cbiAgICBmaXJzdENvbnRyb2xQb2ludCh0YW5nZW50LCBwMCwgcDMsIHhGaWVsZCwgeUZpZWxkKSB7XG4gICAgICAgIGNvbnN0IHQxID0gcDBbeEZpZWxkXTtcbiAgICAgICAgY29uc3QgdDIgPSBwM1t4RmllbGRdO1xuICAgICAgICBjb25zdCBkaXN0YW5jZSA9ICh0MiAtIHQxKSAqIFdFSUdIVDtcblxuICAgICAgICByZXR1cm4gdGhpcy5wb2ludCh0MSArIGRpc3RhbmNlLCBwMFt5RmllbGRdICsgZGlzdGFuY2UgKiB0YW5nZW50LCB4RmllbGQsIHlGaWVsZCk7XG4gICAgfVxuXG4gICAgc2Vjb25kQ29udHJvbFBvaW50KHRhbmdlbnQsIHAwLCBwMywgeEZpZWxkLCB5RmllbGQpIHtcbiAgICAgICAgY29uc3QgdDEgPSBwMFt4RmllbGRdO1xuICAgICAgICBjb25zdCB0MiA9IHAzW3hGaWVsZF07XG4gICAgICAgIGNvbnN0IGRpc3RhbmNlID0gKHQyIC0gdDEpICogV0VJR0hUO1xuXG4gICAgICAgIHJldHVybiB0aGlzLnBvaW50KHQyIC0gZGlzdGFuY2UsIHAzW3lGaWVsZF0gLSBkaXN0YW5jZSAqIHRhbmdlbnQsIHhGaWVsZCwgeUZpZWxkKTtcbiAgICB9XG5cbiAgICBwb2ludCh4VmFsdWUsIHlWYWx1ZSwgeEZpZWxkLCB5RmllbGQpIHtcbiAgICAgICAgY29uc3QgY29udHJvbFBvaW50ID0gbmV3IGdlb20uUG9pbnQoKTtcbiAgICAgICAgY29udHJvbFBvaW50W3hGaWVsZF0gPSB4VmFsdWU7XG4gICAgICAgIGNvbnRyb2xQb2ludFt5RmllbGRdID0geVZhbHVlO1xuXG4gICAgICAgIHJldHVybiBjb250cm9sUG9pbnQ7XG4gICAgfVxuXG4gICAgY2FsY3VsYXRlRnVuY3Rpb24oZm4sIHgpIHtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gZm4ubGVuZ3RoO1xuICAgICAgICBsZXQgcmVzdWx0ID0gMDtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gTWF0aC5wb3coeCxpKSAqIGZuW2ldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBudW1iZXJTaWduKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlIDw9IDAgPyAtMSA6IDE7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEN1cnZlUHJvY2Vzc29yOyIsImltcG9ydCB7IENsYXNzIH0gZnJvbSAnLi4vLi4vY29tbW9uJztcblxuY2xhc3MgQ2hhcnRBeGlzIGV4dGVuZHMgQ2xhc3Mge1xuICAgIGNvbnN0cnVjdG9yKGF4aXMpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLl9heGlzID0gYXhpcztcbiAgICAgICAgdGhpcy5vcHRpb25zID0gYXhpcy5vcHRpb25zO1xuICAgIH1cblxuICAgIHZhbHVlKHBvaW50KSB7XG4gICAgICAgIGNvbnN0IGF4aXMgPSB0aGlzLl9heGlzO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGF4aXMuZ2V0Q2F0ZWdvcnkgPyBheGlzLmdldENhdGVnb3J5KHBvaW50KSA6IGF4aXMuZ2V0VmFsdWUocG9pbnQpO1xuXG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICBzbG90KGZyb20sIHRvLCBsaW1pdCA9IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2F4aXMuc2xvdChmcm9tLCB0bywgbGltaXQpO1xuICAgIH1cblxuICAgIHJhbmdlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXhpcy5yYW5nZSgpO1xuICAgIH1cblxuICAgIHZhbHVlUmFuZ2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9heGlzLnZhbHVlUmFuZ2UoKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENoYXJ0QXhpczsiLCJpbXBvcnQgQ2hhcnRBeGlzIGZyb20gJy4vY2hhcnQtYXhpcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZpbmRBeGlzQnlOYW1lKG5hbWUsIGF4ZXMpIHtcbiAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBheGVzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgaWYgKGF4ZXNbaWR4XS5vcHRpb25zLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICAgIGF4ZXNbaWR4XS5wcmVwYXJlVXNlck9wdGlvbnMoKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ2hhcnRBeGlzKGF4ZXNbaWR4XSk7XG4gICAgICAgIH1cbiAgICB9XG59IiwiaW1wb3J0IGZpbmRBeGlzQnlOYW1lIGZyb20gJy4vZmluZC1heGlzLWJ5LW5hbWUnO1xuXG5jbGFzcyBDaGFydFBhbmUge1xuICAgIGNvbnN0cnVjdG9yKHBhbmUpIHtcbiAgICAgICAgdGhpcy52aXN1YWwgPSBwYW5lLnZpc3VhbDtcbiAgICAgICAgdGhpcy5jaGFydHNWaXN1YWwgPSBwYW5lLmNoYXJ0Q29udGFpbmVyLnZpc3VhbDtcbiAgICAgICAgdGhpcy5fcGFuZSA9IHBhbmU7XG4gICAgfVxuXG4gICAgZmluZEF4aXNCeU5hbWUobmFtZSkge1xuICAgICAgICByZXR1cm4gZmluZEF4aXNCeU5hbWUobmFtZSwgdGhpcy5fcGFuZS5heGVzKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENoYXJ0UGFuZTsiLCJpbXBvcnQgeyBDbGFzcyB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5cbmNsYXNzIENoYXJ0UGxvdEFyZWEgZXh0ZW5kcyBDbGFzcyB7XG4gICAgY29uc3RydWN0b3IocGxvdEFyZWEpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLl9wbG90QXJlYSA9IHBsb3RBcmVhO1xuICAgICAgICB0aGlzLnZpc3VhbCA9IHBsb3RBcmVhLnZpc3VhbDtcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kVmlzdWFsID0gcGxvdEFyZWEuX2JnVmlzdWFsO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2hhcnRQbG90QXJlYTsiLCJpbXBvcnQgeyBpc051bWJlciB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvdW50TnVtYmVycyh2YWx1ZXMpIHtcbiAgICBjb25zdCBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoO1xuICAgIGxldCBjb3VudCA9IDA7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IG51bSA9IHZhbHVlc1tpXTtcbiAgICAgICAgaWYgKGlzTnVtYmVyKG51bSkpIHtcbiAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY291bnQ7XG59IiwiaW1wb3J0IHsgTUlOX1ZBTFVFLCBNQVhfVkFMVUUgfSBmcm9tICcuLi8uLi9jb21tb24vY29uc3RhbnRzJztcbmltcG9ydCB7IGRlZmluZWQsIGlzTnVtYmVyIH0gZnJvbSAnLi4vLi4vY29tbW9uJztcblxuaW1wb3J0IGNvdW50TnVtYmVycyBmcm9tICcuLi91dGlscy9jb3VudC1udW1iZXJzJztcblxuY29uc3QgQWdncmVnYXRlcyA9IHtcbiAgICBtaW46IGZ1bmN0aW9uKHZhbHVlcykge1xuICAgICAgICBjb25zdCBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoO1xuICAgICAgICBsZXQgbWluID0gTUFYX1ZBTFVFO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdmFsdWVzW2ldO1xuICAgICAgICAgICAgaWYgKGlzTnVtYmVyKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIG1pbiA9IE1hdGgubWluKG1pbiwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1pbiA9PT0gTUFYX1ZBTFVFID8gdmFsdWVzWzBdIDogbWluO1xuICAgIH0sXG5cbiAgICBtYXg6IGZ1bmN0aW9uKHZhbHVlcykge1xuICAgICAgICBjb25zdCBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoO1xuICAgICAgICBsZXQgbWF4ID0gTUlOX1ZBTFVFO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdmFsdWVzW2ldO1xuICAgICAgICAgICAgaWYgKGlzTnVtYmVyKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIG1heCA9IE1hdGgubWF4KG1heCwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1heCA9PT0gTUlOX1ZBTFVFID8gdmFsdWVzWzBdIDogbWF4O1xuICAgIH0sXG5cbiAgICBzdW06IGZ1bmN0aW9uKHZhbHVlcykge1xuICAgICAgICBjb25zdCBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoO1xuICAgICAgICBsZXQgc3VtID0gMDtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHZhbHVlc1tpXTtcbiAgICAgICAgICAgIGlmIChpc051bWJlcih2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBzdW0gKz0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3VtO1xuICAgIH0sXG5cbiAgICBzdW1Pck51bGw6IGZ1bmN0aW9uKHZhbHVlcykge1xuICAgICAgICBsZXQgcmVzdWx0ID0gbnVsbDtcblxuICAgICAgICBpZiAoY291bnROdW1iZXJzKHZhbHVlcykpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IEFnZ3JlZ2F0ZXMuc3VtKHZhbHVlcyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG5cbiAgICBjb3VudDogZnVuY3Rpb24odmFsdWVzKSB7XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IHZhbHVlcy5sZW5ndGg7XG4gICAgICAgIGxldCBjb3VudCA9IDA7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB2YWx1ZXNbaV07XG4gICAgICAgICAgICBpZiAodmFsdWUgIT09IG51bGwgJiYgZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBjb3VudCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvdW50O1xuICAgIH0sXG5cbiAgICBhdmc6IGZ1bmN0aW9uKHZhbHVlcykge1xuICAgICAgICBjb25zdCBjb3VudCA9IGNvdW50TnVtYmVycyh2YWx1ZXMpO1xuICAgICAgICBsZXQgcmVzdWx0ID0gdmFsdWVzWzBdO1xuXG4gICAgICAgIGlmIChjb3VudCA+IDApIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IEFnZ3JlZ2F0ZXMuc3VtKHZhbHVlcykgLyBjb3VudDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIGZpcnN0OiBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aDtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHZhbHVlc1tpXTtcbiAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiBkZWZpbmVkKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2YWx1ZXNbMF07XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgQWdncmVnYXRlczsiLCJpbXBvcnQgeyBnZXR0ZXIgfSBmcm9tICcuLi8uLi9jb21tb24nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRGaWVsZChmaWVsZCwgcm93KSB7XG4gICAgaWYgKHJvdyA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gcm93O1xuICAgIH1cblxuICAgIGNvbnN0IGdldCA9IGdldHRlcihmaWVsZCwgdHJ1ZSk7XG4gICAgcmV0dXJuIGdldChyb3cpO1xufSIsImltcG9ydCBnZXRGaWVsZCBmcm9tICcuL3V0aWxzL2dldC1maWVsZCc7XG5pbXBvcnQgeyBWQUxVRSB9IGZyb20gJy4uL2NvbW1vbi9jb25zdGFudHMnO1xuaW1wb3J0IHsgQ2xhc3MsIGRlZmluZWQgfSBmcm9tICcuLi9jb21tb24nO1xuXG5jbGFzcyBTZXJpZXNCaW5kZXIgZXh0ZW5kcyBDbGFzcyB7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLl92YWx1ZUZpZWxkcyA9IHt9O1xuICAgICAgICB0aGlzLl9vdGhlckZpZWxkcyA9IHt9O1xuICAgICAgICB0aGlzLl9udWxsVmFsdWUgPSB7fTtcbiAgICAgICAgdGhpcy5fdW5kZWZpbmVkVmFsdWUgPSB7fTtcbiAgICB9XG5cbiAgICByZWdpc3RlcihzZXJpZXNUeXBlcywgdmFsdWVGaWVsZHMgPSBbIFZBTFVFIF0sIG90aGVyRmllbGRzID0ge30pIHtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcmllc1R5cGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCB0eXBlID0gc2VyaWVzVHlwZXNbaV07XG5cbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlRmllbGRzW3R5cGVdID0gdmFsdWVGaWVsZHM7XG4gICAgICAgICAgICB0aGlzLl9vdGhlckZpZWxkc1t0eXBlXSA9IG90aGVyRmllbGRzO1xuICAgICAgICAgICAgdGhpcy5fbnVsbFZhbHVlW3R5cGVdID0gdGhpcy5fbWFrZVZhbHVlKHZhbHVlRmllbGRzLCBudWxsKTtcbiAgICAgICAgICAgIHRoaXMuX3VuZGVmaW5lZFZhbHVlW3R5cGVdID0gdGhpcy5fbWFrZVZhbHVlKHZhbHVlRmllbGRzLCB1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2Fub25pY2FsRmllbGRzKHNlcmllcykge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZUZpZWxkcyhzZXJpZXMpLmNvbmNhdCh0aGlzLm90aGVyRmllbGRzKHNlcmllcykpO1xuICAgIH1cblxuICAgIHZhbHVlRmllbGRzKHNlcmllcykge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWVGaWVsZHNbc2VyaWVzLnR5cGVdIHx8IFsgVkFMVUUgXTtcbiAgICB9XG5cbiAgICBvdGhlckZpZWxkcyhzZXJpZXMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX290aGVyRmllbGRzW3Nlcmllcy50eXBlXSB8fCBbIFZBTFVFIF07XG4gICAgfVxuXG4gICAgYmluZFBvaW50KHNlcmllcywgcG9pbnRJeCwgaXRlbSkge1xuICAgICAgICBjb25zdCBkYXRhID0gc2VyaWVzLmRhdGE7XG4gICAgICAgIGNvbnN0IHBvaW50RGF0YSA9IGRlZmluZWQoaXRlbSkgPyBpdGVtIDogZGF0YVtwb2ludEl4XTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0geyB2YWx1ZUZpZWxkczogeyB2YWx1ZTogcG9pbnREYXRhIH0gfTtcbiAgICAgICAgY29uc3QgdmFsdWVGaWVsZHMgPSB0aGlzLnZhbHVlRmllbGRzKHNlcmllcyk7XG4gICAgICAgIGNvbnN0IG90aGVyRmllbGRzID0gdGhpcy5fb3RoZXJGaWVsZHNbc2VyaWVzLnR5cGVdO1xuICAgICAgICBsZXQgZmllbGRzLCB2YWx1ZTtcblxuICAgICAgICBpZiAocG9pbnREYXRhID09PSBudWxsKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHRoaXMuX251bGxWYWx1ZVtzZXJpZXMudHlwZV07XG4gICAgICAgIH0gZWxzZSBpZiAoIWRlZmluZWQocG9pbnREYXRhKSkge1xuICAgICAgICAgICAgdmFsdWUgPSB0aGlzLl91bmRlZmluZWRWYWx1ZVtzZXJpZXMudHlwZV07XG4gICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShwb2ludERhdGEpKSB7XG4gICAgICAgICAgICBjb25zdCBmaWVsZERhdGEgPSBwb2ludERhdGEuc2xpY2UodmFsdWVGaWVsZHMubGVuZ3RoKTtcbiAgICAgICAgICAgIHZhbHVlID0gdGhpcy5fYmluZEZyb21BcnJheShwb2ludERhdGEsIHZhbHVlRmllbGRzKTtcbiAgICAgICAgICAgIGZpZWxkcyA9IHRoaXMuX2JpbmRGcm9tQXJyYXkoZmllbGREYXRhLCBvdGhlckZpZWxkcyk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHBvaW50RGF0YSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgY29uc3Qgc3JjVmFsdWVGaWVsZHMgPSB0aGlzLnNvdXJjZUZpZWxkcyhzZXJpZXMsIHZhbHVlRmllbGRzKTtcbiAgICAgICAgICAgIGNvbnN0IHNyY1BvaW50RmllbGRzID0gdGhpcy5zb3VyY2VGaWVsZHMoc2VyaWVzLCBvdGhlckZpZWxkcyk7XG5cbiAgICAgICAgICAgIHZhbHVlID0gdGhpcy5fYmluZEZyb21PYmplY3QocG9pbnREYXRhLCB2YWx1ZUZpZWxkcywgc3JjVmFsdWVGaWVsZHMpO1xuICAgICAgICAgICAgZmllbGRzID0gdGhpcy5fYmluZEZyb21PYmplY3QocG9pbnREYXRhLCBvdGhlckZpZWxkcywgc3JjUG9pbnRGaWVsZHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRlZmluZWQodmFsdWUpKSB7XG4gICAgICAgICAgICBpZiAodmFsdWVGaWVsZHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnZhbHVlRmllbGRzLnZhbHVlID0gdmFsdWVbdmFsdWVGaWVsZHNbMF1dO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQudmFsdWVGaWVsZHMgPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJlc3VsdC5maWVsZHMgPSBmaWVsZHMgfHwge307XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBfbWFrZVZhbHVlKGZpZWxkcywgaW5pdGlhbFZhbHVlKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0ge307XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IGZpZWxkcy5sZW5ndGg7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgZmllbGROYW1lID0gZmllbGRzW2ldO1xuICAgICAgICAgICAgdmFsdWVbZmllbGROYW1lXSA9IGluaXRpYWxWYWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICBfYmluZEZyb21BcnJheShhcnJheSwgZmllbGRzKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0ge307XG5cbiAgICAgICAgaWYgKGZpZWxkcykge1xuICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gTWF0aC5taW4oZmllbGRzLmxlbmd0aCwgYXJyYXkubGVuZ3RoKTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhbHVlW2ZpZWxkc1tpXV0gPSBhcnJheVtpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICBfYmluZEZyb21PYmplY3Qob2JqZWN0LCBmaWVsZHMsIHNyY0ZpZWxkcyA9IGZpZWxkcykge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHt9O1xuXG4gICAgICAgIGlmIChmaWVsZHMpIHtcbiAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IGZpZWxkcy5sZW5ndGg7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaWVsZE5hbWUgPSBmaWVsZHNbaV07XG4gICAgICAgICAgICAgICAgY29uc3Qgc3JjRmllbGROYW1lID0gc3JjRmllbGRzW2ldO1xuICAgICAgICAgICAgICAgIGlmIChzcmNGaWVsZE5hbWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVbZmllbGROYW1lXSA9IGdldEZpZWxkKHNyY0ZpZWxkTmFtZSwgb2JqZWN0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgc291cmNlRmllbGRzKHNlcmllcywgY2Fub25pY2FsRmllbGRzKSB7XG4gICAgICAgIGNvbnN0IHNvdXJjZUZpZWxkcyA9IFtdO1xuXG4gICAgICAgIGlmIChjYW5vbmljYWxGaWVsZHMpIHtcbiAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IGNhbm9uaWNhbEZpZWxkcy5sZW5ndGg7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaWVsZE5hbWUgPSBjYW5vbmljYWxGaWVsZHNbaV07XG4gICAgICAgICAgICAgICAgY29uc3Qgc291cmNlRmllbGROYW1lID0gZmllbGROYW1lID09PSBWQUxVRSA/IFwiZmllbGRcIiA6IGZpZWxkTmFtZSArIFwiRmllbGRcIjtcblxuICAgICAgICAgICAgICAgIHNvdXJjZUZpZWxkcy5wdXNoKHNlcmllc1tzb3VyY2VGaWVsZE5hbWVdICE9PSBudWxsID8gKHNlcmllc1tzb3VyY2VGaWVsZE5hbWVdIHx8IGZpZWxkTmFtZSkgOiBudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzb3VyY2VGaWVsZHM7XG4gICAgfVxufVxuXG5TZXJpZXNCaW5kZXIuY3VycmVudCA9IG5ldyBTZXJpZXNCaW5kZXIoKTtcblxuZXhwb3J0IGRlZmF1bHQgU2VyaWVzQmluZGVyOyIsImltcG9ydCBTZXJpZXNCaW5kZXIgZnJvbSAnLi4vc2VyaWVzLWJpbmRlcic7XG5cbmltcG9ydCB7IE9CSkVDVCB9IGZyb20gJy4uLy4uL2NvbW1vbi9jb25zdGFudHMnO1xuaW1wb3J0IHsgQ2xhc3MsIGRlZmluZWQsIGdldHRlciwgaXNBcnJheSwgaXNOdW1iZXIgfSBmcm9tICcuLi8uLi9jb21tb24nO1xuXG5jb25zdCBTVERfRVJSID0gXCJzdGRlcnJcIjtcbmNvbnN0IFNURF9ERVYgPSBcInN0ZGRldlwiO1xuY29uc3QgcGVyY2VudFJlZ2V4ID0gL3BlcmNlbnQoPzpcXHcqKVxcKChcXGQrKVxcKS87XG5jb25zdCBzdGFuZGFyZERldmlhdGlvblJlZ2V4ID0gbmV3IFJlZ0V4cChcIl5cIiArIFNURF9ERVYgKyBcIig/OlxcXFwoKFxcXFxkKyg/OlxcXFwuXFxcXGQrKT8pXFxcXCkpPyRcIik7XG5cbmNsYXNzIEVycm9yUmFuZ2VDYWxjdWxhdG9yIGV4dGVuZHMgQ2xhc3Mge1xuICAgIGNvbnN0cnVjdG9yKGVycm9yVmFsdWUsIHNlcmllcywgZmllbGQpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLmluaXRHbG9iYWxSYW5nZXMoZXJyb3JWYWx1ZSwgc2VyaWVzLCBmaWVsZCk7XG4gICAgfVxuXG4gICAgaW5pdEdsb2JhbFJhbmdlcyhlcnJvclZhbHVlLCBzZXJpZXMsIGZpZWxkKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSBzZXJpZXMuZGF0YTtcbiAgICAgICAgY29uc3QgZGV2aWF0aW9uTWF0Y2ggPSBzdGFuZGFyZERldmlhdGlvblJlZ2V4LmV4ZWMoZXJyb3JWYWx1ZSk7XG5cbiAgICAgICAgaWYgKGRldmlhdGlvbk1hdGNoKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlR2V0dGVyID0gdGhpcy5jcmVhdGVWYWx1ZUdldHRlcihzZXJpZXMsIGZpZWxkKTtcblxuICAgICAgICAgICAgY29uc3QgYXZlcmFnZSA9IHRoaXMuZ2V0QXZlcmFnZShkYXRhKTtcbiAgICAgICAgICAgIGNvbnN0IGRldmlhdGlvbiA9IHRoaXMuZ2V0U3RhbmRhcmREZXZpYXRpb24oZGF0YSwgYXZlcmFnZSwgZmFsc2UpO1xuICAgICAgICAgICAgY29uc3QgbXVsdGlwbGUgPSBkZXZpYXRpb25NYXRjaFsxXSA/IHBhcnNlRmxvYXQoZGV2aWF0aW9uTWF0Y2hbMV0pIDogMTtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yUmFuZ2UgPSB7IGxvdzogYXZlcmFnZS52YWx1ZSAtIGRldmlhdGlvbiAqIG11bHRpcGxlLCBoaWdoOiBhdmVyYWdlLnZhbHVlICsgZGV2aWF0aW9uICogbXVsdGlwbGUgfTtcblxuICAgICAgICAgICAgdGhpcy5nbG9iYWxSYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlcnJvclJhbmdlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmIChlcnJvclZhbHVlLmluZGV4T2YgJiYgZXJyb3JWYWx1ZS5pbmRleE9mKFNURF9FUlIpID49IDApIHtcbiAgICAgICAgICAgIHRoaXMudmFsdWVHZXR0ZXIgPSB0aGlzLmNyZWF0ZVZhbHVlR2V0dGVyKHNlcmllcywgZmllbGQpO1xuICAgICAgICAgICAgY29uc3Qgc3RhbmRhcmRFcnJvciA9IHRoaXMuZ2V0U3RhbmRhcmRFcnJvcihkYXRhLCB0aGlzLmdldEF2ZXJhZ2UoZGF0YSkpO1xuXG4gICAgICAgICAgICB0aGlzLmdsb2JhbFJhbmdlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBsb3c6IHZhbHVlIC0gc3RhbmRhcmRFcnJvciwgaGlnaDogdmFsdWUgKyBzdGFuZGFyZEVycm9yIH07XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY3JlYXRlVmFsdWVHZXR0ZXIoc2VyaWVzLCBmaWVsZCkge1xuICAgICAgICBjb25zdCBkYXRhID0gc2VyaWVzLmRhdGE7XG4gICAgICAgIGNvbnN0IGJpbmRlciA9IFNlcmllc0JpbmRlci5jdXJyZW50O1xuICAgICAgICBjb25zdCB2YWx1ZUZpZWxkcyA9IGJpbmRlci52YWx1ZUZpZWxkcyhzZXJpZXMpO1xuICAgICAgICBjb25zdCBpdGVtID0gZGVmaW5lZChkYXRhWzBdKSA/IGRhdGFbMF0gOiB7fTtcbiAgICAgICAgbGV0IHZhbHVlR2V0dGVyO1xuXG4gICAgICAgIGlmIChpc0FycmF5KGl0ZW0pKSB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IGZpZWxkID8gdmFsdWVGaWVsZHMuaW5kZXhPZihmaWVsZCkgOiAwO1xuICAgICAgICAgICAgdmFsdWVHZXR0ZXIgPSBnZXR0ZXIoXCJbXCIgKyBpbmRleCArIFwiXVwiKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc051bWJlcihpdGVtKSkge1xuICAgICAgICAgICAgdmFsdWVHZXR0ZXIgPSBnZXR0ZXIoKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaXRlbSA9PT0gT0JKRUNUKSB7XG4gICAgICAgICAgICBjb25zdCBzcmNWYWx1ZUZpZWxkcyA9IGJpbmRlci5zb3VyY2VGaWVsZHMoc2VyaWVzLCB2YWx1ZUZpZWxkcyk7XG4gICAgICAgICAgICB2YWx1ZUdldHRlciA9IGdldHRlcihzcmNWYWx1ZUZpZWxkc1t2YWx1ZUZpZWxkcy5pbmRleE9mKGZpZWxkKV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlR2V0dGVyO1xuICAgIH1cblxuICAgIGdldEVycm9yUmFuZ2UocG9pbnRWYWx1ZSwgZXJyb3JWYWx1ZSkge1xuICAgICAgICBsZXQgbG93LCBoaWdoLCB2YWx1ZTtcblxuICAgICAgICBpZiAoIWRlZmluZWQoZXJyb3JWYWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuZ2xvYmFsUmFuZ2UpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdsb2JhbFJhbmdlKHBvaW50VmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzQXJyYXkoZXJyb3JWYWx1ZSkpIHtcbiAgICAgICAgICAgIGxvdyA9IHBvaW50VmFsdWUgLSBlcnJvclZhbHVlWzBdO1xuICAgICAgICAgICAgaGlnaCA9IHBvaW50VmFsdWUgKyBlcnJvclZhbHVlWzFdO1xuICAgICAgICB9IGVsc2UgaWYgKGlzTnVtYmVyKHZhbHVlID0gcGFyc2VGbG9hdChlcnJvclZhbHVlKSkpIHtcbiAgICAgICAgICAgIGxvdyA9IHBvaW50VmFsdWUgLSB2YWx1ZTtcbiAgICAgICAgICAgIGhpZ2ggPSBwb2ludFZhbHVlICsgdmFsdWU7XG4gICAgICAgIH0gZWxzZSBpZiAoKHZhbHVlID0gcGVyY2VudFJlZ2V4LmV4ZWMoZXJyb3JWYWx1ZSkpKSB7XG4gICAgICAgICAgICBjb25zdCBwZXJjZW50VmFsdWUgPSBwb2ludFZhbHVlICogKHBhcnNlRmxvYXQodmFsdWVbMV0pIC8gMTAwKTtcbiAgICAgICAgICAgIGxvdyA9IHBvaW50VmFsdWUgLSBNYXRoLmFicyhwZXJjZW50VmFsdWUpO1xuICAgICAgICAgICAgaGlnaCA9IHBvaW50VmFsdWUgKyBNYXRoLmFicyhwZXJjZW50VmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBFcnJvckJhciB2YWx1ZTogXCIgKyBlcnJvclZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7IGxvdzogbG93LCBoaWdoOiBoaWdoIH07XG4gICAgfVxuXG4gICAgZ2V0U3RhbmRhcmRFcnJvcihkYXRhLCBhdmVyYWdlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFN0YW5kYXJkRGV2aWF0aW9uKGRhdGEsIGF2ZXJhZ2UsIHRydWUpIC8gTWF0aC5zcXJ0KGF2ZXJhZ2UuY291bnQpO1xuICAgIH1cblxuICAgIGdldFN0YW5kYXJkRGV2aWF0aW9uKGRhdGEsIGF2ZXJhZ2UsIGlzU2FtcGxlKSB7XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IGRhdGEubGVuZ3RoO1xuICAgICAgICBjb25zdCB0b3RhbCA9IGlzU2FtcGxlID8gYXZlcmFnZS5jb3VudCAtIDEgOiBhdmVyYWdlLmNvdW50O1xuICAgICAgICBsZXQgc3F1YXJlRGlmZmVyZW5jZVN1bSA9IDA7XG5cbiAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgbGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLnZhbHVlR2V0dGVyKGRhdGFbaWR4XSk7XG4gICAgICAgICAgICBpZiAoaXNOdW1iZXIodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgc3F1YXJlRGlmZmVyZW5jZVN1bSArPSBNYXRoLnBvdyh2YWx1ZSAtIGF2ZXJhZ2UudmFsdWUsIDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIE1hdGguc3FydChzcXVhcmVEaWZmZXJlbmNlU3VtIC8gdG90YWwpO1xuICAgIH1cblxuICAgIGdldEF2ZXJhZ2UoZGF0YSkge1xuICAgICAgICBjb25zdCBsZW5ndGggPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgbGV0IHN1bSA9IDA7XG4gICAgICAgIGxldCBjb3VudCA9IDA7XG5cbiAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgbGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLnZhbHVlR2V0dGVyKGRhdGFbaWR4XSk7XG4gICAgICAgICAgICBpZiAoaXNOdW1iZXIodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgc3VtICs9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHN1bSAvIGNvdW50LFxuICAgICAgICAgICAgY291bnQ6IGNvdW50XG4gICAgICAgIH07XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBFcnJvclJhbmdlQ2FsY3VsYXRvcjsiLCJpbXBvcnQgeyBzdXBwb3J0IH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWRyYXdpbmcnO1xuXG5jb25zdCBicm93c2VyID0gc3VwcG9ydC5icm93c2VyIHx8IHt9O1xuXG5jb25zdCBJTklUSUFMX0FOSU1BVElPTl9EVVJBVElPTiA9IDYwMDtcbmNvbnN0IEZBREVJTiA9IFwiZmFkZUluXCI7XG5cbmNvbnN0IEdMQVNTID0gXCJnbGFzc1wiO1xuY29uc3QgQk9SREVSX0JSSUdIVE5FU1MgPSAwLjg7XG5jb25zdCBUT09MVElQX09GRlNFVCA9IDU7XG5jb25zdCBTVEFSVF9TQ0FMRSA9IGJyb3dzZXIubXNpZSA/IDAuMDAxIDogMDtcbmNvbnN0IEVSUk9SX0xPV19GSUVMRCA9IFwiZXJyb3JMb3dcIjtcbmNvbnN0IEVSUk9SX0hJR0hfRklFTEQgPSBcImVycm9ySGlnaFwiO1xuY29uc3QgWF9FUlJPUl9MT1dfRklFTEQgPSBcInhFcnJvckxvd1wiO1xuY29uc3QgWF9FUlJPUl9ISUdIX0ZJRUxEID0gXCJ4RXJyb3JIaWdoXCI7XG5jb25zdCBZX0VSUk9SX0xPV19GSUVMRCA9IFwieUVycm9yTG93XCI7XG5jb25zdCBZX0VSUk9SX0hJR0hfRklFTEQgPSBcInlFcnJvckhpZ2hcIjtcbmNvbnN0IExJTkVfTUFSS0VSX1NJWkUgPSA4O1xuY29uc3QgWkVSTyA9IFwiemVyb1wiO1xuY29uc3QgSU5URVJQT0xBVEUgPSBcImludGVycG9sYXRlXCI7XG5jb25zdCBHQVAgPSBcImdhcFwiO1xuY29uc3QgQUJPVkUgPSBcImFib3ZlXCI7XG5jb25zdCBCRUxPVyA9IFwiYmVsb3dcIjtcblxuY29uc3QgU01PT1RIID0gXCJzbW9vdGhcIjtcbmNvbnN0IFNURVAgPSBcInN0ZXBcIjtcblxuY29uc3QgQVJFQSA9IFwiYXJlYVwiO1xuY29uc3QgQkFSID0gXCJiYXJcIjtcbmNvbnN0IEJPWF9QTE9UID0gXCJib3hQbG90XCI7XG5jb25zdCBCVUJCTEUgPSBcImJ1YmJsZVwiO1xuY29uc3QgQlVMTEVUID0gXCJidWxsZXRcIjtcbmNvbnN0IENBTkRMRVNUSUNLID0gXCJjYW5kbGVzdGlja1wiO1xuY29uc3QgQ09MVU1OID0gXCJjb2x1bW5cIjtcbmNvbnN0IERPTlVUID0gXCJkb251dFwiO1xuY29uc3QgRlVOTkVMID0gXCJmdW5uZWxcIjtcbmNvbnN0IEhPUklaT05UQUxfV0FURVJGQUxMID0gXCJob3Jpem9udGFsV2F0ZXJmYWxsXCI7XG5jb25zdCBMSU5FID0gXCJsaW5lXCI7XG5jb25zdCBPSExDID0gXCJvaGxjXCI7XG5jb25zdCBQSUUgPSBcInBpZVwiO1xuY29uc3QgUE9MQVJfQVJFQSA9IFwicG9sYXJBcmVhXCI7XG5jb25zdCBQT0xBUl9MSU5FID0gXCJwb2xhckxpbmVcIjtcbmNvbnN0IFBPTEFSX1NDQVRURVIgPSBcInBvbGFyU2NhdHRlclwiO1xuY29uc3QgUkFEQVJfQVJFQSA9IFwicmFkYXJBcmVhXCI7XG5jb25zdCBSQURBUl9DT0xVTU4gPSBcInJhZGFyQ29sdW1uXCI7XG5jb25zdCBSQURBUl9MSU5FID0gXCJyYWRhckxpbmVcIjtcbmNvbnN0IFJBTkdFX0FSRUEgPSBcInJhbmdlQXJlYVwiO1xuY29uc3QgUkFOR0VfQkFSID0gXCJyYW5nZUJhclwiO1xuY29uc3QgUkFOR0VfQ09MVU1OID0gXCJyYW5nZUNvbHVtblwiO1xuY29uc3QgU0NBVFRFUiA9IFwic2NhdHRlclwiO1xuY29uc3QgU0NBVFRFUl9MSU5FID0gXCJzY2F0dGVyTGluZVwiO1xuY29uc3QgVkVSVElDQUxfQVJFQSA9IFwidmVydGljYWxBcmVhXCI7XG5jb25zdCBWRVJUSUNBTF9CT1hfUExPVCA9IFwidmVydGljYWxCb3hQbG90XCI7XG5jb25zdCBWRVJUSUNBTF9CVUxMRVQgPSBcInZlcnRpY2FsQnVsbGV0XCI7XG5jb25zdCBWRVJUSUNBTF9MSU5FID0gXCJ2ZXJ0aWNhbExpbmVcIjtcbmNvbnN0IFZFUlRJQ0FMX1JBTkdFX0FSRUEgPSBcInZlcnRpY2FsUmFuZ2VBcmVhXCI7XG5jb25zdCBXQVRFUkZBTEwgPSBcIndhdGVyZmFsbFwiO1xuY29uc3QgRVFVQUxMWV9TUEFDRURfU0VSSUVTID0gW1xuICAgIEJBUiwgQ09MVU1OLCBPSExDLCBDQU5ETEVTVElDSywgQk9YX1BMT1QsIFZFUlRJQ0FMX0JPWF9QTE9ULFxuICAgIEJVTExFVCwgUkFOR0VfQ09MVU1OLCBSQU5HRV9CQVIsIFdBVEVSRkFMTCwgSE9SSVpPTlRBTF9XQVRFUkZBTExcbl07XG5cbmNvbnN0IExFR0VORF9JVEVNX0NMSUNLID0gXCJsZWdlbmRJdGVtQ2xpY2tcIjtcbmNvbnN0IExFR0VORF9JVEVNX0hPVkVSID0gXCJsZWdlbmRJdGVtSG92ZXJcIjtcbmNvbnN0IExFR0VORF9JVEVNX0xFQVZFID0gXCJsZWdlbmRJdGVtTGVhdmVcIjtcbmNvbnN0IFNFUklFU19DTElDSyA9IFwic2VyaWVzQ2xpY2tcIjtcbmNvbnN0IFNFUklFU19IT1ZFUiA9IFwic2VyaWVzSG92ZXJcIjtcbmNvbnN0IFNFUklFU19PVkVSID0gXCJzZXJpZXNPdmVyXCI7XG5jb25zdCBTRVJJRVNfTEVBVkUgPSBcInNlcmllc0xlYXZlXCI7XG5jb25zdCBQTE9UX0FSRUFfQ0xJQ0sgPSBcInBsb3RBcmVhQ2xpY2tcIjtcbmNvbnN0IFBMT1RfQVJFQV9IT1ZFUiA9IFwicGxvdEFyZWFIb3ZlclwiO1xuY29uc3QgUExPVF9BUkVBX0xFQVZFID0gXCJwbG90QXJlYUxlYXZlXCI7XG5jb25zdCBEUkFHID0gXCJkcmFnXCI7XG5jb25zdCBEUkFHX0VORCA9IFwiZHJhZ0VuZFwiO1xuY29uc3QgRFJBR19TVEFSVCA9IFwiZHJhZ1N0YXJ0XCI7XG5jb25zdCBaT09NX1NUQVJUID0gXCJ6b29tU3RhcnRcIjtcbmNvbnN0IFpPT00gPSBcInpvb21cIjtcbmNvbnN0IFpPT01fRU5EID0gXCJ6b29tRW5kXCI7XG5jb25zdCBTRUxFQ1RfU1RBUlQgPSBcInNlbGVjdFN0YXJ0XCI7XG5jb25zdCBTRUxFQ1QgPSBcInNlbGVjdFwiO1xuY29uc3QgU0VMRUNUX0VORCA9IFwic2VsZWN0RW5kXCI7XG5jb25zdCBSRU5ERVIgPSBcInJlbmRlclwiO1xuY29uc3QgU0hPV19UT09MVElQID0gXCJzaG93VG9vbHRpcFwiO1xuY29uc3QgSElERV9UT09MVElQID0gXCJoaWRlVG9vbHRpcFwiO1xuY29uc3QgUEFORV9SRU5ERVIgPSBcInBhbmVSZW5kZXJcIjtcblxuY29uc3QgTE9HQVJJVEhNSUMgPSBcImxvZ1wiO1xuY29uc3QgQ0FURUdPUlkgPSBcImNhdGVnb3J5XCI7XG5cbmNvbnN0IElOU0lERV9FTkQgPSBcImluc2lkZUVuZFwiO1xuY29uc3QgSU5TSURFX0JBU0UgPSBcImluc2lkZUJhc2VcIjtcbmNvbnN0IE9VVFNJREVfRU5EID0gXCJvdXRzaWRlRW5kXCI7XG5cbmNvbnN0IE1PVVNFV0hFRUwgPSBcIkRPTU1vdXNlU2Nyb2xsIG1vdXNld2hlZWxcIjtcbmNvbnN0IE1PVVNFV0hFRUxfREVMQVkgPSAxNTA7XG5cbmV4cG9ydCB7XG4gICAgSU5JVElBTF9BTklNQVRJT05fRFVSQVRJT04sIEZBREVJTixcbiAgICBMRUdFTkRfSVRFTV9DTElDSywgTEVHRU5EX0lURU1fSE9WRVIsIExFR0VORF9JVEVNX0xFQVZFLFxuICAgIFNFUklFU19DTElDSywgU0VSSUVTX0hPVkVSLCBTRVJJRVNfT1ZFUiwgU0VSSUVTX0xFQVZFLCBHTEFTUyxcbiAgICBCT1JERVJfQlJJR0hUTkVTUywgVE9PTFRJUF9PRkZTRVQsXG4gICAgU1RBUlRfU0NBTEUsIEVSUk9SX0xPV19GSUVMRCwgRVJST1JfSElHSF9GSUVMRCxcbiAgICBYX0VSUk9SX0xPV19GSUVMRCwgWF9FUlJPUl9ISUdIX0ZJRUxELFxuICAgIFlfRVJST1JfTE9XX0ZJRUxELCBZX0VSUk9SX0hJR0hfRklFTEQsXG4gICAgTElORV9NQVJLRVJfU0laRSwgSU5URVJQT0xBVEUsIFpFUk8sXG4gICAgU01PT1RILCBTVEVQLCBDQVRFR09SWSwgRlVOTkVMLFxuICAgIEJBUiwgQ0FORExFU1RJQ0ssIFBJRSwgQ09MVU1OLCBBUkVBLFxuICAgIFZFUlRJQ0FMX0JVTExFVCwgQk9YX1BMT1QsIE9ITEMsIFdBVEVSRkFMTCwgTElORSxcbiAgICBCVUxMRVQsIFZFUlRJQ0FMX0xJTkUsIFZFUlRJQ0FMX0FSRUEsIFJBTkdFX0FSRUEsIFZFUlRJQ0FMX1JBTkdFX0FSRUEsXG4gICAgUkFOR0VfQ09MVU1OLCBWRVJUSUNBTF9CT1hfUExPVCwgUkFOR0VfQkFSLCBIT1JJWk9OVEFMX1dBVEVSRkFMTCxcbiAgICBTQ0FUVEVSLCBTQ0FUVEVSX0xJTkUsIEJVQkJMRSwgUkFEQVJfQVJFQSwgUkFEQVJfTElORSxcbiAgICBSQURBUl9DT0xVTU4sIFBPTEFSX0xJTkUsIFBPTEFSX0FSRUEsIFBPTEFSX1NDQVRURVIsXG4gICAgUkVOREVSLCBQTE9UX0FSRUFfQ0xJQ0ssIFBMT1RfQVJFQV9IT1ZFUiwgUExPVF9BUkVBX0xFQVZFLFxuICAgIExPR0FSSVRITUlDLCBEUkFHLCBEUkFHX1NUQVJULCBEUkFHX0VORCwgWk9PTV9TVEFSVCwgWk9PTSwgWk9PTV9FTkQsXG4gICAgU0VMRUNUX1NUQVJULCBTRUxFQ1QsIFNFTEVDVF9FTkQsIFBBTkVfUkVOREVSLCBHQVAsXG4gICAgRE9OVVQsIElOU0lERV9FTkQsIElOU0lERV9CQVNFLCBPVVRTSURFX0VORCxcbiAgICBNT1VTRVdIRUVMLCBNT1VTRVdIRUVMX0RFTEFZLCBTSE9XX1RPT0xUSVAsIEhJREVfVE9PTFRJUCxcbiAgICBFUVVBTExZX1NQQUNFRF9TRVJJRVMsIEFCT1ZFLCBCRUxPV1xufTtcbiIsImltcG9ydCB7IGRyYXdpbmcgYXMgZHJhdyB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1kcmF3aW5nJztcblxuaW1wb3J0IHsgQ2hhcnRFbGVtZW50LCBQb2ludCwgQm94IH0gZnJvbSAnLi4vLi4vY29yZSc7XG5cbmltcG9ydCB7IEZBREVJTiwgSU5JVElBTF9BTklNQVRJT05fRFVSQVRJT04gfSBmcm9tICcuLi9jb25zdGFudHMnO1xuXG5pbXBvcnQgeyBzZXREZWZhdWx0T3B0aW9ucywgYWxpZ25QYXRoVG9QaXhlbCB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5cbmNvbnN0IERFRkFVTFRfRVJST1JfQkFSX1dJRFRIID0gNDtcblxuY2xhc3MgRXJyb3JCYXJCYXNlIGV4dGVuZHMgQ2hhcnRFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihsb3csIGhpZ2gsIGlzVmVydGljYWwsIGNoYXJ0LCBzZXJpZXMsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5sb3cgPSBsb3c7XG4gICAgICAgIHRoaXMuaGlnaCA9IGhpZ2g7XG4gICAgICAgIHRoaXMuaXNWZXJ0aWNhbCA9IGlzVmVydGljYWw7XG4gICAgICAgIHRoaXMuY2hhcnQgPSBjaGFydDtcbiAgICAgICAgdGhpcy5zZXJpZXMgPSBzZXJpZXM7XG4gICAgfVxuXG4gICAgcmVmbG93KHRhcmdldEJveCkge1xuICAgICAgICBjb25zdCBlbmRDYXBzID0gdGhpcy5vcHRpb25zLmVuZENhcHM7XG4gICAgICAgIGNvbnN0IGlzVmVydGljYWwgPSB0aGlzLmlzVmVydGljYWw7XG4gICAgICAgIGNvbnN0IGF4aXMgPSB0aGlzLmdldEF4aXMoKTtcbiAgICAgICAgY29uc3QgdmFsdWVCb3ggPSBheGlzLmdldFNsb3QodGhpcy5sb3csIHRoaXMuaGlnaCk7XG4gICAgICAgIGNvbnN0IGNlbnRlckJveCA9IHRhcmdldEJveC5jZW50ZXIoKTtcbiAgICAgICAgY29uc3QgY2Fwc1dpZHRoID0gdGhpcy5nZXRDYXBzV2lkdGgodGFyZ2V0Qm94LCBpc1ZlcnRpY2FsKTtcbiAgICAgICAgY29uc3QgY2FwVmFsdWUgPSBpc1ZlcnRpY2FsID8gY2VudGVyQm94LnggOiBjZW50ZXJCb3gueTtcbiAgICAgICAgY29uc3QgY2FwU3RhcnQgPSBjYXBWYWx1ZSAtIGNhcHNXaWR0aDtcbiAgICAgICAgY29uc3QgY2FwRW5kID0gY2FwVmFsdWUgKyBjYXBzV2lkdGg7XG4gICAgICAgIGxldCBsaW5lUG9pbnRzO1xuXG4gICAgICAgIGlmIChpc1ZlcnRpY2FsKSB7XG4gICAgICAgICAgICBsaW5lUG9pbnRzID0gW1xuICAgICAgICAgICAgICAgIG5ldyBQb2ludChjZW50ZXJCb3gueCwgdmFsdWVCb3gueTEpLFxuICAgICAgICAgICAgICAgIG5ldyBQb2ludChjZW50ZXJCb3gueCwgdmFsdWVCb3gueTIpXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaWYgKGVuZENhcHMpIHtcbiAgICAgICAgICAgICAgICBsaW5lUG9pbnRzLnB1c2gobmV3IFBvaW50KGNhcFN0YXJ0LCB2YWx1ZUJveC55MSksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBQb2ludChjYXBFbmQsIHZhbHVlQm94LnkxKSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IFBvaW50KGNhcFN0YXJ0LCB2YWx1ZUJveC55MiksXG4gICAgICAgICAgICAgICAgICAgIG5ldyBQb2ludChjYXBFbmQsIHZhbHVlQm94LnkyKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmJveCA9IG5ldyBCb3goY2FwU3RhcnQsIHZhbHVlQm94LnkxLCBjYXBFbmQsIHZhbHVlQm94LnkyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxpbmVQb2ludHMgPSBbXG4gICAgICAgICAgICAgICAgbmV3IFBvaW50KHZhbHVlQm94LngxLCBjZW50ZXJCb3gueSksXG4gICAgICAgICAgICAgICAgbmV3IFBvaW50KHZhbHVlQm94LngyLCBjZW50ZXJCb3gueSlcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBpZiAoZW5kQ2Fwcykge1xuICAgICAgICAgICAgICAgIGxpbmVQb2ludHMucHVzaChuZXcgUG9pbnQodmFsdWVCb3gueDEsIGNhcFN0YXJ0KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IFBvaW50KHZhbHVlQm94LngxLCBjYXBFbmQpLFxuICAgICAgICAgICAgICAgICAgICBuZXcgUG9pbnQodmFsdWVCb3gueDIsIGNhcFN0YXJ0KSxcbiAgICAgICAgICAgICAgICAgICAgbmV3IFBvaW50KHZhbHVlQm94LngyLCBjYXBFbmQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYm94ID0gbmV3IEJveCh2YWx1ZUJveC54MSwgY2FwU3RhcnQsIHZhbHVlQm94LngyLCBjYXBFbmQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5saW5lUG9pbnRzID0gbGluZVBvaW50cztcbiAgICB9XG5cbiAgICBnZXRDYXBzV2lkdGgoYm94LCBpc1ZlcnRpY2FsKSB7XG4gICAgICAgIGNvbnN0IGJveFNpemUgPSBpc1ZlcnRpY2FsID8gYm94LndpZHRoKCkgOiBib3guaGVpZ2h0KCk7XG4gICAgICAgIGNvbnN0IGNhcHNXaWR0aCA9IE1hdGgubWluKE1hdGguZmxvb3IoYm94U2l6ZSAvIDIpLCBERUZBVUxUX0VSUk9SX0JBUl9XSURUSCkgfHwgREVGQVVMVF9FUlJPUl9CQVJfV0lEVEg7XG5cbiAgICAgICAgcmV0dXJuIGNhcHNXaWR0aDtcbiAgICB9XG5cbiAgICBjcmVhdGVWaXN1YWwoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHZpc3VhbCA9IG9wdGlvbnMudmlzdWFsO1xuXG4gICAgICAgIGlmICh2aXN1YWwpIHtcbiAgICAgICAgICAgIHRoaXMudmlzdWFsID0gdmlzdWFsKHtcbiAgICAgICAgICAgICAgICBsb3c6IHRoaXMubG93LFxuICAgICAgICAgICAgICAgIGhpZ2g6IHRoaXMuaGlnaCxcbiAgICAgICAgICAgICAgICByZWN0OiB0aGlzLmJveC50b1JlY3QoKSxcbiAgICAgICAgICAgICAgICBzZW5kZXI6IHRoaXMuZ2V0U2VuZGVyKCksXG4gICAgICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICBlbmRDYXBzOiBvcHRpb25zLmVuZENhcHMsXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBvcHRpb25zLmNvbG9yLFxuICAgICAgICAgICAgICAgICAgICBsaW5lOiBvcHRpb25zLmxpbmVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNyZWF0ZVZpc3VhbDogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZURlZmF1bHRWaXN1YWwoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVmYXVsdFZpc3VhbCA9IHRoaXMudmlzdWFsO1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy52aXN1YWw7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkZWZhdWx0VmlzdWFsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVEZWZhdWx0VmlzdWFsKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjcmVhdGVEZWZhdWx0VmlzdWFsKCkge1xuICAgICAgICBjb25zdCB7IG9wdGlvbnMsIGxpbmVQb2ludHMgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGxpbmVPcHRpb25zID0ge1xuICAgICAgICAgICAgc3Ryb2tlOiB7XG4gICAgICAgICAgICAgICAgY29sb3I6IG9wdGlvbnMuY29sb3IsXG4gICAgICAgICAgICAgICAgd2lkdGg6IG9wdGlvbnMubGluZS53aWR0aCxcbiAgICAgICAgICAgICAgICBkYXNoVHlwZTogb3B0aW9ucy5saW5lLmRhc2hUeXBlXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgc3VwZXIuY3JlYXRlVmlzdWFsKCk7XG5cbiAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgbGluZVBvaW50cy5sZW5ndGg7IGlkeCArPSAyKSB7XG4gICAgICAgICAgICBjb25zdCBsaW5lID0gbmV3IGRyYXcuUGF0aChsaW5lT3B0aW9ucylcbiAgICAgICAgICAgICAgICAubW92ZVRvKGxpbmVQb2ludHNbaWR4XS54LCBsaW5lUG9pbnRzW2lkeF0ueSlcbiAgICAgICAgICAgICAgICAubGluZVRvKGxpbmVQb2ludHNbaWR4ICsgMV0ueCwgbGluZVBvaW50c1tpZHggKyAxXS55KTtcblxuICAgICAgICAgICAgYWxpZ25QYXRoVG9QaXhlbChsaW5lKTtcbiAgICAgICAgICAgIHRoaXMudmlzdWFsLmFwcGVuZChsaW5lKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuc2V0RGVmYXVsdE9wdGlvbnMoRXJyb3JCYXJCYXNlLCB7XG4gICAgYW5pbWF0aW9uOiB7XG4gICAgICAgIHR5cGU6IEZBREVJTixcbiAgICAgICAgZGVsYXk6IElOSVRJQUxfQU5JTUFUSU9OX0RVUkFUSU9OXG4gICAgfSxcbiAgICBlbmRDYXBzOiB0cnVlLFxuICAgIGxpbmU6IHtcbiAgICAgICAgd2lkdGg6IDJcbiAgICB9LFxuICAgIHpJbmRleDogMVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IEVycm9yQmFyQmFzZTsiLCJpbXBvcnQgRXJyb3JCYXJCYXNlIGZyb20gJy4vZXJyb3ItYmFyLWJhc2UnO1xuXG5jbGFzcyBDYXRlZ29yaWNhbEVycm9yQmFyIGV4dGVuZHMgRXJyb3JCYXJCYXNlIHtcbiAgICBnZXRBeGlzKCkge1xuICAgICAgICBjb25zdCBheGlzID0gdGhpcy5jaGFydC5zZXJpZXNWYWx1ZUF4aXModGhpcy5zZXJpZXMpO1xuXG4gICAgICAgIHJldHVybiBheGlzO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2F0ZWdvcmljYWxFcnJvckJhcjsiLCJpbXBvcnQgeyBpbkFycmF5LCBpc0Z1bmN0aW9uLCBpc09iamVjdCwgdmFsdWVPckRlZmF1bHQgfSBmcm9tICcuLi8uLi9jb21tb24nO1xuXG5jb25zdCBNQVhfRVhQQU5EX0RFUFRIID0gNTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZXZhbE9wdGlvbnMob3B0aW9ucywgY29udGV4dCwgc3RhdGUgPSB7fSwgZHJ5UnVuID0gZmFsc2UpIHtcbiAgICBjb25zdCBkZWZhdWx0cyA9IHN0YXRlLmRlZmF1bHRzID0gc3RhdGUuZGVmYXVsdHMgfHwge307XG4gICAgY29uc3QgZGVwdGggPSBzdGF0ZS5kZXB0aCA9IHN0YXRlLmRlcHRoIHx8IDA7XG4gICAgbGV0IG5lZWRzRXZhbCA9IGZhbHNlO1xuXG4gICAgc3RhdGUuZXhjbHVkZWQgPSBzdGF0ZS5leGNsdWRlZCB8fCBbXTtcblxuICAgIGlmIChkZXB0aCA+IE1BWF9FWFBBTkRfREVQVEgpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgcHJvcGVydHkgaW4gb3B0aW9ucykge1xuICAgICAgICBpZiAoIWluQXJyYXkocHJvcGVydHksIHN0YXRlLmV4Y2x1ZGVkKSAmJiBvcHRpb25zLmhhc093blByb3BlcnR5KHByb3BlcnR5KSkge1xuICAgICAgICAgICAgY29uc3QgcHJvcFZhbHVlID0gb3B0aW9uc1twcm9wZXJ0eV07XG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihwcm9wVmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgbmVlZHNFdmFsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZiAoIWRyeVJ1bikge1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zW3Byb3BlcnR5XSA9IHZhbHVlT3JEZWZhdWx0KHByb3BWYWx1ZShjb250ZXh0KSwgZGVmYXVsdHNbcHJvcGVydHldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHByb3BWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWRyeVJ1bikge1xuICAgICAgICAgICAgICAgICAgICBzdGF0ZS5kZWZhdWx0cyA9IGRlZmF1bHRzW3Byb3BlcnR5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3RhdGUuZGVwdGgrKztcbiAgICAgICAgICAgICAgICBuZWVkc0V2YWwgPSBldmFsT3B0aW9ucyhwcm9wVmFsdWUsIGNvbnRleHQsIHN0YXRlLCBkcnlSdW4pIHx8IG5lZWRzRXZhbDtcbiAgICAgICAgICAgICAgICBzdGF0ZS5kZXB0aC0tO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5lZWRzRXZhbDtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjYXRlZ29yaWVzQ291bnQoc2VyaWVzKSB7XG4gICAgY29uc3Qgc2VyaWVzQ291bnQgPSBzZXJpZXMubGVuZ3RoO1xuICAgIGxldCBjYXRlZ29yaWVzID0gMDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VyaWVzQ291bnQ7IGkrKykge1xuICAgICAgICBjYXRlZ29yaWVzID0gTWF0aC5tYXgoY2F0ZWdvcmllcywgc2VyaWVzW2ldLmRhdGEubGVuZ3RoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2F0ZWdvcmllcztcbn0iLCJpbXBvcnQgRXJyb3JSYW5nZUNhbGN1bGF0b3IgZnJvbSAnLi9lcnJvci1iYXJzL2Vycm9yLXJhbmdlLWNhbGN1bGF0b3InO1xuaW1wb3J0IENhdGVnb3JpY2FsRXJyb3JCYXIgZnJvbSAnLi9lcnJvci1iYXJzL2NhdGVnb3JpY2FsLWVycm9yLWJhcic7XG5cbmltcG9ydCBTZXJpZXNCaW5kZXIgZnJvbSAnLi9zZXJpZXMtYmluZGVyJztcbmltcG9ydCB7IEVSUk9SX0xPV19GSUVMRCwgRVJST1JfSElHSF9GSUVMRCB9IGZyb20gJy4vY29uc3RhbnRzJztcblxuaW1wb3J0IGV2YWxPcHRpb25zIGZyb20gJy4vdXRpbHMvZXZhbC1vcHRpb25zJztcbmltcG9ydCBjYXRlZ29yaWVzQ291bnQgZnJvbSAnLi91dGlscy9jYXRlZ29yaWVzLWNvdW50JztcblxuaW1wb3J0IHsgQ2hhcnRFbGVtZW50LCBCb3ggfSBmcm9tICcuLi9jb3JlJztcblxuaW1wb3J0IHsgVkFMVUUsIFNUUklORywgTUlOX1ZBTFVFLCBNQVhfVkFMVUUgfSBmcm9tICcuLi9jb21tb24vY29uc3RhbnRzJztcbmltcG9ydCB7IGNvbnZlcnRhYmxlVG9OdW1iZXIsIGRlZXBFeHRlbmQsIGRlZmluZWQsIGlzTnVtYmVyLCBsYXN0LCBzZXREZWZhdWx0T3B0aW9ucywgc3BhcnNlQXJyYXlMaW1pdHMgfSBmcm9tICcuLi9jb21tb24nO1xuXG5jbGFzcyBDYXRlZ29yaWNhbENoYXJ0IGV4dGVuZHMgQ2hhcnRFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcihwbG90QXJlYSwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcblxuICAgICAgICB0aGlzLnBsb3RBcmVhID0gcGxvdEFyZWE7XG4gICAgICAgIHRoaXMuY2hhcnRTZXJ2aWNlID0gcGxvdEFyZWEuY2hhcnRTZXJ2aWNlO1xuICAgICAgICB0aGlzLmNhdGVnb3J5QXhpcyA9IHBsb3RBcmVhLnNlcmllc0NhdGVnb3J5QXhpcyhvcHRpb25zLnNlcmllc1swXSk7XG5cbiAgICAgICAgLy8gVmFsdWUgYXhpcyByYW5nZXMgZ3JvdXBlZCBieSBheGlzIG5hbWUsIGUuZy46XG4gICAgICAgIC8vIHByaW1hcnk6IHsgbWluOiAwLCBtYXg6IDEgfVxuICAgICAgICB0aGlzLnZhbHVlQXhpc1JhbmdlcyA9IHt9O1xuXG4gICAgICAgIHRoaXMucG9pbnRzID0gW107XG4gICAgICAgIHRoaXMuY2F0ZWdvcnlQb2ludHMgPSBbXTtcbiAgICAgICAgdGhpcy5zZXJpZXNQb2ludHMgPSBbXTtcbiAgICAgICAgdGhpcy5zZXJpZXNPcHRpb25zID0gW107XG4gICAgICAgIHRoaXMuX2V2YWxTZXJpZXMgPSBbXTtcblxuICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgdGhpcy50cmF2ZXJzZURhdGFQb2ludHModGhpcy5hZGRWYWx1ZS5iaW5kKHRoaXMpKTtcbiAgICB9XG5cbiAgICBwb2ludE9wdGlvbnMoc2VyaWVzLCBzZXJpZXNJeCkge1xuICAgICAgICBsZXQgb3B0aW9ucyA9IHRoaXMuc2VyaWVzT3B0aW9uc1tzZXJpZXNJeF07XG4gICAgICAgIGlmICghb3B0aW9ucykge1xuICAgICAgICAgICAgY29uc3QgZGVmYXVsdHMgPSB0aGlzLnBvaW50VHlwZSgpLnByb3RvdHlwZS5kZWZhdWx0cztcbiAgICAgICAgICAgIHRoaXMuc2VyaWVzT3B0aW9uc1tzZXJpZXNJeF0gPSBvcHRpb25zID0gZGVlcEV4dGVuZCh7IH0sIGRlZmF1bHRzLCB7XG4gICAgICAgICAgICAgICAgdmVydGljYWw6ICF0aGlzLm9wdGlvbnMuaW52ZXJ0QXhlc1xuICAgICAgICAgICAgfSwgc2VyaWVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvcHRpb25zO1xuICAgIH1cblxuICAgIHBsb3RWYWx1ZShwb2ludCkge1xuICAgICAgICBpZiAoIXBvaW50KSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuaXNTdGFja2VkMTAwICYmIGlzTnVtYmVyKHBvaW50LnZhbHVlKSkge1xuICAgICAgICAgICAgY29uc3QgY2F0ZWdvcnlJeCA9IHBvaW50LmNhdGVnb3J5SXg7XG4gICAgICAgICAgICBjb25zdCBjYXRlZ29yeVBvaW50cyA9IHRoaXMuY2F0ZWdvcnlQb2ludHNbY2F0ZWdvcnlJeF07XG4gICAgICAgICAgICBjb25zdCBvdGhlclZhbHVlcyA9IFtdO1xuICAgICAgICAgICAgbGV0IGNhdGVnb3J5U3VtID0gMDtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjYXRlZ29yeVBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG90aGVyID0gY2F0ZWdvcnlQb2ludHNbaV07XG4gICAgICAgICAgICAgICAgaWYgKG90aGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YWNrID0gcG9pbnQuc2VyaWVzLnN0YWNrO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBvdGhlclN0YWNrID0gb3RoZXIuc2VyaWVzLnN0YWNrO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICgoc3RhY2sgJiYgb3RoZXJTdGFjaykgJiYgc3RhY2suZ3JvdXAgIT09IG90aGVyU3RhY2suZ3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzTnVtYmVyKG90aGVyLnZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnlTdW0gKz0gTWF0aC5hYnMob3RoZXIudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgb3RoZXJWYWx1ZXMucHVzaChNYXRoLmFicyhvdGhlci52YWx1ZSkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY2F0ZWdvcnlTdW0gPiAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBvaW50LnZhbHVlIC8gY2F0ZWdvcnlTdW07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcG9pbnQudmFsdWU7XG4gICAgfVxuXG4gICAgcGxvdFJhbmdlKHBvaW50LCBzdGFydFZhbHVlID0gMCkge1xuICAgICAgICBjb25zdCBjYXRlZ29yeVBvaW50cyA9IHRoaXMuY2F0ZWdvcnlQb2ludHNbcG9pbnQuY2F0ZWdvcnlJeF07XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5pc1N0YWNrZWQpIHtcbiAgICAgICAgICAgIGxldCBwbG90VmFsdWUgPSB0aGlzLnBsb3RWYWx1ZShwb2ludCk7XG4gICAgICAgICAgICBjb25zdCBwb3NpdGl2ZSA9IHBsb3RWYWx1ZSA+PSAwO1xuICAgICAgICAgICAgbGV0IHByZXZWYWx1ZSA9IHN0YXJ0VmFsdWU7XG4gICAgICAgICAgICBsZXQgaXNTdGFja2VkQmFyID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2F0ZWdvcnlQb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBvdGhlciA9IGNhdGVnb3J5UG9pbnRzW2ldO1xuXG4gICAgICAgICAgICAgICAgaWYgKHBvaW50ID09PSBvdGhlcikge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBzdGFjayA9IHBvaW50LnNlcmllcy5zdGFjaztcbiAgICAgICAgICAgICAgICBjb25zdCBvdGhlclN0YWNrID0gb3RoZXIuc2VyaWVzLnN0YWNrO1xuICAgICAgICAgICAgICAgIGlmIChzdGFjayAmJiBvdGhlclN0YWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc3RhY2sgPT09IFNUUklORyAmJiBzdGFjayAhPT0gb3RoZXJTdGFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhY2suZ3JvdXAgJiYgc3RhY2suZ3JvdXAgIT09IG90aGVyU3RhY2suZ3JvdXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3Qgb3RoZXJWYWx1ZSA9IHRoaXMucGxvdFZhbHVlKG90aGVyKTtcbiAgICAgICAgICAgICAgICBpZiAoKG90aGVyVmFsdWUgPj0gMCAmJiBwb3NpdGl2ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgKG90aGVyVmFsdWUgPCAwICYmICFwb3NpdGl2ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJldlZhbHVlICs9IG90aGVyVmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHBsb3RWYWx1ZSArPSBvdGhlclZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBpc1N0YWNrZWRCYXIgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuaXNTdGFja2VkMTAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwbG90VmFsdWUgPSBNYXRoLm1pbihwbG90VmFsdWUsIDEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaXNTdGFja2VkQmFyKSB7XG4gICAgICAgICAgICAgICAgcHJldlZhbHVlIC09IHN0YXJ0VmFsdWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBbIHByZXZWYWx1ZSwgcGxvdFZhbHVlIF07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzZXJpZXMgPSBwb2ludC5zZXJpZXM7XG4gICAgICAgIGNvbnN0IHZhbHVlQXhpcyA9IHRoaXMuc2VyaWVzVmFsdWVBeGlzKHNlcmllcyk7XG4gICAgICAgIGNvbnN0IGF4aXNDcm9zc2luZ1ZhbHVlID0gdGhpcy5jYXRlZ29yeUF4aXNDcm9zc2luZ1ZhbHVlKHZhbHVlQXhpcyk7XG5cbiAgICAgICAgcmV0dXJuIFsgYXhpc0Nyb3NzaW5nVmFsdWUsIGNvbnZlcnRhYmxlVG9OdW1iZXIocG9pbnQudmFsdWUpID8gcG9pbnQudmFsdWUgOiBheGlzQ3Jvc3NpbmdWYWx1ZSBdO1xuICAgIH1cblxuICAgIHN0YWNrTGltaXRzKGF4aXNOYW1lLCBzdGFja05hbWUpIHtcbiAgICAgICAgbGV0IG1pbiA9IE1BWF9WQUxVRTtcbiAgICAgICAgbGV0IG1heCA9IE1JTl9WQUxVRTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY2F0ZWdvcnlQb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGNhdGVnb3J5UG9pbnRzID0gdGhpcy5jYXRlZ29yeVBvaW50c1tpXTtcbiAgICAgICAgICAgIGlmICghY2F0ZWdvcnlQb2ludHMpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yIChsZXQgcEl4ID0gMDsgcEl4IDwgY2F0ZWdvcnlQb2ludHMubGVuZ3RoOyBwSXgrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBvaW50ID0gY2F0ZWdvcnlQb2ludHNbcEl4XTtcbiAgICAgICAgICAgICAgICBpZiAocG9pbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBvaW50LnNlcmllcy5zdGFjayA9PT0gc3RhY2tOYW1lIHx8IHBvaW50LnNlcmllcy5heGlzID09PSBheGlzTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdG8gPSB0aGlzLnBsb3RSYW5nZShwb2ludCwgMClbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVmaW5lZCh0bykgJiYgaXNGaW5pdGUodG8pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4ID0gTWF0aC5tYXgobWF4LCB0byk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluID0gTWF0aC5taW4obWluLCB0byk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4geyBtaW46IG1pbiwgbWF4OiBtYXggfTtcbiAgICB9XG5cbiAgICB1cGRhdGVTdGFja1JhbmdlKCkge1xuICAgICAgICBjb25zdCB7IGlzU3RhY2tlZCwgc2VyaWVzOiBjaGFydFNlcmllcyB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBsaW1pdHNDYWNoZSA9IHt9O1xuXG4gICAgICAgIGlmIChpc1N0YWNrZWQpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hhcnRTZXJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzZXJpZXMgPSBjaGFydFNlcmllc1tpXTtcbiAgICAgICAgICAgICAgICBjb25zdCBheGlzTmFtZSA9IHNlcmllcy5heGlzO1xuICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGF4aXNOYW1lICsgc2VyaWVzLnN0YWNrO1xuXG4gICAgICAgICAgICAgICAgbGV0IGxpbWl0cyA9IGxpbWl0c0NhY2hlW2tleV07XG4gICAgICAgICAgICAgICAgaWYgKCFsaW1pdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgbGltaXRzID0gdGhpcy5zdGFja0xpbWl0cyhheGlzTmFtZSwgc2VyaWVzLnN0YWNrKTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlcnJvclRvdGFscyA9IHRoaXMuZXJyb3JUb3RhbHM7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvclRvdGFscykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yVG90YWxzLm5lZ2F0aXZlLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbWl0cy5taW4gPSBNYXRoLm1pbihsaW1pdHMubWluLCBzcGFyc2VBcnJheUxpbWl0cyhlcnJvclRvdGFscy5uZWdhdGl2ZSkubWluKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvclRvdGFscy5wb3NpdGl2ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW1pdHMubWF4ID0gTWF0aC5tYXgobGltaXRzLm1heCwgc3BhcnNlQXJyYXlMaW1pdHMoZXJyb3JUb3RhbHMucG9zaXRpdmUpLm1heCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAobGltaXRzLm1pbiAhPT0gTUFYX1ZBTFVFIHx8IGxpbWl0cy5tYXggIT09IE1JTl9WQUxVRSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGltaXRzQ2FjaGVba2V5XSA9IGxpbWl0cztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbWl0cyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAobGltaXRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmFsdWVBeGlzUmFuZ2VzW2F4aXNOYW1lXSA9IGxpbWl0cztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhZGRFcnJvckJhcihwb2ludCwgZGF0YSwgY2F0ZWdvcnlJeCkge1xuICAgICAgICBjb25zdCB7IHZhbHVlLCBzZXJpZXMsIHNlcmllc0l4IH0gPSBwb2ludDtcbiAgICAgICAgY29uc3QgZXJyb3JCYXJzID0gcG9pbnQub3B0aW9ucy5lcnJvckJhcnM7XG4gICAgICAgIGNvbnN0IGxvd1ZhbHVlID0gZGF0YS5maWVsZHNbRVJST1JfTE9XX0ZJRUxEXTtcbiAgICAgICAgY29uc3QgaGlnaFZhbHVlID0gZGF0YS5maWVsZHNbRVJST1JfSElHSF9GSUVMRF07XG4gICAgICAgIGxldCBlcnJvclJhbmdlO1xuXG4gICAgICAgIGlmIChpc051bWJlcihsb3dWYWx1ZSkgJiYgaXNOdW1iZXIoaGlnaFZhbHVlKSkge1xuICAgICAgICAgICAgZXJyb3JSYW5nZSA9IHsgbG93OiBsb3dWYWx1ZSwgaGlnaDogaGlnaFZhbHVlIH07XG4gICAgICAgIH0gZWxzZSBpZiAoZXJyb3JCYXJzICYmIGRlZmluZWQoZXJyb3JCYXJzLnZhbHVlKSkge1xuICAgICAgICAgICAgdGhpcy5zZXJpZXNFcnJvclJhbmdlcyA9IHRoaXMuc2VyaWVzRXJyb3JSYW5nZXMgfHwgW107XG4gICAgICAgICAgICB0aGlzLnNlcmllc0Vycm9yUmFuZ2VzW3Nlcmllc0l4XSA9IHRoaXMuc2VyaWVzRXJyb3JSYW5nZXNbc2VyaWVzSXhdIHx8XG4gICAgICAgICAgICAgICAgbmV3IEVycm9yUmFuZ2VDYWxjdWxhdG9yKGVycm9yQmFycy52YWx1ZSwgc2VyaWVzLCBWQUxVRSk7XG5cbiAgICAgICAgICAgIGVycm9yUmFuZ2UgPSB0aGlzLnNlcmllc0Vycm9yUmFuZ2VzW3Nlcmllc0l4XS5nZXRFcnJvclJhbmdlKHZhbHVlLCBlcnJvckJhcnMudmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVycm9yUmFuZ2UpIHtcbiAgICAgICAgICAgIHBvaW50LmxvdyA9IGVycm9yUmFuZ2UubG93O1xuICAgICAgICAgICAgcG9pbnQuaGlnaCA9IGVycm9yUmFuZ2UuaGlnaDtcbiAgICAgICAgICAgIHRoaXMuYWRkUG9pbnRFcnJvckJhcihwb2ludCwgY2F0ZWdvcnlJeCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhZGRQb2ludEVycm9yQmFyKHBvaW50LCBjYXRlZ29yeUl4KSB7XG4gICAgICAgIGNvbnN0IGlzVmVydGljYWwgPSAhdGhpcy5vcHRpb25zLmludmVydEF4ZXM7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBwb2ludC5vcHRpb25zLmVycm9yQmFycztcbiAgICAgICAgbGV0IHsgc2VyaWVzLCBsb3csIGhpZ2ggfSA9IHBvaW50O1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuaXNTdGFja2VkKSB7XG4gICAgICAgICAgICBjb25zdCBzdGFja2VkRXJyb3JSYW5nZSA9IHRoaXMuc3RhY2tlZEVycm9yUmFuZ2UocG9pbnQsIGNhdGVnb3J5SXgpO1xuICAgICAgICAgICAgbG93ID0gc3RhY2tlZEVycm9yUmFuZ2UubG93O1xuICAgICAgICAgICAgaGlnaCA9IHN0YWNrZWRFcnJvclJhbmdlLmhpZ2g7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBmaWVsZHMgPSB7IGNhdGVnb3J5SXg6IGNhdGVnb3J5SXgsIHNlcmllczogc2VyaWVzIH07XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVJhbmdlKHsgdmFsdWU6IGxvdyB9LCBmaWVsZHMpO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVSYW5nZSh7IHZhbHVlOiBoaWdoIH0sIGZpZWxkcyk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBlcnJvckJhciA9IG5ldyBDYXRlZ29yaWNhbEVycm9yQmFyKGxvdywgaGlnaCwgaXNWZXJ0aWNhbCwgdGhpcywgc2VyaWVzLCBvcHRpb25zKTtcbiAgICAgICAgcG9pbnQuZXJyb3JCYXJzID0gWyBlcnJvckJhciBdO1xuICAgICAgICBwb2ludC5hcHBlbmQoZXJyb3JCYXIpO1xuICAgIH1cblxuICAgIHN0YWNrZWRFcnJvclJhbmdlKHBvaW50LCBjYXRlZ29yeUl4KSB7XG4gICAgICAgIGNvbnN0IHBsb3RWYWx1ZSA9IHRoaXMucGxvdFJhbmdlKHBvaW50LCAwKVsxXSAtIHBvaW50LnZhbHVlO1xuICAgICAgICBjb25zdCBsb3cgPSBwb2ludC5sb3cgKyBwbG90VmFsdWU7XG4gICAgICAgIGNvbnN0IGhpZ2ggPSBwb2ludC5oaWdoICsgcGxvdFZhbHVlO1xuXG4gICAgICAgIHRoaXMuZXJyb3JUb3RhbHMgPSB0aGlzLmVycm9yVG90YWxzIHx8IHsgcG9zaXRpdmU6IFtdLCBuZWdhdGl2ZTogW10gfTtcblxuICAgICAgICBpZiAobG93IDwgMCkge1xuICAgICAgICAgICAgdGhpcy5lcnJvclRvdGFscy5uZWdhdGl2ZVtjYXRlZ29yeUl4XSA9IE1hdGgubWluKHRoaXMuZXJyb3JUb3RhbHMubmVnYXRpdmVbY2F0ZWdvcnlJeF0gfHwgMCwgbG93KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoaWdoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5lcnJvclRvdGFscy5wb3NpdGl2ZVtjYXRlZ29yeUl4XSA9IE1hdGgubWF4KHRoaXMuZXJyb3JUb3RhbHMucG9zaXRpdmVbY2F0ZWdvcnlJeF0gfHwgMCwgaGlnaCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4geyBsb3c6IGxvdywgaGlnaDogaGlnaCB9O1xuICAgIH1cblxuICAgIGFkZFZhbHVlKGRhdGEsIGZpZWxkcykge1xuICAgICAgICBjb25zdCB7IGNhdGVnb3J5SXgsIHNlcmllcywgc2VyaWVzSXggfSA9IGZpZWxkcztcblxuICAgICAgICBsZXQgY2F0ZWdvcnlQb2ludHMgPSB0aGlzLmNhdGVnb3J5UG9pbnRzW2NhdGVnb3J5SXhdO1xuICAgICAgICBpZiAoIWNhdGVnb3J5UG9pbnRzKSB7XG4gICAgICAgICAgICB0aGlzLmNhdGVnb3J5UG9pbnRzW2NhdGVnb3J5SXhdID0gY2F0ZWdvcnlQb2ludHMgPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBzZXJpZXNQb2ludHMgPSB0aGlzLnNlcmllc1BvaW50c1tzZXJpZXNJeF07XG4gICAgICAgIGlmICghc2VyaWVzUG9pbnRzKSB7XG4gICAgICAgICAgICB0aGlzLnNlcmllc1BvaW50c1tzZXJpZXNJeF0gPSBzZXJpZXNQb2ludHMgPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHBvaW50ID0gdGhpcy5jcmVhdGVQb2ludChkYXRhLCBmaWVsZHMpO1xuICAgICAgICBpZiAocG9pbnQpIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocG9pbnQsIGZpZWxkcyk7XG5cbiAgICAgICAgICAgIHBvaW50Lm93bmVyID0gdGhpcztcbiAgICAgICAgICAgIHBvaW50Lm5vdGVUZXh0ID0gZGF0YS5maWVsZHMubm90ZVRleHQ7XG4gICAgICAgICAgICBpZiAoIWRlZmluZWQocG9pbnQuZGF0YUl0ZW0pKSB7XG4gICAgICAgICAgICAgICAgcG9pbnQuZGF0YUl0ZW0gPSBzZXJpZXMuZGF0YVtjYXRlZ29yeUl4XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYWRkRXJyb3JCYXIocG9pbnQsIGRhdGEsIGNhdGVnb3J5SXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wb2ludHMucHVzaChwb2ludCk7XG4gICAgICAgIHNlcmllc1BvaW50cy5wdXNoKHBvaW50KTtcbiAgICAgICAgY2F0ZWdvcnlQb2ludHMucHVzaChwb2ludCk7XG5cbiAgICAgICAgdGhpcy51cGRhdGVSYW5nZShkYXRhLnZhbHVlRmllbGRzLCBmaWVsZHMpO1xuICAgIH1cblxuICAgIGV2YWxQb2ludE9wdGlvbnMob3B0aW9ucywgdmFsdWUsIGNhdGVnb3J5LCBjYXRlZ29yeUl4LCBzZXJpZXMsIHNlcmllc0l4KSB7XG4gICAgICAgIGNvbnN0IHN0YXRlID0geyBkZWZhdWx0czogc2VyaWVzLl9kZWZhdWx0cywgZXhjbHVkZWQ6IFsgXCJkYXRhXCIsIFwiYWdncmVnYXRlXCIsIFwiX2V2ZW50c1wiLCBcInRvb2x0aXBcIiwgXCJjb250ZW50XCIsIFwidGVtcGxhdGVcIiwgXCJ2aXN1YWxcIiwgXCJ0b2dnbGVcIiwgXCJfb3V0T2ZSYW5nZU1pblBvaW50XCIsIFwiX291dE9mUmFuZ2VNYXhQb2ludFwiIF0gfTtcblxuICAgICAgICBsZXQgZG9FdmFsID0gdGhpcy5fZXZhbFNlcmllc1tzZXJpZXNJeF07XG4gICAgICAgIGlmICghZGVmaW5lZChkb0V2YWwpKSB7XG4gICAgICAgICAgICB0aGlzLl9ldmFsU2VyaWVzW3Nlcmllc0l4XSA9IGRvRXZhbCA9IGV2YWxPcHRpb25zKG9wdGlvbnMsIHt9LCBzdGF0ZSwgdHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcG9pbnRPcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgaWYgKGRvRXZhbCkge1xuICAgICAgICAgICAgcG9pbnRPcHRpb25zID0gZGVlcEV4dGVuZCh7fSwgcG9pbnRPcHRpb25zKTtcbiAgICAgICAgICAgIGV2YWxPcHRpb25zKHBvaW50T3B0aW9ucywge1xuICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogY2F0ZWdvcnksXG4gICAgICAgICAgICAgICAgaW5kZXg6IGNhdGVnb3J5SXgsXG4gICAgICAgICAgICAgICAgc2VyaWVzOiBzZXJpZXMsXG4gICAgICAgICAgICAgICAgZGF0YUl0ZW06IHNlcmllcy5kYXRhW2NhdGVnb3J5SXhdXG4gICAgICAgICAgICB9LCBzdGF0ZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcG9pbnRPcHRpb25zO1xuICAgIH1cblxuICAgIHVwZGF0ZVJhbmdlKGRhdGEsIGZpZWxkcykge1xuICAgICAgICBjb25zdCBheGlzTmFtZSA9IGZpZWxkcy5zZXJpZXMuYXhpcztcbiAgICAgICAgY29uc3QgdmFsdWUgPSBkYXRhLnZhbHVlO1xuICAgICAgICBsZXQgYXhpc1JhbmdlID0gdGhpcy52YWx1ZUF4aXNSYW5nZXNbYXhpc05hbWVdO1xuXG4gICAgICAgIGlmIChpc0Zpbml0ZSh2YWx1ZSkgJiYgdmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGF4aXNSYW5nZSA9IHRoaXMudmFsdWVBeGlzUmFuZ2VzW2F4aXNOYW1lXSA9XG4gICAgICAgICAgICAgICAgYXhpc1JhbmdlIHx8IHsgbWluOiBNQVhfVkFMVUUsIG1heDogTUlOX1ZBTFVFIH07XG5cbiAgICAgICAgICAgIGF4aXNSYW5nZS5taW4gPSBNYXRoLm1pbihheGlzUmFuZ2UubWluLCB2YWx1ZSk7XG4gICAgICAgICAgICBheGlzUmFuZ2UubWF4ID0gTWF0aC5tYXgoYXhpc1JhbmdlLm1heCwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2VyaWVzVmFsdWVBeGlzKHNlcmllcykge1xuICAgICAgICBjb25zdCBwbG90QXJlYSA9IHRoaXMucGxvdEFyZWE7XG4gICAgICAgIGNvbnN0IGF4aXNOYW1lID0gc2VyaWVzLmF4aXM7XG4gICAgICAgIGNvbnN0IGF4aXMgPSBheGlzTmFtZSA/IHBsb3RBcmVhLm5hbWVkVmFsdWVBeGVzW2F4aXNOYW1lXSA6IHBsb3RBcmVhLnZhbHVlQXhpcztcblxuICAgICAgICBpZiAoIWF4aXMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuYWJsZSB0byBsb2NhdGUgdmFsdWUgYXhpcyB3aXRoIG5hbWUgXCIgKyBheGlzTmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYXhpcztcbiAgICB9XG5cbiAgICByZWZsb3codGFyZ2V0Qm94KSB7XG4gICAgICAgIGNvbnN0IGNhdGVnb3J5U2xvdHMgPSB0aGlzLmNhdGVnb3J5U2xvdHMgPSBbXTtcbiAgICAgICAgY29uc3QgY2hhcnRQb2ludHMgPSB0aGlzLnBvaW50cztcbiAgICAgICAgY29uc3QgY2F0ZWdvcnlBeGlzID0gdGhpcy5jYXRlZ29yeUF4aXM7XG4gICAgICAgIGxldCBwb2ludEl4ID0gMDtcblxuICAgICAgICB0aGlzLnRyYXZlcnNlRGF0YVBvaW50cygoZGF0YSwgZmllbGRzKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IGNhdGVnb3J5SXgsIHNlcmllczogY3VycmVudFNlcmllcyB9ID0gZmllbGRzO1xuXG4gICAgICAgICAgICBjb25zdCB2YWx1ZUF4aXMgPSB0aGlzLnNlcmllc1ZhbHVlQXhpcyhjdXJyZW50U2VyaWVzKTtcbiAgICAgICAgICAgIGNvbnN0IHBvaW50ID0gY2hhcnRQb2ludHNbcG9pbnRJeCsrXTtcblxuICAgICAgICAgICAgbGV0IGNhdGVnb3J5U2xvdCA9IGNhdGVnb3J5U2xvdHNbY2F0ZWdvcnlJeF07XG4gICAgICAgICAgICBpZiAoIWNhdGVnb3J5U2xvdCkge1xuICAgICAgICAgICAgICAgIGNhdGVnb3J5U2xvdHNbY2F0ZWdvcnlJeF0gPSBjYXRlZ29yeVNsb3QgPVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhdGVnb3J5U2xvdChjYXRlZ29yeUF4aXMsIGNhdGVnb3J5SXgsIHZhbHVlQXhpcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChwb2ludCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBsb3RSYW5nZSA9IHRoaXMucGxvdFJhbmdlKHBvaW50LCB2YWx1ZUF4aXMuc3RhcnRWYWx1ZSgpKTtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZVNsb3QgPSB0aGlzLnZhbHVlU2xvdCh2YWx1ZUF4aXMsIHBsb3RSYW5nZSk7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlU2xvdCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwb2ludFNsb3QgPSB0aGlzLnBvaW50U2xvdChjYXRlZ29yeVNsb3QsIHZhbHVlU2xvdCk7XG5cbiAgICAgICAgICAgICAgICAgICAgcG9pbnQuYWJvdmVBeGlzID0gdGhpcy5hYm92ZUF4aXMocG9pbnQsIHZhbHVlQXhpcyk7XG4gICAgICAgICAgICAgICAgICAgIHBvaW50LnN0YWNrVmFsdWUgPSBwbG90UmFuZ2VbMV07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5pc1N0YWNrZWQxMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvaW50LnBlcmNlbnRhZ2UgPSB0aGlzLnBsb3RWYWx1ZShwb2ludCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlZmxvd1BvaW50KHBvaW50LCBwb2ludFNsb3QpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBvaW50LnZpc2libGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMucmVmbG93Q2F0ZWdvcmllcyhjYXRlZ29yeVNsb3RzKTtcbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuY2xpcCAmJiB0aGlzLm9wdGlvbnMubGltaXRQb2ludHMgJiYgdGhpcy5wb2ludHMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLmxpbWl0UG9pbnRzKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmJveCA9IHRhcmdldEJveDtcbiAgICB9XG5cbiAgICB2YWx1ZVNsb3QodmFsdWVBeGlzLCBwbG90UmFuZ2UpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlQXhpcy5nZXRTbG90KHBsb3RSYW5nZVswXSwgcGxvdFJhbmdlWzFdLCAhdGhpcy5vcHRpb25zLmNsaXApO1xuICAgIH1cblxuICAgIGxpbWl0UG9pbnRzKCkge1xuICAgICAgICBjb25zdCBjYXRlZ29yeVBvaW50cyA9IHRoaXMuY2F0ZWdvcnlQb2ludHM7XG4gICAgICAgIGNvbnN0IHBvaW50cyA9IGNhdGVnb3J5UG9pbnRzWzBdLmNvbmNhdChsYXN0KGNhdGVnb3J5UG9pbnRzKSk7XG4gICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IHBvaW50cy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgICAgICBpZiAocG9pbnRzW2lkeF0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxpbWl0UG9pbnQocG9pbnRzW2lkeF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgbGltaXRQb2ludChwb2ludCkge1xuICAgICAgICBjb25zdCBsaW1pdHRlZFNsb3QgPSB0aGlzLmNhdGVnb3J5QXhpcy5saW1pdFNsb3QocG9pbnQuYm94KTtcbiAgICAgICAgaWYgKCFsaW1pdHRlZFNsb3QuZXF1YWxzKHBvaW50LmJveCkpIHtcbiAgICAgICAgICAgIHBvaW50LnJlZmxvdyhsaW1pdHRlZFNsb3QpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYWJvdmVBeGlzKHBvaW50LCB2YWx1ZUF4aXMpIHtcbiAgICAgICAgY29uc3QgYXhpc0Nyb3NzaW5nVmFsdWUgPSB0aGlzLmNhdGVnb3J5QXhpc0Nyb3NzaW5nVmFsdWUodmFsdWVBeGlzKTtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBwb2ludC52YWx1ZTtcblxuICAgICAgICByZXR1cm4gdmFsdWVBeGlzLm9wdGlvbnMucmV2ZXJzZSA/XG4gICAgICAgICAgICB2YWx1ZSA8IGF4aXNDcm9zc2luZ1ZhbHVlIDogdmFsdWUgPj0gYXhpc0Nyb3NzaW5nVmFsdWU7XG4gICAgfVxuXG4gICAgY2F0ZWdvcnlBeGlzQ3Jvc3NpbmdWYWx1ZSh2YWx1ZUF4aXMpIHtcbiAgICAgICAgY29uc3QgY2F0ZWdvcnlBeGlzID0gdGhpcy5jYXRlZ29yeUF4aXM7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB2YWx1ZUF4aXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgY3Jvc3NpbmdWYWx1ZXMgPSBbXS5jb25jYXQoXG4gICAgICAgICAgICBvcHRpb25zLmF4aXNDcm9zc2luZ1ZhbHVlcyB8fCBvcHRpb25zLmF4aXNDcm9zc2luZ1ZhbHVlXG4gICAgICAgICk7XG5cbiAgICAgICAgcmV0dXJuIGNyb3NzaW5nVmFsdWVzW2NhdGVnb3J5QXhpcy5heGlzSW5kZXggfHwgMF0gfHwgMDtcbiAgICB9XG5cbiAgICByZWZsb3dQb2ludChwb2ludCwgcG9pbnRTbG90KSB7XG4gICAgICAgIHBvaW50LnJlZmxvdyhwb2ludFNsb3QpO1xuICAgIH1cblxuICAgIHJlZmxvd0NhdGVnb3JpZXMoKSB7IH1cblxuICAgIHBvaW50U2xvdChjYXRlZ29yeVNsb3QsIHZhbHVlU2xvdCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBpbnZlcnRBeGVzID0gb3B0aW9ucy5pbnZlcnRBeGVzO1xuICAgICAgICBjb25zdCBzbG90WCA9IGludmVydEF4ZXMgPyB2YWx1ZVNsb3QgOiBjYXRlZ29yeVNsb3Q7XG4gICAgICAgIGNvbnN0IHNsb3RZID0gaW52ZXJ0QXhlcyA/IGNhdGVnb3J5U2xvdCA6IHZhbHVlU2xvdDtcblxuICAgICAgICByZXR1cm4gbmV3IEJveChzbG90WC54MSwgc2xvdFkueTEsIHNsb3RYLngyLCBzbG90WS55Mik7XG4gICAgfVxuXG4gICAgY2F0ZWdvcnlTbG90KGNhdGVnb3J5QXhpcywgY2F0ZWdvcnlJeCkge1xuICAgICAgICByZXR1cm4gY2F0ZWdvcnlBeGlzLmdldFNsb3QoY2F0ZWdvcnlJeCk7XG4gICAgfVxuXG4gICAgdHJhdmVyc2VEYXRhUG9pbnRzKGNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IHNlcmllcyA9IHRoaXMub3B0aW9ucy5zZXJpZXM7XG4gICAgICAgIGNvbnN0IGNvdW50ID0gY2F0ZWdvcmllc0NvdW50KHNlcmllcyk7XG4gICAgICAgIGNvbnN0IHNlcmllc0NvdW50ID0gc2VyaWVzLmxlbmd0aDtcblxuICAgICAgICBmb3IgKGxldCBzZXJpZXNJeCA9IDA7IHNlcmllc0l4IDwgc2VyaWVzQ291bnQ7IHNlcmllc0l4KyspIHtcbiAgICAgICAgICAgIHRoaXMuX291dE9mUmFuZ2VDYWxsYmFjayhzZXJpZXNbc2VyaWVzSXhdLCBcIl9vdXRPZlJhbmdlTWluUG9pbnRcIiwgc2VyaWVzSXgsIGNhbGxiYWNrKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGNhdGVnb3J5SXggPSAwOyBjYXRlZ29yeUl4IDwgY291bnQ7IGNhdGVnb3J5SXgrKykge1xuICAgICAgICAgICAgZm9yIChsZXQgc2VyaWVzSXggPSAwOyBzZXJpZXNJeCA8IHNlcmllc0NvdW50OyBzZXJpZXNJeCsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY3VycmVudFNlcmllcyA9IHNlcmllc1tzZXJpZXNJeF07XG4gICAgICAgICAgICAgICAgY29uc3QgY3VycmVudENhdGVnb3J5ID0gdGhpcy5jYXRlZ29yeUF4aXMuY2F0ZWdvcnlBdChjYXRlZ29yeUl4KTtcbiAgICAgICAgICAgICAgICBjb25zdCBwb2ludERhdGEgPSB0aGlzLl9iaW5kUG9pbnQoY3VycmVudFNlcmllcywgc2VyaWVzSXgsIGNhdGVnb3J5SXgpO1xuXG4gICAgICAgICAgICAgICAgY2FsbGJhY2socG9pbnREYXRhLCB7XG4gICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBjdXJyZW50Q2F0ZWdvcnksXG4gICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5SXg6IGNhdGVnb3J5SXgsXG4gICAgICAgICAgICAgICAgICAgIGNhdGVnb3JpZXNDb3VudDogY291bnQsXG4gICAgICAgICAgICAgICAgICAgIHNlcmllczogY3VycmVudFNlcmllcyxcbiAgICAgICAgICAgICAgICAgICAgc2VyaWVzSXg6IHNlcmllc0l4XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBzZXJpZXNJeCA9IDA7IHNlcmllc0l4IDwgc2VyaWVzQ291bnQ7IHNlcmllc0l4KyspIHtcbiAgICAgICAgICAgIHRoaXMuX291dE9mUmFuZ2VDYWxsYmFjayhzZXJpZXNbc2VyaWVzSXhdLCBcIl9vdXRPZlJhbmdlTWF4UG9pbnRcIiwgc2VyaWVzSXgsIGNhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9vdXRPZlJhbmdlQ2FsbGJhY2soc2VyaWVzLCBmaWVsZCwgc2VyaWVzSXgsIGNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IG91dE9mUmFuZ2VQb2ludCA9IHNlcmllc1tmaWVsZF07XG4gICAgICAgIGlmIChvdXRPZlJhbmdlUG9pbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhdGVnb3J5SXggPSBvdXRPZlJhbmdlUG9pbnQuY2F0ZWdvcnlJeDtcbiAgICAgICAgICAgIGNvbnN0IHBvaW50RGF0YSA9IHRoaXMuX2JpbmRQb2ludChzZXJpZXMsIHNlcmllc0l4LCBjYXRlZ29yeUl4LCBvdXRPZlJhbmdlUG9pbnQuaXRlbSk7XG5cbiAgICAgICAgICAgIGNhbGxiYWNrKHBvaW50RGF0YSwge1xuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBvdXRPZlJhbmdlUG9pbnQuY2F0ZWdvcnksXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnlJeDogY2F0ZWdvcnlJeCxcbiAgICAgICAgICAgICAgICBzZXJpZXM6IHNlcmllcyxcbiAgICAgICAgICAgICAgICBzZXJpZXNJeDogc2VyaWVzSXgsXG4gICAgICAgICAgICAgICAgZGF0YUl0ZW06IG91dE9mUmFuZ2VQb2ludC5pdGVtXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9iaW5kUG9pbnQoc2VyaWVzLCBzZXJpZXNJeCwgY2F0ZWdvcnlJeCwgaXRlbSkge1xuICAgICAgICBpZiAoIXRoaXMuX2JpbmRDYWNoZSkge1xuICAgICAgICAgICAgdGhpcy5fYmluZENhY2hlID0gW107XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgYmluZENhY2hlID0gdGhpcy5fYmluZENhY2hlW3Nlcmllc0l4XTtcbiAgICAgICAgaWYgKCFiaW5kQ2FjaGUpIHtcbiAgICAgICAgICAgIGJpbmRDYWNoZSA9IHRoaXMuX2JpbmRDYWNoZVtzZXJpZXNJeF0gPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBkYXRhID0gYmluZENhY2hlW2NhdGVnb3J5SXhdO1xuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICAgIGRhdGEgPSBiaW5kQ2FjaGVbY2F0ZWdvcnlJeF0gPSBTZXJpZXNCaW5kZXIuY3VycmVudC5iaW5kUG9pbnQoc2VyaWVzLCBjYXRlZ29yeUl4LCBpdGVtKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIGZvcm1hdFBvaW50VmFsdWUocG9pbnQsIGZvcm1hdCkge1xuICAgICAgICBpZiAocG9pbnQudmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcnRTZXJ2aWNlLmZvcm1hdC5hdXRvKGZvcm1hdCwgcG9pbnQudmFsdWUpO1xuICAgIH1cblxuICAgIHBvaW50VmFsdWUoZGF0YSkge1xuICAgICAgICByZXR1cm4gZGF0YS52YWx1ZUZpZWxkcy52YWx1ZTtcbiAgICB9XG59XG5cbnNldERlZmF1bHRPcHRpb25zKENhdGVnb3JpY2FsQ2hhcnQsIHtcbiAgICBzZXJpZXM6IFtdLFxuICAgIGludmVydEF4ZXM6IGZhbHNlLFxuICAgIGlzU3RhY2tlZDogZmFsc2UsXG4gICAgY2xpcDogdHJ1ZSxcbiAgICBsaW1pdFBvaW50czogdHJ1ZVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IENhdGVnb3JpY2FsQ2hhcnQ7XG4iLCJpbXBvcnQgeyBTRVJJRVNfQ0xJQ0ssIFNFUklFU19IT1ZFUiwgU0VSSUVTX0xFQVZFLCBTRVJJRVNfT1ZFUiB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBldmVudEVsZW1lbnQgfSBmcm9tICcuLi8uLi9jb21tb24nO1xuXG5jb25zdCBQb2ludEV2ZW50c01peGluID0ge1xuICAgIGNsaWNrOiBmdW5jdGlvbihjaGFydCwgZSkge1xuICAgICAgICByZXR1cm4gY2hhcnQudHJpZ2dlcihcbiAgICAgICAgICAgIFNFUklFU19DTElDSyxcbiAgICAgICAgICAgIHRoaXMuZXZlbnRBcmdzKGUpXG4gICAgICAgICk7XG4gICAgfSxcblxuICAgIGhvdmVyOiBmdW5jdGlvbihjaGFydCwgZSkge1xuICAgICAgICByZXR1cm4gY2hhcnQudHJpZ2dlcihcbiAgICAgICAgICAgIFNFUklFU19IT1ZFUixcbiAgICAgICAgICAgIHRoaXMuZXZlbnRBcmdzKGUpXG4gICAgICAgICk7XG4gICAgfSxcblxuICAgIG92ZXI6IGZ1bmN0aW9uKGNoYXJ0LCBlKSB7XG4gICAgICAgIHJldHVybiBjaGFydC50cmlnZ2VyKFxuICAgICAgICAgICAgU0VSSUVTX09WRVIsXG4gICAgICAgICAgICB0aGlzLmV2ZW50QXJncyhlKVxuICAgICAgICApO1xuICAgIH0sXG5cbiAgICBvdXQ6IGZ1bmN0aW9uKGNoYXJ0LCBlKSB7XG4gICAgICAgIHJldHVybiBjaGFydC50cmlnZ2VyKFxuICAgICAgICAgICAgU0VSSUVTX0xFQVZFLFxuICAgICAgICAgICAgdGhpcy5ldmVudEFyZ3MoZSlcbiAgICAgICAgKTtcbiAgICB9LFxuXG4gICAgZXZlbnRBcmdzOiBmdW5jdGlvbihlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogdGhpcy52YWx1ZSxcbiAgICAgICAgICAgIHBlcmNlbnRhZ2U6IHRoaXMucGVyY2VudGFnZSxcbiAgICAgICAgICAgIHN0YWNrVmFsdWU6IHRoaXMuc3RhY2tWYWx1ZSxcbiAgICAgICAgICAgIGNhdGVnb3J5OiB0aGlzLmNhdGVnb3J5LFxuICAgICAgICAgICAgc2VyaWVzOiB0aGlzLnNlcmllcyxcbiAgICAgICAgICAgIGRhdGFJdGVtOiB0aGlzLmRhdGFJdGVtLFxuICAgICAgICAgICAgcnVubmluZ1RvdGFsOiB0aGlzLnJ1bm5pbmdUb3RhbCxcbiAgICAgICAgICAgIHRvdGFsOiB0aGlzLnRvdGFsLFxuICAgICAgICAgICAgZWxlbWVudDogZXZlbnRFbGVtZW50KGUpLFxuICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogZSxcbiAgICAgICAgICAgIHBvaW50OiB0aGlzXG4gICAgICAgIH07XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgUG9pbnRFdmVudHNNaXhpbjsiLCJpbXBvcnQgeyBOb3RlIH0gZnJvbSAnLi4vLi4vY29yZSc7XG5pbXBvcnQgeyBkZWZpbmVkIH0gZnJvbSAnLi4vLi4vY29tbW9uJztcblxuY29uc3QgTm90ZU1peGluID0ge1xuICAgIGNyZWF0ZU5vdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zLm5vdGVzO1xuICAgICAgICBjb25zdCB0ZXh0ID0gdGhpcy5ub3RlVGV4dCB8fCBvcHRpb25zLmxhYmVsLnRleHQ7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMudmlzaWJsZSAhPT0gZmFsc2UgJiYgZGVmaW5lZCh0ZXh0KSAmJiB0ZXh0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLm5vdGUgPSBuZXcgTm90ZSh7XG4gICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMudmFsdWUsXG4gICAgICAgICAgICAgICAgdGV4dDogdGV4dCxcbiAgICAgICAgICAgICAgICBkYXRhSXRlbTogdGhpcy5kYXRhSXRlbSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogdGhpcy5jYXRlZ29yeSxcbiAgICAgICAgICAgICAgICBzZXJpZXM6IHRoaXMuc2VyaWVzXG4gICAgICAgICAgICB9LCB0aGlzLm9wdGlvbnMubm90ZXMsIHRoaXMub3duZXIuY2hhcnRTZXJ2aWNlKTtcblxuICAgICAgICAgICAgdGhpcy5hcHBlbmQodGhpcy5ub3RlKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IE5vdGVNaXhpbjsiLCJpbXBvcnQgeyBnZW9tZXRyeSBhcyBnZW9tLCBDb2xvciB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1kcmF3aW5nJztcblxuaW1wb3J0IHsgQ2hhcnRFbGVtZW50LCBUZXh0Qm94LCBTaGFwZUVsZW1lbnQsIEJveCwgUG9pbnQgfSBmcm9tICcuLi8uLi9jb3JlJztcblxuaW1wb3J0IFBvaW50RXZlbnRzTWl4aW4gZnJvbSAnLi4vbWl4aW5zL3BvaW50LWV2ZW50cy1taXhpbic7XG5pbXBvcnQgTm90ZU1peGluIGZyb20gJy4uL21peGlucy9ub3RlLW1peGluJztcbmltcG9ydCB7IExJTkVfTUFSS0VSX1NJWkUsIEZBREVJTiwgSU5JVElBTF9BTklNQVRJT05fRFVSQVRJT04sIEJPUkRFUl9CUklHSFRORVNTLCBUT09MVElQX09GRlNFVCwgQUJPVkUsIEJFTE9XIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcblxuaW1wb3J0IHsgV0hJVEUsIENJUkNMRSwgQ0VOVEVSLCBUT1AsIEJPVFRPTSwgTEVGVCwgSElHSExJR0hUX1pJTkRFWCB9IGZyb20gJy4uLy4uL2NvbW1vbi9jb25zdGFudHMnO1xuaW1wb3J0IHsgZGVlcEV4dGVuZCwgZGVmaW5lZCwgZ2V0VGVtcGxhdGUsIHZhbHVlT3JEZWZhdWx0LCBnZXRTcGFjaW5nIH0gZnJvbSAnLi4vLi4vY29tbW9uJztcblxuY2xhc3MgTGluZVBvaW50IGV4dGVuZHMgQ2hhcnRFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZSwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5hYm92ZUF4aXMgPSB2YWx1ZU9yRGVmYXVsdCh0aGlzLm9wdGlvbnMuYWJvdmVBeGlzLCB0cnVlKTtcbiAgICAgICAgdGhpcy50b29sdGlwVHJhY2tpbmcgPSB0cnVlO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyBtYXJrZXJzLCBsYWJlbHMgfSA9IHRoaXMub3B0aW9ucztcblxuICAgICAgICBpZiAodGhpcy5fcmVuZGVyZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3JlbmRlcmVkID0gdHJ1ZTtcblxuICAgICAgICBpZiAobWFya2Vycy52aXNpYmxlICYmIG1hcmtlcnMuc2l6ZSkge1xuICAgICAgICAgICAgdGhpcy5tYXJrZXIgPSB0aGlzLmNyZWF0ZU1hcmtlcigpO1xuICAgICAgICAgICAgdGhpcy5hcHBlbmQodGhpcy5tYXJrZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxhYmVscy52aXNpYmxlKSB7XG4gICAgICAgICAgICBjb25zdCBsYWJlbFRlbXBsYXRlID0gZ2V0VGVtcGxhdGUobGFiZWxzKTtcbiAgICAgICAgICAgIGNvbnN0IHBvaW50RGF0YSA9IHRoaXMucG9pbnREYXRhKCk7XG4gICAgICAgICAgICBsZXQgbGFiZWxUZXh0ID0gdGhpcy52YWx1ZTtcbiAgICAgICAgICAgIGlmIChsYWJlbFRlbXBsYXRlKSB7XG4gICAgICAgICAgICAgICAgbGFiZWxUZXh0ID0gbGFiZWxUZW1wbGF0ZShwb2ludERhdGEpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsYWJlbHMuZm9ybWF0KSB7XG4gICAgICAgICAgICAgICAgbGFiZWxUZXh0ID0gdGhpcy5mb3JtYXRWYWx1ZShsYWJlbHMuZm9ybWF0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubGFiZWwgPSBuZXcgVGV4dEJveChsYWJlbFRleHQsXG4gICAgICAgICAgICAgICAgZGVlcEV4dGVuZCh7XG4gICAgICAgICAgICAgICAgICAgIGFsaWduOiBDRU5URVIsXG4gICAgICAgICAgICAgICAgICAgIHZBbGlnbjogQ0VOVEVSLFxuICAgICAgICAgICAgICAgICAgICBtYXJnaW46IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlZnQ6IDUsXG4gICAgICAgICAgICAgICAgICAgICAgICByaWdodDogNVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB6SW5kZXg6IHZhbHVlT3JEZWZhdWx0KGxhYmVscy56SW5kZXgsIHRoaXMuc2VyaWVzLnpJbmRleClcbiAgICAgICAgICAgICAgICB9LCBsYWJlbHMpLFxuICAgICAgICAgICAgICAgIHBvaW50RGF0YVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuYXBwZW5kKHRoaXMubGFiZWwpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jcmVhdGVOb3RlKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuZXJyb3JCYXIpIHtcbiAgICAgICAgICAgIHRoaXMuYXBwZW5kKHRoaXMuZXJyb3JCYXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbWFya2VyQm9yZGVyKCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zLm1hcmtlcnM7XG4gICAgICAgIGNvbnN0IGJhY2tncm91bmQgPSBvcHRpb25zLmJhY2tncm91bmQ7XG4gICAgICAgIGNvbnN0IGJvcmRlciA9IGRlZXBFeHRlbmQoeyBjb2xvcjogdGhpcy5jb2xvciB9LCBvcHRpb25zLmJvcmRlcik7XG5cbiAgICAgICAgaWYgKCFkZWZpbmVkKGJvcmRlci5jb2xvcikpIHtcbiAgICAgICAgICAgIGJvcmRlci5jb2xvciA9IG5ldyBDb2xvcihiYWNrZ3JvdW5kKS5icmlnaHRuZXNzKEJPUkRFUl9CUklHSFRORVNTKS50b0hleCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGJvcmRlcjtcbiAgICB9XG5cbiAgICBjcmVhdGVWaXN1YWwoKSB7fVxuXG4gICAgY3JlYXRlTWFya2VyKCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zLm1hcmtlcnM7XG4gICAgICAgIGNvbnN0IG1hcmtlciA9IG5ldyBTaGFwZUVsZW1lbnQoe1xuICAgICAgICAgICAgdHlwZTogb3B0aW9ucy50eXBlLFxuICAgICAgICAgICAgd2lkdGg6IG9wdGlvbnMuc2l6ZSxcbiAgICAgICAgICAgIGhlaWdodDogb3B0aW9ucy5zaXplLFxuICAgICAgICAgICAgcm90YXRpb246IG9wdGlvbnMucm90YXRpb24sXG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiBvcHRpb25zLmJhY2tncm91bmQsXG4gICAgICAgICAgICBib3JkZXI6IHRoaXMubWFya2VyQm9yZGVyKCksXG4gICAgICAgICAgICBvcGFjaXR5OiB0aGlzLnNlcmllcy5vcGFjaXR5IHx8IG9wdGlvbnMub3BhY2l0eSxcbiAgICAgICAgICAgIHpJbmRleDogdmFsdWVPckRlZmF1bHQob3B0aW9ucy56SW5kZXgsIHRoaXMuc2VyaWVzLnpJbmRleCksXG4gICAgICAgICAgICBhbmltYXRpb246IG9wdGlvbnMuYW5pbWF0aW9uLFxuICAgICAgICAgICAgdmlzdWFsOiBvcHRpb25zLnZpc3VhbFxuICAgICAgICB9LCB7XG4gICAgICAgICAgICBkYXRhSXRlbTogdGhpcy5kYXRhSXRlbSxcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLnZhbHVlLFxuICAgICAgICAgICAgc2VyaWVzOiB0aGlzLnNlcmllcyxcbiAgICAgICAgICAgIGNhdGVnb3J5OiB0aGlzLmNhdGVnb3J5XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBtYXJrZXI7XG4gICAgfVxuXG4gICAgbWFya2VyQm94KCkge1xuICAgICAgICBpZiAoIXRoaXMubWFya2VyKSB7XG4gICAgICAgICAgICB0aGlzLm1hcmtlciA9IHRoaXMuY3JlYXRlTWFya2VyKCk7XG4gICAgICAgICAgICB0aGlzLm1hcmtlci5yZWZsb3codGhpcy5fY2hpbGRCb3gpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMubWFya2VyLmJveDtcbiAgICB9XG5cbiAgICByZWZsb3codGFyZ2V0Qm94KSB7XG4gICAgICAgIGNvbnN0IHsgb3B0aW9ucywgYWJvdmVBeGlzIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB2ZXJ0aWNhbCA9IG9wdGlvbnMudmVydGljYWw7XG5cbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcblxuICAgICAgICB0aGlzLmJveCA9IHRhcmdldEJveDtcbiAgICAgICAgY29uc3QgY2hpbGRCb3ggPSB0YXJnZXRCb3guY2xvbmUoKTtcblxuICAgICAgICBpZiAodmVydGljYWwpIHtcbiAgICAgICAgICAgIGlmIChhYm92ZUF4aXMpIHtcbiAgICAgICAgICAgICAgICBjaGlsZEJveC55MSAtPSBjaGlsZEJveC5oZWlnaHQoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2hpbGRCb3gueTIgKz0gY2hpbGRCb3guaGVpZ2h0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoYWJvdmVBeGlzKSB7XG4gICAgICAgICAgICAgICAgY2hpbGRCb3gueDEgKz0gY2hpbGRCb3gud2lkdGgoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2hpbGRCb3gueDIgLT0gY2hpbGRCb3gud2lkdGgoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2NoaWxkQm94ID0gY2hpbGRCb3g7XG4gICAgICAgIGlmICh0aGlzLm1hcmtlcikge1xuICAgICAgICAgICAgdGhpcy5tYXJrZXIucmVmbG93KGNoaWxkQm94KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucmVmbG93TGFiZWwoY2hpbGRCb3gpO1xuXG4gICAgICAgIGlmICh0aGlzLmVycm9yQmFycykge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmVycm9yQmFycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMuZXJyb3JCYXJzW2ldLnJlZmxvdyhjaGlsZEJveCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5ub3RlKSB7XG4gICAgICAgICAgICBsZXQgbm90ZVRhcmdldEJveCA9IHRoaXMubWFya2VyQm94KCk7XG5cbiAgICAgICAgICAgIGlmICghKG9wdGlvbnMubWFya2Vycy52aXNpYmxlICYmIG9wdGlvbnMubWFya2Vycy5zaXplKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNlbnRlciA9IG5vdGVUYXJnZXRCb3guY2VudGVyKCk7XG4gICAgICAgICAgICAgICAgbm90ZVRhcmdldEJveCA9IG5ldyBCb3goY2VudGVyLngsIGNlbnRlci55LCBjZW50ZXIueCwgY2VudGVyLnkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLm5vdGUucmVmbG93KG5vdGVUYXJnZXRCb3gpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVmbG93TGFiZWwoYm94KSB7XG4gICAgICAgIGNvbnN0IHsgb3B0aW9ucywgbGFiZWwgfSA9IHRoaXM7XG4gICAgICAgIGxldCBhbmNob3IgPSBvcHRpb25zLmxhYmVscy5wb3NpdGlvbjtcblxuICAgICAgICBpZiAobGFiZWwpIHtcbiAgICAgICAgICAgIGFuY2hvciA9IGFuY2hvciA9PT0gQUJPVkUgPyBUT1AgOiBhbmNob3I7XG4gICAgICAgICAgICBhbmNob3IgPSBhbmNob3IgPT09IEJFTE9XID8gQk9UVE9NIDogYW5jaG9yO1xuXG4gICAgICAgICAgICBsYWJlbC5yZWZsb3coYm94KTtcbiAgICAgICAgICAgIGxhYmVsLmJveC5hbGlnblRvKHRoaXMubWFya2VyQm94KCksIGFuY2hvcik7XG4gICAgICAgICAgICBsYWJlbC5yZWZsb3cobGFiZWwuYm94KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNyZWF0ZUhpZ2hsaWdodCgpIHtcbiAgICAgICAgY29uc3QgbWFya2VycyA9IHRoaXMub3B0aW9ucy5oaWdobGlnaHQubWFya2VycztcbiAgICAgICAgY29uc3QgZGVmYXVsdENvbG9yID0gdGhpcy5tYXJrZXJCb3JkZXIoKS5jb2xvcjtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucy5tYXJrZXJzO1xuICAgICAgICBjb25zdCBzaXplID0gb3B0aW9ucy5zaXplICsgKG9wdGlvbnMuYm9yZGVyLndpZHRoIHx8IDApICsgKG1hcmtlcnMuYm9yZGVyLndpZHRoIHx8IDApO1xuXG4gICAgICAgIGNvbnN0IHNoYWRvdyA9IG5ldyBTaGFwZUVsZW1lbnQoe1xuICAgICAgICAgICAgdHlwZTogb3B0aW9ucy50eXBlLFxuICAgICAgICAgICAgd2lkdGg6IHNpemUsXG4gICAgICAgICAgICBoZWlnaHQ6IHNpemUsXG4gICAgICAgICAgICByb3RhdGlvbjogb3B0aW9ucy5yb3RhdGlvbixcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IG1hcmtlcnMuY29sb3IgfHwgZGVmYXVsdENvbG9yLFxuICAgICAgICAgICAgYm9yZGVyOiB7XG4gICAgICAgICAgICAgICAgY29sb3I6IG1hcmtlcnMuYm9yZGVyLmNvbG9yLFxuICAgICAgICAgICAgICAgIHdpZHRoOiBtYXJrZXJzLmJvcmRlci53aWR0aCxcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiB2YWx1ZU9yRGVmYXVsdChtYXJrZXJzLmJvcmRlci5vcGFjaXR5LCAxKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9wYWNpdHk6IHZhbHVlT3JEZWZhdWx0KG1hcmtlcnMub3BhY2l0eSwgMSlcbiAgICAgICAgfSk7XG4gICAgICAgIHNoYWRvdy5yZWZsb3codGhpcy5fY2hpbGRCb3gpO1xuXG4gICAgICAgIHJldHVybiBzaGFkb3cuZ2V0RWxlbWVudCgpO1xuICAgIH1cblxuICAgIGhpZ2hsaWdodFZpc3VhbCgpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLm1hcmtlciB8fCB7fSkudmlzdWFsO1xuICAgIH1cblxuICAgIGhpZ2hsaWdodFZpc3VhbEFyZ3MoKSB7XG4gICAgICAgIGNvbnN0IG1hcmtlciA9IHRoaXMubWFya2VyO1xuICAgICAgICBsZXQgdmlzdWFsLCByZWN0O1xuXG4gICAgICAgIGlmIChtYXJrZXIpIHtcbiAgICAgICAgICAgIHJlY3QgPSBtYXJrZXIucGFkZGluZ0JveC50b1JlY3QoKTtcbiAgICAgICAgICAgIHZpc3VhbCA9IG1hcmtlci52aXN1YWw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBzaXplID0gdGhpcy5vcHRpb25zLm1hcmtlcnMuc2l6ZTtcbiAgICAgICAgICAgIGNvbnN0IGhhbGZTaXplID0gc2l6ZSAvIDI7XG4gICAgICAgICAgICBjb25zdCBjZW50ZXIgPSB0aGlzLmJveC5jZW50ZXIoKTtcbiAgICAgICAgICAgIHJlY3QgPSBuZXcgZ2VvbS5SZWN0KFsgY2VudGVyLnggLSBoYWxmU2l6ZSwgY2VudGVyLnkgLSBoYWxmU2l6ZSBdLCBbIHNpemUsIHNpemUgXSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgb3B0aW9uczogdGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgcmVjdDogcmVjdCxcbiAgICAgICAgICAgIHZpc3VhbDogdmlzdWFsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdG9vbHRpcEFuY2hvcigpIHtcbiAgICAgICAgY29uc3QgbWFya2VyQm94ID0gdGhpcy5tYXJrZXJCb3goKTtcbiAgICAgICAgY29uc3QgY2xpcEJveCA9IHRoaXMub3duZXIucGFuZS5jbGlwQm94KCk7XG4gICAgICAgIGNvbnN0IHNob3dUb29sdGlwID0gIWNsaXBCb3ggfHwgY2xpcEJveC5vdmVybGFwcyhtYXJrZXJCb3gpO1xuXG4gICAgICAgIGlmIChzaG93VG9vbHRpcCkge1xuICAgICAgICAgICAgY29uc3QgeCA9IG1hcmtlckJveC54MiArIFRPT0xUSVBfT0ZGU0VUO1xuICAgICAgICAgICAgY29uc3QgaG9yaXpvbnRhbEFsaWduID0gTEVGVDtcbiAgICAgICAgICAgIGxldCB5LCB2ZXJ0aWNhbEFsaWduO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5hYm92ZUF4aXMpIHtcbiAgICAgICAgICAgICAgICB5ID0gbWFya2VyQm94LnkxO1xuICAgICAgICAgICAgICAgIHZlcnRpY2FsQWxpZ24gPSBCT1RUT007XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHkgPSBtYXJrZXJCb3gueTI7XG4gICAgICAgICAgICAgICAgdmVydGljYWxBbGlnbiA9IFRPUDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBwb2ludDogbmV3IFBvaW50KHgsIHkpLFxuICAgICAgICAgICAgICAgIGFsaWduOiB7XG4gICAgICAgICAgICAgICAgICAgIGhvcml6b250YWw6IGhvcml6b250YWxBbGlnbixcbiAgICAgICAgICAgICAgICAgICAgdmVydGljYWw6IHZlcnRpY2FsQWxpZ25cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9ybWF0VmFsdWUoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLm93bmVyLmZvcm1hdFBvaW50VmFsdWUodGhpcywgZm9ybWF0KTtcbiAgICB9XG5cbiAgICBvdmVybGFwc0JveChib3gpIHtcbiAgICAgICAgY29uc3QgbWFya2VyQm94ID0gdGhpcy5tYXJrZXJCb3goKTtcbiAgICAgICAgcmV0dXJuIG1hcmtlckJveC5vdmVybGFwcyhib3gpO1xuICAgIH1cblxuICAgIHVuY2xpcEVsZW1lbnRzKCkge1xuICAgICAgICBpZiAodGhpcy5sYWJlbCkge1xuICAgICAgICAgICAgdGhpcy5sYWJlbC5vcHRpb25zLm5vY2xpcCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5ub3RlKSB7XG4gICAgICAgICAgICB0aGlzLm5vdGUub3B0aW9ucy5ub2NsaXAgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcG9pbnREYXRhKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGF0YUl0ZW06IHRoaXMuZGF0YUl0ZW0sXG4gICAgICAgICAgICBjYXRlZ29yeTogdGhpcy5jYXRlZ29yeSxcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLnZhbHVlLFxuICAgICAgICAgICAgcGVyY2VudGFnZTogdGhpcy5wZXJjZW50YWdlLFxuICAgICAgICAgICAgc3RhY2tWYWx1ZTogdGhpcy5zdGFja1ZhbHVlLFxuICAgICAgICAgICAgc2VyaWVzOiB0aGlzLnNlcmllc1xuICAgICAgICB9O1xuICAgIH1cbn1cblxuTGluZVBvaW50LnByb3RvdHlwZS5kZWZhdWx0cyA9IHtcbiAgICB2ZXJ0aWNhbDogdHJ1ZSxcbiAgICBtYXJrZXJzOiB7XG4gICAgICAgIHZpc2libGU6IHRydWUsXG4gICAgICAgIGJhY2tncm91bmQ6IFdISVRFLFxuICAgICAgICBzaXplOiBMSU5FX01BUktFUl9TSVpFLFxuICAgICAgICB0eXBlOiBDSVJDTEUsXG4gICAgICAgIGJvcmRlcjoge1xuICAgICAgICAgICAgd2lkdGg6IDJcbiAgICAgICAgfSxcbiAgICAgICAgb3BhY2l0eTogMVxuICAgIH0sXG4gICAgbGFiZWxzOiB7XG4gICAgICAgIHZpc2libGU6IGZhbHNlLFxuICAgICAgICBwb3NpdGlvbjogQUJPVkUsXG4gICAgICAgIG1hcmdpbjogZ2V0U3BhY2luZygzKSxcbiAgICAgICAgcGFkZGluZzogZ2V0U3BhY2luZyg0KSxcbiAgICAgICAgYW5pbWF0aW9uOiB7XG4gICAgICAgICAgICB0eXBlOiBGQURFSU4sXG4gICAgICAgICAgICBkZWxheTogSU5JVElBTF9BTklNQVRJT05fRFVSQVRJT05cbiAgICAgICAgfVxuICAgIH0sXG4gICAgbm90ZXM6IHtcbiAgICAgICAgbGFiZWw6IHt9XG4gICAgfSxcbiAgICBoaWdobGlnaHQ6IHtcbiAgICAgICAgbWFya2Vyczoge1xuICAgICAgICAgICAgYm9yZGVyOiB7XG4gICAgICAgICAgICAgICAgY29sb3I6IFwiI2ZmZlwiLFxuICAgICAgICAgICAgICAgIHdpZHRoOiAyXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHpJbmRleDogSElHSExJR0hUX1pJTkRFWFxuICAgIH0sXG4gICAgZXJyb3JCYXJzOiB7XG4gICAgICAgIGxpbmU6IHtcbiAgICAgICAgICAgIHdpZHRoOiAxXG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5kZWVwRXh0ZW5kKExpbmVQb2ludC5wcm90b3R5cGUsIFBvaW50RXZlbnRzTWl4aW4pO1xuZGVlcEV4dGVuZChMaW5lUG9pbnQucHJvdG90eXBlLCBOb3RlTWl4aW4pO1xuXG5leHBvcnQgZGVmYXVsdCBMaW5lUG9pbnQ7XG4iLCJpbXBvcnQgeyBkcmF3aW5nIGFzIGRyYXcgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tZHJhd2luZyc7XG5cbmltcG9ydCB7IENoYXJ0RWxlbWVudCB9IGZyb20gJy4uLy4uL2NvcmUnO1xuXG5pbXBvcnQgeyBkZWZpbmVkLCBpc0Z1bmN0aW9uLCBzZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5cbmNsYXNzIExpbmVTZWdtZW50IGV4dGVuZHMgQ2hhcnRFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcihsaW5lUG9pbnRzLCBzZXJpZXMsIHNlcmllc0l4KSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5saW5lUG9pbnRzID0gbGluZVBvaW50cztcbiAgICAgICAgdGhpcy5zZXJpZXMgPSBzZXJpZXM7XG4gICAgICAgIHRoaXMuc2VyaWVzSXggPSBzZXJpZXNJeDtcbiAgICB9XG5cbiAgICBwb2ludHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvR2VvbWV0cnlQb2ludHModGhpcy5saW5lUG9pbnRzKTtcbiAgICB9XG5cbiAgICB0b0dlb21ldHJ5UG9pbnRzKHBvaW50cykge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbmd0aCA9IHBvaW50cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHBvaW50c1tpXSAmJiBwb2ludHNbaV0udmlzaWJsZSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChwb2ludHNbaV0uX2NoaWxkQm94LnRvUmVjdCgpLmNlbnRlcigpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgY3JlYXRlVmlzdWFsKCkge1xuICAgICAgICBjb25zdCBjdXN0b21WaXN1YWwgPSB0aGlzLnNlcmllcy52aXN1YWw7XG4gICAgICAgIGlmIChjdXN0b21WaXN1YWwpIHtcbiAgICAgICAgICAgIHRoaXMudmlzdWFsID0gY3VzdG9tVmlzdWFsKHtcbiAgICAgICAgICAgICAgICBwb2ludHM6IHRoaXMudG9HZW9tZXRyeVBvaW50cyh0aGlzLmxpbmVQb2ludHMpLFxuICAgICAgICAgICAgICAgIHNlcmllczogdGhpcy5zZXJpZXMsXG4gICAgICAgICAgICAgICAgc2VuZGVyOiB0aGlzLmdldFNlbmRlcigpLFxuICAgICAgICAgICAgICAgIGNyZWF0ZVZpc3VhbDogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlZ21lbnRWaXN1YWwoKTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52aXN1YWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAodGhpcy52aXN1YWwgJiYgIWRlZmluZWQodGhpcy52aXN1YWwub3B0aW9ucy56SW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy52aXN1YWwub3B0aW9ucy56SW5kZXggPSB0aGlzLnNlcmllcy56SW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNlZ21lbnRWaXN1YWwoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNlZ21lbnRWaXN1YWwoKSB7XG4gICAgICAgIGNvbnN0IHsgb3B0aW9ucywgc2VyaWVzIH0gPSB0aGlzO1xuICAgICAgICBsZXQgeyBjb2xvciwgX2RlZmF1bHRzOiBkZWZhdWx0cyB9ID0gc2VyaWVzO1xuXG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKGNvbG9yKSAmJiBkZWZhdWx0cykge1xuICAgICAgICAgICAgY29sb3IgPSBkZWZhdWx0cy5jb2xvcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGxpbmUgPSBkcmF3LlBhdGguZnJvbVBvaW50cyh0aGlzLnBvaW50cygpLCB7XG4gICAgICAgICAgICBzdHJva2U6IHtcbiAgICAgICAgICAgICAgICBjb2xvcjogY29sb3IsXG4gICAgICAgICAgICAgICAgd2lkdGg6IHNlcmllcy53aWR0aCxcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiBzZXJpZXMub3BhY2l0eSxcbiAgICAgICAgICAgICAgICBkYXNoVHlwZTogc2VyaWVzLmRhc2hUeXBlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgekluZGV4OiBzZXJpZXMuekluZGV4XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChvcHRpb25zLmNsb3NlZCkge1xuICAgICAgICAgICAgbGluZS5jbG9zZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy52aXN1YWwgPSBsaW5lO1xuICAgIH1cblxuICAgIGFsaWFzRm9yKGUsIGNvb3Jkcykge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQuZ2V0TmVhcmVzdFBvaW50KGNvb3Jkcy54LCBjb29yZHMueSwgdGhpcy5zZXJpZXNJeCk7XG4gICAgfVxufVxuXG5zZXREZWZhdWx0T3B0aW9ucyhMaW5lU2VnbWVudCwge1xuICAgIGNsb3NlZDogZmFsc2Vcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBMaW5lU2VnbWVudDsiLCJpbXBvcnQgeyBnZW9tZXRyeSBhcyBnZW9tIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWRyYXdpbmcnO1xuXG5pbXBvcnQgeyBsYXN0IH0gZnJvbSAnLi4vLi4vY29tbW9uJztcbmltcG9ydCB7IFgsIFkgfSBmcm9tICcuLi8uLi9jb21tb24vY29uc3RhbnRzJztcblxuY29uc3QgU3RlcExpbmVNaXhpbiA9IHtcbiAgICBjYWxjdWxhdGVTdGVwUG9pbnRzOiBmdW5jdGlvbihwb2ludHMpIHtcbiAgICAgICAgY29uc3QgY2F0ZWdvcnlBeGlzID0gdGhpcy5wYXJlbnQucGxvdEFyZWEuc2VyaWVzQ2F0ZWdvcnlBeGlzKHRoaXMuc2VyaWVzKTtcbiAgICAgICAgY29uc3QgeyBqdXN0aWZpZWQsIHZlcnRpY2FsLCByZXZlcnNlIH0gPSBjYXRlZ29yeUF4aXMub3B0aW9ucztcblxuICAgICAgICBjb25zdCBzdGVwQXhpcyA9IHZlcnRpY2FsID8gWCA6IFk7XG4gICAgICAgIGNvbnN0IGF4aXMgPSB2ZXJ0aWNhbCA/IFkgOiBYO1xuICAgICAgICBjb25zdCBzdGVwRGlyID0gcmV2ZXJzZSA/IDIgOiAxO1xuICAgICAgICBjb25zdCBkaXIgPSBzdGVwRGlyO1xuXG4gICAgICAgIGxldCBwcmV2aW91c1BvaW50ID0gdG9HZW9tZXRyeVBvaW50KHBvaW50c1swXSwgc3RlcEF4aXMsIHN0ZXBEaXIsIGF4aXMsIGRpcik7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFsgcHJldmlvdXNQb2ludCBdO1xuXG4gICAgICAgIGZvciAobGV0IGlkeCA9IDE7IGlkeCA8IHBvaW50cy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgICAgICBjb25zdCBwb2ludCA9IHRvR2VvbWV0cnlQb2ludChwb2ludHNbaWR4XSwgc3RlcEF4aXMsIHN0ZXBEaXIsIGF4aXMsIGRpcik7XG5cbiAgICAgICAgICAgIGlmIChwcmV2aW91c1BvaW50W3N0ZXBBeGlzXSAhPT0gcG9pbnRbc3RlcEF4aXNdKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RlcFBvaW50ID0gbmV3IGdlb20uUG9pbnQoKTtcbiAgICAgICAgICAgICAgICBzdGVwUG9pbnRbc3RlcEF4aXNdID0gcHJldmlvdXNQb2ludFtzdGVwQXhpc107XG4gICAgICAgICAgICAgICAgc3RlcFBvaW50W2F4aXNdID0gcG9pbnRbYXhpc107XG5cbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChzdGVwUG9pbnQsIHBvaW50KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcHJldmlvdXNQb2ludCA9IHBvaW50O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFqdXN0aWZpZWQpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHRvR2VvbWV0cnlQb2ludChsYXN0KHBvaW50cyksIHN0ZXBBeGlzLCBzdGVwRGlyLCBheGlzLCByZXZlcnNlID8gMSA6IDIpKTtcbiAgICAgICAgfSBlbHNlIGlmIChwcmV2aW91c1BvaW50ICE9PSBsYXN0KHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKHByZXZpb3VzUG9pbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgIH1cbn07XG5cbmZ1bmN0aW9uIHRvR2VvbWV0cnlQb2ludChsaW50UG9pbnQsIHN0ZXBBeGlzLCBzdGVwRGlyLCBheGlzLCBkaXIpIHtcbiAgICBjb25zdCBib3ggPSBsaW50UG9pbnQuYm94O1xuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBnZW9tLlBvaW50KCk7XG5cbiAgICByZXN1bHRbc3RlcEF4aXNdID0gYm94W3N0ZXBBeGlzICsgc3RlcERpcl07XG4gICAgcmVzdWx0W2F4aXNdID0gYm94W2F4aXMgKyBkaXJdO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgU3RlcExpbmVNaXhpbjsiLCJpbXBvcnQgTGluZVNlZ21lbnQgZnJvbSAnLi9saW5lLXNlZ21lbnQnO1xuaW1wb3J0IFN0ZXBMaW5lTWl4aW4gZnJvbSAnLi9zdGVwLWxpbmUtbWl4aW4nO1xuaW1wb3J0IHsgZGVlcEV4dGVuZCB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5cbmNsYXNzIFN0ZXBMaW5lU2VnbWVudCBleHRlbmRzIExpbmVTZWdtZW50IHtcbiAgICBwb2ludHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhbGN1bGF0ZVN0ZXBQb2ludHModGhpcy5saW5lUG9pbnRzKTtcbiAgICB9XG59XG5cbmRlZXBFeHRlbmQoU3RlcExpbmVTZWdtZW50LnByb3RvdHlwZSwgU3RlcExpbmVNaXhpbik7XG5cbmV4cG9ydCBkZWZhdWx0IFN0ZXBMaW5lU2VnbWVudDsiLCJpbXBvcnQgeyBkcmF3aW5nIGFzIGRyYXcgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tZHJhd2luZyc7XG5cbmltcG9ydCBMaW5lU2VnbWVudCBmcm9tICcuL2xpbmUtc2VnbWVudCc7XG5cbmltcG9ydCB7IEN1cnZlUHJvY2Vzc29yIH0gZnJvbSAnLi4vLi4vY29yZSc7XG5cbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuLi8uLi9jb21tb24nO1xuXG5jbGFzcyBTcGxpbmVTZWdtZW50IGV4dGVuZHMgTGluZVNlZ21lbnQge1xuICAgIHNlZ21lbnRWaXN1YWwoKSB7XG4gICAgICAgIGNvbnN0IHNlcmllcyA9IHRoaXMuc2VyaWVzO1xuICAgICAgICBjb25zdCBkZWZhdWx0cyA9IHNlcmllcy5fZGVmYXVsdHM7XG4gICAgICAgIGxldCBjb2xvciA9IHNlcmllcy5jb2xvcjtcblxuICAgICAgICBpZiAoaXNGdW5jdGlvbihjb2xvcikgJiYgZGVmYXVsdHMpIHtcbiAgICAgICAgICAgIGNvbG9yID0gZGVmYXVsdHMuY29sb3I7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjdXJ2ZVByb2Nlc3NvciA9IG5ldyBDdXJ2ZVByb2Nlc3Nvcih0aGlzLm9wdGlvbnMuY2xvc2VkKTtcbiAgICAgICAgY29uc3Qgc2VnbWVudHMgPSBjdXJ2ZVByb2Nlc3Nvci5wcm9jZXNzKHRoaXMucG9pbnRzKCkpO1xuICAgICAgICBjb25zdCBjdXJ2ZSA9IG5ldyBkcmF3LlBhdGgoe1xuICAgICAgICAgICAgc3Ryb2tlOiB7XG4gICAgICAgICAgICAgICAgY29sb3I6IGNvbG9yLFxuICAgICAgICAgICAgICAgIHdpZHRoOiBzZXJpZXMud2lkdGgsXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogc2VyaWVzLm9wYWNpdHksXG4gICAgICAgICAgICAgICAgZGFzaFR5cGU6IHNlcmllcy5kYXNoVHlwZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHpJbmRleDogc2VyaWVzLnpJbmRleFxuICAgICAgICB9KTtcblxuICAgICAgICBjdXJ2ZS5zZWdtZW50cy5wdXNoLmFwcGx5KGN1cnZlLnNlZ21lbnRzLCBzZWdtZW50cyk7XG5cbiAgICAgICAgdGhpcy52aXN1YWwgPSBjdXJ2ZTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNwbGluZVNlZ21lbnQ7IiwiaW1wb3J0IHsgWkVSTywgSU5URVJQT0xBVEUgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuXG5pbXBvcnQgeyBQb2ludCB9IGZyb20gJy4uLy4uL2NvcmUnO1xuaW1wb3J0IHsgTUFYX1ZBTFVFIH0gZnJvbSAnLi4vLi4vY29tbW9uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBkZWZpbmVkIH0gZnJvbSAnLi4vLi4vY29tbW9uJztcblxuY29uc3QgTGluZUNoYXJ0TWl4aW4gPSB7XG4gICAgcmVuZGVyU2VnbWVudHM6IGZ1bmN0aW9uKCkge1xuICAgICAgICBjb25zdCB7IG9wdGlvbnMsIHNlcmllc1BvaW50cyB9ID0gdGhpcztcbiAgICAgICAgY29uc3Qgc2VyaWVzID0gb3B0aW9ucy5zZXJpZXM7XG4gICAgICAgIGNvbnN0IHNlcmllc0NvdW50ID0gc2VyaWVzUG9pbnRzLmxlbmd0aDtcbiAgICAgICAgbGV0IGxhc3RTZWdtZW50O1xuXG4gICAgICAgIHRoaXMuX3NlZ21lbnRzID0gW107XG5cbiAgICAgICAgZm9yIChsZXQgc2VyaWVzSXggPSAwOyBzZXJpZXNJeCA8IHNlcmllc0NvdW50OyBzZXJpZXNJeCsrKSB7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50U2VyaWVzID0gc2VyaWVzW3Nlcmllc0l4XTtcbiAgICAgICAgICAgIGNvbnN0IHNvcnRlZFBvaW50cyA9IHRoaXMuc29ydFBvaW50cyhzZXJpZXNQb2ludHNbc2VyaWVzSXhdKTtcbiAgICAgICAgICAgIGNvbnN0IHBvaW50Q291bnQgPSBzb3J0ZWRQb2ludHMubGVuZ3RoO1xuICAgICAgICAgICAgbGV0IGxpbmVQb2ludHMgPSBbXTtcblxuICAgICAgICAgICAgZm9yIChsZXQgcG9pbnRJeCA9IDA7IHBvaW50SXggPCBwb2ludENvdW50OyBwb2ludEl4KyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwb2ludCA9IHNvcnRlZFBvaW50c1twb2ludEl4XTtcbiAgICAgICAgICAgICAgICBpZiAocG9pbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgbGluZVBvaW50cy5wdXNoKHBvaW50KTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc2VyaWVzTWlzc2luZ1ZhbHVlcyhjdXJyZW50U2VyaWVzKSAhPT0gSU5URVJQT0xBVEUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmVQb2ludHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFNlZ21lbnQgPSB0aGlzLmNyZWF0ZVNlZ21lbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZVBvaW50cywgY3VycmVudFNlcmllcywgc2VyaWVzSXgsIGxhc3RTZWdtZW50XG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWRkU2VnbWVudChsYXN0U2VnbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbGluZVBvaW50cyA9IFtdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGxpbmVQb2ludHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIGxhc3RTZWdtZW50ID0gdGhpcy5jcmVhdGVTZWdtZW50KFxuICAgICAgICAgICAgICAgICAgICBsaW5lUG9pbnRzLCBjdXJyZW50U2VyaWVzLCBzZXJpZXNJeCwgbGFzdFNlZ21lbnRcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHRoaXMuX2FkZFNlZ21lbnQobGFzdFNlZ21lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jaGlsZHJlbi51bnNoaWZ0LmFwcGx5KHRoaXMuY2hpbGRyZW4sIHRoaXMuX3NlZ21lbnRzKTtcbiAgICB9LFxuXG4gICAgX2FkZFNlZ21lbnQ6IGZ1bmN0aW9uKHNlZ21lbnQpIHtcbiAgICAgICAgdGhpcy5fc2VnbWVudHMucHVzaChzZWdtZW50KTtcbiAgICAgICAgc2VnbWVudC5wYXJlbnQgPSB0aGlzO1xuICAgIH0sXG5cbiAgICBzb3J0UG9pbnRzOiBmdW5jdGlvbihwb2ludHMpIHtcbiAgICAgICAgcmV0dXJuIHBvaW50cztcbiAgICB9LFxuXG4gICAgc2VyaWVzTWlzc2luZ1ZhbHVlczogZnVuY3Rpb24oc2VyaWVzKSB7XG4gICAgICAgIGNvbnN0IG1pc3NpbmdWYWx1ZXMgPSBzZXJpZXMubWlzc2luZ1ZhbHVlcztcbiAgICAgICAgY29uc3QgYXNzdW1lWmVybyA9ICFtaXNzaW5nVmFsdWVzICYmIHRoaXMub3B0aW9ucy5pc1N0YWNrZWQ7XG5cbiAgICAgICAgcmV0dXJuIGFzc3VtZVplcm8gPyBaRVJPIDogbWlzc2luZ1ZhbHVlcyB8fCBJTlRFUlBPTEFURTtcbiAgICB9LFxuXG4gICAgZ2V0TmVhcmVzdFBvaW50OiBmdW5jdGlvbih4LCB5LCBzZXJpZXNJeCkge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBuZXcgUG9pbnQoeCwgeSk7XG4gICAgICAgIGNvbnN0IGFsbFBvaW50cyA9IHRoaXMuc2VyaWVzUG9pbnRzW3Nlcmllc0l4XTtcbiAgICAgICAgbGV0IG5lYXJlc3RQb2ludERpc3RhbmNlID0gTUFYX1ZBTFVFO1xuICAgICAgICBsZXQgbmVhcmVzdFBvaW50O1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxsUG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBwb2ludCA9IGFsbFBvaW50c1tpXTtcblxuICAgICAgICAgICAgaWYgKHBvaW50ICYmIGRlZmluZWQocG9pbnQudmFsdWUpICYmIHBvaW50LnZhbHVlICE9PSBudWxsICYmIHBvaW50LnZpc2libGUgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcG9pbnRCb3ggPSBwb2ludC5ib3g7XG4gICAgICAgICAgICAgICAgY29uc3QgcG9pbnREaXN0YW5jZSA9IHBvaW50Qm94LmNlbnRlcigpLmRpc3RhbmNlVG8odGFyZ2V0KTtcblxuICAgICAgICAgICAgICAgIGlmIChwb2ludERpc3RhbmNlIDwgbmVhcmVzdFBvaW50RGlzdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgbmVhcmVzdFBvaW50ID0gcG9pbnQ7XG4gICAgICAgICAgICAgICAgICAgIG5lYXJlc3RQb2ludERpc3RhbmNlID0gcG9pbnREaXN0YW5jZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmVhcmVzdFBvaW50O1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IExpbmVDaGFydE1peGluOyIsImltcG9ydCB7IGRyYXdpbmcgYXMgZHJhdyB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1kcmF3aW5nJztcblxuaW1wb3J0IHsgSU5JVElBTF9BTklNQVRJT05fRFVSQVRJT04gfSBmcm9tICcuLi9jb25zdGFudHMnO1xuXG5pbXBvcnQgeyBpbnRlcnBvbGF0ZVZhbHVlLCBzZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5cbmNsYXNzIENsaXBBbmltYXRpb24gZXh0ZW5kcyBkcmF3LkFuaW1hdGlvbiB7XG4gICAgc2V0dXAoKSB7XG4gICAgICAgIHRoaXMuX3NldEVuZCh0aGlzLm9wdGlvbnMuYm94LngxKTtcbiAgICB9XG5cbiAgICBzdGVwKHBvcykge1xuICAgICAgICBjb25zdCBib3ggPSB0aGlzLm9wdGlvbnMuYm94O1xuICAgICAgICB0aGlzLl9zZXRFbmQoaW50ZXJwb2xhdGVWYWx1ZShib3gueDEsIGJveC54MiwgcG9zKSk7XG4gICAgfVxuXG4gICAgX3NldEVuZCh4KSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLmVsZW1lbnQ7XG4gICAgICAgIGNvbnN0IHNlZ21lbnRzID0gZWxlbWVudC5zZWdtZW50cztcbiAgICAgICAgY29uc3QgdG9wUmlnaHQgPSBzZWdtZW50c1sxXS5hbmNob3IoKTtcbiAgICAgICAgY29uc3QgYm90dG9tUmlnaHQgPSBzZWdtZW50c1syXS5hbmNob3IoKTtcblxuICAgICAgICBlbGVtZW50LnN1c3BlbmQoKTtcbiAgICAgICAgdG9wUmlnaHQuc2V0WCh4KTtcbiAgICAgICAgZWxlbWVudC5yZXN1bWUoKTtcbiAgICAgICAgYm90dG9tUmlnaHQuc2V0WCh4KTtcbiAgICB9XG59XG5cbnNldERlZmF1bHRPcHRpb25zKENsaXBBbmltYXRpb24sIHtcbiAgICBkdXJhdGlvbjogSU5JVElBTF9BTklNQVRJT05fRFVSQVRJT05cbn0pO1xuXG5kcmF3LkFuaW1hdGlvbkZhY3RvcnkuY3VycmVudC5yZWdpc3RlcihcImNsaXBcIiwgQ2xpcEFuaW1hdGlvbik7XG5cbmV4cG9ydCBkZWZhdWx0IENsaXBBbmltYXRpb247IiwiaW1wb3J0IHsgZGVmaW5lZCB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFueUhhc1pJbmRleChlbGVtZW50cykge1xuICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGVsZW1lbnRzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgaWYgKGRlZmluZWQoZWxlbWVudHNbaWR4XS56SW5kZXgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbn0iLCJpbXBvcnQgeyBkcmF3aW5nIGFzIGRyYXcgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tZHJhd2luZyc7XG5cbmltcG9ydCBDbGlwQW5pbWF0aW9uIGZyb20gJy4uL2FuaW1hdGlvbnMvY2xpcC1hbmltYXRpb24nO1xuaW1wb3J0IGFueUhhc1pJbmRleCBmcm9tICcuLi91dGlscy9hbnktaGFzLXotaW5kZXgnO1xuaW1wb3J0IHsgZGVmaW5lZCB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5cbmNvbnN0IENsaXBBbmltYXRpb25NaXhpbiA9IHtcbiAgICBjcmVhdGVBbmltYXRpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICBjb25zdCByb290ID0gdGhpcy5nZXRSb290KCk7XG4gICAgICAgIGlmIChyb290ICYmIChyb290Lm9wdGlvbnMgfHwge30pLnRyYW5zaXRpb25zICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgY29uc3QgYm94ID0gcm9vdC5zaXplKCk7XG4gICAgICAgICAgICBjb25zdCBjbGlwUGF0aCA9IGRyYXcuUGF0aC5mcm9tUmVjdChib3gudG9SZWN0KCkpO1xuICAgICAgICAgICAgdGhpcy52aXN1YWwuY2xpcChjbGlwUGF0aCk7XG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbiA9IG5ldyBDbGlwQW5pbWF0aW9uKGNsaXBQYXRoLCB7XG4gICAgICAgICAgICAgICAgYm94OiBib3hcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGFueUhhc1pJbmRleCh0aGlzLm9wdGlvbnMuc2VyaWVzKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3NldENoaWxkcmVuQW5pbWF0aW9uKGNsaXBQYXRoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBfc2V0Q2hpbGRyZW5BbmltYXRpb246IGZ1bmN0aW9uKGNsaXBQYXRoKSB7XG4gICAgICAgIGNvbnN0IHBvaW50cyA9IHRoaXMuYW5pbWF0aW9uUG9pbnRzKCk7XG5cbiAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgcG9pbnRzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgICAgIGNvbnN0IHBvaW50ID0gcG9pbnRzW2lkeF07XG4gICAgICAgICAgICBpZiAocG9pbnQgJiYgcG9pbnQudmlzdWFsICYmIGRlZmluZWQocG9pbnQudmlzdWFsLm9wdGlvbnMuekluZGV4KSkge1xuICAgICAgICAgICAgICAgIHBvaW50LnZpc3VhbC5jbGlwKGNsaXBQYXRoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IENsaXBBbmltYXRpb25NaXhpbjsiLCJpbXBvcnQgQ2F0ZWdvcmljYWxDaGFydCBmcm9tICcuLi9jYXRlZ29yaWNhbC1jaGFydCc7XG5pbXBvcnQgTGluZVBvaW50IGZyb20gJy4vbGluZS1wb2ludCc7XG5pbXBvcnQgTGluZVNlZ21lbnQgZnJvbSAnLi9saW5lLXNlZ21lbnQnO1xuaW1wb3J0IFN0ZXBMaW5lU2VnbWVudCBmcm9tICcuL3N0ZXAtbGluZS1zZWdtZW50JztcbmltcG9ydCBTcGxpbmVTZWdtZW50IGZyb20gJy4vc3BsaW5lLXNlZ21lbnQnO1xuaW1wb3J0IExpbmVDaGFydE1peGluIGZyb20gJy4uL21peGlucy9saW5lLWNoYXJ0LW1peGluJztcbmltcG9ydCBDbGlwQW5pbWF0aW9uTWl4aW4gZnJvbSAnLi4vbWl4aW5zL2NsaXAtYW5pbWF0aW9uLW1peGluJztcblxuaW1wb3J0IHsgWkVSTywgU01PT1RILCBTVEVQIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcblxuaW1wb3J0IHsgZGVlcEV4dGVuZCwgZGVmaW5lZCwgaXNGdW5jdGlvbiB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5cbmNsYXNzIExpbmVDaGFydCBleHRlbmRzIENhdGVnb3JpY2FsQ2hhcnQge1xuICAgIHJlbmRlcigpIHtcblxuICAgICAgICBzdXBlci5yZW5kZXIoKTtcblxuICAgICAgICB0aGlzLnVwZGF0ZVN0YWNrUmFuZ2UoKTtcbiAgICAgICAgdGhpcy5yZW5kZXJTZWdtZW50cygpO1xuICAgIH1cblxuICAgIHBvaW50VHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIExpbmVQb2ludDtcbiAgICB9XG5cbiAgICBjcmVhdGVQb2ludChkYXRhLCBmaWVsZHMpIHtcbiAgICAgICAgY29uc3QgeyBjYXRlZ29yeUl4LCBjYXRlZ29yeSwgc2VyaWVzLCBzZXJpZXNJeCB9ID0gZmllbGRzO1xuICAgICAgICBjb25zdCBtaXNzaW5nVmFsdWVzID0gdGhpcy5zZXJpZXNNaXNzaW5nVmFsdWVzKHNlcmllcyk7XG4gICAgICAgIGxldCB2YWx1ZSA9IGRhdGEudmFsdWVGaWVsZHMudmFsdWU7XG5cbiAgICAgICAgaWYgKCFkZWZpbmVkKHZhbHVlKSB8fCB2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKG1pc3NpbmdWYWx1ZXMgPT09IFpFUk8pIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IDA7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHBvaW50T3B0aW9ucyA9IHRoaXMucG9pbnRPcHRpb25zKHNlcmllcywgc2VyaWVzSXgpO1xuICAgICAgICBwb2ludE9wdGlvbnMgPSB0aGlzLmV2YWxQb2ludE9wdGlvbnMoXG4gICAgICAgICAgICBwb2ludE9wdGlvbnMsIHZhbHVlLCBjYXRlZ29yeSwgY2F0ZWdvcnlJeCwgc2VyaWVzLCBzZXJpZXNJeFxuICAgICAgICApO1xuXG4gICAgICAgIGxldCBjb2xvciA9IGRhdGEuZmllbGRzLmNvbG9yIHx8IHNlcmllcy5jb2xvcjtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oc2VyaWVzLmNvbG9yKSkge1xuICAgICAgICAgICAgY29sb3IgPSBwb2ludE9wdGlvbnMuY29sb3I7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwb2ludCA9IG5ldyBMaW5lUG9pbnQodmFsdWUsIHBvaW50T3B0aW9ucyk7XG4gICAgICAgIHBvaW50LmNvbG9yID0gY29sb3I7XG5cbiAgICAgICAgdGhpcy5hcHBlbmQocG9pbnQpO1xuXG4gICAgICAgIHJldHVybiBwb2ludDtcbiAgICB9XG5cbiAgICBwbG90UmFuZ2UocG9pbnQpIHtcbiAgICAgICAgbGV0IHBsb3RWYWx1ZSA9IHRoaXMucGxvdFZhbHVlKHBvaW50KTtcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmlzU3RhY2tlZCkge1xuICAgICAgICAgICAgY29uc3QgY2F0ZWdvcnlJeCA9IHBvaW50LmNhdGVnb3J5SXg7XG4gICAgICAgICAgICBjb25zdCBjYXRlZ29yeVBvaW50cyA9IHRoaXMuY2F0ZWdvcnlQb2ludHNbY2F0ZWdvcnlJeF07XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2F0ZWdvcnlQb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBvdGhlciA9IGNhdGVnb3J5UG9pbnRzW2ldO1xuXG4gICAgICAgICAgICAgICAgaWYgKHBvaW50ID09PSBvdGhlcikge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBwbG90VmFsdWUgKz0gdGhpcy5wbG90VmFsdWUob3RoZXIpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5pc1N0YWNrZWQxMDApIHtcbiAgICAgICAgICAgICAgICAgICAgcGxvdFZhbHVlID0gTWF0aC5taW4ocGxvdFZhbHVlLCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBbIHBsb3RWYWx1ZSwgcGxvdFZhbHVlIF07XG4gICAgfVxuXG4gICAgY3JlYXRlU2VnbWVudChsaW5lUG9pbnRzLCBjdXJyZW50U2VyaWVzLCBzZXJpZXNJeCkge1xuICAgICAgICBjb25zdCBzdHlsZSA9IGN1cnJlbnRTZXJpZXMuc3R5bGU7XG4gICAgICAgIGxldCBwb2ludFR5cGU7XG5cbiAgICAgICAgaWYgKHN0eWxlID09PSBTVEVQKSB7XG4gICAgICAgICAgICBwb2ludFR5cGUgPSBTdGVwTGluZVNlZ21lbnQ7XG4gICAgICAgIH0gZWxzZSBpZiAoc3R5bGUgPT09IFNNT09USCkge1xuICAgICAgICAgICAgcG9pbnRUeXBlID0gU3BsaW5lU2VnbWVudDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBvaW50VHlwZSA9IExpbmVTZWdtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBwb2ludFR5cGUobGluZVBvaW50cywgY3VycmVudFNlcmllcywgc2VyaWVzSXgpO1xuICAgIH1cblxuICAgIGFuaW1hdGlvblBvaW50cygpIHtcbiAgICAgICAgY29uc3QgcG9pbnRzID0gdGhpcy5wb2ludHM7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBwb2ludHMubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goKHBvaW50c1tpZHhdIHx8IHt9KS5tYXJrZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQuY29uY2F0KHRoaXMuX3NlZ21lbnRzKTtcbiAgICB9XG59XG5cbmRlZXBFeHRlbmQoTGluZUNoYXJ0LnByb3RvdHlwZSwgTGluZUNoYXJ0TWl4aW4sIENsaXBBbmltYXRpb25NaXhpbik7XG5cbmV4cG9ydCBkZWZhdWx0IExpbmVDaGFydDsiLCJpbXBvcnQgeyBkcmF3aW5nIGFzIGRyYXcsIGdlb21ldHJ5IGFzIGdlb20gfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tZHJhd2luZyc7XG5pbXBvcnQgTGluZVNlZ21lbnQgZnJvbSAnLi4vbGluZS1jaGFydC9saW5lLXNlZ21lbnQnO1xuXG5pbXBvcnQgeyBhcHBlbmQsIGRlZXBFeHRlbmQsIGlzRnVuY3Rpb24sIGxhc3QgfSBmcm9tICcuLi8uLi9jb21tb24nO1xuXG5jbGFzcyBBcmVhU2VnbWVudCBleHRlbmRzIExpbmVTZWdtZW50IHtcbiAgICBjb25zdHJ1Y3RvcihsaW5lUG9pbnRzLCBjdXJyZW50U2VyaWVzLCBzZXJpZXNJeCwgcHJldlNlZ21lbnQsIHN0YWNrUG9pbnRzKSB7XG4gICAgICAgIHN1cGVyKGxpbmVQb2ludHMsIGN1cnJlbnRTZXJpZXMsIHNlcmllc0l4KTtcblxuICAgICAgICB0aGlzLnByZXZTZWdtZW50ID0gcHJldlNlZ21lbnQ7XG4gICAgICAgIHRoaXMuc3RhY2tQb2ludHMgPSBzdGFja1BvaW50cztcbiAgICB9XG5cbiAgICBjcmVhdGVWaXN1YWwoKSB7XG4gICAgICAgIGNvbnN0IHNlcmllcyA9IHRoaXMuc2VyaWVzO1xuICAgICAgICBjb25zdCBkZWZhdWx0cyA9IHNlcmllcy5fZGVmYXVsdHM7XG4gICAgICAgIGNvbnN0IGxpbmVPcHRpb25zID0gc2VyaWVzLmxpbmUgfHwge307XG4gICAgICAgIGxldCBjb2xvciA9IHNlcmllcy5jb2xvcjtcblxuICAgICAgICBpZiAoaXNGdW5jdGlvbihjb2xvcikgJiYgZGVmYXVsdHMpIHtcbiAgICAgICAgICAgIGNvbG9yID0gZGVmYXVsdHMuY29sb3I7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnZpc3VhbCA9IG5ldyBkcmF3Lkdyb3VwKHtcbiAgICAgICAgICAgIHpJbmRleDogc2VyaWVzLnpJbmRleFxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmNyZWF0ZUZpbGwoe1xuICAgICAgICAgICAgZmlsbDoge1xuICAgICAgICAgICAgICAgIGNvbG9yOiBjb2xvcixcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiBzZXJpZXMub3BhY2l0eVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0cm9rZTogbnVsbFxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAobGluZU9wdGlvbnMud2lkdGggPiAwICYmIGxpbmVPcHRpb25zLnZpc2libGUgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZVN0cm9rZSh7XG4gICAgICAgICAgICAgICAgc3Ryb2tlOiBkZWVwRXh0ZW5kKHtcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IGNvbG9yLFxuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiBzZXJpZXMub3BhY2l0eSxcbiAgICAgICAgICAgICAgICAgICAgbGluZUNhcDogXCJidXR0XCJcbiAgICAgICAgICAgICAgICB9LCBsaW5lT3B0aW9ucylcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3Ryb2tlU2VnbWVudHMoKSB7XG4gICAgICAgIGxldCBzZWdtZW50cyA9IHRoaXMuX3N0cm9rZVNlZ21lbnRzO1xuXG4gICAgICAgIGlmICghc2VnbWVudHMpIHtcbiAgICAgICAgICAgIHNlZ21lbnRzID0gdGhpcy5fc3Ryb2tlU2VnbWVudHMgPSB0aGlzLmNyZWF0ZVN0cm9rZVNlZ21lbnRzKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc2VnbWVudHM7XG4gICAgfVxuXG4gICAgY3JlYXRlU3Ryb2tlU2VnbWVudHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlZ21lbnRzRnJvbVBvaW50cyh0aGlzLnBvaW50cygpKTtcbiAgICB9XG5cbiAgICBzdGFja1NlZ21lbnRzKCkge1xuICAgICAgICBpZiAodGhpcy5wcmV2U2VnbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJldlNlZ21lbnQuY3JlYXRlU3RhY2tTZWdtZW50cyh0aGlzLnN0YWNrUG9pbnRzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVN0YWNrU2VnbWVudHModGhpcy5zdGFja1BvaW50cyk7XG4gICAgfVxuXG4gICAgY3JlYXRlU3RhY2tTZWdtZW50cyhzdGFja1BvaW50cykge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWdtZW50c0Zyb21Qb2ludHModGhpcy50b0dlb21ldHJ5UG9pbnRzKHN0YWNrUG9pbnRzKSkucmV2ZXJzZSgpO1xuICAgIH1cblxuICAgIHNlZ21lbnRzRnJvbVBvaW50cyhwb2ludHMpIHtcbiAgICAgICAgcmV0dXJuIHBvaW50cy5tYXAoKHBvaW50KSA9PiBuZXcgZ2VvbS5TZWdtZW50KHBvaW50KSk7XG4gICAgfVxuXG4gICAgY3JlYXRlU3Ryb2tlKHN0eWxlKSB7XG4gICAgICAgIGNvbnN0IHN0cm9rZSA9IG5ldyBkcmF3LlBhdGgoc3R5bGUpO1xuICAgICAgICBzdHJva2Uuc2VnbWVudHMucHVzaC5hcHBseShzdHJva2Uuc2VnbWVudHMsIHRoaXMuc3Ryb2tlU2VnbWVudHMoKSk7XG5cbiAgICAgICAgdGhpcy52aXN1YWwuYXBwZW5kKHN0cm9rZSk7XG4gICAgfVxuXG4gICAgaGFzU3RhY2tTZWdtZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcmV2U2VnbWVudCB8fCAodGhpcy5zdGFja1BvaW50cyAmJiB0aGlzLnN0YWNrUG9pbnRzLmxlbmd0aCk7XG4gICAgfVxuXG4gICAgY3JlYXRlRmlsbChzdHlsZSkge1xuICAgICAgICBjb25zdCBzdHJva2VTZWdtZW50cyA9IHRoaXMuc3Ryb2tlU2VnbWVudHMoKTtcbiAgICAgICAgY29uc3QgZmlsbFNlZ21lbnRzID0gc3Ryb2tlU2VnbWVudHMuc2xpY2UoMCk7XG4gICAgICAgIGNvbnN0IGhhc1N0YWNrU2VnbWVudHMgPSB0aGlzLmhhc1N0YWNrU2VnbWVudCgpO1xuXG4gICAgICAgIGlmIChoYXNTdGFja1NlZ21lbnRzKSB7XG4gICAgICAgICAgICBjb25zdCBzdGFja1NlZ21lbnRzID0gdGhpcy5zdGFja1NlZ21lbnRzKCk7XG5cbiAgICAgICAgICAgIGFwcGVuZChmaWxsU2VnbWVudHMsIHN0YWNrU2VnbWVudHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZmlsbCA9IG5ldyBkcmF3LlBhdGgoc3R5bGUpO1xuICAgICAgICBmaWxsLnNlZ21lbnRzLnB1c2guYXBwbHkoZmlsbC5zZWdtZW50cywgZmlsbFNlZ21lbnRzKTtcblxuICAgICAgICBpZiAoIWhhc1N0YWNrU2VnbWVudHMgJiYgc3Ryb2tlU2VnbWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgdGhpcy5maWxsVG9BeGVzKGZpbGwpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy52aXN1YWwuYXBwZW5kKGZpbGwpO1xuICAgIH1cblxuICAgIGZpbGxUb0F4ZXMoZmlsbFBhdGgpIHtcbiAgICAgICAgY29uc3QgY2hhcnQgPSB0aGlzLnBhcmVudDtcbiAgICAgICAgY29uc3QgaW52ZXJ0QXhlcyA9IGNoYXJ0Lm9wdGlvbnMuaW52ZXJ0QXhlcztcbiAgICAgICAgY29uc3QgdmFsdWVBeGlzID0gY2hhcnQuc2VyaWVzVmFsdWVBeGlzKHRoaXMuc2VyaWVzKTtcbiAgICAgICAgY29uc3QgY3Jvc3NpbmdWYWx1ZSA9IGNoYXJ0LmNhdGVnb3J5QXhpc0Nyb3NzaW5nVmFsdWUodmFsdWVBeGlzKTtcbiAgICAgICAgY29uc3QgZW5kU2xvdCA9IHZhbHVlQXhpcy5nZXRTbG90KGNyb3NzaW5nVmFsdWUsIGNyb3NzaW5nVmFsdWUsIHRydWUpO1xuICAgICAgICBjb25zdCBzZWdtZW50cyA9IHRoaXMuc3Ryb2tlU2VnbWVudHMoKTtcbiAgICAgICAgY29uc3QgZmlyc3RQb2ludCA9IHNlZ21lbnRzWzBdLmFuY2hvcigpO1xuICAgICAgICBjb25zdCBsYXN0UG9pbnQgPSBsYXN0KHNlZ21lbnRzKS5hbmNob3IoKTtcbiAgICAgICAgbGV0IGVuZCA9IGludmVydEF4ZXMgPyBlbmRTbG90LngxIDogZW5kU2xvdC55MTtcblxuICAgICAgICBpZiAoaW52ZXJ0QXhlcykge1xuICAgICAgICAgICAgZmlsbFBhdGgubGluZVRvKGVuZCwgbGFzdFBvaW50LnkpXG4gICAgICAgICAgICAgICAgICAgIC5saW5lVG8oZW5kLCBmaXJzdFBvaW50LnkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZmlsbFBhdGgubGluZVRvKGxhc3RQb2ludC54LCBlbmQpXG4gICAgICAgICAgICAgICAgICAgIC5saW5lVG8oZmlyc3RQb2ludC54LCBlbmQpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBBcmVhU2VnbWVudDsiLCJpbXBvcnQgU3RlcExpbmVNaXhpbiBmcm9tICcuLi9saW5lLWNoYXJ0L3N0ZXAtbGluZS1taXhpbic7XG5pbXBvcnQgQXJlYVNlZ21lbnQgZnJvbSAnLi9hcmVhLXNlZ21lbnQnO1xuXG5pbXBvcnQgeyBkZWVwRXh0ZW5kIH0gZnJvbSAnLi4vLi4vY29tbW9uJztcblxuY2xhc3MgU3RlcEFyZWFTZWdtZW50IGV4dGVuZHMgQXJlYVNlZ21lbnQge1xuXG4gICAgY3JlYXRlU3Ryb2tlU2VnbWVudHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlZ21lbnRzRnJvbVBvaW50cyh0aGlzLmNhbGN1bGF0ZVN0ZXBQb2ludHModGhpcy5saW5lUG9pbnRzKSk7XG4gICAgfVxuXG4gICAgY3JlYXRlU3RhY2tTZWdtZW50cyhzdGFja1BvaW50cykge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWdtZW50c0Zyb21Qb2ludHModGhpcy5jYWxjdWxhdGVTdGVwUG9pbnRzKHN0YWNrUG9pbnRzKSkucmV2ZXJzZSgpO1xuICAgIH1cbn1cblxuZGVlcEV4dGVuZChTdGVwQXJlYVNlZ21lbnQucHJvdG90eXBlLCBTdGVwTGluZU1peGluKTtcblxuZXhwb3J0IGRlZmF1bHQgU3RlcEFyZWFTZWdtZW50OyIsImltcG9ydCB7IGdlb21ldHJ5IGFzIGdlb20gfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tZHJhd2luZyc7XG5pbXBvcnQgeyBDdXJ2ZVByb2Nlc3NvciB9IGZyb20gJy4uLy4uL2NvcmUnO1xuXG5pbXBvcnQgQXJlYVNlZ21lbnQgZnJvbSAnLi9hcmVhLXNlZ21lbnQnO1xuXG5jbGFzcyBTcGxpbmVBcmVhU2VnbWVudCBleHRlbmRzIEFyZWFTZWdtZW50IHtcblxuICAgIGNyZWF0ZVN0cm9rZVNlZ21lbnRzKCkge1xuICAgICAgICBjb25zdCBjdXJ2ZVByb2Nlc3NvciA9IG5ldyBDdXJ2ZVByb2Nlc3Nvcih0aGlzLm9wdGlvbnMuY2xvc2VkKTtcbiAgICAgICAgY29uc3QgbGluZVBvaW50cyA9IHRoaXMucG9pbnRzKCk7XG5cbiAgICAgICAgcmV0dXJuIGN1cnZlUHJvY2Vzc29yLnByb2Nlc3MobGluZVBvaW50cyk7XG4gICAgfVxuXG4gICAgY3JlYXRlU3RhY2tTZWdtZW50cygpIHtcbiAgICAgICAgY29uc3Qgc3Ryb2tlU2VnbWVudHMgPSB0aGlzLnN0cm9rZVNlZ21lbnRzKCk7XG4gICAgICAgIGNvbnN0IHN0YWNrU2VnbWVudHMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaWR4ID0gc3Ryb2tlU2VnbWVudHMubGVuZ3RoIC0gMTsgaWR4ID49IDA7IGlkeC0tKSB7XG4gICAgICAgICAgICBjb25zdCBzZWdtZW50ID0gc3Ryb2tlU2VnbWVudHNbaWR4XTtcbiAgICAgICAgICAgIHN0YWNrU2VnbWVudHMucHVzaChuZXcgZ2VvbS5TZWdtZW50KFxuICAgICAgICAgICAgICAgIHNlZ21lbnQuYW5jaG9yKCksXG4gICAgICAgICAgICAgICAgc2VnbWVudC5jb250cm9sT3V0KCksXG4gICAgICAgICAgICAgICAgc2VnbWVudC5jb250cm9sSW4oKVxuICAgICAgICAgICAgKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3RhY2tTZWdtZW50cztcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNwbGluZUFyZWFTZWdtZW50OyIsImltcG9ydCBMaW5lQ2hhcnQgZnJvbSAnLi4vbGluZS1jaGFydC9saW5lLWNoYXJ0JztcbmltcG9ydCBMaW5lUG9pbnQgZnJvbSAnLi4vbGluZS1jaGFydC9saW5lLXBvaW50JztcblxuaW1wb3J0IEFyZWFTZWdtZW50IGZyb20gJy4vYXJlYS1zZWdtZW50JztcbmltcG9ydCBTdGVwQXJlYVNlZ21lbnQgZnJvbSAnLi9zdGVwLWFyZWEtc2VnbWVudCc7XG5pbXBvcnQgU3BsaW5lQXJlYVNlZ21lbnQgZnJvbSAnLi9zcGxpbmUtYXJlYS1zZWdtZW50JztcblxuaW1wb3J0IHsgU1RFUCwgU01PT1RILCBaRVJPIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcblxuY2xhc3MgQXJlYUNoYXJ0IGV4dGVuZHMgTGluZUNoYXJ0IHtcbiAgICBjcmVhdGVTZWdtZW50KGxpbmVQb2ludHMsIGN1cnJlbnRTZXJpZXMsIHNlcmllc0l4LCBwcmV2U2VnbWVudCkge1xuICAgICAgICBjb25zdCBpc1N0YWNrZWQgPSB0aGlzLm9wdGlvbnMuaXNTdGFja2VkO1xuICAgICAgICBjb25zdCBzdHlsZSA9IChjdXJyZW50U2VyaWVzLmxpbmUgfHwge30pLnN0eWxlO1xuICAgICAgICBsZXQgcHJldmlvdXNTZWdtZW50O1xuXG4gICAgICAgIGxldCBzdGFja1BvaW50cztcbiAgICAgICAgaWYgKGlzU3RhY2tlZCAmJiBzZXJpZXNJeCA+IDAgJiYgcHJldlNlZ21lbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IG1pc3NpbmdWYWx1ZXMgPSB0aGlzLnNlcmllc01pc3NpbmdWYWx1ZXMoY3VycmVudFNlcmllcyk7XG4gICAgICAgICAgICBpZiAobWlzc2luZ1ZhbHVlcyAhPT0gXCJnYXBcIikge1xuICAgICAgICAgICAgICAgIHN0YWNrUG9pbnRzID0gcHJldlNlZ21lbnQubGluZVBvaW50cztcbiAgICAgICAgICAgICAgICBwcmV2aW91c1NlZ21lbnQgPSBwcmV2U2VnbWVudDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3RhY2tQb2ludHMgPSB0aGlzLl9nYXBTdGFja1BvaW50cyhsaW5lUG9pbnRzLCBzZXJpZXNJeCwgc3R5bGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHBvaW50VHlwZTtcbiAgICAgICAgaWYgKHN0eWxlID09PSBTVEVQKSB7XG4gICAgICAgICAgICBwb2ludFR5cGUgPSBTdGVwQXJlYVNlZ21lbnQ7XG4gICAgICAgIH0gZWxzZSBpZiAoc3R5bGUgPT09IFNNT09USCkge1xuICAgICAgICAgICAgcG9pbnRUeXBlID0gU3BsaW5lQXJlYVNlZ21lbnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwb2ludFR5cGUgPSBBcmVhU2VnbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgcG9pbnRUeXBlKGxpbmVQb2ludHMsIGN1cnJlbnRTZXJpZXMsIHNlcmllc0l4LCBwcmV2aW91c1NlZ21lbnQsIHN0YWNrUG9pbnRzKTtcbiAgICB9XG5cbiAgICByZWZsb3codGFyZ2V0Qm94KSB7XG4gICAgICAgIHN1cGVyLnJlZmxvdyh0YXJnZXRCb3gpO1xuXG4gICAgICAgIGNvbnN0IHN0YWNrUG9pbnRzID0gdGhpcy5fc3RhY2tQb2ludHM7XG4gICAgICAgIGlmIChzdGFja1BvaW50cykge1xuICAgICAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgc3RhY2tQb2ludHMubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YWNrUG9pbnQgPSBzdGFja1BvaW50c1tpZHhdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBvaW50U2xvdCA9IHRoaXMuY2F0ZWdvcnlBeGlzLmdldFNsb3Qoc3RhY2tQb2ludC5jYXRlZ29yeUl4KTtcbiAgICAgICAgICAgICAgICBzdGFja1BvaW50LnJlZmxvdyhwb2ludFNsb3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2dhcFN0YWNrUG9pbnRzKGxpbmVQb2ludHMsIHNlcmllc0l4LCBzdHlsZSkge1xuICAgICAgICBjb25zdCBzZXJpZXNQb2ludHMgPSB0aGlzLnNlcmllc1BvaW50cztcbiAgICAgICAgbGV0IHN0YXJ0SWR4ID0gbGluZVBvaW50c1swXS5jYXRlZ29yeUl4O1xuICAgICAgICBsZXQgbGVuZ3RoID0gbGluZVBvaW50cy5sZW5ndGg7XG4gICAgICAgIGlmIChzdGFydElkeCA8IDApIHtcbiAgICAgICAgICAgIHN0YXJ0SWR4ID0gMDtcbiAgICAgICAgICAgIGxlbmd0aC0tO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZW5kSWR4ID0gc3RhcnRJZHggKyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IHBvaW50T2Zmc2V0ID0gdGhpcy5zZXJpZXNPcHRpb25zWzBdLl9vdXRPZlJhbmdlTWluUG9pbnQgPyAxIDogMDtcbiAgICAgICAgY29uc3Qgc3RhY2tQb2ludHMgPSBbXTtcblxuICAgICAgICB0aGlzLl9zdGFja1BvaW50cyA9IHRoaXMuX3N0YWNrUG9pbnRzIHx8IFtdO1xuICAgICAgICBmb3IgKGxldCBjYXRlZ29yeUl4ID0gc3RhcnRJZHg7IGNhdGVnb3J5SXggPCBlbmRJZHg7IGNhdGVnb3J5SXgrKykge1xuICAgICAgICAgICAgY29uc3QgcG9pbnRJeCA9IGNhdGVnb3J5SXggKyBwb2ludE9mZnNldDtcbiAgICAgICAgICAgIGxldCBjdXJyZW50U2VyaWVzSXggPSBzZXJpZXNJeDtcbiAgICAgICAgICAgIGxldCBwb2ludDtcblxuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRTZXJpZXNJeC0tO1xuICAgICAgICAgICAgICAgIHBvaW50ID0gc2VyaWVzUG9pbnRzW2N1cnJlbnRTZXJpZXNJeF1bcG9pbnRJeF07XG4gICAgICAgICAgICB9IHdoaWxlIChjdXJyZW50U2VyaWVzSXggPiAwICYmICFwb2ludCk7XG5cbiAgICAgICAgICAgIGlmIChwb2ludCkge1xuICAgICAgICAgICAgICAgIGlmIChzdHlsZSAhPT0gU1RFUCAmJiBjYXRlZ29yeUl4ID4gc3RhcnRJZHggJiYgIXNlcmllc1BvaW50c1tjdXJyZW50U2VyaWVzSXhdW3BvaW50SXggLSAxXSkge1xuICAgICAgICAgICAgICAgICAgICBzdGFja1BvaW50cy5wdXNoKHRoaXMuX3ByZXZpb3VzU2VnbWVudFBvaW50KGNhdGVnb3J5SXgsIHBvaW50SXgsIHBvaW50SXggLSAxLCBjdXJyZW50U2VyaWVzSXgpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzdGFja1BvaW50cy5wdXNoKHBvaW50KTtcblxuICAgICAgICAgICAgICAgIGlmIChzdHlsZSAhPT0gU1RFUCAmJiBjYXRlZ29yeUl4ICsgMSA8IGVuZElkeCAmJiAhc2VyaWVzUG9pbnRzW2N1cnJlbnRTZXJpZXNJeF1bcG9pbnRJeCArIDFdKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YWNrUG9pbnRzLnB1c2godGhpcy5fcHJldmlvdXNTZWdtZW50UG9pbnQoY2F0ZWdvcnlJeCwgcG9pbnRJeCwgcG9pbnRJeCArIDEsIGN1cnJlbnRTZXJpZXNJeCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZ2FwU3RhY2tQb2ludCA9IHRoaXMuX2NyZWF0ZUdhcFN0YWNrUG9pbnQoY2F0ZWdvcnlJeCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhY2tQb2ludHMucHVzaChnYXBTdGFja1BvaW50KTtcbiAgICAgICAgICAgICAgICBzdGFja1BvaW50cy5wdXNoKGdhcFN0YWNrUG9pbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHN0YWNrUG9pbnRzO1xuICAgIH1cblxuICAgIF9wcmV2aW91c1NlZ21lbnRQb2ludChjYXRlZ29yeUl4LCBwb2ludEl4LCBzZWdtZW50SXgsIHNlcmllc0lkeCkge1xuICAgICAgICBjb25zdCBzZXJpZXNQb2ludHMgPSB0aGlzLnNlcmllc1BvaW50cztcbiAgICAgICAgbGV0IGluZGV4ID0gc2VyaWVzSWR4O1xuICAgICAgICBsZXQgcG9pbnQ7XG5cbiAgICAgICAgd2hpbGUgKGluZGV4ID4gMCAmJiAhcG9pbnQpIHtcbiAgICAgICAgICAgIGluZGV4LS07XG4gICAgICAgICAgICBwb2ludCA9IHNlcmllc1BvaW50c1tpbmRleF1bc2VnbWVudEl4XTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcG9pbnQpIHtcbiAgICAgICAgICAgIHBvaW50ID0gdGhpcy5fY3JlYXRlR2FwU3RhY2tQb2ludChjYXRlZ29yeUl4KTtcbiAgICAgICAgICAgIHRoaXMuX3N0YWNrUG9pbnRzLnB1c2gocG9pbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcG9pbnQgPSBzZXJpZXNQb2ludHNbaW5kZXhdW3BvaW50SXhdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBvaW50O1xuICAgIH1cblxuICAgIF9jcmVhdGVHYXBTdGFja1BvaW50KGNhdGVnb3J5SXgpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMucG9pbnRPcHRpb25zKHt9LCAwKTtcbiAgICAgICAgY29uc3QgcG9pbnQgPSBuZXcgTGluZVBvaW50KDAsIG9wdGlvbnMpO1xuICAgICAgICBwb2ludC5jYXRlZ29yeUl4ID0gY2F0ZWdvcnlJeDtcbiAgICAgICAgcG9pbnQuc2VyaWVzID0ge307XG5cbiAgICAgICAgcmV0dXJuIHBvaW50O1xuICAgIH1cblxuICAgIHNlcmllc01pc3NpbmdWYWx1ZXMoc2VyaWVzKSB7XG4gICAgICAgIHJldHVybiBzZXJpZXMubWlzc2luZ1ZhbHVlcyB8fCBaRVJPO1xuICAgIH1cblxuICAgIHN1cHBvcnRzUG9pbnRJbmFjdGl2ZU9wYWNpdHkoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFyZWFDaGFydDtcbiIsImltcG9ydCB7IE1JTl9WQUxVRSwgTUFYX1ZBTFVFIH0gZnJvbSAnLi4vY29tbW9uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBDbGFzcyB9IGZyb20gJy4uL2NvbW1vbic7XG5cbmNsYXNzIEF4aXNHcm91cFJhbmdlVHJhY2tlciBleHRlbmRzIENsYXNzIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLmF4aXNSYW5nZXMgPSB7fTtcbiAgICB9XG5cbiAgICB1cGRhdGUoY2hhcnRBeGlzUmFuZ2VzKSB7XG4gICAgICAgIGNvbnN0IGF4aXNSYW5nZXMgPSB0aGlzLmF4aXNSYW5nZXM7XG5cbiAgICAgICAgZm9yIChsZXQgYXhpc05hbWUgaW4gY2hhcnRBeGlzUmFuZ2VzKSB7XG4gICAgICAgICAgICBjb25zdCBjaGFydFJhbmdlID0gY2hhcnRBeGlzUmFuZ2VzW2F4aXNOYW1lXTtcbiAgICAgICAgICAgIGxldCByYW5nZSA9IGF4aXNSYW5nZXNbYXhpc05hbWVdO1xuICAgICAgICAgICAgYXhpc1Jhbmdlc1theGlzTmFtZV0gPSByYW5nZSA9IHJhbmdlIHx8IHsgbWluOiBNQVhfVkFMVUUsIG1heDogTUlOX1ZBTFVFIH07XG5cbiAgICAgICAgICAgIHJhbmdlLm1pbiA9IE1hdGgubWluKHJhbmdlLm1pbiwgY2hhcnRSYW5nZS5taW4pO1xuICAgICAgICAgICAgcmFuZ2UubWF4ID0gTWF0aC5tYXgocmFuZ2UubWF4LCBjaGFydFJhbmdlLm1heCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXNldChheGlzTmFtZSkge1xuICAgICAgICB0aGlzLmF4aXNSYW5nZXNbYXhpc05hbWVdID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHF1ZXJ5KGF4aXNOYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmF4aXNSYW5nZXNbYXhpc05hbWVdO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQXhpc0dyb3VwUmFuZ2VUcmFja2VyOyIsImltcG9ydCB7IENoYXJ0RWxlbWVudCwgVGV4dEJveCwgQm94IH0gZnJvbSAnLi4vLi4vY29yZSc7XG5pbXBvcnQgeyBGQURFSU4sIElOSVRJQUxfQU5JTUFUSU9OX0RVUkFUSU9OLCBJTlNJREVfRU5ELCBJTlNJREVfQkFTRSwgT1VUU0lERV9FTkQgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuXG5pbXBvcnQgeyBDRU5URVIsIFRPUCwgQk9UVE9NLCBMRUZULCBSSUdIVCwgWCwgWSwgQkxBQ0sgfSBmcm9tICcuLi8uLi9jb21tb24vY29uc3RhbnRzJztcbmltcG9ydCB7IGdldFNwYWNpbmcsIHNldERlZmF1bHRPcHRpb25zIH0gZnJvbSAnLi4vLi4vY29tbW9uJztcblxuY2xhc3MgQmFyTGFiZWwgZXh0ZW5kcyBDaGFydEVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKGNvbnRlbnQsIG9wdGlvbnMsIHBvaW50RGF0YSkge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcblxuICAgICAgICB0aGlzLnRleHRCb3ggPSBuZXcgVGV4dEJveChjb250ZW50LCB0aGlzLm9wdGlvbnMsIHBvaW50RGF0YSk7XG4gICAgICAgIHRoaXMuYXBwZW5kKHRoaXMudGV4dEJveCk7XG4gICAgfVxuXG4gICAgY3JlYXRlVmlzdWFsKCkge1xuICAgICAgICB0aGlzLnRleHRCb3gub3B0aW9ucy5ub2NsaXAgPSB0aGlzLm9wdGlvbnMubm9jbGlwO1xuICAgIH1cblxuICAgIHJlZmxvdyh0YXJnZXRCb3gpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgeyB2ZXJ0aWNhbCwgYWJvdmVBeGlzIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCB0ZXh0ID0gdGhpcy5jaGlsZHJlblswXTtcbiAgICAgICAgY29uc3QgdGV4dE9wdGlvbnMgPSB0ZXh0Lm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGJveCA9IHRleHQuYm94O1xuICAgICAgICBjb25zdCBwYWRkaW5nID0gdGV4dC5vcHRpb25zLnBhZGRpbmc7XG4gICAgICAgIGxldCBsYWJlbEJveCA9IHRhcmdldEJveDtcblxuICAgICAgICB0ZXh0T3B0aW9ucy5hbGlnbiA9IHZlcnRpY2FsID8gQ0VOVEVSIDogTEVGVDtcbiAgICAgICAgdGV4dE9wdGlvbnMudkFsaWduID0gdmVydGljYWwgPyBUT1AgOiBDRU5URVI7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMucG9zaXRpb24gPT09IElOU0lERV9FTkQpIHtcbiAgICAgICAgICAgIGlmICh2ZXJ0aWNhbCkge1xuICAgICAgICAgICAgICAgIHRleHRPcHRpb25zLnZBbGlnbiA9IFRPUDtcblxuICAgICAgICAgICAgICAgIGlmICghYWJvdmVBeGlzICYmIGJveC5oZWlnaHQoKSA8IHRhcmdldEJveC5oZWlnaHQoKSkge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0T3B0aW9ucy52QWxpZ24gPSBCT1RUT007XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0ZXh0T3B0aW9ucy5hbGlnbiA9IGFib3ZlQXhpcyA/IFJJR0hUIDogTEVGVDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLnBvc2l0aW9uID09PSBDRU5URVIpIHtcbiAgICAgICAgICAgIHRleHRPcHRpb25zLnZBbGlnbiA9IENFTlRFUjtcbiAgICAgICAgICAgIHRleHRPcHRpb25zLmFsaWduID0gQ0VOVEVSO1xuICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMucG9zaXRpb24gPT09IElOU0lERV9CQVNFKSB7XG4gICAgICAgICAgICBpZiAodmVydGljYWwpIHtcbiAgICAgICAgICAgICAgICB0ZXh0T3B0aW9ucy52QWxpZ24gPSBhYm92ZUF4aXMgPyBCT1RUT00gOiBUT1A7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRleHRPcHRpb25zLmFsaWduID0gYWJvdmVBeGlzID8gTEVGVCA6IFJJR0hUO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMucG9zaXRpb24gPT09IE9VVFNJREVfRU5EKSB7XG4gICAgICAgICAgICBpZiAodmVydGljYWwpIHtcbiAgICAgICAgICAgICAgICBpZiAoYWJvdmVBeGlzKSB7XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsQm94ID0gbmV3IEJveChcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEJveC54MSwgdGFyZ2V0Qm94LnkxIC0gYm94LmhlaWdodCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Qm94LngyLCB0YXJnZXRCb3gueTFcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbEJveCA9IG5ldyBCb3goXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRCb3gueDEsIHRhcmdldEJveC55MixcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEJveC54MiwgdGFyZ2V0Qm94LnkyICsgYm94LmhlaWdodCgpXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0ZXh0T3B0aW9ucy5hbGlnbiA9IENFTlRFUjtcbiAgICAgICAgICAgICAgICBpZiAoYWJvdmVBeGlzKSB7XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsQm94ID0gbmV3IEJveChcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEJveC54MiwgdGFyZ2V0Qm94LnkxLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0Qm94LngyICsgYm94LndpZHRoKCksIHRhcmdldEJveC55MlxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsQm94ID0gbmV3IEJveChcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEJveC54MSAtIGJveC53aWR0aCgpLCB0YXJnZXRCb3gueTEsXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRCb3gueDEsIHRhcmdldEJveC55MlxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghb3B0aW9ucy5yb3RhdGlvbikge1xuICAgICAgICAgICAgaWYgKHZlcnRpY2FsKSB7XG4gICAgICAgICAgICAgICAgcGFkZGluZy5sZWZ0ID0gcGFkZGluZy5yaWdodCA9XG4gICAgICAgICAgICAgICAgICAgIChsYWJlbEJveC53aWR0aCgpIC0gdGV4dC5jb250ZW50Qm94LndpZHRoKCkpIC8gMjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFkZGluZy50b3AgPSBwYWRkaW5nLmJvdHRvbSA9XG4gICAgICAgICAgICAgICAgICAgIChsYWJlbEJveC5oZWlnaHQoKSAtIHRleHQuY29udGVudEJveC5oZWlnaHQoKSkgLyAyO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGV4dC5yZWZsb3cobGFiZWxCb3gpO1xuICAgIH1cblxuICAgIGFsaWduVG9DbGlwQm94KGNsaXBCb3gpIHtcbiAgICAgICAgY29uc3QgdmVydGljYWwgPSB0aGlzLm9wdGlvbnMudmVydGljYWw7XG4gICAgICAgIGNvbnN0IGZpZWxkID0gdmVydGljYWwgPyBZIDogWDtcbiAgICAgICAgY29uc3Qgc3RhcnQgPSBmaWVsZCArIFwiMVwiO1xuICAgICAgICBjb25zdCBlbmQgPSBmaWVsZCArIFwiMlwiO1xuICAgICAgICBjb25zdCB0ZXh0ID0gdGhpcy5jaGlsZHJlblswXTtcbiAgICAgICAgY29uc3QgcGFyZW50Qm94ID0gdGhpcy5wYXJlbnQuYm94O1xuXG4gICAgICAgIGlmIChwYXJlbnRCb3hbc3RhcnRdIDwgY2xpcEJveFtzdGFydF0gfHwgY2xpcEJveFtlbmRdIDwgcGFyZW50Qm94W2VuZF0pIHtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldEJveCA9IHRleHQucGFkZGluZ0JveC5jbG9uZSgpO1xuICAgICAgICAgICAgdGFyZ2V0Qm94W3N0YXJ0XSA9IE1hdGgubWF4KHBhcmVudEJveFtzdGFydF0sIGNsaXBCb3hbc3RhcnRdKTtcbiAgICAgICAgICAgIHRhcmdldEJveFtlbmRdID0gTWF0aC5taW4ocGFyZW50Qm94W2VuZF0sIGNsaXBCb3hbZW5kXSk7XG5cbiAgICAgICAgICAgIHRoaXMucmVmbG93KHRhcmdldEJveCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbnNldERlZmF1bHRPcHRpb25zKEJhckxhYmVsLCB7XG4gICAgcG9zaXRpb246IE9VVFNJREVfRU5ELFxuICAgIG1hcmdpbjogZ2V0U3BhY2luZygzKSxcbiAgICBwYWRkaW5nOiBnZXRTcGFjaW5nKDQpLFxuICAgIGNvbG9yOiBCTEFDSyxcbiAgICBiYWNrZ3JvdW5kOiBcIlwiLFxuICAgIGJvcmRlcjoge1xuICAgICAgICB3aWR0aDogMSxcbiAgICAgICAgY29sb3I6IFwiXCJcbiAgICB9LFxuICAgIGFib3ZlQXhpczogdHJ1ZSxcbiAgICB2ZXJ0aWNhbDogZmFsc2UsXG4gICAgYW5pbWF0aW9uOiB7XG4gICAgICAgIHR5cGU6IEZBREVJTixcbiAgICAgICAgZGVsYXk6IElOSVRJQUxfQU5JTUFUSU9OX0RVUkFUSU9OXG4gICAgfSxcbiAgICB6SW5kZXg6IDJcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBCYXJMYWJlbDsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoYXNHcmFkaWVudE92ZXJsYXkob3B0aW9ucykge1xuICAgIGNvbnN0IG92ZXJsYXkgPSBvcHRpb25zLm92ZXJsYXk7XG5cbiAgICByZXR1cm4gb3ZlcmxheSAmJiBvdmVybGF5LmdyYWRpZW50ICYmIG92ZXJsYXkuZ3JhZGllbnQgIT09IFwibm9uZVwiO1xufSIsImltcG9ydCB7IGRyYXdpbmcgYXMgZHJhdywgQ29sb3IgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tZHJhd2luZyc7XG5cbmltcG9ydCBCYXJMYWJlbCBmcm9tICcuL2Jhci1sYWJlbCc7XG5cbmltcG9ydCB7IEJPUkRFUl9CUklHSFRORVNTLCBUT09MVElQX09GRlNFVCB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5cbmltcG9ydCBoYXNHcmFkaWVudE92ZXJsYXkgZnJvbSAnLi4vdXRpbHMvaGFzLWdyYWRpZW50LW92ZXJsYXknO1xuXG5pbXBvcnQgeyBDaGFydEVsZW1lbnQsIFBvaW50IH0gZnJvbSAnLi4vLi4vY29yZSc7XG5cbmltcG9ydCBQb2ludEV2ZW50c01peGluIGZyb20gJy4uL21peGlucy9wb2ludC1ldmVudHMtbWl4aW4nO1xuaW1wb3J0IE5vdGVNaXhpbiBmcm9tICcuLi9taXhpbnMvbm90ZS1taXhpbic7XG5cbmltcG9ydCB7IFdISVRFLCBMRUZULCBSSUdIVCwgQk9UVE9NLCBUT1AgfSBmcm9tICcuLi8uLi9jb21tb24vY29uc3RhbnRzJztcbmltcG9ydCB7IGFsaWduUGF0aFRvUGl4ZWwsIGRlZXBFeHRlbmQsIGRlZmluZWQsIGdldFRlbXBsYXRlLCB2YWx1ZU9yRGVmYXVsdCB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5cbmNvbnN0IEJBUl9BTElHTl9NSU5fV0lEVEggPSA2O1xuXG5jbGFzcyBCYXIgZXh0ZW5kcyBDaGFydEVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKHZhbHVlLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5jb2xvciA9IG9wdGlvbnMuY29sb3IgfHwgV0hJVEU7XG4gICAgICAgIHRoaXMuYWJvdmVBeGlzID0gdmFsdWVPckRlZmF1bHQodGhpcy5vcHRpb25zLmFib3ZlQXhpcywgdHJ1ZSk7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLl9yZW5kZXJlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fcmVuZGVyZWQgPSB0cnVlO1xuXG4gICAgICAgIHRoaXMuY3JlYXRlTGFiZWwoKTtcbiAgICAgICAgdGhpcy5jcmVhdGVOb3RlKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuZXJyb3JCYXIpIHtcbiAgICAgICAgICAgIHRoaXMuYXBwZW5kKHRoaXMuZXJyb3JCYXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY3JlYXRlTGFiZWwoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGxhYmVscyA9IG9wdGlvbnMubGFiZWxzO1xuXG4gICAgICAgIGlmIChsYWJlbHMudmlzaWJsZSkge1xuICAgICAgICAgICAgY29uc3QgcG9pbnREYXRhID0gdGhpcy5wb2ludERhdGEoKTtcbiAgICAgICAgICAgIGxldCBsYWJlbFRlbXBsYXRlID0gZ2V0VGVtcGxhdGUobGFiZWxzKTtcbiAgICAgICAgICAgIGxldCBsYWJlbFRleHQ7XG5cbiAgICAgICAgICAgIGlmIChsYWJlbFRlbXBsYXRlKSB7XG4gICAgICAgICAgICAgICAgbGFiZWxUZXh0ID0gbGFiZWxUZW1wbGF0ZShwb2ludERhdGEpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsYWJlbFRleHQgPSB0aGlzLmZvcm1hdFZhbHVlKGxhYmVscy5mb3JtYXQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmxhYmVsID0gbmV3IEJhckxhYmVsKGxhYmVsVGV4dCxcbiAgICAgICAgICAgICAgICBkZWVwRXh0ZW5kKHtcbiAgICAgICAgICAgICAgICAgICAgdmVydGljYWw6IG9wdGlvbnMudmVydGljYWxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGxhYmVsc1xuICAgICAgICAgICAgKSwgcG9pbnREYXRhKTtcbiAgICAgICAgICAgIHRoaXMuYXBwZW5kKHRoaXMubGFiZWwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9ybWF0VmFsdWUoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLm93bmVyLmZvcm1hdFBvaW50VmFsdWUodGhpcywgZm9ybWF0KTtcbiAgICB9XG5cbiAgICByZWZsb3codGFyZ2V0Qm94KSB7XG4gICAgICAgIHRoaXMucmVuZGVyKCk7XG5cbiAgICAgICAgY29uc3QgbGFiZWwgPSB0aGlzLmxhYmVsO1xuXG4gICAgICAgIHRoaXMuYm94ID0gdGFyZ2V0Qm94O1xuXG4gICAgICAgIGlmIChsYWJlbCkge1xuICAgICAgICAgICAgbGFiZWwub3B0aW9ucy5hYm92ZUF4aXMgPSB0aGlzLmFib3ZlQXhpcztcbiAgICAgICAgICAgIGxhYmVsLnJlZmxvdyh0YXJnZXRCb3gpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMubm90ZSkge1xuICAgICAgICAgICAgdGhpcy5ub3RlLnJlZmxvdyh0YXJnZXRCb3gpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuZXJyb3JCYXJzKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZXJyb3JCYXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvckJhcnNbaV0ucmVmbG93KHRhcmdldEJveCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjcmVhdGVWaXN1YWwoKSB7XG4gICAgICAgIGNvbnN0IHsgYm94LCBvcHRpb25zIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBjdXN0b21WaXN1YWwgPSBvcHRpb25zLnZpc3VhbDtcblxuICAgICAgICBpZiAodGhpcy52aXNpYmxlICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgc3VwZXIuY3JlYXRlVmlzdWFsKCk7XG5cbiAgICAgICAgICAgIGlmIChjdXN0b21WaXN1YWwpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2aXN1YWwgPSB0aGlzLnJlY3RWaXN1YWwgPSBjdXN0b21WaXN1YWwoe1xuICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeTogdGhpcy5jYXRlZ29yeSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YUl0ZW06IHRoaXMuZGF0YUl0ZW0sXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBzZW5kZXI6IHRoaXMuZ2V0U2VuZGVyKCksXG4gICAgICAgICAgICAgICAgICAgIHNlcmllczogdGhpcy5zZXJpZXMsXG4gICAgICAgICAgICAgICAgICAgIHBlcmNlbnRhZ2U6IHRoaXMucGVyY2VudGFnZSxcbiAgICAgICAgICAgICAgICAgICAgc3RhY2tWYWx1ZTogdGhpcy5zdGFja1ZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBydW5uaW5nVG90YWw6IHRoaXMucnVubmluZ1RvdGFsLFxuICAgICAgICAgICAgICAgICAgICB0b3RhbDogdGhpcy50b3RhbCxcbiAgICAgICAgICAgICAgICAgICAgcmVjdDogYm94LnRvUmVjdCgpLFxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVWaXN1YWw6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VwID0gbmV3IGRyYXcuR3JvdXAoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlUmVjdChncm91cCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ3JvdXA7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGlmICh2aXN1YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52aXN1YWwuYXBwZW5kKHZpc3VhbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChib3gud2lkdGgoKSA+IDAgJiYgYm94LmhlaWdodCgpID4gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlUmVjdCh0aGlzLnZpc3VhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjcmVhdGVSZWN0KHZpc3VhbCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBib3JkZXIgPSBvcHRpb25zLmJvcmRlcjtcbiAgICAgICAgY29uc3Qgc3Ryb2tlT3BhY2l0eSA9IGRlZmluZWQoYm9yZGVyLm9wYWNpdHkpID8gYm9yZGVyLm9wYWNpdHkgOiBvcHRpb25zLm9wYWNpdHk7XG4gICAgICAgIGNvbnN0IHJlY3QgPSB0aGlzLmJveC50b1JlY3QoKTtcblxuICAgICAgICByZWN0LnNpemUud2lkdGggPSBNYXRoLnJvdW5kKHJlY3Quc2l6ZS53aWR0aCk7XG5cbiAgICAgICAgY29uc3QgcGF0aCA9IHRoaXMucmVjdFZpc3VhbCA9IGRyYXcuUGF0aC5mcm9tUmVjdChyZWN0LCB7XG4gICAgICAgICAgICBmaWxsOiB7XG4gICAgICAgICAgICAgICAgY29sb3I6IHRoaXMuY29sb3IsXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogb3B0aW9ucy5vcGFjaXR5XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3Ryb2tlOiB7XG4gICAgICAgICAgICAgICAgY29sb3I6IHRoaXMuZ2V0Qm9yZGVyQ29sb3IoKSxcbiAgICAgICAgICAgICAgICB3aWR0aDogYm9yZGVyLndpZHRoLFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IHN0cm9rZU9wYWNpdHksXG4gICAgICAgICAgICAgICAgZGFzaFR5cGU6IGJvcmRlci5kYXNoVHlwZVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCB3aWR0aCA9IHRoaXMuYm94LndpZHRoKCk7XG4gICAgICAgIGNvbnN0IGhlaWdodCA9IHRoaXMuYm94LmhlaWdodCgpO1xuXG4gICAgICAgIGNvbnN0IHNpemUgPSBvcHRpb25zLnZlcnRpY2FsID8gd2lkdGggOiBoZWlnaHQ7XG5cbiAgICAgICAgaWYgKHNpemUgPiBCQVJfQUxJR05fTUlOX1dJRFRIKSB7XG4gICAgICAgICAgICBhbGlnblBhdGhUb1BpeGVsKHBhdGgpO1xuXG4gICAgICAgICAgICAvLyBGaXhlcyBsaW5lSm9pbiBpc3N1ZSBpbiBmaXJlZm94IHdoZW4gdGhlIGpvaW5lZCBsaW5lcyBhcmUgcGFyYWxsZWxcbiAgICAgICAgICAgIGlmICh3aWR0aCA8IDEgfHwgaGVpZ2h0IDwgMSkge1xuICAgICAgICAgICAgICAgIHBhdGgub3B0aW9ucy5zdHJva2UubGluZUpvaW4gPSBcInJvdW5kXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2aXN1YWwuYXBwZW5kKHBhdGgpO1xuXG4gICAgICAgIGlmIChoYXNHcmFkaWVudE92ZXJsYXkob3B0aW9ucykpIHtcbiAgICAgICAgICAgIGNvbnN0IG92ZXJsYXkgPSB0aGlzLmNyZWF0ZUdyYWRpZW50T3ZlcmxheShwYXRoLCB7IGJhc2VDb2xvcjogdGhpcy5jb2xvciB9LCBkZWVwRXh0ZW5kKHtcbiAgICAgICAgICAgICAgICBlbmQ6ICFvcHRpb25zLnZlcnRpY2FsID8gWyAwLCAxIF0gOiB1bmRlZmluZWRcbiAgICAgICAgICAgIH0sIG9wdGlvbnMub3ZlcmxheSkpO1xuXG4gICAgICAgICAgICB2aXN1YWwuYXBwZW5kKG92ZXJsYXkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY3JlYXRlSGlnaGxpZ2h0KHN0eWxlKSB7XG4gICAgICAgIGNvbnN0IGhpZ2hsaWdodCA9IGRyYXcuUGF0aC5mcm9tUmVjdCh0aGlzLmJveC50b1JlY3QoKSwgc3R5bGUpO1xuXG4gICAgICAgIHJldHVybiBhbGlnblBhdGhUb1BpeGVsKGhpZ2hsaWdodCk7XG4gICAgfVxuXG4gICAgaGlnaGxpZ2h0VmlzdWFsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWN0VmlzdWFsO1xuICAgIH1cblxuICAgIGhpZ2hsaWdodFZpc3VhbEFyZ3MoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBvcHRpb25zOiB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgICByZWN0OiB0aGlzLmJveC50b1JlY3QoKSxcbiAgICAgICAgICAgIHZpc3VhbDogdGhpcy5yZWN0VmlzdWFsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZ2V0Qm9yZGVyQ29sb3IoKSB7XG4gICAgICAgIGNvbnN0IGNvbG9yID0gdGhpcy5jb2xvcjtcbiAgICAgICAgY29uc3QgYm9yZGVyID0gdGhpcy5vcHRpb25zLmJvcmRlcjtcbiAgICAgICAgY29uc3QgYnJpZ2h0bmVzcyA9IGJvcmRlci5fYnJpZ2h0bmVzcyB8fCBCT1JERVJfQlJJR0hUTkVTUztcbiAgICAgICAgbGV0IGJvcmRlckNvbG9yID0gYm9yZGVyLmNvbG9yO1xuXG4gICAgICAgIGlmICghZGVmaW5lZChib3JkZXJDb2xvcikpIHtcbiAgICAgICAgICAgIGJvcmRlckNvbG9yID0gbmV3IENvbG9yKGNvbG9yKS5icmlnaHRuZXNzKGJyaWdodG5lc3MpLnRvSGV4KCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYm9yZGVyQ29sb3I7XG4gICAgfVxuXG4gICAgdG9vbHRpcEFuY2hvcigpIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zLCBib3gsIGFib3ZlQXhpcyB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgY2xpcEJveCA9IHRoaXMub3duZXIucGFuZS5jbGlwQm94KCkgfHwgYm94O1xuICAgICAgICBsZXQgaG9yaXpvbnRhbEFsaWduID0gTEVGVDtcbiAgICAgICAgbGV0IHZlcnRpY2FsQWxpZ24gPSBUT1A7XG4gICAgICAgIGxldCB4LCB5O1xuXG4gICAgICAgIGlmIChvcHRpb25zLnZlcnRpY2FsKSB7XG4gICAgICAgICAgICB4ID0gTWF0aC5taW4oYm94LngyLCBjbGlwQm94LngyKSArIFRPT0xUSVBfT0ZGU0VUO1xuICAgICAgICAgICAgaWYgKGFib3ZlQXhpcykge1xuICAgICAgICAgICAgICAgIHkgPSBNYXRoLm1heChib3gueTEsIGNsaXBCb3gueTEpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB5ID0gTWF0aC5taW4oYm94LnkyLCBjbGlwQm94LnkyKTtcbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbEFsaWduID0gQk9UVE9NO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgeDEgPSBNYXRoLm1heChib3gueDEsIGNsaXBCb3gueDEpO1xuICAgICAgICAgICAgY29uc3QgeDIgPSBNYXRoLm1pbihib3gueDIsIGNsaXBCb3gueDIpO1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5pc1N0YWNrZWQpIHtcbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbEFsaWduID0gQk9UVE9NO1xuICAgICAgICAgICAgICAgIGlmIChhYm92ZUF4aXMpIHtcbiAgICAgICAgICAgICAgICAgICAgaG9yaXpvbnRhbEFsaWduID0gUklHSFQ7XG4gICAgICAgICAgICAgICAgICAgIHggPSB4MjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB4ID0geDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHkgPSBNYXRoLm1heChib3gueTEsIGNsaXBCb3gueTEpIC0gVE9PTFRJUF9PRkZTRVQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChhYm92ZUF4aXMpIHtcbiAgICAgICAgICAgICAgICAgICAgeCA9IHgyICsgVE9PTFRJUF9PRkZTRVQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgeCA9IHgxIC0gVE9PTFRJUF9PRkZTRVQ7XG4gICAgICAgICAgICAgICAgICAgIGhvcml6b250YWxBbGlnbiA9IFJJR0hUO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB5ID0gTWF0aC5tYXgoYm94LnkxLCBjbGlwQm94LnkxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwb2ludDogbmV3IFBvaW50KHgsIHkpLFxuICAgICAgICAgICAgYWxpZ246IHtcbiAgICAgICAgICAgICAgICBob3Jpem9udGFsOiBob3Jpem9udGFsQWxpZ24sXG4gICAgICAgICAgICAgICAgdmVydGljYWw6IHZlcnRpY2FsQWxpZ25cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBvdmVybGFwc0JveChib3gpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYm94Lm92ZXJsYXBzKGJveCk7XG4gICAgfVxuXG4gICAgcG9pbnREYXRhKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGF0YUl0ZW06IHRoaXMuZGF0YUl0ZW0sXG4gICAgICAgICAgICBjYXRlZ29yeTogdGhpcy5jYXRlZ29yeSxcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLnZhbHVlLFxuICAgICAgICAgICAgcGVyY2VudGFnZTogdGhpcy5wZXJjZW50YWdlLFxuICAgICAgICAgICAgc3RhY2tWYWx1ZTogdGhpcy5zdGFja1ZhbHVlLFxuICAgICAgICAgICAgcnVubmluZ1RvdGFsOiB0aGlzLnJ1bm5pbmdUb3RhbCxcbiAgICAgICAgICAgIHRvdGFsOiB0aGlzLnRvdGFsLFxuICAgICAgICAgICAgc2VyaWVzOiB0aGlzLnNlcmllc1xuICAgICAgICB9O1xuICAgIH1cbn1cblxuZGVlcEV4dGVuZChCYXIucHJvdG90eXBlLCBQb2ludEV2ZW50c01peGluKTtcbmRlZXBFeHRlbmQoQmFyLnByb3RvdHlwZSwgTm90ZU1peGluKTtcblxuQmFyLnByb3RvdHlwZS5kZWZhdWx0cyA9IHtcbiAgICBib3JkZXI6IHtcbiAgICAgICAgd2lkdGg6IDFcbiAgICB9LFxuICAgIHZlcnRpY2FsOiB0cnVlLFxuICAgIG92ZXJsYXk6IHtcbiAgICAgICAgZ3JhZGllbnQ6IFwiZ2xhc3NcIlxuICAgIH0sXG4gICAgbGFiZWxzOiB7XG4gICAgICAgIHZpc2libGU6IGZhbHNlLFxuICAgICAgICBmb3JtYXQ6IFwiezB9XCJcbiAgICB9LFxuICAgIG9wYWNpdHk6IDEsXG4gICAgbm90ZXM6IHtcbiAgICAgICAgbGFiZWw6IHt9XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgQmFyOyIsImV4cG9ydCBmdW5jdGlvbiBmb3JFYWNoKGVsZW1lbnRzLCBjYWxsYmFjaykge1xuICAgIGVsZW1lbnRzLmZvckVhY2goY2FsbGJhY2spO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZm9yRWFjaFJldmVyc2UoZWxlbWVudHMsIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgbGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xuXG4gICAgZm9yIChsZXQgaWR4ID0gbGVuZ3RoIC0gMTsgaWR4ID49IDA7IGlkeC0tKSB7XG4gICAgICAgIGNhbGxiYWNrKGVsZW1lbnRzW2lkeF0sIGlkeCAtIGxlbmd0aCAtIDEpO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBDaGFydEVsZW1lbnQgfSBmcm9tICcuLi8uLi9jb3JlJztcblxuaW1wb3J0IHsgWCwgWSB9IGZyb20gJy4uLy4uL2NvbW1vbi9jb25zdGFudHMnO1xuaW1wb3J0IHsgc2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tICcuLi8uLi9jb21tb24nO1xuaW1wb3J0IHsgZm9yRWFjaCwgZm9yRWFjaFJldmVyc2UgfSBmcm9tICcuL3V0aWxzJztcblxuY2xhc3MgQ2x1c3RlckxheW91dCBleHRlbmRzIENoYXJ0RWxlbWVudCB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcblxuICAgICAgICB0aGlzLmZvckVhY2ggPSBvcHRpb25zLnJ0bCA/IGZvckVhY2hSZXZlcnNlIDogZm9yRWFjaDtcbiAgICB9XG5cbiAgICByZWZsb3coYm94KSB7XG4gICAgICAgIGNvbnN0IHsgdmVydGljYWwsIGdhcCwgc3BhY2luZyB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG4gICAgICAgIGNvbnN0IGNvdW50ID0gY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgICBjb25zdCBheGlzID0gdmVydGljYWwgPyBZIDogWDtcbiAgICAgICAgY29uc3Qgc2xvdHMgPSBjb3VudCArIGdhcCArIChzcGFjaW5nICogKGNvdW50IC0gMSkpO1xuICAgICAgICBjb25zdCBzbG90U2l6ZSA9ICh2ZXJ0aWNhbCA/IGJveC5oZWlnaHQoKSA6IGJveC53aWR0aCgpKSAvIHNsb3RzO1xuICAgICAgICBsZXQgcG9zaXRpb24gPSBib3hbYXhpcyArIDFdICsgc2xvdFNpemUgKiAoZ2FwIC8gMik7XG5cbiAgICAgICAgdGhpcy5mb3JFYWNoKGNoaWxkcmVuLCAoY2hpbGQsIGlkeCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2hpbGRCb3ggPSAoY2hpbGQuYm94IHx8IGJveCkuY2xvbmUoKTtcblxuICAgICAgICAgICAgY2hpbGRCb3hbYXhpcyArIDFdID0gcG9zaXRpb247XG4gICAgICAgICAgICBjaGlsZEJveFtheGlzICsgMl0gPSBwb3NpdGlvbiArIHNsb3RTaXplO1xuXG4gICAgICAgICAgICBjaGlsZC5yZWZsb3coY2hpbGRCb3gpO1xuICAgICAgICAgICAgaWYgKGlkeCA8IGNvdW50IC0gMSkge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uICs9IChzbG90U2l6ZSAqIHNwYWNpbmcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwb3NpdGlvbiArPSBzbG90U2l6ZTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5zZXREZWZhdWx0T3B0aW9ucyhDbHVzdGVyTGF5b3V0LCB7XG4gICAgdmVydGljYWw6IGZhbHNlLFxuICAgIGdhcDogMCxcbiAgICBzcGFjaW5nOiAwXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgQ2x1c3RlckxheW91dDsiLCJpbXBvcnQgeyBDaGFydEVsZW1lbnQsIEJveCB9IGZyb20gJy4uLy4uL2NvcmUnO1xuXG5pbXBvcnQgeyBYLCBZIH0gZnJvbSAnLi4vLi4vY29tbW9uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBzZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5cbmNsYXNzIFN0YWNrV3JhcCBleHRlbmRzIENoYXJ0RWxlbWVudCB7XG4gICAgcmVmbG93KHRhcmdldEJveCkge1xuICAgICAgICBjb25zdCBwb3NpdGlvbkF4aXMgPSB0aGlzLm9wdGlvbnMudmVydGljYWwgPyBYIDogWTtcbiAgICAgICAgY29uc3QgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuICAgICAgICBjb25zdCBjaGlsZHJlbkNvdW50ID0gY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgICBsZXQgYm94ID0gdGhpcy5ib3ggPSBuZXcgQm94KCk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbkNvdW50OyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRDaGlsZCA9IGNoaWxkcmVuW2ldO1xuXG4gICAgICAgICAgICBpZiAoY3VycmVudENoaWxkLnZpc2libGUgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGRCb3ggPSBjdXJyZW50Q2hpbGQuYm94LmNsb25lKCk7XG4gICAgICAgICAgICAgICAgY2hpbGRCb3guc25hcFRvKHRhcmdldEJveCwgcG9zaXRpb25BeGlzKTtcblxuICAgICAgICAgICAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGJveCA9IHRoaXMuYm94ID0gY2hpbGRCb3guY2xvbmUoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjdXJyZW50Q2hpbGQucmVmbG93KGNoaWxkQm94KTtcbiAgICAgICAgICAgICAgICBib3gud3JhcChjaGlsZEJveCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbnNldERlZmF1bHRPcHRpb25zKFN0YWNrV3JhcCwge1xuICAgIHZlcnRpY2FsOiB0cnVlXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgU3RhY2tXcmFwOyIsImltcG9ydCB7IGdlb21ldHJ5IGFzIGdlb20gfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tZHJhd2luZyc7XG5cbmltcG9ydCBCYXIgZnJvbSAnLi9iYXInO1xuXG5pbXBvcnQgQ2F0ZWdvcmljYWxDaGFydCBmcm9tICcuLi9jYXRlZ29yaWNhbC1jaGFydCc7XG5pbXBvcnQgQ2x1c3RlckxheW91dCBmcm9tICcuLi9sYXlvdXQvY2x1c3Rlci1sYXlvdXQnO1xuaW1wb3J0IFN0YWNrV3JhcCBmcm9tICcuLi9sYXlvdXQvc3RhY2std3JhcCc7XG5pbXBvcnQgeyBCQVIsIE9VVFNJREVfRU5ELCBJTlNJREVfRU5EIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcblxuaW1wb3J0IGFueUhhc1pJbmRleCBmcm9tICcuLi91dGlscy9hbnktaGFzLXotaW5kZXgnO1xuXG5pbXBvcnQgeyBTVFJJTkcsIFgsIFkgfSBmcm9tICcuLi8uLi9jb21tb24vY29uc3RhbnRzJztcbmltcG9ydCB7IGRlZmluZWQsIGlzRnVuY3Rpb24sIHNldERlZmF1bHRPcHRpb25zIH0gZnJvbSAnLi4vLi4vY29tbW9uJztcblxuY2xhc3MgQmFyQ2hhcnQgZXh0ZW5kcyBDYXRlZ29yaWNhbENoYXJ0IHtcblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgc3VwZXIucmVuZGVyKCk7XG4gICAgICAgIHRoaXMudXBkYXRlU3RhY2tSYW5nZSgpO1xuICAgIH1cblxuICAgIHBvaW50VHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIEJhcjtcbiAgICB9XG5cbiAgICBjbHVzdGVyVHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIENsdXN0ZXJMYXlvdXQ7XG4gICAgfVxuXG4gICAgc3RhY2tUeXBlKCkge1xuICAgICAgICByZXR1cm4gU3RhY2tXcmFwO1xuICAgIH1cblxuICAgIHN0YWNrTGltaXRzKGF4aXNOYW1lLCBzdGFja05hbWUpIHtcbiAgICAgICAgY29uc3QgbGltaXRzID0gc3VwZXIuc3RhY2tMaW1pdHMoYXhpc05hbWUsIHN0YWNrTmFtZSk7XG5cbiAgICAgICAgcmV0dXJuIGxpbWl0cztcbiAgICB9XG5cbiAgICBjcmVhdGVQb2ludChkYXRhLCBmaWVsZHMpIHtcbiAgICAgICAgY29uc3QgeyBjYXRlZ29yeUl4LCBjYXRlZ29yeSwgc2VyaWVzLCBzZXJpZXNJeCB9ID0gZmllbGRzO1xuICAgICAgICBjb25zdCB7IG9wdGlvbnMsIGNoaWxkcmVuIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBpc1N0YWNrZWQgPSBvcHRpb25zLmlzU3RhY2tlZDtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLnBvaW50VmFsdWUoZGF0YSk7XG4gICAgICAgIGxldCBwb2ludE9wdGlvbnMgPSB0aGlzLnBvaW50T3B0aW9ucyhzZXJpZXMsIHNlcmllc0l4KTtcblxuICAgICAgICBjb25zdCBsYWJlbE9wdGlvbnMgPSBwb2ludE9wdGlvbnMubGFiZWxzO1xuICAgICAgICBpZiAoaXNTdGFja2VkKSB7XG4gICAgICAgICAgICBpZiAobGFiZWxPcHRpb25zLnBvc2l0aW9uID09PSBPVVRTSURFX0VORCkge1xuICAgICAgICAgICAgICAgIGxhYmVsT3B0aW9ucy5wb3NpdGlvbiA9IElOU0lERV9FTkQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwb2ludE9wdGlvbnMuaXNTdGFja2VkID0gaXNTdGFja2VkO1xuXG4gICAgICAgIGxldCBjb2xvciA9IGRhdGEuZmllbGRzLmNvbG9yIHx8IHNlcmllcy5jb2xvcjtcbiAgICAgICAgaWYgKHZhbHVlIDwgMCAmJiBwb2ludE9wdGlvbnMubmVnYXRpdmVDb2xvcikge1xuICAgICAgICAgICAgY29sb3IgPSBwb2ludE9wdGlvbnMubmVnYXRpdmVDb2xvcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHBvaW50T3B0aW9ucyA9IHRoaXMuZXZhbFBvaW50T3B0aW9ucyhcbiAgICAgICAgICAgIHBvaW50T3B0aW9ucywgdmFsdWUsIGNhdGVnb3J5LCBjYXRlZ29yeUl4LCBzZXJpZXMsIHNlcmllc0l4XG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oc2VyaWVzLmNvbG9yKSkge1xuICAgICAgICAgICAgY29sb3IgPSBwb2ludE9wdGlvbnMuY29sb3I7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwb2ludFR5cGUgPSB0aGlzLnBvaW50VHlwZSgpO1xuICAgICAgICBjb25zdCBwb2ludCA9IG5ldyBwb2ludFR5cGUodmFsdWUsIHBvaW50T3B0aW9ucyk7XG4gICAgICAgIHBvaW50LmNvbG9yID0gY29sb3I7XG5cbiAgICAgICAgbGV0IGNsdXN0ZXIgPSBjaGlsZHJlbltjYXRlZ29yeUl4XTtcbiAgICAgICAgaWYgKCFjbHVzdGVyKSB7XG4gICAgICAgICAgICBjb25zdCBjbHVzdGVyVHlwZSA9IHRoaXMuY2x1c3RlclR5cGUoKTtcbiAgICAgICAgICAgIGNsdXN0ZXIgPSBuZXcgY2x1c3RlclR5cGUoe1xuICAgICAgICAgICAgICAgIHZlcnRpY2FsOiBvcHRpb25zLmludmVydEF4ZXMsXG4gICAgICAgICAgICAgICAgZ2FwOiBvcHRpb25zLmdhcCxcbiAgICAgICAgICAgICAgICBzcGFjaW5nOiBvcHRpb25zLnNwYWNpbmcsXG4gICAgICAgICAgICAgICAgcnRsOiAhb3B0aW9ucy5pbnZlcnRBeGVzICYmICh0aGlzLmNoYXJ0U2VydmljZSB8fCB7fSkucnRsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuYXBwZW5kKGNsdXN0ZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzU3RhY2tlZCkge1xuICAgICAgICAgICAgY29uc3Qgc3RhY2tXcmFwID0gdGhpcy5nZXRTdGFja1dyYXAoc2VyaWVzLCBjbHVzdGVyKTtcbiAgICAgICAgICAgIHN0YWNrV3JhcC5hcHBlbmQocG9pbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2x1c3Rlci5hcHBlbmQocG9pbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBvaW50O1xuICAgIH1cblxuICAgIGdldFN0YWNrV3JhcChzZXJpZXMsIGNsdXN0ZXIpIHtcbiAgICAgICAgY29uc3Qgc3RhY2sgPSBzZXJpZXMuc3RhY2s7XG4gICAgICAgIGNvbnN0IHN0YWNrR3JvdXAgPSBzdGFjayA/IHN0YWNrLmdyb3VwIHx8IHN0YWNrIDogc3RhY2s7XG4gICAgICAgIGNvbnN0IHdyYXBzID0gY2x1c3Rlci5jaGlsZHJlbjtcbiAgICAgICAgbGV0IHN0YWNrV3JhcDtcblxuICAgICAgICBpZiAodHlwZW9mIHN0YWNrR3JvdXAgPT09IFNUUklORykge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB3cmFwcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmICh3cmFwc1tpXS5fc3RhY2tHcm91cCA9PT0gc3RhY2tHcm91cCkge1xuICAgICAgICAgICAgICAgICAgICBzdGFja1dyYXAgPSB3cmFwc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RhY2tXcmFwID0gd3JhcHNbMF07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXN0YWNrV3JhcCkge1xuICAgICAgICAgICAgY29uc3Qgc3RhY2tUeXBlID0gdGhpcy5zdGFja1R5cGUoKTtcbiAgICAgICAgICAgIHN0YWNrV3JhcCA9IG5ldyBzdGFja1R5cGUoe1xuICAgICAgICAgICAgICAgIHZlcnRpY2FsOiAhdGhpcy5vcHRpb25zLmludmVydEF4ZXNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc3RhY2tXcmFwLl9zdGFja0dyb3VwID0gc3RhY2tHcm91cDtcbiAgICAgICAgICAgIGNsdXN0ZXIuYXBwZW5kKHN0YWNrV3JhcCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3RhY2tXcmFwO1xuICAgIH1cblxuICAgIGNhdGVnb3J5U2xvdChjYXRlZ29yeUF4aXMsIGNhdGVnb3J5SXgsIHZhbHVlQXhpcykge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBjYXRlZ29yeVNsb3QgPSBjYXRlZ29yeUF4aXMuZ2V0U2xvdChjYXRlZ29yeUl4KTtcbiAgICAgICAgY29uc3Qgc3RhcnRWYWx1ZSA9IHZhbHVlQXhpcy5zdGFydFZhbHVlKCk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuaXNTdGFja2VkKSB7XG4gICAgICAgICAgICBjb25zdCB6ZXJvU2xvdCA9IHZhbHVlQXhpcy5nZXRTbG90KHN0YXJ0VmFsdWUsIHN0YXJ0VmFsdWUsIHRydWUpO1xuICAgICAgICAgICAgY29uc3Qgc3RhY2tBeGlzID0gb3B0aW9ucy5pbnZlcnRBeGVzID8gWCA6IFk7XG4gICAgICAgICAgICBjYXRlZ29yeVNsb3Rbc3RhY2tBeGlzICsgMV0gPSBjYXRlZ29yeVNsb3Rbc3RhY2tBeGlzICsgMl0gPSB6ZXJvU2xvdFtzdGFja0F4aXMgKyAxXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjYXRlZ29yeVNsb3Q7XG4gICAgfVxuXG4gICAgcmVmbG93Q2F0ZWdvcmllcyhjYXRlZ29yeVNsb3RzKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcbiAgICAgICAgY29uc3QgY2hpbGRyZW5MZW5ndGggPSBjaGlsZHJlbi5sZW5ndGg7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbkxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjaGlsZHJlbltpXS5yZWZsb3coY2F0ZWdvcnlTbG90c1tpXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjcmVhdGVBbmltYXRpb24oKSB7XG4gICAgICAgIHRoaXMuX3NldEFuaW1hdGlvbk9wdGlvbnMoKTtcbiAgICAgICAgc3VwZXIuY3JlYXRlQW5pbWF0aW9uKCk7XG5cbiAgICAgICAgaWYgKGFueUhhc1pJbmRleCh0aGlzLm9wdGlvbnMuc2VyaWVzKSkge1xuICAgICAgICAgICAgdGhpcy5fc2V0Q2hpbGRyZW5BbmltYXRpb24oKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9zZXRDaGlsZHJlbkFuaW1hdGlvbigpIHtcbiAgICAgICAgY29uc3QgcG9pbnRzID0gdGhpcy5wb2ludHM7XG5cbiAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgcG9pbnRzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgICAgIGNvbnN0IHBvaW50ID0gcG9pbnRzW2lkeF07XG4gICAgICAgICAgICBjb25zdCBwb2ludFZpc3VhbCA9IHBvaW50LnZpc3VhbDtcbiAgICAgICAgICAgIGlmIChwb2ludFZpc3VhbCAmJiBkZWZpbmVkKHBvaW50VmlzdWFsLm9wdGlvbnMuekluZGV4KSkge1xuICAgICAgICAgICAgICAgIHBvaW50Lm9wdGlvbnMuYW5pbWF0aW9uID0gdGhpcy5vcHRpb25zLmFuaW1hdGlvbjtcbiAgICAgICAgICAgICAgICBwb2ludC5jcmVhdGVBbmltYXRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9zZXRBbmltYXRpb25PcHRpb25zKCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBhbmltYXRpb24gPSBvcHRpb25zLmFuaW1hdGlvbiB8fCB7fTtcbiAgICAgICAgbGV0IG9yaWdpbjtcblxuICAgICAgICBpZiAob3B0aW9ucy5pc1N0YWNrZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlQXhpcyA9IHRoaXMuc2VyaWVzVmFsdWVBeGlzKG9wdGlvbnMuc2VyaWVzWzBdKTtcbiAgICAgICAgICAgIG9yaWdpbiA9IHZhbHVlQXhpcy5nZXRTbG90KHZhbHVlQXhpcy5zdGFydFZhbHVlKCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3JpZ2luID0gdGhpcy5jYXRlZ29yeUF4aXMuZ2V0U2xvdCgwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFuaW1hdGlvbi5vcmlnaW4gPSBuZXcgZ2VvbS5Qb2ludChvcmlnaW4ueDEsIG9yaWdpbi55MSk7XG4gICAgICAgIGFuaW1hdGlvbi52ZXJ0aWNhbCA9ICFvcHRpb25zLmludmVydEF4ZXM7XG4gICAgfVxufVxuXG5zZXREZWZhdWx0T3B0aW9ucyhCYXJDaGFydCwge1xuICAgIGFuaW1hdGlvbjoge1xuICAgICAgICB0eXBlOiBCQVJcbiAgICB9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgQmFyQ2hhcnQ7IiwiaW1wb3J0IHsgZHJhd2luZyBhcyBkcmF3LCBDb2xvciB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1kcmF3aW5nJztcblxuaW1wb3J0IHsgQ2hhcnRFbGVtZW50LCBQb2ludCB9IGZyb20gJy4uLy4uL2NvcmUnO1xuaW1wb3J0IFBvaW50RXZlbnRzTWl4aW4gZnJvbSAnLi4vbWl4aW5zL3BvaW50LWV2ZW50cy1taXhpbic7XG5pbXBvcnQgTm90ZU1peGluIGZyb20gJy4uL21peGlucy9ub3RlLW1peGluJztcblxuaW1wb3J0IHsgVE9PTFRJUF9PRkZTRVQgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IGhhc0dyYWRpZW50T3ZlcmxheSBmcm9tICcuLi91dGlscy9oYXMtZ3JhZGllbnQtb3ZlcmxheSc7XG5cbmltcG9ydCB7IFdISVRFLCBMRUZULCBUT1AgfSBmcm9tICcuLi8uLi9jb21tb24vY29uc3RhbnRzJztcbmltcG9ydCB7IGFsaWduUGF0aFRvUGl4ZWwsIGRlZXBFeHRlbmQsIGRlZmluZWQsIHNldERlZmF1bHRPcHRpb25zLCB2YWx1ZU9yRGVmYXVsdCB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5cbmNsYXNzIENhbmRsZXN0aWNrIGV4dGVuZHMgQ2hhcnRFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZSwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHJlZmxvdyhib3gpIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zLCB2YWx1ZSwgb3duZXI6IGNoYXJ0IH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB2YWx1ZUF4aXMgPSBjaGFydC5zZXJpZXNWYWx1ZUF4aXMob3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IG9jU2xvdCA9IHZhbHVlQXhpcy5nZXRTbG90KHZhbHVlLm9wZW4sIHZhbHVlLmNsb3NlKTtcbiAgICAgICAgY29uc3QgbGhTbG90ID0gdmFsdWVBeGlzLmdldFNsb3QodmFsdWUubG93LCB2YWx1ZS5oaWdoKTtcblxuICAgICAgICBvY1Nsb3QueDEgPSBsaFNsb3QueDEgPSBib3gueDE7XG4gICAgICAgIG9jU2xvdC54MiA9IGxoU2xvdC54MiA9IGJveC54MjtcblxuICAgICAgICB0aGlzLnJlYWxCb2R5ID0gb2NTbG90O1xuXG4gICAgICAgIGNvbnN0IG1pZCA9IGxoU2xvdC5jZW50ZXIoKS54O1xuICAgICAgICBjb25zdCBwb2ludHMgPSBbXTtcblxuICAgICAgICBwb2ludHMucHVzaChbIFsgbWlkLCBsaFNsb3QueTEgXSwgWyBtaWQsIG9jU2xvdC55MSBdIF0pO1xuICAgICAgICBwb2ludHMucHVzaChbIFsgbWlkLCBvY1Nsb3QueTIgXSwgWyBtaWQsIGxoU2xvdC55MiBdIF0pO1xuXG4gICAgICAgIHRoaXMubGluZXMgPSBwb2ludHM7XG5cbiAgICAgICAgdGhpcy5ib3ggPSBsaFNsb3QuY2xvbmUoKS53cmFwKG9jU2xvdCk7XG5cbiAgICAgICAgaWYgKCF0aGlzLl9yZW5kZXJlZCkge1xuICAgICAgICAgICAgdGhpcy5fcmVuZGVyZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5jcmVhdGVOb3RlKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJlZmxvd05vdGUoKTtcbiAgICB9XG5cbiAgICByZWZsb3dOb3RlKCkge1xuICAgICAgICBpZiAodGhpcy5ub3RlKSB7XG4gICAgICAgICAgICB0aGlzLm5vdGUucmVmbG93KHRoaXMuYm94KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNyZWF0ZVZpc3VhbCgpIHtcbiAgICAgICAgc3VwZXIuY3JlYXRlVmlzdWFsKCk7XG4gICAgICAgIHRoaXMuX21haW5WaXN1YWwgPSB0aGlzLm1haW5WaXN1YWwodGhpcy5vcHRpb25zKTtcbiAgICAgICAgdGhpcy52aXN1YWwuYXBwZW5kKFxuICAgICAgICAgICAgdGhpcy5fbWFpblZpc3VhbFxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMuY3JlYXRlT3ZlcmxheSgpO1xuICAgIH1cblxuICAgIG1haW5WaXN1YWwob3B0aW9ucykge1xuICAgICAgICBjb25zdCBncm91cCA9IG5ldyBkcmF3Lkdyb3VwKCk7XG5cbiAgICAgICAgdGhpcy5jcmVhdGVCb2R5KGdyb3VwLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5jcmVhdGVMaW5lcyhncm91cCwgb3B0aW9ucyk7XG5cbiAgICAgICAgcmV0dXJuIGdyb3VwO1xuICAgIH1cblxuICAgIGNyZWF0ZUJvZHkoY29udGFpbmVyLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGJvZHkgPSBkcmF3LlBhdGguZnJvbVJlY3QodGhpcy5yZWFsQm9keS50b1JlY3QoKSwge1xuICAgICAgICAgICAgZmlsbDoge1xuICAgICAgICAgICAgICAgIGNvbG9yOiB0aGlzLmNvbG9yLFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IG9wdGlvbnMub3BhY2l0eVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0cm9rZTogbnVsbFxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAob3B0aW9ucy5ib3JkZXIud2lkdGggPiAwKSB7XG4gICAgICAgICAgICBib2R5Lm9wdGlvbnMuc2V0KFwic3Ryb2tlXCIsIHtcbiAgICAgICAgICAgICAgICBjb2xvcjogdGhpcy5nZXRCb3JkZXJDb2xvcigpLFxuICAgICAgICAgICAgICAgIHdpZHRoOiBvcHRpb25zLmJvcmRlci53aWR0aCxcbiAgICAgICAgICAgICAgICBkYXNoVHlwZTogb3B0aW9ucy5ib3JkZXIuZGFzaFR5cGUsXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogdmFsdWVPckRlZmF1bHQob3B0aW9ucy5ib3JkZXIub3BhY2l0eSwgb3B0aW9ucy5vcGFjaXR5KVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBhbGlnblBhdGhUb1BpeGVsKGJvZHkpO1xuICAgICAgICBjb250YWluZXIuYXBwZW5kKGJvZHkpO1xuXG4gICAgICAgIGlmIChoYXNHcmFkaWVudE92ZXJsYXkob3B0aW9ucykpIHtcbiAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmQodGhpcy5jcmVhdGVHcmFkaWVudE92ZXJsYXkoYm9keSwgeyBiYXNlQ29sb3I6IHRoaXMuY29sb3IgfSwgZGVlcEV4dGVuZCh7XG4gICAgICAgICAgICAgICAgZW5kOiAhb3B0aW9ucy52ZXJ0aWNhbCA/IFsgMCwgMSBdIDogdW5kZWZpbmVkXG4gICAgICAgICAgICB9LCBvcHRpb25zLm92ZXJsYXkpKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjcmVhdGVMaW5lcyhjb250YWluZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5kcmF3TGluZXMoY29udGFpbmVyLCBvcHRpb25zLCB0aGlzLmxpbmVzLCBvcHRpb25zLmxpbmUpO1xuICAgIH1cblxuICAgIGRyYXdMaW5lcyhjb250YWluZXIsIG9wdGlvbnMsIGxpbmVzLCBsaW5lT3B0aW9ucykge1xuICAgICAgICBpZiAoIWxpbmVzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBsaW5lU3R5bGUgPSB7XG4gICAgICAgICAgICBzdHJva2U6IHtcbiAgICAgICAgICAgICAgICBjb2xvcjogbGluZU9wdGlvbnMuY29sb3IgfHwgdGhpcy5jb2xvcixcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiB2YWx1ZU9yRGVmYXVsdChsaW5lT3B0aW9ucy5vcGFjaXR5LCBvcHRpb25zLm9wYWNpdHkpLFxuICAgICAgICAgICAgICAgIHdpZHRoOiBsaW5lT3B0aW9ucy53aWR0aCxcbiAgICAgICAgICAgICAgICBkYXNoVHlwZTogbGluZU9wdGlvbnMuZGFzaFR5cGUsXG4gICAgICAgICAgICAgICAgbGluZUNhcDogXCJidXR0XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBsaW5lID0gZHJhdy5QYXRoLmZyb21Qb2ludHMobGluZXNbaV0sIGxpbmVTdHlsZSk7XG4gICAgICAgICAgICBhbGlnblBhdGhUb1BpeGVsKGxpbmUpO1xuICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZChsaW5lKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldEJvcmRlckNvbG9yKCkge1xuICAgICAgICBjb25zdCBib3JkZXIgPSB0aGlzLm9wdGlvbnMuYm9yZGVyO1xuICAgICAgICBsZXQgYm9yZGVyQ29sb3IgPSBib3JkZXIuY29sb3I7XG5cbiAgICAgICAgaWYgKCFkZWZpbmVkKGJvcmRlckNvbG9yKSkge1xuICAgICAgICAgICAgYm9yZGVyQ29sb3IgPSBuZXcgQ29sb3IodGhpcy5jb2xvcikuYnJpZ2h0bmVzcyhib3JkZXIuX2JyaWdodG5lc3MpLnRvSGV4KCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYm9yZGVyQ29sb3I7XG4gICAgfVxuXG4gICAgY3JlYXRlT3ZlcmxheSgpIHtcbiAgICAgICAgY29uc3Qgb3ZlcmxheSA9IGRyYXcuUGF0aC5mcm9tUmVjdCh0aGlzLmJveC50b1JlY3QoKSwge1xuICAgICAgICAgICAgZmlsbDoge1xuICAgICAgICAgICAgICAgIGNvbG9yOiBXSElURSxcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3Ryb2tlOiBudWxsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMudmlzdWFsLmFwcGVuZChvdmVybGF5KTtcbiAgICB9XG5cbiAgICBjcmVhdGVIaWdobGlnaHQoKSB7XG4gICAgICAgIGNvbnN0IGhpZ2hsaWdodCA9IHRoaXMub3B0aW9ucy5oaWdobGlnaHQ7XG4gICAgICAgIGNvbnN0IG5vcm1hbENvbG9yID0gdGhpcy5jb2xvcjtcblxuICAgICAgICB0aGlzLmNvbG9yID0gaGlnaGxpZ2h0LmNvbG9yIHx8IHRoaXMuY29sb3I7XG4gICAgICAgIGNvbnN0IG92ZXJsYXkgPSB0aGlzLm1haW5WaXN1YWwoXG4gICAgICAgICAgICBkZWVwRXh0ZW5kKHt9LCB0aGlzLm9wdGlvbnMsIHtcbiAgICAgICAgICAgICAgICBsaW5lOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiB0aGlzLmdldEJvcmRlckNvbG9yKClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBoaWdobGlnaHQpXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuY29sb3IgPSBub3JtYWxDb2xvcjtcblxuICAgICAgICByZXR1cm4gb3ZlcmxheTtcbiAgICB9XG5cbiAgICBoaWdobGlnaHRWaXN1YWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYWluVmlzdWFsO1xuICAgIH1cblxuICAgIGhpZ2hsaWdodFZpc3VhbEFyZ3MoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBvcHRpb25zOiB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgICByZWN0OiB0aGlzLmJveC50b1JlY3QoKSxcbiAgICAgICAgICAgIHZpc3VhbDogdGhpcy5fbWFpblZpc3VhbFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHRvb2x0aXBBbmNob3IoKSB7XG4gICAgICAgIGNvbnN0IGJveCA9IHRoaXMuYm94O1xuICAgICAgICBjb25zdCBjbGlwQm94ID0gdGhpcy5vd25lci5wYW5lLmNsaXBCb3goKSB8fCBib3g7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHBvaW50OiBuZXcgUG9pbnQoYm94LngyICsgVE9PTFRJUF9PRkZTRVQsIE1hdGgubWF4KGJveC55MSwgY2xpcEJveC55MSkgKyBUT09MVElQX09GRlNFVCksXG4gICAgICAgICAgICBhbGlnbjoge1xuICAgICAgICAgICAgICAgIGhvcml6b250YWw6IExFRlQsXG4gICAgICAgICAgICAgICAgdmVydGljYWw6IFRPUFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZvcm1hdFZhbHVlKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vd25lci5mb3JtYXRQb2ludFZhbHVlKHRoaXMsIGZvcm1hdCk7XG4gICAgfVxuXG4gICAgb3ZlcmxhcHNCb3goYm94KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJveC5vdmVybGFwcyhib3gpO1xuICAgIH1cbn1cblxuc2V0RGVmYXVsdE9wdGlvbnMoQ2FuZGxlc3RpY2ssIHtcbiAgICB2ZXJ0aWNhbDogdHJ1ZSxcbiAgICBib3JkZXI6IHtcbiAgICAgICAgX2JyaWdodG5lc3M6IDAuOFxuICAgIH0sXG4gICAgbGluZToge1xuICAgICAgICB3aWR0aDogMlxuICAgIH0sXG4gICAgb3ZlcmxheToge1xuICAgICAgICBncmFkaWVudDogXCJnbGFzc1wiXG4gICAgfSxcbiAgICB0b29sdGlwOiB7XG4gICAgICAgIGZvcm1hdDogXCI8dGFibGU+XCIgK1xuICAgICAgICAgICAgICAgICAgICBcIjx0cj48dGggY29sc3Bhbj0nMic+ezQ6ZH08L3RoPjwvdHI+XCIgK1xuICAgICAgICAgICAgICAgICAgICBcIjx0cj48dGQ+T3Blbjo8L3RkPjx0ZD57MDpDfTwvdGQ+PC90cj5cIiArXG4gICAgICAgICAgICAgICAgICAgIFwiPHRyPjx0ZD5IaWdoOjwvdGQ+PHRkPnsxOkN9PC90ZD48L3RyPlwiICtcbiAgICAgICAgICAgICAgICAgICAgXCI8dHI+PHRkPkxvdzo8L3RkPjx0ZD57MjpDfTwvdGQ+PC90cj5cIiArXG4gICAgICAgICAgICAgICAgICAgIFwiPHRyPjx0ZD5DbG9zZTo8L3RkPjx0ZD57MzpDfTwvdGQ+PC90cj5cIiArXG4gICAgICAgICAgICAgICAgXCI8L3RhYmxlPlwiXG4gICAgfSxcbiAgICBoaWdobGlnaHQ6IHtcbiAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgYm9yZGVyOiB7XG4gICAgICAgICAgICB3aWR0aDogMSxcbiAgICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgfSxcbiAgICAgICAgbGluZToge1xuICAgICAgICAgICAgd2lkdGg6IDEsXG4gICAgICAgICAgICBvcGFjaXR5OiAxXG4gICAgICAgIH1cbiAgICB9LFxuICAgIG5vdGVzOiB7XG4gICAgICAgIHZpc2libGU6IHRydWUsXG4gICAgICAgIGxhYmVsOiB7fVxuICAgIH1cbn0pO1xuXG5kZWVwRXh0ZW5kKENhbmRsZXN0aWNrLnByb3RvdHlwZSwgUG9pbnRFdmVudHNNaXhpbik7XG5kZWVwRXh0ZW5kKENhbmRsZXN0aWNrLnByb3RvdHlwZSwgTm90ZU1peGluKTtcblxuZXhwb3J0IGRlZmF1bHQgQ2FuZGxlc3RpY2s7IiwiaW1wb3J0IGNvdW50TnVtYmVycyBmcm9tICcuL2NvdW50LW51bWJlcnMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhcmVOdW1iZXJzKHZhbHVlcykge1xuICAgIHJldHVybiBjb3VudE51bWJlcnModmFsdWVzKSA9PT0gdmFsdWVzLmxlbmd0aDtcbn0iLCJpbXBvcnQgQ2F0ZWdvcmljYWxDaGFydCBmcm9tICcuLi9jYXRlZ29yaWNhbC1jaGFydCc7XG5pbXBvcnQgQ2x1c3RlckxheW91dCBmcm9tICcuLi9sYXlvdXQvY2x1c3Rlci1sYXlvdXQnO1xuaW1wb3J0IENhbmRsZXN0aWNrIGZyb20gJy4vY2FuZGxlc3RpY2snO1xuXG5pbXBvcnQgQ2xpcEFuaW1hdGlvbk1peGluIGZyb20gJy4uL21peGlucy9jbGlwLWFuaW1hdGlvbi1taXhpbic7XG5pbXBvcnQgeyBDQU5ETEVTVElDSyB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgYXJlTnVtYmVycyBmcm9tICcuLi91dGlscy9hcmUtbnVtYmVycyc7XG5cbmltcG9ydCB7IE1JTl9WQUxVRSwgTUFYX1ZBTFVFIH0gZnJvbSAnLi4vLi4vY29tbW9uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBkZWVwRXh0ZW5kLCBpc0Z1bmN0aW9uIH0gZnJvbSAnLi4vLi4vY29tbW9uJztcblxuY2xhc3MgQ2FuZGxlc3RpY2tDaGFydCBleHRlbmRzIENhdGVnb3JpY2FsQ2hhcnQge1xuXG4gICAgcmVmbG93Q2F0ZWdvcmllcyhjYXRlZ29yeVNsb3RzKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcbiAgICAgICAgY29uc3QgY2hpbGRyZW5MZW5ndGggPSBjaGlsZHJlbi5sZW5ndGg7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbkxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjaGlsZHJlbltpXS5yZWZsb3coY2F0ZWdvcnlTbG90c1tpXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhZGRWYWx1ZShkYXRhLCBmaWVsZHMpIHtcbiAgICAgICAgY29uc3QgeyBjYXRlZ29yeUl4LCBjYXRlZ29yeSwgc2VyaWVzLCBzZXJpZXNJeCB9ID0gZmllbGRzO1xuICAgICAgICBjb25zdCB7IGNoaWxkcmVuLCBvcHRpb25zIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGRhdGEudmFsdWVGaWVsZHM7XG4gICAgICAgIGNvbnN0IHZhbHVlUGFydHMgPSB0aGlzLnNwbGl0VmFsdWUodmFsdWUpO1xuICAgICAgICBjb25zdCBoYXNWYWx1ZSA9IGFyZU51bWJlcnModmFsdWVQYXJ0cyk7XG4gICAgICAgIGNvbnN0IGRhdGFJdGVtID0gc2VyaWVzLmRhdGFbY2F0ZWdvcnlJeF07XG4gICAgICAgIGxldCBjYXRlZ29yeVBvaW50cyA9IHRoaXMuY2F0ZWdvcnlQb2ludHNbY2F0ZWdvcnlJeF07XG4gICAgICAgIGxldCBwb2ludDtcblxuICAgICAgICBpZiAoIWNhdGVnb3J5UG9pbnRzKSB7XG4gICAgICAgICAgICB0aGlzLmNhdGVnb3J5UG9pbnRzW2NhdGVnb3J5SXhdID0gY2F0ZWdvcnlQb2ludHMgPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXNWYWx1ZSkge1xuICAgICAgICAgICAgcG9pbnQgPSB0aGlzLmNyZWF0ZVBvaW50KGRhdGEsIGZpZWxkcyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgY2x1c3RlciA9IGNoaWxkcmVuW2NhdGVnb3J5SXhdO1xuICAgICAgICBpZiAoIWNsdXN0ZXIpIHtcbiAgICAgICAgICAgIGNsdXN0ZXIgPSBuZXcgQ2x1c3RlckxheW91dCh7XG4gICAgICAgICAgICAgICAgdmVydGljYWw6IG9wdGlvbnMuaW52ZXJ0QXhlcyxcbiAgICAgICAgICAgICAgICBnYXA6IG9wdGlvbnMuZ2FwLFxuICAgICAgICAgICAgICAgIHNwYWNpbmc6IG9wdGlvbnMuc3BhY2luZyxcbiAgICAgICAgICAgICAgICBydGw6ICFvcHRpb25zLmludmVydEF4ZXMgJiYgKHRoaXMuY2hhcnRTZXJ2aWNlIHx8IHt9KS5ydGxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5hcHBlbmQoY2x1c3Rlcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocG9pbnQpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlUmFuZ2UodmFsdWUsIGZpZWxkcyk7XG5cbiAgICAgICAgICAgIGNsdXN0ZXIuYXBwZW5kKHBvaW50KTtcblxuICAgICAgICAgICAgcG9pbnQuY2F0ZWdvcnlJeCA9IGNhdGVnb3J5SXg7XG4gICAgICAgICAgICBwb2ludC5jYXRlZ29yeSA9IGNhdGVnb3J5O1xuICAgICAgICAgICAgcG9pbnQuc2VyaWVzID0gc2VyaWVzO1xuICAgICAgICAgICAgcG9pbnQuc2VyaWVzSXggPSBzZXJpZXNJeDtcbiAgICAgICAgICAgIHBvaW50Lm93bmVyID0gdGhpcztcbiAgICAgICAgICAgIHBvaW50LmRhdGFJdGVtID0gZGF0YUl0ZW07XG4gICAgICAgICAgICBwb2ludC5ub3RlVGV4dCA9IGRhdGEuZmllbGRzLm5vdGVUZXh0O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5wb2ludHMucHVzaChwb2ludCk7XG4gICAgICAgIGNhdGVnb3J5UG9pbnRzLnB1c2gocG9pbnQpO1xuICAgIH1cblxuICAgIHBvaW50VHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIENhbmRsZXN0aWNrO1xuICAgIH1cblxuICAgIGNyZWF0ZVBvaW50KGRhdGEsIGZpZWxkcykge1xuICAgICAgICBjb25zdCB7IGNhdGVnb3J5SXgsIGNhdGVnb3J5LCBzZXJpZXMsIHNlcmllc0l4IH0gPSBmaWVsZHM7XG4gICAgICAgIGNvbnN0IHBvaW50VHlwZSA9IHRoaXMucG9pbnRUeXBlKCk7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gZGF0YS52YWx1ZUZpZWxkcztcbiAgICAgICAgbGV0IHBvaW50T3B0aW9ucyA9IGRlZXBFeHRlbmQoe30sIHNlcmllcyk7XG4gICAgICAgIGxldCBjb2xvciA9IGRhdGEuZmllbGRzLmNvbG9yIHx8IHNlcmllcy5jb2xvcjtcblxuICAgICAgICBwb2ludE9wdGlvbnMgPSB0aGlzLmV2YWxQb2ludE9wdGlvbnMoXG4gICAgICAgICAgICBwb2ludE9wdGlvbnMsIHZhbHVlLCBjYXRlZ29yeSwgY2F0ZWdvcnlJeCwgc2VyaWVzLCBzZXJpZXNJeFxuICAgICAgICApO1xuXG4gICAgICAgIGlmIChzZXJpZXMudHlwZSA9PT0gQ0FORExFU1RJQ0spIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZS5vcGVuID4gdmFsdWUuY2xvc2UpIHtcbiAgICAgICAgICAgICAgICBjb2xvciA9IGRhdGEuZmllbGRzLmRvd25Db2xvciB8fCBzZXJpZXMuZG93bkNvbG9yIHx8IHNlcmllcy5jb2xvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHNlcmllcy5jb2xvcikpIHtcbiAgICAgICAgICAgIGNvbG9yID0gcG9pbnRPcHRpb25zLmNvbG9yO1xuICAgICAgICB9XG5cbiAgICAgICAgcG9pbnRPcHRpb25zLnZlcnRpY2FsID0gIXRoaXMub3B0aW9ucy5pbnZlcnRBeGVzO1xuXG4gICAgICAgIGNvbnN0IHBvaW50ID0gbmV3IHBvaW50VHlwZSh2YWx1ZSwgcG9pbnRPcHRpb25zKTtcbiAgICAgICAgcG9pbnQuY29sb3IgPSBjb2xvcjtcblxuICAgICAgICByZXR1cm4gcG9pbnQ7XG4gICAgfVxuXG4gICAgc3BsaXRWYWx1ZSh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gWyB2YWx1ZS5sb3csIHZhbHVlLm9wZW4sIHZhbHVlLmNsb3NlLCB2YWx1ZS5oaWdoIF07XG4gICAgfVxuXG4gICAgdXBkYXRlUmFuZ2UodmFsdWUsIGZpZWxkcykge1xuICAgICAgICBjb25zdCBheGlzTmFtZSA9IGZpZWxkcy5zZXJpZXMuYXhpcztcbiAgICAgICAgY29uc3QgcGFydHMgPSB0aGlzLnNwbGl0VmFsdWUodmFsdWUpO1xuICAgICAgICBsZXQgYXhpc1JhbmdlID0gdGhpcy52YWx1ZUF4aXNSYW5nZXNbYXhpc05hbWVdO1xuXG4gICAgICAgIGF4aXNSYW5nZSA9IHRoaXMudmFsdWVBeGlzUmFuZ2VzW2F4aXNOYW1lXSA9XG4gICAgICAgICAgICBheGlzUmFuZ2UgfHwgeyBtaW46IE1BWF9WQUxVRSwgbWF4OiBNSU5fVkFMVUUgfTtcblxuICAgICAgICBheGlzUmFuZ2UgPSB0aGlzLnZhbHVlQXhpc1Jhbmdlc1theGlzTmFtZV0gPSB7XG4gICAgICAgICAgICBtaW46IE1hdGgubWluLmFwcGx5KE1hdGgsIHBhcnRzLmNvbmNhdChbIGF4aXNSYW5nZS5taW4gXSkpLFxuICAgICAgICAgICAgbWF4OiBNYXRoLm1heC5hcHBseShNYXRoLCBwYXJ0cy5jb25jYXQoWyBheGlzUmFuZ2UubWF4IF0pKVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZvcm1hdFBvaW50VmFsdWUocG9pbnQsIGZvcm1hdCkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHBvaW50LnZhbHVlO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJ0U2VydmljZS5mb3JtYXQuYXV0byhmb3JtYXQsXG4gICAgICAgICAgICB2YWx1ZS5vcGVuLCB2YWx1ZS5oaWdoLFxuICAgICAgICAgICAgdmFsdWUubG93LCB2YWx1ZS5jbG9zZSwgcG9pbnQuY2F0ZWdvcnlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBhbmltYXRpb25Qb2ludHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBvaW50cztcbiAgICB9XG59XG5cbmRlZXBFeHRlbmQoQ2FuZGxlc3RpY2tDaGFydC5wcm90b3R5cGUsIENsaXBBbmltYXRpb25NaXhpbik7XG5cbmV4cG9ydCBkZWZhdWx0IENhbmRsZXN0aWNrQ2hhcnQ7IiwiaW1wb3J0IHsgQ29sb3IgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tZHJhd2luZyc7XG5cbmltcG9ydCBDYW5kbGVzdGljayBmcm9tICcuLi9jYW5kbGVzdGljay1jaGFydC9jYW5kbGVzdGljayc7XG5pbXBvcnQgUG9pbnRFdmVudHNNaXhpbiBmcm9tICcuLi9taXhpbnMvcG9pbnQtZXZlbnRzLW1peGluJztcbmltcG9ydCB7IFNoYXBlRWxlbWVudCB9IGZyb20gJy4uLy4uL2NvcmUnO1xuXG5pbXBvcnQgeyBMSU5FX01BUktFUl9TSVpFLCBCT1JERVJfQlJJR0hUTkVTUyB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5cbmltcG9ydCB7IENST1NTLCBDSVJDTEUsIFdISVRFIH0gZnJvbSAnLi4vLi4vY29tbW9uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBkZWVwRXh0ZW5kLCBkZWZpbmVkLCBzZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5cbmNsYXNzIEJveFBsb3QgZXh0ZW5kcyBDYW5kbGVzdGljayB7XG4gICAgY29uc3RydWN0b3IodmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIodmFsdWUsIG9wdGlvbnMpO1xuXG4gICAgICAgIHRoaXMuY3JlYXRlTm90ZSgpO1xuICAgIH1cblxuICAgIHJlZmxvdyhib3gpIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zLCB2YWx1ZSwgb3duZXI6IGNoYXJ0IH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB2YWx1ZUF4aXMgPSBjaGFydC5zZXJpZXNWYWx1ZUF4aXMob3B0aW9ucyk7XG4gICAgICAgIGxldCB3aGlza2VyU2xvdCwgYm94U2xvdDtcblxuICAgICAgICB0aGlzLmJveFNsb3QgPSBib3hTbG90ID0gdmFsdWVBeGlzLmdldFNsb3QodmFsdWUucTEsIHZhbHVlLnEzKTtcbiAgICAgICAgdGhpcy5yZWFsQm9keSA9IGJveFNsb3Q7XG4gICAgICAgIHRoaXMucmVmbG93Qm94U2xvdChib3gpO1xuXG4gICAgICAgIHRoaXMud2hpc2tlclNsb3QgPSB3aGlza2VyU2xvdCA9IHZhbHVlQXhpcy5nZXRTbG90KHZhbHVlLmxvd2VyLCB2YWx1ZS51cHBlcik7XG4gICAgICAgIHRoaXMucmVmbG93V2hpc2tlclNsb3QoYm94KTtcblxuICAgICAgICBjb25zdCBtZWRpYW5TbG90ID0gdmFsdWVBeGlzLmdldFNsb3QodmFsdWUubWVkaWFuKTtcblxuICAgICAgICBpZiAodmFsdWUubWVhbikge1xuICAgICAgICAgICAgY29uc3QgbWVhblNsb3QgPSB2YWx1ZUF4aXMuZ2V0U2xvdCh2YWx1ZS5tZWFuKTtcbiAgICAgICAgICAgIHRoaXMubWVhblBvaW50cyA9IHRoaXMuY2FsY01lYW5Qb2ludHMoYm94LCBtZWFuU2xvdCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLndoaXNrZXJQb2ludHMgPSB0aGlzLmNhbGNXaGlza2VyUG9pbnRzKGJveFNsb3QsIHdoaXNrZXJTbG90KTtcbiAgICAgICAgdGhpcy5tZWRpYW5Qb2ludHMgPSB0aGlzLmNhbGNNZWRpYW5Qb2ludHMoYm94LCBtZWRpYW5TbG90KTtcblxuICAgICAgICB0aGlzLmJveCA9IHdoaXNrZXJTbG90LmNsb25lKCkud3JhcChib3hTbG90KTtcbiAgICAgICAgdGhpcy5yZWZsb3dOb3RlKCk7XG4gICAgfVxuXG4gICAgcmVmbG93Qm94U2xvdChib3gpIHtcbiAgICAgICAgdGhpcy5ib3hTbG90LngxID0gYm94LngxO1xuICAgICAgICB0aGlzLmJveFNsb3QueDIgPSBib3gueDI7XG4gICAgfVxuXG4gICAgcmVmbG93V2hpc2tlclNsb3QoYm94KSB7XG4gICAgICAgIHRoaXMud2hpc2tlclNsb3QueDEgPSBib3gueDE7XG4gICAgICAgIHRoaXMud2hpc2tlclNsb3QueDIgPSBib3gueDI7XG4gICAgfVxuXG4gICAgY2FsY01lYW5Qb2ludHMoYm94LCBtZWFuU2xvdCkge1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgWyBbIGJveC54MSwgbWVhblNsb3QueTEgXSwgWyBib3gueDIsIG1lYW5TbG90LnkxIF0gXVxuICAgICAgICBdO1xuICAgIH1cblxuICAgIGNhbGNXaGlza2VyUG9pbnRzKGJveFNsb3QsIHdoaXNrZXJTbG90KSB7XG4gICAgICAgIGNvbnN0IG1pZCA9IHdoaXNrZXJTbG90LmNlbnRlcigpLng7XG4gICAgICAgIHJldHVybiBbIFtcbiAgICAgICAgICAgIFsgbWlkIC0gNSwgd2hpc2tlclNsb3QueTEgXSwgWyBtaWQgKyA1LCB3aGlza2VyU2xvdC55MSBdLFxuICAgICAgICAgICAgWyBtaWQsIHdoaXNrZXJTbG90LnkxIF0sIFsgbWlkLCBib3hTbG90LnkxIF1cbiAgICAgICAgXSwgW1xuICAgICAgICAgICAgWyBtaWQgLSA1LCB3aGlza2VyU2xvdC55MiBdLCBbIG1pZCArIDUsIHdoaXNrZXJTbG90LnkyIF0sXG4gICAgICAgICAgICBbIG1pZCwgd2hpc2tlclNsb3QueTIgXSwgWyBtaWQsIGJveFNsb3QueTIgXVxuICAgICAgICBdIF07XG4gICAgfVxuXG4gICAgY2FsY01lZGlhblBvaW50cyhib3gsIG1lZGlhblNsb3QpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIFsgWyBib3gueDEsIG1lZGlhblNsb3QueTEgXSwgWyBib3gueDIsIG1lZGlhblNsb3QueTEgXSBdXG4gICAgICAgIF07XG4gICAgfVxuXG4gICAgcmVuZGVyT3V0bGllcnMob3B0aW9ucykge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICAgIGNvbnN0IG91dGxpZXJzID0gdmFsdWUub3V0bGllcnMgfHwgW107XG4gICAgICAgIGNvbnN0IG91dGVyRmVuY2UgPSBNYXRoLmFicyh2YWx1ZS5xMyAtIHZhbHVlLnExKSAqIDM7XG4gICAgICAgIGNvbnN0IGVsZW1lbnRzID0gW107XG4gICAgICAgIGxldCBtYXJrZXJzID0gb3B0aW9ucy5tYXJrZXJzIHx8IHt9O1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3V0bGllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IG91dGxpZXJWYWx1ZSA9IG91dGxpZXJzW2ldO1xuICAgICAgICAgICAgaWYgKG91dGxpZXJWYWx1ZSA8IHZhbHVlLnEzICsgb3V0ZXJGZW5jZSAmJiBvdXRsaWVyVmFsdWUgPiB2YWx1ZS5xMSAtIG91dGVyRmVuY2UpIHtcbiAgICAgICAgICAgICAgICBtYXJrZXJzID0gb3B0aW9ucy5vdXRsaWVycztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbWFya2VycyA9IG9wdGlvbnMuZXh0cmVtZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgbWFya2Vyc0JvcmRlciA9IGRlZXBFeHRlbmQoe30sIG1hcmtlcnMuYm9yZGVyKTtcblxuICAgICAgICAgICAgaWYgKCFkZWZpbmVkKG1hcmtlcnNCb3JkZXIuY29sb3IpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRlZmluZWQodGhpcy5jb2xvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgbWFya2Vyc0JvcmRlci5jb2xvciA9IHRoaXMuY29sb3I7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbWFya2Vyc0JvcmRlci5jb2xvciA9XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgQ29sb3IobWFya2Vycy5iYWNrZ3JvdW5kKS5icmlnaHRuZXNzKEJPUkRFUl9CUklHSFRORVNTKS50b0hleCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3Qgc2hhcGUgPSBuZXcgU2hhcGVFbGVtZW50KHtcbiAgICAgICAgICAgICAgICB0eXBlOiBtYXJrZXJzLnR5cGUsXG4gICAgICAgICAgICAgICAgd2lkdGg6IG1hcmtlcnMuc2l6ZSxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IG1hcmtlcnMuc2l6ZSxcbiAgICAgICAgICAgICAgICByb3RhdGlvbjogbWFya2Vycy5yb3RhdGlvbixcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBtYXJrZXJzLmJhY2tncm91bmQsXG4gICAgICAgICAgICAgICAgYm9yZGVyOiBtYXJrZXJzQm9yZGVyLFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IG1hcmtlcnMub3BhY2l0eVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHNoYXBlLnZhbHVlID0gb3V0bGllclZhbHVlO1xuXG4gICAgICAgICAgICBlbGVtZW50cy5wdXNoKHNoYXBlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucmVmbG93T3V0bGllcnMoZWxlbWVudHMpO1xuICAgICAgICByZXR1cm4gZWxlbWVudHM7XG4gICAgfVxuXG4gICAgcmVmbG93T3V0bGllcnMob3V0bGllcnMpIHtcbiAgICAgICAgY29uc3QgdmFsdWVBeGlzID0gdGhpcy5vd25lci5zZXJpZXNWYWx1ZUF4aXModGhpcy5vcHRpb25zKTtcbiAgICAgICAgY29uc3QgY2VudGVyID0gdGhpcy5ib3guY2VudGVyKCk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvdXRsaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3Qgb3V0bGllclZhbHVlID0gb3V0bGllcnNbaV0udmFsdWU7XG4gICAgICAgICAgICBjb25zdCBtYXJrZXJCb3ggPSB2YWx1ZUF4aXMuZ2V0U2xvdChvdXRsaWVyVmFsdWUpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnZlcnRpY2FsKSB7XG4gICAgICAgICAgICAgICAgbWFya2VyQm94Lm1vdmUoY2VudGVyLngpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtYXJrZXJCb3gubW92ZSh1bmRlZmluZWQsIGNlbnRlci55KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5ib3ggPSB0aGlzLmJveC53cmFwKG1hcmtlckJveCk7XG4gICAgICAgICAgICBvdXRsaWVyc1tpXS5yZWZsb3cobWFya2VyQm94KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG1haW5WaXN1YWwob3B0aW9ucykge1xuICAgICAgICBjb25zdCBncm91cCA9IHN1cGVyLm1haW5WaXN1YWwob3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IG91dGxpZXJzID0gdGhpcy5yZW5kZXJPdXRsaWVycyhvcHRpb25zKTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG91dGxpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gb3V0bGllcnNbaV0uZ2V0RWxlbWVudCgpO1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBncm91cC5hcHBlbmQoZWxlbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZ3JvdXA7XG4gICAgfVxuXG4gICAgY3JlYXRlTGluZXMoY29udGFpbmVyLCBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuZHJhd0xpbmVzKGNvbnRhaW5lciwgb3B0aW9ucywgdGhpcy53aGlza2VyUG9pbnRzLCBvcHRpb25zLndoaXNrZXJzKTtcbiAgICAgICAgdGhpcy5kcmF3TGluZXMoY29udGFpbmVyLCBvcHRpb25zLCB0aGlzLm1lZGlhblBvaW50cywgb3B0aW9ucy5tZWRpYW4pO1xuICAgICAgICB0aGlzLmRyYXdMaW5lcyhjb250YWluZXIsIG9wdGlvbnMsIHRoaXMubWVhblBvaW50cywgb3B0aW9ucy5tZWFuKTtcbiAgICB9XG5cbiAgICBnZXRCb3JkZXJDb2xvcigpIHtcbiAgICAgICAgaWYgKCh0aGlzLm9wdGlvbnMuYm9yZGVyIHx8IHt9KS5jb2xvcikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5ib3JkZXIuY29sb3I7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5jb2xvcikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29sb3I7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3VwZXIuZ2V0Qm9yZGVyQ29sb3IoKTtcbiAgICB9XG59XG5cbnNldERlZmF1bHRPcHRpb25zKEJveFBsb3QsIHtcbiAgICBib3JkZXI6IHtcbiAgICAgICAgX2JyaWdodG5lc3M6IDAuOFxuICAgIH0sXG4gICAgbGluZToge1xuICAgICAgICB3aWR0aDogMlxuICAgIH0sXG4gICAgbWVkaWFuOiB7XG4gICAgICAgIGNvbG9yOiBcIiNmNmY2ZjZcIlxuICAgIH0sXG4gICAgbWVhbjoge1xuICAgICAgICB3aWR0aDogMixcbiAgICAgICAgZGFzaFR5cGU6IFwiZGFzaFwiLFxuICAgICAgICBjb2xvcjogXCIjZjZmNmY2XCJcbiAgICB9LFxuICAgIG92ZXJsYXk6IHtcbiAgICAgICAgZ3JhZGllbnQ6IFwiZ2xhc3NcIlxuICAgIH0sXG4gICAgdG9vbHRpcDoge1xuICAgICAgICBmb3JtYXQ6IFwiPHRhYmxlPlwiICtcbiAgICAgICAgICAgICAgICAgICAgXCI8dHI+PHRoIGNvbHNwYW49JzInPns2OmR9PC90aD48L3RyPlwiICtcbiAgICAgICAgICAgICAgICAgICAgXCI8dHI+PHRkPkxvd2VyOjwvdGQ+PHRkPnswOkN9PC90ZD48L3RyPlwiICtcbiAgICAgICAgICAgICAgICAgICAgXCI8dHI+PHRkPlExOjwvdGQ+PHRkPnsxOkN9PC90ZD48L3RyPlwiICtcbiAgICAgICAgICAgICAgICAgICAgXCI8dHI+PHRkPk1lZGlhbjo8L3RkPjx0ZD57MjpDfTwvdGQ+PC90cj5cIiArXG4gICAgICAgICAgICAgICAgICAgIFwiPHRyPjx0ZD5NZWFuOjwvdGQ+PHRkPns1OkN9PC90ZD48L3RyPlwiICtcbiAgICAgICAgICAgICAgICAgICAgXCI8dHI+PHRkPlEzOjwvdGQ+PHRkPnszOkN9PC90ZD48L3RyPlwiICtcbiAgICAgICAgICAgICAgICAgICAgXCI8dHI+PHRkPlVwcGVyOjwvdGQ+PHRkPns0OkN9PC90ZD48L3RyPlwiICtcbiAgICAgICAgICAgICAgICBcIjwvdGFibGU+XCJcbiAgICB9LFxuICAgIGhpZ2hsaWdodDoge1xuICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICBib3JkZXI6IHtcbiAgICAgICAgICAgIHdpZHRoOiAxLFxuICAgICAgICAgICAgb3BhY2l0eTogMVxuICAgICAgICB9LFxuICAgICAgICBsaW5lOiB7XG4gICAgICAgICAgICB3aWR0aDogMSxcbiAgICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgfVxuICAgIH0sXG4gICAgbm90ZXM6IHtcbiAgICAgICAgdmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgbGFiZWw6IHt9XG4gICAgfSxcbiAgICBvdXRsaWVyczoge1xuICAgICAgICB2aXNpYmxlOiB0cnVlLFxuICAgICAgICBzaXplOiBMSU5FX01BUktFUl9TSVpFLFxuICAgICAgICB0eXBlOiBDUk9TUyxcbiAgICAgICAgYmFja2dyb3VuZDogV0hJVEUsXG4gICAgICAgIGJvcmRlcjoge1xuICAgICAgICAgICAgd2lkdGg6IDIsXG4gICAgICAgICAgICBvcGFjaXR5OiAxXG4gICAgICAgIH0sXG4gICAgICAgIG9wYWNpdHk6IDBcbiAgICB9LFxuICAgIGV4dHJlbWVzOiB7XG4gICAgICAgIHZpc2libGU6IHRydWUsXG4gICAgICAgIHNpemU6IExJTkVfTUFSS0VSX1NJWkUsXG4gICAgICAgIHR5cGU6IENJUkNMRSxcbiAgICAgICAgYmFja2dyb3VuZDogV0hJVEUsXG4gICAgICAgIGJvcmRlcjoge1xuICAgICAgICAgICAgd2lkdGg6IDIsXG4gICAgICAgICAgICBvcGFjaXR5OiAxXG4gICAgICAgIH0sXG4gICAgICAgIG9wYWNpdHk6IDBcbiAgICB9XG59KTtcblxuZGVlcEV4dGVuZChCb3hQbG90LnByb3RvdHlwZSwgUG9pbnRFdmVudHNNaXhpbik7XG5cbmV4cG9ydCBkZWZhdWx0IEJveFBsb3Q7IiwiaW1wb3J0IEJveFBsb3QgZnJvbSAnLi9ib3gtcGxvdCc7XG5cbmNsYXNzIFZlcnRpY2FsQm94UGxvdCBleHRlbmRzIEJveFBsb3Qge1xuICAgIHJlZmxvd0JveFNsb3QoYm94KSB7XG4gICAgICAgIHRoaXMuYm94U2xvdC55MSA9IGJveC55MTtcbiAgICAgICAgdGhpcy5ib3hTbG90LnkyID0gYm94LnkyO1xuICAgIH1cblxuICAgIHJlZmxvd1doaXNrZXJTbG90KGJveCkge1xuICAgICAgICB0aGlzLndoaXNrZXJTbG90LnkxID0gYm94LnkxO1xuICAgICAgICB0aGlzLndoaXNrZXJTbG90LnkyID0gYm94LnkyO1xuICAgIH1cblxuICAgIGNhbGNNZWFuUG9pbnRzKGJveCwgbWVhblNsb3QpIHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIFsgWyBtZWFuU2xvdC54MSwgYm94LnkxIF0sIFsgbWVhblNsb3QueDEsIGJveC55MiBdIF1cbiAgICAgICAgXTtcbiAgICB9XG5cbiAgICBjYWxjV2hpc2tlclBvaW50cyhib3hTbG90LCB3aGlza2VyU2xvdCkge1xuICAgICAgICBjb25zdCBtaWQgPSB3aGlza2VyU2xvdC5jZW50ZXIoKS55O1xuICAgICAgICByZXR1cm4gWyBbXG4gICAgICAgICAgICBbIHdoaXNrZXJTbG90LngxLCBtaWQgLSA1IF0sIFsgd2hpc2tlclNsb3QueDEsIG1pZCArIDUgXSxcbiAgICAgICAgICAgIFsgd2hpc2tlclNsb3QueDEsIG1pZCBdLCBbIGJveFNsb3QueDEsIG1pZCBdXG4gICAgICAgIF0sIFtcbiAgICAgICAgICAgIFsgd2hpc2tlclNsb3QueDIsIG1pZCAtIDUgXSwgWyB3aGlza2VyU2xvdC54MiwgbWlkICsgNSBdLFxuICAgICAgICAgICAgWyB3aGlza2VyU2xvdC54MiwgbWlkIF0sIFsgYm94U2xvdC54MiwgbWlkIF1cbiAgICAgICAgXSBdO1xuICAgIH1cblxuICAgIGNhbGNNZWRpYW5Qb2ludHMoYm94LCBtZWRpYW5TbG90KSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICBbIFsgbWVkaWFuU2xvdC54MSwgYm94LnkxIF0sIFsgbWVkaWFuU2xvdC54MSwgYm94LnkyIF0gXVxuICAgICAgICBdO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVmVydGljYWxCb3hQbG90OyIsImltcG9ydCBDYW5kbGVzdGlja0NoYXJ0IGZyb20gJy4uL2NhbmRsZXN0aWNrLWNoYXJ0L2NhbmRsZXN0aWNrLWNoYXJ0JztcbmltcG9ydCBWZXJ0aWNhbEJveFBsb3QgZnJvbSAnLi92ZXJ0aWNhbC1ib3gtcGxvdCc7XG5pbXBvcnQgQm94UGxvdCBmcm9tICcuL2JveC1wbG90JztcbmltcG9ydCBDbHVzdGVyTGF5b3V0IGZyb20gJy4uL2xheW91dC9jbHVzdGVyLWxheW91dCc7XG5cbmltcG9ydCBhcmVOdW1iZXJzIGZyb20gJy4uL3V0aWxzL2FyZS1udW1iZXJzJztcblxuaW1wb3J0IHsgTUlOX1ZBTFVFLCBNQVhfVkFMVUUgfSBmcm9tICcuLi8uLi9jb21tb24vY29uc3RhbnRzJztcbmltcG9ydCB7IGRlZmluZWQgfSBmcm9tICcuLi8uLi9jb21tb24nO1xuXG5jbGFzcyBCb3hQbG90Q2hhcnQgZXh0ZW5kcyBDYW5kbGVzdGlja0NoYXJ0IHtcbiAgICBhZGRWYWx1ZShkYXRhLCBmaWVsZHMpIHtcbiAgICAgICAgY29uc3QgeyBjYXRlZ29yeUl4LCBjYXRlZ29yeSwgc2VyaWVzLCBzZXJpZXNJeCB9ID0gZmllbGRzO1xuICAgICAgICBjb25zdCB7IGNoaWxkcmVuLCBvcHRpb25zIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGRhdGEudmFsdWVGaWVsZHM7XG4gICAgICAgIGNvbnN0IHZhbHVlUGFydHMgPSB0aGlzLnNwbGl0VmFsdWUodmFsdWUpO1xuICAgICAgICBjb25zdCBoYXNWYWx1ZSA9IGFyZU51bWJlcnModmFsdWVQYXJ0cyk7XG4gICAgICAgIGNvbnN0IGRhdGFJdGVtID0gc2VyaWVzLmRhdGFbY2F0ZWdvcnlJeF07XG4gICAgICAgIGxldCBjYXRlZ29yeVBvaW50cyA9IHRoaXMuY2F0ZWdvcnlQb2ludHNbY2F0ZWdvcnlJeF07XG4gICAgICAgIGxldCBwb2ludDtcblxuICAgICAgICBpZiAoIWNhdGVnb3J5UG9pbnRzKSB7XG4gICAgICAgICAgICB0aGlzLmNhdGVnb3J5UG9pbnRzW2NhdGVnb3J5SXhdID0gY2F0ZWdvcnlQb2ludHMgPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXNWYWx1ZSkge1xuICAgICAgICAgICAgcG9pbnQgPSB0aGlzLmNyZWF0ZVBvaW50KGRhdGEsIGZpZWxkcyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgY2x1c3RlciA9IGNoaWxkcmVuW2NhdGVnb3J5SXhdO1xuICAgICAgICBpZiAoIWNsdXN0ZXIpIHtcbiAgICAgICAgICAgIGNsdXN0ZXIgPSBuZXcgQ2x1c3RlckxheW91dCh7XG4gICAgICAgICAgICAgICAgdmVydGljYWw6IG9wdGlvbnMuaW52ZXJ0QXhlcyxcbiAgICAgICAgICAgICAgICBnYXA6IG9wdGlvbnMuZ2FwLFxuICAgICAgICAgICAgICAgIHNwYWNpbmc6IG9wdGlvbnMuc3BhY2luZyxcbiAgICAgICAgICAgICAgICBydGw6ICFvcHRpb25zLmludmVydEF4ZXMgJiYgKHRoaXMuY2hhcnRTZXJ2aWNlIHx8IHt9KS5ydGxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5hcHBlbmQoY2x1c3Rlcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocG9pbnQpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlUmFuZ2UodmFsdWUsIGZpZWxkcyk7XG5cbiAgICAgICAgICAgIGNsdXN0ZXIuYXBwZW5kKHBvaW50KTtcblxuICAgICAgICAgICAgcG9pbnQuY2F0ZWdvcnlJeCA9IGNhdGVnb3J5SXg7XG4gICAgICAgICAgICBwb2ludC5jYXRlZ29yeSA9IGNhdGVnb3J5O1xuICAgICAgICAgICAgcG9pbnQuc2VyaWVzID0gc2VyaWVzO1xuICAgICAgICAgICAgcG9pbnQuc2VyaWVzSXggPSBzZXJpZXNJeDtcbiAgICAgICAgICAgIHBvaW50Lm93bmVyID0gdGhpcztcbiAgICAgICAgICAgIHBvaW50LmRhdGFJdGVtID0gZGF0YUl0ZW07XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnBvaW50cy5wdXNoKHBvaW50KTtcbiAgICAgICAgY2F0ZWdvcnlQb2ludHMucHVzaChwb2ludCk7XG4gICAgfVxuXG4gICAgcG9pbnRUeXBlKCkge1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmludmVydEF4ZXMpIHtcbiAgICAgICAgICAgIHJldHVybiBWZXJ0aWNhbEJveFBsb3Q7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gQm94UGxvdDtcbiAgICB9XG5cbiAgICBzcGxpdFZhbHVlKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICB2YWx1ZS5sb3dlciwgdmFsdWUucTEsIHZhbHVlLm1lZGlhbixcbiAgICAgICAgICAgIHZhbHVlLnEzLCB2YWx1ZS51cHBlclxuICAgICAgICBdO1xuICAgIH1cblxuICAgIHVwZGF0ZVJhbmdlKHZhbHVlLCBmaWVsZHMpIHtcbiAgICAgICAgY29uc3QgYXhpc05hbWUgPSBmaWVsZHMuc2VyaWVzLmF4aXM7XG4gICAgICAgIGxldCBheGlzUmFuZ2UgPSB0aGlzLnZhbHVlQXhpc1Jhbmdlc1theGlzTmFtZV07XG4gICAgICAgIGxldCBwYXJ0cyA9IHRoaXMuc3BsaXRWYWx1ZSh2YWx1ZSkuY29uY2F0KHRoaXMuZmlsdGVyT3V0bGllcnModmFsdWUub3V0bGllcnMpKTtcblxuICAgICAgICBpZiAoZGVmaW5lZCh2YWx1ZS5tZWFuKSkge1xuICAgICAgICAgICAgcGFydHMgPSBwYXJ0cy5jb25jYXQodmFsdWUubWVhbik7XG4gICAgICAgIH1cblxuICAgICAgICBheGlzUmFuZ2UgPSB0aGlzLnZhbHVlQXhpc1Jhbmdlc1theGlzTmFtZV0gPVxuICAgICAgICAgICAgYXhpc1JhbmdlIHx8IHsgbWluOiBNQVhfVkFMVUUsIG1heDogTUlOX1ZBTFVFIH07XG5cbiAgICAgICAgYXhpc1JhbmdlID0gdGhpcy52YWx1ZUF4aXNSYW5nZXNbYXhpc05hbWVdID0ge1xuICAgICAgICAgICAgbWluOiBNYXRoLm1pbi5hcHBseShNYXRoLCBwYXJ0cy5jb25jYXQoWyBheGlzUmFuZ2UubWluIF0pKSxcbiAgICAgICAgICAgIG1heDogTWF0aC5tYXguYXBwbHkoTWF0aCwgcGFydHMuY29uY2F0KFsgYXhpc1JhbmdlLm1heCBdKSlcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmb3JtYXRQb2ludFZhbHVlKHBvaW50LCBmb3JtYXQpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBwb2ludC52YWx1ZTtcblxuICAgICAgICByZXR1cm4gdGhpcy5jaGFydFNlcnZpY2UuZm9ybWF0LmF1dG8oZm9ybWF0LFxuICAgICAgICAgICAgdmFsdWUubG93ZXIsIHZhbHVlLnExLCB2YWx1ZS5tZWRpYW4sXG4gICAgICAgICAgICB2YWx1ZS5xMywgdmFsdWUudXBwZXIsIHZhbHVlLm1lYW4sIHBvaW50LmNhdGVnb3J5XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZmlsdGVyT3V0bGllcnMoaXRlbXMpIHtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gKGl0ZW1zIHx8IFtdKS5sZW5ndGg7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBpdGVtc1tpXTtcbiAgICAgICAgICAgIGlmIChkZWZpbmVkKGl0ZW0pICYmIGl0ZW0gIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChpdGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgc3VwcG9ydHNQb2ludEluYWN0aXZlT3BhY2l0eSgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQm94UGxvdENoYXJ0O1xuIiwiaW1wb3J0IEVycm9yQmFyQmFzZSBmcm9tICcuL2Vycm9yLWJhci1iYXNlJztcblxuY2xhc3MgU2NhdHRlckVycm9yQmFyIGV4dGVuZHMgRXJyb3JCYXJCYXNlIHtcbiAgICBnZXRBeGlzKCkge1xuICAgICAgICBjb25zdCBheGVzID0gdGhpcy5jaGFydC5zZXJpZXNBeGVzKHRoaXMuc2VyaWVzKTtcbiAgICAgICAgY29uc3QgYXhpcyA9IHRoaXMuaXNWZXJ0aWNhbCA/IGF4ZXMueSA6IGF4ZXMueDtcblxuICAgICAgICByZXR1cm4gYXhpcztcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNjYXR0ZXJFcnJvckJhcjsiLCJpbXBvcnQgeyBkZWZpbmVkIH0gZnJvbSAnLi4vLi4vY29tbW9uJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaGFzVmFsdWUodmFsdWUpIHtcbiAgICByZXR1cm4gZGVmaW5lZCh2YWx1ZSkgJiYgdmFsdWUgIT09IG51bGw7XG59IiwiaW1wb3J0IHsgQ2hhcnRFbGVtZW50LCBCb3ggfSBmcm9tICcuLi8uLi9jb3JlJztcblxuaW1wb3J0IENsaXBBbmltYXRpb25NaXhpbiBmcm9tICcuLi9taXhpbnMvY2xpcC1hbmltYXRpb24tbWl4aW4nO1xuaW1wb3J0IEVycm9yUmFuZ2VDYWxjdWxhdG9yIGZyb20gJy4uL2Vycm9yLWJhcnMvZXJyb3ItcmFuZ2UtY2FsY3VsYXRvcic7XG5pbXBvcnQgU2NhdHRlckVycm9yQmFyIGZyb20gJy4uL2Vycm9yLWJhcnMvc2NhdHRlci1lcnJvci1iYXInO1xuaW1wb3J0IExpbmVQb2ludCBmcm9tICcuLi9saW5lLWNoYXJ0L2xpbmUtcG9pbnQnO1xuaW1wb3J0IENhdGVnb3JpY2FsQ2hhcnQgZnJvbSAnLi4vY2F0ZWdvcmljYWwtY2hhcnQnO1xuXG5pbXBvcnQgaGFzVmFsdWUgZnJvbSAnLi4vdXRpbHMvaGFzLXZhbHVlJztcbmltcG9ydCBldmFsT3B0aW9ucyBmcm9tICcuLi91dGlscy9ldmFsLW9wdGlvbnMnO1xuXG5pbXBvcnQgeyBkZWVwRXh0ZW5kLCBpc051bWJlciwgaXNTdHJpbmcsIGRlZmluZWQsIGlzRnVuY3Rpb24sIHNldERlZmF1bHRPcHRpb25zIH0gZnJvbSAnLi4vLi4vY29tbW9uJztcbmltcG9ydCB7IFgsIFksIE1JTl9WQUxVRSwgTUFYX1ZBTFVFIH0gZnJvbSAnLi4vLi4vY29tbW9uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBwYXJzZURhdGUgfSBmcm9tICcuLi8uLi9kYXRlLXV0aWxzJztcblxuY2xhc3MgU2NhdHRlckNoYXJ0IGV4dGVuZHMgQ2hhcnRFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcihwbG90QXJlYSwgb3B0aW9ucykge1xuXG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuXG4gICAgICAgIHRoaXMucGxvdEFyZWEgPSBwbG90QXJlYTtcbiAgICAgICAgdGhpcy5jaGFydFNlcnZpY2UgPSBwbG90QXJlYS5jaGFydFNlcnZpY2U7XG4gICAgICAgIHRoaXMuX2luaXRGaWVsZHMoKTtcblxuICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH1cblxuICAgIF9pbml0RmllbGRzKCkge1xuICAgICAgICAvLyBYIGFuZCBZIGF4aXMgcmFuZ2VzIGdyb3VwZWQgYnkgbmFtZSwgZS5nLjpcbiAgICAgICAgLy8gcHJpbWFyeTogeyBtaW46IDAsIG1heDogMSB9XG4gICAgICAgIHRoaXMueEF4aXNSYW5nZXMgPSB7fTtcbiAgICAgICAgdGhpcy55QXhpc1JhbmdlcyA9IHt9O1xuXG4gICAgICAgIHRoaXMucG9pbnRzID0gW107XG4gICAgICAgIHRoaXMuc2VyaWVzUG9pbnRzID0gW107XG4gICAgICAgIHRoaXMuc2VyaWVzT3B0aW9ucyA9IFtdO1xuICAgICAgICB0aGlzLl9ldmFsU2VyaWVzID0gW107XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICB0aGlzLnRyYXZlcnNlRGF0YVBvaW50cyh0aGlzLmFkZFZhbHVlLmJpbmQodGhpcykpO1xuICAgIH1cblxuICAgIGFkZEVycm9yQmFyKHBvaW50LCBmaWVsZCwgZmllbGRzKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gcG9pbnQudmFsdWVbZmllbGRdO1xuICAgICAgICBjb25zdCB2YWx1ZUVycm9yRmllbGQgPSBmaWVsZCArIFwiVmFsdWVcIjtcbiAgICAgICAgY29uc3QgbG93RmllbGQgPSBmaWVsZCArIFwiRXJyb3JMb3dcIjtcbiAgICAgICAgY29uc3QgaGlnaEZpZWxkID0gZmllbGQgKyBcIkVycm9ySGlnaFwiO1xuICAgICAgICBjb25zdCB7IHNlcmllc0l4LCBzZXJpZXMgfSA9IGZpZWxkcztcbiAgICAgICAgY29uc3QgZXJyb3JCYXJzID0gcG9pbnQub3B0aW9ucy5lcnJvckJhcnM7XG4gICAgICAgIGNvbnN0IGxvd1ZhbHVlID0gZmllbGRzW2xvd0ZpZWxkXTtcbiAgICAgICAgY29uc3QgaGlnaFZhbHVlID0gZmllbGRzW2hpZ2hGaWVsZF07XG5cbiAgICAgICAgaWYgKGlzTnVtYmVyKHZhbHVlKSkge1xuICAgICAgICAgICAgbGV0IGVycm9yUmFuZ2U7XG4gICAgICAgICAgICBpZiAoaXNOdW1iZXIobG93VmFsdWUpICYmIGlzTnVtYmVyKGhpZ2hWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBlcnJvclJhbmdlID0geyBsb3c6IGxvd1ZhbHVlLCBoaWdoOiBoaWdoVmFsdWUgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGVycm9yQmFycyAmJiBkZWZpbmVkKGVycm9yQmFyc1t2YWx1ZUVycm9yRmllbGRdKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VyaWVzRXJyb3JSYW5nZXMgPSB0aGlzLnNlcmllc0Vycm9yUmFuZ2VzIHx8IHsgeDogW10sIHk6IFtdIH07XG4gICAgICAgICAgICAgICAgdGhpcy5zZXJpZXNFcnJvclJhbmdlc1tmaWVsZF1bc2VyaWVzSXhdID0gdGhpcy5zZXJpZXNFcnJvclJhbmdlc1tmaWVsZF1bc2VyaWVzSXhdIHx8XG4gICAgICAgICAgICAgICAgICAgIG5ldyBFcnJvclJhbmdlQ2FsY3VsYXRvcihlcnJvckJhcnNbdmFsdWVFcnJvckZpZWxkXSwgc2VyaWVzLCBmaWVsZCk7XG5cbiAgICAgICAgICAgICAgICBlcnJvclJhbmdlID0gdGhpcy5zZXJpZXNFcnJvclJhbmdlc1tmaWVsZF1bc2VyaWVzSXhdLmdldEVycm9yUmFuZ2UodmFsdWUsIGVycm9yQmFyc1t2YWx1ZUVycm9yRmllbGRdKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGVycm9yUmFuZ2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZFBvaW50RXJyb3JCYXIoZXJyb3JSYW5nZSwgcG9pbnQsIGZpZWxkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFkZFBvaW50RXJyb3JCYXIoZXJyb3JSYW5nZSwgcG9pbnQsIGZpZWxkKSB7XG4gICAgICAgIGNvbnN0IHsgbG93LCBoaWdoIH0gPSBlcnJvclJhbmdlO1xuICAgICAgICBjb25zdCB7IHNlcmllcywgb3B0aW9uczogeyBlcnJvckJhcnM6IG9wdGlvbnMgfSB9ID0gcG9pbnQ7XG4gICAgICAgIGNvbnN0IGlzVmVydGljYWwgPSBmaWVsZCA9PT0gWTtcbiAgICAgICAgY29uc3QgaXRlbSA9IHt9O1xuXG4gICAgICAgIHBvaW50W2ZpZWxkICsgXCJMb3dcIl0gPSBsb3c7XG4gICAgICAgIHBvaW50W2ZpZWxkICsgXCJIaWdoXCJdID0gaGlnaDtcblxuICAgICAgICBwb2ludC5lcnJvckJhcnMgPSBwb2ludC5lcnJvckJhcnMgfHwgW107XG4gICAgICAgIGNvbnN0IGVycm9yQmFyID0gbmV3IFNjYXR0ZXJFcnJvckJhcihsb3csIGhpZ2gsIGlzVmVydGljYWwsIHRoaXMsIHNlcmllcywgb3B0aW9ucyk7XG4gICAgICAgIHBvaW50LmVycm9yQmFycy5wdXNoKGVycm9yQmFyKTtcbiAgICAgICAgcG9pbnQuYXBwZW5kKGVycm9yQmFyKTtcblxuICAgICAgICBpdGVtW2ZpZWxkXSA9IGxvdztcbiAgICAgICAgdGhpcy51cGRhdGVSYW5nZShpdGVtLCBzZXJpZXMpO1xuICAgICAgICBpdGVtW2ZpZWxkXSA9IGhpZ2g7XG4gICAgICAgIHRoaXMudXBkYXRlUmFuZ2UoaXRlbSwgc2VyaWVzKTtcbiAgICB9XG5cbiAgICBhZGRWYWx1ZSh2YWx1ZSwgZmllbGRzKSB7XG4gICAgICAgIGNvbnN0IHsgeCwgeSB9ID0gdmFsdWU7XG4gICAgICAgIGNvbnN0IHNlcmllc0l4ID0gZmllbGRzLnNlcmllc0l4O1xuICAgICAgICBjb25zdCBzZXJpZXMgPSB0aGlzLm9wdGlvbnMuc2VyaWVzW3Nlcmllc0l4XTtcbiAgICAgICAgY29uc3QgbWlzc2luZ1ZhbHVlcyA9IHRoaXMuc2VyaWVzTWlzc2luZ1ZhbHVlcyhzZXJpZXMpO1xuICAgICAgICBjb25zdCBzZXJpZXNQb2ludHMgPSB0aGlzLnNlcmllc1BvaW50c1tzZXJpZXNJeF07XG5cbiAgICAgICAgbGV0IHBvaW50VmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgaWYgKCEoaGFzVmFsdWUoeCkgJiYgaGFzVmFsdWUoeSkpKSB7XG4gICAgICAgICAgICBwb2ludFZhbHVlID0gdGhpcy5jcmVhdGVNaXNzaW5nVmFsdWUocG9pbnRWYWx1ZSwgbWlzc2luZ1ZhbHVlcyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcG9pbnQ7XG4gICAgICAgIGlmIChwb2ludFZhbHVlKSB7XG4gICAgICAgICAgICBwb2ludCA9IHRoaXMuY3JlYXRlUG9pbnQocG9pbnRWYWx1ZSwgZmllbGRzKTtcbiAgICAgICAgICAgIGlmIChwb2ludCkge1xuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocG9pbnQsIGZpZWxkcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRFcnJvckJhcihwb2ludCwgWCwgZmllbGRzKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFkZEVycm9yQmFyKHBvaW50LCBZLCBmaWVsZHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy51cGRhdGVSYW5nZShwb2ludFZhbHVlLCBmaWVsZHMuc2VyaWVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucG9pbnRzLnB1c2gocG9pbnQpO1xuICAgICAgICBzZXJpZXNQb2ludHMucHVzaChwb2ludCk7XG4gICAgfVxuXG4gICAgc2VyaWVzTWlzc2luZ1ZhbHVlcyhzZXJpZXMpIHtcbiAgICAgICAgcmV0dXJuIHNlcmllcy5taXNzaW5nVmFsdWVzO1xuICAgIH1cblxuICAgIGNyZWF0ZU1pc3NpbmdWYWx1ZSgpIHt9XG5cbiAgICB1cGRhdGVSYW5nZSh2YWx1ZSwgc2VyaWVzKSB7XG4gICAgICAgIGNvbnN0IGludGxTZXJ2aWNlID0gdGhpcy5jaGFydFNlcnZpY2UuaW50bDtcbiAgICAgICAgY29uc3QgeyB4QXhpczogeEF4aXNOYW1lLCB5QXhpczogeUF4aXNOYW1lIH0gPSBzZXJpZXM7XG4gICAgICAgIGxldCB7IHgsIHkgfSA9IHZhbHVlO1xuICAgICAgICBsZXQgeEF4aXNSYW5nZSA9IHRoaXMueEF4aXNSYW5nZXNbeEF4aXNOYW1lXTtcbiAgICAgICAgbGV0IHlBeGlzUmFuZ2UgPSB0aGlzLnlBeGlzUmFuZ2VzW3lBeGlzTmFtZV07XG5cbiAgICAgICAgaWYgKGhhc1ZhbHVlKHgpKSB7XG4gICAgICAgICAgICB4QXhpc1JhbmdlID0gdGhpcy54QXhpc1Jhbmdlc1t4QXhpc05hbWVdID1cbiAgICAgICAgICAgICAgICB4QXhpc1JhbmdlIHx8IHsgbWluOiBNQVhfVkFMVUUsIG1heDogTUlOX1ZBTFVFIH07XG5cbiAgICAgICAgICAgIGlmIChpc1N0cmluZyh4KSkge1xuICAgICAgICAgICAgICAgIHggPSBwYXJzZURhdGUoaW50bFNlcnZpY2UsIHgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB4QXhpc1JhbmdlLm1pbiA9IE1hdGgubWluKHhBeGlzUmFuZ2UubWluLCB4KTtcbiAgICAgICAgICAgIHhBeGlzUmFuZ2UubWF4ID0gTWF0aC5tYXgoeEF4aXNSYW5nZS5tYXgsIHgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhc1ZhbHVlKHkpKSB7XG4gICAgICAgICAgICB5QXhpc1JhbmdlID0gdGhpcy55QXhpc1Jhbmdlc1t5QXhpc05hbWVdID1cbiAgICAgICAgICAgICAgICB5QXhpc1JhbmdlIHx8IHsgbWluOiBNQVhfVkFMVUUsIG1heDogTUlOX1ZBTFVFIH07XG5cbiAgICAgICAgICAgIGlmIChpc1N0cmluZyh5KSkge1xuICAgICAgICAgICAgICAgIHkgPSBwYXJzZURhdGUoaW50bFNlcnZpY2UsIHkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB5QXhpc1JhbmdlLm1pbiA9IE1hdGgubWluKHlBeGlzUmFuZ2UubWluLCB5KTtcbiAgICAgICAgICAgIHlBeGlzUmFuZ2UubWF4ID0gTWF0aC5tYXgoeUF4aXNSYW5nZS5tYXgsIHkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZXZhbFBvaW50T3B0aW9ucyhvcHRpb25zLCB2YWx1ZSwgZmllbGRzKSB7XG4gICAgICAgIGNvbnN0IHsgc2VyaWVzLCBzZXJpZXNJeCB9ID0gZmllbGRzO1xuICAgICAgICBjb25zdCBzdGF0ZSA9IHsgZGVmYXVsdHM6IHNlcmllcy5fZGVmYXVsdHMsIGV4Y2x1ZGVkOiBbIFwiZGF0YVwiLCBcInRvb2x0aXBcIiwgXCJjb250ZW50XCIsIFwidGVtcGxhdGVcIiwgXCJ2aXN1YWxcIiwgXCJ0b2dnbGVcIiwgXCJfb3V0T2ZSYW5nZU1pblBvaW50XCIsIFwiX291dE9mUmFuZ2VNYXhQb2ludFwiIF0gfTtcblxuICAgICAgICBsZXQgZG9FdmFsID0gdGhpcy5fZXZhbFNlcmllc1tzZXJpZXNJeF07XG4gICAgICAgIGlmICghZGVmaW5lZChkb0V2YWwpKSB7XG4gICAgICAgICAgICB0aGlzLl9ldmFsU2VyaWVzW3Nlcmllc0l4XSA9IGRvRXZhbCA9IGV2YWxPcHRpb25zKG9wdGlvbnMsIHt9LCBzdGF0ZSwgdHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcG9pbnRPcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgaWYgKGRvRXZhbCkge1xuICAgICAgICAgICAgcG9pbnRPcHRpb25zID0gZGVlcEV4dGVuZCh7fSwgb3B0aW9ucyk7XG4gICAgICAgICAgICBldmFsT3B0aW9ucyhwb2ludE9wdGlvbnMsIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICAgICAgc2VyaWVzOiBzZXJpZXMsXG4gICAgICAgICAgICAgICAgZGF0YUl0ZW06IGZpZWxkcy5kYXRhSXRlbVxuICAgICAgICAgICAgfSwgc3RhdGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBvaW50T3B0aW9ucztcbiAgICB9XG5cbiAgICBwb2ludFR5cGUoKSB7XG4gICAgICAgIHJldHVybiBMaW5lUG9pbnQ7XG4gICAgfVxuXG4gICAgcG9pbnRPcHRpb25zKHNlcmllcywgc2VyaWVzSXgpIHtcbiAgICAgICAgbGV0IG9wdGlvbnMgPSB0aGlzLnNlcmllc09wdGlvbnNbc2VyaWVzSXhdO1xuICAgICAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRzID0gdGhpcy5wb2ludFR5cGUoKS5wcm90b3R5cGUuZGVmYXVsdHM7XG4gICAgICAgICAgICB0aGlzLnNlcmllc09wdGlvbnNbc2VyaWVzSXhdID0gb3B0aW9ucyA9IGRlZXBFeHRlbmQoe30sIGRlZmF1bHRzLCB7XG4gICAgICAgICAgICAgICAgbWFya2Vyczoge1xuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiBzZXJpZXMub3BhY2l0eVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgICAgICAgICBmb3JtYXQ6IHRoaXMub3B0aW9ucy50b29sdGlwLmZvcm1hdFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdDogdGhpcy5vcHRpb25zLmxhYmVscy5mb3JtYXRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBzZXJpZXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgfVxuXG4gICAgY3JlYXRlUG9pbnQodmFsdWUsIGZpZWxkcykge1xuICAgICAgICBjb25zdCBzZXJpZXMgPSBmaWVsZHMuc2VyaWVzO1xuICAgICAgICBsZXQgcG9pbnRPcHRpb25zID0gdGhpcy5wb2ludE9wdGlvbnMoc2VyaWVzLCBmaWVsZHMuc2VyaWVzSXgpO1xuICAgICAgICBsZXQgY29sb3IgPSBmaWVsZHMuY29sb3IgfHwgc2VyaWVzLmNvbG9yO1xuXG4gICAgICAgIHBvaW50T3B0aW9ucyA9IHRoaXMuZXZhbFBvaW50T3B0aW9ucyhwb2ludE9wdGlvbnMsIHZhbHVlLCBmaWVsZHMpO1xuXG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHNlcmllcy5jb2xvcikpIHtcbiAgICAgICAgICAgIGNvbG9yID0gcG9pbnRPcHRpb25zLmNvbG9yO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcG9pbnQgPSBuZXcgTGluZVBvaW50KHZhbHVlLCBwb2ludE9wdGlvbnMpO1xuICAgICAgICBwb2ludC5jb2xvciA9IGNvbG9yO1xuXG4gICAgICAgIHRoaXMuYXBwZW5kKHBvaW50KTtcblxuICAgICAgICByZXR1cm4gcG9pbnQ7XG4gICAgfVxuXG4gICAgc2VyaWVzQXhlcyhzZXJpZXMpIHtcbiAgICAgICAgY29uc3QgeyB4QXhpczogeEF4aXNOYW1lLCB5QXhpczogeUF4aXNOYW1lIH0gPSBzZXJpZXM7XG4gICAgICAgIGNvbnN0IHBsb3RBcmVhID0gdGhpcy5wbG90QXJlYTtcbiAgICAgICAgY29uc3QgeEF4aXMgPSB4QXhpc05hbWUgPyBwbG90QXJlYS5uYW1lZFhBeGVzW3hBeGlzTmFtZV0gOiBwbG90QXJlYS5heGlzWDtcbiAgICAgICAgY29uc3QgeUF4aXMgPSB5QXhpc05hbWUgPyBwbG90QXJlYS5uYW1lZFlBeGVzW3lBeGlzTmFtZV0gOiBwbG90QXJlYS5heGlzWTtcblxuICAgICAgICBpZiAoIXhBeGlzKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmFibGUgdG8gbG9jYXRlIFggYXhpcyB3aXRoIG5hbWUgXCIgKyB4QXhpc05hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF5QXhpcykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5hYmxlIHRvIGxvY2F0ZSBZIGF4aXMgd2l0aCBuYW1lIFwiICsgeUF4aXNOYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiB4QXhpcyxcbiAgICAgICAgICAgIHk6IHlBeGlzXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcmVmbG93KHRhcmdldEJveCkge1xuICAgICAgICBjb25zdCBjaGFydFBvaW50cyA9IHRoaXMucG9pbnRzO1xuICAgICAgICBjb25zdCBsaW1pdCA9ICF0aGlzLm9wdGlvbnMuY2xpcDtcbiAgICAgICAgbGV0IHBvaW50SXggPSAwO1xuXG5cbiAgICAgICAgdGhpcy50cmF2ZXJzZURhdGFQb2ludHMoKHZhbHVlLCBmaWVsZHMpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHBvaW50ID0gY2hhcnRQb2ludHNbcG9pbnRJeCsrXTtcbiAgICAgICAgICAgIGNvbnN0IHNlcmllc0F4ZXMgPSB0aGlzLnNlcmllc0F4ZXMoZmllbGRzLnNlcmllcyk7XG4gICAgICAgICAgICBjb25zdCBzbG90WCA9IHNlcmllc0F4ZXMueC5nZXRTbG90KHZhbHVlLngsIHZhbHVlLngsIGxpbWl0KTtcbiAgICAgICAgICAgIGNvbnN0IHNsb3RZID0gc2VyaWVzQXhlcy55LmdldFNsb3QodmFsdWUueSwgdmFsdWUueSwgbGltaXQpO1xuXG4gICAgICAgICAgICBpZiAocG9pbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2xvdFggJiYgc2xvdFkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcG9pbnRTbG90ID0gdGhpcy5wb2ludFNsb3Qoc2xvdFgsIHNsb3RZKTtcbiAgICAgICAgICAgICAgICAgICAgcG9pbnQucmVmbG93KHBvaW50U2xvdCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcG9pbnQudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5ib3ggPSB0YXJnZXRCb3g7XG4gICAgfVxuXG4gICAgcG9pbnRTbG90KHNsb3RYLCBzbG90WSkge1xuICAgICAgICByZXR1cm4gbmV3IEJveChzbG90WC54MSwgc2xvdFkueTEsIHNsb3RYLngyLCBzbG90WS55Mik7XG4gICAgfVxuXG4gICAgdHJhdmVyc2VEYXRhUG9pbnRzKGNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IHsgb3B0aW9uczogeyBzZXJpZXMgfSwgc2VyaWVzUG9pbnRzIH0gPSB0aGlzO1xuXG4gICAgICAgIGZvciAobGV0IHNlcmllc0l4ID0gMDsgc2VyaWVzSXggPCBzZXJpZXMubGVuZ3RoOyBzZXJpZXNJeCsrKSB7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50U2VyaWVzID0gc2VyaWVzW3Nlcmllc0l4XTtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRTZXJpZXNQb2ludHMgPSBzZXJpZXNQb2ludHNbc2VyaWVzSXhdO1xuICAgICAgICAgICAgaWYgKCFjdXJyZW50U2VyaWVzUG9pbnRzKSB7XG4gICAgICAgICAgICAgICAgc2VyaWVzUG9pbnRzW3Nlcmllc0l4XSA9IFtdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKGxldCBwb2ludEl4ID0gMDsgcG9pbnRJeCA8IGN1cnJlbnRTZXJpZXMuZGF0YS5sZW5ndGg7IHBvaW50SXgrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgdmFsdWVGaWVsZHM6IHZhbHVlLCBmaWVsZHMgfSA9IHRoaXMuX2JpbmRQb2ludChjdXJyZW50U2VyaWVzLCBzZXJpZXNJeCwgcG9pbnRJeCk7XG5cbiAgICAgICAgICAgICAgICBjYWxsYmFjayh2YWx1ZSwgZGVlcEV4dGVuZCh7XG4gICAgICAgICAgICAgICAgICAgIHBvaW50SXg6IHBvaW50SXgsXG4gICAgICAgICAgICAgICAgICAgIHNlcmllczogY3VycmVudFNlcmllcyxcbiAgICAgICAgICAgICAgICAgICAgc2VyaWVzSXg6IHNlcmllc0l4LFxuICAgICAgICAgICAgICAgICAgICBkYXRhSXRlbTogY3VycmVudFNlcmllcy5kYXRhW3BvaW50SXhdLFxuICAgICAgICAgICAgICAgICAgICBvd25lcjogdGhpc1xuICAgICAgICAgICAgICAgIH0sIGZpZWxkcykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9ybWF0UG9pbnRWYWx1ZShwb2ludCwgZm9ybWF0KSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gcG9pbnQudmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJ0U2VydmljZS5mb3JtYXQuYXV0byhmb3JtYXQsIHZhbHVlLngsIHZhbHVlLnkpO1xuICAgIH1cblxuICAgIGFuaW1hdGlvblBvaW50cygpIHtcbiAgICAgICAgY29uc3QgcG9pbnRzID0gdGhpcy5wb2ludHM7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBwb2ludHMubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goKHBvaW50c1tpZHhdIHx8IHt9KS5tYXJrZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuc2V0RGVmYXVsdE9wdGlvbnMoU2NhdHRlckNoYXJ0LCB7XG4gICAgc2VyaWVzOiBbXSxcbiAgICB0b29sdGlwOiB7XG4gICAgICAgIGZvcm1hdDogXCJ7MH0sIHsxfVwiXG4gICAgfSxcbiAgICBsYWJlbHM6IHtcbiAgICAgICAgZm9ybWF0OiBcInswfSwgezF9XCJcbiAgICB9LFxuICAgIGNsaXA6IHRydWVcbn0pO1xuZGVlcEV4dGVuZChTY2F0dGVyQ2hhcnQucHJvdG90eXBlLCBDbGlwQW5pbWF0aW9uTWl4aW4sIHtcbiAgICBfYmluZFBvaW50OiBDYXRlZ29yaWNhbENoYXJ0LnByb3RvdHlwZS5fYmluZFBvaW50XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgU2NhdHRlckNoYXJ0OyIsImltcG9ydCB7IGRyYXdpbmcgYXMgZHJhdywgZ2VvbWV0cnkgYXMgZ2VvbSwgQ29sb3IgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tZHJhd2luZyc7XG5cbmltcG9ydCBMaW5lUG9pbnQgZnJvbSAnLi4vbGluZS1jaGFydC9saW5lLXBvaW50JztcbmltcG9ydCB7IEJPUkRFUl9CUklHSFRORVNTIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcblxuaW1wb3J0IHsgQ0VOVEVSIH0gZnJvbSAnLi4vLi4vY29tbW9uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBkZWVwRXh0ZW5kIH0gZnJvbSAnLi4vLi4vY29tbW9uJztcblxuY2xhc3MgQnViYmxlIGV4dGVuZHMgTGluZVBvaW50IHtcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZSwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcih2YWx1ZSwgb3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5jYXRlZ29yeSA9IHZhbHVlLmNhdGVnb3J5O1xuICAgIH1cblxuICAgIGNyZWF0ZUhpZ2hsaWdodCgpIHtcbiAgICAgICAgY29uc3QgaGlnaGxpZ2h0ID0gdGhpcy5vcHRpb25zLmhpZ2hsaWdodDtcbiAgICAgICAgY29uc3QgYm9yZGVyID0gaGlnaGxpZ2h0LmJvcmRlcjtcbiAgICAgICAgY29uc3QgbWFya2VycyA9IHRoaXMub3B0aW9ucy5tYXJrZXJzO1xuICAgICAgICBjb25zdCBjZW50ZXIgPSB0aGlzLmJveC5jZW50ZXIoKTtcbiAgICAgICAgY29uc3QgcmFkaXVzID0gKG1hcmtlcnMuc2l6ZSArIG1hcmtlcnMuYm9yZGVyLndpZHRoICsgYm9yZGVyLndpZHRoKSAvIDI7XG4gICAgICAgIGNvbnN0IGhpZ2hsaWdodEdyb3VwID0gbmV3IGRyYXcuR3JvdXAoKTtcbiAgICAgICAgY29uc3Qgc2hhZG93ID0gbmV3IGRyYXcuQ2lyY2xlKG5ldyBnZW9tLkNpcmNsZShbIGNlbnRlci54LCBjZW50ZXIueSArIHJhZGl1cyAvIDUgKyBib3JkZXIud2lkdGggLyAyIF0sIHJhZGl1cyArIGJvcmRlci53aWR0aCAvIDIpLCB7XG4gICAgICAgICAgICBzdHJva2U6IHtcbiAgICAgICAgICAgICAgICBjb2xvcjogJ25vbmUnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmlsbDogdGhpcy5jcmVhdGVHcmFkaWVudCh7XG4gICAgICAgICAgICAgICAgZ3JhZGllbnQ6ICdidWJibGVTaGFkb3cnLFxuICAgICAgICAgICAgICAgIGNvbG9yOiBtYXJrZXJzLmJhY2tncm91bmQsXG4gICAgICAgICAgICAgICAgc3RvcHM6IFsge1xuICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IDAsXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiBtYXJrZXJzLmJhY2tncm91bmQsXG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAuM1xuICAgICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiAxLFxuICAgICAgICAgICAgICAgICAgICBjb2xvcjogbWFya2Vycy5iYWNrZ3JvdW5kLFxuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAwXG4gICAgICAgICAgICAgICAgfSBdXG4gICAgICAgICAgICB9KVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3Qgb3ZlcmxheSA9IG5ldyBkcmF3LkNpcmNsZShuZXcgZ2VvbS5DaXJjbGUoWyBjZW50ZXIueCwgY2VudGVyLnkgXSwgcmFkaXVzKSwge1xuICAgICAgICAgICAgc3Ryb2tlOiB7XG4gICAgICAgICAgICAgICAgY29sb3I6IGJvcmRlci5jb2xvciB8fFxuICAgICAgICAgICAgICAgICAgICBuZXcgQ29sb3IobWFya2Vycy5iYWNrZ3JvdW5kKS5icmlnaHRuZXNzKEJPUkRFUl9CUklHSFRORVNTKS50b0hleCgpLFxuICAgICAgICAgICAgICAgIHdpZHRoOiBib3JkZXIud2lkdGgsXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogYm9yZGVyLm9wYWNpdHlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmaWxsOiB7XG4gICAgICAgICAgICAgICAgY29sb3I6IG1hcmtlcnMuYmFja2dyb3VuZCxcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiBoaWdobGlnaHQub3BhY2l0eVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBoaWdobGlnaHRHcm91cC5hcHBlbmQoc2hhZG93LCBvdmVybGF5KTtcblxuICAgICAgICByZXR1cm4gaGlnaGxpZ2h0R3JvdXA7XG4gICAgfVxufVxuXG5CdWJibGUucHJvdG90eXBlLmRlZmF1bHRzID0gZGVlcEV4dGVuZCh7fSwgQnViYmxlLnByb3RvdHlwZS5kZWZhdWx0cywge1xuICAgIGxhYmVsczoge1xuICAgICAgICBwb3NpdGlvbjogQ0VOVEVSXG4gICAgfSxcbiAgICBoaWdobGlnaHQ6IHtcbiAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgYm9yZGVyOiB7XG4gICAgICAgICAgICBjb2xvcjogXCIjZmZmXCIsXG4gICAgICAgICAgICB3aWR0aDogMixcbiAgICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuXG5CdWJibGUucHJvdG90eXBlLmRlZmF1bHRzLmhpZ2hsaWdodC56SW5kZXggPSB1bmRlZmluZWQ7XG5cbmV4cG9ydCBkZWZhdWx0IEJ1YmJsZTsiLCJpbXBvcnQgU2NhdHRlckNoYXJ0IGZyb20gJy4uL3NjYXR0ZXItY2hhcnRzL3NjYXR0ZXItY2hhcnQnO1xuaW1wb3J0IEJ1YmJsZSBmcm9tICcuL2J1YmJsZSc7XG5cbmltcG9ydCB7IElOSVRJQUxfQU5JTUFUSU9OX0RVUkFUSU9OLCBCVUJCTEUgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuXG5pbXBvcnQgeyBNSU5fVkFMVUUsIENJUkNMRSB9IGZyb20gJy4uLy4uL2NvbW1vbi9jb25zdGFudHMnO1xuaW1wb3J0IHsgZGVlcEV4dGVuZCwgaXNGdW5jdGlvbiwgc2V0RGVmYXVsdE9wdGlvbnMsIHZhbHVlT3JEZWZhdWx0IH0gZnJvbSAnLi4vLi4vY29tbW9uJztcblxuY2xhc3MgQnViYmxlQ2hhcnQgZXh0ZW5kcyBTY2F0dGVyQ2hhcnQge1xuICAgIF9pbml0RmllbGRzKCkge1xuICAgICAgICB0aGlzLl9tYXhTaXplID0gTUlOX1ZBTFVFO1xuICAgICAgICBzdXBlci5faW5pdEZpZWxkcygpO1xuICAgIH1cblxuICAgIGFkZFZhbHVlKHZhbHVlLCBmaWVsZHMpIHtcbiAgICAgICAgaWYgKHZhbHVlLnNpemUgIT09IG51bGwgJiYgKHZhbHVlLnNpemUgPiAwIHx8ICh2YWx1ZS5zaXplIDwgMCAmJiBmaWVsZHMuc2VyaWVzLm5lZ2F0aXZlVmFsdWVzLnZpc2libGUpKSkge1xuICAgICAgICAgICAgdGhpcy5fbWF4U2l6ZSA9IE1hdGgubWF4KHRoaXMuX21heFNpemUsIE1hdGguYWJzKHZhbHVlLnNpemUpKTtcbiAgICAgICAgICAgIHN1cGVyLmFkZFZhbHVlKHZhbHVlLCBmaWVsZHMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wb2ludHMucHVzaChudWxsKTtcbiAgICAgICAgICAgIHRoaXMuc2VyaWVzUG9pbnRzW2ZpZWxkcy5zZXJpZXNJeF0ucHVzaChudWxsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlZmxvdyhib3gpIHtcbiAgICAgICAgdGhpcy51cGRhdGVCdWJibGVzU2l6ZShib3gpO1xuICAgICAgICBzdXBlci5yZWZsb3coYm94KTtcbiAgICB9XG5cbiAgICBwb2ludFR5cGUoKSB7XG4gICAgICAgIHJldHVybiBCdWJibGU7XG4gICAgfVxuXG4gICAgY3JlYXRlUG9pbnQodmFsdWUsIGZpZWxkcykge1xuICAgICAgICBjb25zdCBzZXJpZXMgPSBmaWVsZHMuc2VyaWVzO1xuICAgICAgICBjb25zdCBwb2ludHNDb3VudCA9IHNlcmllcy5kYXRhLmxlbmd0aDtcbiAgICAgICAgY29uc3QgZGVsYXkgPSBmaWVsZHMucG9pbnRJeCAqIChJTklUSUFMX0FOSU1BVElPTl9EVVJBVElPTiAvIHBvaW50c0NvdW50KTtcbiAgICAgICAgY29uc3QgYW5pbWF0aW9uT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGRlbGF5OiBkZWxheSxcbiAgICAgICAgICAgIGR1cmF0aW9uOiBJTklUSUFMX0FOSU1BVElPTl9EVVJBVElPTiAtIGRlbGF5LFxuICAgICAgICAgICAgdHlwZTogQlVCQkxFXG4gICAgICAgIH07XG5cbiAgICAgICAgbGV0IGNvbG9yID0gZmllbGRzLmNvbG9yIHx8IHNlcmllcy5jb2xvcjtcbiAgICAgICAgaWYgKHZhbHVlLnNpemUgPCAwICYmIHNlcmllcy5uZWdhdGl2ZVZhbHVlcy52aXNpYmxlKSB7XG4gICAgICAgICAgICBjb2xvciA9IHZhbHVlT3JEZWZhdWx0KFxuICAgICAgICAgICAgICAgIHNlcmllcy5uZWdhdGl2ZVZhbHVlcy5jb2xvciwgY29sb3JcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcG9pbnRPcHRpb25zID0gZGVlcEV4dGVuZCh7XG4gICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICBhbmltYXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgZGVsYXk6IGRlbGF5LFxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogSU5JVElBTF9BTklNQVRJT05fRFVSQVRJT04gLSBkZWxheVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgdGhpcy5wb2ludE9wdGlvbnMoc2VyaWVzLCBmaWVsZHMuc2VyaWVzSXgpLCB7XG4gICAgICAgICAgICBtYXJrZXJzOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogQ0lSQ0xFLFxuICAgICAgICAgICAgICAgIGJvcmRlcjogc2VyaWVzLmJvcmRlcixcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiBzZXJpZXMub3BhY2l0eSxcbiAgICAgICAgICAgICAgICBhbmltYXRpb246IGFuaW1hdGlvbk9wdGlvbnNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcG9pbnRPcHRpb25zID0gdGhpcy5ldmFsUG9pbnRPcHRpb25zKHBvaW50T3B0aW9ucywgdmFsdWUsIGZpZWxkcyk7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHNlcmllcy5jb2xvcikpIHtcbiAgICAgICAgICAgIGNvbG9yID0gcG9pbnRPcHRpb25zLmNvbG9yO1xuICAgICAgICB9XG5cbiAgICAgICAgcG9pbnRPcHRpb25zLm1hcmtlcnMuYmFja2dyb3VuZCA9IGNvbG9yO1xuXG4gICAgICAgIGNvbnN0IHBvaW50ID0gbmV3IEJ1YmJsZSh2YWx1ZSwgcG9pbnRPcHRpb25zKTtcbiAgICAgICAgcG9pbnQuY29sb3IgPSBjb2xvcjtcblxuICAgICAgICB0aGlzLmFwcGVuZChwb2ludCk7XG5cbiAgICAgICAgcmV0dXJuIHBvaW50O1xuICAgIH1cblxuICAgIHVwZGF0ZUJ1YmJsZXNTaXplKGJveCkge1xuICAgICAgICBjb25zdCB7IG9wdGlvbnM6IHsgc2VyaWVzIH0gfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGJveFNpemUgPSBNYXRoLm1pbihib3gud2lkdGgoKSwgYm94LmhlaWdodCgpKTtcblxuICAgICAgICBmb3IgKGxldCBzZXJpZXNJeCA9IDA7IHNlcmllc0l4IDwgc2VyaWVzLmxlbmd0aDsgc2VyaWVzSXgrKykge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudFNlcmllcyA9IHNlcmllc1tzZXJpZXNJeF07XG4gICAgICAgICAgICBjb25zdCBzZXJpZXNQb2ludHMgPSB0aGlzLnNlcmllc1BvaW50c1tzZXJpZXNJeF07XG4gICAgICAgICAgICBjb25zdCBtaW5TaXplID0gY3VycmVudFNlcmllcy5taW5TaXplIHx8IE1hdGgubWF4KGJveFNpemUgKiAwLjAyLCAxMCk7XG4gICAgICAgICAgICBjb25zdCBtYXhTaXplID0gY3VycmVudFNlcmllcy5tYXhTaXplIHx8IGJveFNpemUgKiAwLjI7XG4gICAgICAgICAgICBjb25zdCBtaW5SID0gbWluU2l6ZSAvIDI7XG4gICAgICAgICAgICBjb25zdCBtYXhSID0gbWF4U2l6ZSAvIDI7XG4gICAgICAgICAgICBjb25zdCBtaW5BcmVhID0gTWF0aC5QSSAqIG1pblIgKiBtaW5SO1xuICAgICAgICAgICAgY29uc3QgbWF4QXJlYSA9IE1hdGguUEkgKiBtYXhSICogbWF4UjtcbiAgICAgICAgICAgIGNvbnN0IGFyZWFSYW5nZSA9IG1heEFyZWEgLSBtaW5BcmVhO1xuICAgICAgICAgICAgY29uc3QgYXJlYVJhdGlvID0gYXJlYVJhbmdlIC8gdGhpcy5fbWF4U2l6ZTtcblxuICAgICAgICAgICAgZm9yIChsZXQgcG9pbnRJeCA9IDA7IHBvaW50SXggPCBzZXJpZXNQb2ludHMubGVuZ3RoOyBwb2ludEl4KyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwb2ludCA9IHNlcmllc1BvaW50c1twb2ludEl4XTtcbiAgICAgICAgICAgICAgICBpZiAocG9pbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYXJlYSA9IE1hdGguYWJzKHBvaW50LnZhbHVlLnNpemUpICogYXJlYVJhdGlvO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByYWRpdXMgPSBNYXRoLnNxcnQoKG1pbkFyZWEgKyBhcmVhKSAvIE1hdGguUEkpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBiYXNlWkluZGV4ID0gdmFsdWVPckRlZmF1bHQocG9pbnQub3B0aW9ucy56SW5kZXgsIDApO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB6SW5kZXggPSBiYXNlWkluZGV4ICsgKDEgLSByYWRpdXMgLyBtYXhSKTtcblxuICAgICAgICAgICAgICAgICAgICBkZWVwRXh0ZW5kKHBvaW50Lm9wdGlvbnMsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHpJbmRleDogekluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgbWFya2Vyczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6IHJhZGl1cyAqIDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgekluZGV4OiB6SW5kZXhcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB6SW5kZXg6IHpJbmRleCArIDFcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9ybWF0UG9pbnRWYWx1ZShwb2ludCwgZm9ybWF0KSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gcG9pbnQudmFsdWU7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJ0U2VydmljZS5mb3JtYXQuYXV0byhmb3JtYXQsIHZhbHVlLngsIHZhbHVlLnksIHZhbHVlLnNpemUsIHBvaW50LmNhdGVnb3J5KTtcbiAgICB9XG5cbiAgICBjcmVhdGVBbmltYXRpb24oKSB7fVxuICAgIGNyZWF0ZVZpc3VhbCgpIHt9XG59XG5cbnNldERlZmF1bHRPcHRpb25zKEJ1YmJsZUNoYXJ0LCB7XG4gICAgdG9vbHRpcDoge1xuICAgICAgICBmb3JtYXQ6IFwiezN9XCJcbiAgICB9LFxuICAgIGxhYmVsczoge1xuICAgICAgICBmb3JtYXQ6IFwiezN9XCJcbiAgICB9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgQnViYmxlQ2hhcnQ7IiwiaW1wb3J0IHsgU2hhcGVFbGVtZW50IH0gZnJvbSAnLi4vLi4vY29yZSc7XG5pbXBvcnQgeyBkZWVwRXh0ZW5kIH0gZnJvbSAnLi4vLi4vY29tbW9uJztcbmltcG9ydCBQb2ludEV2ZW50c01peGluIGZyb20gJy4uL21peGlucy9wb2ludC1ldmVudHMtbWl4aW4nO1xuXG5jbGFzcyBUYXJnZXQgZXh0ZW5kcyBTaGFwZUVsZW1lbnQgeyB9XG5cbmRlZXBFeHRlbmQoVGFyZ2V0LnByb3RvdHlwZSwgUG9pbnRFdmVudHNNaXhpbik7XG5cbmV4cG9ydCBkZWZhdWx0IFRhcmdldDsiLCJpbXBvcnQgeyBkcmF3aW5nIGFzIGRyYXcgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tZHJhd2luZyc7XG5cbmltcG9ydCBUYXJnZXQgZnJvbSAnLi90YXJnZXQnO1xuXG5pbXBvcnQgeyBDaGFydEVsZW1lbnQsIEJveCB9IGZyb20gJy4uLy4uL2NvcmUnO1xuXG5pbXBvcnQgUG9pbnRFdmVudHNNaXhpbiBmcm9tICcuLi9taXhpbnMvcG9pbnQtZXZlbnRzLW1peGluJztcbmltcG9ydCBOb3RlTWl4aW4gZnJvbSAnLi4vbWl4aW5zL25vdGUtbWl4aW4nO1xuaW1wb3J0IEJhciBmcm9tICcuLi9iYXItY2hhcnQvYmFyJztcblxuaW1wb3J0IHsgV0hJVEUsIFRPUCwgUklHSFQgfSBmcm9tICcuLi8uLi9jb21tb24vY29uc3RhbnRzJztcbmltcG9ydCB7IGFsaWduUGF0aFRvUGl4ZWwsIGRlZXBFeHRlbmQsIGRlZmluZWQsIHNldERlZmF1bHRPcHRpb25zLCB2YWx1ZU9yRGVmYXVsdCB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5cbmNsYXNzIEJ1bGxldCBleHRlbmRzIENoYXJ0RWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IodmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5hYm92ZUF4aXMgPSB0aGlzLm9wdGlvbnMuYWJvdmVBeGlzO1xuICAgICAgICB0aGlzLmNvbG9yID0gb3B0aW9ucy5jb2xvciB8fCBXSElURTtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICAgICAgICBpZiAoIXRoaXMuX3JlbmRlcmVkKSB7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJlZCA9IHRydWU7XG5cbiAgICAgICAgICAgIGlmIChkZWZpbmVkKHRoaXMudmFsdWUudGFyZ2V0KSkge1xuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0ID0gbmV3IFRhcmdldCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IG9wdGlvbnMudGFyZ2V0LnNoYXBlLFxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBvcHRpb25zLnRhcmdldC5jb2xvciB8fCB0aGlzLmNvbG9yLFxuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiBvcHRpb25zLm9wYWNpdHksXG4gICAgICAgICAgICAgICAgICAgIHpJbmRleDogb3B0aW9ucy56SW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlcjogb3B0aW9ucy50YXJnZXQuYm9yZGVyLFxuICAgICAgICAgICAgICAgICAgICB2QWxpZ246IFRPUCxcbiAgICAgICAgICAgICAgICAgICAgYWxpZ246IFJJR0hUXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldC52YWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICAgICAgICAgICAgdGhpcy50YXJnZXQuZGF0YUl0ZW0gPSB0aGlzLmRhdGFJdGVtO1xuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0LnNlcmllcyA9IHRoaXMuc2VyaWVzO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5hcHBlbmQodGhpcy50YXJnZXQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZU5vdGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlZmxvdyhib3gpIHtcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcblxuICAgICAgICBjb25zdCB7IG9wdGlvbnMsIHRhcmdldCwgb3duZXI6IGNoYXJ0IH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBpbnZlcnRBeGVzID0gb3B0aW9ucy5pbnZlcnRBeGVzO1xuICAgICAgICBjb25zdCB2YWx1ZUF4aXMgPSBjaGFydC5zZXJpZXNWYWx1ZUF4aXModGhpcy5vcHRpb25zKTtcbiAgICAgICAgY29uc3QgY2F0ZWdvcnlTbG90ID0gY2hhcnQuY2F0ZWdvcnlTbG90KGNoYXJ0LmNhdGVnb3J5QXhpcywgb3B0aW9ucy5jYXRlZ29yeUl4LCB2YWx1ZUF4aXMpO1xuICAgICAgICBjb25zdCB0YXJnZXRWYWx1ZVNsb3QgPSB2YWx1ZUF4aXMuZ2V0U2xvdCh0aGlzLnZhbHVlLnRhcmdldCk7XG4gICAgICAgIGNvbnN0IHRhcmdldFNsb3RYID0gaW52ZXJ0QXhlcyA/IHRhcmdldFZhbHVlU2xvdCA6IGNhdGVnb3J5U2xvdDtcbiAgICAgICAgY29uc3QgdGFyZ2V0U2xvdFkgPSBpbnZlcnRBeGVzID8gY2F0ZWdvcnlTbG90IDogdGFyZ2V0VmFsdWVTbG90O1xuXG4gICAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldFNsb3QgPSBuZXcgQm94KFxuICAgICAgICAgICAgICAgIHRhcmdldFNsb3RYLngxLCB0YXJnZXRTbG90WS55MSxcbiAgICAgICAgICAgICAgICB0YXJnZXRTbG90WC54MiwgdGFyZ2V0U2xvdFkueTJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0YXJnZXQub3B0aW9ucy5oZWlnaHQgPSBpbnZlcnRBeGVzID8gdGFyZ2V0U2xvdC5oZWlnaHQoKSA6IG9wdGlvbnMudGFyZ2V0LmxpbmUud2lkdGg7XG4gICAgICAgICAgICB0YXJnZXQub3B0aW9ucy53aWR0aCA9IGludmVydEF4ZXMgPyBvcHRpb25zLnRhcmdldC5saW5lLndpZHRoIDogdGFyZ2V0U2xvdC53aWR0aCgpO1xuICAgICAgICAgICAgdGFyZ2V0LnJlZmxvdyh0YXJnZXRTbG90KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLm5vdGUpIHtcbiAgICAgICAgICAgIHRoaXMubm90ZS5yZWZsb3coYm94KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYm94ID0gYm94O1xuICAgIH1cblxuICAgIGNyZWF0ZVZpc3VhbCgpIHtcbiAgICAgICAgc3VwZXIuY3JlYXRlVmlzdWFsKCk7XG5cbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgYm9keSA9IGRyYXcuUGF0aC5mcm9tUmVjdCh0aGlzLmJveC50b1JlY3QoKSwge1xuICAgICAgICAgICAgZmlsbDoge1xuICAgICAgICAgICAgICAgIGNvbG9yOiB0aGlzLmNvbG9yLFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IG9wdGlvbnMub3BhY2l0eVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0cm9rZTogbnVsbFxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAob3B0aW9ucy5ib3JkZXIud2lkdGggPiAwKSB7XG4gICAgICAgICAgICBib2R5Lm9wdGlvbnMuc2V0KFwic3Ryb2tlXCIsIHtcbiAgICAgICAgICAgICAgICBjb2xvcjogb3B0aW9ucy5ib3JkZXIuY29sb3IgfHwgdGhpcy5jb2xvcixcbiAgICAgICAgICAgICAgICB3aWR0aDogb3B0aW9ucy5ib3JkZXIud2lkdGgsXG4gICAgICAgICAgICAgICAgZGFzaFR5cGU6IG9wdGlvbnMuYm9yZGVyLmRhc2hUeXBlLFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IHZhbHVlT3JEZWZhdWx0KG9wdGlvbnMuYm9yZGVyLm9wYWNpdHksIG9wdGlvbnMub3BhY2l0eSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5ib2R5VmlzdWFsID0gYm9keTtcblxuICAgICAgICBhbGlnblBhdGhUb1BpeGVsKGJvZHkpO1xuICAgICAgICB0aGlzLnZpc3VhbC5hcHBlbmQoYm9keSk7XG4gICAgfVxuXG4gICAgY3JlYXRlQW5pbWF0aW9uKCkge1xuICAgICAgICBpZiAodGhpcy5ib2R5VmlzdWFsKSB7XG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbiA9IGRyYXcuQW5pbWF0aW9uLmNyZWF0ZShcbiAgICAgICAgICAgICAgICB0aGlzLmJvZHlWaXN1YWwsIHRoaXMub3B0aW9ucy5hbmltYXRpb25cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjcmVhdGVIaWdobGlnaHQoc3R5bGUpIHtcbiAgICAgICAgcmV0dXJuIGRyYXcuUGF0aC5mcm9tUmVjdCh0aGlzLmJveC50b1JlY3QoKSwgc3R5bGUpO1xuICAgIH1cblxuICAgIGhpZ2hsaWdodFZpc3VhbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYm9keVZpc3VhbDtcbiAgICB9XG5cbiAgICBoaWdobGlnaHRWaXN1YWxBcmdzKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcmVjdDogdGhpcy5ib3gudG9SZWN0KCksXG4gICAgICAgICAgICB2aXN1YWw6IHRoaXMuYm9keVZpc3VhbCxcbiAgICAgICAgICAgIG9wdGlvbnM6IHRoaXMub3B0aW9uc1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZvcm1hdFZhbHVlKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vd25lci5mb3JtYXRQb2ludFZhbHVlKHRoaXMsIGZvcm1hdCk7XG4gICAgfVxufVxuXG5CdWxsZXQucHJvdG90eXBlLnRvb2x0aXBBbmNob3IgPSBCYXIucHJvdG90eXBlLnRvb2x0aXBBbmNob3I7XG5cbnNldERlZmF1bHRPcHRpb25zKEJ1bGxldCwge1xuICAgIGJvcmRlcjoge1xuICAgICAgICB3aWR0aDogMVxuICAgIH0sXG4gICAgdmVydGljYWw6IGZhbHNlLFxuICAgIG9wYWNpdHk6IDEsXG4gICAgdGFyZ2V0OiB7XG4gICAgICAgIHNoYXBlOiBcIlwiLFxuICAgICAgICBib3JkZXI6IHtcbiAgICAgICAgICAgIHdpZHRoOiAwLFxuICAgICAgICAgICAgY29sb3I6IFwiZ3JlZW5cIlxuICAgICAgICB9LFxuICAgICAgICBsaW5lOiB7XG4gICAgICAgICAgICB3aWR0aDogMlxuICAgICAgICB9XG4gICAgfSxcbiAgICB0b29sdGlwOiB7XG4gICAgICAgIGZvcm1hdDogXCJDdXJyZW50OiB7MH08YnIgLz5UYXJnZXQ6IHsxfVwiXG4gICAgfVxufSk7XG5cbmRlZXBFeHRlbmQoQnVsbGV0LnByb3RvdHlwZSwgUG9pbnRFdmVudHNNaXhpbik7XG5kZWVwRXh0ZW5kKEJ1bGxldC5wcm90b3R5cGUsIE5vdGVNaXhpbik7XG5cbmV4cG9ydCBkZWZhdWx0IEJ1bGxldDsiLCJcbmltcG9ydCBDYXRlZ29yaWNhbENoYXJ0IGZyb20gJy4uL2NhdGVnb3JpY2FsLWNoYXJ0JztcbmltcG9ydCBCYXJDaGFydCBmcm9tICcuLi9iYXItY2hhcnQvYmFyLWNoYXJ0JztcbmltcG9ydCBCdWxsZXQgZnJvbSAnLi9idWxsZXQnO1xuaW1wb3J0IENsdXN0ZXJMYXlvdXQgZnJvbSAnLi4vbGF5b3V0L2NsdXN0ZXItbGF5b3V0JztcbmltcG9ydCB7IEJBUiB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5cbmltcG9ydCB7IE1JTl9WQUxVRSwgTUFYX1ZBTFVFIH0gZnJvbSAnLi4vLi4vY29tbW9uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBkZWVwRXh0ZW5kLCBkZWZpbmVkLCBpc0FycmF5LCBpc0Z1bmN0aW9uLCBpc09iamVjdCwgc2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tICcuLi8uLi9jb21tb24nO1xuXG5jbGFzcyBCdWxsZXRDaGFydCBleHRlbmRzIENhdGVnb3JpY2FsQ2hhcnQge1xuICAgIGNvbnN0cnVjdG9yKHBsb3RBcmVhLCBvcHRpb25zKSB7XG5cbiAgICAgICAgd3JhcERhdGEob3B0aW9ucyk7XG5cbiAgICAgICAgc3VwZXIocGxvdEFyZWEsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJlZmxvd0NhdGVnb3JpZXMoY2F0ZWdvcnlTbG90cykge1xuICAgICAgICBjb25zdCBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG4gICAgICAgIGNvbnN0IGNoaWxkcmVuTGVuZ3RoID0gY2hpbGRyZW4ubGVuZ3RoO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW5MZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY2hpbGRyZW5baV0ucmVmbG93KGNhdGVnb3J5U2xvdHNbaV0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcGxvdFJhbmdlKHBvaW50KSB7XG4gICAgICAgIGNvbnN0IHNlcmllcyA9IHBvaW50LnNlcmllcztcbiAgICAgICAgY29uc3QgdmFsdWVBeGlzID0gdGhpcy5zZXJpZXNWYWx1ZUF4aXMoc2VyaWVzKTtcbiAgICAgICAgY29uc3QgYXhpc0Nyb3NzaW5nVmFsdWUgPSB0aGlzLmNhdGVnb3J5QXhpc0Nyb3NzaW5nVmFsdWUodmFsdWVBeGlzKTtcblxuICAgICAgICByZXR1cm4gWyBheGlzQ3Jvc3NpbmdWYWx1ZSwgcG9pbnQudmFsdWUuY3VycmVudCB8fCBheGlzQ3Jvc3NpbmdWYWx1ZSBdO1xuICAgIH1cblxuICAgIGNyZWF0ZVBvaW50KGRhdGEsIGZpZWxkcykge1xuICAgICAgICBjb25zdCB7IGNhdGVnb3J5SXgsIGNhdGVnb3J5LCBzZXJpZXMsIHNlcmllc0l4IH0gPSBmaWVsZHM7XG4gICAgICAgIGNvbnN0IHsgb3B0aW9ucywgY2hpbGRyZW4gfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gZGF0YS52YWx1ZUZpZWxkcztcblxuICAgICAgICBsZXQgYnVsbGV0T3B0aW9ucyA9IGRlZXBFeHRlbmQoe1xuICAgICAgICAgICAgdmVydGljYWw6ICFvcHRpb25zLmludmVydEF4ZXMsXG4gICAgICAgICAgICBvdmVybGF5OiBzZXJpZXMub3ZlcmxheSxcbiAgICAgICAgICAgIGNhdGVnb3J5SXg6IGNhdGVnb3J5SXgsXG4gICAgICAgICAgICBpbnZlcnRBeGVzOiBvcHRpb25zLmludmVydEF4ZXNcbiAgICAgICAgfSwgc2VyaWVzKTtcblxuICAgICAgICBsZXQgY29sb3IgPSBkYXRhLmZpZWxkcy5jb2xvciB8fCBzZXJpZXMuY29sb3I7XG4gICAgICAgIGJ1bGxldE9wdGlvbnMgPSB0aGlzLmV2YWxQb2ludE9wdGlvbnMoXG4gICAgICAgICAgICBidWxsZXRPcHRpb25zLCB2YWx1ZSwgY2F0ZWdvcnksIGNhdGVnb3J5SXgsIHNlcmllcywgc2VyaWVzSXhcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAoaXNGdW5jdGlvbihzZXJpZXMuY29sb3IpKSB7XG4gICAgICAgICAgICBjb2xvciA9IGJ1bGxldE9wdGlvbnMuY29sb3I7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBidWxsZXQgPSBuZXcgQnVsbGV0KHZhbHVlLCBidWxsZXRPcHRpb25zKTtcbiAgICAgICAgYnVsbGV0LmNvbG9yID0gY29sb3I7XG5cbiAgICAgICAgbGV0IGNsdXN0ZXIgPSBjaGlsZHJlbltjYXRlZ29yeUl4XTtcbiAgICAgICAgaWYgKCFjbHVzdGVyKSB7XG4gICAgICAgICAgICBjbHVzdGVyID0gbmV3IENsdXN0ZXJMYXlvdXQoe1xuICAgICAgICAgICAgICAgIHZlcnRpY2FsOiBvcHRpb25zLmludmVydEF4ZXMsXG4gICAgICAgICAgICAgICAgZ2FwOiBvcHRpb25zLmdhcCxcbiAgICAgICAgICAgICAgICBzcGFjaW5nOiBvcHRpb25zLnNwYWNpbmcsXG4gICAgICAgICAgICAgICAgcnRsOiAhb3B0aW9ucy5pbnZlcnRBeGVzICYmICh0aGlzLmNoYXJ0U2VydmljZSB8fCB7fSkucnRsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuYXBwZW5kKGNsdXN0ZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgY2x1c3Rlci5hcHBlbmQoYnVsbGV0KTtcblxuICAgICAgICByZXR1cm4gYnVsbGV0O1xuICAgIH1cblxuICAgIHVwZGF0ZVJhbmdlKHZhbHVlLCBmaWVsZHMpIHtcbiAgICAgICAgY29uc3QgeyBjdXJyZW50LCB0YXJnZXQgfSA9IHZhbHVlO1xuICAgICAgICBjb25zdCBheGlzTmFtZSA9IGZpZWxkcy5zZXJpZXMuYXhpcztcbiAgICAgICAgbGV0IGF4aXNSYW5nZSA9IHRoaXMudmFsdWVBeGlzUmFuZ2VzW2F4aXNOYW1lXTtcblxuICAgICAgICBpZiAoZGVmaW5lZChjdXJyZW50KSAmJiAhaXNOYU4oY3VycmVudCkgJiYgZGVmaW5lZCh0YXJnZXQgJiYgIWlzTmFOKHRhcmdldCkpKSB7XG4gICAgICAgICAgICBheGlzUmFuZ2UgPSB0aGlzLnZhbHVlQXhpc1Jhbmdlc1theGlzTmFtZV0gPVxuICAgICAgICAgICAgICAgIGF4aXNSYW5nZSB8fCB7IG1pbjogTUFYX1ZBTFVFLCBtYXg6IE1JTl9WQUxVRSB9O1xuXG4gICAgICAgICAgICBheGlzUmFuZ2UubWluID0gTWF0aC5taW4oYXhpc1JhbmdlLm1pbiwgY3VycmVudCwgdGFyZ2V0KTtcbiAgICAgICAgICAgIGF4aXNSYW5nZS5tYXggPSBNYXRoLm1heChheGlzUmFuZ2UubWF4LCBjdXJyZW50LCB0YXJnZXQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9ybWF0UG9pbnRWYWx1ZShwb2ludCwgZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJ0U2VydmljZS5mb3JtYXQuYXV0byhmb3JtYXQsIHBvaW50LnZhbHVlLmN1cnJlbnQsIHBvaW50LnZhbHVlLnRhcmdldCk7XG4gICAgfVxuXG4gICAgcG9pbnRWYWx1ZShkYXRhKSB7XG4gICAgICAgIHJldHVybiBkYXRhLnZhbHVlRmllbGRzLmN1cnJlbnQ7XG4gICAgfVxuXG4gICAgYWJvdmVBeGlzKHBvaW50KSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gcG9pbnQudmFsdWUuY3VycmVudDtcblxuICAgICAgICByZXR1cm4gdmFsdWUgPiAwO1xuICAgIH1cblxuICAgIGNyZWF0ZUFuaW1hdGlvbigpIHtcbiAgICAgICAgY29uc3QgcG9pbnRzID0gdGhpcy5wb2ludHM7XG5cbiAgICAgICAgdGhpcy5fc2V0QW5pbWF0aW9uT3B0aW9ucygpO1xuXG4gICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IHBvaW50cy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgICAgICBjb25zdCBwb2ludCA9IHBvaW50c1tpZHhdO1xuICAgICAgICAgICAgcG9pbnQub3B0aW9ucy5hbmltYXRpb24gPSB0aGlzLm9wdGlvbnMuYW5pbWF0aW9uO1xuICAgICAgICAgICAgcG9pbnQuY3JlYXRlQW5pbWF0aW9uKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbkJ1bGxldENoYXJ0LnByb3RvdHlwZS5fc2V0QW5pbWF0aW9uT3B0aW9ucyA9IEJhckNoYXJ0LnByb3RvdHlwZS5fc2V0QW5pbWF0aW9uT3B0aW9ucztcblxuc2V0RGVmYXVsdE9wdGlvbnMoQnVsbGV0Q2hhcnQsIHtcbiAgICBhbmltYXRpb246IHtcbiAgICAgICAgdHlwZTogQkFSXG4gICAgfVxufSk7XG5cbmZ1bmN0aW9uIHdyYXBEYXRhKG9wdGlvbnMpIHtcbiAgICBjb25zdCBzZXJpZXMgPSBvcHRpb25zLnNlcmllcztcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VyaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHNlcmllc0l0ZW0gPSBzZXJpZXNbaV07XG4gICAgICAgIGNvbnN0IGRhdGEgPSBzZXJpZXNJdGVtLmRhdGE7XG4gICAgICAgIGlmIChkYXRhICYmICFpc0FycmF5KGRhdGFbMF0pICYmICFpc09iamVjdChkYXRhWzBdKSkge1xuICAgICAgICAgICAgc2VyaWVzSXRlbS5kYXRhID0gWyBkYXRhIF07XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEJ1bGxldENoYXJ0OyIsImltcG9ydCB7IENvbG9yIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWRyYXdpbmcnO1xuXG5pbXBvcnQgeyBDbGFzcywgZGVmaW5lZCwgZGVlcEV4dGVuZCwgc2V0RGVmYXVsdE9wdGlvbnMsIHZhbHVlT3JEZWZhdWx0LCBnZXRTcGFjaW5nLCBzdHlsZVZhbHVlIH0gZnJvbSAnLi4vLi4vY29tbW9uJztcbmltcG9ydCB7IFNIT1dfVE9PTFRJUCwgSElERV9UT09MVElQIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcblxuY2xhc3MgQmFzZVRvb2x0aXAgZXh0ZW5kcyBDbGFzcyB7XG4gICAgY29uc3RydWN0b3IoY2hhcnRTZXJ2aWNlLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5jaGFydFNlcnZpY2UgPSBjaGFydFNlcnZpY2U7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IGRlZXBFeHRlbmQoe30sIHRoaXMub3B0aW9ucywgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgZ2V0U3R5bGUob3B0aW9ucywgcG9pbnQpIHtcbiAgICAgICAgbGV0IHsgYmFja2dyb3VuZCwgYm9yZGVyOiB7IGNvbG9yOiBib3JkZXIgfSB9ID0gb3B0aW9ucztcblxuICAgICAgICBpZiAocG9pbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHBvaW50Q29sb3IgPSBwb2ludC5jb2xvciB8fCBwb2ludC5vcHRpb25zLmNvbG9yO1xuICAgICAgICAgICAgYmFja2dyb3VuZCA9IHZhbHVlT3JEZWZhdWx0KGJhY2tncm91bmQsIHBvaW50Q29sb3IpO1xuICAgICAgICAgICAgYm9yZGVyID0gdmFsdWVPckRlZmF1bHQoYm9yZGVyLCBwb2ludENvbG9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHBhZGRpbmcgPSBnZXRTcGFjaW5nKG9wdGlvbnMucGFkZGluZyB8fCB7fSwgXCJhdXRvXCIpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGJhY2tncm91bmQsXG4gICAgICAgICAgICBib3JkZXJDb2xvcjogYm9yZGVyLFxuICAgICAgICAgICAgZm9udDogb3B0aW9ucy5mb250LFxuICAgICAgICAgICAgY29sb3I6IG9wdGlvbnMuY29sb3IsXG4gICAgICAgICAgICBvcGFjaXR5OiBvcHRpb25zLm9wYWNpdHksXG4gICAgICAgICAgICBib3JkZXJXaWR0aDogc3R5bGVWYWx1ZShvcHRpb25zLmJvcmRlci53aWR0aCksXG4gICAgICAgICAgICBwYWRkaW5nVG9wOiBzdHlsZVZhbHVlKHBhZGRpbmcudG9wKSxcbiAgICAgICAgICAgIHBhZGRpbmdCb3R0b206IHN0eWxlVmFsdWUocGFkZGluZy5ib3R0b20pLFxuICAgICAgICAgICAgcGFkZGluZ0xlZnQ6IHN0eWxlVmFsdWUocGFkZGluZy5sZWZ0KSxcbiAgICAgICAgICAgIHBhZGRpbmdSaWdodDogc3R5bGVWYWx1ZShwYWRkaW5nLnJpZ2h0KVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHNob3cob3B0aW9ucywgdG9vbHRpcE9wdGlvbnMsIHBvaW50KSB7XG4gICAgICAgIG9wdGlvbnMuZm9ybWF0ID0gdG9vbHRpcE9wdGlvbnMuZm9ybWF0O1xuXG4gICAgICAgIGNvbnN0IHN0eWxlID0gdGhpcy5nZXRTdHlsZSh0b29sdGlwT3B0aW9ucywgcG9pbnQpO1xuICAgICAgICBvcHRpb25zLnN0eWxlID0gc3R5bGU7XG5cbiAgICAgICAgaWYgKCFkZWZpbmVkKHRvb2x0aXBPcHRpb25zLmNvbG9yKSAmJiBuZXcgQ29sb3Ioc3R5bGUuYmFja2dyb3VuZENvbG9yKS5wZXJjQnJpZ2h0bmVzcygpID4gMTgwKSB7XG4gICAgICAgICAgICBvcHRpb25zLmNsYXNzTmFtZSA9IFwiay1jaGFydC10b29sdGlwLWludmVyc2VcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2hhcnRTZXJ2aWNlLm5vdGlmeShTSE9XX1RPT0xUSVAsIG9wdGlvbnMpO1xuXG4gICAgICAgIHRoaXMudmlzaWJsZSA9IHRydWU7XG4gICAgfVxuXG4gICAgaGlkZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuY2hhcnRTZXJ2aWNlKSB7XG4gICAgICAgICAgICB0aGlzLmNoYXJ0U2VydmljZS5ub3RpZnkoSElERV9UT09MVElQKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudmlzaWJsZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmNoYXJ0U2VydmljZTtcbiAgICB9XG59XG5cbnNldERlZmF1bHRPcHRpb25zKEJhc2VUb29sdGlwLCB7XG4gICAgYm9yZGVyOiB7XG4gICAgICAgIHdpZHRoOiAxXG4gICAgfSxcbiAgICBvcGFjaXR5OiAxXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgQmFzZVRvb2x0aXA7XG4iLCJpbXBvcnQgQmFzZVRvb2x0aXAgZnJvbSAnLi4vdG9vbHRpcC9iYXNlLXRvb2x0aXAnO1xuXG5pbXBvcnQgeyBISURFX1RPT0xUSVAgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgVE9QLCBCT1RUT00sIExFRlQsIFJJR0hULCBDRU5URVIsIERBVEUgfSBmcm9tICcuLi8uLi9jb21tb24vY29uc3RhbnRzJztcbmltcG9ydCB7IHNldERlZmF1bHRPcHRpb25zIH0gZnJvbSAnLi4vLi4vY29tbW9uJztcblxuY2xhc3MgQ3Jvc3NoYWlyVG9vbHRpcCBleHRlbmRzIEJhc2VUb29sdGlwIHtcbiAgICBjb25zdHJ1Y3RvcihjaGFydFNlcnZpY2UsIGNyb3NzaGFpciwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihjaGFydFNlcnZpY2UsIG9wdGlvbnMpO1xuXG4gICAgICAgIHRoaXMuY3Jvc3NoYWlyID0gY3Jvc3NoYWlyO1xuICAgICAgICB0aGlzLmZvcm1hdFNlcnZpY2UgPSBjaGFydFNlcnZpY2UuZm9ybWF0O1xuICAgICAgICB0aGlzLmluaXRBeGlzTmFtZSgpO1xuICAgIH1cblxuICAgIGluaXRBeGlzTmFtZSgpIHtcbiAgICAgICAgY29uc3QgYXhpcyA9IHRoaXMuY3Jvc3NoYWlyLmF4aXM7XG4gICAgICAgIGNvbnN0IHBsb3RBcmVhID0gYXhpcy5wbG90QXJlYTtcbiAgICAgICAgbGV0IG5hbWU7XG4gICAgICAgIGlmIChwbG90QXJlYS5jYXRlZ29yeUF4aXMpIHtcbiAgICAgICAgICAgIG5hbWUgPSBheGlzLmdldENhdGVnb3J5ID8gXCJjYXRlZ29yeUF4aXNcIiA6IFwidmFsdWVBeGlzXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuYW1lID0gYXhpcy5vcHRpb25zLnZlcnRpY2FsID8gXCJ5QXhpc1wiIDogXCJ4QXhpc1wiO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYXhpc05hbWUgPSBuYW1lO1xuICAgIH1cblxuICAgIHNob3dBdChwb2ludCkge1xuICAgICAgICBjb25zdCB7IGNyb3NzaGFpcjogeyBheGlzIH0sIG9wdGlvbnMgfSA9IHRoaXM7XG4gICAgICAgIGxldCB2YWx1ZSA9IGF4aXNbb3B0aW9ucy5zdGlja3lNb2RlID8gXCJnZXRDYXRlZ29yeVwiIDogXCJnZXRWYWx1ZVwiXShwb2ludCk7XG4gICAgICAgIGxldCBmb3JtYXR0ZWRWYWx1ZSA9IHZhbHVlO1xuXG4gICAgICAgIGlmIChvcHRpb25zLmZvcm1hdCkge1xuICAgICAgICAgICAgZm9ybWF0dGVkVmFsdWUgPSB0aGlzLmZvcm1hdFNlcnZpY2UuYXV0byhvcHRpb25zLmZvcm1hdCwgdmFsdWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGF4aXMub3B0aW9ucy50eXBlID09PSBEQVRFKSB7XG4gICAgICAgICAgICBmb3JtYXR0ZWRWYWx1ZSA9IHRoaXMuZm9ybWF0U2VydmljZS5hdXRvKGF4aXMub3B0aW9ucy5sYWJlbHMuZGF0ZUZvcm1hdHNbYXhpcy5vcHRpb25zLmJhc2VVbml0XSwgdmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zaG93KHtcbiAgICAgICAgICAgIHBvaW50OiBwb2ludCxcbiAgICAgICAgICAgIGFuY2hvcjogdGhpcy5nZXRBbmNob3IoKSxcbiAgICAgICAgICAgIGNyb3NzaGFpcjogdGhpcy5jcm9zc2hhaXIsXG4gICAgICAgICAgICB2YWx1ZTogZm9ybWF0dGVkVmFsdWUsXG4gICAgICAgICAgICBheGlzTmFtZTogdGhpcy5heGlzTmFtZSxcbiAgICAgICAgICAgIGF4aXNJbmRleDogdGhpcy5jcm9zc2hhaXIuYXhpcy5heGlzSW5kZXhcbiAgICAgICAgfSwgdGhpcy5vcHRpb25zKTtcbiAgICB9XG5cbiAgICBoaWRlKCkge1xuICAgICAgICB0aGlzLmNoYXJ0U2VydmljZS5ub3RpZnkoSElERV9UT09MVElQLCB7XG4gICAgICAgICAgICBjcm9zc2hhaXI6IHRoaXMuY3Jvc3NoYWlyLFxuICAgICAgICAgICAgYXhpc05hbWU6IHRoaXMuYXhpc05hbWUsXG4gICAgICAgICAgICBheGlzSW5kZXg6IHRoaXMuY3Jvc3NoYWlyLmF4aXMuYXhpc0luZGV4XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGdldEFuY2hvcigpIHtcbiAgICAgICAgY29uc3QgeyBjcm9zc2hhaXIsIG9wdGlvbnM6IHsgcG9zaXRpb24sIHBhZGRpbmcgfSB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgdmVydGljYWwgPSAhY3Jvc3NoYWlyLmF4aXMub3B0aW9ucy52ZXJ0aWNhbDtcbiAgICAgICAgY29uc3QgbGluZUJveCA9IGNyb3NzaGFpci5saW5lLmJib3goKTtcbiAgICAgICAgbGV0IGhvcml6b250YWxBbGlnbiwgdmVydGljYWxBbGlnbiwgcG9pbnQ7XG5cbiAgICAgICAgaWYgKHZlcnRpY2FsKSB7XG4gICAgICAgICAgICBob3Jpem9udGFsQWxpZ24gPSBDRU5URVI7XG4gICAgICAgICAgICBpZiAocG9zaXRpb24gPT09IEJPVFRPTSkge1xuICAgICAgICAgICAgICAgIHZlcnRpY2FsQWxpZ24gPSBUT1A7XG4gICAgICAgICAgICAgICAgcG9pbnQgPSBsaW5lQm94LmJvdHRvbUxlZnQoKS50cmFuc2xhdGUoMCwgcGFkZGluZyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZlcnRpY2FsQWxpZ24gPSBCT1RUT007XG4gICAgICAgICAgICAgICAgcG9pbnQgPSBsaW5lQm94LnRvcExlZnQoKS50cmFuc2xhdGUoMCwgLXBhZGRpbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmVydGljYWxBbGlnbiA9IENFTlRFUjtcbiAgICAgICAgICAgIGlmIChwb3NpdGlvbiA9PT0gTEVGVCkge1xuICAgICAgICAgICAgICAgIGhvcml6b250YWxBbGlnbiA9IFJJR0hUO1xuICAgICAgICAgICAgICAgIHBvaW50ID0gbGluZUJveC50b3BMZWZ0KCkudHJhbnNsYXRlKC1wYWRkaW5nLCAwKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaG9yaXpvbnRhbEFsaWduID0gTEVGVDtcbiAgICAgICAgICAgICAgICBwb2ludCA9IGxpbmVCb3gudG9wUmlnaHQoKS50cmFuc2xhdGUocGFkZGluZywgMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcG9pbnQ6IHBvaW50LFxuICAgICAgICAgICAgYWxpZ246IHtcbiAgICAgICAgICAgICAgICBob3Jpem9udGFsOiBob3Jpem9udGFsQWxpZ24sXG4gICAgICAgICAgICAgICAgdmVydGljYWw6IHZlcnRpY2FsQWxpZ25cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG59XG5cbnNldERlZmF1bHRPcHRpb25zKENyb3NzaGFpclRvb2x0aXAsIHtcbiAgICBwYWRkaW5nOiAxMFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IENyb3NzaGFpclRvb2x0aXA7XG5cbiIsImltcG9ydCB7IGRyYXdpbmcgYXMgZHJhdywgZ2VvbWV0cnkgYXMgZ2VvbSB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1kcmF3aW5nJztcblxuaW1wb3J0IHsgQ2hhcnRFbGVtZW50LCBDYXRlZ29yeUF4aXMgfSBmcm9tICcuLi8uLi9jb3JlJztcbmltcG9ydCBDcm9zc2hhaXJUb29sdGlwIGZyb20gJy4vY3Jvc3NoYWlyLXRvb2x0aXAnO1xuXG5pbXBvcnQgeyBCTEFDSywgWCwgWSB9IGZyb20gJy4uLy4uL2NvbW1vbi9jb25zdGFudHMnO1xuaW1wb3J0IHsgZGVlcEV4dGVuZCwgc2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tICcuLi8uLi9jb21tb24nO1xuXG5jbGFzcyBDcm9zc2hhaXIgZXh0ZW5kcyBDaGFydEVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKGNoYXJ0U2VydmljZSwgYXhpcywgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcblxuICAgICAgICB0aGlzLmF4aXMgPSBheGlzO1xuICAgICAgICB0aGlzLnN0aWNreU1vZGUgPSBheGlzIGluc3RhbmNlb2YgQ2F0ZWdvcnlBeGlzO1xuXG4gICAgICAgIGNvbnN0IHRvb2x0aXBPcHRpb25zID0gdGhpcy5vcHRpb25zLnRvb2x0aXA7XG5cbiAgICAgICAgaWYgKHRvb2x0aXBPcHRpb25zLnZpc2libGUpIHtcbiAgICAgICAgICAgIHRoaXMudG9vbHRpcCA9IG5ldyBDcm9zc2hhaXJUb29sdGlwKGNoYXJ0U2VydmljZSwgdGhpcyxcbiAgICAgICAgICAgICAgICBkZWVwRXh0ZW5kKHt9LCB0b29sdGlwT3B0aW9ucywgeyBzdGlja3lNb2RlOiB0aGlzLnN0aWNreU1vZGUgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzaG93QXQocG9pbnQpIHtcbiAgICAgICAgdGhpcy5wb2ludCA9IHBvaW50O1xuICAgICAgICB0aGlzLm1vdmVMaW5lKCk7XG4gICAgICAgIHRoaXMubGluZS52aXNpYmxlKHRydWUpO1xuXG4gICAgICAgIGlmICh0aGlzLnRvb2x0aXApIHtcbiAgICAgICAgICAgIHRoaXMudG9vbHRpcC5zaG93QXQocG9pbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGlkZSgpIHtcbiAgICAgICAgdGhpcy5saW5lLnZpc2libGUoZmFsc2UpO1xuXG4gICAgICAgIGlmICh0aGlzLnRvb2x0aXApIHtcbiAgICAgICAgICAgIHRoaXMudG9vbHRpcC5oaWRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBtb3ZlTGluZSgpIHtcbiAgICAgICAgY29uc3QgeyBheGlzLCBwb2ludCB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgdmVydGljYWwgPSBheGlzLm9wdGlvbnMudmVydGljYWw7XG4gICAgICAgIGNvbnN0IGJveCA9IHRoaXMuZ2V0Qm94KCk7XG4gICAgICAgIGNvbnN0IGRpbSA9IHZlcnRpY2FsID8gWSA6IFg7XG4gICAgICAgIGNvbnN0IGxpbmVTdGFydCA9IG5ldyBnZW9tLlBvaW50KGJveC54MSwgYm94LnkxKTtcbiAgICAgICAgbGV0IGxpbmVFbmQ7XG5cbiAgICAgICAgaWYgKHZlcnRpY2FsKSB7XG4gICAgICAgICAgICBsaW5lRW5kID0gbmV3IGdlb20uUG9pbnQoYm94LngyLCBib3gueTEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGluZUVuZCA9IG5ldyBnZW9tLlBvaW50KGJveC54MSwgYm94LnkyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwb2ludCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuc3RpY2t5TW9kZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNsb3QgPSBheGlzLmdldFNsb3QoYXhpcy5wb2ludENhdGVnb3J5SW5kZXgocG9pbnQpKTtcbiAgICAgICAgICAgICAgICBsaW5lU3RhcnRbZGltXSA9IGxpbmVFbmRbZGltXSA9IHNsb3QuY2VudGVyKClbZGltXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbGluZVN0YXJ0W2RpbV0gPSBsaW5lRW5kW2RpbV0gPSBwb2ludFtkaW1dO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5ib3ggPSBib3g7XG5cbiAgICAgICAgdGhpcy5saW5lLm1vdmVUbyhsaW5lU3RhcnQpLmxpbmVUbyhsaW5lRW5kKTtcbiAgICB9XG5cbiAgICBnZXRCb3goKSB7XG4gICAgICAgIGNvbnN0IGF4aXMgPSB0aGlzLmF4aXM7XG4gICAgICAgIGNvbnN0IGF4ZXMgPSBheGlzLnBhbmUuYXhlcztcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gYXhlcy5sZW5ndGg7XG4gICAgICAgIGNvbnN0IHZlcnRpY2FsID0gYXhpcy5vcHRpb25zLnZlcnRpY2FsO1xuICAgICAgICBjb25zdCBib3ggPSBheGlzLmxpbmVCb3goKS5jbG9uZSgpO1xuICAgICAgICBjb25zdCBkaW0gPSB2ZXJ0aWNhbCA/IFggOiBZO1xuICAgICAgICBsZXQgYXhpc0xpbmVCb3g7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudEF4aXMgPSBheGVzW2ldO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRBeGlzLm9wdGlvbnMudmVydGljYWwgIT09IHZlcnRpY2FsKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFheGlzTGluZUJveCkge1xuICAgICAgICAgICAgICAgICAgICBheGlzTGluZUJveCA9IGN1cnJlbnRBeGlzLmxpbmVCb3goKS5jbG9uZSgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGF4aXNMaW5lQm94LndyYXAoY3VycmVudEF4aXMubGluZUJveCgpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBib3hbZGltICsgMV0gPSBheGlzTGluZUJveFtkaW0gKyAxXTtcbiAgICAgICAgYm94W2RpbSArIDJdID0gYXhpc0xpbmVCb3hbZGltICsgMl07XG5cbiAgICAgICAgcmV0dXJuIGJveDtcbiAgICB9XG5cbiAgICBjcmVhdGVWaXN1YWwoKSB7XG4gICAgICAgIHN1cGVyLmNyZWF0ZVZpc3VhbCgpO1xuXG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIHRoaXMubGluZSA9IG5ldyBkcmF3LlBhdGgoe1xuICAgICAgICAgICAgc3Ryb2tlOiB7XG4gICAgICAgICAgICAgICAgY29sb3I6IG9wdGlvbnMuY29sb3IsXG4gICAgICAgICAgICAgICAgd2lkdGg6IG9wdGlvbnMud2lkdGgsXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogb3B0aW9ucy5vcGFjaXR5LFxuICAgICAgICAgICAgICAgIGRhc2hUeXBlOiBvcHRpb25zLmRhc2hUeXBlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmlzaWJsZTogZmFsc2VcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5tb3ZlTGluZSgpO1xuICAgICAgICB0aGlzLnZpc3VhbC5hcHBlbmQodGhpcy5saW5lKTtcbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBpZiAodGhpcy50b29sdGlwKSB7XG4gICAgICAgICAgICB0aGlzLnRvb2x0aXAuZGVzdHJveSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3VwZXIuZGVzdHJveSgpO1xuICAgIH1cbn1cblxuc2V0RGVmYXVsdE9wdGlvbnMoQ3Jvc3NoYWlyLCB7XG4gICAgY29sb3I6IEJMQUNLLFxuICAgIHdpZHRoOiAyLFxuICAgIHpJbmRleDogLTEsXG4gICAgdG9vbHRpcDoge1xuICAgICAgICB2aXNpYmxlOiBmYWxzZVxuICAgIH1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBDcm9zc2hhaXI7IiwiaW1wb3J0IHsgZHJhd2luZyBhcyBkcmF3IH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWRyYXdpbmcnO1xuaW1wb3J0IHsgYWxpZ25QYXRoVG9QaXhlbCB9IGZyb20gJy4uL2NvbW1vbic7XG5cbmltcG9ydCB7IENoYXJ0RWxlbWVudCB9IGZyb20gJy4uL2NvcmUnO1xuXG5jbGFzcyBDaGFydENvbnRhaW5lciBleHRlbmRzIENoYXJ0RWxlbWVudCB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucywgcGFuZSkge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICAgICAgdGhpcy5wYW5lID0gcGFuZTtcbiAgICB9XG5cbiAgICBzaG91bGRDbGlwKCkge1xuICAgICAgICBjb25zdCBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IGNoaWxkcmVuLmxlbmd0aDtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoY2hpbGRyZW5baV0ub3B0aW9ucy5jbGlwID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIF9jbGlwQm94KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYW5lLmNoYXJ0c0JveCgpO1xuICAgIH1cblxuICAgIGNyZWF0ZVZpc3VhbCgpIHtcbiAgICAgICAgdGhpcy52aXN1YWwgPSBuZXcgZHJhdy5Hcm91cCh7XG4gICAgICAgICAgICB6SW5kZXg6IDBcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHRoaXMuc2hvdWxkQ2xpcCgpKSB7XG4gICAgICAgICAgICBjb25zdCBjbGlwQm94ID0gdGhpcy5jbGlwQm94ID0gdGhpcy5fY2xpcEJveCgpO1xuICAgICAgICAgICAgY29uc3QgY2xpcFJlY3QgPSBjbGlwQm94LnRvUmVjdCgpO1xuICAgICAgICAgICAgY29uc3QgY2xpcFBhdGggPSBkcmF3LlBhdGguZnJvbVJlY3QoY2xpcFJlY3QpO1xuICAgICAgICAgICAgYWxpZ25QYXRoVG9QaXhlbChjbGlwUGF0aCk7XG5cbiAgICAgICAgICAgIHRoaXMudmlzdWFsLmNsaXAoY2xpcFBhdGgpO1xuICAgICAgICAgICAgdGhpcy51bmNsaXBMYWJlbHMoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YWNrUm9vdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgdW5jbGlwTGFiZWxzKCkge1xuICAgICAgICBjb25zdCB7IGNoaWxkcmVuOiBjaGFydHMsIGNsaXBCb3ggfSA9IHRoaXM7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHBvaW50cyA9IGNoYXJ0c1tpXS5wb2ludHMgfHwge307XG4gICAgICAgICAgICBjb25zdCBsZW5ndGggPSBwb2ludHMubGVuZ3RoO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcG9pbnQgPSBwb2ludHNbal07XG4gICAgICAgICAgICAgICAgaWYgKHBvaW50ICYmIHBvaW50LnZpc2libGUgIT09IGZhbHNlICYmIHBvaW50Lm92ZXJsYXBzQm94ICYmIHBvaW50Lm92ZXJsYXBzQm94KGNsaXBCb3gpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwb2ludC51bmNsaXBFbGVtZW50cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9pbnQudW5jbGlwRWxlbWVudHMoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgbGFiZWwsIG5vdGUgfSA9IHBvaW50O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGFiZWwgJiYgbGFiZWwub3B0aW9ucy52aXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxhYmVsLmFsaWduVG9DbGlwQm94KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsLmFsaWduVG9DbGlwQm94KGNsaXBCb3gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbC5vcHRpb25zLm5vY2xpcCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub3RlICYmIG5vdGUub3B0aW9ucy52aXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90ZS5vcHRpb25zLm5vY2xpcCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBzdXBlci5kZXN0cm95KCk7XG5cbiAgICAgICAgZGVsZXRlIHRoaXMucGFyZW50O1xuICAgIH1cbn1cblxuQ2hhcnRDb250YWluZXIucHJvdG90eXBlLmlzU3RhY2tSb290ID0gdHJ1ZTtcblxuZXhwb3J0IGRlZmF1bHQgQ2hhcnRDb250YWluZXI7IiwiaW1wb3J0IHsgQ2hhcnRFbGVtZW50LCBCb3hFbGVtZW50LCBUaXRsZSwgQm94IH0gZnJvbSAnLi4vY29yZSc7XG5pbXBvcnQgeyBDaGFydFBhbmUgfSBmcm9tICcuL2FwaS1lbGVtZW50cyc7XG5pbXBvcnQgQ2hhcnRDb250YWluZXIgZnJvbSAnLi9jaGFydC1jb250YWluZXInO1xuXG5pbXBvcnQgeyBQQU5FX1JFTkRFUiB9IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCB7IFRPUCwgTEVGVCwgWCwgWSB9IGZyb20gJy4uL2NvbW1vbi9jb25zdGFudHMnO1xuaW1wb3J0IHsgYXBwZW5kLCBkZWVwRXh0ZW5kLCBpc09iamVjdCwgbGFzdCwgc2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tICcuLi9jb21tb24nO1xuXG5jbGFzcyBQYW5lIGV4dGVuZHMgQm94RWxlbWVudCB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcblxuICAgICAgICB0aGlzLmlkID0gcGFuZUlEKCk7XG5cbiAgICAgICAgdGhpcy5jcmVhdGVUaXRsZSgpO1xuXG4gICAgICAgIHRoaXMuY29udGVudCA9IG5ldyBDaGFydEVsZW1lbnQoKTtcblxuICAgICAgICB0aGlzLmNoYXJ0Q29udGFpbmVyID0gbmV3IENoYXJ0Q29udGFpbmVyKHt9LCB0aGlzKTtcbiAgICAgICAgdGhpcy5hcHBlbmQodGhpcy5jb250ZW50KTtcblxuICAgICAgICB0aGlzLmF4ZXMgPSBbXTtcbiAgICAgICAgdGhpcy5jaGFydHMgPSBbXTtcbiAgICB9XG5cbiAgICBjcmVhdGVUaXRsZSgpIHtcbiAgICAgICAgbGV0IHRpdGxlT3B0aW9ucyA9IHRoaXMub3B0aW9ucy50aXRsZTtcbiAgICAgICAgaWYgKGlzT2JqZWN0KHRpdGxlT3B0aW9ucykpIHtcbiAgICAgICAgICAgIHRpdGxlT3B0aW9ucyA9IGRlZXBFeHRlbmQoe30sIHRpdGxlT3B0aW9ucywge1xuICAgICAgICAgICAgICAgIGFsaWduOiB0aXRsZU9wdGlvbnMucG9zaXRpb24sXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IFRPUFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRpdGxlID0gVGl0bGUuYnVpbGRUaXRsZSh0aXRsZU9wdGlvbnMsIHRoaXMsIFBhbmUucHJvdG90eXBlLm9wdGlvbnMudGl0bGUpO1xuICAgIH1cblxuICAgIGFwcGVuZEF4aXMoYXhpcykge1xuICAgICAgICB0aGlzLmNvbnRlbnQuYXBwZW5kKGF4aXMpO1xuICAgICAgICB0aGlzLmF4ZXMucHVzaChheGlzKTtcbiAgICAgICAgYXhpcy5wYW5lID0gdGhpcztcbiAgICB9XG5cbiAgICBhcHBlbmRBeGlzQXQoYXhpcywgcG9zKSB7XG4gICAgICAgIHRoaXMuY29udGVudC5hcHBlbmQoYXhpcyk7XG4gICAgICAgIHRoaXMuYXhlcy5zcGxpY2UocG9zLCAwLCBheGlzKTtcbiAgICAgICAgYXhpcy5wYW5lID0gdGhpcztcbiAgICB9XG5cbiAgICBhcHBlbmRDaGFydChjaGFydCkge1xuICAgICAgICBpZiAodGhpcy5jaGFydENvbnRhaW5lci5wYXJlbnQgIT09IHRoaXMuY29udGVudCkge1xuICAgICAgICAgICAgdGhpcy5jb250ZW50LmFwcGVuZCh0aGlzLmNoYXJ0Q29udGFpbmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2hhcnRzLnB1c2goY2hhcnQpO1xuICAgICAgICB0aGlzLmNoYXJ0Q29udGFpbmVyLmFwcGVuZChjaGFydCk7XG4gICAgICAgIGNoYXJ0LnBhbmUgPSB0aGlzO1xuICAgIH1cblxuICAgIGVtcHR5KCkge1xuICAgICAgICBjb25zdCBwbG90QXJlYSA9IHRoaXMucGFyZW50O1xuXG4gICAgICAgIGlmIChwbG90QXJlYSkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmF4ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBwbG90QXJlYS5yZW1vdmVBeGlzKHRoaXMuYXhlc1tpXSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jaGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBwbG90QXJlYS5yZW1vdmVDaGFydCh0aGlzLmNoYXJ0c1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmF4ZXMgPSBbXTtcbiAgICAgICAgdGhpcy5jaGFydHMgPSBbXTtcblxuICAgICAgICB0aGlzLmNvbnRlbnQuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLmNvbnRlbnQuY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgdGhpcy5jaGFydENvbnRhaW5lci5jaGlsZHJlbiA9IFtdO1xuICAgIH1cblxuICAgIHJlZmxvdyh0YXJnZXRCb3gpIHtcbiAgICAgICAgLy8gQ29udGVudCAoc3VjaCBhcyBjaGFydHMpIGlzIHJlbmRlcmVkLCBidXQgZXhjbHVkZWQgZnJvbSByZWZsb3dzXG4gICAgICAgIGxldCBjb250ZW50O1xuICAgICAgICBpZiAobGFzdCh0aGlzLmNoaWxkcmVuKSA9PT0gdGhpcy5jb250ZW50KSB7XG4gICAgICAgICAgICBjb250ZW50ID0gdGhpcy5jaGlsZHJlbi5wb3AoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN1cGVyLnJlZmxvdyh0YXJnZXRCb3gpO1xuXG4gICAgICAgIGlmIChjb250ZW50KSB7XG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2goY29udGVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy50aXRsZSkge1xuICAgICAgICAgICAgdGhpcy5jb250ZW50Qm94LnkxICs9IHRoaXMudGl0bGUuYm94LmhlaWdodCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmlzdWFsU3R5bGUoKSB7XG4gICAgICAgIGNvbnN0IHN0eWxlID0gc3VwZXIudmlzdWFsU3R5bGUoKTtcbiAgICAgICAgc3R5bGUuekluZGV4ID0gLTEwO1xuXG4gICAgICAgIHJldHVybiBzdHlsZTtcbiAgICB9XG5cbiAgICByZW5kZXJDb21wbGV0ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy52aXNpYmxlKSB7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUdyaWRMaW5lcygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhY2tSb290KCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBjbGlwUm9vdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgY3JlYXRlR3JpZExpbmVzKCkge1xuICAgICAgICBjb25zdCBheGVzID0gdGhpcy5heGVzO1xuICAgICAgICBjb25zdCBhbGxBeGVzID0gYXhlcy5jb25jYXQodGhpcy5wYXJlbnQuYXhlcyk7XG4gICAgICAgIGNvbnN0IHZHcmlkTGluZXMgPSBbXTtcbiAgICAgICAgY29uc3QgaEdyaWRMaW5lcyA9IFtdO1xuXG4gICAgICAgIC8vIFRPRE9cbiAgICAgICAgLy8gSXMgZnVsbCBjb21iaW5hdGlvbiByZWFsbHkgbmVjZXNzYXJ5P1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGF4ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGF4aXMgPSBheGVzW2ldO1xuICAgICAgICAgICAgY29uc3QgdmVydGljYWwgPSBheGlzLm9wdGlvbnMudmVydGljYWw7XG4gICAgICAgICAgICBjb25zdCBncmlkTGluZXMgPSB2ZXJ0aWNhbCA/IHZHcmlkTGluZXMgOiBoR3JpZExpbmVzO1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBhbGxBeGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGdyaWRMaW5lcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYWx0QXhpcyA9IGFsbEF4ZXNbal07XG4gICAgICAgICAgICAgICAgICAgIGlmICh2ZXJ0aWNhbCAhPT0gYWx0QXhpcy5vcHRpb25zLnZlcnRpY2FsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmQoZ3JpZExpbmVzLCBheGlzLmNyZWF0ZUdyaWRMaW5lcyhhbHRBeGlzKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZWZyZXNoKCkge1xuICAgICAgICB0aGlzLnZpc3VhbC5jbGVhcigpO1xuXG4gICAgICAgIHRoaXMuY29udGVudC5wYXJlbnQgPSBudWxsO1xuICAgICAgICB0aGlzLmNvbnRlbnQuY3JlYXRlR3JhZGllbnQgPSB0aGlzLmNyZWF0ZUdyYWRpZW50LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuY29udGVudC5yZW5kZXJWaXN1YWwoKTtcbiAgICAgICAgdGhpcy5jb250ZW50LnBhcmVudCA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHRoaXMudGl0bGUpIHtcbiAgICAgICAgICAgIHRoaXMudmlzdWFsLmFwcGVuZCh0aGlzLnRpdGxlLnZpc3VhbCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnZpc3VhbC5hcHBlbmQodGhpcy5jb250ZW50LnZpc3VhbCk7XG5cbiAgICAgICAgdGhpcy5yZW5kZXJDb21wbGV0ZSgpO1xuICAgICAgICB0aGlzLm5vdGlmeVJlbmRlcigpO1xuICAgIH1cblxuICAgIGNoYXJ0c0JveCgpIHtcbiAgICAgICAgY29uc3QgYXhlcyA9IHRoaXMuYXhlcztcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gYXhlcy5sZW5ndGg7XG4gICAgICAgIGNvbnN0IGNoYXJ0c0JveCA9IG5ldyBCb3goKTtcblxuICAgICAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBsZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgICAgICBjb25zdCBheGlzID0gYXhlc1tpZHhdO1xuICAgICAgICAgICAgY29uc3QgYXhpc1ZhbHVlRmllbGQgPSBheGlzLm9wdGlvbnMudmVydGljYWwgPyBZIDogWDtcbiAgICAgICAgICAgIGNvbnN0IGxpbmVCb3ggPSBheGlzLmxpbmVCb3goKTtcbiAgICAgICAgICAgIGNoYXJ0c0JveFtheGlzVmFsdWVGaWVsZCArIDFdID0gbGluZUJveFtheGlzVmFsdWVGaWVsZCArIDFdO1xuICAgICAgICAgICAgY2hhcnRzQm94W2F4aXNWYWx1ZUZpZWxkICsgMl0gPSBsaW5lQm94W2F4aXNWYWx1ZUZpZWxkICsgMl07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2hhcnRzQm94LngyID09PSAwKSB7XG4gICAgICAgICAgICBjb25zdCBhbGxBeGVzID0gdGhpcy5wYXJlbnQuYXhlcztcbiAgICAgICAgICAgIGNvbnN0IGxlbmd0aCA9IGFsbEF4ZXMubGVuZ3RoO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBsZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXhpcyA9IGFsbEF4ZXNbaWR4XTtcbiAgICAgICAgICAgICAgICBpZiAoIWF4aXMub3B0aW9ucy52ZXJ0aWNhbCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsaW5lQm94ID0gYXhpcy5saW5lQm94KCk7XG4gICAgICAgICAgICAgICAgICAgIGNoYXJ0c0JveC54MSA9IGxpbmVCb3gueDE7XG4gICAgICAgICAgICAgICAgICAgIGNoYXJ0c0JveC54MiA9IGxpbmVCb3gueDI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjaGFydHNCb3g7XG4gICAgfVxuXG4gICAgY2xpcEJveCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcnRDb250YWluZXIuY2xpcEJveDtcbiAgICB9XG5cbiAgICBub3RpZnlSZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHNlcnZpY2UgPSB0aGlzLmdldFNlcnZpY2UoKTtcbiAgICAgICAgaWYgKHNlcnZpY2UpIHtcbiAgICAgICAgICAgIHNlcnZpY2Uubm90aWZ5KFBBTkVfUkVOREVSLCB7XG4gICAgICAgICAgICAgICAgcGFuZTogbmV3IENoYXJ0UGFuZSh0aGlzKSxcbiAgICAgICAgICAgICAgICBpbmRleDogdGhpcy5wYW5lSW5kZXgsXG4gICAgICAgICAgICAgICAgbmFtZTogdGhpcy5vcHRpb25zLm5hbWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5sZXQgSUQgPSAxO1xuXG5mdW5jdGlvbiBwYW5lSUQoKSB7XG4gICAgcmV0dXJuIFwicGFuZVwiICsgSUQrKztcbn1cblxuUGFuZS5wcm90b3R5cGUuaXNTdGFja1Jvb3QgPSB0cnVlO1xuXG5zZXREZWZhdWx0T3B0aW9ucyhQYW5lLCB7XG4gICAgekluZGV4OiAtMSxcbiAgICBzaHJpbmtUb0ZpdDogdHJ1ZSxcbiAgICB0aXRsZToge1xuICAgICAgICBhbGlnbjogTEVGVFxuICAgIH0sXG4gICAgdmlzaWJsZTogdHJ1ZVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IFBhbmU7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhcHBlbmRJZk5vdE51bGwoYXJyYXksIGVsZW1lbnQpIHtcbiAgICBpZiAoZWxlbWVudCAhPT0gbnVsbCkge1xuICAgICAgICBhcnJheS5wdXNoKGVsZW1lbnQpO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBkZWZpbmVkIH0gZnJvbSAnLi4vLi4vY29tbW9uJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2VnbWVudFZpc2libGUoc2VyaWVzLCBmaWVsZHMsIGluZGV4KSB7XG4gICAgY29uc3QgdmlzaWJsZSA9IGZpZWxkcy52aXNpYmxlO1xuICAgIGlmIChkZWZpbmVkKHZpc2libGUpKSB7XG4gICAgICAgIHJldHVybiB2aXNpYmxlO1xuICAgIH1cblxuICAgIGNvbnN0IHBvaW50VmlzaWJpbGl0eSA9IHNlcmllcy5wb2ludFZpc2liaWxpdHk7XG4gICAgaWYgKHBvaW50VmlzaWJpbGl0eSkge1xuICAgICAgICByZXR1cm4gcG9pbnRWaXNpYmlsaXR5W2luZGV4XTtcbiAgICB9XG59XG5cbiIsImltcG9ydCB7IGlzTnVtYmVyLCBpc1N0cmluZyB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5pbXBvcnQgU2VyaWVzQmluZGVyIGZyb20gJy4uL3Nlcmllcy1iaW5kZXInO1xuaW1wb3J0IHNlZ21lbnRWaXNpYmxlIGZyb20gJy4vc2VnbWVudC12aXNpYmxlJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYmluZFNlZ21lbnRzKHNlcmllcykge1xuICAgIGNvbnN0IGRhdGEgPSBzZXJpZXMuZGF0YTtcbiAgICBjb25zdCBwb2ludHMgPSBbXTtcbiAgICBsZXQgc3VtID0gMDtcbiAgICBsZXQgY291bnQgPSAwO1xuXG4gICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgZGF0YS5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgIGNvbnN0IHBvaW50RGF0YSA9IFNlcmllc0JpbmRlci5jdXJyZW50LmJpbmRQb2ludChzZXJpZXMsIGlkeCk7XG4gICAgICAgIGxldCB2YWx1ZSA9IHBvaW50RGF0YS52YWx1ZUZpZWxkcy52YWx1ZTtcblxuXG4gICAgICAgIGlmIChpc1N0cmluZyh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHZhbHVlID0gcGFyc2VGbG9hdCh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNOdW1iZXIodmFsdWUpKSB7XG4gICAgICAgICAgICBwb2ludERhdGEudmlzaWJsZSA9IHNlZ21lbnRWaXNpYmxlKHNlcmllcywgcG9pbnREYXRhLmZpZWxkcywgaWR4KSAhPT0gZmFsc2U7XG5cbiAgICAgICAgICAgIHBvaW50RGF0YS52YWx1ZSA9IE1hdGguYWJzKHZhbHVlKTtcbiAgICAgICAgICAgIHBvaW50cy5wdXNoKHBvaW50RGF0YSk7XG5cbiAgICAgICAgICAgIGlmIChwb2ludERhdGEudmlzaWJsZSkge1xuICAgICAgICAgICAgICAgIHN1bSArPSBwb2ludERhdGEudmFsdWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGNvdW50Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwb2ludHMucHVzaChudWxsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHRvdGFsOiBzdW0sXG4gICAgICAgIHBvaW50czogcG9pbnRzLFxuICAgICAgICBjb3VudDogY291bnRcbiAgICB9O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVxdWFsc0lnbm9yZUNhc2UoYSwgYikge1xuICAgIGlmIChhICYmIGIpIHtcbiAgICAgICAgcmV0dXJuIGEudG9Mb3dlckNhc2UoKSA9PT0gYi50b0xvd2VyQ2FzZSgpO1xuICAgIH1cblxuICAgIHJldHVybiBhID09PSBiO1xufSIsImltcG9ydCB7IGluQXJyYXkgfSBmcm9tICcuLi8uLi9jb21tb24nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmaWx0ZXJTZXJpZXNCeVR5cGUoc2VyaWVzLCB0eXBlcykge1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuXG4gICAgY29uc3Qgc2VyaWVzVHlwZXMgPSBbXS5jb25jYXQodHlwZXMpO1xuICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IHNlcmllcy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRTZXJpZXMgPSBzZXJpZXNbaWR4XTtcbiAgICAgICAgaWYgKGluQXJyYXkoY3VycmVudFNlcmllcy50eXBlLCBzZXJpZXNUeXBlcykpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGN1cnJlbnRTZXJpZXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn0iLCJpbXBvcnQgeyBwYXJzZURhdGUgfSBmcm9tICcuLi8uLi9kYXRlLXV0aWxzJztcbmltcG9ydCB7IGdldHRlciB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldERhdGVGaWVsZChmaWVsZCwgcm93LCBpbnRsU2VydmljZSkge1xuICAgIGlmIChyb3cgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHJvdztcbiAgICB9XG5cbiAgICBjb25zdCBrZXkgPSBcIl9kYXRlX1wiICsgZmllbGQ7XG4gICAgbGV0IHZhbHVlID0gcm93W2tleV07XG5cbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHZhbHVlID0gcGFyc2VEYXRlKGludGxTZXJ2aWNlLCBnZXR0ZXIoZmllbGQsIHRydWUpKHJvdykpO1xuICAgICAgICByb3dba2V5XSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbn0iLCJpbXBvcnQgZXF1YWxzSWdub3JlQ2FzZSBmcm9tICcuL2VxdWFscy1pZ25vcmUtY2FzZSc7XG5cbmltcG9ydCB7IERBVEUgfSBmcm9tICcuLi8uLi9jb21tb24vY29uc3RhbnRzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNEYXRlQXhpcyhheGlzT3B0aW9ucywgc2FtcGxlQ2F0ZWdvcnkpIHtcbiAgICBjb25zdCB0eXBlID0gYXhpc09wdGlvbnMudHlwZTtcbiAgICBjb25zdCBkYXRlQ2F0ZWdvcnkgPSBzYW1wbGVDYXRlZ29yeSBpbnN0YW5jZW9mIERhdGU7XG5cbiAgICByZXR1cm4gKCF0eXBlICYmIGRhdGVDYXRlZ29yeSkgfHwgZXF1YWxzSWdub3JlQ2FzZSh0eXBlLCBEQVRFKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzaW5nbGVJdGVtT3JBcnJheShhcnJheSkge1xuICAgIHJldHVybiBhcnJheS5sZW5ndGggPT09IDEgPyBhcnJheVswXSA6IGFycmF5O1xufSIsImltcG9ydCB7IElOVEVSUE9MQVRFLCBaRVJPIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCB7IGNvbnZlcnRhYmxlVG9OdW1iZXIgfSBmcm9tICcuLi8uLi9jb21tb24nO1xuaW1wb3J0IFNlcmllc0JpbmRlciBmcm9tICcuLi9zZXJpZXMtYmluZGVyJztcblxuY29uc3QgQVJFQV9SRUdFWCA9IC9hcmVhL2k7XG5cbmZ1bmN0aW9uIHNlcmllc01pc3NpbmdWYWx1ZXMoc2VyaWVzKSB7XG4gICAgaWYgKHNlcmllcy5taXNzaW5nVmFsdWVzKSB7XG4gICAgICAgIHJldHVybiBzZXJpZXMubWlzc2luZ1ZhbHVlcztcbiAgICB9XG5cbiAgICByZXR1cm4gQVJFQV9SRUdFWC50ZXN0KHNlcmllcy50eXBlKSB8fCBzZXJpZXMuc3RhY2sgPyBaRVJPIDogSU5URVJQT0xBVEU7XG59XG5cbmZ1bmN0aW9uIGhhc1ZhbHVlKHNlcmllcywgaXRlbSkge1xuICAgIGNvbnN0IGZpZWxkcyA9IFNlcmllc0JpbmRlci5jdXJyZW50LmJpbmRQb2ludChzZXJpZXMsIG51bGwsIGl0ZW0pO1xuICAgIGNvbnN0IHZhbHVlRmllbGRzID0gZmllbGRzLnZhbHVlRmllbGRzO1xuXG4gICAgZm9yIChsZXQgZmllbGQgaW4gdmFsdWVGaWVsZHMpIHtcbiAgICAgICAgaWYgKGNvbnZlcnRhYmxlVG9OdW1iZXIodmFsdWVGaWVsZHNbZmllbGRdKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGZpbmROZXh0KHsgc3RhcnQsIGRpciwgbWluLCBtYXgsIGdldHRlciwgaGFzSXRlbSwgc2VyaWVzIH0pIHtcbiAgICBsZXQgcG9pbnRIYXNWYWx1ZSwgb3V0UG9pbnQ7XG4gICAgbGV0IGlkeCA9IHN0YXJ0O1xuICAgIGRvIHtcbiAgICAgICAgaWR4ICs9IGRpcjtcbiAgICAgICAgLy9hZ2dyZWdhdGluZyBhbmQgYmluZGluZyB0aGUgaXRlbSB0YWtlcyB0b28gbXVjaCB0aW1lIGZvciBsYXJnZSBudW1iZXIgb2YgY2F0ZWdvcmllc1xuICAgICAgICAvL3dpbGwgYXNzdW1lIHRoYXQgaWYgdGhlIGFnZ3JlZ2F0aW9uIGRvZXMgbm90IGNyZWF0ZSB2YWx1ZSBmb3IgYSBtaXNzaW5nIGl0ZW0gZm9yIG9uZSBpdCB3aWxsIG5vdCBjcmVhdGUgZm9yIG90aGVyc1xuICAgICAgICBpZiAoaGFzSXRlbShpZHgpKSB7XG4gICAgICAgICAgICBvdXRQb2ludCA9IGdldHRlcihpZHgpO1xuICAgICAgICAgICAgcG9pbnRIYXNWYWx1ZSA9IGhhc1ZhbHVlKHNlcmllcywgb3V0UG9pbnQuaXRlbSk7XG4gICAgICAgIH1cbiAgICB9IHdoaWxlIChtaW4gPD0gaWR4ICYmIGlkeCA8PSBtYXggJiYgIXBvaW50SGFzVmFsdWUpO1xuXG4gICAgaWYgKHBvaW50SGFzVmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIG91dFBvaW50O1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlT3V0T2ZSYW5nZVBvaW50cyhzZXJpZXMsIHJhbmdlLCBjb3VudCwgZ2V0dGVyLCBoYXNJdGVtKSB7XG4gICAgY29uc3QgeyBtaW4sIG1heCB9ID0gcmFuZ2U7XG4gICAgY29uc3QgaGFzTWluUG9pbnQgPSBtaW4gPiAwICYmIG1pbiA8IGNvdW50O1xuICAgIGNvbnN0IGhhc01heFBvaW50ID0gbWF4ICsgMSA8IGNvdW50O1xuXG4gICAgaWYgKGhhc01pblBvaW50IHx8IGhhc01heFBvaW50KSB7XG4gICAgICAgIGNvbnN0IG1pc3NpbmdWYWx1ZXMgPSBzZXJpZXNNaXNzaW5nVmFsdWVzKHNlcmllcyk7XG4gICAgICAgIGxldCBtaW5Qb2ludCwgbWF4UG9pbnQ7XG4gICAgICAgIGlmIChtaXNzaW5nVmFsdWVzICE9PSBJTlRFUlBPTEFURSkge1xuICAgICAgICAgICAgaWYgKGhhc01pblBvaW50KSB7XG4gICAgICAgICAgICAgICAgbWluUG9pbnQgPSBnZXR0ZXIobWluIC0gMSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChoYXNNYXhQb2ludCkge1xuICAgICAgICAgICAgICAgIG1heFBvaW50ID0gZ2V0dGVyKG1heCArIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IG91dFBvaW50LCBwb2ludEhhc1ZhbHVlO1xuICAgICAgICAgICAgaWYgKGhhc01pblBvaW50KSB7XG4gICAgICAgICAgICAgICAgb3V0UG9pbnQgPSBnZXR0ZXIobWluIC0gMSk7XG4gICAgICAgICAgICAgICAgcG9pbnRIYXNWYWx1ZSA9IGhhc1ZhbHVlKHNlcmllcywgb3V0UG9pbnQuaXRlbSk7XG4gICAgICAgICAgICAgICAgaWYgKCFwb2ludEhhc1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIG1pblBvaW50ID0gZmluZE5leHQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IG1pbixcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpcjogLTEsXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW46IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXg6IGNvdW50IC0gMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldHRlcjogZ2V0dGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGFzSXRlbTogaGFzSXRlbSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlcmllczogc2VyaWVzXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG1pblBvaW50ID0gb3V0UG9pbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaGFzTWF4UG9pbnQpIHtcbiAgICAgICAgICAgICAgICBvdXRQb2ludCA9IGdldHRlcihtYXggKyAxKTtcbiAgICAgICAgICAgICAgICBwb2ludEhhc1ZhbHVlID0gaGFzVmFsdWUoc2VyaWVzLCBvdXRQb2ludC5pdGVtKTtcbiAgICAgICAgICAgICAgICBpZiAoIXBvaW50SGFzVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgbWF4UG9pbnQgPSBmaW5kTmV4dCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogbWF4LFxuICAgICAgICAgICAgICAgICAgICAgICAgZGlyOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWluOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4OiBjb3VudCAtIDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBnZXR0ZXI6IGdldHRlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhc0l0ZW06IGhhc0l0ZW0sXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXJpZXM6IHNlcmllc1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBtYXhQb2ludCA9IG91dFBvaW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtaW5Qb2ludCkge1xuICAgICAgICAgICAgc2VyaWVzLl9vdXRPZlJhbmdlTWluUG9pbnQgPSBtaW5Qb2ludDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtYXhQb2ludCkge1xuICAgICAgICAgICAgc2VyaWVzLl9vdXRPZlJhbmdlTWF4UG9pbnQgPSBtYXhQb2ludDtcbiAgICAgICAgfVxuICAgIH1cbn0iLCJpbXBvcnQgeyBkcmF3aW5nIGFzIGRyYXcgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tZHJhd2luZyc7XG5cbmltcG9ydCB7IENoYXJ0RWxlbWVudCwgQm94IH0gZnJvbSAnLi4vLi4vY29yZSc7XG5pbXBvcnQgQ3Jvc3NoYWlyIGZyb20gJy4uL2Nyb3NzaGFpci9jcm9zc2hhaXInO1xuaW1wb3J0IFBhbmUgZnJvbSAnLi4vcGFuZSc7XG5pbXBvcnQgeyBoYXNWYWx1ZSB9IGZyb20gJy4uL3V0aWxzJztcblxuaW1wb3J0IHsgV0hJVEUsIEJMQUNLLCBYLCBZLCBDT09SRF9QUkVDSVNJT04sIFRPUCwgQk9UVE9NLCBMRUZULCBSSUdIVCwgU1RBUlQsIEVORCB9IGZyb20gJy4uLy4uL2NvbW1vbi9jb25zdGFudHMnO1xuaW1wb3J0IHsgYXBwZW5kLCBkZWVwRXh0ZW5kLCBkZWZpbmVkLCBnZXRTcGFjaW5nLCBnZXRUZW1wbGF0ZSwgaW5BcnJheSwgaXNGdW5jdGlvbiwgaXNTdHJpbmcsIGxpbWl0VmFsdWUsIHJvdW5kLCBzZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5cbmNsYXNzIFBsb3RBcmVhQmFzZSBleHRlbmRzIENoYXJ0RWxlbWVudCB7XG4gICAgY29uc3RydWN0b3Ioc2VyaWVzLCBvcHRpb25zLCBjaGFydFNlcnZpY2UpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5pbml0RmllbGRzKHNlcmllcywgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuc2VyaWVzID0gc2VyaWVzO1xuICAgICAgICB0aGlzLmluaXRTZXJpZXMoKTtcbiAgICAgICAgdGhpcy5jaGFydHMgPSBbXTtcbiAgICAgICAgdGhpcy5vcHRpb25zLmxlZ2VuZCA9IHRoaXMub3B0aW9ucy5sZWdlbmQgfHwge307XG4gICAgICAgIHRoaXMub3B0aW9ucy5sZWdlbmQuaXRlbXMgPSBbXTtcbiAgICAgICAgdGhpcy5heGVzID0gW107XG4gICAgICAgIHRoaXMuY3Jvc3NoYWlycyA9IFtdO1xuICAgICAgICB0aGlzLmNoYXJ0U2VydmljZSA9IGNoYXJ0U2VydmljZTtcbiAgICAgICAgdGhpcy5vcmlnaW5hbE9wdGlvbnMgPSBvcHRpb25zO1xuXG4gICAgICAgIHRoaXMuY3JlYXRlUGFuZXMoKTtcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcbiAgICAgICAgdGhpcy5jcmVhdGVDcm9zc2hhaXJzKCk7XG4gICAgfVxuXG4gICAgaW5pdEZpZWxkcygpIHsgfVxuXG4gICAgaW5pdFNlcmllcygpIHtcbiAgICAgICAgY29uc3Qgc2VyaWVzID0gdGhpcy5zZXJpZXM7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHNlcmllc1tpXS5pbmRleCA9IGk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjcmVhdGVQYW5lcygpIHtcbiAgICAgICAgY29uc3QgZGVmYXVsdHMgPSB7IHRpdGxlOiB7IGNvbG9yOiAodGhpcy5vcHRpb25zLnRpdGxlIHx8IHt9KS5jb2xvciB9IH07XG4gICAgICAgIGNvbnN0IHBhbmVzID0gW107XG4gICAgICAgIGNvbnN0IHBhbmVPcHRpb25zID0gdGhpcy5vcHRpb25zLnBhbmVzIHx8IFtdO1xuICAgICAgICBjb25zdCBwYW5lc0xlbmd0aCA9IE1hdGgubWF4KHBhbmVPcHRpb25zLmxlbmd0aCwgMSk7XG5cbiAgICAgICAgZnVuY3Rpb24gc2V0VGl0bGUob3B0aW9ucywgZGVmYXVsdHMpIHtcbiAgICAgICAgICAgIGlmIChpc1N0cmluZyhvcHRpb25zLnRpdGxlKSkge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMudGl0bGUgPSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IG9wdGlvbnMudGl0bGVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvcHRpb25zLnRpdGxlID0gZGVlcEV4dGVuZCh7fSwgZGVmYXVsdHMudGl0bGUsIG9wdGlvbnMudGl0bGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYW5lc0xlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBvcHRpb25zID0gcGFuZU9wdGlvbnNbaV0gfHwge307XG4gICAgICAgICAgICBzZXRUaXRsZShvcHRpb25zLCBkZWZhdWx0cyk7XG5cbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRQYW5lID0gbmV3IFBhbmUob3B0aW9ucyk7XG4gICAgICAgICAgICBjdXJyZW50UGFuZS5wYW5lSW5kZXggPSBpO1xuXG4gICAgICAgICAgICBwYW5lcy5wdXNoKGN1cnJlbnRQYW5lKTtcbiAgICAgICAgICAgIHRoaXMuYXBwZW5kKGN1cnJlbnRQYW5lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucGFuZXMgPSBwYW5lcztcbiAgICB9XG5cbiAgICBjcmVhdGVDcm9zc2hhaXJzKHBhbmVzID0gdGhpcy5wYW5lcykge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBwYW5lID0gcGFuZXNbaV07XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHBhbmUuYXhlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF4aXMgPSBwYW5lLmF4ZXNbal07XG4gICAgICAgICAgICAgICAgaWYgKGF4aXMub3B0aW9ucy5jcm9zc2hhaXIgJiYgYXhpcy5vcHRpb25zLmNyb3NzaGFpci52aXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRDcm9zc2hhaXIgPSBuZXcgQ3Jvc3NoYWlyKHRoaXMuY2hhcnRTZXJ2aWNlLCBheGlzLCBheGlzLm9wdGlvbnMuY3Jvc3NoYWlyKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNyb3NzaGFpcnMucHVzaChjdXJyZW50Q3Jvc3NoYWlyKTtcbiAgICAgICAgICAgICAgICAgICAgcGFuZS5jb250ZW50LmFwcGVuZChjdXJyZW50Q3Jvc3NoYWlyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW1vdmVDcm9zc2hhaXJzKHBhbmUpIHtcbiAgICAgICAgY29uc3QgY3Jvc3NoYWlycyA9IHRoaXMuY3Jvc3NoYWlycztcbiAgICAgICAgY29uc3QgYXhlcyA9IHBhbmUuYXhlcztcblxuICAgICAgICBmb3IgKGxldCBpID0gY3Jvc3NoYWlycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBheGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNyb3NzaGFpcnNbaV0uYXhpcyA9PT0gYXhlc1tqXSkge1xuICAgICAgICAgICAgICAgICAgICBjcm9zc2hhaXJzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGlkZUNyb3NzaGFpcnMoKSB7XG4gICAgICAgIGNvbnN0IGNyb3NzaGFpcnMgPSB0aGlzLmNyb3NzaGFpcnM7XG4gICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGNyb3NzaGFpcnMubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgY3Jvc3NoYWlyc1tpZHhdLmhpZGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZpbmRQYW5lKG5hbWUpIHtcbiAgICAgICAgY29uc3QgcGFuZXMgPSB0aGlzLnBhbmVzO1xuICAgICAgICBsZXQgbWF0Y2hpbmdQYW5lO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFuZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChwYW5lc1tpXS5vcHRpb25zLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICAgICAgICBtYXRjaGluZ1BhbmUgPSBwYW5lc1tpXTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtYXRjaGluZ1BhbmUgfHwgcGFuZXNbMF07XG4gICAgfVxuXG4gICAgZmluZFBvaW50UGFuZShwb2ludCkge1xuICAgICAgICBjb25zdCBwYW5lcyA9IHRoaXMucGFuZXM7XG4gICAgICAgIGxldCBtYXRjaGluZ1BhbmU7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYW5lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHBhbmVzW2ldLmJveC5jb250YWluc1BvaW50KHBvaW50KSkge1xuICAgICAgICAgICAgICAgIG1hdGNoaW5nUGFuZSA9IHBhbmVzW2ldO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1hdGNoaW5nUGFuZTtcbiAgICB9XG5cbiAgICBhcHBlbmRBeGlzKGF4aXMpIHtcbiAgICAgICAgY29uc3QgcGFuZSA9IHRoaXMuZmluZFBhbmUoYXhpcy5vcHRpb25zLnBhbmUpO1xuXG4gICAgICAgIHBhbmUuYXBwZW5kQXhpcyhheGlzKTtcbiAgICAgICAgdGhpcy5heGVzLnB1c2goYXhpcyk7XG4gICAgICAgIGF4aXMucGxvdEFyZWEgPSB0aGlzO1xuICAgIH1cblxuICAgIHJlbW92ZUF4aXMoYXhpc1RvUmVtb3ZlKSB7XG4gICAgICAgIGNvbnN0IGZpbHRlcmVkQXhlcyA9IFtdO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5heGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBheGlzID0gdGhpcy5heGVzW2ldO1xuICAgICAgICAgICAgaWYgKGF4aXNUb1JlbW92ZSAhPT0gYXhpcykge1xuICAgICAgICAgICAgICAgIGZpbHRlcmVkQXhlcy5wdXNoKGF4aXMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBheGlzLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYXhlcyA9IGZpbHRlcmVkQXhlcztcbiAgICB9XG5cbiAgICBhcHBlbmRDaGFydChjaGFydCwgcGFuZSkge1xuICAgICAgICB0aGlzLmNoYXJ0cy5wdXNoKGNoYXJ0KTtcbiAgICAgICAgaWYgKHBhbmUpIHtcbiAgICAgICAgICAgIHBhbmUuYXBwZW5kQ2hhcnQoY2hhcnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hcHBlbmQoY2hhcnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVtb3ZlQ2hhcnQoY2hhcnRUb1JlbW92ZSkge1xuICAgICAgICBjb25zdCBmaWx0ZXJlZENoYXJ0cyA9IFtdO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jaGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGNoYXJ0ID0gdGhpcy5jaGFydHNbaV07XG4gICAgICAgICAgICBpZiAoY2hhcnQgIT09IGNoYXJ0VG9SZW1vdmUpIHtcbiAgICAgICAgICAgICAgICBmaWx0ZXJlZENoYXJ0cy5wdXNoKGNoYXJ0KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2hhcnQuZGVzdHJveSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jaGFydHMgPSBmaWx0ZXJlZENoYXJ0cztcbiAgICB9XG5cbiAgICBhZGRUb0xlZ2VuZChzZXJpZXMpIHtcbiAgICAgICAgY29uc3QgY291bnQgPSBzZXJpZXMubGVuZ3RoO1xuICAgICAgICBjb25zdCBsZWdlbmQgPSB0aGlzLm9wdGlvbnMubGVnZW5kO1xuICAgICAgICBjb25zdCBsYWJlbHMgPSBsZWdlbmQubGFiZWxzIHx8IHt9O1xuICAgICAgICBjb25zdCBpbmFjdGl2ZUl0ZW1zID0gbGVnZW5kLmluYWN0aXZlSXRlbXMgfHwge307XG4gICAgICAgIGNvbnN0IGluYWN0aXZlSXRlbXNMYWJlbHMgPSBpbmFjdGl2ZUl0ZW1zLmxhYmVscyB8fCB7fTtcbiAgICAgICAgY29uc3QgZGF0YSA9IFtdO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudFNlcmllcyA9IHNlcmllc1tpXTtcbiAgICAgICAgICAgIGNvbnN0IHNlcmllc1Zpc2libGUgPSBjdXJyZW50U2VyaWVzLnZpc2libGUgIT09IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRTZXJpZXMudmlzaWJsZUluTGVnZW5kID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgdGV4dCA9IGN1cnJlbnRTZXJpZXMubmFtZTtcbiAgICAgICAgICAgIGNvbnN0IGxhYmVsVGVtcGxhdGUgPSBzZXJpZXNWaXNpYmxlID8gZ2V0VGVtcGxhdGUobGFiZWxzKSA6IGdldFRlbXBsYXRlKGluYWN0aXZlSXRlbXNMYWJlbHMpIHx8IGdldFRlbXBsYXRlKGxhYmVscyk7XG4gICAgICAgICAgICBpZiAobGFiZWxUZW1wbGF0ZSkge1xuICAgICAgICAgICAgICAgIHRleHQgPSBsYWJlbFRlbXBsYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogaGFzVmFsdWUodGV4dCkgPyB0ZXh0IDogXCJcIixcbiAgICAgICAgICAgICAgICAgICAgc2VyaWVzOiBjdXJyZW50U2VyaWVzXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRzID0gY3VycmVudFNlcmllcy5fZGVmYXVsdHM7XG4gICAgICAgICAgICBsZXQgY29sb3IgPSBjdXJyZW50U2VyaWVzLmNvbG9yO1xuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24oY29sb3IpICYmIGRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgY29sb3IgPSBkZWZhdWx0cy5jb2xvcjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IGl0ZW1MYWJlbE9wdGlvbnMsIG1hcmtlckNvbG9yO1xuICAgICAgICAgICAgaWYgKHNlcmllc1Zpc2libGUpIHtcbiAgICAgICAgICAgICAgICBpdGVtTGFiZWxPcHRpb25zID0ge307XG4gICAgICAgICAgICAgICAgbWFya2VyQ29sb3IgPSBjb2xvcjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaXRlbUxhYmVsT3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IGluYWN0aXZlSXRlbXNMYWJlbHMuY29sb3IsXG4gICAgICAgICAgICAgICAgICAgIGZvbnQ6IGluYWN0aXZlSXRlbXNMYWJlbHMuZm9udFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgbWFya2VyQ29sb3IgPSBpbmFjdGl2ZUl0ZW1zLm1hcmtlcnMuY29sb3I7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChoYXNWYWx1ZSh0ZXh0KSAmJiB0ZXh0ICE9PSBcIlwiKSB7XG4gICAgICAgICAgICAgICAgZGF0YS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogdGV4dCxcbiAgICAgICAgICAgICAgICAgICAgbGFiZWxzOiBpdGVtTGFiZWxPcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICBtYXJrZXJDb2xvcjogbWFya2VyQ29sb3IsXG4gICAgICAgICAgICAgICAgICAgIHNlcmllczogY3VycmVudFNlcmllcyxcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlOiBzZXJpZXNWaXNpYmxlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBhcHBlbmQobGVnZW5kLml0ZW1zLCBkYXRhKTtcbiAgICB9XG5cbiAgICBncm91cEF4ZXMocGFuZXMpIHtcbiAgICAgICAgY29uc3QgeEF4ZXMgPSBbXTtcbiAgICAgICAgY29uc3QgeUF4ZXMgPSBbXTtcblxuICAgICAgICBmb3IgKGxldCBwYW5lSXggPSAwOyBwYW5lSXggPCBwYW5lcy5sZW5ndGg7IHBhbmVJeCsrKSB7XG4gICAgICAgICAgICBjb25zdCBwYW5lQXhlcyA9IHBhbmVzW3BhbmVJeF0uYXhlcztcbiAgICAgICAgICAgIGZvciAobGV0IGF4aXNJeCA9IDA7IGF4aXNJeCA8IHBhbmVBeGVzLmxlbmd0aDsgYXhpc0l4KyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBheGlzID0gcGFuZUF4ZXNbYXhpc0l4XTtcbiAgICAgICAgICAgICAgICBpZiAoYXhpcy5vcHRpb25zLnZlcnRpY2FsKSB7XG4gICAgICAgICAgICAgICAgICAgIHlBeGVzLnB1c2goYXhpcyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgeEF4ZXMucHVzaChheGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4geyB4OiB4QXhlcywgeTogeUF4ZXMsIGFueTogeEF4ZXMuY29uY2F0KHlBeGVzKSB9O1xuICAgIH1cblxuICAgIGdyb3VwU2VyaWVzQnlQYW5lKCkge1xuICAgICAgICBjb25zdCBzZXJpZXMgPSB0aGlzLnNlcmllcztcbiAgICAgICAgY29uc3Qgc2VyaWVzQnlQYW5lID0ge307XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRTZXJpZXMgPSBzZXJpZXNbaV07XG4gICAgICAgICAgICBjb25zdCBwYW5lID0gdGhpcy5zZXJpZXNQYW5lTmFtZShjdXJyZW50U2VyaWVzKTtcblxuICAgICAgICAgICAgaWYgKHNlcmllc0J5UGFuZVtwYW5lXSkge1xuICAgICAgICAgICAgICAgIHNlcmllc0J5UGFuZVtwYW5lXS5wdXNoKGN1cnJlbnRTZXJpZXMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZXJpZXNCeVBhbmVbcGFuZV0gPSBbIGN1cnJlbnRTZXJpZXMgXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzZXJpZXNCeVBhbmU7XG4gICAgfVxuXG4gICAgZmlsdGVyVmlzaWJsZVNlcmllcyhzZXJpZXMpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRTZXJpZXMgPSBzZXJpZXNbaV07XG4gICAgICAgICAgICBpZiAoY3VycmVudFNlcmllcy52aXNpYmxlICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGN1cnJlbnRTZXJpZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICByZWZsb3codGFyZ2V0Qm94KSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMucGxvdEFyZWE7XG4gICAgICAgIGNvbnN0IHBhbmVzID0gdGhpcy5wYW5lcztcbiAgICAgICAgY29uc3QgbWFyZ2luID0gZ2V0U3BhY2luZyhvcHRpb25zLm1hcmdpbik7XG5cbiAgICAgICAgdGhpcy5ib3ggPSB0YXJnZXRCb3guY2xvbmUoKS51bnBhZChtYXJnaW4pO1xuICAgICAgICB0aGlzLnJlZmxvd1BhbmVzKCk7XG5cbiAgICAgICAgdGhpcy5kZXRhY2hMYWJlbHMoKTtcbiAgICAgICAgdGhpcy5yZWZsb3dBeGVzKHBhbmVzKTtcbiAgICAgICAgdGhpcy5yZWZsb3dDaGFydHMocGFuZXMpO1xuICAgIH1cblxuICAgIHJlZHJhdyhwYW5lcykge1xuICAgICAgICBjb25zdCBwYW5lc0FycmF5ID0gW10uY29uY2F0KHBhbmVzKTtcbiAgICAgICAgdGhpcy5pbml0U2VyaWVzKCk7XG5cbiAgICAgICAgLy9wcmV2ZW50cyBsZWFrIGR1cmluZyBwYXJ0aWFsIHJlZHJhd3MuIHRoZSBjYWNoZWQgZ3JhZGllbnRzIG9ic2VydmVycyByZXRhaW4gcmVmZXJlbmNlIHRvIHRoZSBkZXN0cm95ZWQgZWxlbWVudHMuXG4gICAgICAgIGNvbnN0IHJvb3QgPSB0aGlzLmdldFJvb3QoKTtcbiAgICAgICAgaWYgKHJvb3QpIHtcbiAgICAgICAgICAgIHJvb3QuY2xlYW5HcmFkaWVudHMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFuZXNBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5yZW1vdmVDcm9zc2hhaXJzKHBhbmVzQXJyYXlbaV0pO1xuICAgICAgICAgICAgcGFuZXNBcnJheVtpXS5lbXB0eSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yZW5kZXIocGFuZXNBcnJheSk7XG4gICAgICAgIHRoaXMuZGV0YWNoTGFiZWxzKCk7XG4gICAgICAgIHRoaXMucmVmbG93QXhlcyh0aGlzLnBhbmVzKTtcbiAgICAgICAgdGhpcy5yZWZsb3dDaGFydHMocGFuZXNBcnJheSk7XG5cbiAgICAgICAgdGhpcy5jcmVhdGVDcm9zc2hhaXJzKHBhbmVzQXJyYXkpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFuZXNBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcGFuZXNBcnJheVtpXS5yZWZyZXNoKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBheGlzQ3Jvc3NpbmdWYWx1ZXMoYXhpcywgY3Jvc3NpbmdBeGVzKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBheGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGNyb3NzaW5nVmFsdWVzID0gW10uY29uY2F0KFxuICAgICAgICAgICAgb3B0aW9ucy5heGlzQ3Jvc3NpbmdWYWx1ZXMgfHwgb3B0aW9ucy5heGlzQ3Jvc3NpbmdWYWx1ZVxuICAgICAgICApO1xuICAgICAgICBjb25zdCB2YWx1ZXNUb0FkZCA9IGNyb3NzaW5nQXhlcy5sZW5ndGggLSBjcm9zc2luZ1ZhbHVlcy5sZW5ndGg7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRWYWx1ZSA9IGNyb3NzaW5nVmFsdWVzWzBdIHx8IDA7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZXNUb0FkZDsgaSsrKSB7XG4gICAgICAgICAgICBjcm9zc2luZ1ZhbHVlcy5wdXNoKGRlZmF1bHRWYWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY3Jvc3NpbmdWYWx1ZXM7XG4gICAgfVxuXG4gICAgYWxpZ25BeGlzVG8oYXhpcywgdGFyZ2V0QXhpcywgY3Jvc3NpbmdWYWx1ZSwgdGFyZ2V0Q3Jvc3NpbmdWYWx1ZSkge1xuICAgICAgICBjb25zdCBzbG90ID0gYXhpcy5nZXRTbG90KGNyb3NzaW5nVmFsdWUsIGNyb3NzaW5nVmFsdWUsIHRydWUpO1xuICAgICAgICBjb25zdCBzbG90RWRnZSA9IGF4aXMub3B0aW9ucy5yZXZlcnNlID8gMiA6IDE7XG4gICAgICAgIGNvbnN0IHRhcmdldFNsb3QgPSB0YXJnZXRBeGlzLmdldFNsb3QodGFyZ2V0Q3Jvc3NpbmdWYWx1ZSwgdGFyZ2V0Q3Jvc3NpbmdWYWx1ZSwgdHJ1ZSk7XG4gICAgICAgIGNvbnN0IHRhcmdldEVkZ2UgPSB0YXJnZXRBeGlzLm9wdGlvbnMucmV2ZXJzZSA/IDIgOiAxO1xuICAgICAgICBjb25zdCBheGlzQm94ID0gYXhpcy5ib3gudHJhbnNsYXRlKFxuICAgICAgICAgICAgdGFyZ2V0U2xvdFtYICsgdGFyZ2V0RWRnZV0gLSBzbG90W1ggKyBzbG90RWRnZV0sXG4gICAgICAgICAgICB0YXJnZXRTbG90W1kgKyB0YXJnZXRFZGdlXSAtIHNsb3RbWSArIHNsb3RFZGdlXVxuICAgICAgICApO1xuXG4gICAgICAgIGlmIChheGlzLnBhbmUgIT09IHRhcmdldEF4aXMucGFuZSkge1xuICAgICAgICAgICAgYXhpc0JveC50cmFuc2xhdGUoMCwgYXhpcy5wYW5lLmJveC55MSAtIHRhcmdldEF4aXMucGFuZS5ib3gueTEpO1xuICAgICAgICB9XG5cbiAgICAgICAgYXhpcy5yZWZsb3coYXhpc0JveCk7XG4gICAgfVxuXG4gICAgYWxpZ25BeGVzKHhBeGVzLCB5QXhlcykge1xuICAgICAgICBjb25zdCB4QW5jaG9yID0geEF4ZXNbMF07XG4gICAgICAgIGNvbnN0IHlBbmNob3IgPSB5QXhlc1swXTtcbiAgICAgICAgY29uc3QgeEFuY2hvckNyb3NzaW5ncyA9IHRoaXMuYXhpc0Nyb3NzaW5nVmFsdWVzKHhBbmNob3IsIHlBeGVzKTtcbiAgICAgICAgY29uc3QgeUFuY2hvckNyb3NzaW5ncyA9IHRoaXMuYXhpc0Nyb3NzaW5nVmFsdWVzKHlBbmNob3IsIHhBeGVzKTtcbiAgICAgICAgY29uc3QgbGVmdEFuY2hvcnMgPSB7fTtcbiAgICAgICAgY29uc3QgcmlnaHRBbmNob3JzID0ge307XG4gICAgICAgIGNvbnN0IHRvcEFuY2hvcnMgPSB7fTtcbiAgICAgICAgY29uc3QgYm90dG9tQW5jaG9ycyA9IHt9O1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgeUF4ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGF4aXMgPSB5QXhlc1tpXTtcbiAgICAgICAgICAgIGNvbnN0IHBhbmUgPSBheGlzLnBhbmU7XG4gICAgICAgICAgICBjb25zdCBwYW5lSWQgPSBwYW5lLmlkO1xuICAgICAgICAgICAgY29uc3QgdmlzaWJsZSA9IGF4aXMub3B0aW9ucy52aXNpYmxlICE9PSBmYWxzZTtcblxuICAgICAgICAgICAgLy8gTG9jYXRlIHBhbmUgYW5jaG9yLCBpZiBhbnksIGFuZCB1c2UgaXRzIGF4aXNDcm9zc2luZ1ZhbHVlc1xuICAgICAgICAgICAgY29uc3QgYW5jaG9yID0gcGFuZUFuY2hvcih4QXhlcywgcGFuZSkgfHwgeEFuY2hvcjtcbiAgICAgICAgICAgIGxldCBhbmNob3JDcm9zc2luZ3MgPSB4QW5jaG9yQ3Jvc3NpbmdzO1xuXG4gICAgICAgICAgICBpZiAoYW5jaG9yICE9PSB4QW5jaG9yKSB7XG4gICAgICAgICAgICAgICAgYW5jaG9yQ3Jvc3NpbmdzID0gdGhpcy5heGlzQ3Jvc3NpbmdWYWx1ZXMoYW5jaG9yLCB5QXhlcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuYWxpZ25BeGlzVG8oYXhpcywgYW5jaG9yLCB5QW5jaG9yQ3Jvc3NpbmdzW2ldLCBhbmNob3JDcm9zc2luZ3NbaV0pO1xuXG4gICAgICAgICAgICBpZiAoYXhpcy5vcHRpb25zLl9vdmVybGFwKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChyb3VuZChheGlzLmxpbmVCb3goKS54MSkgPT09IHJvdW5kKGFuY2hvci5saW5lQm94KCkueDEpKSB7XG4gICAgICAgICAgICAgICAgLy8gUHVzaCB0aGUgYXhpcyB0byB0aGUgbGVmdCB0aGUgcHJldmlvdXMgeS1heGlzIHNvIHRoZXkgZG9uJ3Qgb3ZlcmxhcFxuICAgICAgICAgICAgICAgIGlmIChsZWZ0QW5jaG9yc1twYW5lSWRdKSB7XG4gICAgICAgICAgICAgICAgICAgIGF4aXMucmVmbG93KGF4aXMuYm94XG4gICAgICAgICAgICAgICAgICAgICAgICAuYWxpZ25UbyhsZWZ0QW5jaG9yc1twYW5lSWRdLmJveCwgTEVGVClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50cmFuc2xhdGUoLWF4aXMub3B0aW9ucy5tYXJnaW4sIDApXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHZpc2libGUpIHtcbiAgICAgICAgICAgICAgICAgICAgbGVmdEFuY2hvcnNbcGFuZUlkXSA9IGF4aXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocm91bmQoYXhpcy5saW5lQm94KCkueDIpID09PSByb3VuZChhbmNob3IubGluZUJveCgpLngyKSkge1xuICAgICAgICAgICAgICAgIC8vIEZsaXAgdGhlIGxhYmVscyBvbiB0aGUgcmlnaHQgaWYgd2UncmUgYXQgdGhlIHJpZ2h0IGVuZCBvZiB0aGUgcGFuZVxuICAgICAgICAgICAgICAgIGlmICghYXhpcy5fbWlycm9yZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgYXhpcy5vcHRpb25zLmxhYmVscy5taXJyb3IgPSAhYXhpcy5vcHRpb25zLmxhYmVscy5taXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIGF4aXMuX21pcnJvcmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLmFsaWduQXhpc1RvKGF4aXMsIGFuY2hvciwgeUFuY2hvckNyb3NzaW5nc1tpXSwgYW5jaG9yQ3Jvc3NpbmdzW2ldKTtcblxuICAgICAgICAgICAgICAgIC8vIFB1c2ggdGhlIGF4aXMgdG8gdGhlIHJpZ2h0IHRoZSBwcmV2aW91cyB5LWF4aXMgc28gdGhleSBkb24ndCBvdmVybGFwXG4gICAgICAgICAgICAgICAgaWYgKHJpZ2h0QW5jaG9yc1twYW5lSWRdKSB7XG4gICAgICAgICAgICAgICAgICAgIGF4aXMucmVmbG93KGF4aXMuYm94XG4gICAgICAgICAgICAgICAgICAgICAgICAuYWxpZ25UbyhyaWdodEFuY2hvcnNbcGFuZUlkXS5ib3gsIFJJR0hUKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRyYW5zbGF0ZShheGlzLm9wdGlvbnMubWFyZ2luLCAwKVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh2aXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0QW5jaG9yc1twYW5lSWRdID0gYXhpcztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpICE9PSAwICYmIHlBbmNob3IucGFuZSA9PT0gYXhpcy5wYW5lKSB7XG4gICAgICAgICAgICAgICAgYXhpcy5hbGlnblRvKHlBbmNob3IpO1xuICAgICAgICAgICAgICAgIGF4aXMucmVmbG93KGF4aXMuYm94KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgeEF4ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGF4aXMgPSB4QXhlc1tpXTtcbiAgICAgICAgICAgIGNvbnN0IHBhbmUgPSBheGlzLnBhbmU7XG4gICAgICAgICAgICBjb25zdCBwYW5lSWQgPSBwYW5lLmlkO1xuICAgICAgICAgICAgY29uc3QgdmlzaWJsZSA9IGF4aXMub3B0aW9ucy52aXNpYmxlICE9PSBmYWxzZTtcblxuICAgICAgICAgICAgLy8gTG9jYXRlIHBhbmUgYW5jaG9yIGFuZCB1c2UgaXRzIGF4aXNDcm9zc2luZ1ZhbHVlc1xuICAgICAgICAgICAgY29uc3QgYW5jaG9yID0gcGFuZUFuY2hvcih5QXhlcywgcGFuZSkgfHwgeUFuY2hvcjtcbiAgICAgICAgICAgIGxldCBhbmNob3JDcm9zc2luZ3MgPSB5QW5jaG9yQ3Jvc3NpbmdzO1xuICAgICAgICAgICAgaWYgKGFuY2hvciAhPT0geUFuY2hvcikge1xuICAgICAgICAgICAgICAgIGFuY2hvckNyb3NzaW5ncyA9IHRoaXMuYXhpc0Nyb3NzaW5nVmFsdWVzKGFuY2hvciwgeEF4ZXMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmFsaWduQXhpc1RvKGF4aXMsIGFuY2hvciwgeEFuY2hvckNyb3NzaW5nc1tpXSwgYW5jaG9yQ3Jvc3NpbmdzW2ldKTtcblxuICAgICAgICAgICAgaWYgKGF4aXMub3B0aW9ucy5fb3ZlcmxhcCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocm91bmQoYXhpcy5saW5lQm94KCkueTEpID09PSByb3VuZChhbmNob3IubGluZUJveCgpLnkxKSkge1xuICAgICAgICAgICAgICAgIC8vIEZsaXAgdGhlIGxhYmVscyBvbiB0b3AgaWYgd2UncmUgYXQgdGhlIHRvcCBvZiB0aGUgcGFuZVxuICAgICAgICAgICAgICAgIGlmICghYXhpcy5fbWlycm9yZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgYXhpcy5vcHRpb25zLmxhYmVscy5taXJyb3IgPSAhYXhpcy5vcHRpb25zLmxhYmVscy5taXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIGF4aXMuX21pcnJvcmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5hbGlnbkF4aXNUbyhheGlzLCBhbmNob3IsIHhBbmNob3JDcm9zc2luZ3NbaV0sIGFuY2hvckNyb3NzaW5nc1tpXSk7XG5cbiAgICAgICAgICAgICAgICAvLyBQdXNoIHRoZSBheGlzIGFib3ZlIHRoZSBwcmV2aW91cyB4LWF4aXMgc28gdGhleSBkb24ndCBvdmVybGFwXG4gICAgICAgICAgICAgICAgaWYgKHRvcEFuY2hvcnNbcGFuZUlkXSkge1xuICAgICAgICAgICAgICAgICAgICBheGlzLnJlZmxvdyhheGlzLmJveFxuICAgICAgICAgICAgICAgICAgICAgICAgLmFsaWduVG8odG9wQW5jaG9yc1twYW5lSWRdLmJveCwgVE9QKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRyYW5zbGF0ZSgwLCAtYXhpcy5vcHRpb25zLm1hcmdpbilcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodmlzaWJsZSkge1xuICAgICAgICAgICAgICAgICAgICB0b3BBbmNob3JzW3BhbmVJZF0gPSBheGlzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHJvdW5kKGF4aXMubGluZUJveCgpLnkyLCBDT09SRF9QUkVDSVNJT04pID09PSByb3VuZChhbmNob3IubGluZUJveCgpLnkyLCBDT09SRF9QUkVDSVNJT04pKSB7XG4gICAgICAgICAgICAgICAgLy8gUHVzaCB0aGUgYXhpcyBiZWxvdyB0aGUgcHJldmlvdXMgeC1heGlzIHNvIHRoZXkgZG9uJ3Qgb3ZlcmxhcFxuICAgICAgICAgICAgICAgIGlmIChib3R0b21BbmNob3JzW3BhbmVJZF0pIHtcbiAgICAgICAgICAgICAgICAgICAgYXhpcy5yZWZsb3coYXhpcy5ib3hcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hbGlnblRvKGJvdHRvbUFuY2hvcnNbcGFuZUlkXS5ib3gsIEJPVFRPTSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC50cmFuc2xhdGUoMCwgYXhpcy5vcHRpb25zLm1hcmdpbilcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodmlzaWJsZSkge1xuICAgICAgICAgICAgICAgICAgICBib3R0b21BbmNob3JzW3BhbmVJZF0gPSBheGlzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGkgIT09IDApIHtcbiAgICAgICAgICAgICAgICBheGlzLmFsaWduVG8oeEFuY2hvcik7XG4gICAgICAgICAgICAgICAgYXhpcy5yZWZsb3coYXhpcy5ib3gpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2hyaW5rQXhpc1dpZHRoKHBhbmVzKSB7XG4gICAgICAgIGNvbnN0IGF4ZXMgPSB0aGlzLmdyb3VwQXhlcyhwYW5lcykuYW55O1xuICAgICAgICBjb25zdCBheGlzQm94ID0gYXhpc0dyb3VwQm94KGF4ZXMpO1xuICAgICAgICBsZXQgb3ZlcmZsb3dYID0gMDtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50UGFuZSA9IHBhbmVzW2ldO1xuXG4gICAgICAgICAgICBpZiAoY3VycmVudFBhbmUuYXhlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3dYID0gTWF0aC5tYXgoXG4gICAgICAgICAgICAgICAgICAgIG92ZXJmbG93WCxcbiAgICAgICAgICAgICAgICAgICAgYXhpc0JveC53aWR0aCgpIC0gY3VycmVudFBhbmUuY29udGVudEJveC53aWR0aCgpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvdmVyZmxvd1ggIT09IDApIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXhlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRBeGlzID0gYXhlc1tpXTtcblxuICAgICAgICAgICAgICAgIGlmICghY3VycmVudEF4aXMub3B0aW9ucy52ZXJ0aWNhbCkge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50QXhpcy5yZWZsb3coY3VycmVudEF4aXMuYm94LnNocmluayhvdmVyZmxvd1gsIDApKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzaHJpbmtBeGlzSGVpZ2h0KHBhbmVzKSB7XG4gICAgICAgIGxldCBzaHJpbmtlZDtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50UGFuZSA9IHBhbmVzW2ldO1xuICAgICAgICAgICAgY29uc3QgYXhlcyA9IGN1cnJlbnRQYW5lLmF4ZXM7XG4gICAgICAgICAgICBjb25zdCBvdmVyZmxvd1kgPSBNYXRoLm1heCgwLCBheGlzR3JvdXBCb3goYXhlcykuaGVpZ2h0KCkgLSBjdXJyZW50UGFuZS5jb250ZW50Qm94LmhlaWdodCgpKTtcblxuICAgICAgICAgICAgaWYgKG92ZXJmbG93WSAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYXhlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50QXhpcyA9IGF4ZXNbal07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRBeGlzLm9wdGlvbnMudmVydGljYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRBeGlzLnJlZmxvdyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50QXhpcy5ib3guc2hyaW5rKDAsIG92ZXJmbG93WSlcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2hyaW5rZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNocmlua2VkO1xuICAgIH1cblxuICAgIGZpdEF4ZXMocGFuZXMpIHtcbiAgICAgICAgY29uc3QgYXhlcyA9IHRoaXMuZ3JvdXBBeGVzKHBhbmVzKS5hbnk7XG4gICAgICAgIGxldCBvZmZzZXRYID0gMDtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50UGFuZSA9IHBhbmVzW2ldO1xuICAgICAgICAgICAgY29uc3QgcGFuZUF4ZXMgPSBjdXJyZW50UGFuZS5heGVzO1xuICAgICAgICAgICAgY29uc3QgcGFuZUJveCA9IGN1cnJlbnRQYW5lLmNvbnRlbnRCb3g7XG5cbiAgICAgICAgICAgIGlmIChwYW5lQXhlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXhpc0JveCA9IGF4aXNHcm91cEJveChwYW5lQXhlcyk7XG4gICAgICAgICAgICAgICAgLy8gT2Zmc2V0WSBpcyBjYWxjdWxhdGVkIGFuZCBhcHBsaWVkIHBlciBwYW5lXG4gICAgICAgICAgICAgICAgY29uc3Qgb2Zmc2V0WSA9IE1hdGgubWF4KHBhbmVCb3gueTEgLSBheGlzQm94LnkxLCBwYW5lQm94LnkyIC0gYXhpc0JveC55Mik7XG5cbiAgICAgICAgICAgICAgICAvLyBPZmZzZXRYIGlzIGNhbGN1bGF0ZWQgYW5kIGFwcGxpZWQgZ2xvYmFsbHlcbiAgICAgICAgICAgICAgICBvZmZzZXRYID0gTWF0aC5tYXgob2Zmc2V0WCwgcGFuZUJveC54MSAtIGF4aXNCb3gueDEpO1xuXG5cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHBhbmVBeGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRBeGlzID0gcGFuZUF4ZXNbal07XG5cbiAgICAgICAgICAgICAgICAgICAgY3VycmVudEF4aXMucmVmbG93KFxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEF4aXMuYm94LnRyYW5zbGF0ZSgwLCBvZmZzZXRZKVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXhlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudEF4aXMgPSBheGVzW2ldO1xuXG4gICAgICAgICAgICBjdXJyZW50QXhpcy5yZWZsb3coXG4gICAgICAgICAgICAgICAgY3VycmVudEF4aXMuYm94LnRyYW5zbGF0ZShvZmZzZXRYLCAwKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlZmxvd0F4ZXMocGFuZXMpIHtcbiAgICAgICAgY29uc3QgYXhlcyA9IHRoaXMuZ3JvdXBBeGVzKHBhbmVzKTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLnJlZmxvd1BhbmVBeGVzKHBhbmVzW2ldKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChheGVzLngubGVuZ3RoID4gMCAmJiBheGVzLnkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5hbGlnbkF4ZXMoYXhlcy54LCBheGVzLnkpO1xuICAgICAgICAgICAgdGhpcy5zaHJpbmtBeGlzV2lkdGgocGFuZXMpO1xuXG4gICAgICAgICAgICB0aGlzLmF1dG9Sb3RhdGVBeGlzTGFiZWxzKGF4ZXMpO1xuXG4gICAgICAgICAgICB0aGlzLmFsaWduQXhlcyhheGVzLngsIGF4ZXMueSk7XG4gICAgICAgICAgICBpZiAodGhpcy5zaHJpbmtBeGlzV2lkdGgocGFuZXMpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hbGlnbkF4ZXMoYXhlcy54LCBheGVzLnkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnNocmlua0F4aXNIZWlnaHQocGFuZXMpO1xuICAgICAgICAgICAgdGhpcy5hbGlnbkF4ZXMoYXhlcy54LCBheGVzLnkpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5zaHJpbmtBeGlzSGVpZ2h0KHBhbmVzKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWxpZ25BeGVzKGF4ZXMueCwgYXhlcy55KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5maXRBeGVzKHBhbmVzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGF1dG9Sb3RhdGVBeGlzTGFiZWxzKGdyb3VwZWRBeGVzKSB7XG4gICAgICAgIGNvbnN0IHsgcGFuZXMgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGF4ZXMgPSBhbGxQYW5lQXhlcyhwYW5lcyk7XG4gICAgICAgIGxldCByb3RhdGVkO1xuXG4gICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGF4ZXMubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgY29uc3QgYXhpcyA9IGF4ZXNbaWR4XTtcbiAgICAgICAgICAgIGlmIChheGlzLmF1dG9Sb3RhdGVMYWJlbHMoKSkge1xuICAgICAgICAgICAgICAgIHJvdGF0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJvdGF0ZWQpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IHBhbmVzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlZmxvd1BhbmVBeGVzKHBhbmVzW2lkeF0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZ3JvdXBlZEF4ZXMueC5sZW5ndGggPiAwICYmIGdyb3VwZWRBeGVzLnkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWxpZ25BeGVzKGdyb3VwZWRBeGVzLngsIGdyb3VwZWRBeGVzLnkpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2hyaW5rQXhpc1dpZHRoKHBhbmVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlZmxvd1BhbmVBeGVzKHBhbmUpIHtcbiAgICAgICAgY29uc3QgYXhlcyA9IHBhbmUuYXhlcztcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gYXhlcy5sZW5ndGg7XG5cbiAgICAgICAgaWYgKGxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBheGVzW2ldLnJlZmxvdyhwYW5lLmNvbnRlbnRCb3gpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVmbG93Q2hhcnRzKHBhbmVzKSB7XG4gICAgICAgIGNvbnN0IGNoYXJ0cyA9IHRoaXMuY2hhcnRzO1xuICAgICAgICBjb25zdCBjb3VudCA9IGNoYXJ0cy5sZW5ndGg7XG4gICAgICAgIGNvbnN0IGJveCA9IHRoaXMuYm94O1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgY2hhcnRQYW5lID0gY2hhcnRzW2ldLnBhbmU7XG4gICAgICAgICAgICBpZiAoIWNoYXJ0UGFuZSB8fCBpbkFycmF5KGNoYXJ0UGFuZSwgcGFuZXMpKSB7XG4gICAgICAgICAgICAgICAgY2hhcnRzW2ldLnJlZmxvdyhib3gpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVmbG93UGFuZXMoKSB7XG4gICAgICAgIGNvbnN0IHsgYm94LCBwYW5lcyB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgcGFuZXNMZW5ndGggPSBwYW5lcy5sZW5ndGg7XG4gICAgICAgIGxldCByZW1haW5pbmdIZWlnaHQgPSBib3guaGVpZ2h0KCk7XG4gICAgICAgIGxldCByZW1haW5pbmdQYW5lcyA9IHBhbmVzTGVuZ3RoO1xuICAgICAgICBsZXQgYXV0b0hlaWdodFBhbmVzID0gMDtcbiAgICAgICAgbGV0IHRvcCA9IGJveC55MTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhbmVzTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRQYW5lID0gcGFuZXNbaV07XG4gICAgICAgICAgICBjb25zdCBoZWlnaHQgPSBjdXJyZW50UGFuZS5vcHRpb25zLmhlaWdodDtcblxuICAgICAgICAgICAgY3VycmVudFBhbmUub3B0aW9ucy53aWR0aCA9IGJveC53aWR0aCgpO1xuXG4gICAgICAgICAgICBpZiAoIWN1cnJlbnRQYW5lLm9wdGlvbnMuaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgYXV0b0hlaWdodFBhbmVzKys7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChoZWlnaHQuaW5kZXhPZiAmJiBoZWlnaHQuaW5kZXhPZihcIiVcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGVyY2VudHMgPSBwYXJzZUludChoZWlnaHQsIDEwKSAvIDEwMDtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFBhbmUub3B0aW9ucy5oZWlnaHQgPSBwZXJjZW50cyAqIGJveC5oZWlnaHQoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjdXJyZW50UGFuZS5yZWZsb3coYm94LmNsb25lKCkpO1xuXG4gICAgICAgICAgICAgICAgcmVtYWluaW5nSGVpZ2h0IC09IGN1cnJlbnRQYW5lLm9wdGlvbnMuaGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYW5lc0xlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50UGFuZSA9IHBhbmVzW2ldO1xuXG4gICAgICAgICAgICBpZiAoIWN1cnJlbnRQYW5lLm9wdGlvbnMuaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFBhbmUub3B0aW9ucy5oZWlnaHQgPSByZW1haW5pbmdIZWlnaHQgLyBhdXRvSGVpZ2h0UGFuZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhbmVzTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRQYW5lID0gcGFuZXNbaV07XG4gICAgICAgICAgICBjb25zdCBwYW5lQm94ID0gYm94XG4gICAgICAgICAgICAgICAgLmNsb25lKClcbiAgICAgICAgICAgICAgICAubW92ZShib3gueDEsIHRvcCk7XG5cbiAgICAgICAgICAgIGN1cnJlbnRQYW5lLnJlZmxvdyhwYW5lQm94KTtcblxuICAgICAgICAgICAgcmVtYWluaW5nUGFuZXMtLTtcbiAgICAgICAgICAgIHRvcCArPSBjdXJyZW50UGFuZS5vcHRpb25zLmhlaWdodDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGJhY2tncm91bmRCb3goKSB7XG4gICAgICAgIGNvbnN0IGF4ZXMgPSB0aGlzLmF4ZXM7XG4gICAgICAgIGNvbnN0IGF4ZXNDb3VudCA9IGF4ZXMubGVuZ3RoO1xuICAgICAgICBsZXQgYm94O1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXhlc0NvdW50OyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGF4aXNBID0gYXhlc1tpXTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBheGVzQ291bnQ7IGorKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGF4aXNCID0gYXhlc1tqXTtcblxuICAgICAgICAgICAgICAgIGlmIChheGlzQS5vcHRpb25zLnZlcnRpY2FsICE9PSBheGlzQi5vcHRpb25zLnZlcnRpY2FsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVCb3ggPSBheGlzQS5saW5lQm94KCkuY2xvbmUoKS53cmFwKGF4aXNCLmxpbmVCb3goKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFib3gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJveCA9IGxpbmVCb3g7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib3ggPSBib3gud3JhcChsaW5lQm94KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBib3ggfHwgdGhpcy5ib3g7XG4gICAgfVxuXG4gICAgY2hhcnRzQm94ZXMoKSB7XG4gICAgICAgIGNvbnN0IHBhbmVzID0gdGhpcy5wYW5lcztcbiAgICAgICAgY29uc3QgYm94ZXMgPSBbXTtcblxuICAgICAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBwYW5lcy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgICAgICBib3hlcy5wdXNoKHBhbmVzW2lkeF0uY2hhcnRzQm94KCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGJveGVzO1xuICAgIH1cblxuICAgIGFkZEJhY2tncm91bmRQYXRocyhtdWx0aXBhdGgpIHtcbiAgICAgICAgY29uc3QgYm94ZXMgPSB0aGlzLmNoYXJ0c0JveGVzKCk7XG4gICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGJveGVzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgICAgIG11bHRpcGF0aC5wYXRocy5wdXNoKGRyYXcuUGF0aC5mcm9tUmVjdChib3hlc1tpZHhdLnRvUmVjdCgpKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBiYWNrZ3JvdW5kQ29udGFpbnNQb2ludChwb2ludCkge1xuICAgICAgICBjb25zdCBib3hlcyA9IHRoaXMuY2hhcnRzQm94ZXMoKTtcbiAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgYm94ZXMubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgaWYgKGJveGVzW2lkeF0uY29udGFpbnNQb2ludChwb2ludCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNyZWF0ZVZpc3VhbCgpIHtcbiAgICAgICAgc3VwZXIuY3JlYXRlVmlzdWFsKCk7XG5cbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucy5wbG90QXJlYTtcbiAgICAgICAgbGV0IHsgb3BhY2l0eSwgYmFja2dyb3VuZCwgYm9yZGVyID0ge30gfSA9IG9wdGlvbnM7XG4gICAgICAgIGlmIChpc1RyYW5zcGFyZW50KGJhY2tncm91bmQpKSB7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kID0gV0hJVEU7XG4gICAgICAgICAgICBvcGFjaXR5ID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGJnID0gdGhpcy5fYmdWaXN1YWwgPSBuZXcgZHJhdy5NdWx0aVBhdGgoe1xuICAgICAgICAgICAgZmlsbDoge1xuICAgICAgICAgICAgICAgIGNvbG9yOiBiYWNrZ3JvdW5kLFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IG9wYWNpdHlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdHJva2U6IHtcbiAgICAgICAgICAgICAgICBjb2xvcjogYm9yZGVyLndpZHRoID8gYm9yZGVyLmNvbG9yIDogXCJcIixcbiAgICAgICAgICAgICAgICB3aWR0aDogYm9yZGVyLndpZHRoLFxuICAgICAgICAgICAgICAgIGRhc2hUeXBlOiBib3JkZXIuZGFzaFR5cGVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB6SW5kZXg6IC0xXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuYWRkQmFja2dyb3VuZFBhdGhzKGJnKTtcblxuICAgICAgICB0aGlzLmFwcGVuZFZpc3VhbChiZyk7XG4gICAgfVxuXG4gICAgcG9pbnRzQnlDYXRlZ29yeUluZGV4KGNhdGVnb3J5SW5kZXgpIHtcbiAgICAgICAgY29uc3QgY2hhcnRzID0gdGhpcy5jaGFydHM7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuXG4gICAgICAgIGlmIChjYXRlZ29yeUluZGV4ICE9PSBudWxsKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoYXJ0ID0gY2hhcnRzW2ldO1xuICAgICAgICAgICAgICAgIGlmIChjaGFydC5wYW5lLm9wdGlvbnMubmFtZSA9PT0gXCJfbmF2aWdhdG9yXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgcG9pbnRzID0gY2hhcnRzW2ldLmNhdGVnb3J5UG9pbnRzW2NhdGVnb3J5SW5kZXhdO1xuICAgICAgICAgICAgICAgIGlmIChwb2ludHMgJiYgcG9pbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHBvaW50cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcG9pbnQgPSBwb2ludHNbal07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9pbnQgJiYgZGVmaW5lZChwb2ludC52YWx1ZSkgJiYgcG9pbnQudmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChwb2ludCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHBvaW50c0J5U2VyaWVzSW5kZXgoc2VyaWVzSW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyUG9pbnRzKGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgICAgICAgICByZXR1cm4gcG9pbnQuc2VyaWVzLmluZGV4ID09PSBzZXJpZXNJbmRleDtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcG9pbnRzQnlTZXJpZXNOYW1lKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyUG9pbnRzKGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgICAgICAgICByZXR1cm4gcG9pbnQuc2VyaWVzLm5hbWUgPT09IG5hbWU7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZpbHRlclBvaW50cyhjYWxsYmFjaykge1xuICAgICAgICBjb25zdCBjaGFydHMgPSB0aGlzLmNoYXJ0cztcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGNoYXJ0ID0gY2hhcnRzW2ldO1xuICAgICAgICAgICAgY29uc3QgcG9pbnRzID0gY2hhcnQucG9pbnRzO1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBwb2ludHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwb2ludCA9IHBvaW50c1tqXTtcbiAgICAgICAgICAgICAgICBpZiAocG9pbnQgJiYgcG9pbnQudmlzaWJsZSAhPT0gZmFsc2UgJiYgY2FsbGJhY2socG9pbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHBvaW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGZpbmRQb2ludChjYWxsYmFjaykge1xuICAgICAgICBjb25zdCBjaGFydHMgPSB0aGlzLmNoYXJ0cztcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgY2hhcnQgPSBjaGFydHNbaV07XG4gICAgICAgICAgICBjb25zdCBwb2ludHMgPSBjaGFydC5wb2ludHM7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHBvaW50cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBvaW50ID0gcG9pbnRzW2pdO1xuICAgICAgICAgICAgICAgIGlmIChwb2ludCAmJiBwb2ludC52aXNpYmxlICE9PSBmYWxzZSAmJiBjYWxsYmFjayhwb2ludCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBvaW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHBhbmVCeVBvaW50KHBvaW50KSB7XG4gICAgICAgIGNvbnN0IHBhbmVzID0gdGhpcy5wYW5lcztcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBwYW5lID0gcGFuZXNbaV07XG4gICAgICAgICAgICBpZiAocGFuZS5ib3guY29udGFpbnNQb2ludChwb2ludCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFuZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRldGFjaExhYmVscygpIHtcbiAgICAgICAgY29uc3QgYXhlcyA9IHRoaXMuZ3JvdXBBeGVzKHRoaXMucGFuZXMpO1xuICAgICAgICBjb25zdCB4QXhlcyA9IGF4ZXMueDtcbiAgICAgICAgY29uc3QgeUF4ZXMgPSBheGVzLnk7XG5cbiAgICAgICAgdGhpcy5kZXRhY2hBeGlzR3JvdXBMYWJlbHMoeUF4ZXMsIHhBeGVzKTtcbiAgICAgICAgdGhpcy5kZXRhY2hBeGlzR3JvdXBMYWJlbHMoeEF4ZXMsIHlBeGVzKTtcbiAgICB9XG5cbiAgICBkZXRhY2hBeGlzR3JvdXBMYWJlbHMoYXhlcywgY3Jvc3NpbmdBeGVzKSB7XG4gICAgICAgIGxldCBsYWJlbEF4aXNDb3VudCA9IDA7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBheGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBheGlzID0gYXhlc1tpXTtcbiAgICAgICAgICAgIGNvbnN0IHBhbmUgPSBheGlzLnBhbmU7XG4gICAgICAgICAgICBjb25zdCBhbmNob3IgPSBwYW5lQW5jaG9yKGNyb3NzaW5nQXhlcywgcGFuZSkgfHwgY3Jvc3NpbmdBeGVzWzBdO1xuICAgICAgICAgICAgY29uc3QgYXhpc0luZGV4ID0gaSArIGxhYmVsQXhpc0NvdW50O1xuICAgICAgICAgICAgY29uc3QgbGFiZWxBeGlzID0gdGhpcy5jcmVhdGVMYWJlbEF4aXMoYXhpcywgYXhpc0luZGV4LCBhbmNob3IpO1xuXG4gICAgICAgICAgICBpZiAobGFiZWxBeGlzKSB7XG4gICAgICAgICAgICAgICAgbGFiZWxBeGlzQ291bnQrKztcblxuICAgICAgICAgICAgICAgIGNvbnN0IHBvcyA9IHBhbmUuYXhlcy5pbmRleE9mKGF4aXMpICsgbGFiZWxBeGlzQ291bnQ7XG4gICAgICAgICAgICAgICAgcGFuZS5hcHBlbmRBeGlzQXQobGFiZWxBeGlzLCBwb3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY3JlYXRlTGFiZWxBeGlzKGF4aXMsIGF4aXNJbmRleCwgYW5jaG9yKSB7XG4gICAgICAgIGNvbnN0IGxhYmVsT3B0aW9ucyA9IGF4aXMub3B0aW9ucy5sYWJlbHM7XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0gbGFiZWxPcHRpb25zLnBvc2l0aW9uO1xuICAgICAgICBjb25zdCBvbkF4aXMgPSBwb3NpdGlvbiAhPT0gRU5EICYmIHBvc2l0aW9uICE9PSBTVEFSVDtcbiAgICAgICAgY29uc3QgdmlzaWJsZSA9IGxhYmVsT3B0aW9ucy52aXNpYmxlO1xuXG4gICAgICAgIGlmIChvbkF4aXMgfHwgdmlzaWJsZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYWxsQXhlcyA9IHRoaXMuZ3JvdXBBeGVzKHRoaXMucGFuZXMpO1xuICAgICAgICBjb25zdCBjcm9zc2luZ0F4ZXMgPSBhbmNob3Iub3B0aW9ucy52ZXJ0aWNhbCA/IGFsbEF4ZXMueCA6IGFsbEF4ZXMueTtcbiAgICAgICAgY29uc3QgYW5jaG9yQ3Jvc3NpbmdzID0gdGhpcy5heGlzQ3Jvc3NpbmdWYWx1ZXMoYW5jaG9yLCBjcm9zc2luZ0F4ZXMpO1xuICAgICAgICBjb25zdCBlbmQgPSBwb3NpdGlvbiA9PT0gRU5EO1xuICAgICAgICBjb25zdCByYW5nZSA9IGFuY2hvci5yYW5nZSgpO1xuICAgICAgICBjb25zdCBlZGdlID0gZW5kID8gcmFuZ2UubWF4IDogcmFuZ2UubWluO1xuICAgICAgICBjb25zdCBjcm9zc2luZ1ZhbHVlID0gbGltaXRWYWx1ZShhbmNob3JDcm9zc2luZ3NbYXhpc0luZGV4XSwgcmFuZ2UubWluLCByYW5nZS5tYXgpO1xuXG4gICAgICAgIGlmIChjcm9zc2luZ1ZhbHVlIC0gZWRnZSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBhbmNob3JDcm9zc2luZ3Muc3BsaWNlKGF4aXNJbmRleCArIDEsIDAsIGVkZ2UpO1xuICAgICAgICBhbmNob3Iub3B0aW9ucy5heGlzQ3Jvc3NpbmdWYWx1ZXMgPSBhbmNob3JDcm9zc2luZ3M7XG5cbiAgICAgICAgY29uc3QgbGFiZWxBeGlzID0gYXhpcy5jbG9uZSgpO1xuICAgICAgICBheGlzLmNsZWFyKCk7XG5cbiAgICAgICAgbGFiZWxBeGlzLm9wdGlvbnMubmFtZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgbGFiZWxBeGlzLm9wdGlvbnMubGluZS52aXNpYmxlID0gZmFsc2U7XG5cbiAgICAgICAgbGFiZWxBeGlzLm9wdGlvbnMuY3Jvc3NoYWlyID0gdW5kZWZpbmVkO1xuICAgICAgICBsYWJlbEF4aXMub3B0aW9ucy5ub3RlcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgbGFiZWxBeGlzLm9wdGlvbnMucGxvdEJhbmRzID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIHJldHVybiBsYWJlbEF4aXM7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpc1NpbmdsZUF4aXMoYXhpcykge1xuICAgIHJldHVybiAhYXhpcy5wYW5lLmF4ZXMuc29tZSgoYSkgPT5cbiAgICAgICAgYS5vcHRpb25zLnZlcnRpY2FsID09PSBheGlzLm9wdGlvbnMudmVydGljYWwgJiYgYSAhPT0gYXhpcyAmJiBhLm9wdGlvbnMudmlzaWJsZSAhPT0gZmFsc2VcbiAgICApO1xufVxuXG5mdW5jdGlvbiBheGlzR3JvdXBCb3goYXhlcykge1xuICAgIGNvbnN0IGxlbmd0aCA9IGF4ZXMubGVuZ3RoO1xuICAgIGxldCBib3g7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGF4aXMgPSBheGVzW2ldO1xuICAgICAgICBjb25zdCB2aXNpYmxlID0gYXhpcy5vcHRpb25zLnZpc2libGUgIT09IGZhbHNlO1xuICAgICAgICBpZiAodmlzaWJsZSB8fCBpc1NpbmdsZUF4aXMoYXhpcykpIHtcbiAgICAgICAgICAgIGNvbnN0IGF4aXNCb3ggPSB2aXNpYmxlID8gYXhpcy5jb250ZW50Qm94KCkgOiBheGlzLmxpbmVCb3goKTtcblxuICAgICAgICAgICAgaWYgKCFib3gpIHtcbiAgICAgICAgICAgICAgICBib3ggPSBheGlzQm94LmNsb25lKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGJveC53cmFwKGF4aXNCb3gpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGJveCB8fCBuZXcgQm94KCk7XG59XG5cbmZ1bmN0aW9uIHBhbmVBbmNob3IoYXhlcywgcGFuZSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXhlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBhbmNob3IgPSBheGVzW2ldO1xuICAgICAgICBpZiAoYW5jaG9yICYmIGFuY2hvci5wYW5lID09PSBwYW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gYW5jaG9yO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpc1RyYW5zcGFyZW50KGNvbG9yKSB7XG4gICAgcmV0dXJuIGNvbG9yID09PSBcIlwiIHx8IGNvbG9yID09PSBudWxsIHx8IGNvbG9yID09PSBcIm5vbmVcIiB8fCBjb2xvciA9PT0gXCJ0cmFuc3BhcmVudFwiIHx8ICFkZWZpbmVkKGNvbG9yKTtcbn1cblxuY29uc3QgYWxsUGFuZUF4ZXMgPSAocGFuZXMpID0+IHBhbmVzLnJlZHVjZSgoYWNjLCBwYW5lKSA9PiBhY2MuY29uY2F0KHBhbmUuYXhlcyksIFtdKTtcblxuc2V0RGVmYXVsdE9wdGlvbnMoUGxvdEFyZWFCYXNlLCB7XG4gICAgc2VyaWVzOiBbXSxcbiAgICBwbG90QXJlYToge1xuICAgICAgICBtYXJnaW46IHt9XG4gICAgfSxcbiAgICBiYWNrZ3JvdW5kOiBcIlwiLFxuICAgIGJvcmRlcjoge1xuICAgICAgICBjb2xvcjogQkxBQ0ssXG4gICAgICAgIHdpZHRoOiAwXG4gICAgfSxcbiAgICBsZWdlbmQ6IHtcbiAgICAgICAgaW5hY3RpdmVJdGVtczoge1xuICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgY29sb3I6IFwiIzkxOTE5MVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbWFya2Vyczoge1xuICAgICAgICAgICAgICAgIGNvbG9yOiBcIiM5MTkxOTFcIlxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IFBsb3RBcmVhQmFzZTtcbiIsImltcG9ydCB7IFBMT1RfQVJFQV9IT1ZFUiwgUExPVF9BUkVBX0NMSUNLIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcblxuY29uc3QgUGxvdEFyZWFFdmVudHNNaXhpbiA9IHtcbiAgICBob3ZlcjogZnVuY3Rpb24oY2hhcnQsIGUpIHtcbiAgICAgICAgdGhpcy5fZGlzcGF0Y2hFdmVudChjaGFydCwgZSwgUExPVF9BUkVBX0hPVkVSKTtcbiAgICB9LFxuXG4gICAgY2xpY2s6IGZ1bmN0aW9uKGNoYXJ0LCBlKSB7XG4gICAgICAgIHRoaXMuX2Rpc3BhdGNoRXZlbnQoY2hhcnQsIGUsIFBMT1RfQVJFQV9DTElDSyk7XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgUGxvdEFyZWFFdmVudHNNaXhpbjsiLCJpbXBvcnQgQWdncmVnYXRlcyBmcm9tICcuL2FnZ3JlZ2F0ZXMnO1xuXG5pbXBvcnQgeyBDbGFzcywgZGVmaW5lZCwgaW5BcnJheSwgaXNBcnJheSwgaXNGdW5jdGlvbiwgaXNOdW1iZXIsIGlzT2JqZWN0IH0gZnJvbSAnLi4vLi4vY29tbW9uJztcblxuY2xhc3MgU2VyaWVzQWdncmVnYXRvciBleHRlbmRzIENsYXNzIHtcbiAgICBjb25zdHJ1Y3RvcihzZXJpZXMsIGJpbmRlciwgZGVmYXVsdEFnZ3JlZ2F0ZXMpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICBjb25zdCBjYW5vbmljYWxGaWVsZHMgPSBiaW5kZXIuY2Fub25pY2FsRmllbGRzKHNlcmllcyk7XG4gICAgICAgIGNvbnN0IHZhbHVlRmllbGRzID0gYmluZGVyLnZhbHVlRmllbGRzKHNlcmllcyk7XG4gICAgICAgIGNvbnN0IHNvdXJjZUZpZWxkcyA9IGJpbmRlci5zb3VyY2VGaWVsZHMoc2VyaWVzLCBjYW5vbmljYWxGaWVsZHMpO1xuICAgICAgICBjb25zdCBzZXJpZXNGaWVsZHMgPSB0aGlzLl9zZXJpZXNGaWVsZHMgPSBbXTtcbiAgICAgICAgY29uc3QgZGVmYXVsdHMgPSBkZWZhdWx0QWdncmVnYXRlcy5xdWVyeShzZXJpZXMudHlwZSk7XG4gICAgICAgIGNvbnN0IHJvb3RBZ2dyZWdhdGUgPSBzZXJpZXMuYWdncmVnYXRlIHx8IGRlZmF1bHRzO1xuXG4gICAgICAgIHRoaXMuX3NlcmllcyA9IHNlcmllcztcbiAgICAgICAgdGhpcy5fYmluZGVyID0gYmluZGVyO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2Fub25pY2FsRmllbGRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBmaWVsZCA9IGNhbm9uaWNhbEZpZWxkc1tpXTtcbiAgICAgICAgICAgIGxldCBmaWVsZEFnZ3JlZ2F0ZTtcblxuICAgICAgICAgICAgaWYgKGlzT2JqZWN0KHJvb3RBZ2dyZWdhdGUpKSB7XG4gICAgICAgICAgICAgICAgZmllbGRBZ2dyZWdhdGUgPSByb290QWdncmVnYXRlW2ZpZWxkXTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaSA9PT0gMCB8fCBpbkFycmF5KGZpZWxkLCB2YWx1ZUZpZWxkcykpIHtcbiAgICAgICAgICAgICAgICBmaWVsZEFnZ3JlZ2F0ZSA9IHJvb3RBZ2dyZWdhdGU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZmllbGRBZ2dyZWdhdGUpIHtcbiAgICAgICAgICAgICAgICBzZXJpZXNGaWVsZHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGNhbm9uaWNhbE5hbWU6IGZpZWxkLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBzb3VyY2VGaWVsZHNbaV0sXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogaXNGdW5jdGlvbihmaWVsZEFnZ3JlZ2F0ZSkgPyBmaWVsZEFnZ3JlZ2F0ZSA6IEFnZ3JlZ2F0ZXNbZmllbGRBZ2dyZWdhdGVdXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhZ2dyZWdhdGVQb2ludHMoc3JjUG9pbnRzLCBncm91cCkge1xuICAgICAgICBjb25zdCB7IF9zZXJpZXM6IHNlcmllcywgX3Nlcmllc0ZpZWxkczogc2VyaWVzRmllbGRzIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5fYmluZFBvaW50cyhzcmNQb2ludHMgfHwgW10pO1xuICAgICAgICBjb25zdCBmaXJzdERhdGFJdGVtID0gZGF0YS5kYXRhSXRlbXNbMF07XG4gICAgICAgIGxldCByZXN1bHQgPSB7fTtcblxuICAgICAgICBpZiAoZmlyc3REYXRhSXRlbSAmJiAhaXNOdW1iZXIoZmlyc3REYXRhSXRlbSkgJiYgIWlzQXJyYXkoZmlyc3REYXRhSXRlbSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGZuID0gZnVuY3Rpb24oKSB7fTtcbiAgICAgICAgICAgIGZuLnByb3RvdHlwZSA9IGZpcnN0RGF0YUl0ZW07XG4gICAgICAgICAgICByZXN1bHQgPSBuZXcgZm4oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VyaWVzRmllbGRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBmaWVsZCA9IHNlcmllc0ZpZWxkc1tpXTtcbiAgICAgICAgICAgIGNvbnN0IHNyY1ZhbHVlcyA9IHRoaXMuX2JpbmRGaWVsZChkYXRhLnZhbHVlcywgZmllbGQuY2Fub25pY2FsTmFtZSk7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGZpZWxkLnRyYW5zZm9ybShzcmNWYWx1ZXMsIHNlcmllcywgZGF0YS5kYXRhSXRlbXMsIGdyb3VwKTtcblxuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBudWxsICYmIGlzT2JqZWN0KHZhbHVlKSAmJiAhZGVmaW5lZCh2YWx1ZS5sZW5ndGgpICYmICEodmFsdWUgaW5zdGFuY2VvZiBEYXRlKSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0VmFsdWUoZmllbGQubmFtZSwgcmVzdWx0LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBfYmluZFBvaW50cyhwb2ludHMpIHtcbiAgICAgICAgY29uc3QgeyBfYmluZGVyOiBiaW5kZXIsIF9zZXJpZXM6IHNlcmllcyB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgdmFsdWVzID0gW107XG4gICAgICAgIGNvbnN0IGRhdGFJdGVtcyA9IFtdO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBwb2ludEl4ID0gcG9pbnRzW2ldO1xuXG4gICAgICAgICAgICB2YWx1ZXMucHVzaChiaW5kZXIuYmluZFBvaW50KHNlcmllcywgcG9pbnRJeCkpO1xuICAgICAgICAgICAgZGF0YUl0ZW1zLnB1c2goc2VyaWVzLmRhdGFbcG9pbnRJeF0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlczogdmFsdWVzLFxuICAgICAgICAgICAgZGF0YUl0ZW1zOiBkYXRhSXRlbXNcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBfYmluZEZpZWxkKGRhdGEsIGZpZWxkKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlcyA9IFtdO1xuICAgICAgICBjb25zdCBjb3VudCA9IGRhdGEubGVuZ3RoO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgaXRlbSA9IGRhdGFbaV07XG4gICAgICAgICAgICBjb25zdCB2YWx1ZUZpZWxkcyA9IGl0ZW0udmFsdWVGaWVsZHM7XG4gICAgICAgICAgICBsZXQgdmFsdWU7XG5cbiAgICAgICAgICAgIGlmIChkZWZpbmVkKHZhbHVlRmllbGRzW2ZpZWxkXSkpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlRmllbGRzW2ZpZWxkXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBpdGVtLmZpZWxkc1tmaWVsZF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzZXRWYWx1ZShmaWVsZE5hbWUsIHRhcmdldCwgdmFsdWUpIHtcbiAgICBsZXQgcGFyZW50T2JqID0gdGFyZ2V0O1xuICAgIGxldCBmaWVsZCA9IGZpZWxkTmFtZTtcblxuICAgIGlmIChmaWVsZE5hbWUuaW5kZXhPZihcIi5cIikgPiAtMSkge1xuICAgICAgICBjb25zdCBwYXJ0cyA9IGZpZWxkTmFtZS5zcGxpdChcIi5cIik7XG5cbiAgICAgICAgd2hpbGUgKHBhcnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIGZpZWxkID0gcGFydHMuc2hpZnQoKTtcbiAgICAgICAgICAgIGlmICghZGVmaW5lZChwYXJlbnRPYmpbZmllbGRdKSkge1xuICAgICAgICAgICAgICAgIHBhcmVudE9ialtmaWVsZF0gPSB7fTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcmVudE9iaiA9IHBhcmVudE9ialtmaWVsZF07XG4gICAgICAgIH1cbiAgICAgICAgZmllbGQgPSBwYXJ0cy5zaGlmdCgpO1xuICAgIH1cblxuICAgIHBhcmVudE9ialtmaWVsZF0gPSB2YWx1ZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgU2VyaWVzQWdncmVnYXRvcjsiLCJpbXBvcnQgeyBDbGFzcyB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5cbmNsYXNzIERlZmF1bHRBZ2dyZWdhdGVzIGV4dGVuZHMgQ2xhc3Mge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMuX2RlZmF1bHRzID0ge307XG4gICAgfVxuXG4gICAgcmVnaXN0ZXIoc2VyaWVzVHlwZXMsIGFnZ3JlZ2F0ZXMpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXJpZXNUeXBlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5fZGVmYXVsdHNbc2VyaWVzVHlwZXNbaV1dID0gYWdncmVnYXRlcztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHF1ZXJ5KHNlcmllc1R5cGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZmF1bHRzW3Nlcmllc1R5cGVdO1xuICAgIH1cbn1cblxuRGVmYXVsdEFnZ3JlZ2F0ZXMuY3VycmVudCA9IG5ldyBEZWZhdWx0QWdncmVnYXRlcygpO1xuXG5leHBvcnQgZGVmYXVsdCBEZWZhdWx0QWdncmVnYXRlczsiLCJpbXBvcnQgQmFyIGZyb20gJy4uL2Jhci1jaGFydC9iYXInO1xuaW1wb3J0IEJhckxhYmVsIGZyb20gJy4uL2Jhci1jaGFydC9iYXItbGFiZWwnO1xuXG5pbXBvcnQgeyBkZWVwRXh0ZW5kLCBnZXRUZW1wbGF0ZSB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5cbmNsYXNzIFJhbmdlQmFyIGV4dGVuZHMgQmFyIHtcbiAgICBjcmVhdGVMYWJlbCgpIHtcbiAgICAgICAgY29uc3QgbGFiZWxzID0gdGhpcy5vcHRpb25zLmxhYmVscztcbiAgICAgICAgY29uc3QgZnJvbU9wdGlvbnMgPSBkZWVwRXh0ZW5kKHt9LCBsYWJlbHMsIGxhYmVscy5mcm9tKTtcbiAgICAgICAgY29uc3QgdG9PcHRpb25zID0gZGVlcEV4dGVuZCh7fSwgbGFiZWxzLCBsYWJlbHMudG8pO1xuXG4gICAgICAgIGlmIChmcm9tT3B0aW9ucy52aXNpYmxlKSB7XG4gICAgICAgICAgICB0aGlzLmxhYmVsRnJvbSA9IHRoaXMuX2NyZWF0ZUxhYmVsKGZyb21PcHRpb25zKTtcbiAgICAgICAgICAgIHRoaXMuYXBwZW5kKHRoaXMubGFiZWxGcm9tKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0b09wdGlvbnMudmlzaWJsZSkge1xuICAgICAgICAgICAgdGhpcy5sYWJlbFRvID0gdGhpcy5fY3JlYXRlTGFiZWwodG9PcHRpb25zKTtcbiAgICAgICAgICAgIHRoaXMuYXBwZW5kKHRoaXMubGFiZWxUbyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfY3JlYXRlTGFiZWwob3B0aW9ucykge1xuICAgICAgICBjb25zdCBsYWJlbFRlbXBsYXRlID0gZ2V0VGVtcGxhdGUob3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IHBvaW50RGF0YSA9IHRoaXMucG9pbnREYXRhKCk7XG5cbiAgICAgICAgbGV0IGxhYmVsVGV4dDtcblxuICAgICAgICBpZiAobGFiZWxUZW1wbGF0ZSkge1xuICAgICAgICAgICAgbGFiZWxUZXh0ID0gbGFiZWxUZW1wbGF0ZShwb2ludERhdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGFiZWxUZXh0ID0gdGhpcy5mb3JtYXRWYWx1ZShvcHRpb25zLmZvcm1hdCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IEJhckxhYmVsKGxhYmVsVGV4dCxcbiAgICAgICAgICAgIGRlZXBFeHRlbmQoe1xuICAgICAgICAgICAgICAgIHZlcnRpY2FsOiB0aGlzLm9wdGlvbnMudmVydGljYWxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvcHRpb25zXG4gICAgICAgICksIHBvaW50RGF0YSk7XG4gICAgfVxuXG4gICAgcmVmbG93KHRhcmdldEJveCkge1xuICAgICAgICB0aGlzLnJlbmRlcigpO1xuXG4gICAgICAgIGNvbnN0IHsgbGFiZWxGcm9tLCBsYWJlbFRvLCB2YWx1ZSB9ID0gdGhpcztcblxuICAgICAgICB0aGlzLmJveCA9IHRhcmdldEJveDtcblxuICAgICAgICBpZiAobGFiZWxGcm9tKSB7XG4gICAgICAgICAgICBsYWJlbEZyb20ub3B0aW9ucy5hYm92ZUF4aXMgPSB2YWx1ZS5mcm9tID4gdmFsdWUudG87XG4gICAgICAgICAgICBsYWJlbEZyb20ucmVmbG93KHRhcmdldEJveCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGFiZWxUbykge1xuICAgICAgICAgICAgbGFiZWxUby5vcHRpb25zLmFib3ZlQXhpcyA9IHZhbHVlLnRvID4gdmFsdWUuZnJvbTtcbiAgICAgICAgICAgIGxhYmVsVG8ucmVmbG93KHRhcmdldEJveCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5ub3RlKSB7XG4gICAgICAgICAgICB0aGlzLm5vdGUucmVmbG93KHRhcmdldEJveCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cblJhbmdlQmFyLnByb3RvdHlwZS5kZWZhdWx0cyA9IGRlZXBFeHRlbmQoe30sIFJhbmdlQmFyLnByb3RvdHlwZS5kZWZhdWx0cywge1xuICAgIGxhYmVsczoge1xuICAgICAgICBmb3JtYXQ6IFwiezB9IC0gezF9XCJcbiAgICB9LFxuICAgIHRvb2x0aXA6IHtcbiAgICAgICAgZm9ybWF0OiBcInsxfVwiXG4gICAgfVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IFJhbmdlQmFyOyIsImltcG9ydCBCYXJDaGFydCBmcm9tICcuLi9iYXItY2hhcnQvYmFyLWNoYXJ0JztcbmltcG9ydCBSYW5nZUJhciBmcm9tICcuL3JhbmdlLWJhcic7XG5pbXBvcnQgQ2F0ZWdvcmljYWxDaGFydCBmcm9tICcuLi9jYXRlZ29yaWNhbC1jaGFydCc7XG5cbmltcG9ydCB7IE1JTl9WQUxVRSwgTUFYX1ZBTFVFIH0gZnJvbSAnLi4vLi4vY29tbW9uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBpc051bWJlciB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5cbmNsYXNzIFJhbmdlQmFyQ2hhcnQgZXh0ZW5kcyBCYXJDaGFydCB7XG4gICAgcG9pbnRUeXBlKCkge1xuICAgICAgICByZXR1cm4gUmFuZ2VCYXI7XG4gICAgfVxuXG4gICAgcG9pbnRWYWx1ZShkYXRhKSB7XG4gICAgICAgIHJldHVybiBkYXRhLnZhbHVlRmllbGRzO1xuICAgIH1cblxuICAgIGZvcm1hdFBvaW50VmFsdWUocG9pbnQsIGZvcm1hdCkge1xuICAgICAgICBpZiAocG9pbnQudmFsdWUuZnJvbSA9PT0gbnVsbCAmJiBwb2ludC52YWx1ZS50byA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5jaGFydFNlcnZpY2UuZm9ybWF0LmF1dG8oZm9ybWF0LCBwb2ludC52YWx1ZS5mcm9tLCBwb2ludC52YWx1ZS50byk7XG4gICAgfVxuXG4gICAgcGxvdFJhbmdlKHBvaW50KSB7XG4gICAgICAgIGlmICghcG9pbnQpIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFsgcG9pbnQudmFsdWUuZnJvbSwgcG9pbnQudmFsdWUudG8gXTtcbiAgICB9XG5cbiAgICB1cGRhdGVSYW5nZSh2YWx1ZSwgZmllbGRzKSB7XG4gICAgICAgIGNvbnN0IGF4aXNOYW1lID0gZmllbGRzLnNlcmllcy5heGlzO1xuICAgICAgICBjb25zdCB7IGZyb20sIHRvIH0gPSB2YWx1ZTtcbiAgICAgICAgbGV0IGF4aXNSYW5nZSA9IHRoaXMudmFsdWVBeGlzUmFuZ2VzW2F4aXNOYW1lXTtcblxuICAgICAgICBpZiAodmFsdWUgIT09IG51bGwgJiYgaXNOdW1iZXIoZnJvbSkgJiYgaXNOdW1iZXIodG8pKSB7XG4gICAgICAgICAgICBheGlzUmFuZ2UgPSB0aGlzLnZhbHVlQXhpc1Jhbmdlc1theGlzTmFtZV0gPSBheGlzUmFuZ2UgfHwgeyBtaW46IE1BWF9WQUxVRSwgbWF4OiBNSU5fVkFMVUUgfTtcblxuICAgICAgICAgICAgYXhpc1JhbmdlLm1pbiA9IE1hdGgubWluKGF4aXNSYW5nZS5taW4sIGZyb20pO1xuICAgICAgICAgICAgYXhpc1JhbmdlLm1heCA9IE1hdGgubWF4KGF4aXNSYW5nZS5tYXgsIGZyb20pO1xuXG4gICAgICAgICAgICBheGlzUmFuZ2UubWluID0gTWF0aC5taW4oYXhpc1JhbmdlLm1pbiwgdG8pO1xuICAgICAgICAgICAgYXhpc1JhbmdlLm1heCA9IE1hdGgubWF4KGF4aXNSYW5nZS5tYXgsIHRvKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFib3ZlQXhpcyhwb2ludCkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHBvaW50LnZhbHVlO1xuICAgICAgICByZXR1cm4gdmFsdWUuZnJvbSA8IHZhbHVlLnRvO1xuICAgIH1cbn1cblxuUmFuZ2VCYXJDaGFydC5wcm90b3R5cGUucGxvdExpbWl0cyA9IENhdGVnb3JpY2FsQ2hhcnQucHJvdG90eXBlLnBsb3RMaW1pdHM7XG5cbmV4cG9ydCBkZWZhdWx0IFJhbmdlQmFyQ2hhcnQ7IiwiaW1wb3J0IExpbmVQb2ludCBmcm9tICcuLi9saW5lLWNoYXJ0L2xpbmUtcG9pbnQnO1xuXG5jbGFzcyBSYW5nZUxpbmVQb2ludCBleHRlbmRzIExpbmVQb2ludCB7XG4gICAgYWxpYXNGb3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhcmVudDtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJhbmdlTGluZVBvaW50OyIsImltcG9ydCB7IGRyYXdpbmcgYXMgZHJhdyB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1kcmF3aW5nJztcblxuaW1wb3J0IHsgQ2hhcnRFbGVtZW50LCBQb2ludCB9IGZyb20gJy4uLy4uL2NvcmUnO1xuaW1wb3J0IFJhbmdlTGluZVBvaW50IGZyb20gJy4vcmFuZ2UtbGluZS1wb2ludCc7XG5pbXBvcnQgUG9pbnRFdmVudHNNaXhpbiBmcm9tICcuLi9taXhpbnMvcG9pbnQtZXZlbnRzLW1peGluJztcbmltcG9ydCBOb3RlTWl4aW4gZnJvbSAnLi4vbWl4aW5zL25vdGUtbWl4aW4nO1xuXG5pbXBvcnQgeyBMSU5FX01BUktFUl9TSVpFLCBGQURFSU4sIElOSVRJQUxfQU5JTUFUSU9OX0RVUkFUSU9OLCBUT09MVElQX09GRlNFVCwgQUJPVkUsIEJFTE9XIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCB7IFdISVRFLCBDSVJDTEUsIEhJR0hMSUdIVF9aSU5ERVgsIExFRlQsIFJJR0hULCBCT1RUT00sIENFTlRFUiB9IGZyb20gJy4uLy4uL2NvbW1vbi9jb25zdGFudHMnO1xuaW1wb3J0IHsgZGVlcEV4dGVuZCwgdmFsdWVPckRlZmF1bHQsIGdldFNwYWNpbmcgfSBmcm9tICcuLi8uLi9jb21tb24nO1xuXG5jb25zdCBBVVRPID0gJ2F1dG8nO1xuY29uc3QgREVGQVVMVF9GUk9NX0ZPUk1BVCA9ICd7MH0nO1xuY29uc3QgREVGQVVMVF9UT19GT1JNQVQgPSAnezF9JztcblxuY2xhc3MgUmFuZ2VBcmVhUG9pbnQgZXh0ZW5kcyBDaGFydEVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKHZhbHVlLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICB0aGlzLmFib3ZlQXhpcyA9IHZhbHVlT3JEZWZhdWx0KHRoaXMub3B0aW9ucy5hYm92ZUF4aXMsIHRydWUpO1xuICAgICAgICB0aGlzLnRvb2x0aXBUcmFja2luZyA9IHRydWU7XG4gICAgICAgIHRoaXMuaW5pdExhYmVsc0Zvcm1hdCgpO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgaWYgKHRoaXMuX3JlbmRlcmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9yZW5kZXJlZCA9IHRydWU7XG5cbiAgICAgICAgY29uc3QgeyBtYXJrZXJzLCBsYWJlbHMgfSA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLnZhbHVlO1xuXG4gICAgICAgIGNvbnN0IGZyb21Qb2ludCA9IHRoaXMuZnJvbVBvaW50ID0gbmV3IFJhbmdlTGluZVBvaW50KHZhbHVlLCBkZWVwRXh0ZW5kKHt9LCB0aGlzLm9wdGlvbnMsIHtcbiAgICAgICAgICAgIGxhYmVsczogbGFiZWxzLmZyb20sXG4gICAgICAgICAgICBtYXJrZXJzOiBtYXJrZXJzLmZyb21cbiAgICAgICAgfSkpO1xuXG4gICAgICAgIGNvbnN0IHRvUG9pbnQgPSB0aGlzLnRvUG9pbnQgPSBuZXcgUmFuZ2VMaW5lUG9pbnQodmFsdWUsIGRlZXBFeHRlbmQoe30sIHRoaXMub3B0aW9ucywge1xuICAgICAgICAgICAgbGFiZWxzOiBsYWJlbHMudG8sXG4gICAgICAgICAgICBtYXJrZXJzOiBtYXJrZXJzLnRvXG4gICAgICAgIH0pKTtcblxuICAgICAgICB0aGlzLmNvcHlGaWVsZHMoZnJvbVBvaW50KTtcbiAgICAgICAgdGhpcy5jb3B5RmllbGRzKHRvUG9pbnQpO1xuXG4gICAgICAgIHRoaXMuYXBwZW5kKGZyb21Qb2ludCk7XG4gICAgICAgIHRoaXMuYXBwZW5kKHRvUG9pbnQpO1xuICAgIH1cblxuICAgIHJlZmxvdyh0YXJnZXRCb3gpIHtcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcblxuICAgICAgICBjb25zdCB7IGZyb206IGZyb21Cb3gsIHRvOiB0b0JveCB9ID0gdGFyZ2V0Qm94O1xuXG4gICAgICAgIHRoaXMucG9zaXRpb25MYWJlbHMoZnJvbUJveCwgdG9Cb3gpO1xuXG4gICAgICAgIHRoaXMuZnJvbVBvaW50LnJlZmxvdyhmcm9tQm94KTtcbiAgICAgICAgdGhpcy50b1BvaW50LnJlZmxvdyh0b0JveCk7XG5cbiAgICAgICAgdGhpcy5ib3ggPSB0aGlzLmZyb21Qb2ludC5tYXJrZXJCb3goKS5jbG9uZSgpLndyYXAodGhpcy50b1BvaW50Lm1hcmtlckJveCgpKTtcbiAgICB9XG5cbiAgICBjcmVhdGVIaWdobGlnaHQoKSB7XG4gICAgICAgIGNvbnN0IGdyb3VwID0gbmV3IGRyYXcuR3JvdXAoKTtcbiAgICAgICAgZ3JvdXAuYXBwZW5kKHRoaXMuZnJvbVBvaW50LmNyZWF0ZUhpZ2hsaWdodCgpKTtcbiAgICAgICAgZ3JvdXAuYXBwZW5kKHRoaXMudG9Qb2ludC5jcmVhdGVIaWdobGlnaHQoKSk7XG5cbiAgICAgICAgcmV0dXJuIGdyb3VwO1xuICAgIH1cblxuICAgIGhpZ2hsaWdodFZpc3VhbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlzdWFsO1xuICAgIH1cblxuICAgIGhpZ2hsaWdodFZpc3VhbEFyZ3MoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBvcHRpb25zOiB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgICBmcm9tOiB0aGlzLmZyb21Qb2ludC5oaWdobGlnaHRWaXN1YWxBcmdzKCksXG4gICAgICAgICAgICB0bzogdGhpcy50b1BvaW50LmhpZ2hsaWdodFZpc3VhbEFyZ3MoKVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHRvb2x0aXBBbmNob3IoKSB7XG4gICAgICAgIGNvbnN0IGNsaXBCb3ggPSB0aGlzLm93bmVyLnBhbmUuY2xpcEJveCgpO1xuICAgICAgICBjb25zdCBzaG93VG9vbHRpcCA9ICFjbGlwQm94IHx8IGNsaXBCb3gub3ZlcmxhcHModGhpcy5ib3gpO1xuXG4gICAgICAgIGlmIChzaG93VG9vbHRpcCkge1xuICAgICAgICAgICAgY29uc3QgYm94ID0gdGhpcy5ib3g7XG4gICAgICAgICAgICBjb25zdCBjZW50ZXIgPSBib3guY2VudGVyKCk7XG4gICAgICAgICAgICBjb25zdCBob3Jpem9udGFsQWxpZ24gPSBMRUZUO1xuICAgICAgICAgICAgbGV0IHgsIHksIHZlcnRpY2FsQWxpZ247XG5cbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMudmVydGljYWwpIHtcbiAgICAgICAgICAgICAgICB4ID0gY2VudGVyLng7XG4gICAgICAgICAgICAgICAgeSA9IGJveC55MSAtIFRPT0xUSVBfT0ZGU0VUO1xuICAgICAgICAgICAgICAgIHZlcnRpY2FsQWxpZ24gPSBCT1RUT007XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHggPSBib3gueDIgKyBUT09MVElQX09GRlNFVDtcbiAgICAgICAgICAgICAgICB5ID0gY2VudGVyLnk7XG4gICAgICAgICAgICAgICAgdmVydGljYWxBbGlnbiA9IENFTlRFUjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBwb2ludDogbmV3IFBvaW50KHgsIHkpLFxuICAgICAgICAgICAgICAgIGFsaWduOiB7XG4gICAgICAgICAgICAgICAgICAgIGhvcml6b250YWw6IGhvcml6b250YWxBbGlnbixcbiAgICAgICAgICAgICAgICAgICAgdmVydGljYWw6IHZlcnRpY2FsQWxpZ25cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9ybWF0VmFsdWUoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLm93bmVyLmZvcm1hdFBvaW50VmFsdWUodGhpcywgZm9ybWF0KTtcbiAgICB9XG5cbiAgICBvdmVybGFwc0JveChib3gpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYm94Lm92ZXJsYXBzKGJveCk7XG4gICAgfVxuXG4gICAgdW5jbGlwRWxlbWVudHMoKSB7XG4gICAgICAgIHRoaXMuZnJvbVBvaW50LnVuY2xpcEVsZW1lbnRzKCk7XG4gICAgICAgIHRoaXMudG9Qb2ludC51bmNsaXBFbGVtZW50cygpO1xuICAgIH1cblxuICAgIGluaXRMYWJlbHNGb3JtYXQoKSB7XG4gICAgICAgIGNvbnN0IGxhYmVscyA9IHRoaXMub3B0aW9ucy5sYWJlbHM7XG4gICAgICAgIGlmICghbGFiZWxzLmZvcm1hdCkge1xuICAgICAgICAgICAgaWYgKCFsYWJlbHMuZnJvbSB8fCAhbGFiZWxzLmZyb20uZm9ybWF0KSB7XG4gICAgICAgICAgICAgICAgbGFiZWxzLmZyb20gPSBPYmplY3QuYXNzaWduKHt9LCBsYWJlbHMuZnJvbSwge1xuICAgICAgICAgICAgICAgICAgICBmb3JtYXQ6IERFRkFVTFRfRlJPTV9GT1JNQVRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFsYWJlbHMudG8gfHwgIWxhYmVscy50by5mb3JtYXQpIHtcbiAgICAgICAgICAgICAgICBsYWJlbHMudG8gPSBPYmplY3QuYXNzaWduKHt9LCBsYWJlbHMudG8sIHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0OiBERUZBVUxUX1RPX0ZPUk1BVFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcG9zaXRpb25MYWJlbHMoZnJvbUJveCwgdG9Cb3gpIHtcbiAgICAgICAgY29uc3QgeyBsYWJlbHMsIHZlcnRpY2FsIH0gPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAgICAgaWYgKGxhYmVscy5wb3NpdGlvbiA9PT0gQVVUTykge1xuICAgICAgICAgICAgbGV0IGZyb21MYWJlbFBvc2l0aW9uLCB0b0xhYmVsUG9zaXRpb247XG4gICAgICAgICAgICBpZiAodmVydGljYWwpIHtcbiAgICAgICAgICAgICAgICBpZiAodG9Cb3gueTEgPD0gZnJvbUJveC55MSkge1xuICAgICAgICAgICAgICAgICAgICB0b0xhYmVsUG9zaXRpb24gPSBBQk9WRTtcbiAgICAgICAgICAgICAgICAgICAgZnJvbUxhYmVsUG9zaXRpb24gPSBCRUxPVztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0b0xhYmVsUG9zaXRpb24gPSBCRUxPVztcbiAgICAgICAgICAgICAgICAgICAgZnJvbUxhYmVsUG9zaXRpb24gPSBBQk9WRTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0b0JveC54MSA8PSBmcm9tQm94LngxKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvTGFiZWxQb3NpdGlvbiA9IExFRlQ7XG4gICAgICAgICAgICAgICAgICAgIGZyb21MYWJlbFBvc2l0aW9uID0gUklHSFQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdG9MYWJlbFBvc2l0aW9uID0gUklHSFQ7XG4gICAgICAgICAgICAgICAgICAgIGZyb21MYWJlbFBvc2l0aW9uID0gTEVGVDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghbGFiZWxzLmZyb20gfHwgIWxhYmVscy5mcm9tLnBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mcm9tUG9pbnQub3B0aW9ucy5sYWJlbHMucG9zaXRpb24gPSBmcm9tTGFiZWxQb3NpdGlvbjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFsYWJlbHMudG8gfHwgIWxhYmVscy50by5wb3NpdGlvbikge1xuICAgICAgICAgICAgICAgIHRoaXMudG9Qb2ludC5vcHRpb25zLmxhYmVscy5wb3NpdGlvbiA9IHRvTGFiZWxQb3NpdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvcHlGaWVsZHMocG9pbnQpIHtcbiAgICAgICAgcG9pbnQuZGF0YUl0ZW0gPSB0aGlzLmRhdGFJdGVtO1xuICAgICAgICBwb2ludC5jYXRlZ29yeSA9IHRoaXMuY2F0ZWdvcnk7XG4gICAgICAgIHBvaW50LnNlcmllcyA9IHRoaXMuc2VyaWVzO1xuICAgICAgICBwb2ludC5jb2xvciA9IHRoaXMuY29sb3I7XG4gICAgICAgIHBvaW50Lm93bmVyID0gdGhpcy5vd25lcjtcbiAgICB9XG59XG5cbmRlZXBFeHRlbmQoUmFuZ2VBcmVhUG9pbnQucHJvdG90eXBlLCBQb2ludEV2ZW50c01peGluKTtcbmRlZXBFeHRlbmQoUmFuZ2VBcmVhUG9pbnQucHJvdG90eXBlLCBOb3RlTWl4aW4pO1xuXG5SYW5nZUFyZWFQb2ludC5wcm90b3R5cGUuZGVmYXVsdHMgPSB7XG4gICAgbWFya2Vyczoge1xuICAgICAgICB2aXNpYmxlOiBmYWxzZSxcbiAgICAgICAgYmFja2dyb3VuZDogV0hJVEUsXG4gICAgICAgIHNpemU6IExJTkVfTUFSS0VSX1NJWkUsXG4gICAgICAgIHR5cGU6IENJUkNMRSxcbiAgICAgICAgYm9yZGVyOiB7XG4gICAgICAgICAgICB3aWR0aDogMlxuICAgICAgICB9LFxuICAgICAgICBvcGFjaXR5OiAxXG4gICAgfSxcbiAgICBsYWJlbHM6IHtcbiAgICAgICAgdmlzaWJsZTogZmFsc2UsXG4gICAgICAgIG1hcmdpbjogZ2V0U3BhY2luZygzKSxcbiAgICAgICAgcGFkZGluZzogZ2V0U3BhY2luZyg0KSxcbiAgICAgICAgYW5pbWF0aW9uOiB7XG4gICAgICAgICAgICB0eXBlOiBGQURFSU4sXG4gICAgICAgICAgICBkZWxheTogSU5JVElBTF9BTklNQVRJT05fRFVSQVRJT05cbiAgICAgICAgfSxcbiAgICAgICAgcG9zaXRpb246IEFVVE9cbiAgICB9LFxuICAgIG5vdGVzOiB7XG4gICAgICAgIGxhYmVsOiB7fVxuICAgIH0sXG4gICAgaGlnaGxpZ2h0OiB7XG4gICAgICAgIG1hcmtlcnM6IHtcbiAgICAgICAgICAgIGJvcmRlcjoge1xuICAgICAgICAgICAgICAgIGNvbG9yOiBXSElURSxcbiAgICAgICAgICAgICAgICB3aWR0aDogMlxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB6SW5kZXg6IEhJR0hMSUdIVF9aSU5ERVhcbiAgICB9LFxuICAgIHRvb2x0aXA6IHtcbiAgICAgICAgZm9ybWF0OiAnezB9IC0gezF9J1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJhbmdlQXJlYVBvaW50O1xuIiwiaW1wb3J0IHsgZHJhd2luZyBhcyBkcmF3IH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWRyYXdpbmcnO1xuaW1wb3J0IEFyZWFTZWdtZW50IGZyb20gJy4uL2FyZWEtY2hhcnQvYXJlYS1zZWdtZW50JztcblxuY2xhc3MgUmFuZ2VBcmVhU2VnbWVudCBleHRlbmRzIEFyZWFTZWdtZW50IHtcblxuICAgIGNyZWF0ZVN0cm9rZVNlZ21lbnRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWdtZW50c0Zyb21Qb2ludHModGhpcy50b0dlb21ldHJ5UG9pbnRzKHRoaXMudG9Qb2ludHMoKSkpO1xuICAgIH1cblxuICAgIHN0YWNrU2VnbWVudHMoKSB7XG4gICAgICAgIGxldCBmcm9tU2VnbWVudHMgPSB0aGlzLmZyb21TZWdtZW50cztcbiAgICAgICAgaWYgKCF0aGlzLmZyb21TZWdtZW50cykge1xuICAgICAgICAgICAgZnJvbVNlZ21lbnRzID0gdGhpcy5mcm9tU2VnbWVudHMgPSB0aGlzLnNlZ21lbnRzRnJvbVBvaW50cyh0aGlzLnRvR2VvbWV0cnlQb2ludHModGhpcy5mcm9tUG9pbnRzKCkucmV2ZXJzZSgpKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZnJvbVNlZ21lbnRzO1xuICAgIH1cblxuICAgIGNyZWF0ZVN0cm9rZShzdHlsZSkge1xuICAgICAgICBjb25zdCB0b1BhdGggPSBuZXcgZHJhdy5QYXRoKHN0eWxlKTtcbiAgICAgICAgY29uc3QgZnJvbVBhdGggPSBuZXcgZHJhdy5QYXRoKHN0eWxlKTtcblxuICAgICAgICB0b1BhdGguc2VnbWVudHMucHVzaC5hcHBseSh0b1BhdGguc2VnbWVudHMsIHRoaXMuc3Ryb2tlU2VnbWVudHMoKSk7XG4gICAgICAgIGZyb21QYXRoLnNlZ21lbnRzLnB1c2guYXBwbHkoZnJvbVBhdGguc2VnbWVudHMsIHRoaXMuc3RhY2tTZWdtZW50cygpKTtcblxuICAgICAgICB0aGlzLnZpc3VhbC5hcHBlbmQodG9QYXRoKTtcbiAgICAgICAgdGhpcy52aXN1YWwuYXBwZW5kKGZyb21QYXRoKTtcbiAgICB9XG5cbiAgICBoYXNTdGFja1NlZ21lbnQoKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZyb21Qb2ludHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxpbmVQb2ludHMubWFwKHBvaW50ID0+IHBvaW50LmZyb21Qb2ludCk7XG4gICAgfVxuXG4gICAgdG9Qb2ludHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxpbmVQb2ludHMubWFwKHBvaW50ID0+IHBvaW50LnRvUG9pbnQpO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUmFuZ2VBcmVhU2VnbWVudDsiLCJpbXBvcnQgeyBDdXJ2ZVByb2Nlc3NvciB9IGZyb20gJy4uLy4uL2NvcmUnO1xuXG5pbXBvcnQgUmFuZ2VBcmVhU2VnbWVudCBmcm9tICcuL3JhbmdlLWFyZWEtc2VnbWVudCc7XG5cbmNsYXNzIFNwbGluZVJhbmdlQXJlYVNlZ21lbnQgZXh0ZW5kcyBSYW5nZUFyZWFTZWdtZW50IHtcblxuICAgIGNyZWF0ZVN0cm9rZVNlZ21lbnRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVDdXJ2ZVNlZ21lbnRzKHRoaXMudG9Qb2ludHMoKSk7XG4gICAgfVxuXG4gICAgc3RhY2tTZWdtZW50cygpIHtcbiAgICAgICAgbGV0IGZyb21TZWdtZW50cyA9IHRoaXMuZnJvbVNlZ21lbnRzO1xuICAgICAgICBpZiAoIXRoaXMuZnJvbVNlZ21lbnRzKSB7XG4gICAgICAgICAgICBmcm9tU2VnbWVudHMgPSB0aGlzLmZyb21TZWdtZW50cyA9IHRoaXMuY3JlYXRlQ3VydmVTZWdtZW50cyh0aGlzLmZyb21Qb2ludHMoKS5yZXZlcnNlKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZyb21TZWdtZW50cztcbiAgICB9XG5cbiAgICBjcmVhdGVDdXJ2ZVNlZ21lbnRzKHBvaW50cykge1xuICAgICAgICBjb25zdCBjdXJ2ZVByb2Nlc3NvciA9IG5ldyBDdXJ2ZVByb2Nlc3NvcigpO1xuXG4gICAgICAgIHJldHVybiBjdXJ2ZVByb2Nlc3Nvci5wcm9jZXNzKHRoaXMudG9HZW9tZXRyeVBvaW50cyhwb2ludHMpKTtcbiAgICB9XG5cblxufVxuXG5leHBvcnQgZGVmYXVsdCBTcGxpbmVSYW5nZUFyZWFTZWdtZW50OyIsImltcG9ydCBTdGVwTGluZU1peGluIGZyb20gJy4uL2xpbmUtY2hhcnQvc3RlcC1saW5lLW1peGluJztcbmltcG9ydCBSYW5nZUFyZWFTZWdtZW50IGZyb20gJy4vcmFuZ2UtYXJlYS1zZWdtZW50JztcbmltcG9ydCB7IGRlZXBFeHRlbmQgfSBmcm9tICcuLi8uLi9jb21tb24nO1xuXG5jbGFzcyBTdGVwUmFuZ2VBcmVhU2VnbWVudCBleHRlbmRzIFJhbmdlQXJlYVNlZ21lbnQge1xuXG4gICAgY3JlYXRlU3Ryb2tlU2VnbWVudHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlZ21lbnRzRnJvbVBvaW50cyh0aGlzLmNhbGN1bGF0ZVN0ZXBQb2ludHModGhpcy50b1BvaW50cygpKSk7XG4gICAgfVxuXG4gICAgc3RhY2tTZWdtZW50cygpIHtcbiAgICAgICAgbGV0IGZyb21TZWdtZW50cyA9IHRoaXMuZnJvbVNlZ21lbnRzO1xuICAgICAgICBpZiAoIXRoaXMuZnJvbVNlZ21lbnRzKSB7XG4gICAgICAgICAgICBmcm9tU2VnbWVudHMgPSB0aGlzLmZyb21TZWdtZW50cyA9IHRoaXMuc2VnbWVudHNGcm9tUG9pbnRzKHRoaXMuY2FsY3VsYXRlU3RlcFBvaW50cyh0aGlzLmZyb21Qb2ludHMoKSkpO1xuICAgICAgICAgICAgZnJvbVNlZ21lbnRzLnJldmVyc2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmcm9tU2VnbWVudHM7XG4gICAgfVxufVxuXG5kZWVwRXh0ZW5kKFN0ZXBSYW5nZUFyZWFTZWdtZW50LnByb3RvdHlwZSwgU3RlcExpbmVNaXhpbik7XG5cbmV4cG9ydCBkZWZhdWx0IFN0ZXBSYW5nZUFyZWFTZWdtZW50OyIsImltcG9ydCBDYXRlZ29yaWNhbENoYXJ0IGZyb20gJy4uL2NhdGVnb3JpY2FsLWNoYXJ0JztcbmltcG9ydCBMaW5lQ2hhcnRNaXhpbiBmcm9tICcuLi9taXhpbnMvbGluZS1jaGFydC1taXhpbic7XG5pbXBvcnQgQ2xpcEFuaW1hdGlvbk1peGluIGZyb20gJy4uL21peGlucy9jbGlwLWFuaW1hdGlvbi1taXhpbic7XG5pbXBvcnQgUmFuZ2VBcmVhUG9pbnQgZnJvbSAnLi9yYW5nZS1hcmVhLXBvaW50JztcbmltcG9ydCBSYW5nZUFyZWFTZWdtZW50IGZyb20gJy4vcmFuZ2UtYXJlYS1zZWdtZW50JztcbmltcG9ydCBTcGxpbmVSYW5nZUFyZWFTZWdtZW50IGZyb20gJy4vc3BsaW5lLXJhbmdlLWFyZWEtc2VnbWVudCc7XG5pbXBvcnQgU3RlcFJhbmdlQXJlYVNlZ21lbnQgZnJvbSAnLi9zdGVwLXJhbmdlLWFyZWEtc2VnbWVudCc7XG5cbmltcG9ydCB7IEJveCB9IGZyb20gJy4uLy4uL2NvcmUnO1xuaW1wb3J0IHsgWkVSTyB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBNSU5fVkFMVUUsIE1BWF9WQUxVRSB9IGZyb20gJy4uLy4uL2NvbW1vbi9jb25zdGFudHMnO1xuaW1wb3J0IHsgaXNOdW1iZXIgfSBmcm9tICcuLi8uLi9jb21tb24nO1xuaW1wb3J0IHsgZGVlcEV4dGVuZCwgaXNGdW5jdGlvbiB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5pbXBvcnQgeyBoYXNWYWx1ZSB9IGZyb20gJy4uL3V0aWxzJztcblxuY2xhc3MgUmFuZ2VBcmVhQ2hhcnQgZXh0ZW5kcyBDYXRlZ29yaWNhbENoYXJ0IHtcblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgc3VwZXIucmVuZGVyKCk7XG5cbiAgICAgICAgdGhpcy5yZW5kZXJTZWdtZW50cygpO1xuICAgIH1cblxuICAgIHBvaW50VHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIFJhbmdlQXJlYVBvaW50O1xuICAgIH1cblxuICAgIGNyZWF0ZVBvaW50KGRhdGEsIGZpZWxkcykge1xuICAgICAgICBjb25zdCB7IGNhdGVnb3J5SXgsIGNhdGVnb3J5LCBzZXJpZXMsIHNlcmllc0l4IH0gPSBmaWVsZHM7XG4gICAgICAgIGxldCB2YWx1ZSA9IGRhdGEudmFsdWVGaWVsZHM7XG5cbiAgICAgICAgaWYgKCFoYXNWYWx1ZSh2YWx1ZS5mcm9tKSAmJiAhaGFzVmFsdWUodmFsdWUudG8pKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zZXJpZXNNaXNzaW5nVmFsdWVzKHNlcmllcykgPT09IFpFUk8pIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgZnJvbTogMCxcbiAgICAgICAgICAgICAgICAgICAgdG86IDBcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBwb2ludE9wdGlvbnMgPSB0aGlzLnBvaW50T3B0aW9ucyhzZXJpZXMsIHNlcmllc0l4KTtcbiAgICAgICAgcG9pbnRPcHRpb25zID0gdGhpcy5ldmFsUG9pbnRPcHRpb25zKFxuICAgICAgICAgICAgcG9pbnRPcHRpb25zLCB2YWx1ZSwgY2F0ZWdvcnksIGNhdGVnb3J5SXgsIHNlcmllcywgc2VyaWVzSXhcbiAgICAgICAgKTtcblxuICAgICAgICBsZXQgY29sb3IgPSBkYXRhLmZpZWxkcy5jb2xvciB8fCBzZXJpZXMuY29sb3I7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKHNlcmllcy5jb2xvcikpIHtcbiAgICAgICAgICAgIGNvbG9yID0gcG9pbnRPcHRpb25zLmNvbG9yO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcG9pbnQgPSBuZXcgUmFuZ2VBcmVhUG9pbnQodmFsdWUsIHBvaW50T3B0aW9ucyk7XG4gICAgICAgIHBvaW50LmNvbG9yID0gY29sb3I7XG5cbiAgICAgICAgdGhpcy5hcHBlbmQocG9pbnQpO1xuXG4gICAgICAgIHJldHVybiBwb2ludDtcbiAgICB9XG5cbiAgICBjcmVhdGVTZWdtZW50KGxpbmVQb2ludHMsIGN1cnJlbnRTZXJpZXMsIHNlcmllc0l4KSB7XG4gICAgICAgIGNvbnN0IHN0eWxlID0gKGN1cnJlbnRTZXJpZXMubGluZSB8fCB7fSkuc3R5bGU7XG4gICAgICAgIGxldCBzZWdtZW50VHlwZTtcbiAgICAgICAgaWYgKHN0eWxlID09PSBcInNtb290aFwiKSB7XG4gICAgICAgICAgICBzZWdtZW50VHlwZSA9IFNwbGluZVJhbmdlQXJlYVNlZ21lbnQ7XG4gICAgICAgIH0gZWxzZSBpZiAoc3R5bGUgPT09IFwic3RlcFwiKSB7XG4gICAgICAgICAgICBzZWdtZW50VHlwZSA9IFN0ZXBSYW5nZUFyZWFTZWdtZW50O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VnbWVudFR5cGUgPSBSYW5nZUFyZWFTZWdtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBzZWdtZW50VHlwZShsaW5lUG9pbnRzLCBjdXJyZW50U2VyaWVzLCBzZXJpZXNJeCk7XG4gICAgfVxuXG4gICAgcGxvdFJhbmdlKHBvaW50LCBzdGFydFZhbHVlKSB7XG4gICAgICAgIGlmICghcG9pbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBbIHN0YXJ0VmFsdWUsIHN0YXJ0VmFsdWUgXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBbIHBvaW50LnZhbHVlLmZyb20sIHBvaW50LnZhbHVlLnRvIF07XG4gICAgfVxuXG4gICAgdmFsdWVTbG90KHZhbHVlQXhpcywgcGxvdFJhbmdlKSB7XG4gICAgICAgIGNvbnN0IGZyb21TbG90ID0gdmFsdWVBeGlzLmdldFNsb3QocGxvdFJhbmdlWzBdLCBwbG90UmFuZ2VbMF0sICF0aGlzLm9wdGlvbnMuY2xpcCk7XG4gICAgICAgIGNvbnN0IHRvU2xvdCA9IHZhbHVlQXhpcy5nZXRTbG90KHBsb3RSYW5nZVsxXSwgcGxvdFJhbmdlWzFdLCAhdGhpcy5vcHRpb25zLmNsaXApO1xuICAgICAgICBpZiAoZnJvbVNsb3QgJiYgdG9TbG90KSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGZyb206IGZyb21TbG90LFxuICAgICAgICAgICAgICAgIHRvOiB0b1Nsb3RcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwb2ludFNsb3QoY2F0ZWdvcnlTbG90LCB2YWx1ZVNsb3QpIHtcbiAgICAgICAgY29uc3QgeyBmcm9tLCB0byB9ID0gdmFsdWVTbG90O1xuICAgICAgICBsZXQgZnJvbVNsb3QsIHRvU2xvdDtcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmludmVydEF4ZXMpIHtcbiAgICAgICAgICAgIGZyb21TbG90ID0gbmV3IEJveChmcm9tLngxLCBjYXRlZ29yeVNsb3QueTEsIGZyb20ueDIsIGNhdGVnb3J5U2xvdC55Mik7XG4gICAgICAgICAgICB0b1Nsb3QgPSBuZXcgQm94KHRvLngxLCBjYXRlZ29yeVNsb3QueTEsIHRvLngyLCBjYXRlZ29yeVNsb3QueTIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZnJvbVNsb3QgPSBuZXcgQm94KGNhdGVnb3J5U2xvdC54MSwgZnJvbS55MSwgY2F0ZWdvcnlTbG90LngyLCBmcm9tLnkyKTtcbiAgICAgICAgICAgIHRvU2xvdCA9IG5ldyBCb3goY2F0ZWdvcnlTbG90LngxLCB0by55MSwgY2F0ZWdvcnlTbG90LngyLCB0by55Mik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZnJvbTogZnJvbVNsb3QsXG4gICAgICAgICAgICB0bzogdG9TbG90XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgYWRkVmFsdWUoZGF0YSwgZmllbGRzKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlRmllbGRzID0gZGF0YS52YWx1ZUZpZWxkcztcbiAgICAgICAgaWYgKCFpc051bWJlcih2YWx1ZUZpZWxkcy5mcm9tKSkge1xuICAgICAgICAgICAgdmFsdWVGaWVsZHMuZnJvbSA9IHZhbHVlRmllbGRzLnRvO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpc051bWJlcih2YWx1ZUZpZWxkcy50bykpIHtcbiAgICAgICAgICAgIHZhbHVlRmllbGRzLnRvID0gdmFsdWVGaWVsZHMuZnJvbTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN1cGVyLmFkZFZhbHVlKGRhdGEsIGZpZWxkcyk7XG4gICAgfVxuXG4gICAgdXBkYXRlUmFuZ2UodmFsdWUsIGZpZWxkcykge1xuICAgICAgICBpZiAodmFsdWUgIT09IG51bGwgJiYgaXNOdW1iZXIodmFsdWUuZnJvbSkgJiYgaXNOdW1iZXIodmFsdWUudG8pKSB7XG4gICAgICAgICAgICBjb25zdCBheGlzTmFtZSA9IGZpZWxkcy5zZXJpZXMuYXhpcztcbiAgICAgICAgICAgIGNvbnN0IGF4aXNSYW5nZSA9IHRoaXMudmFsdWVBeGlzUmFuZ2VzW2F4aXNOYW1lXSA9IHRoaXMudmFsdWVBeGlzUmFuZ2VzW2F4aXNOYW1lXSB8fCB7IG1pbjogTUFYX1ZBTFVFLCBtYXg6IE1JTl9WQUxVRSB9O1xuICAgICAgICAgICAgY29uc3QgeyBmcm9tLCB0byB9ID0gdmFsdWU7XG5cbiAgICAgICAgICAgIGF4aXNSYW5nZS5taW4gPSBNYXRoLm1pbihheGlzUmFuZ2UubWluLCBmcm9tLCB0byk7XG4gICAgICAgICAgICBheGlzUmFuZ2UubWF4ID0gTWF0aC5tYXgoYXhpc1JhbmdlLm1heCwgZnJvbSwgdG8pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9ybWF0UG9pbnRWYWx1ZShwb2ludCwgZm9ybWF0KSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gcG9pbnQudmFsdWU7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcnRTZXJ2aWNlLmZvcm1hdC5hdXRvKGZvcm1hdCwgdmFsdWUuZnJvbSwgdmFsdWUudG8pO1xuICAgIH1cblxuICAgIGFuaW1hdGlvblBvaW50cygpIHtcbiAgICAgICAgY29uc3QgcG9pbnRzID0gdGhpcy5wb2ludHM7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBwb2ludHMubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgY29uc3QgcG9pbnQgPSBwb2ludHNbaWR4XTtcbiAgICAgICAgICAgIGlmIChwb2ludCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKChwb2ludC5mcm9tUG9pbnQgfHwge30pLm1hcmtlcik7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goKHBvaW50LnRvUG9pbnQgfHwge30pLm1hcmtlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0LmNvbmNhdCh0aGlzLl9zZWdtZW50cyk7XG4gICAgfVxufVxuXG5kZWVwRXh0ZW5kKFJhbmdlQXJlYUNoYXJ0LnByb3RvdHlwZSwgTGluZUNoYXJ0TWl4aW4sIENsaXBBbmltYXRpb25NaXhpbik7XG5cbmV4cG9ydCBkZWZhdWx0IFJhbmdlQXJlYUNoYXJ0O1xuIiwiaW1wb3J0IENhbmRsZXN0aWNrIGZyb20gJy4uL2NhbmRsZXN0aWNrLWNoYXJ0L2NhbmRsZXN0aWNrJztcblxuY2xhc3MgT0hMQ1BvaW50IGV4dGVuZHMgQ2FuZGxlc3RpY2sge1xuICAgIHJlZmxvdyhib3gpIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zLCB2YWx1ZSwgb3duZXI6IGNoYXJ0IH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB2YWx1ZUF4aXMgPSBjaGFydC5zZXJpZXNWYWx1ZUF4aXMob3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IG9Qb2ludHMgPSBbXTtcbiAgICAgICAgY29uc3QgY1BvaW50cyA9IFtdO1xuICAgICAgICBjb25zdCBsaFBvaW50cyA9IFtdO1xuXG4gICAgICAgIGNvbnN0IGxoU2xvdCA9IHZhbHVlQXhpcy5nZXRTbG90KHZhbHVlLmxvdywgdmFsdWUuaGlnaCk7XG4gICAgICAgIGNvbnN0IG9TbG90ID0gdmFsdWVBeGlzLmdldFNsb3QodmFsdWUub3BlbiwgdmFsdWUub3Blbik7XG4gICAgICAgIGNvbnN0IGNTbG90ID0gdmFsdWVBeGlzLmdldFNsb3QodmFsdWUuY2xvc2UsIHZhbHVlLmNsb3NlKTtcblxuICAgICAgICBvU2xvdC54MSA9IGNTbG90LngxID0gbGhTbG90LngxID0gYm94LngxO1xuICAgICAgICBvU2xvdC54MiA9IGNTbG90LngyID0gbGhTbG90LngyID0gYm94LngyO1xuXG4gICAgICAgIGNvbnN0IG1pZCA9IGxoU2xvdC5jZW50ZXIoKS54O1xuXG4gICAgICAgIG9Qb2ludHMucHVzaChbIG9TbG90LngxLCBvU2xvdC55MSBdKTtcbiAgICAgICAgb1BvaW50cy5wdXNoKFsgbWlkLCBvU2xvdC55MSBdKTtcbiAgICAgICAgY1BvaW50cy5wdXNoKFsgbWlkLCBjU2xvdC55MSBdKTtcbiAgICAgICAgY1BvaW50cy5wdXNoKFsgY1Nsb3QueDIsIGNTbG90LnkxIF0pO1xuICAgICAgICBsaFBvaW50cy5wdXNoKFsgbWlkLCBsaFNsb3QueTEgXSk7XG4gICAgICAgIGxoUG9pbnRzLnB1c2goWyBtaWQsIGxoU2xvdC55MiBdKTtcblxuICAgICAgICB0aGlzLmxpbmVzID0gW1xuICAgICAgICAgICAgb1BvaW50cywgY1BvaW50cywgbGhQb2ludHNcbiAgICAgICAgXTtcblxuICAgICAgICB0aGlzLmJveCA9IGxoU2xvdC5jbG9uZSgpLndyYXAob1Nsb3QuY2xvbmUoKS53cmFwKGNTbG90KSk7XG5cbiAgICAgICAgdGhpcy5yZWZsb3dOb3RlKCk7XG4gICAgfVxuXG4gICAgY3JlYXRlQm9keSgpIHt9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE9ITENQb2ludDsiLCJpbXBvcnQgQ2FuZGxlc3RpY2tDaGFydCBmcm9tICcuLi9jYW5kbGVzdGljay1jaGFydC9jYW5kbGVzdGljay1jaGFydCc7XG5pbXBvcnQgT0hMQ1BvaW50IGZyb20gJy4vb2hsYy1wb2ludCc7XG5cbmNsYXNzIE9ITENDaGFydCBleHRlbmRzIENhbmRsZXN0aWNrQ2hhcnQge1xuICAgIHBvaW50VHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIE9ITENQb2ludDtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE9ITENDaGFydDsiLCJpbXBvcnQgeyBkcmF3aW5nIGFzIGRyYXcgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tZHJhd2luZyc7XG5cbmltcG9ydCB7IENoYXJ0RWxlbWVudCB9IGZyb20gJy4uLy4uL2NvcmUnO1xuXG5pbXBvcnQgeyBGQURFSU4sIElOSVRJQUxfQU5JTUFUSU9OX0RVUkFUSU9OIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcblxuaW1wb3J0IHsgYWxpZ25QYXRoVG9QaXhlbCwgc2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tICcuLi8uLi9jb21tb24nO1xuXG5jbGFzcyBXYXRlcmZhbGxTZWdtZW50IGV4dGVuZHMgQ2hhcnRFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihmcm9tLCB0bywgc2VyaWVzKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5mcm9tID0gZnJvbTtcbiAgICAgICAgdGhpcy50byA9IHRvO1xuICAgICAgICB0aGlzLnNlcmllcyA9IHNlcmllcztcbiAgICB9XG5cbiAgICBsaW5lUG9pbnRzKCkge1xuICAgICAgICBjb25zdCBmcm9tID0gdGhpcy5mcm9tO1xuICAgICAgICBjb25zdCB7IGZyb206IHsgYm94OiBmcm9tQm94IH0sIHRvOiB7IGJveDogdG9Cb3ggfSB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgcG9pbnRzID0gW107XG5cbiAgICAgICAgaWYgKGZyb20uaXNWZXJ0aWNhbCkge1xuICAgICAgICAgICAgY29uc3QgeSA9IGZyb20uYWJvdmVBeGlzID8gZnJvbUJveC55MSA6IGZyb21Cb3gueTI7XG4gICAgICAgICAgICBwb2ludHMucHVzaChcbiAgICAgICAgICAgICAgICBbIGZyb21Cb3gueDEsIHkgXSxcbiAgICAgICAgICAgICAgICBbIHRvQm94LngyLCB5IF1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB4ID0gZnJvbS5hYm92ZUF4aXMgPyBmcm9tQm94LngyIDogZnJvbUJveC54MTtcbiAgICAgICAgICAgIHBvaW50cy5wdXNoKFxuICAgICAgICAgICAgICAgIFsgeCwgZnJvbUJveC55MSBdLFxuICAgICAgICAgICAgICAgIFsgeCwgdG9Cb3gueTIgXVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwb2ludHM7XG4gICAgfVxuXG4gICAgY3JlYXRlVmlzdWFsKCkge1xuICAgICAgICBzdXBlci5jcmVhdGVWaXN1YWwoKTtcblxuICAgICAgICBjb25zdCBsaW5lID0gdGhpcy5zZXJpZXMubGluZSB8fCB7fTtcblxuICAgICAgICBjb25zdCBwYXRoID0gZHJhdy5QYXRoLmZyb21Qb2ludHModGhpcy5saW5lUG9pbnRzKCksIHtcbiAgICAgICAgICAgIHN0cm9rZToge1xuICAgICAgICAgICAgICAgIGNvbG9yOiBsaW5lLmNvbG9yLFxuICAgICAgICAgICAgICAgIHdpZHRoOiBsaW5lLndpZHRoLFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IGxpbmUub3BhY2l0eSxcbiAgICAgICAgICAgICAgICBkYXNoVHlwZTogbGluZS5kYXNoVHlwZVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBhbGlnblBhdGhUb1BpeGVsKHBhdGgpO1xuICAgICAgICB0aGlzLnZpc3VhbC5hcHBlbmQocGF0aCk7XG4gICAgfVxufVxuXG5zZXREZWZhdWx0T3B0aW9ucyhXYXRlcmZhbGxTZWdtZW50LCB7XG4gICAgYW5pbWF0aW9uOiB7XG4gICAgICAgIHR5cGU6IEZBREVJTixcbiAgICAgICAgZGVsYXk6IElOSVRJQUxfQU5JTUFUSU9OX0RVUkFUSU9OXG4gICAgfVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IFdhdGVyZmFsbFNlZ21lbnQ7IiwiaW1wb3J0IEJhckNoYXJ0IGZyb20gJy4uL2Jhci1jaGFydC9iYXItY2hhcnQnO1xuaW1wb3J0IFNlcmllc0JpbmRlciBmcm9tICcuLi9zZXJpZXMtYmluZGVyJztcbmltcG9ydCBXYXRlcmZhbGxTZWdtZW50IGZyb20gJy4vd2F0ZXJmYWxsLXNlZ21lbnQnO1xuXG5pbXBvcnQgY2F0ZWdvcmllc0NvdW50IGZyb20gJy4uL3V0aWxzL2NhdGVnb3JpZXMtY291bnQnO1xuXG5pbXBvcnQgeyBpc051bWJlciB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5cbmNsYXNzIFdhdGVyZmFsbENoYXJ0IGV4dGVuZHMgQmFyQ2hhcnQge1xuICAgIHJlbmRlcigpIHtcbiAgICAgICAgc3VwZXIucmVuZGVyKCk7XG4gICAgICAgIHRoaXMuY3JlYXRlU2VnbWVudHMoKTtcbiAgICB9XG5cbiAgICB0cmF2ZXJzZURhdGFQb2ludHMoY2FsbGJhY2spIHtcbiAgICAgICAgY29uc3Qgc2VyaWVzID0gdGhpcy5vcHRpb25zLnNlcmllcztcbiAgICAgICAgY29uc3QgdG90YWxDYXRlZ29yaWVzID0gY2F0ZWdvcmllc0NvdW50KHNlcmllcyk7XG4gICAgICAgIGNvbnN0IGlzVmVydGljYWwgPSAhdGhpcy5vcHRpb25zLmludmVydEF4ZXM7XG5cbiAgICAgICAgZm9yIChsZXQgc2VyaWVzSXggPSAwOyBzZXJpZXNJeCA8IHNlcmllcy5sZW5ndGg7IHNlcmllc0l4KyspIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRTZXJpZXMgPSBzZXJpZXNbc2VyaWVzSXhdO1xuICAgICAgICAgICAgbGV0IHRvdGFsID0gMDtcbiAgICAgICAgICAgIGxldCBydW5uaW5nVG90YWwgPSAwO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBjYXRlZ29yeUl4ID0gMDsgY2F0ZWdvcnlJeCA8IHRvdGFsQ2F0ZWdvcmllczsgY2F0ZWdvcnlJeCsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IFNlcmllc0JpbmRlci5jdXJyZW50LmJpbmRQb2ludChjdXJyZW50U2VyaWVzLCBjYXRlZ29yeUl4KTtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGRhdGEudmFsdWVGaWVsZHMudmFsdWU7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3VtbWFyeSA9IGRhdGEuZmllbGRzLnN1bW1hcnk7XG4gICAgICAgICAgICAgICAgbGV0IGZyb20gPSB0b3RhbDtcbiAgICAgICAgICAgICAgICBsZXQgdG87XG5cbiAgICAgICAgICAgICAgICBpZiAoc3VtbWFyeSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3VtbWFyeS50b0xvd2VyQ2FzZSgpID09PSBcInRvdGFsXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEudmFsdWVGaWVsZHMudmFsdWUgPSB0b3RhbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgdG8gPSB0b3RhbDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEudmFsdWVGaWVsZHMudmFsdWUgPSBydW5uaW5nVG90YWw7XG4gICAgICAgICAgICAgICAgICAgICAgICB0byA9IGZyb20gLSBydW5uaW5nVG90YWw7XG4gICAgICAgICAgICAgICAgICAgICAgICBydW5uaW5nVG90YWwgPSAwO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc051bWJlcih2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcnVubmluZ1RvdGFsICs9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB0b3RhbCArPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgdG8gPSB0b3RhbDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjYWxsYmFjayhkYXRhLCB7XG4gICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5OiB0aGlzLmNhdGVnb3J5QXhpcy5jYXRlZ29yeUF0KGNhdGVnb3J5SXgpLFxuICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeUl4OiBjYXRlZ29yeUl4LFxuICAgICAgICAgICAgICAgICAgICBzZXJpZXM6IGN1cnJlbnRTZXJpZXMsXG4gICAgICAgICAgICAgICAgICAgIHNlcmllc0l4OiBzZXJpZXNJeCxcbiAgICAgICAgICAgICAgICAgICAgdG90YWw6IHRvdGFsLFxuICAgICAgICAgICAgICAgICAgICBydW5uaW5nVG90YWw6IHJ1bm5pbmdUb3RhbCxcbiAgICAgICAgICAgICAgICAgICAgZnJvbTogZnJvbSxcbiAgICAgICAgICAgICAgICAgICAgdG86IHRvLFxuICAgICAgICAgICAgICAgICAgICBpc1ZlcnRpY2FsOiBpc1ZlcnRpY2FsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1cGRhdGVSYW5nZSh2YWx1ZSwgZmllbGRzKSB7XG4gICAgICAgIHN1cGVyLnVwZGF0ZVJhbmdlKHsgdmFsdWU6IGZpZWxkcy50byB9LCBmaWVsZHMpO1xuICAgIH1cblxuICAgIGFib3ZlQXhpcyhwb2ludCkge1xuICAgICAgICByZXR1cm4gcG9pbnQudmFsdWUgPj0gMDtcbiAgICB9XG5cbiAgICBwbG90UmFuZ2UocG9pbnQpIHtcbiAgICAgICAgcmV0dXJuIFsgcG9pbnQuZnJvbSwgcG9pbnQudG8gXTtcbiAgICB9XG5cbiAgICBjcmVhdGVTZWdtZW50cygpIHtcbiAgICAgICAgY29uc3Qgc2VyaWVzID0gdGhpcy5vcHRpb25zLnNlcmllcztcbiAgICAgICAgY29uc3Qgc2VyaWVzUG9pbnRzID0gdGhpcy5zZXJpZXNQb2ludHM7XG4gICAgICAgIGNvbnN0IHNlZ21lbnRzID0gdGhpcy5zZWdtZW50cyA9IFtdO1xuXG4gICAgICAgIGZvciAobGV0IHNlcmllc0l4ID0gMDsgc2VyaWVzSXggPCBzZXJpZXMubGVuZ3RoOyBzZXJpZXNJeCsrKSB7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50U2VyaWVzID0gc2VyaWVzW3Nlcmllc0l4XTtcbiAgICAgICAgICAgIGNvbnN0IHBvaW50cyA9IHNlcmllc1BvaW50c1tzZXJpZXNJeF07XG5cbiAgICAgICAgICAgIGlmIChwb2ludHMpIHtcbiAgICAgICAgICAgICAgICBsZXQgcHJldlBvaW50O1xuICAgICAgICAgICAgICAgIGZvciAobGV0IHBvaW50SXggPSAwOyBwb2ludEl4IDwgcG9pbnRzLmxlbmd0aDsgcG9pbnRJeCsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBvaW50ID0gcG9pbnRzW3BvaW50SXhdO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChwb2ludCAmJiBwcmV2UG9pbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlZ21lbnQgPSBuZXcgV2F0ZXJmYWxsU2VnbWVudChwcmV2UG9pbnQsIHBvaW50LCBjdXJyZW50U2VyaWVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlZ21lbnRzLnB1c2goc2VnbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcGVuZChzZWdtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHByZXZQb2ludCA9IHBvaW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgV2F0ZXJmYWxsQ2hhcnQ7IiwiaW1wb3J0IFBsb3RBcmVhQmFzZSBmcm9tICcuL3Bsb3RhcmVhLWJhc2UnO1xuaW1wb3J0IEF4aXNHcm91cFJhbmdlVHJhY2tlciBmcm9tICcuLi9heGlzLWdyb3VwLXJhbmdlLXRyYWNrZXInO1xuaW1wb3J0IFBsb3RBcmVhRXZlbnRzTWl4aW4gZnJvbSAnLi4vbWl4aW5zL3Bsb3RhcmVhLWV2ZW50cy1taXhpbic7XG5pbXBvcnQgU2VyaWVzQWdncmVnYXRvciBmcm9tICcuLi9hZ2dyZWdhdGVzL3Nlcmllcy1hZ2dyZWdhdG9yJztcbmltcG9ydCBEZWZhdWx0QWdncmVnYXRlcyBmcm9tICcuLi9hZ2dyZWdhdGVzL2RlZmF1bHQtYWdncmVnYXRlcyc7XG5pbXBvcnQgU2VyaWVzQmluZGVyIGZyb20gJy4uL3Nlcmllcy1iaW5kZXInO1xuaW1wb3J0IEJhckNoYXJ0IGZyb20gJy4uL2Jhci1jaGFydC9iYXItY2hhcnQnO1xuaW1wb3J0IFJhbmdlQmFyQ2hhcnQgZnJvbSAnLi4vcmFuZ2UtYmFyLWNoYXJ0L3JhbmdlLWJhci1jaGFydCc7XG5pbXBvcnQgQnVsbGV0Q2hhcnQgZnJvbSAnLi4vYnVsbGV0LWNoYXJ0L2J1bGxldC1jaGFydCc7XG5pbXBvcnQgTGluZUNoYXJ0IGZyb20gJy4uL2xpbmUtY2hhcnQvbGluZS1jaGFydCc7XG5pbXBvcnQgQXJlYUNoYXJ0IGZyb20gJy4uL2FyZWEtY2hhcnQvYXJlYS1jaGFydCc7XG5pbXBvcnQgUmFuZ2VBcmVhQ2hhcnQgZnJvbSAnLi4vcmFuZ2UtYXJlYS1jaGFydC9yYW5nZS1hcmVhLWNoYXJ0JztcbmltcG9ydCBPSExDQ2hhcnQgZnJvbSAnLi4vb2hsYy1jaGFydC9vaGxjLWNoYXJ0JztcbmltcG9ydCBDYW5kbGVzdGlja0NoYXJ0IGZyb20gJy4uL2NhbmRsZXN0aWNrLWNoYXJ0L2NhbmRsZXN0aWNrLWNoYXJ0JztcbmltcG9ydCBCb3hQbG90Q2hhcnQgZnJvbSAnLi4vYm94LXBsb3QtY2hhcnQvYm94LXBsb3QtY2hhcnQnO1xuaW1wb3J0IFdhdGVyZmFsbENoYXJ0IGZyb20gJy4uL3dhdGVyZmFsbC1jaGFydC93YXRlcmZhbGwtY2hhcnQnO1xuXG5pbXBvcnQgeyBDYXRlZ29yeUF4aXMsIERhdGVDYXRlZ29yeUF4aXMsIE51bWVyaWNBeGlzLCBMb2dhcml0aG1pY0F4aXMsIFBvaW50IH0gZnJvbSAnLi4vLi4vY29yZSc7XG5cbmltcG9ydCB7IGFwcGVuZElmTm90TnVsbCwgY2F0ZWdvcmllc0NvdW50LCBjcmVhdGVPdXRPZlJhbmdlUG9pbnRzLCBlcXVhbHNJZ25vcmVDYXNlLCBmaWx0ZXJTZXJpZXNCeVR5cGUsXG4gICAgZ2V0RGF0ZUZpZWxkLCBnZXRGaWVsZCwgaXNEYXRlQXhpcywgc2luZ2xlSXRlbU9yQXJyYXkgfSBmcm9tICcuLi91dGlscyc7XG5cbmltcG9ydCB7IEJBUiwgQ09MVU1OLCBCVUxMRVQsIFZFUlRJQ0FMX0JVTExFVCwgTElORSwgVkVSVElDQUxfTElORSwgQVJFQSwgVkVSVElDQUxfQVJFQSxcbiAgICBSQU5HRV9BUkVBLCBWRVJUSUNBTF9SQU5HRV9BUkVBLCBSQU5HRV9DT0xVTU4sIFJBTkdFX0JBUiwgV0FURVJGQUxMLCBIT1JJWk9OVEFMX1dBVEVSRkFMTCxcbiAgICBCT1hfUExPVCwgVkVSVElDQUxfQk9YX1BMT1QsIE9ITEMsIENBTkRMRVNUSUNLLCBMT0dBUklUSE1JQywgU1RFUCwgRVFVQUxMWV9TUEFDRURfU0VSSUVTIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcblxuaW1wb3J0IHsgREFURSwgTUFYX1ZBTFVFIH0gZnJvbSAnLi4vLi4vY29tbW9uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBzZXREZWZhdWx0T3B0aW9ucywgaW5BcnJheSwgaXNOdW1iZXIsIGRlZXBFeHRlbmQsIGRlZmluZWQsIGV2ZW50RWxlbWVudCwgZ3JlcCB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5cbmNvbnN0IEFSRUFfU0VSSUVTID0gWyBBUkVBLCBWRVJUSUNBTF9BUkVBLCBSQU5HRV9BUkVBLCBWRVJUSUNBTF9SQU5HRV9BUkVBIF07XG5jb25zdCBPVVRfT0ZfUkFOR0VfU0VSSUVTID0gWyBMSU5FLCBWRVJUSUNBTF9MSU5FIF0uY29uY2F0KEFSRUFfU0VSSUVTKTtcblxuY2xhc3MgQ2F0ZWdvcmljYWxQbG90QXJlYSBleHRlbmRzIFBsb3RBcmVhQmFzZSB7XG5cbiAgICBpbml0RmllbGRzKHNlcmllcykge1xuICAgICAgICB0aGlzLm5hbWVkQ2F0ZWdvcnlBeGVzID0ge307XG4gICAgICAgIHRoaXMubmFtZWRWYWx1ZUF4ZXMgPSB7fTtcbiAgICAgICAgdGhpcy52YWx1ZUF4aXNSYW5nZVRyYWNrZXIgPSBuZXcgQXhpc0dyb3VwUmFuZ2VUcmFja2VyKCk7XG5cbiAgICAgICAgaWYgKHNlcmllcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLmludmVydEF4ZXMgPSBpbkFycmF5KFxuICAgICAgICAgICAgICAgIHNlcmllc1swXS50eXBlLCBbIEJBUiwgQlVMTEVULCBWRVJUSUNBTF9MSU5FLCBWRVJUSUNBTF9BUkVBLCBWRVJUSUNBTF9SQU5HRV9BUkVBLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUkFOR0VfQkFSLCBIT1JJWk9OVEFMX1dBVEVSRkFMTCwgVkVSVElDQUxfQk9YX1BMT1QgXVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGFjayA9IHNlcmllc1tpXS5zdGFjaztcbiAgICAgICAgICAgICAgICBpZiAoc3RhY2sgJiYgc3RhY2sudHlwZSA9PT0gXCIxMDAlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFjazEwMCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgcmVuZGVyKHBhbmVzID0gdGhpcy5wYW5lcykge1xuICAgICAgICB0aGlzLmNyZWF0ZUNhdGVnb3J5QXhlcyhwYW5lcyk7XG4gICAgICAgIHRoaXMuYWdncmVnYXRlQ2F0ZWdvcmllcyhwYW5lcyk7XG4gICAgICAgIHRoaXMuY3JlYXRlQ2F0ZWdvcnlBeGVzTGFiZWxzKHBhbmVzKTtcbiAgICAgICAgdGhpcy5jcmVhdGVDaGFydHMocGFuZXMpO1xuICAgICAgICB0aGlzLmNyZWF0ZVZhbHVlQXhlcyhwYW5lcyk7XG4gICAgfVxuXG4gICAgcmVtb3ZlQXhpcyhheGlzKSB7XG4gICAgICAgIGNvbnN0IGF4aXNOYW1lID0gYXhpcy5vcHRpb25zLm5hbWU7XG5cbiAgICAgICAgc3VwZXIucmVtb3ZlQXhpcyhheGlzKTtcblxuICAgICAgICBpZiAoYXhpcyBpbnN0YW5jZW9mIENhdGVnb3J5QXhpcykge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMubmFtZWRDYXRlZ29yeUF4ZXNbYXhpc05hbWVdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy52YWx1ZUF4aXNSYW5nZVRyYWNrZXIucmVzZXQoYXhpc05hbWUpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMubmFtZWRWYWx1ZUF4ZXNbYXhpc05hbWVdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGF4aXMgPT09IHRoaXMuY2F0ZWdvcnlBeGlzKSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5jYXRlZ29yeUF4aXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYXhpcyA9PT0gdGhpcy52YWx1ZUF4aXMpIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnZhbHVlQXhpcztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNyZWF0ZUNoYXJ0cyhwYW5lcykge1xuICAgICAgICBjb25zdCBzZXJpZXNCeVBhbmUgPSB0aGlzLmdyb3VwU2VyaWVzQnlQYW5lKCk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYW5lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgcGFuZSA9IHBhbmVzW2ldO1xuICAgICAgICAgICAgY29uc3QgcGFuZVNlcmllcyA9IHNlcmllc0J5UGFuZVtwYW5lLm9wdGlvbnMubmFtZSB8fCBcImRlZmF1bHRcIl0gfHwgW107XG4gICAgICAgICAgICB0aGlzLmFkZFRvTGVnZW5kKHBhbmVTZXJpZXMpO1xuXG4gICAgICAgICAgICBjb25zdCB2aXNpYmxlU2VyaWVzID0gdGhpcy5maWx0ZXJWaXNpYmxlU2VyaWVzKHBhbmVTZXJpZXMpO1xuICAgICAgICAgICAgaWYgKCF2aXNpYmxlU2VyaWVzKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGdyb3VwcyA9IHRoaXMuZ3JvdXBTZXJpZXNCeUNhdGVnb3J5QXhpcyh2aXNpYmxlU2VyaWVzKTtcbiAgICAgICAgICAgIGZvciAobGV0IGdyb3VwSXggPSAwOyBncm91cEl4IDwgZ3JvdXBzLmxlbmd0aDsgZ3JvdXBJeCsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVDaGFydEdyb3VwKGdyb3Vwc1tncm91cEl4XSwgcGFuZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjcmVhdGVDaGFydEdyb3VwKHNlcmllcywgcGFuZSkge1xuICAgICAgICB0aGlzLmNyZWF0ZUFyZWFDaGFydChcbiAgICAgICAgICAgIGZpbHRlclNlcmllc0J5VHlwZShzZXJpZXMsIFsgQVJFQSwgVkVSVElDQUxfQVJFQSBdKSwgcGFuZVxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMuY3JlYXRlUmFuZ2VBcmVhQ2hhcnQoXG4gICAgICAgICAgICBmaWx0ZXJTZXJpZXNCeVR5cGUoc2VyaWVzLCBbIFJBTkdFX0FSRUEsIFZFUlRJQ0FMX1JBTkdFX0FSRUEgXSksIHBhbmVcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLmNyZWF0ZUJhckNoYXJ0KFxuICAgICAgICAgICAgZmlsdGVyU2VyaWVzQnlUeXBlKHNlcmllcywgWyBDT0xVTU4sIEJBUiBdKSwgcGFuZVxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMuY3JlYXRlUmFuZ2VCYXJDaGFydChcbiAgICAgICAgICAgIGZpbHRlclNlcmllc0J5VHlwZShzZXJpZXMsIFsgUkFOR0VfQ09MVU1OLCBSQU5HRV9CQVIgXSksIHBhbmVcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLmNyZWF0ZUJ1bGxldENoYXJ0KFxuICAgICAgICAgICAgZmlsdGVyU2VyaWVzQnlUeXBlKHNlcmllcywgWyBCVUxMRVQsIFZFUlRJQ0FMX0JVTExFVCBdKSwgcGFuZVxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMuY3JlYXRlQ2FuZGxlc3RpY2tDaGFydChcbiAgICAgICAgICAgIGZpbHRlclNlcmllc0J5VHlwZShzZXJpZXMsIENBTkRMRVNUSUNLKSwgcGFuZVxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMuY3JlYXRlQm94UGxvdENoYXJ0KFxuICAgICAgICAgICAgZmlsdGVyU2VyaWVzQnlUeXBlKHNlcmllcywgWyBCT1hfUExPVCwgVkVSVElDQUxfQk9YX1BMT1QgXSksIHBhbmVcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLmNyZWF0ZU9ITENDaGFydChcbiAgICAgICAgICAgIGZpbHRlclNlcmllc0J5VHlwZShzZXJpZXMsIE9ITEMpLCBwYW5lXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5jcmVhdGVXYXRlcmZhbGxDaGFydChcbiAgICAgICAgICAgIGZpbHRlclNlcmllc0J5VHlwZShzZXJpZXMsIFsgV0FURVJGQUxMLCBIT1JJWk9OVEFMX1dBVEVSRkFMTCBdKSwgcGFuZVxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMuY3JlYXRlTGluZUNoYXJ0KFxuICAgICAgICAgICAgZmlsdGVyU2VyaWVzQnlUeXBlKHNlcmllcywgWyBMSU5FLCBWRVJUSUNBTF9MSU5FIF0pLCBwYW5lXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgYWdncmVnYXRlQ2F0ZWdvcmllcyhwYW5lcykge1xuICAgICAgICBjb25zdCBzZXJpZXMgPSB0aGlzLnNyY1NlcmllcyB8fCB0aGlzLnNlcmllcztcbiAgICAgICAgY29uc3QgcHJvY2Vzc2VkU2VyaWVzID0gW107XG4gICAgICAgIHRoaXMuX2N1cnJlbnRQb2ludHNDYWNoZSA9IHt9O1xuICAgICAgICB0aGlzLl9zZXJpZXNQb2ludHNDYWNoZSA9IHRoaXMuX3Nlcmllc1BvaW50c0NhY2hlIHx8IHt9O1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VyaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgY3VycmVudFNlcmllcyA9IHNlcmllc1tpXTtcbiAgICAgICAgICAgIGNvbnN0IGNhdGVnb3J5QXhpcyA9IHRoaXMuc2VyaWVzQ2F0ZWdvcnlBeGlzKGN1cnJlbnRTZXJpZXMpO1xuICAgICAgICAgICAgY29uc3QgYXhpc1BhbmUgPSB0aGlzLmZpbmRQYW5lKGNhdGVnb3J5QXhpcy5vcHRpb25zLnBhbmUpO1xuICAgICAgICAgICAgY29uc3QgZGF0ZUF4aXMgPSBlcXVhbHNJZ25vcmVDYXNlKGNhdGVnb3J5QXhpcy5vcHRpb25zLnR5cGUsIERBVEUpO1xuXG4gICAgICAgICAgICBpZiAoKGRhdGVBeGlzIHx8IGN1cnJlbnRTZXJpZXMuY2F0ZWdvcnlGaWVsZCkgJiYgaW5BcnJheShheGlzUGFuZSwgcGFuZXMpKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFNlcmllcyA9IHRoaXMuYWdncmVnYXRlU2VyaWVzKGN1cnJlbnRTZXJpZXMsIGNhdGVnb3J5QXhpcyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRTZXJpZXMgPSB0aGlzLmZpbHRlclNlcmllcyhjdXJyZW50U2VyaWVzLCBjYXRlZ29yeUF4aXMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwcm9jZXNzZWRTZXJpZXMucHVzaChjdXJyZW50U2VyaWVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3Nlcmllc1BvaW50c0NhY2hlID0gdGhpcy5fY3VycmVudFBvaW50c0NhY2hlO1xuICAgICAgICB0aGlzLl9jdXJyZW50UG9pbnRzQ2FjaGUgPSBudWxsO1xuXG4gICAgICAgIHRoaXMuc3JjU2VyaWVzID0gc2VyaWVzO1xuICAgICAgICB0aGlzLnNlcmllcyA9IHByb2Nlc3NlZFNlcmllcztcbiAgICB9XG5cbiAgICBmaWx0ZXJTZXJpZXMoc2VyaWVzLCBjYXRlZ29yeUF4aXMpIHtcbiAgICAgICAgY29uc3QgZGF0YUxlbmd0aCA9IChzZXJpZXMuZGF0YSB8fCB7fSkubGVuZ3RoO1xuICAgICAgICBjYXRlZ29yeUF4aXMuX3Nlcmllc01heCA9IE1hdGgubWF4KGNhdGVnb3J5QXhpcy5fc2VyaWVzTWF4IHx8IDAsIGRhdGFMZW5ndGgpO1xuXG4gICAgICAgIGlmICghKGlzTnVtYmVyKGNhdGVnb3J5QXhpcy5vcHRpb25zLm1pbikgfHwgaXNOdW1iZXIoY2F0ZWdvcnlBeGlzLm9wdGlvbnMubWF4KSkpIHtcbiAgICAgICAgICAgIHJldHVybiBzZXJpZXM7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByYW5nZSA9IGNhdGVnb3J5QXhpcy5jdXJyZW50UmFuZ2VJbmRpY2VzKCk7XG4gICAgICAgIGNvbnN0IG91dE9mUmFuZ2VQb2ludHMgPSBpbkFycmF5KHNlcmllcy50eXBlLCBPVVRfT0ZfUkFOR0VfU0VSSUVTKTtcbiAgICAgICAgY29uc3QgY3VycmVudFNlcmllcyA9IGRlZXBFeHRlbmQoe30sIHNlcmllcyk7XG5cbiAgICAgICAgY3VycmVudFNlcmllcy5kYXRhID0gKGN1cnJlbnRTZXJpZXMuZGF0YSB8fCBbXSkuc2xpY2UocmFuZ2UubWluLCByYW5nZS5tYXggKyAxKTtcblxuICAgICAgICBpZiAob3V0T2ZSYW5nZVBvaW50cykge1xuICAgICAgICAgICAgY3JlYXRlT3V0T2ZSYW5nZVBvaW50cyhjdXJyZW50U2VyaWVzLCByYW5nZSwgZGF0YUxlbmd0aCwgKGlkeCkgPT4gKHtcbiAgICAgICAgICAgICAgICBpdGVtOiBzZXJpZXMuZGF0YVtpZHhdLFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBjYXRlZ29yeUF4aXMuY2F0ZWdvcnlBdChpZHgsIHRydWUpLFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5SXg6IGlkeCAtIHJhbmdlLm1pblxuICAgICAgICAgICAgfSksIChpZHgpID0+IGRlZmluZWQoc2VyaWVzLmRhdGFbaWR4XSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGN1cnJlbnRTZXJpZXM7XG4gICAgfVxuXG4gICAgY2xlYXJTZXJpZXNQb2ludHNDYWNoZSgpIHtcbiAgICAgICAgdGhpcy5fc2VyaWVzUG9pbnRzQ2FjaGUgPSB7fTtcbiAgICB9XG5cbiAgICBzZXJpZXNTb3VyY2VQb2ludHMoc2VyaWVzLCBjYXRlZ29yeUF4aXMpIHtcbiAgICAgICAgY29uc3Qga2V5ID0gYCR7IHNlcmllcy5pbmRleCB9OyR7IGNhdGVnb3J5QXhpcy5jYXRlZ29yaWVzSGFzaCgpIH1gO1xuICAgICAgICBpZiAodGhpcy5fc2VyaWVzUG9pbnRzQ2FjaGVba2V5XSkge1xuICAgICAgICAgICAgdGhpcy5fY3VycmVudFBvaW50c0NhY2hlW2tleV0gPSB0aGlzLl9zZXJpZXNQb2ludHNDYWNoZVtrZXldO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Nlcmllc1BvaW50c0NhY2hlW2tleV07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBheGlzT3B0aW9ucyA9IGNhdGVnb3J5QXhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBzcmNDYXRlZ29yaWVzID0gYXhpc09wdGlvbnMuc3JjQ2F0ZWdvcmllcztcbiAgICAgICAgY29uc3QgZGF0ZUF4aXMgPSBlcXVhbHNJZ25vcmVDYXNlKGF4aXNPcHRpb25zLnR5cGUsIERBVEUpO1xuICAgICAgICBjb25zdCBzcmNEYXRhID0gc2VyaWVzLmRhdGE7XG4gICAgICAgIGNvbnN0IGdldEZuID0gZGF0ZUF4aXMgPyBnZXREYXRlRmllbGQgOiBnZXRGaWVsZDtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgICAgIGlmICghZGF0ZUF4aXMpIHtcbiAgICAgICAgICAgIGNhdGVnb3J5QXhpcy5tYXBDYXRlZ29yaWVzKCk7Ly9maXhlcyBtYWpvciBwZXJmb3JtYW5jZSBpc3N1ZSBjYXVzZWQgYnkgc2VhcmNoaW5nIGZvciB0aGUgaW5kZXggZm9yIGxhcmdlIGRhdGFcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IHNyY0RhdGEubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgbGV0IGNhdGVnb3J5O1xuICAgICAgICAgICAgaWYgKHNlcmllcy5jYXRlZ29yeUZpZWxkKSB7XG4gICAgICAgICAgICAgICAgY2F0ZWdvcnkgPSBnZXRGbihzZXJpZXMuY2F0ZWdvcnlGaWVsZCwgc3JjRGF0YVtpZHhdLCB0aGlzLmNoYXJ0U2VydmljZS5pbnRsKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2F0ZWdvcnkgPSBzcmNDYXRlZ29yaWVzW2lkeF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChkZWZpbmVkKGNhdGVnb3J5KSAmJiBjYXRlZ29yeSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNhdGVnb3J5SXggPSBjYXRlZ29yeUF4aXMudG90YWxJbmRleChjYXRlZ29yeSk7XG4gICAgICAgICAgICAgICAgcmVzdWx0W2NhdGVnb3J5SXhdID0gcmVzdWx0W2NhdGVnb3J5SXhdIHx8IHsgaXRlbXM6IFtdLCBjYXRlZ29yeTogY2F0ZWdvcnkgfTtcbiAgICAgICAgICAgICAgICByZXN1bHRbY2F0ZWdvcnlJeF0uaXRlbXMucHVzaChpZHgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fY3VycmVudFBvaW50c0NhY2hlW2tleV0gPSByZXN1bHQ7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBhZ2dyZWdhdGVTZXJpZXMoc2VyaWVzLCBjYXRlZ29yeUF4aXMpIHtcbiAgICAgICAgY29uc3Qgc3JjRGF0YSA9IHNlcmllcy5kYXRhO1xuICAgICAgICBpZiAoIXNyY0RhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gc2VyaWVzO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3JjUG9pbnRzID0gdGhpcy5zZXJpZXNTb3VyY2VQb2ludHMoc2VyaWVzLCBjYXRlZ29yeUF4aXMpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBkZWVwRXh0ZW5kKHt9LCBzZXJpZXMpO1xuICAgICAgICBjb25zdCBhZ2dyZWdhdG9yID0gbmV3IFNlcmllc0FnZ3JlZ2F0b3IoZGVlcEV4dGVuZCh7fSwgc2VyaWVzKSwgU2VyaWVzQmluZGVyLmN1cnJlbnQsIERlZmF1bHRBZ2dyZWdhdGVzLmN1cnJlbnQpO1xuICAgICAgICBjb25zdCBkYXRhID0gcmVzdWx0LmRhdGEgPSBbXTtcbiAgICAgICAgY29uc3QgZGF0YUl0ZW1zID0gY2F0ZWdvcnlBeGlzLm9wdGlvbnMuZGF0YUl0ZW1zIHx8IFtdO1xuXG4gICAgICAgIGNvbnN0IHJhbmdlID0gY2F0ZWdvcnlBeGlzLmN1cnJlbnRSYW5nZUluZGljZXMoKTtcbiAgICAgICAgY29uc3QgY2F0ZWdvcnlJdGVtID0gKGlkeCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2F0ZWdvcnlJZHggPSBpZHggLSByYW5nZS5taW47XG4gICAgICAgICAgICBsZXQgcG9pbnQgPSBzcmNQb2ludHNbaWR4XTtcbiAgICAgICAgICAgIGlmICghcG9pbnQpIHtcbiAgICAgICAgICAgICAgICBwb2ludCA9IHNyY1BvaW50c1tpZHhdID0ge307XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHBvaW50LmNhdGVnb3J5SXggPSBjYXRlZ29yeUlkeDtcblxuICAgICAgICAgICAgaWYgKCFwb2ludC5pdGVtKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2F0ZWdvcnkgPSBjYXRlZ29yeUF4aXMuY2F0ZWdvcnlBdChpZHgsIHRydWUpO1xuICAgICAgICAgICAgICAgIHBvaW50LmNhdGVnb3J5ID0gY2F0ZWdvcnk7XG4gICAgICAgICAgICAgICAgcG9pbnQuaXRlbSA9IGFnZ3JlZ2F0b3IuYWdncmVnYXRlUG9pbnRzKHBvaW50Lml0ZW1zLCBjYXRlZ29yeSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBwb2ludDtcbiAgICAgICAgfTtcblxuICAgICAgICBmb3IgKGxldCBpZHggPSByYW5nZS5taW47IGlkeCA8PSByYW5nZS5tYXg7IGlkeCsrKSB7XG4gICAgICAgICAgICBjb25zdCBwb2ludCA9IGNhdGVnb3J5SXRlbShpZHgpO1xuICAgICAgICAgICAgZGF0YVtwb2ludC5jYXRlZ29yeUl4XSA9IHBvaW50Lml0ZW07XG5cbiAgICAgICAgICAgIGlmIChwb2ludC5pdGVtcyAmJiBwb2ludC5pdGVtcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBkYXRhSXRlbXNbcG9pbnQuY2F0ZWdvcnlJeF0gPSBwb2ludC5pdGVtO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGluQXJyYXkocmVzdWx0LnR5cGUsIE9VVF9PRl9SQU5HRV9TRVJJRVMpKSB7XG4gICAgICAgICAgICBjcmVhdGVPdXRPZlJhbmdlUG9pbnRzKHJlc3VsdCwgcmFuZ2UsIGNhdGVnb3J5QXhpcy50b3RhbENvdW50KCksIGNhdGVnb3J5SXRlbSwgKGlkeCkgPT4gc3JjUG9pbnRzW2lkeF0pO1xuICAgICAgICB9XG5cbiAgICAgICAgY2F0ZWdvcnlBeGlzLm9wdGlvbnMuZGF0YUl0ZW1zID0gZGF0YUl0ZW1zO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgYXBwZW5kQ2hhcnQoY2hhcnQsIHBhbmUpIHtcbiAgICAgICAgY29uc3Qgc2VyaWVzID0gY2hhcnQub3B0aW9ucy5zZXJpZXM7XG4gICAgICAgIGNvbnN0IGNhdGVnb3J5QXhpcyA9IHRoaXMuc2VyaWVzQ2F0ZWdvcnlBeGlzKHNlcmllc1swXSk7XG4gICAgICAgIGxldCBjYXRlZ29yaWVzID0gY2F0ZWdvcnlBeGlzLm9wdGlvbnMuY2F0ZWdvcmllcztcbiAgICAgICAgbGV0IGNhdGVnb3JpZXNUb0FkZCA9IE1hdGgubWF4KDAsIGNhdGVnb3JpZXNDb3VudChzZXJpZXMpIC0gY2F0ZWdvcmllcy5sZW5ndGgpO1xuXG4gICAgICAgIGlmIChjYXRlZ29yaWVzVG9BZGQgPiAwKSB7Ly9jb25zaWRlciBzZXR0aW5nIGFuIG9wdGlvbiB0byBheGlzIGluc3RlYWQgb2YgYWRkaW5nIGZha2UgY2F0ZWdvcmllc1xuICAgICAgICAgICAgY2F0ZWdvcmllcyA9IGNhdGVnb3J5QXhpcy5vcHRpb25zLmNhdGVnb3JpZXMgPSBjYXRlZ29yeUF4aXMub3B0aW9ucy5jYXRlZ29yaWVzLnNsaWNlKDApO1xuICAgICAgICAgICAgd2hpbGUgKGNhdGVnb3JpZXNUb0FkZC0tKSB7XG4gICAgICAgICAgICAgICAgY2F0ZWdvcmllcy5wdXNoKFwiXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy52YWx1ZUF4aXNSYW5nZVRyYWNrZXIudXBkYXRlKGNoYXJ0LnZhbHVlQXhpc1Jhbmdlcyk7XG5cbiAgICAgICAgc3VwZXIuYXBwZW5kQ2hhcnQoY2hhcnQsIHBhbmUpO1xuICAgIH1cblxuICAgIC8vIFRPRE86IFJlZmFjdG9yLCBvcHRpb25hbGx5IHVzZSBzZXJpZXMucGFuZSBvcHRpb25cbiAgICBzZXJpZXNQYW5lTmFtZShzZXJpZXMpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgYXhpc05hbWUgPSBzZXJpZXMuYXhpcztcbiAgICAgICAgY29uc3QgYXhpc09wdGlvbnMgPSBbXS5jb25jYXQob3B0aW9ucy52YWx1ZUF4aXMpO1xuICAgICAgICBjb25zdCBheGlzID0gZ3JlcChheGlzT3B0aW9ucywgZnVuY3Rpb24oYSkgeyByZXR1cm4gYS5uYW1lID09PSBheGlzTmFtZTsgfSlbMF07XG4gICAgICAgIGNvbnN0IHBhbmVzID0gb3B0aW9ucy5wYW5lcyB8fCBbIHt9IF07XG4gICAgICAgIGNvbnN0IGRlZmF1bHRQYW5lTmFtZSA9IChwYW5lc1swXSB8fCB7fSkubmFtZSB8fCBcImRlZmF1bHRcIjtcbiAgICAgICAgY29uc3QgcGFuZU5hbWUgPSAoYXhpcyB8fCB7fSkucGFuZSB8fCBkZWZhdWx0UGFuZU5hbWU7XG5cbiAgICAgICAgcmV0dXJuIHBhbmVOYW1lO1xuICAgIH1cblxuICAgIHNlcmllc0NhdGVnb3J5QXhpcyhzZXJpZXMpIHtcbiAgICAgICAgY29uc3QgYXhpc05hbWUgPSBzZXJpZXMuY2F0ZWdvcnlBeGlzO1xuICAgICAgICBjb25zdCBheGlzID0gYXhpc05hbWUgPyB0aGlzLm5hbWVkQ2F0ZWdvcnlBeGVzW2F4aXNOYW1lXSA6IHRoaXMuY2F0ZWdvcnlBeGlzO1xuXG4gICAgICAgIGlmICghYXhpcykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5hYmxlIHRvIGxvY2F0ZSBjYXRlZ29yeSBheGlzIHdpdGggbmFtZSBcIiArIGF4aXNOYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBheGlzO1xuICAgIH1cblxuICAgIHN0YWNrYWJsZUNoYXJ0T3B0aW9ucyhmaXJzdFNlcmllcywgcGFuZSkge1xuICAgICAgICBjb25zdCBzdGFjayA9IGZpcnN0U2VyaWVzLnN0YWNrO1xuICAgICAgICBjb25zdCBpc1N0YWNrZWQxMDAgPSBzdGFjayAmJiBzdGFjay50eXBlID09PSBcIjEwMCVcIjtcbiAgICAgICAgY29uc3QgY2xpcCA9IHBhbmUub3B0aW9ucy5jbGlwO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpc1N0YWNrZWQ6IHN0YWNrLFxuICAgICAgICAgICAgaXNTdGFja2VkMTAwOiBpc1N0YWNrZWQxMDAsXG4gICAgICAgICAgICBjbGlwOiBjbGlwXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZ3JvdXBTZXJpZXNCeUNhdGVnb3J5QXhpcyhzZXJpZXMpIHtcbiAgICAgICAgY29uc3QgY2F0ZWdvcnlBeGVzID0gW107XG4gICAgICAgIGNvbnN0IHVuaXF1ZSA9IHt9O1xuICAgICAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBzZXJpZXMubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgY29uc3QgbmFtZSA9IHNlcmllc1tpZHhdLmNhdGVnb3J5QXhpcyB8fCBcIiQkZGVmYXVsdCQkXCI7XG4gICAgICAgICAgICBpZiAoIXVuaXF1ZS5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgICAgICAgIHVuaXF1ZVtuYW1lXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgY2F0ZWdvcnlBeGVzLnB1c2gobmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBncm91cHMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgYXhpc0l4ID0gMDsgYXhpc0l4IDwgY2F0ZWdvcnlBeGVzLmxlbmd0aDsgYXhpc0l4KyspIHtcbiAgICAgICAgICAgIGNvbnN0IGF4aXMgPSBjYXRlZ29yeUF4ZXNbYXhpc0l4XTtcbiAgICAgICAgICAgIGNvbnN0IGF4aXNTZXJpZXMgPSBncm91cFNlcmllcyhzZXJpZXMsIGF4aXMsIGF4aXNJeCk7XG4gICAgICAgICAgICBpZiAoYXhpc1Nlcmllcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZ3JvdXBzLnB1c2goYXhpc1Nlcmllcyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZ3JvdXBzO1xuICAgIH1cblxuICAgIGNyZWF0ZUJhckNoYXJ0KHNlcmllcywgcGFuZSkge1xuICAgICAgICBpZiAoc2VyaWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZmlyc3RTZXJpZXMgPSBzZXJpZXNbMF07XG4gICAgICAgIGNvbnN0IGJhckNoYXJ0ID0gbmV3IEJhckNoYXJ0KHRoaXMsIE9iamVjdC5hc3NpZ24oe1xuICAgICAgICAgICAgc2VyaWVzOiBzZXJpZXMsXG4gICAgICAgICAgICBpbnZlcnRBeGVzOiB0aGlzLmludmVydEF4ZXMsXG4gICAgICAgICAgICBnYXA6IGZpcnN0U2VyaWVzLmdhcCxcbiAgICAgICAgICAgIHNwYWNpbmc6IGZpcnN0U2VyaWVzLnNwYWNpbmdcbiAgICAgICAgfSwgdGhpcy5zdGFja2FibGVDaGFydE9wdGlvbnMoZmlyc3RTZXJpZXMsIHBhbmUpKSk7XG5cbiAgICAgICAgdGhpcy5hcHBlbmRDaGFydChiYXJDaGFydCwgcGFuZSk7XG4gICAgfVxuXG4gICAgY3JlYXRlUmFuZ2VCYXJDaGFydChzZXJpZXMsIHBhbmUpIHtcbiAgICAgICAgaWYgKHNlcmllcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGZpcnN0U2VyaWVzID0gc2VyaWVzWzBdO1xuICAgICAgICBjb25zdCByYW5nZUNvbHVtbkNoYXJ0ID0gbmV3IFJhbmdlQmFyQ2hhcnQodGhpcywge1xuICAgICAgICAgICAgc2VyaWVzOiBzZXJpZXMsXG4gICAgICAgICAgICBpbnZlcnRBeGVzOiB0aGlzLmludmVydEF4ZXMsXG4gICAgICAgICAgICBnYXA6IGZpcnN0U2VyaWVzLmdhcCxcbiAgICAgICAgICAgIHNwYWNpbmc6IGZpcnN0U2VyaWVzLnNwYWNpbmdcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5hcHBlbmRDaGFydChyYW5nZUNvbHVtbkNoYXJ0LCBwYW5lKTtcbiAgICB9XG5cbiAgICBjcmVhdGVCdWxsZXRDaGFydChzZXJpZXMsIHBhbmUpIHtcbiAgICAgICAgaWYgKHNlcmllcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGZpcnN0U2VyaWVzID0gc2VyaWVzWzBdO1xuICAgICAgICBjb25zdCBidWxsZXRDaGFydCA9IG5ldyBCdWxsZXRDaGFydCh0aGlzLCB7XG4gICAgICAgICAgICBzZXJpZXM6IHNlcmllcyxcbiAgICAgICAgICAgIGludmVydEF4ZXM6IHRoaXMuaW52ZXJ0QXhlcyxcbiAgICAgICAgICAgIGdhcDogZmlyc3RTZXJpZXMuZ2FwLFxuICAgICAgICAgICAgc3BhY2luZzogZmlyc3RTZXJpZXMuc3BhY2luZyxcbiAgICAgICAgICAgIGNsaXA6IHBhbmUub3B0aW9ucy5jbGlwXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuYXBwZW5kQ2hhcnQoYnVsbGV0Q2hhcnQsIHBhbmUpO1xuICAgIH1cblxuICAgIGNyZWF0ZUxpbmVDaGFydChzZXJpZXMsIHBhbmUpIHtcbiAgICAgICAgaWYgKHNlcmllcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGZpcnN0U2VyaWVzID0gc2VyaWVzWzBdO1xuICAgICAgICBjb25zdCBsaW5lQ2hhcnQgPSBuZXcgTGluZUNoYXJ0KHRoaXMsIE9iamVjdC5hc3NpZ24oe1xuICAgICAgICAgICAgaW52ZXJ0QXhlczogdGhpcy5pbnZlcnRBeGVzLFxuICAgICAgICAgICAgc2VyaWVzOiBzZXJpZXNcbiAgICAgICAgfSwgdGhpcy5zdGFja2FibGVDaGFydE9wdGlvbnMoZmlyc3RTZXJpZXMsIHBhbmUpKSk7XG5cbiAgICAgICAgdGhpcy5hcHBlbmRDaGFydChsaW5lQ2hhcnQsIHBhbmUpO1xuICAgIH1cblxuICAgIGNyZWF0ZUFyZWFDaGFydChzZXJpZXMsIHBhbmUpIHtcbiAgICAgICAgaWYgKHNlcmllcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGZpcnN0U2VyaWVzID0gc2VyaWVzWzBdO1xuICAgICAgICBjb25zdCBhcmVhQ2hhcnQgPSBuZXcgQXJlYUNoYXJ0KHRoaXMsIE9iamVjdC5hc3NpZ24oe1xuICAgICAgICAgICAgaW52ZXJ0QXhlczogdGhpcy5pbnZlcnRBeGVzLFxuICAgICAgICAgICAgc2VyaWVzOiBzZXJpZXNcbiAgICAgICAgfSwgdGhpcy5zdGFja2FibGVDaGFydE9wdGlvbnMoZmlyc3RTZXJpZXMsIHBhbmUpKSk7XG5cbiAgICAgICAgdGhpcy5hcHBlbmRDaGFydChhcmVhQ2hhcnQsIHBhbmUpO1xuICAgIH1cblxuICAgIGNyZWF0ZVJhbmdlQXJlYUNoYXJ0KHNlcmllcywgcGFuZSkge1xuICAgICAgICBpZiAoc2VyaWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcmFuZ2VBcmVhQ2hhcnQgPSBuZXcgUmFuZ2VBcmVhQ2hhcnQodGhpcywge1xuICAgICAgICAgICAgaW52ZXJ0QXhlczogdGhpcy5pbnZlcnRBeGVzLFxuICAgICAgICAgICAgc2VyaWVzOiBzZXJpZXMsXG4gICAgICAgICAgICBjbGlwOiBwYW5lLm9wdGlvbnMuY2xpcFxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmFwcGVuZENoYXJ0KHJhbmdlQXJlYUNoYXJ0LCBwYW5lKTtcbiAgICB9XG5cbiAgICBjcmVhdGVPSExDQ2hhcnQoc2VyaWVzLCBwYW5lKSB7XG4gICAgICAgIGlmIChzZXJpZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBmaXJzdFNlcmllcyA9IHNlcmllc1swXTtcbiAgICAgICAgY29uc3QgY2hhcnQgPSBuZXcgT0hMQ0NoYXJ0KHRoaXMsIHtcbiAgICAgICAgICAgIGludmVydEF4ZXM6IHRoaXMuaW52ZXJ0QXhlcyxcbiAgICAgICAgICAgIGdhcDogZmlyc3RTZXJpZXMuZ2FwLFxuICAgICAgICAgICAgc2VyaWVzOiBzZXJpZXMsXG4gICAgICAgICAgICBzcGFjaW5nOiBmaXJzdFNlcmllcy5zcGFjaW5nLFxuICAgICAgICAgICAgY2xpcDogcGFuZS5vcHRpb25zLmNsaXBcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5hcHBlbmRDaGFydChjaGFydCwgcGFuZSk7XG4gICAgfVxuXG4gICAgY3JlYXRlQ2FuZGxlc3RpY2tDaGFydChzZXJpZXMsIHBhbmUpIHtcbiAgICAgICAgaWYgKHNlcmllcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGZpcnN0U2VyaWVzID0gc2VyaWVzWzBdO1xuICAgICAgICBjb25zdCBjaGFydCA9IG5ldyBDYW5kbGVzdGlja0NoYXJ0KHRoaXMsIHtcbiAgICAgICAgICAgIGludmVydEF4ZXM6IHRoaXMuaW52ZXJ0QXhlcyxcbiAgICAgICAgICAgIGdhcDogZmlyc3RTZXJpZXMuZ2FwLFxuICAgICAgICAgICAgc2VyaWVzOiBzZXJpZXMsXG4gICAgICAgICAgICBzcGFjaW5nOiBmaXJzdFNlcmllcy5zcGFjaW5nLFxuICAgICAgICAgICAgY2xpcDogcGFuZS5vcHRpb25zLmNsaXBcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5hcHBlbmRDaGFydChjaGFydCwgcGFuZSk7XG4gICAgfVxuXG4gICAgY3JlYXRlQm94UGxvdENoYXJ0KHNlcmllcywgcGFuZSkge1xuICAgICAgICBpZiAoc2VyaWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZmlyc3RTZXJpZXMgPSBzZXJpZXNbMF07XG4gICAgICAgIGNvbnN0IGNoYXJ0ID0gbmV3IEJveFBsb3RDaGFydCh0aGlzLCB7XG4gICAgICAgICAgICBpbnZlcnRBeGVzOiB0aGlzLmludmVydEF4ZXMsXG4gICAgICAgICAgICBnYXA6IGZpcnN0U2VyaWVzLmdhcCxcbiAgICAgICAgICAgIHNlcmllczogc2VyaWVzLFxuICAgICAgICAgICAgc3BhY2luZzogZmlyc3RTZXJpZXMuc3BhY2luZyxcbiAgICAgICAgICAgIGNsaXA6IHBhbmUub3B0aW9ucy5jbGlwXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuYXBwZW5kQ2hhcnQoY2hhcnQsIHBhbmUpO1xuICAgIH1cblxuICAgIGNyZWF0ZVdhdGVyZmFsbENoYXJ0KHNlcmllcywgcGFuZSkge1xuICAgICAgICBpZiAoc2VyaWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZmlyc3RTZXJpZXMgPSBzZXJpZXNbMF07XG4gICAgICAgIGNvbnN0IHdhdGVyZmFsbENoYXJ0ID0gbmV3IFdhdGVyZmFsbENoYXJ0KHRoaXMsIHtcbiAgICAgICAgICAgIHNlcmllczogc2VyaWVzLFxuICAgICAgICAgICAgaW52ZXJ0QXhlczogdGhpcy5pbnZlcnRBeGVzLFxuICAgICAgICAgICAgZ2FwOiBmaXJzdFNlcmllcy5nYXAsXG4gICAgICAgICAgICBzcGFjaW5nOiBmaXJzdFNlcmllcy5zcGFjaW5nXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuYXBwZW5kQ2hhcnQod2F0ZXJmYWxsQ2hhcnQsIHBhbmUpO1xuICAgIH1cblxuICAgIGF4aXNSZXF1aXJlc1JvdW5kaW5nKGNhdGVnb3J5QXhpc05hbWUsIGNhdGVnb3J5QXhpc0luZGV4KSB7XG4gICAgICAgIGNvbnN0IGNlbnRlcmVkU2VyaWVzID0gZmlsdGVyU2VyaWVzQnlUeXBlKHRoaXMuc2VyaWVzLCBFUVVBTExZX1NQQUNFRF9TRVJJRVMpO1xuXG4gICAgICAgIGZvciAobGV0IHNlcmllc0l4ID0gMDsgc2VyaWVzSXggPCB0aGlzLnNlcmllcy5sZW5ndGg7IHNlcmllc0l4KyspIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRTZXJpZXMgPSB0aGlzLnNlcmllc1tzZXJpZXNJeF07XG4gICAgICAgICAgICBpZiAoaW5BcnJheShjdXJyZW50U2VyaWVzLnR5cGUsIEFSRUFfU0VSSUVTKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxpbmUgPSBjdXJyZW50U2VyaWVzLmxpbmU7XG4gICAgICAgICAgICAgICAgaWYgKGxpbmUgJiYgbGluZS5zdHlsZSA9PT0gU1RFUCkge1xuICAgICAgICAgICAgICAgICAgICBjZW50ZXJlZFNlcmllcy5wdXNoKGN1cnJlbnRTZXJpZXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IHNlcmllc0l4ID0gMDsgc2VyaWVzSXggPCBjZW50ZXJlZFNlcmllcy5sZW5ndGg7IHNlcmllc0l4KyspIHtcbiAgICAgICAgICAgIGNvbnN0IHNlcmllc0F4aXMgPSBjZW50ZXJlZFNlcmllc1tzZXJpZXNJeF0uY2F0ZWdvcnlBeGlzIHx8IFwiXCI7XG4gICAgICAgICAgICBpZiAoc2VyaWVzQXhpcyA9PT0gY2F0ZWdvcnlBeGlzTmFtZSB8fCAoIXNlcmllc0F4aXMgJiYgY2F0ZWdvcnlBeGlzSW5kZXggPT09IDApKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhZ2dyZWdhdGVkQXhpcyhjYXRlZ29yeUF4aXNOYW1lLCBjYXRlZ29yeUF4aXNJbmRleCkge1xuICAgICAgICBjb25zdCBzZXJpZXMgPSB0aGlzLnNlcmllcztcblxuICAgICAgICBmb3IgKGxldCBzZXJpZXNJeCA9IDA7IHNlcmllc0l4IDwgc2VyaWVzLmxlbmd0aDsgc2VyaWVzSXgrKykge1xuICAgICAgICAgICAgY29uc3Qgc2VyaWVzQXhpcyA9IHNlcmllc1tzZXJpZXNJeF0uY2F0ZWdvcnlBeGlzIHx8IFwiXCI7XG4gICAgICAgICAgICBpZiAoKHNlcmllc0F4aXMgPT09IGNhdGVnb3J5QXhpc05hbWUgfHwgKCFzZXJpZXNBeGlzICYmIGNhdGVnb3J5QXhpc0luZGV4ID09PSAwKSkgJiYgc2VyaWVzW3Nlcmllc0l4XS5jYXRlZ29yeUZpZWxkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjcmVhdGVDYXRlZ29yeUF4ZXNMYWJlbHMoKSB7XG4gICAgICAgIGNvbnN0IGF4ZXMgPSB0aGlzLmF4ZXM7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXhlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGF4ZXNbaV0gaW5zdGFuY2VvZiBDYXRlZ29yeUF4aXMpIHtcbiAgICAgICAgICAgICAgICBheGVzW2ldLmNyZWF0ZUxhYmVscygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY3JlYXRlQ2F0ZWdvcnlBeGVzKHBhbmVzKSB7XG4gICAgICAgIGNvbnN0IGludmVydEF4ZXMgPSB0aGlzLmludmVydEF4ZXM7XG4gICAgICAgIGNvbnN0IGRlZmluaXRpb25zID0gW10uY29uY2F0KHRoaXMub3B0aW9ucy5jYXRlZ29yeUF4aXMpO1xuICAgICAgICBjb25zdCBheGVzID0gW107XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkZWZpbml0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IGF4aXNPcHRpb25zID0gZGVmaW5pdGlvbnNbaV07XG4gICAgICAgICAgICBjb25zdCBheGlzUGFuZSA9IHRoaXMuZmluZFBhbmUoYXhpc09wdGlvbnMucGFuZSk7XG5cbiAgICAgICAgICAgIGlmIChpbkFycmF5KGF4aXNQYW5lLCBwYW5lcykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IG5hbWUsIGNhdGVnb3JpZXMgPSBbXSB9ID0gYXhpc09wdGlvbnM7XG4gICAgICAgICAgICAgICAgYXhpc09wdGlvbnMgPSBkZWVwRXh0ZW5kKHtcbiAgICAgICAgICAgICAgICAgICAgdmVydGljYWw6IGludmVydEF4ZXMsXG4gICAgICAgICAgICAgICAgICAgIHJldmVyc2U6ICFpbnZlcnRBeGVzICYmIHRoaXMuY2hhcnRTZXJ2aWNlLnJ0bCxcbiAgICAgICAgICAgICAgICAgICAgYXhpc0Nyb3NzaW5nVmFsdWU6IGludmVydEF4ZXMgPyBNQVhfVkFMVUUgOiAwXG4gICAgICAgICAgICAgICAgfSwgYXhpc09wdGlvbnMpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFkZWZpbmVkKGF4aXNPcHRpb25zLmp1c3RpZmllZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgYXhpc09wdGlvbnMuanVzdGlmaWVkID0gdGhpcy5pc0p1c3RpZmllZCgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmF4aXNSZXF1aXJlc1JvdW5kaW5nKG5hbWUsIGkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGF4aXNPcHRpb25zLmp1c3RpZmllZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCBjYXRlZ29yeUF4aXM7XG5cbiAgICAgICAgICAgICAgICBpZiAoaXNEYXRlQXhpcyhheGlzT3B0aW9ucywgY2F0ZWdvcmllc1swXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnlBeGlzID0gbmV3IERhdGVDYXRlZ29yeUF4aXMoYXhpc09wdGlvbnMsIHRoaXMuY2hhcnRTZXJ2aWNlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeUF4aXMgPSBuZXcgQ2F0ZWdvcnlBeGlzKGF4aXNPcHRpb25zLCB0aGlzLmNoYXJ0U2VydmljZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZGVmaW5pdGlvbnNbaV0uY2F0ZWdvcmllcyA9IGNhdGVnb3J5QXhpcy5vcHRpb25zLnNyY0NhdGVnb3JpZXM7XG5cbiAgICAgICAgICAgICAgICBpZiAobmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5uYW1lZENhdGVnb3J5QXhlc1tuYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYXRlZ29yeSBheGlzIHdpdGggbmFtZSAkeyBuYW1lIH0gaXMgYWxyZWFkeSBkZWZpbmVkYCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uYW1lZENhdGVnb3J5QXhlc1tuYW1lXSA9IGNhdGVnb3J5QXhpcztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjYXRlZ29yeUF4aXMuYXhpc0luZGV4ID0gaTtcbiAgICAgICAgICAgICAgICBheGVzLnB1c2goY2F0ZWdvcnlBeGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFwcGVuZEF4aXMoY2F0ZWdvcnlBeGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHByaW1hcnlBeGlzID0gdGhpcy5jYXRlZ29yeUF4aXMgfHwgYXhlc1swXTtcbiAgICAgICAgdGhpcy5jYXRlZ29yeUF4aXMgPSBwcmltYXJ5QXhpcztcblxuICAgICAgICBpZiAoaW52ZXJ0QXhlcykge1xuICAgICAgICAgICAgdGhpcy5heGlzWSA9IHByaW1hcnlBeGlzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5heGlzWCA9IHByaW1hcnlBeGlzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaXNKdXN0aWZpZWQoKSB7XG4gICAgICAgIGNvbnN0IHNlcmllcyA9IHRoaXMuc2VyaWVzO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VyaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50U2VyaWVzID0gc2VyaWVzW2ldO1xuICAgICAgICAgICAgaWYgKCFpbkFycmF5KGN1cnJlbnRTZXJpZXMudHlwZSwgQVJFQV9TRVJJRVMpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgY3JlYXRlVmFsdWVBeGVzKHBhbmVzKSB7XG4gICAgICAgIGNvbnN0IHRyYWNrZXIgPSB0aGlzLnZhbHVlQXhpc1JhbmdlVHJhY2tlcjtcbiAgICAgICAgY29uc3QgZGVmYXVsdFJhbmdlID0gdHJhY2tlci5xdWVyeSgpO1xuICAgICAgICBjb25zdCBkZWZpbml0aW9ucyA9IFtdLmNvbmNhdCh0aGlzLm9wdGlvbnMudmFsdWVBeGlzKTtcbiAgICAgICAgY29uc3QgaW52ZXJ0QXhlcyA9IHRoaXMuaW52ZXJ0QXhlcztcbiAgICAgICAgY29uc3QgYmFzZU9wdGlvbnMgPSB7IHZlcnRpY2FsOiAhaW52ZXJ0QXhlcywgcmV2ZXJzZTogaW52ZXJ0QXhlcyAmJiB0aGlzLmNoYXJ0U2VydmljZS5ydGwgfTtcbiAgICAgICAgY29uc3QgYXhlcyA9IFtdO1xuXG4gICAgICAgIGlmICh0aGlzLnN0YWNrMTAwKSB7XG4gICAgICAgICAgICBiYXNlT3B0aW9ucy5yb3VuZFRvTWFqb3JVbml0ID0gZmFsc2U7XG4gICAgICAgICAgICBiYXNlT3B0aW9ucy5sYWJlbHMgPSB7IGZvcm1hdDogXCJQMFwiIH07XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRlZmluaXRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBheGlzT3B0aW9ucyA9IGRlZmluaXRpb25zW2ldO1xuICAgICAgICAgICAgY29uc3QgYXhpc1BhbmUgPSB0aGlzLmZpbmRQYW5lKGF4aXNPcHRpb25zLnBhbmUpO1xuXG4gICAgICAgICAgICBpZiAoaW5BcnJheShheGlzUGFuZSwgcGFuZXMpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmFtZSA9IGF4aXNPcHRpb25zLm5hbWU7XG4gICAgICAgICAgICAgICAgY29uc3QgZGVmYXVsdEF4aXNSYW5nZSA9IGVxdWFsc0lnbm9yZUNhc2UoYXhpc09wdGlvbnMudHlwZSwgTE9HQVJJVEhNSUMpID8geyBtaW46IDAuMSwgbWF4OiAxIH0gOiB7IG1pbjogMCwgbWF4OiAxIH07XG4gICAgICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSB0cmFja2VyLnF1ZXJ5KG5hbWUpIHx8IGRlZmF1bHRSYW5nZSB8fCBkZWZhdWx0QXhpc1JhbmdlO1xuXG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IDAgJiYgcmFuZ2UgJiYgZGVmYXVsdFJhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlLm1pbiA9IE1hdGgubWluKHJhbmdlLm1pbiwgZGVmYXVsdFJhbmdlLm1pbik7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlLm1heCA9IE1hdGgubWF4KHJhbmdlLm1heCwgZGVmYXVsdFJhbmdlLm1heCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbGV0IGF4aXNUeXBlO1xuICAgICAgICAgICAgICAgIGlmIChlcXVhbHNJZ25vcmVDYXNlKGF4aXNPcHRpb25zLnR5cGUsIExPR0FSSVRITUlDKSkge1xuICAgICAgICAgICAgICAgICAgICBheGlzVHlwZSA9IExvZ2FyaXRobWljQXhpcztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBheGlzVHlwZSA9IE51bWVyaWNBeGlzO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlQXhpcyA9IG5ldyBheGlzVHlwZShyYW5nZS5taW4sIHJhbmdlLm1heCxcbiAgICAgICAgICAgICAgICAgICAgZGVlcEV4dGVuZCh7fSwgYmFzZU9wdGlvbnMsIGF4aXNPcHRpb25zKSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGFydFNlcnZpY2VcbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubmFtZWRWYWx1ZUF4ZXNbbmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVmFsdWUgYXhpcyB3aXRoIG5hbWUgJHsgbmFtZSB9IGlzIGFscmVhZHkgZGVmaW5lZGApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubmFtZWRWYWx1ZUF4ZXNbbmFtZV0gPSB2YWx1ZUF4aXM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhbHVlQXhpcy5heGlzSW5kZXggPSBpO1xuXG4gICAgICAgICAgICAgICAgYXhlcy5wdXNoKHZhbHVlQXhpcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5hcHBlbmRBeGlzKHZhbHVlQXhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwcmltYXJ5QXhpcyA9IHRoaXMudmFsdWVBeGlzIHx8IGF4ZXNbMF07XG4gICAgICAgIHRoaXMudmFsdWVBeGlzID0gcHJpbWFyeUF4aXM7XG5cbiAgICAgICAgaWYgKGludmVydEF4ZXMpIHtcbiAgICAgICAgICAgIHRoaXMuYXhpc1ggPSBwcmltYXJ5QXhpcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYXhpc1kgPSBwcmltYXJ5QXhpcztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9kaXNwYXRjaEV2ZW50KGNoYXJ0LCBlLCBldmVudFR5cGUpIHtcbiAgICAgICAgY29uc3QgY29vcmRzID0gY2hhcnQuX2V2ZW50Q29vcmRpbmF0ZXMoZSk7XG4gICAgICAgIGNvbnN0IHBvaW50ID0gbmV3IFBvaW50KGNvb3Jkcy54LCBjb29yZHMueSk7XG4gICAgICAgIGNvbnN0IHBhbmUgPSB0aGlzLnBvaW50UGFuZShwb2ludCk7XG4gICAgICAgIGNvbnN0IGNhdGVnb3JpZXMgPSBbXTtcbiAgICAgICAgY29uc3QgdmFsdWVzID0gW107XG5cbiAgICAgICAgaWYgKCFwYW5lKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBhbGxBeGVzID0gcGFuZS5heGVzO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFsbEF4ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGF4aXMgPSBhbGxBeGVzW2ldO1xuICAgICAgICAgICAgaWYgKGF4aXMuZ2V0VmFsdWUpIHtcbiAgICAgICAgICAgICAgICBhcHBlbmRJZk5vdE51bGwodmFsdWVzLCBheGlzLmdldFZhbHVlKHBvaW50KSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFwcGVuZElmTm90TnVsbChjYXRlZ29yaWVzLCBheGlzLmdldENhdGVnb3J5KHBvaW50KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2F0ZWdvcmllcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGFwcGVuZElmTm90TnVsbChjYXRlZ29yaWVzLCB0aGlzLmNhdGVnb3J5QXhpcy5nZXRDYXRlZ29yeShwb2ludCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNhdGVnb3JpZXMubGVuZ3RoID4gMCAmJiB2YWx1ZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY2hhcnQudHJpZ2dlcihldmVudFR5cGUsIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50OiBldmVudEVsZW1lbnQoZSksXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogZSxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogc2luZ2xlSXRlbU9yQXJyYXkoY2F0ZWdvcmllcyksXG4gICAgICAgICAgICAgICAgdmFsdWU6IHNpbmdsZUl0ZW1PckFycmF5KHZhbHVlcylcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcG9pbnRQYW5lKHBvaW50KSB7XG4gICAgICAgIGNvbnN0IHBhbmVzID0gdGhpcy5wYW5lcztcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50UGFuZSA9IHBhbmVzW2ldO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRQYW5lLmNvbnRlbnRCb3guY29udGFpbnNQb2ludChwb2ludCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudFBhbmU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1cGRhdGVBeGlzT3B0aW9ucyhheGlzLCBvcHRpb25zKSB7XG4gICAgICAgIHVwZGF0ZUF4aXNPcHRpb25zKHRoaXMub3B0aW9ucywgYXhpcywgb3B0aW9ucyk7XG4gICAgICAgIHVwZGF0ZUF4aXNPcHRpb25zKHRoaXMub3JpZ2luYWxPcHRpb25zLCBheGlzLCBvcHRpb25zKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUF4aXNPcHRpb25zKHRhcmdldE9wdGlvbnMsIGF4aXMsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBheGVzT3B0aW9ucyA9IGF4aXMgaW5zdGFuY2VvZiBDYXRlZ29yeUF4aXMgPyBbXS5jb25jYXQodGFyZ2V0T3B0aW9ucy5jYXRlZ29yeUF4aXMpIDogW10uY29uY2F0KHRhcmdldE9wdGlvbnMudmFsdWVBeGlzKTtcbiAgICBkZWVwRXh0ZW5kKGF4ZXNPcHRpb25zW2F4aXMuYXhpc0luZGV4XSwgb3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIGdyb3VwU2VyaWVzKHNlcmllcywgYXhpcywgYXhpc0l4KSB7XG4gICAgcmV0dXJuIGdyZXAoc2VyaWVzLCBmdW5jdGlvbihzKSB7XG4gICAgICAgIHJldHVybiAoYXhpc0l4ID09PSAwICYmICFzLmNhdGVnb3J5QXhpcykgfHwgKHMuY2F0ZWdvcnlBeGlzID09PSBheGlzKTtcbiAgICB9KTtcbn1cblxuc2V0RGVmYXVsdE9wdGlvbnMoQ2F0ZWdvcmljYWxQbG90QXJlYSwge1xuICAgIGNhdGVnb3J5QXhpczoge30sXG4gICAgdmFsdWVBeGlzOiB7fVxufSk7XG5cbmRlZXBFeHRlbmQoQ2F0ZWdvcmljYWxQbG90QXJlYS5wcm90b3R5cGUsIFBsb3RBcmVhRXZlbnRzTWl4aW4pO1xuXG5leHBvcnQgZGVmYXVsdCBDYXRlZ29yaWNhbFBsb3RBcmVhOyIsImltcG9ydCB7IENsYXNzIH0gZnJvbSAnLi4vY29tbW9uJztcblxuY2xhc3MgSGlnaGxpZ2h0IGV4dGVuZHMgQ2xhc3Mge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMuX3BvaW50cyA9IFtdO1xuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuX3BvaW50cyA9IFtdO1xuICAgIH1cblxuICAgIHNob3cocG9pbnRzLCBvcGFjaXR5KSB7XG4gICAgICAgIGNvbnN0IGFycmF5UG9pbnRzID0gW10uY29uY2F0KHBvaW50cyk7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXlQb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHBvaW50ID0gYXJyYXlQb2ludHNbaV07XG4gICAgICAgICAgICBpZiAocG9pbnQgJiYgcG9pbnQudG9nZ2xlSGlnaGxpZ2h0ICYmIHBvaW50Lmhhc0hpZ2hsaWdodCgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50b2dnbGVQb2ludEhpZ2hsaWdodChwb2ludCwgdHJ1ZSwgb3BhY2l0eSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcG9pbnRzLnB1c2gocG9pbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdG9nZ2xlUG9pbnRIaWdobGlnaHQocG9pbnQsIHNob3csIG9wYWNpdHkpIHtcbiAgICAgICAgY29uc3QgdG9nZ2xlSGFuZGxlciA9IChwb2ludC5vcHRpb25zLmhpZ2hsaWdodCB8fCB7fSkudG9nZ2xlO1xuICAgICAgICBpZiAodG9nZ2xlSGFuZGxlcikge1xuICAgICAgICAgICAgY29uc3QgZXZlbnRBcmdzID0ge1xuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBwb2ludC5jYXRlZ29yeSxcbiAgICAgICAgICAgICAgICBzZXJpZXM6IHBvaW50LnNlcmllcyxcbiAgICAgICAgICAgICAgICBkYXRhSXRlbTogcG9pbnQuZGF0YUl0ZW0sXG4gICAgICAgICAgICAgICAgdmFsdWU6IHBvaW50LnZhbHVlLFxuICAgICAgICAgICAgICAgIHN0YWNrVmFsdWU6IHBvaW50LnN0YWNrVmFsdWUsXG4gICAgICAgICAgICAgICAgcHJldmVudERlZmF1bHQ6IHByZXZlbnREZWZhdWx0LFxuICAgICAgICAgICAgICAgIHZpc3VhbDogcG9pbnQuaGlnaGxpZ2h0VmlzdWFsKCksXG4gICAgICAgICAgICAgICAgc2hvdzogc2hvd1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRvZ2dsZUhhbmRsZXIoZXZlbnRBcmdzKTtcbiAgICAgICAgICAgIGlmICghZXZlbnRBcmdzLl9kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICAgICAgcG9pbnQudG9nZ2xlSGlnaGxpZ2h0KHNob3csIG9wYWNpdHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcG9pbnQudG9nZ2xlSGlnaGxpZ2h0KHNob3csIG9wYWNpdHkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGlkZSgpIHtcbiAgICAgICAgY29uc3QgcG9pbnRzID0gdGhpcy5fcG9pbnRzO1xuICAgICAgICB3aGlsZSAocG9pbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy50b2dnbGVQb2ludEhpZ2hsaWdodChwb2ludHMucG9wKCksIGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlzSGlnaGxpZ2h0ZWQoZWxlbWVudCkge1xuICAgICAgICBjb25zdCBwb2ludHMgPSB0aGlzLl9wb2ludHM7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHBvaW50ID0gcG9pbnRzW2ldO1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQgPT09IHBvaW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBwcmV2ZW50RGVmYXVsdCgpIHtcbiAgICB0aGlzLl9kZWZhdWx0UHJldmVudGVkID0gdHJ1ZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgSGlnaGxpZ2h0OyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFjY2VwdEtleShlLCBtb3VzZUtleSkge1xuICAgIGNvbnN0IGtleSA9IChtb3VzZUtleSB8fCBcIlwiKS50b0xvd2VyQ2FzZSgpO1xuICAgIGNvbnN0IGV2ZW50ID0gZS5ldmVudDtcbiAgICBjb25zdCBhY2NlcHQgPSAoa2V5ID09PSBcIm5vbmVcIiAmJiAhKGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuc2hpZnRLZXkgfHwgZXZlbnQuYWx0S2V5KSkgfHwgZXZlbnRba2V5ICsgXCJLZXlcIl07XG5cbiAgICByZXR1cm4gYWNjZXB0O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvQ2hhcnRBeGlzUmFuZ2VzKGF4aXNSYW5nZXMpIHtcbiAgICBjb25zdCByYW5nZXMgPSB7fTtcbiAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBheGlzUmFuZ2VzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgY29uc3QgYXhpc1JhbmdlID0gYXhpc1Jhbmdlc1tpZHhdO1xuICAgICAgICBpZiAoYXhpc1JhbmdlLmF4aXMub3B0aW9ucy5uYW1lKSB7XG4gICAgICAgICAgICByYW5nZXNbYXhpc1JhbmdlLmF4aXMub3B0aW9ucy5uYW1lXSA9IHtcbiAgICAgICAgICAgICAgICBtaW46IGF4aXNSYW5nZS5yYW5nZS5taW4sXG4gICAgICAgICAgICAgICAgbWF4OiBheGlzUmFuZ2UucmFuZ2UubWF4XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByYW5nZXM7XG59IiwiaW1wb3J0IGFjY2VwdEtleSBmcm9tICcuL2FjY2VwdC1rZXknO1xuaW1wb3J0IHRvQ2hhcnRBeGlzUmFuZ2VzIGZyb20gJy4vdG8tY2hhcnQtYXhpcy1yYW5nZXMnO1xuXG5pbXBvcnQgeyBYLCBZIH0gZnJvbSAnLi4vLi4vY29tbW9uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBDbGFzcywgZGVlcEV4dGVuZCB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5cbmNsYXNzIFBhbm5hYmxlIGV4dGVuZHMgQ2xhc3Mge1xuICAgIGNvbnN0cnVjdG9yKHBsb3RBcmVhLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5wbG90QXJlYSA9IHBsb3RBcmVhO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBkZWVwRXh0ZW5kKHt9LCB0aGlzLm9wdGlvbnMsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHN0YXJ0KGUpIHtcbiAgICAgICAgdGhpcy5fYWN0aXZlID0gYWNjZXB0S2V5KGUsIHRoaXMub3B0aW9ucy5rZXkpO1xuICAgICAgICByZXR1cm4gdGhpcy5fYWN0aXZlO1xuICAgIH1cblxuICAgIG1vdmUoZSkge1xuICAgICAgICBpZiAodGhpcy5fYWN0aXZlKSB7XG4gICAgICAgICAgICBjb25zdCBheGlzUmFuZ2VzID0gdGhpcy5heGlzUmFuZ2VzID0gdGhpcy5fcGFuQXhlcyhlLCBYKS5jb25jYXQodGhpcy5fcGFuQXhlcyhlLCBZKSk7XG4gICAgICAgICAgICBpZiAoYXhpc1Jhbmdlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmF4aXNSYW5nZXMgPSBheGlzUmFuZ2VzO1xuICAgICAgICAgICAgICAgIHJldHVybiB0b0NoYXJ0QXhpc1JhbmdlcyhheGlzUmFuZ2VzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGVuZCgpIHtcbiAgICAgICAgY29uc3QgYWN0aXZlID0gdGhpcy5fYWN0aXZlO1xuICAgICAgICB0aGlzLl9hY3RpdmUgPSBmYWxzZTtcblxuICAgICAgICByZXR1cm4gYWN0aXZlO1xuICAgIH1cblxuICAgIHBhbigpIHtcbiAgICAgICAgY29uc3QgeyBwbG90QXJlYSwgYXhpc1JhbmdlcyB9ID0gdGhpcztcbiAgICAgICAgaWYgKGF4aXNSYW5nZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBheGlzUmFuZ2VzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCByYW5nZSA9IGF4aXNSYW5nZXNbaWR4XTtcbiAgICAgICAgICAgICAgICBwbG90QXJlYS51cGRhdGVBeGlzT3B0aW9ucyhyYW5nZS5heGlzLCByYW5nZS5yYW5nZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwbG90QXJlYS5yZWRyYXcocGxvdEFyZWEucGFuZXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMucGxvdEFyZWE7XG4gICAgfVxuXG4gICAgX3BhbkF4ZXMoZSwgcG9zaXRpb24pIHtcbiAgICAgICAgY29uc3QgcGxvdEFyZWEgPSB0aGlzLnBsb3RBcmVhO1xuICAgICAgICBjb25zdCBkZWx0YSA9IC1lW3Bvc2l0aW9uXS5kZWx0YTtcbiAgICAgICAgY29uc3QgbG9jayA9ICh0aGlzLm9wdGlvbnMubG9jayB8fCBcIlwiKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBjb25zdCB1cGRhdGVkQXhlcyA9IFtdO1xuXG4gICAgICAgIGlmIChkZWx0YSAhPT0gMCAmJiAobG9jayB8fCBcIlwiKS50b0xvd2VyQ2FzZSgpICE9PSBwb3NpdGlvbikge1xuICAgICAgICAgICAgY29uc3QgYXhlcyA9IHBsb3RBcmVhLmF4ZXM7XG4gICAgICAgICAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBheGVzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBheGlzID0gYXhlc1tpZHhdO1xuXG4gICAgICAgICAgICAgICAgaWYgKHBvc2l0aW9uID09PSBYICYmICFheGlzLm9wdGlvbnMudmVydGljYWwgfHwgcG9zaXRpb24gPT09IFkgJiYgYXhpcy5vcHRpb25zLnZlcnRpY2FsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJhbmdlID0gYXhpcy5wYW4oZGVsdGEpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChyYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2UubGltaXRSYW5nZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVkQXhlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBheGlzOiBheGlzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlOiByYW5nZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdXBkYXRlZEF4ZXM7XG4gICAgfVxufVxuXG5QYW5uYWJsZS5wcm90b3R5cGUub3B0aW9ucyA9IHtcbiAgICBrZXk6IFwibm9uZVwiLFxuICAgIGxvY2s6IFwibm9uZVwiXG59O1xuXG5leHBvcnQgZGVmYXVsdCBQYW5uYWJsZTsiLCJpbXBvcnQgYWNjZXB0S2V5IGZyb20gJy4vYWNjZXB0LWtleSc7XG5pbXBvcnQgdG9DaGFydEF4aXNSYW5nZXMgZnJvbSAnLi90by1jaGFydC1heGlzLXJhbmdlcyc7XG5cbmltcG9ydCB7IFgsIFkgfSBmcm9tICcuLi8uLi9jb21tb24vY29uc3RhbnRzJztcbmltcG9ydCB7IENsYXNzLCBkZWVwRXh0ZW5kLCBlbGVtZW50U3R5bGVzLCBlbGVtZW50T2Zmc2V0LCBkZWZpbmVkIH0gZnJvbSAnLi4vLi4vY29tbW9uJztcblxuY2xhc3MgWm9vbVNlbGVjdGlvbiBleHRlbmRzIENsYXNzIHtcbiAgICBjb25zdHJ1Y3RvcihjaGFydCwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMuY2hhcnQgPSBjaGFydDtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gZGVlcEV4dGVuZCh7fSwgdGhpcy5vcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5jcmVhdGVFbGVtZW50KCk7XG4gICAgfVxuXG4gICAgY3JlYXRlRWxlbWVudCgpIHtcbiAgICAgICAgY29uc3QgbWFycXVlZSA9IHRoaXMuX21hcnF1ZWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBtYXJxdWVlLmNsYXNzTmFtZSA9IFwiay1tYXJxdWVlXCI7XG4gICAgICAgIGNvbnN0IG1hcnF1ZWVDb2xvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIG1hcnF1ZWVDb2xvci5jbGFzc05hbWUgPSBcImstbWFycXVlZS1jb2xvclwiO1xuICAgICAgICBtYXJxdWVlLmFwcGVuZENoaWxkKG1hcnF1ZWVDb2xvcik7XG4gICAgfVxuXG4gICAgcmVtb3ZlRWxlbWVudCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX21hcnF1ZWUucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgdGhpcy5fbWFycXVlZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuX21hcnF1ZWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0U3R5bGVzKHN0eWxlcykge1xuICAgICAgICBlbGVtZW50U3R5bGVzKHRoaXMuX21hcnF1ZWUsIHN0eWxlcyk7XG4gICAgfVxuXG4gICAgc3RhcnQoZSkge1xuICAgICAgICBpZiAoYWNjZXB0S2V5KGUsIHRoaXMub3B0aW9ucy5rZXkpKSB7XG4gICAgICAgICAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgICAgICAgICBjb25zdCBwb2ludCA9IGNoYXJ0Ll9ldmVudENvb3JkaW5hdGVzKGUpO1xuICAgICAgICAgICAgY29uc3Qgem9vbVBhbmUgPSB0aGlzLl96b29tUGFuZSA9IGNoYXJ0Ll9wbG90QXJlYS5wYW5lQnlQb2ludChwb2ludCk7XG4gICAgICAgICAgICBjb25zdCBjbGlwQm94ID0gem9vbVBhbmUgPyB6b29tUGFuZS5jaGFydHNCb3goKS5jbG9uZSgpIDogbnVsbDtcblxuICAgICAgICAgICAgaWYgKHpvb21QYW5lICYmIGNsaXBCb3gpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXQgPSB0aGlzLl9lbGVtZW50T2Zmc2V0KCk7XG5cbiAgICAgICAgICAgICAgICBjbGlwQm94LnRyYW5zbGF0ZShvZmZzZXQubGVmdCwgb2Zmc2V0LnRvcCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fem9vbVBhbmVDbGlwQm94ID0gY2xpcEJveDtcblxuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5fbWFycXVlZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdHlsZXMoe1xuICAgICAgICAgICAgICAgICAgICBsZWZ0OiBlLnBhZ2VYICsgMSxcbiAgICAgICAgICAgICAgICAgICAgdG9wOiBlLnBhZ2VZICsgMSxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogMFxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIF9lbGVtZW50T2Zmc2V0KCkge1xuICAgICAgICBjb25zdCBjaGFydEVsZW1lbnQgPSB0aGlzLmNoYXJ0LmVsZW1lbnQ7XG4gICAgICAgIGNvbnN0IHsgcGFkZGluZ0xlZnQsIHBhZGRpbmdUb3AgfSA9IGVsZW1lbnRTdHlsZXMoY2hhcnRFbGVtZW50LCBbIFwicGFkZGluZ0xlZnRcIiwgXCJwYWRkaW5nVG9wXCIgXSk7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IGVsZW1lbnRPZmZzZXQoY2hhcnRFbGVtZW50KTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGVmdDogcGFkZGluZ0xlZnQgKyBvZmZzZXQubGVmdCxcbiAgICAgICAgICAgIHRvcDogcGFkZGluZ1RvcCArIG9mZnNldC50b3BcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBtb3ZlKGUpIHtcbiAgICAgICAgY29uc3Qgem9vbVBhbmUgPSB0aGlzLl96b29tUGFuZTtcbiAgICAgICAgaWYgKHpvb21QYW5lKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0eWxlcyh0aGlzLl9zZWxlY3Rpb25Qb3NpdGlvbihlKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBlbmQoZSkge1xuICAgICAgICBjb25zdCB6b29tUGFuZSA9IHRoaXMuX3pvb21QYW5lO1xuICAgICAgICBpZiAoem9vbVBhbmUpIHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnRPZmZzZXQgPSB0aGlzLl9lbGVtZW50T2Zmc2V0KCk7XG4gICAgICAgICAgICBjb25zdCBzZWxlY3Rpb25Qb3NpdGlvbiA9IHRoaXMuX3NlbGVjdGlvblBvc2l0aW9uKGUpO1xuICAgICAgICAgICAgc2VsZWN0aW9uUG9zaXRpb24ubGVmdCAtPSBlbGVtZW50T2Zmc2V0LmxlZnQ7XG4gICAgICAgICAgICBzZWxlY3Rpb25Qb3NpdGlvbi50b3AgLT0gZWxlbWVudE9mZnNldC50b3A7XG5cbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0geyB4OiBzZWxlY3Rpb25Qb3NpdGlvbi5sZWZ0LCB5OiBzZWxlY3Rpb25Qb3NpdGlvbi50b3AgfTtcbiAgICAgICAgICAgIGNvbnN0IGVuZCA9IHsgeDogc2VsZWN0aW9uUG9zaXRpb24ubGVmdCArIHNlbGVjdGlvblBvc2l0aW9uLndpZHRoLCB5OiBzZWxlY3Rpb25Qb3NpdGlvbi50b3AgKyBzZWxlY3Rpb25Qb3NpdGlvbi5oZWlnaHQgfTtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUF4aXNSYW5nZXMoc3RhcnQsIGVuZCk7XG5cbiAgICAgICAgICAgIHRoaXMucmVtb3ZlRWxlbWVudCgpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3pvb21QYW5lO1xuXG4gICAgICAgICAgICByZXR1cm4gdG9DaGFydEF4aXNSYW5nZXModGhpcy5heGlzUmFuZ2VzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHpvb20oKSB7XG4gICAgICAgIGNvbnN0IGF4aXNSYW5nZXMgPSB0aGlzLmF4aXNSYW5nZXM7XG4gICAgICAgIGlmIChheGlzUmFuZ2VzICYmIGF4aXNSYW5nZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBwbG90QXJlYSA9IHRoaXMuY2hhcnQuX3Bsb3RBcmVhO1xuICAgICAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgYXhpc1Jhbmdlcy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXhpc1JhbmdlID0gYXhpc1Jhbmdlc1tpZHhdO1xuICAgICAgICAgICAgICAgIHBsb3RBcmVhLnVwZGF0ZUF4aXNPcHRpb25zKGF4aXNSYW5nZS5heGlzLCBheGlzUmFuZ2UucmFuZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGxvdEFyZWEucmVkcmF3KHBsb3RBcmVhLnBhbmVzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlRWxlbWVudCgpO1xuICAgICAgICBkZWxldGUgdGhpcy5fbWFycXVlZTtcbiAgICAgICAgZGVsZXRlIHRoaXMuY2hhcnQ7XG4gICAgfVxuXG4gICAgX3VwZGF0ZUF4aXNSYW5nZXMoc3RhcnQsIGVuZCkge1xuICAgICAgICBjb25zdCBsb2NrID0gKHRoaXMub3B0aW9ucy5sb2NrIHx8IFwiXCIpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGNvbnN0IGF4aXNSYW5nZXMgPSBbXTtcblxuICAgICAgICBjb25zdCBheGVzID0gdGhpcy5fem9vbVBhbmUuYXhlcztcbiAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgYXhlcy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgICAgICBjb25zdCBheGlzID0gYXhlc1tpZHhdO1xuICAgICAgICAgICAgY29uc3QgdmVydGljYWwgPSBheGlzLm9wdGlvbnMudmVydGljYWw7XG4gICAgICAgICAgICBpZiAoIShsb2NrID09PSBYICYmICF2ZXJ0aWNhbCkgJiYgIShsb2NrID09PSBZICYmIHZlcnRpY2FsKSAmJiBkZWZpbmVkKGF4aXMuYXhpc0luZGV4KSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJhbmdlID0gYXhpcy5wb2ludHNSYW5nZShzdGFydCwgZW5kKTtcbiAgICAgICAgICAgICAgICBpZiAocmFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgYXhpc1Jhbmdlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF4aXM6IGF4aXMsXG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZTogcmFuZ2VcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5heGlzUmFuZ2VzID0gYXhpc1JhbmdlcztcbiAgICB9XG5cbiAgICBfc2VsZWN0aW9uUG9zaXRpb24oZSkge1xuICAgICAgICBjb25zdCBjbGlwQm94ID0gdGhpcy5fem9vbVBhbmVDbGlwQm94O1xuICAgICAgICBjb25zdCBzdGFydExvY2F0aW9uID0ge1xuICAgICAgICAgICAgeDogZS54LnN0YXJ0TG9jYXRpb24sXG4gICAgICAgICAgICB5OiBlLnkuc3RhcnRMb2NhdGlvblxuICAgICAgICB9O1xuICAgICAgICBjb25zdCB7IHg6IHsgbG9jYXRpb246IHBhZ2VYIH0sIHk6IHsgbG9jYXRpb246IHBhZ2VZIH0gfSA9IGU7XG4gICAgICAgIGNvbnN0IGxvY2sgPSAodGhpcy5vcHRpb25zLmxvY2sgfHwgXCJcIikudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgbGV0IGxlZnQgPSBNYXRoLm1pbihzdGFydExvY2F0aW9uLngsIHBhZ2VYKTtcbiAgICAgICAgbGV0IHRvcCA9IE1hdGgubWluKHN0YXJ0TG9jYXRpb24ueSwgcGFnZVkpO1xuICAgICAgICBsZXQgd2lkdGggPSBNYXRoLmFicyhzdGFydExvY2F0aW9uLnggLSBwYWdlWCk7XG4gICAgICAgIGxldCBoZWlnaHQgPSBNYXRoLmFicyhzdGFydExvY2F0aW9uLnkgLSBwYWdlWSk7XG5cbiAgICAgICAgaWYgKGxvY2sgPT09IFgpIHtcbiAgICAgICAgICAgIGxlZnQgPSBjbGlwQm94LngxO1xuICAgICAgICAgICAgd2lkdGggPSBjbGlwQm94LndpZHRoKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxvY2sgPT09IFkpIHtcbiAgICAgICAgICAgIHRvcCA9IGNsaXBCb3gueTE7XG4gICAgICAgICAgICBoZWlnaHQgPSBjbGlwQm94LmhlaWdodCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhZ2VYID4gY2xpcEJveC54Mikge1xuICAgICAgICAgICAgd2lkdGggPSBjbGlwQm94LngyIC0gc3RhcnRMb2NhdGlvbi54O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhZ2VYIDwgY2xpcEJveC54MSkge1xuICAgICAgICAgICAgd2lkdGggPSBzdGFydExvY2F0aW9uLnggLSBjbGlwQm94LngxO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhZ2VZID4gY2xpcEJveC55Mikge1xuICAgICAgICAgICAgaGVpZ2h0ID0gY2xpcEJveC55MiAtIHN0YXJ0TG9jYXRpb24ueTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYWdlWSA8IGNsaXBCb3gueTEpIHtcbiAgICAgICAgICAgIGhlaWdodCA9IHN0YXJ0TG9jYXRpb24ueSAtIGNsaXBCb3gueTE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGVmdDogTWF0aC5tYXgobGVmdCwgY2xpcEJveC54MSksXG4gICAgICAgICAgICB0b3A6IE1hdGgubWF4KHRvcCwgY2xpcEJveC55MSksXG4gICAgICAgICAgICB3aWR0aDogd2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IGhlaWdodFxuICAgICAgICB9O1xuICAgIH1cbn1cblxuWm9vbVNlbGVjdGlvbi5wcm90b3R5cGUub3B0aW9ucyA9IHtcbiAgICBrZXk6IFwic2hpZnRcIixcbiAgICBsb2NrOiBcIm5vbmVcIlxufTtcblxuZXhwb3J0IGRlZmF1bHQgWm9vbVNlbGVjdGlvbjsiLCJcbmltcG9ydCB0b0NoYXJ0QXhpc1JhbmdlcyBmcm9tICcuL3RvLWNoYXJ0LWF4aXMtcmFuZ2VzJztcblxuaW1wb3J0IHsgWCwgWSB9IGZyb20gJy4uLy4uL2NvbW1vbi9jb25zdGFudHMnO1xuaW1wb3J0IHsgQ2xhc3MsIGRlZXBFeHRlbmQgfSBmcm9tICcuLi8uLi9jb21tb24nO1xuXG5jbGFzcyBNb3VzZXdoZWVsWm9vbSBleHRlbmRzIENsYXNzIHtcbiAgICBjb25zdHJ1Y3RvcihjaGFydCwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMuY2hhcnQgPSBjaGFydDtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gZGVlcEV4dGVuZCh7fSwgdGhpcy5vcHRpb25zLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICB1cGRhdGVSYW5nZXMoZGVsdGEpIHtcbiAgICAgICAgY29uc3QgbG9jayA9ICh0aGlzLm9wdGlvbnMubG9jayB8fCBcIlwiKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBjb25zdCBheGlzUmFuZ2VzID0gW107XG4gICAgICAgIGNvbnN0IGF4ZXMgPSB0aGlzLmNoYXJ0Ll9wbG90QXJlYS5heGVzO1xuXG4gICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGF4ZXMubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgY29uc3QgYXhpcyA9IGF4ZXNbaWR4XTtcbiAgICAgICAgICAgIGNvbnN0IHZlcnRpY2FsID0gYXhpcy5vcHRpb25zLnZlcnRpY2FsO1xuXG4gICAgICAgICAgICBpZiAoIShsb2NrID09PSBYICYmICF2ZXJ0aWNhbCkgJiYgIShsb2NrID09PSBZICYmIHZlcnRpY2FsKSAmJiBheGlzLnpvb21SYW5nZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJhbmdlID0gYXhpcy56b29tUmFuZ2UoLWRlbHRhKTtcblxuICAgICAgICAgICAgICAgIGlmIChyYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICBheGlzUmFuZ2VzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgYXhpczogYXhpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlOiByYW5nZVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmF4aXNSYW5nZXMgPSBheGlzUmFuZ2VzO1xuICAgICAgICByZXR1cm4gdG9DaGFydEF4aXNSYW5nZXMoYXhpc1Jhbmdlcyk7XG4gICAgfVxuXG4gICAgem9vbSgpIHtcbiAgICAgICAgY29uc3QgYXhpc1JhbmdlcyA9IHRoaXMuYXhpc1JhbmdlcztcbiAgICAgICAgY29uc3QgcGxvdEFyZWEgPSB0aGlzLmNoYXJ0Ll9wbG90QXJlYTtcblxuICAgICAgICBpZiAoYXhpc1JhbmdlcyAmJiBheGlzUmFuZ2VzLmxlbmd0aCAmJiBwbG90QXJlYS51cGRhdGVBeGlzT3B0aW9ucykge1xuICAgICAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgYXhpc1Jhbmdlcy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYXhpc1JhbmdlID0gYXhpc1Jhbmdlc1tpZHhdO1xuICAgICAgICAgICAgICAgIHBsb3RBcmVhLnVwZGF0ZUF4aXNPcHRpb25zKGF4aXNSYW5nZS5heGlzLCBheGlzUmFuZ2UucmFuZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGxvdEFyZWEucmVkcmF3KHBsb3RBcmVhLnBhbmVzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmNoYXJ0O1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTW91c2V3aGVlbFpvb207IiwiaW1wb3J0IHsgZHJhd2luZyBhcyBkcmF3IH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWRyYXdpbmcnO1xuXG5pbXBvcnQgeyBDaGFydEVsZW1lbnQsIEJveCwgcmVjdFRvQm94IH0gZnJvbSAnLi4vLi4vY29yZSc7XG5cbmNsYXNzIExlZ2VuZExheW91dCBleHRlbmRzIENoYXJ0RWxlbWVudCB7XG5cbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zLCBjaGFydFNlcnZpY2UpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5jaGFydFNlcnZpY2UgPSBjaGFydFNlcnZpY2U7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBjb25zdCB7IGNoaWxkcmVuLCBvcHRpb25zIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB2ZXJ0aWNhbCA9IG9wdGlvbnMudmVydGljYWw7XG5cbiAgICAgICAgdGhpcy52aXN1YWwgPSBuZXcgZHJhdy5MYXlvdXQobnVsbCwge1xuICAgICAgICAgICAgc3BhY2luZzogdmVydGljYWwgPyAwIDogb3B0aW9ucy5zcGFjaW5nLFxuICAgICAgICAgICAgbGluZVNwYWNpbmc6IHZlcnRpY2FsID8gb3B0aW9ucy5zcGFjaW5nIDogMCxcbiAgICAgICAgICAgIG9yaWVudGF0aW9uOiB2ZXJ0aWNhbCA/IFwidmVydGljYWxcIiA6IFwiaG9yaXpvbnRhbFwiLFxuICAgICAgICAgICAgcmV2ZXJzZTogb3B0aW9ucy5ydGwsXG4gICAgICAgICAgICBhbGlnbkl0ZW1zOiB2ZXJ0aWNhbCA/IFwic3RhcnRcIiA6IFwiY2VudGVyXCJcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgY2hpbGRyZW4ubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgbGV0IGxlZ2VuZEl0ZW0gPSBjaGlsZHJlbltpZHhdO1xuICAgICAgICAgICAgbGVnZW5kSXRlbS5yZWZsb3cobmV3IEJveCgpKTtcbiAgICAgICAgICAgIGxlZ2VuZEl0ZW0ucmVuZGVyVmlzdWFsKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZWZsb3coYm94KSB7XG4gICAgICAgIHRoaXMudmlzdWFsLnJlY3QoYm94LnRvUmVjdCgpKTtcbiAgICAgICAgdGhpcy52aXN1YWwucmVmbG93KCk7XG4gICAgICAgIGNvbnN0IGJib3ggPSB0aGlzLnZpc3VhbC5jbGlwcGVkQkJveCgpO1xuXG4gICAgICAgIGlmIChiYm94KSB7XG4gICAgICAgICAgICB0aGlzLmJveCA9IHJlY3RUb0JveChiYm94KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYm94ID0gbmV3IEJveCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVuZGVyVmlzdWFsKCkge1xuICAgICAgICB0aGlzLmFkZFZpc3VhbCgpO1xuICAgIH1cblxuICAgIGNyZWF0ZVZpc3VhbCgpIHt9XG59XG5cbmV4cG9ydCBkZWZhdWx0IExlZ2VuZExheW91dDsiLCJpbXBvcnQgeyBkcmF3aW5nIGFzIGRyYXcgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tZHJhd2luZyc7XG5cbmltcG9ydCB7IEJveEVsZW1lbnQsIEZsb2F0RWxlbWVudCwgU2hhcGVFbGVtZW50LCBUZXh0Qm94IH0gZnJvbSAnLi4vLi4vY29yZSc7XG5pbXBvcnQgeyBMRUdFTkRfSVRFTV9DTElDSywgTEVHRU5EX0lURU1fSE9WRVIsIExFR0VORF9JVEVNX0xFQVZFIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCB7IENFTlRFUiwgV0hJVEUgfSBmcm9tICcuLi8uLi9jb21tb24vY29uc3RhbnRzJztcbmltcG9ydCB7IGRlZXBFeHRlbmQsIGV2ZW50RWxlbWVudCB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5cbmNsYXNzIExlZ2VuZEl0ZW0gZXh0ZW5kcyBCb3hFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuXG4gICAgICAgIHRoaXMuY3JlYXRlQ29udGFpbmVyKCk7XG4gICAgICAgIGlmICghb3B0aW9ucy5ydGwpIHtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlTWFya2VyKCk7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUxhYmVsKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUxhYmVsKCk7XG4gICAgICAgICAgICB0aGlzLmNyZWF0ZU1hcmtlcigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY3JlYXRlQ29udGFpbmVyKCkge1xuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IG5ldyBGbG9hdEVsZW1lbnQoeyB2ZXJ0aWNhbDogZmFsc2UsIHdyYXA6IGZhbHNlLCBhbGlnbjogQ0VOVEVSLCBzcGFjaW5nOiB0aGlzLm9wdGlvbnMuc3BhY2luZyB9KTtcbiAgICAgICAgdGhpcy5hcHBlbmQodGhpcy5jb250YWluZXIpO1xuICAgIH1cblxuICAgIGNyZWF0ZU1hcmtlcigpIHtcbiAgICAgICAgdGhpcy5jb250YWluZXIuYXBwZW5kKG5ldyBTaGFwZUVsZW1lbnQodGhpcy5tYXJrZXJPcHRpb25zKCkpKTtcbiAgICB9XG5cbiAgICBtYXJrZXJPcHRpb25zKCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBtYXJrZXJDb2xvciA9IG9wdGlvbnMubWFya2VyQ29sb3I7XG4gICAgICAgIHJldHVybiBkZWVwRXh0ZW5kKHt9LCBvcHRpb25zLm1hcmtlcnMsIHtcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IG1hcmtlckNvbG9yLFxuICAgICAgICAgICAgYm9yZGVyOiB7XG4gICAgICAgICAgICAgICAgY29sb3I6IG1hcmtlckNvbG9yXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNyZWF0ZUxhYmVsKCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBsYWJlbE9wdGlvbnMgPSBkZWVwRXh0ZW5kKHt9LCBvcHRpb25zLmxhYmVscyk7XG5cbiAgICAgICAgdGhpcy5jb250YWluZXIuYXBwZW5kKG5ldyBUZXh0Qm94KG9wdGlvbnMudGV4dCwgbGFiZWxPcHRpb25zKSk7XG4gICAgfVxuXG4gICAgcmVuZGVyQ29tcGxldGUoKSB7XG4gICAgICAgIHN1cGVyLnJlbmRlckNvbXBsZXRlKCk7XG5cbiAgICAgICAgY29uc3QgY3Vyc29yID0gdGhpcy5vcHRpb25zLmN1cnNvciB8fCB7fTtcbiAgICAgICAgY29uc3QgZXZlbnRTaW5rID0gdGhpcy5faXRlbU92ZXJsYXkgPSBkcmF3LlBhdGguZnJvbVJlY3QodGhpcy5jb250YWluZXIuYm94LnRvUmVjdCgpLCB7XG4gICAgICAgICAgICBmaWxsOiB7XG4gICAgICAgICAgICAgICAgY29sb3I6IFdISVRFLFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdHJva2U6IG51bGwsXG4gICAgICAgICAgICBjdXJzb3I6IGN1cnNvci5zdHlsZSB8fCBjdXJzb3JcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5hcHBlbmRWaXN1YWwoZXZlbnRTaW5rKTtcbiAgICB9XG5cbiAgICBjbGljayh3aWRnZXQsIGUpIHtcbiAgICAgICAgY29uc3QgYXJncyA9IHRoaXMuZXZlbnRBcmdzKGUpO1xuXG4gICAgICAgIGlmICghd2lkZ2V0LnRyaWdnZXIoTEVHRU5EX0lURU1fQ0xJQ0ssIGFyZ3MpICYmIGUgJiYgZS50eXBlID09PSAnY29udGV4dG1lbnUnKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvdmVyKHdpZGdldCwgZSkge1xuICAgICAgICBjb25zdCBhcmdzID0gdGhpcy5ldmVudEFyZ3MoZSk7XG5cbiAgICAgICAgaWYgKCF3aWRnZXQudHJpZ2dlcihMRUdFTkRfSVRFTV9IT1ZFUiwgYXJncykpIHtcbiAgICAgICAgICAgIHdpZGdldC5fbGVnZW5kSXRlbUhvdmVyKGFyZ3Muc2VyaWVzSW5kZXgsIGFyZ3MucG9pbnRJbmRleCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEb24ndCB0cmlnZ2VyIHBvaW50IGhvdmVyIGZvciBsZWdlbmQgaXRlbXNcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgb3V0KHdpZGdldCwgZSkge1xuICAgICAgICB3aWRnZXQuX3Vuc2V0QWN0aXZlUG9pbnQoKTtcblxuICAgICAgICB3aWRnZXQudHJpZ2dlcihMRUdFTkRfSVRFTV9MRUFWRSwgdGhpcy5ldmVudEFyZ3MoZSkpO1xuICAgIH1cblxuICAgIGV2ZW50QXJncyhlKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGVsZW1lbnQ6IGV2ZW50RWxlbWVudChlKSxcbiAgICAgICAgICAgIHRleHQ6IG9wdGlvbnMudGV4dCxcbiAgICAgICAgICAgIHNlcmllczogb3B0aW9ucy5zZXJpZXMsXG4gICAgICAgICAgICBzZXJpZXNJbmRleDogb3B0aW9ucy5zZXJpZXMuaW5kZXgsXG4gICAgICAgICAgICBwb2ludEluZGV4OiBvcHRpb25zLnBvaW50SW5kZXhcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICByZW5kZXJWaXN1YWwoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGN1c3RvbVZpc3VhbCA9IG9wdGlvbnMudmlzdWFsO1xuXG4gICAgICAgIGlmIChjdXN0b21WaXN1YWwpIHtcbiAgICAgICAgICAgIHRoaXMudmlzdWFsID0gY3VzdG9tVmlzdWFsKHtcbiAgICAgICAgICAgICAgICBhY3RpdmU6IG9wdGlvbnMuYWN0aXZlLFxuICAgICAgICAgICAgICAgIHNlcmllczogb3B0aW9ucy5zZXJpZXMsXG4gICAgICAgICAgICAgICAgc2VuZGVyOiB0aGlzLmdldFNlbmRlcigpLFxuICAgICAgICAgICAgICAgIHBvaW50SW5kZXg6IG9wdGlvbnMucG9pbnRJbmRleCxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgIG1hcmtlcnM6IHRoaXMubWFya2VyT3B0aW9ucygpLFxuICAgICAgICAgICAgICAgICAgICBsYWJlbHM6IG9wdGlvbnMubGFiZWxzXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBjcmVhdGVWaXN1YWw6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVWaXN1YWwoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJDaGlsZHJlbigpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlckNvbXBsZXRlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVmYXVsdFZpc3VhbCA9IHRoaXMudmlzdWFsO1xuXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnZpc3VhbDtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGVmYXVsdFZpc3VhbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuYWRkVmlzdWFsKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdXBlci5yZW5kZXJWaXN1YWwoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTGVnZW5kSXRlbTtcbiIsIlxuaW1wb3J0IHsgQ2hhcnRFbGVtZW50LCBCb3hFbGVtZW50LCBCb3gsIFRleHRCb3gsIEZsb2F0RWxlbWVudCB9IGZyb20gJy4uLy4uL2NvcmUnO1xuaW1wb3J0IExlZ2VuZExheW91dCBmcm9tICcuL2xlZ2VuZC1sYXlvdXQnO1xuaW1wb3J0IExlZ2VuZEl0ZW0gZnJvbSAnLi9sZWdlbmQtaXRlbSc7XG5cbmltcG9ydCB7IFRPUCwgUklHSFQsIEJPVFRPTSwgTEVGVCwgQ0VOVEVSLCBYLCBZLCBCTEFDSyB9IGZyb20gJy4uLy4uL2NvbW1vbi9jb25zdGFudHMnO1xuaW1wb3J0IHsgZGVlcEV4dGVuZCwgZGVmaW5lZCwgZ2V0VGVtcGxhdGUsIGdldFNwYWNpbmcsIGluQXJyYXksIHNldERlZmF1bHRPcHRpb25zIH0gZnJvbSAnLi4vLi4vY29tbW9uJztcblxuY29uc3QgSE9SSVpPTlRBTCA9IFwiaG9yaXpvbnRhbFwiO1xuY29uc3QgUE9JTlRFUiA9IFwicG9pbnRlclwiO1xuY29uc3QgQ1VTVE9NID0gXCJjdXN0b21cIjtcblxuY2xhc3MgTGVnZW5kIGV4dGVuZHMgQ2hhcnRFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zLCBjaGFydFNlcnZpY2UgPSB7fSkge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcblxuICAgICAgICB0aGlzLmNoYXJ0U2VydmljZSA9IGNoYXJ0U2VydmljZTtcblxuICAgICAgICBpZiAoIWluQXJyYXkodGhpcy5vcHRpb25zLnBvc2l0aW9uLCBbIFRPUCwgUklHSFQsIEJPVFRPTSwgTEVGVCwgQ1VTVE9NIF0pKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMucG9zaXRpb24gPSBSSUdIVDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY3JlYXRlQ29udGFpbmVycygpO1xuXG4gICAgICAgIHRoaXMuY3JlYXRlTGVnZW5kVGl0bGUob3B0aW9ucy50aXRsZSk7XG5cbiAgICAgICAgdGhpcy5jcmVhdGVJdGVtcygpO1xuICAgIH1cblxuICAgIGNyZWF0ZUNvbnRhaW5lcnMoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHsgcG9zaXRpb24sIGFsaWduOiB1c2VyQWxpZ24gfSA9IG9wdGlvbnM7XG4gICAgICAgIGxldCBhbGlnbiA9IHBvc2l0aW9uO1xuICAgICAgICBsZXQgdkFsaWduID0gQ0VOVEVSO1xuXG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gQ1VTVE9NKSB7XG4gICAgICAgICAgICBhbGlnbiA9IExFRlQ7XG4gICAgICAgIH0gZWxzZSBpZiAoaW5BcnJheShwb3NpdGlvbiwgWyBUT1AsIEJPVFRPTSBdKSkge1xuICAgICAgICAgICAgaWYgKHVzZXJBbGlnbiA9PT0gXCJzdGFydFwiKSB7XG4gICAgICAgICAgICAgICAgYWxpZ24gPSBMRUZUO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh1c2VyQWxpZ24gPT09IFwiZW5kXCIpIHtcbiAgICAgICAgICAgICAgICBhbGlnbiA9IFJJR0hUO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhbGlnbiA9IENFTlRFUjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZBbGlnbiA9IHBvc2l0aW9uO1xuICAgICAgICB9IGVsc2UgaWYgKHVzZXJBbGlnbikge1xuICAgICAgICAgICAgaWYgKHVzZXJBbGlnbiA9PT0gXCJzdGFydFwiKSB7XG4gICAgICAgICAgICAgICAgdkFsaWduID0gVE9QO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh1c2VyQWxpZ24gPT09IFwiZW5kXCIpIHtcbiAgICAgICAgICAgICAgICB2QWxpZ24gPSBCT1RUT007XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNvbnRhaW5lciA9IG5ldyBCb3hFbGVtZW50KHtcbiAgICAgICAgICAgIG1hcmdpbjogb3B0aW9ucy5tYXJnaW4sXG4gICAgICAgICAgICBwYWRkaW5nOiBvcHRpb25zLnBhZGRpbmcsXG4gICAgICAgICAgICBiYWNrZ3JvdW5kOiBvcHRpb25zLmJhY2tncm91bmQsXG4gICAgICAgICAgICBib3JkZXI6IG9wdGlvbnMuYm9yZGVyLFxuICAgICAgICAgICAgdkFsaWduOiB2QWxpZ24sXG4gICAgICAgICAgICBhbGlnbjogYWxpZ24sXG4gICAgICAgICAgICB6SW5kZXg6IG9wdGlvbnMuekluZGV4LFxuICAgICAgICAgICAgc2hyaW5rVG9GaXQ6IHRydWVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHRoaXMuaGFzVGl0bGUoKSkge1xuICAgICAgICAgICAgdGhpcy5pdGVtc0NvbnRhaW5lciA9IG5ldyBCb3hFbGVtZW50KHtcbiAgICAgICAgICAgICAgICB2QWxpZ246IHZBbGlnbixcbiAgICAgICAgICAgICAgICBhbGlnbjogYWxpZ24sXG4gICAgICAgICAgICAgICAgekluZGV4OiBvcHRpb25zLnpJbmRleCxcbiAgICAgICAgICAgICAgICBzaHJpbmtUb0ZpdDogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLml0ZW1zQ29udGFpbmVyID0gdGhpcy5jb250YWluZXI7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmFwcGVuZCh0aGlzLmNvbnRhaW5lcik7XG4gICAgfVxuXG4gICAgY3JlYXRlSXRlbXMoKSB7XG4gICAgICAgIGNvbnN0IGNoYXJ0U2VydmljZSA9IHRoaXMuZ2V0U2VydmljZSgpO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCB2ZXJ0aWNhbCA9IHRoaXMuaXNWZXJ0aWNhbCgpO1xuICAgICAgICBjb25zdCBpbm5lckVsZW1lbnQgPSBuZXcgTGVnZW5kTGF5b3V0KHtcbiAgICAgICAgICAgIHZlcnRpY2FsOiB2ZXJ0aWNhbCxcbiAgICAgICAgICAgIHNwYWNpbmc6IG9wdGlvbnMuc3BhY2luZyxcbiAgICAgICAgICAgIHJ0bDogY2hhcnRTZXJ2aWNlLnJ0bFxuICAgICAgICB9LCBjaGFydFNlcnZpY2UpO1xuICAgICAgICBsZXQgaXRlbXMgPSBvcHRpb25zLml0ZW1zO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnJldmVyc2UpIHtcbiAgICAgICAgICAgIGl0ZW1zID0gaXRlbXMuc2xpY2UoMCkucmV2ZXJzZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY291bnQgPSBpdGVtcy5sZW5ndGg7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgaXRlbSA9IGl0ZW1zW2ldO1xuXG4gICAgICAgICAgICBpbm5lckVsZW1lbnQuYXBwZW5kKG5ldyBMZWdlbmRJdGVtKGRlZXBFeHRlbmQoe30sIHtcbiAgICAgICAgICAgICAgICBtYXJrZXJzOiBvcHRpb25zLm1hcmtlcnMsXG4gICAgICAgICAgICAgICAgbGFiZWxzOiBvcHRpb25zLmxhYmVscyxcbiAgICAgICAgICAgICAgICBydGw6IGNoYXJ0U2VydmljZS5ydGxcbiAgICAgICAgICAgIH0sIG9wdGlvbnMuaXRlbSwgaXRlbSkpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlubmVyRWxlbWVudC5yZW5kZXIoKTtcbiAgICAgICAgdGhpcy5pdGVtc0NvbnRhaW5lci5hcHBlbmQoaW5uZXJFbGVtZW50KTtcbiAgICB9XG5cbiAgICBpc1ZlcnRpY2FsKCkge1xuICAgICAgICBjb25zdCB7IG9yaWVudGF0aW9uLCBwb3NpdGlvbiB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCB2ZXJ0aWNhbCA9IChwb3NpdGlvbiA9PT0gQ1VTVE9NICYmIG9yaWVudGF0aW9uICE9PSBIT1JJWk9OVEFMKSB8fFxuICAgICAgICAgICAgICAgKGRlZmluZWQob3JpZW50YXRpb24pID8gb3JpZW50YXRpb24gIT09IEhPUklaT05UQUwgOiBpbkFycmF5KHBvc2l0aW9uLCBbIExFRlQsIFJJR0hUIF0pKTtcblxuICAgICAgICByZXR1cm4gdmVydGljYWw7XG4gICAgfVxuXG4gICAgaGFzSXRlbXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRhaW5lci5jaGlsZHJlblswXS5jaGlsZHJlbi5sZW5ndGggPiAwO1xuICAgIH1cblxuICAgIHJlZmxvdyh0YXJnZXRCb3gpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgbGVnZW5kQm94ID0gdGFyZ2V0Qm94LmNsb25lKCk7XG5cbiAgICAgICAgaWYgKCF0aGlzLmhhc0l0ZW1zKCkpIHtcbiAgICAgICAgICAgIHRoaXMuYm94ID0gbGVnZW5kQm94O1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMucG9zaXRpb24gPT09IENVU1RPTSkge1xuICAgICAgICAgICAgdGhpcy5jb250YWluZXJDdXN0b21SZWZsb3cobGVnZW5kQm94KTtcbiAgICAgICAgICAgIHRoaXMuYm94ID0gbGVnZW5kQm94O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jb250YWluZXJSZWZsb3cobGVnZW5kQm94KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmhhc1RpdGxlKCkpIHtcbiAgICAgICAgICAgIHRoaXMudGl0bGUucmVmbG93KG5ldyBCb3godGhpcy5jb250YWluZXIuYm94LngxLCB0aGlzLnRpdGxlLmJveC55MSwgdGhpcy5jb250YWluZXIuYm94LngyLCB0aGlzLnRpdGxlLmJveC55MikpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29udGFpbmVyUmVmbG93KHRhcmdldEJveCkge1xuICAgICAgICBjb25zdCB7IG9wdGlvbnMsIGNvbnRhaW5lciB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyBwb3NpdGlvbiwgd2lkdGgsIGhlaWdodCB9ID0gb3B0aW9ucztcbiAgICAgICAgY29uc3QgcG9zID0gcG9zaXRpb24gPT09IFRPUCB8fCBwb3NpdGlvbiA9PT0gQk9UVE9NID8gWCA6IFk7XG4gICAgICAgIGNvbnN0IHZlcnRpY2FsID0gdGhpcy5pc1ZlcnRpY2FsKCk7XG4gICAgICAgIGNvbnN0IGFsaWduVGFyZ2V0ID0gdGFyZ2V0Qm94LmNsb25lKCk7XG4gICAgICAgIGxldCBjb250YWluZXJCb3ggPSB0YXJnZXRCb3guY2xvbmUoKTtcblxuICAgICAgICBpZiAocG9zaXRpb24gPT09IExFRlQgfHwgcG9zaXRpb24gPT09IFJJR0hUKSB7XG4gICAgICAgICAgICBjb250YWluZXJCb3gueTEgPSBhbGlnblRhcmdldC55MSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmVydGljYWwgJiYgaGVpZ2h0KSB7XG4gICAgICAgICAgICBjb250YWluZXJCb3gueTIgPSBjb250YWluZXJCb3gueTEgKyBoZWlnaHQ7XG4gICAgICAgICAgICBjb250YWluZXJCb3guYWxpZ24oYWxpZ25UYXJnZXQsIFksIGNvbnRhaW5lci5vcHRpb25zLnZBbGlnbik7XG4gICAgICAgIH0gZWxzZSBpZiAoIXZlcnRpY2FsICYmIHdpZHRoKSB7XG4gICAgICAgICAgICBjb250YWluZXJCb3gueDIgPSBjb250YWluZXJCb3gueDEgKyB3aWR0aDtcbiAgICAgICAgICAgIGNvbnRhaW5lckJveC5hbGlnbihhbGlnblRhcmdldCwgWCwgY29udGFpbmVyLm9wdGlvbnMuYWxpZ24pO1xuICAgICAgICB9XG5cbiAgICAgICAgY29udGFpbmVyLnJlZmxvdyhjb250YWluZXJCb3gpO1xuICAgICAgICBjb250YWluZXJCb3ggPSBjb250YWluZXIuYm94O1xuXG4gICAgICAgIGNvbnN0IGJveCA9IGNvbnRhaW5lckJveC5jbG9uZSgpO1xuXG4gICAgICAgIGlmIChvcHRpb25zLm9mZnNldFggfHwgb3B0aW9ucy5vZmZzZXRZKSB7XG4gICAgICAgICAgICBjb250YWluZXJCb3gudHJhbnNsYXRlKG9wdGlvbnMub2Zmc2V0WCwgb3B0aW9ucy5vZmZzZXRZKTtcbiAgICAgICAgICAgIGNvbnRhaW5lci5yZWZsb3coY29udGFpbmVyQm94KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJveFtwb3MgKyAxXSA9IHRhcmdldEJveFtwb3MgKyAxXTtcbiAgICAgICAgYm94W3BvcyArIDJdID0gdGFyZ2V0Qm94W3BvcyArIDJdO1xuXG4gICAgICAgIHRoaXMuYm94ID0gYm94O1xuICAgIH1cblxuICAgIGNvbnRhaW5lckN1c3RvbVJlZmxvdyh0YXJnZXRCb3gpIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zLCBjb250YWluZXIgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHsgb2Zmc2V0WCwgb2Zmc2V0WSwgd2lkdGgsIGhlaWdodCB9ID0gb3B0aW9ucztcbiAgICAgICAgY29uc3QgdmVydGljYWwgPSB0aGlzLmlzVmVydGljYWwoKTtcbiAgICAgICAgbGV0IGNvbnRhaW5lckJveCA9IHRhcmdldEJveC5jbG9uZSgpO1xuXG4gICAgICAgIGlmICh2ZXJ0aWNhbCAmJiBoZWlnaHQpIHtcbiAgICAgICAgICAgIGNvbnRhaW5lckJveC55MiA9IGNvbnRhaW5lckJveC55MSArIGhlaWdodDtcbiAgICAgICAgfSBlbHNlIGlmICghdmVydGljYWwgJiYgd2lkdGgpIHtcbiAgICAgICAgICAgIGNvbnRhaW5lckJveC54MiA9IGNvbnRhaW5lckJveC54MSArIHdpZHRoO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRhaW5lci5yZWZsb3coY29udGFpbmVyQm94KTtcbiAgICAgICAgY29udGFpbmVyQm94ID0gY29udGFpbmVyLmJveDtcblxuICAgICAgICBjb250YWluZXIucmVmbG93KG5ldyBCb3goXG4gICAgICAgICAgICBvZmZzZXRYLCBvZmZzZXRZLFxuICAgICAgICAgICAgb2Zmc2V0WCArIGNvbnRhaW5lckJveC53aWR0aCgpLCBvZmZzZXRZICsgY29udGFpbmVyQm94LmhlaWdodCgpXG4gICAgICAgICkpO1xuICAgIH1cblxuICAgIHJlbmRlclZpc3VhbCgpIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzSXRlbXMoKSkge1xuICAgICAgICAgICAgc3VwZXIucmVuZGVyVmlzdWFsKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjcmVhdGVMZWdlbmRUaXRsZSh0aXRsZSkge1xuICAgICAgICBsZXQgdGl0bGVPcHRpb25zID0gZGVlcEV4dGVuZCh7fSwge1xuICAgICAgICAgICAgY29sb3I6IEJMQUNLLFxuICAgICAgICAgICAgcG9zaXRpb246IFRPUCxcbiAgICAgICAgICAgIGFsaWduOiBDRU5URVJcbiAgICAgICAgfSwgdGl0bGUpO1xuICAgICAgICBsZXQgdGV4dCA9IHRpdGxlT3B0aW9ucy50ZXh0O1xuXG4gICAgICAgIGlmICghdGl0bGUgfHwgdGl0bGUudmlzaWJsZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkZWZpbmVkKHRpdGxlT3B0aW9ucykgJiYgdGl0bGVPcHRpb25zLnZpc2libGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGxhYmVsVGVtcGxhdGUgPSBnZXRUZW1wbGF0ZSh0aXRsZU9wdGlvbnMpO1xuICAgICAgICAgICAgaWYgKGxhYmVsVGVtcGxhdGUpIHtcbiAgICAgICAgICAgICAgICB0ZXh0ID0gbGFiZWxUZW1wbGF0ZSh7IHRleHQ6IHRleHQgfSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRpdGxlT3B0aW9ucy5mb3JtYXQpIHtcbiAgICAgICAgICAgICAgICB0ZXh0ID0gdGhpcy5jaGFydFNlcnZpY2UuZm9ybWF0LmF1dG8odGl0bGVPcHRpb25zLmZvcm1hdCwgdGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRpdGxlID0gbmV3IFRleHRCb3godGV4dCwgdGl0bGVPcHRpb25zKTtcblxuICAgICAgICB0aGlzLmNyZWF0ZVRpdGxlTGF5b3V0KCk7XG5cbiAgICAgICAgdGhpcy5hcHBlbmRUaXRsZUxheW91dENvbnRlbnQoKTtcbiAgICB9XG5cbiAgICBjcmVhdGVUaXRsZUxheW91dCgpIHtcbiAgICAgICAgdGhpcy5sYXlvdXQgPSBuZXcgRmxvYXRFbGVtZW50KHtcbiAgICAgICAgICAgIHZlcnRpY2FsOiB0cnVlLFxuICAgICAgICAgICAgd3JhcDogZmFsc2VcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5jb250YWluZXIuYXBwZW5kKHRoaXMubGF5b3V0KTtcbiAgICB9XG5cbiAgICBoYXNUaXRsZSgpIHtcbiAgICAgICAgcmV0dXJuIEJvb2xlYW4odGhpcy5vcHRpb25zLnRpdGxlICYmIHRoaXMub3B0aW9ucy50aXRsZS52aXNpYmxlICE9PSBmYWxzZSk7XG4gICAgfVxuXG4gICAgYXBwZW5kVGl0bGVMYXlvdXRDb250ZW50KCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnRpdGxlLnBvc2l0aW9uID09PSBCT1RUT00pIHtcbiAgICAgICAgICAgIHRoaXMubGF5b3V0LmFwcGVuZCh0aGlzLml0ZW1zQ29udGFpbmVyKTtcbiAgICAgICAgICAgIHRoaXMubGF5b3V0LmFwcGVuZCh0aGlzLnRpdGxlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubGF5b3V0LmFwcGVuZCh0aGlzLnRpdGxlKTtcbiAgICAgICAgICAgIHRoaXMubGF5b3V0LmFwcGVuZCh0aGlzLml0ZW1zQ29udGFpbmVyKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuc2V0RGVmYXVsdE9wdGlvbnMoTGVnZW5kLCB7XG4gICAgcG9zaXRpb246IFJJR0hULFxuICAgIGl0ZW1zOiBbXSxcbiAgICBvZmZzZXRYOiAwLFxuICAgIG9mZnNldFk6IDAsXG4gICAgbWFyZ2luOiBnZXRTcGFjaW5nKDUpLFxuICAgIHBhZGRpbmc6IGdldFNwYWNpbmcoNSksXG4gICAgYm9yZGVyOiB7XG4gICAgICAgIGNvbG9yOiBCTEFDSyxcbiAgICAgICAgd2lkdGg6IDBcbiAgICB9LFxuICAgIGl0ZW06IHtcbiAgICAgICAgY3Vyc29yOiBQT0lOVEVSLFxuICAgICAgICBzcGFjaW5nOiA2XG4gICAgfSxcbiAgICBzcGFjaW5nOiA2LFxuICAgIGJhY2tncm91bmQ6IFwiXCIsXG4gICAgekluZGV4OiAxLFxuICAgIG1hcmtlcnM6IHtcbiAgICAgICAgYm9yZGVyOiB7XG4gICAgICAgICAgICB3aWR0aDogMFxuICAgICAgICB9LFxuICAgICAgICB3aWR0aDogMTUsXG4gICAgICAgIGhlaWdodDogMyxcbiAgICAgICAgdHlwZTogXCJyZWN0XCIsXG4gICAgICAgIGFsaWduOiBMRUZULFxuICAgICAgICB2QWxpZ246IENFTlRFUlxuICAgIH1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBMZWdlbmQ7XG4iLCJpbXBvcnQgZmlsdGVyU2VyaWVzQnlUeXBlIGZyb20gJy4uL3V0aWxzL2ZpbHRlci1zZXJpZXMtYnktdHlwZSc7XG5pbXBvcnQgeyBDbGFzcyB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5cbmNsYXNzIFBsb3RBcmVhRmFjdG9yeSBleHRlbmRzIENsYXNzIHtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMuX3JlZ2lzdHJ5ID0gW107XG4gICAgfVxuXG4gICAgcmVnaXN0ZXIodHlwZSwgc2VyaWVzVHlwZXMpIHtcbiAgICAgICAgdGhpcy5fcmVnaXN0cnkucHVzaCh7XG4gICAgICAgICAgICB0eXBlOiB0eXBlLFxuICAgICAgICAgICAgc2VyaWVzVHlwZXM6IHNlcmllc1R5cGVzXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNyZWF0ZShzcmNTZXJpZXMsIG9wdGlvbnMsIGNoYXJ0U2VydmljZSkge1xuICAgICAgICBjb25zdCByZWdpc3RyeSA9IHRoaXMuX3JlZ2lzdHJ5O1xuICAgICAgICBsZXQgbWF0Y2ggPSByZWdpc3RyeVswXTtcbiAgICAgICAgbGV0IHNlcmllcztcblxuICAgICAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCByZWdpc3RyeS5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgICAgICBjb25zdCBlbnRyeSA9IHJlZ2lzdHJ5W2lkeF07XG4gICAgICAgICAgICBzZXJpZXMgPSBmaWx0ZXJTZXJpZXNCeVR5cGUoc3JjU2VyaWVzLCBlbnRyeS5zZXJpZXNUeXBlcyk7XG5cbiAgICAgICAgICAgIGlmIChzZXJpZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIG1hdGNoID0gZW50cnk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IG1hdGNoLnR5cGUoc2VyaWVzLCBvcHRpb25zLCBjaGFydFNlcnZpY2UpO1xuICAgIH1cbn1cblxuUGxvdEFyZWFGYWN0b3J5LmN1cnJlbnQgPSBuZXcgUGxvdEFyZWFGYWN0b3J5KCk7XG5cbmV4cG9ydCBkZWZhdWx0IFBsb3RBcmVhRmFjdG9yeTsiLCJpbXBvcnQgeyBEb21FdmVudHNCdWlsZGVyIH0gZnJvbSAnLi4vc2VydmljZXMnO1xuXG5pbXBvcnQgeyBEYXRlQ2F0ZWdvcnlBeGlzLCBQb2ludCB9IGZyb20gJy4uL2NvcmUnO1xuXG5pbXBvcnQgeyBNT1VTRVdIRUVMX0RFTEFZLCBNT1VTRVdIRUVMLCBTRUxFQ1RfU1RBUlQsIFNFTEVDVCwgU0VMRUNUX0VORCB9IGZyb20gJy4vY29uc3RhbnRzJztcblxuaW1wb3J0IHsgTEVGVCwgUklHSFQsIE1JTl9WQUxVRSwgTUFYX1ZBTFVFIH0gZnJvbSAnLi4vY29tbW9uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBhZGRDbGFzcywgQ2xhc3MsIHJlbW92ZUNsYXNzLCBkZWVwRXh0ZW5kLCBlbGVtZW50U3R5bGVzLCBldmVudEVsZW1lbnQsIHNldERlZmF1bHRPcHRpb25zLCBsaW1pdFZhbHVlLCByb3VuZCwgYmluZEV2ZW50cywgdW5iaW5kRXZlbnRzLCBtb3VzZXdoZWVsRGVsdGEsIGhhc0NsYXNzZXMgfSBmcm9tICcuLi9jb21tb24nO1xuaW1wb3J0IHsgcGFyc2VEYXRlIH0gZnJvbSAnLi4vZGF0ZS11dGlscyc7XG5cbmNvbnN0IFpPT01fQUNDRUxFUkFUSU9OID0gMztcbmNvbnN0IFNFTEVDVE9SX0hFSUdIVF9BREpVU1QgPSAwLjE7XG5cbmZ1bmN0aW9uIGNyZWF0ZURpdihjbGFzc05hbWUpIHtcbiAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBpZiAoY2xhc3NOYW1lKSB7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gY2xhc3NOYW1lO1xuICAgIH1cblxuICAgIHJldHVybiBlbGVtZW50O1xufVxuXG5mdW5jdGlvbiBjbG9zZXN0SGFuZGxlKGVsZW1lbnQpIHtcbiAgICBsZXQgY3VycmVudCA9IGVsZW1lbnQ7XG4gICAgd2hpbGUgKGN1cnJlbnQgJiYgIWhhc0NsYXNzZXMoY3VycmVudCwgXCJrLWhhbmRsZVwiKSkge1xuICAgICAgICBjdXJyZW50ID0gY3VycmVudC5wYXJlbnROb2RlO1xuICAgIH1cblxuICAgIHJldHVybiBjdXJyZW50O1xufVxuXG5jbGFzcyBTZWxlY3Rpb24gZXh0ZW5kcyBDbGFzcyB7XG4gICAgY29uc3RydWN0b3IoY2hhcnQsIGNhdGVnb3J5QXhpcywgb3B0aW9ucywgb2JzZXJ2ZXIpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICBjb25zdCBjaGFydEVsZW1lbnQgPSBjaGFydC5lbGVtZW50O1xuXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IGRlZXBFeHRlbmQoe30sIHRoaXMub3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuY2hhcnQgPSBjaGFydDtcbiAgICAgICAgdGhpcy5vYnNlcnZlciA9IG9ic2VydmVyO1xuICAgICAgICB0aGlzLmNoYXJ0RWxlbWVudCA9IGNoYXJ0RWxlbWVudDtcbiAgICAgICAgdGhpcy5jYXRlZ29yeUF4aXMgPSBjYXRlZ29yeUF4aXM7XG4gICAgICAgIHRoaXMuX2RhdGVBeGlzID0gdGhpcy5jYXRlZ29yeUF4aXMgaW5zdGFuY2VvZiBEYXRlQ2F0ZWdvcnlBeGlzO1xuXG4gICAgICAgIHRoaXMuaW5pdE9wdGlvbnMoKTtcblxuICAgICAgICB0aGlzLnZpc2libGUgPSB0aGlzLm9wdGlvbnMudmlzaWJsZSAmJiBjaGFydEVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuXG4gICAgICAgIGlmICh0aGlzLnZpc2libGUpIHtcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlRWxlbWVudHMoKTtcblxuICAgICAgICAgICAgdGhpcy5zZXQodGhpcy5faW5kZXgodGhpcy5vcHRpb25zLmZyb20pLCB0aGlzLl9pbmRleCh0aGlzLm9wdGlvbnMudG8pKTtcblxuICAgICAgICAgICAgdGhpcy5iaW5kRXZlbnRzKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvblBhbmUocGFuZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYXRlZ29yeUF4aXMucGFuZSA9PT0gcGFuZTtcbiAgICB9XG5cbiAgICBjcmVhdGVFbGVtZW50cygpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3Qgd3JhcHBlciA9IHRoaXMud3JhcHBlciA9IGNyZWF0ZURpdihcImstc2VsZWN0b3JcIik7XG4gICAgICAgIGVsZW1lbnRTdHlsZXMod3JhcHBlciwge1xuICAgICAgICAgICAgdG9wOiBvcHRpb25zLm9mZnNldC50b3AsXG4gICAgICAgICAgICBsZWZ0OiBvcHRpb25zLm9mZnNldC5sZWZ0LFxuICAgICAgICAgICAgd2lkdGg6IG9wdGlvbnMud2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IG9wdGlvbnMuaGVpZ2h0LFxuICAgICAgICAgICAgZGlyZWN0aW9uOiAnbHRyJ1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3Qgc2VsZWN0aW9uID0gdGhpcy5zZWxlY3Rpb24gPSBjcmVhdGVEaXYoXCJrLXNlbGVjdGlvblwiKTtcbiAgICAgICAgdGhpcy5sZWZ0TWFzayA9IGNyZWF0ZURpdihcImstbWFza1wiKTtcbiAgICAgICAgdGhpcy5yaWdodE1hc2sgPSBjcmVhdGVEaXYoXCJrLW1hc2tcIik7XG5cbiAgICAgICAgd3JhcHBlci5hcHBlbmRDaGlsZCh0aGlzLmxlZnRNYXNrKTtcbiAgICAgICAgd3JhcHBlci5hcHBlbmRDaGlsZCh0aGlzLnJpZ2h0TWFzayk7XG4gICAgICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQoc2VsZWN0aW9uKTtcblxuICAgICAgICBzZWxlY3Rpb24uYXBwZW5kQ2hpbGQoY3JlYXRlRGl2KFwiay1zZWxlY3Rpb24tYmdcIikpO1xuXG4gICAgICAgIGNvbnN0IGxlZnRIYW5kbGUgPSB0aGlzLmxlZnRIYW5kbGUgPSBjcmVhdGVEaXYoXCJrLWhhbmRsZSBrLWxlZnQtaGFuZGxlXCIpO1xuICAgICAgICBjb25zdCByaWdodEhhbmRsZSA9IHRoaXMucmlnaHRIYW5kbGUgPSBjcmVhdGVEaXYoXCJrLWhhbmRsZSBrLXJpZ2h0LWhhbmRsZVwiKTtcbiAgICAgICAgbGVmdEhhbmRsZS5hcHBlbmRDaGlsZChjcmVhdGVEaXYoKSk7XG4gICAgICAgIHJpZ2h0SGFuZGxlLmFwcGVuZENoaWxkKGNyZWF0ZURpdigpKTtcblxuICAgICAgICBzZWxlY3Rpb24uYXBwZW5kQ2hpbGQobGVmdEhhbmRsZSk7XG4gICAgICAgIHNlbGVjdGlvbi5hcHBlbmRDaGlsZChyaWdodEhhbmRsZSk7XG5cbiAgICAgICAgdGhpcy5jaGFydEVsZW1lbnQuYXBwZW5kQ2hpbGQod3JhcHBlcik7XG4gICAgICAgIGNvbnN0IHNlbGVjdGlvblN0eWxlcyA9IGVsZW1lbnRTdHlsZXMoc2VsZWN0aW9uLCBbIFwiYm9yZGVyTGVmdFdpZHRoXCIsIFwiYm9yZGVyUmlnaHRXaWR0aFwiLCBcImhlaWdodFwiIF0pO1xuICAgICAgICBjb25zdCBsZWZ0SGFuZGxlSGVpZ2h0ID0gZWxlbWVudFN0eWxlcyhsZWZ0SGFuZGxlLCBcImhlaWdodFwiKS5oZWlnaHQ7XG4gICAgICAgIGNvbnN0IHJpZ2h0SGFuZGxlSGVpZ2h0ID0gZWxlbWVudFN0eWxlcyhyaWdodEhhbmRsZSwgXCJoZWlnaHRcIikuaGVpZ2h0O1xuXG4gICAgICAgIG9wdGlvbnMuc2VsZWN0aW9uID0ge1xuICAgICAgICAgICAgYm9yZGVyOiB7XG4gICAgICAgICAgICAgICAgbGVmdDogc2VsZWN0aW9uU3R5bGVzLmJvcmRlckxlZnRXaWR0aCxcbiAgICAgICAgICAgICAgICByaWdodDogc2VsZWN0aW9uU3R5bGVzLmJvcmRlclJpZ2h0V2lkdGhcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBlbGVtZW50U3R5bGVzKGxlZnRIYW5kbGUsIHtcbiAgICAgICAgICAgIHRvcDogKHNlbGVjdGlvblN0eWxlcy5oZWlnaHQgLSBsZWZ0SGFuZGxlSGVpZ2h0KSAvIDJcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZWxlbWVudFN0eWxlcyhyaWdodEhhbmRsZSwge1xuICAgICAgICAgICAgdG9wOiAoc2VsZWN0aW9uU3R5bGVzLmhlaWdodCAtIHJpZ2h0SGFuZGxlSGVpZ2h0KSAvIDJcbiAgICAgICAgfSk7XG5cbiAgICAgICAgd3JhcHBlci5zdHlsZS5jc3NUZXh0ID0gd3JhcHBlci5zdHlsZS5jc3NUZXh0O1xuICAgIH1cblxuICAgIGJpbmRFdmVudHMoKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMubW91c2V3aGVlbCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRoaXMuX21vdXNld2hlZWxIYW5kbGVyID0gdGhpcy5fbW91c2V3aGVlbC5iaW5kKHRoaXMpO1xuICAgICAgICAgICAgYmluZEV2ZW50cyh0aGlzLndyYXBwZXIsIHtcbiAgICAgICAgICAgICAgICBbIE1PVVNFV0hFRUwgXTogdGhpcy5fbW91c2V3aGVlbEhhbmRsZXJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZG9tRXZlbnRzID0gRG9tRXZlbnRzQnVpbGRlci5jcmVhdGUodGhpcy53cmFwcGVyLCB7XG4gICAgICAgICAgICBzdG9wUHJvcGFnYXRpb246IHRydWUsIC8vIGFwcGxpY2FibGUgZm9yIHRoZSBqUXVlcnkgVXNlckV2ZW50c1xuICAgICAgICAgICAgc3RhcnQ6IHRoaXMuX3N0YXJ0LmJpbmQodGhpcyksXG4gICAgICAgICAgICBtb3ZlOiB0aGlzLl9tb3ZlLmJpbmQodGhpcyksXG4gICAgICAgICAgICBlbmQ6IHRoaXMuX2VuZC5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgdGFwOiB0aGlzLl90YXAuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIHByZXNzOiB0aGlzLl9wcmVzcy5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgZ2VzdHVyZXN0YXJ0OiB0aGlzLl9nZXN0dXJlc3RhcnQuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIGdlc3R1cmVjaGFuZ2U6IHRoaXMuX2dlc3R1cmVjaGFuZ2UuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIGdlc3R1cmVlbmQ6IHRoaXMuX2dlc3R1cmVlbmQuYmluZCh0aGlzKVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBpbml0T3B0aW9ucygpIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zLCBjYXRlZ29yeUF4aXMgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGJveCA9IGNhdGVnb3J5QXhpcy5wYW5lLmNoYXJ0c0JveCgpO1xuICAgICAgICBjb25zdCBpbnRsU2VydmljZSA9IHRoaXMuY2hhcnQuY2hhcnRTZXJ2aWNlLmludGw7XG5cbiAgICAgICAgaWYgKHRoaXMuX2RhdGVBeGlzKSB7XG4gICAgICAgICAgICBkZWVwRXh0ZW5kKG9wdGlvbnMsIHtcbiAgICAgICAgICAgICAgICBtaW46IHBhcnNlRGF0ZShpbnRsU2VydmljZSwgb3B0aW9ucy5taW4pLFxuICAgICAgICAgICAgICAgIG1heDogcGFyc2VEYXRlKGludGxTZXJ2aWNlLCBvcHRpb25zLm1heCksXG4gICAgICAgICAgICAgICAgZnJvbTogcGFyc2VEYXRlKGludGxTZXJ2aWNlLCBvcHRpb25zLmZyb20pLFxuICAgICAgICAgICAgICAgIHRvOiBwYXJzZURhdGUoaW50bFNlcnZpY2UsIG9wdGlvbnMudG8pXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHsgcGFkZGluZ0xlZnQsIHBhZGRpbmdUb3AgfSA9IGVsZW1lbnRTdHlsZXModGhpcy5jaGFydEVsZW1lbnQsIFsgXCJwYWRkaW5nTGVmdFwiLCBcInBhZGRpbmdUb3BcIiBdKTtcblxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBkZWVwRXh0ZW5kKHt9LCB7XG4gICAgICAgICAgICB3aWR0aDogYm94LndpZHRoKCksXG4gICAgICAgICAgICBoZWlnaHQ6IGJveC5oZWlnaHQoKSArIFNFTEVDVE9SX0hFSUdIVF9BREpVU1QsIC8vd29ya2Fyb3VuZCBmb3Igc3ViLXBpeGVsIGhvdmVyIG9uIHRoZSBwYXRocyBpbiBjaHJvbWVcbiAgICAgICAgICAgIHBhZGRpbmc6IHtcbiAgICAgICAgICAgICAgICBsZWZ0OiBwYWRkaW5nTGVmdCxcbiAgICAgICAgICAgICAgICB0b3A6IHBhZGRpbmdUb3BcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvZmZzZXQ6IHtcbiAgICAgICAgICAgICAgICBsZWZ0OiBib3gueDEgKyBwYWRkaW5nTGVmdCxcbiAgICAgICAgICAgICAgICB0b3A6IGJveC55MSArIHBhZGRpbmdUb3BcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmcm9tOiBvcHRpb25zLm1pbixcbiAgICAgICAgICAgIHRvOiBvcHRpb25zLm1heFxuICAgICAgICB9LCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBpZiAodGhpcy5fZG9tRXZlbnRzKSB7XG4gICAgICAgICAgICB0aGlzLl9kb21FdmVudHMuZGVzdHJveSgpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2RvbUV2ZW50cztcbiAgICAgICAgfVxuXG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9td1RpbWVvdXQpO1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IG51bGw7XG5cbiAgICAgICAgaWYgKHRoaXMud3JhcHBlcikge1xuICAgICAgICAgICAgaWYgKHRoaXMuX21vdXNld2hlZWxIYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgdW5iaW5kRXZlbnRzKHRoaXMud3JhcHBlciwge1xuICAgICAgICAgICAgICAgICAgICBbIE1PVVNFV0hFRUwgXTogdGhpcy5fbW91c2V3aGVlbEhhbmRsZXJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb3VzZXdoZWVsSGFuZGxlciA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmNoYXJ0RWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLndyYXBwZXIpO1xuICAgICAgICAgICAgdGhpcy53cmFwcGVyID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9yYW5nZUV2ZW50QXJncyhyYW5nZSkge1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBheGlzOiB0aGlzLmNhdGVnb3J5QXhpcy5vcHRpb25zLFxuICAgICAgICAgICAgZnJvbTogdGhpcy5fdmFsdWUocmFuZ2UuZnJvbSksXG4gICAgICAgICAgICB0bzogdGhpcy5fdmFsdWUocmFuZ2UudG8pXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgX3N0YXJ0KGUpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gZXZlbnRFbGVtZW50KGUpO1xuXG4gICAgICAgIGlmICh0aGlzLl9zdGF0ZSB8fCAhdGFyZ2V0KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNoYXJ0Ll91bnNldEFjdGl2ZVBvaW50KCk7XG4gICAgICAgIHRoaXMuX3N0YXRlID0ge1xuICAgICAgICAgICAgbW92ZVRhcmdldDogY2xvc2VzdEhhbmRsZSh0YXJnZXQpIHx8IHRhcmdldCxcbiAgICAgICAgICAgIHN0YXJ0TG9jYXRpb246IGUueCA/IGUueC5sb2NhdGlvbiA6IDAsXG4gICAgICAgICAgICByYW5nZToge1xuICAgICAgICAgICAgICAgIGZyb206IHRoaXMuX2luZGV4KG9wdGlvbnMuZnJvbSksXG4gICAgICAgICAgICAgICAgdG86IHRoaXMuX2luZGV4KG9wdGlvbnMudG8pXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgYXJncyA9IHRoaXMuX3JhbmdlRXZlbnRBcmdzKHtcbiAgICAgICAgICAgIGZyb206IHRoaXMuX2luZGV4KG9wdGlvbnMuZnJvbSksXG4gICAgICAgICAgICB0bzogdGhpcy5faW5kZXgob3B0aW9ucy50bylcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHRoaXMudHJpZ2dlcihTRUxFQ1RfU1RBUlQsIGFyZ3MpKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfcHJlc3MoZSkge1xuICAgICAgICBsZXQgaGFuZGxlO1xuICAgICAgICBpZiAodGhpcy5fc3RhdGUpIHtcbiAgICAgICAgICAgIGhhbmRsZSA9IHRoaXMuX3N0YXRlLm1vdmVUYXJnZXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoYW5kbGUgPSBjbG9zZXN0SGFuZGxlKGV2ZW50RWxlbWVudChlKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhbmRsZSkge1xuICAgICAgICAgICAgYWRkQ2xhc3MoaGFuZGxlLCBcImstaGFuZGxlLWFjdGl2ZVwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9tb3ZlKGUpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9zdGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgeyBfc3RhdGU6IHN0YXRlLCBvcHRpb25zLCBjYXRlZ29yeUF4aXMgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHsgcmFuZ2UsIG1vdmVUYXJnZXQ6IHRhcmdldCB9ID0gc3RhdGU7XG4gICAgICAgIGNvbnN0IHJldmVyc2UgPSBjYXRlZ29yeUF4aXMub3B0aW9ucy5yZXZlcnNlO1xuICAgICAgICBjb25zdCBmcm9tID0gdGhpcy5faW5kZXgob3B0aW9ucy5mcm9tKTtcbiAgICAgICAgY29uc3QgdG8gPSB0aGlzLl9pbmRleChvcHRpb25zLnRvKTtcbiAgICAgICAgY29uc3QgbWluID0gdGhpcy5faW5kZXgob3B0aW9ucy5taW4pO1xuICAgICAgICBjb25zdCBtYXggPSB0aGlzLl9pbmRleChvcHRpb25zLm1heCk7XG4gICAgICAgIGNvbnN0IGRlbHRhID0gc3RhdGUuc3RhcnRMb2NhdGlvbiAtIGUueC5sb2NhdGlvbjtcbiAgICAgICAgY29uc3Qgb2xkUmFuZ2UgPSB7IGZyb206IHJhbmdlLmZyb20sIHRvOiByYW5nZS50byB9O1xuICAgICAgICBjb25zdCBzcGFuID0gcmFuZ2UudG8gLSByYW5nZS5mcm9tO1xuICAgICAgICBjb25zdCBzY2FsZSA9IGVsZW1lbnRTdHlsZXModGhpcy53cmFwcGVyLCBcIndpZHRoXCIpLndpZHRoIC8gKGNhdGVnb3J5QXhpcy5jYXRlZ29yaWVzQ291bnQoKSAtIDEpO1xuICAgICAgICBjb25zdCBvZmZzZXQgPSBNYXRoLnJvdW5kKGRlbHRhIC8gc2NhbGUpICogKHJldmVyc2UgPyAtMSA6IDEpO1xuXG4gICAgICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBsZWZ0SGFuZGxlID0gaGFzQ2xhc3Nlcyh0YXJnZXQsIFwiay1sZWZ0LWhhbmRsZVwiKTtcbiAgICAgICAgY29uc3QgcmlnaHRIYW5kbGUgPSBoYXNDbGFzc2VzKHRhcmdldCwgXCJrLXJpZ2h0LWhhbmRsZVwiKTtcblxuICAgICAgICBpZiAoaGFzQ2xhc3Nlcyh0YXJnZXQsIFwiay1zZWxlY3Rpb24gay1zZWxlY3Rpb24tYmdcIikpIHtcbiAgICAgICAgICAgIHJhbmdlLmZyb20gPSBNYXRoLm1pbihcbiAgICAgICAgICAgICAgICBNYXRoLm1heChtaW4sIGZyb20gLSBvZmZzZXQpLFxuICAgICAgICAgICAgICAgIG1heCAtIHNwYW5cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICByYW5nZS50byA9IE1hdGgubWluKFxuICAgICAgICAgICAgICAgIHJhbmdlLmZyb20gKyBzcGFuLFxuICAgICAgICAgICAgICAgIG1heFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmICgobGVmdEhhbmRsZSAmJiAhcmV2ZXJzZSkgfHwgKHJpZ2h0SGFuZGxlICYmIHJldmVyc2UpKSB7XG4gICAgICAgICAgICByYW5nZS5mcm9tID0gTWF0aC5taW4oXG4gICAgICAgICAgICAgICAgTWF0aC5tYXgobWluLCBmcm9tIC0gb2Zmc2V0KSxcbiAgICAgICAgICAgICAgICBtYXggLSAxXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcmFuZ2UudG8gPSBNYXRoLm1heChyYW5nZS5mcm9tICsgMSwgcmFuZ2UudG8pO1xuICAgICAgICB9IGVsc2UgaWYgKChsZWZ0SGFuZGxlICYmIHJldmVyc2UpIHx8IChyaWdodEhhbmRsZSAmJiAhcmV2ZXJzZSkpIHtcbiAgICAgICAgICAgIHJhbmdlLnRvID0gTWF0aC5taW4oXG4gICAgICAgICAgICAgICAgTWF0aC5tYXgobWluICsgMSwgdG8gLSBvZmZzZXQpLFxuICAgICAgICAgICAgICAgIG1heFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJhbmdlLmZyb20gPSBNYXRoLm1pbihyYW5nZS50byAtIDEsIHJhbmdlLmZyb20pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJhbmdlLmZyb20gIT09IG9sZFJhbmdlLmZyb20gfHwgcmFuZ2UudG8gIT09IG9sZFJhbmdlLnRvKSB7XG4gICAgICAgICAgICB0aGlzLm1vdmUocmFuZ2UuZnJvbSwgcmFuZ2UudG8pO1xuICAgICAgICAgICAgdGhpcy50cmlnZ2VyKFNFTEVDVCwgdGhpcy5fcmFuZ2VFdmVudEFyZ3MocmFuZ2UpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9lbmQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9zdGF0ZSkge1xuICAgICAgICAgICAgY29uc3QgbW92ZVRhcmdldCA9IHRoaXMuX3N0YXRlLm1vdmVUYXJnZXQ7XG4gICAgICAgICAgICBpZiAobW92ZVRhcmdldCkge1xuICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKG1vdmVUYXJnZXQsIFwiay1oYW5kbGUtYWN0aXZlXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCByYW5nZSA9IHRoaXMuX3N0YXRlLnJhbmdlO1xuICAgICAgICAgICAgdGhpcy5zZXQocmFuZ2UuZnJvbSwgcmFuZ2UudG8pO1xuICAgICAgICAgICAgdGhpcy50cmlnZ2VyKFNFTEVDVF9FTkQsIHRoaXMuX3JhbmdlRXZlbnRBcmdzKHJhbmdlKSk7XG5cbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9zdGF0ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF90YXAoZSkge1xuICAgICAgICBjb25zdCB7IG9wdGlvbnMsIGNhdGVnb3J5QXhpcyB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgY29vcmRzID0gdGhpcy5jaGFydC5fZXZlbnRDb29yZGluYXRlcyhlKTtcbiAgICAgICAgY29uc3QgY2F0ZWdvcnlJeCA9IGNhdGVnb3J5QXhpcy5wb2ludENhdGVnb3J5SW5kZXgobmV3IFBvaW50KGNvb3Jkcy54LCBjYXRlZ29yeUF4aXMuYm94LnkxKSk7XG4gICAgICAgIGNvbnN0IGZyb20gPSB0aGlzLl9pbmRleChvcHRpb25zLmZyb20pO1xuICAgICAgICBjb25zdCB0byA9IHRoaXMuX2luZGV4KG9wdGlvbnMudG8pO1xuICAgICAgICBjb25zdCBtaW4gPSB0aGlzLl9pbmRleChvcHRpb25zLm1pbik7XG4gICAgICAgIGNvbnN0IG1heCA9IHRoaXMuX2luZGV4KG9wdGlvbnMubWF4KTtcbiAgICAgICAgY29uc3Qgc3BhbiA9IHRvIC0gZnJvbTtcbiAgICAgICAgY29uc3QgbWlkID0gZnJvbSArIHNwYW4gLyAyO1xuICAgICAgICBjb25zdCByYW5nZSA9IHt9O1xuICAgICAgICBjb25zdCByaWdodENsaWNrID0gZS5ldmVudC53aGljaCA9PT0gMztcbiAgICAgICAgbGV0IG9mZnNldCA9IE1hdGgucm91bmQobWlkIC0gY2F0ZWdvcnlJeCk7XG5cbiAgICAgICAgaWYgKHRoaXMuX3N0YXRlIHx8IHJpZ2h0Q2xpY2spIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgdGhpcy5jaGFydC5fdW5zZXRBY3RpdmVQb2ludCgpO1xuXG4gICAgICAgIGlmICghY2F0ZWdvcnlBeGlzLm9wdGlvbnMuanVzdGlmaWVkKSB7XG4gICAgICAgICAgICBvZmZzZXQtLTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJhbmdlLmZyb20gPSBNYXRoLm1pbihcbiAgICAgICAgICAgIE1hdGgubWF4KG1pbiwgZnJvbSAtIG9mZnNldCksXG4gICAgICAgICAgICBtYXggLSBzcGFuXG4gICAgICAgICk7XG5cbiAgICAgICAgcmFuZ2UudG8gPSBNYXRoLm1pbihyYW5nZS5mcm9tICsgc3BhbiwgbWF4KTtcblxuICAgICAgICB0aGlzLl9zdGFydChlKTtcbiAgICAgICAgaWYgKHRoaXMuX3N0YXRlKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZS5yYW5nZSA9IHJhbmdlO1xuICAgICAgICAgICAgdGhpcy50cmlnZ2VyKFNFTEVDVCwgdGhpcy5fcmFuZ2VFdmVudEFyZ3MocmFuZ2UpKTtcbiAgICAgICAgICAgIHRoaXMuX2VuZCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX21vdXNld2hlZWwoZSkge1xuICAgICAgICBsZXQgZGVsdGEgPSBtb3VzZXdoZWVsRGVsdGEoZSk7XG5cbiAgICAgICAgdGhpcy5fc3RhcnQoeyB0YXJnZXQ6IHRoaXMuc2VsZWN0aW9uIH0pO1xuXG4gICAgICAgIGlmICh0aGlzLl9zdGF0ZSkge1xuICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSB0aGlzLl9zdGF0ZS5yYW5nZTtcblxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICAgICAgaWYgKE1hdGguYWJzKGRlbHRhKSA+IDEpIHtcbiAgICAgICAgICAgICAgICBkZWx0YSAqPSBaT09NX0FDQ0VMRVJBVElPTjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5tb3VzZXdoZWVsLnJldmVyc2UpIHtcbiAgICAgICAgICAgICAgICBkZWx0YSAqPSAtMTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMuZXhwYW5kKGRlbHRhKSkge1xuICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcihTRUxFQ1QsIHtcbiAgICAgICAgICAgICAgICAgICAgYXhpczogdGhpcy5jYXRlZ29yeUF4aXMub3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgZGVsdGE6IGRlbHRhLFxuICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBlLFxuICAgICAgICAgICAgICAgICAgICBmcm9tOiB0aGlzLl92YWx1ZShyYW5nZS5mcm9tKSxcbiAgICAgICAgICAgICAgICAgICAgdG86IHRoaXMuX3ZhbHVlKHJhbmdlLnRvKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5fbXdUaW1lb3V0KSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX213VGltZW91dCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX213VGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX2VuZCgpO1xuICAgICAgICAgICAgfSwgTU9VU0VXSEVFTF9ERUxBWSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfZ2VzdHVyZXN0YXJ0KGUpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICAgICAgICB0aGlzLl9zdGF0ZSA9IHtcbiAgICAgICAgICAgIHJhbmdlOiB7XG4gICAgICAgICAgICAgICAgZnJvbTogdGhpcy5faW5kZXgob3B0aW9ucy5mcm9tKSxcbiAgICAgICAgICAgICAgICB0bzogdGhpcy5faW5kZXgob3B0aW9ucy50bylcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgYXJncyA9IHRoaXMuX3JhbmdlRXZlbnRBcmdzKHRoaXMuX3N0YXRlLnJhbmdlKTtcblxuICAgICAgICBpZiAodGhpcy50cmlnZ2VyKFNFTEVDVF9TVEFSVCwgYXJncykpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9nZXN0dXJlZW5kKCkge1xuICAgICAgICBpZiAodGhpcy5fc3RhdGUpIHtcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlcihTRUxFQ1RfRU5ELCB0aGlzLl9yYW5nZUV2ZW50QXJncyh0aGlzLl9zdGF0ZS5yYW5nZSkpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3N0YXRlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2dlc3R1cmVjaGFuZ2UoZSkge1xuICAgICAgICBjb25zdCB7IGNoYXJ0LCBfc3RhdGU6IHN0YXRlLCBvcHRpb25zLCBjYXRlZ29yeUF4aXMgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHJhbmdlID0gc3RhdGUucmFuZ2U7XG4gICAgICAgIGNvbnN0IHAwID0gY2hhcnQuX3RvTW9kZWxDb29yZGluYXRlcyhlLnRvdWNoZXNbMF0ueC5sb2NhdGlvbikueDtcbiAgICAgICAgY29uc3QgcDEgPSBjaGFydC5fdG9Nb2RlbENvb3JkaW5hdGVzKGUudG91Y2hlc1sxXS54LmxvY2F0aW9uKS54O1xuICAgICAgICBjb25zdCBsZWZ0ID0gTWF0aC5taW4ocDAsIHAxKTtcbiAgICAgICAgY29uc3QgcmlnaHQgPSBNYXRoLm1heChwMCwgcDEpO1xuXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICByYW5nZS5mcm9tID0gY2F0ZWdvcnlBeGlzLnBvaW50Q2F0ZWdvcnlJbmRleChuZXcgUG9pbnQobGVmdCkpIHx8IG9wdGlvbnMubWluO1xuXG4gICAgICAgIHJhbmdlLnRvID0gY2F0ZWdvcnlBeGlzLnBvaW50Q2F0ZWdvcnlJbmRleChuZXcgUG9pbnQocmlnaHQpKSB8fCBvcHRpb25zLm1heDtcblxuICAgICAgICB0aGlzLm1vdmUocmFuZ2UuZnJvbSwgcmFuZ2UudG8pO1xuXG4gICAgICAgIHRoaXMudHJpZ2dlcihTRUxFQ1QsIHRoaXMuX3JhbmdlRXZlbnRBcmdzKHJhbmdlKSk7XG4gICAgfVxuXG4gICAgX2luZGV4KHZhbHVlKSB7XG4gICAgICAgIGxldCBpbmRleCA9IHZhbHVlO1xuXG4gICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgICAgIGluZGV4ID0gdGhpcy5jYXRlZ29yeUF4aXMuY2F0ZWdvcnlJbmRleCh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgfVxuXG4gICAgX3ZhbHVlKGluZGV4KSB7XG4gICAgICAgIGxldCB2YWx1ZSA9IGluZGV4O1xuICAgICAgICBpZiAodGhpcy5fZGF0ZUF4aXMpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdGhpcy5jYXRlZ29yeUF4aXMuY2F0ZWdvcnlBdChpbmRleCk7XG4gICAgICAgICAgICBpZiAodmFsdWUgPiB0aGlzLm9wdGlvbnMubWF4KSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLm9wdGlvbnMubWF4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIF9zbG90KHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGNhdGVnb3J5QXhpcyA9IHRoaXMuY2F0ZWdvcnlBeGlzO1xuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuX2luZGV4KHZhbHVlKTtcblxuICAgICAgICByZXR1cm4gY2F0ZWdvcnlBeGlzLmdldFNsb3QoaW5kZXgsIGluZGV4LCB0cnVlKTtcbiAgICB9XG5cbiAgICBtb3ZlKGZyb20sIHRvKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHJldmVyc2UgPSB0aGlzLmNhdGVnb3J5QXhpcy5vcHRpb25zLnJldmVyc2U7XG4gICAgICAgIGNvbnN0IHsgb2Zmc2V0LCBwYWRkaW5nLCBzZWxlY3Rpb246IHsgYm9yZGVyIH0gfSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGxlZnQgPSByZXZlcnNlID8gdG8gOiBmcm9tO1xuICAgICAgICBjb25zdCByaWdodCA9IHJldmVyc2UgPyBmcm9tIDogdG87XG4gICAgICAgIGNvbnN0IGVkZ2UgPSAneCcgKyAocmV2ZXJzZSA/IDIgOiAxKTtcblxuICAgICAgICBsZXQgYm94ID0gdGhpcy5fc2xvdChsZWZ0KTtcbiAgICAgICAgY29uc3QgbGVmdE1hc2tXaWR0aCA9IHJvdW5kKGJveFtlZGdlXSAtIG9mZnNldC5sZWZ0ICsgcGFkZGluZy5sZWZ0KTtcblxuICAgICAgICBlbGVtZW50U3R5bGVzKHRoaXMubGVmdE1hc2ssIHtcbiAgICAgICAgICAgIHdpZHRoOiBsZWZ0TWFza1dpZHRoXG4gICAgICAgIH0pO1xuICAgICAgICBlbGVtZW50U3R5bGVzKHRoaXMuc2VsZWN0aW9uLCB7XG4gICAgICAgICAgICBsZWZ0OiBsZWZ0TWFza1dpZHRoXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGJveCA9IHRoaXMuX3Nsb3QocmlnaHQpO1xuXG4gICAgICAgIGNvbnN0IHJpZ2h0TWFza1dpZHRoID0gcm91bmQob3B0aW9ucy53aWR0aCAtIChib3hbZWRnZV0gLSBvZmZzZXQubGVmdCArIHBhZGRpbmcubGVmdCkpO1xuICAgICAgICBlbGVtZW50U3R5bGVzKHRoaXMucmlnaHRNYXNrLCB7XG4gICAgICAgICAgICB3aWR0aDogcmlnaHRNYXNrV2lkdGhcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbGV0IGRpc3RhbmNlID0gb3B0aW9ucy53aWR0aCAtIHJpZ2h0TWFza1dpZHRoO1xuICAgICAgICBpZiAoZGlzdGFuY2UgIT09IG9wdGlvbnMud2lkdGgpIHtcbiAgICAgICAgICAgIGRpc3RhbmNlICs9IGJvcmRlci5yaWdodDtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsZW1lbnRTdHlsZXModGhpcy5yaWdodE1hc2ssIHtcbiAgICAgICAgICAgIGxlZnQ6IGRpc3RhbmNlXG4gICAgICAgIH0pO1xuICAgICAgICBlbGVtZW50U3R5bGVzKHRoaXMuc2VsZWN0aW9uLCB7XG4gICAgICAgICAgICB3aWR0aDogTWF0aC5tYXgob3B0aW9ucy53aWR0aCAtIChsZWZ0TWFza1dpZHRoICsgcmlnaHRNYXNrV2lkdGgpIC0gYm9yZGVyLnJpZ2h0LCAwKVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzZXQoZnJvbSwgdG8pIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgbWluID0gdGhpcy5faW5kZXgob3B0aW9ucy5taW4pO1xuICAgICAgICBjb25zdCBtYXggPSB0aGlzLl9pbmRleChvcHRpb25zLm1heCk7XG4gICAgICAgIGNvbnN0IGZyb21WYWx1ZSA9IGxpbWl0VmFsdWUodGhpcy5faW5kZXgoZnJvbSksIG1pbiwgbWF4KTtcbiAgICAgICAgY29uc3QgdG9WYWx1ZSA9IGxpbWl0VmFsdWUodGhpcy5faW5kZXgodG8pLCBmcm9tVmFsdWUgKyAxLCBtYXgpO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnZpc2libGUpIHtcbiAgICAgICAgICAgIHRoaXMubW92ZShmcm9tVmFsdWUsIHRvVmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgb3B0aW9ucy5mcm9tID0gdGhpcy5fdmFsdWUoZnJvbVZhbHVlKTtcbiAgICAgICAgb3B0aW9ucy50byA9IHRoaXMuX3ZhbHVlKHRvVmFsdWUpO1xuICAgIH1cblxuICAgIGV4cGFuZChkZWx0YSkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBtaW4gPSB0aGlzLl9pbmRleChvcHRpb25zLm1pbik7XG4gICAgICAgIGNvbnN0IG1heCA9IHRoaXMuX2luZGV4KG9wdGlvbnMubWF4KTtcbiAgICAgICAgY29uc3QgekRpciA9IG9wdGlvbnMubW91c2V3aGVlbC56b29tO1xuICAgICAgICBjb25zdCBmcm9tID0gdGhpcy5faW5kZXgob3B0aW9ucy5mcm9tKTtcbiAgICAgICAgY29uc3QgdG8gPSB0aGlzLl9pbmRleChvcHRpb25zLnRvKTtcbiAgICAgICAgbGV0IHJhbmdlID0geyBmcm9tOiBmcm9tLCB0bzogdG8gfTtcbiAgICAgICAgY29uc3Qgb2xkUmFuZ2UgPSBkZWVwRXh0ZW5kKHt9LCByYW5nZSk7XG5cbiAgICAgICAgaWYgKHRoaXMuX3N0YXRlKSB7XG4gICAgICAgICAgICByYW5nZSA9IHRoaXMuX3N0YXRlLnJhbmdlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHpEaXIgIT09IFJJR0hUKSB7XG4gICAgICAgICAgICByYW5nZS5mcm9tID0gbGltaXRWYWx1ZShcbiAgICAgICAgICAgICAgICBsaW1pdFZhbHVlKGZyb20gLSBkZWx0YSwgMCwgdG8gLSAxKSxcbiAgICAgICAgICAgICAgICBtaW4sIG1heFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh6RGlyICE9PSBMRUZUKSB7XG4gICAgICAgICAgICByYW5nZS50byA9IGxpbWl0VmFsdWUoXG4gICAgICAgICAgICAgICAgbGltaXRWYWx1ZSh0byArIGRlbHRhLCByYW5nZS5mcm9tICsgMSwgbWF4KSxcbiAgICAgICAgICAgICAgICBtaW4sXG4gICAgICAgICAgICAgICAgbWF4XG4gICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyYW5nZS5mcm9tICE9PSBvbGRSYW5nZS5mcm9tIHx8IHJhbmdlLnRvICE9PSBvbGRSYW5nZS50bykge1xuICAgICAgICAgICAgdGhpcy5zZXQocmFuZ2UuZnJvbSwgcmFuZ2UudG8pO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0cmlnZ2VyKG5hbWUsIGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLm9ic2VydmVyIHx8IHRoaXMuY2hhcnQpLnRyaWdnZXIobmFtZSwgYXJncyk7XG4gICAgfVxufVxuXG5zZXREZWZhdWx0T3B0aW9ucyhTZWxlY3Rpb24sIHtcbiAgICB2aXNpYmxlOiB0cnVlLFxuICAgIG1vdXNld2hlZWw6IHtcbiAgICAgICAgem9vbTogXCJib3RoXCJcbiAgICB9LFxuICAgIG1pbjogTUlOX1ZBTFVFLFxuICAgIG1heDogTUFYX1ZBTFVFXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgU2VsZWN0aW9uO1xuIiwiaW1wb3J0IEJhc2VUb29sdGlwIGZyb20gJy4vYmFzZS10b29sdGlwJztcblxuaW1wb3J0IHsgZGVlcEV4dGVuZCB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5cbmNsYXNzIFRvb2x0aXAgZXh0ZW5kcyBCYXNlVG9vbHRpcCB7XG4gICAgc2hvdyhwb2ludCkge1xuICAgICAgICBpZiAoIXBvaW50IHx8ICFwb2ludC50b29sdGlwQW5jaG9yIHx8ICh0aGlzLl9jdXJyZW50ICYmIHRoaXMuX2N1cnJlbnQgPT09IHBvaW50KSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IGRlZXBFeHRlbmQoe30sIHRoaXMub3B0aW9ucywgcG9pbnQub3B0aW9ucy50b29sdGlwKTtcbiAgICAgICAgY29uc3QgYW5jaG9yID0gcG9pbnQudG9vbHRpcEFuY2hvcigpO1xuXG4gICAgICAgIGlmIChhbmNob3IpIHtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnQgPSBwb2ludDtcbiAgICAgICAgICAgIHN1cGVyLnNob3coe1xuICAgICAgICAgICAgICAgIHBvaW50OiBwb2ludCxcbiAgICAgICAgICAgICAgICBhbmNob3I6IGFuY2hvclxuICAgICAgICAgICAgfSwgb3B0aW9ucywgcG9pbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoaWRlKCkge1xuICAgICAgICBkZWxldGUgdGhpcy5fY3VycmVudDtcbiAgICAgICAgc3VwZXIuaGlkZSgpO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVG9vbHRpcDsiLCJpbXBvcnQgQmFzZVRvb2x0aXAgZnJvbSAnLi9iYXNlLXRvb2x0aXAnO1xuaW1wb3J0IHsgUG9pbnQgfSBmcm9tICcuLi8uLi9jb3JlJztcblxuaW1wb3J0IHsgZ3JlcCwgc2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tICcuLi8uLi9jb21tb24nO1xuXG5jbGFzcyBTaGFyZWRUb29sdGlwIGV4dGVuZHMgQmFzZVRvb2x0aXAge1xuICAgIGNvbnN0cnVjdG9yKHBsb3RBcmVhLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKHBsb3RBcmVhLmNoYXJ0U2VydmljZSwgb3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5wbG90QXJlYSA9IHBsb3RBcmVhO1xuICAgICAgICB0aGlzLmZvcm1hdFNlcnZpY2UgPSBwbG90QXJlYS5jaGFydFNlcnZpY2UuZm9ybWF0O1xuICAgIH1cblxuICAgIHNob3dBdChwb2ludHMsIGNvb3Jkcykge1xuICAgICAgICBjb25zdCB0b29sdGlwUG9pbnRzID0gZ3JlcChwb2ludHMsIGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgICAgICAgICBjb25zdCB0b29sdGlwID0gcG9pbnQuc2VyaWVzLnRvb2x0aXA7XG4gICAgICAgICAgICBjb25zdCBleGNsdWRlZCA9IHRvb2x0aXAgJiYgdG9vbHRpcC52aXNpYmxlID09PSBmYWxzZTtcblxuICAgICAgICAgICAgcmV0dXJuICFleGNsdWRlZDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHRvb2x0aXBQb2ludHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgcG9pbnQgPSB0b29sdGlwUG9pbnRzWzBdO1xuICAgICAgICAgICAgY29uc3Qgc2xvdCA9IHRoaXMucGxvdEFyZWEuY2F0ZWdvcnlBeGlzLmdldFNsb3QocG9pbnQuY2F0ZWdvcnlJeCk7XG5cbiAgICAgICAgICAgIGNvbnN0IGFuY2hvciA9IGNvb3JkcyA/IHRoaXMuX3Nsb3RBbmNob3IoY29vcmRzLCBzbG90KSA6IHRoaXMuX2RlZmF1bHRBbmNob3IocG9pbnQsIHNsb3QpO1xuXG4gICAgICAgICAgICB0aGlzLnNob3coe1xuICAgICAgICAgICAgICAgIGFuY2hvcjogYW5jaG9yLFxuICAgICAgICAgICAgICAgIHNoYXJlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBwb2ludHM6IHBvaW50cyxcbiAgICAgICAgICAgICAgICBjYXRlZ29yeTogcG9pbnQuY2F0ZWdvcnksXG4gICAgICAgICAgICAgICAgY2F0ZWdvcnlUZXh0OiB0aGlzLmZvcm1hdFNlcnZpY2UuYXV0byh0aGlzLm9wdGlvbnMuY2F0ZWdvcnlGb3JtYXQsIHBvaW50LmNhdGVnb3J5KSxcbiAgICAgICAgICAgICAgICBzZXJpZXM6IHRoaXMucGxvdEFyZWEuc2VyaWVzXG4gICAgICAgICAgICB9LCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3Nsb3RBbmNob3IocG9pbnQsIHNsb3QpIHtcbiAgICAgICAgY29uc3QgYXhpcyA9IHRoaXMucGxvdEFyZWEuY2F0ZWdvcnlBeGlzO1xuICAgICAgICBjb25zdCBhbGlnbiA9IHtcbiAgICAgICAgICAgIGhvcml6b250YWw6IFwibGVmdFwiLFxuICAgICAgICAgICAgdmVydGljYWw6IFwiY2VudGVyXCJcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoIWF4aXMub3B0aW9ucy52ZXJ0aWNhbCkge1xuICAgICAgICAgICAgcG9pbnQueCA9IHNsb3QuY2VudGVyKCkueDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwb2ludDogcG9pbnQsXG4gICAgICAgICAgICBhbGlnbjogYWxpZ25cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBfZGVmYXVsdEFuY2hvcihwb2ludCwgc2xvdCkge1xuICAgICAgICBjb25zdCBib3ggPSBwb2ludC5vd25lci5wYW5lLmNoYXJ0c0JveCgpO1xuICAgICAgICBjb25zdCB2ZXJ0aWNhbCA9IHRoaXMucGxvdEFyZWEuY2F0ZWdvcnlBeGlzLm9wdGlvbnMudmVydGljYWw7XG4gICAgICAgIGNvbnN0IGNlbnRlciA9IGJveC5jZW50ZXIoKTtcbiAgICAgICAgY29uc3Qgc2xvdENlbnRlciA9IHNsb3QuY2VudGVyKCk7XG4gICAgICAgIGNvbnN0IGFsaWduID0ge1xuICAgICAgICAgICAgaG9yaXpvbnRhbDogXCJjZW50ZXJcIixcbiAgICAgICAgICAgIHZlcnRpY2FsOiBcImNlbnRlclwiXG4gICAgICAgIH07XG5cbiAgICAgICAgbGV0IGNlbnRlclBvaW50O1xuICAgICAgICBpZiAodmVydGljYWwpIHtcbiAgICAgICAgICAgIGNlbnRlclBvaW50ID0gbmV3IFBvaW50KGNlbnRlci54LCBzbG90Q2VudGVyLnkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2VudGVyUG9pbnQgPSBuZXcgUG9pbnQoc2xvdENlbnRlci54LCBjZW50ZXIueSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcG9pbnQ6IGNlbnRlclBvaW50LFxuICAgICAgICAgICAgYWxpZ246IGFsaWduXG4gICAgICAgIH07XG4gICAgfVxufVxuXG5zZXREZWZhdWx0T3B0aW9ucyhTaGFyZWRUb29sdGlwLCB7XG4gICAgY2F0ZWdvcnlGb3JtYXQ6ICd7MDpkfSdcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBTaGFyZWRUb29sdGlwOyIsImltcG9ydCB7IGRyYXdpbmcgYXMgZHJhdywgZ2VvbWV0cnkgYXMgZ2VvbSB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1kcmF3aW5nJztcblxuaW1wb3J0IHsgSU5JVElBTF9BTklNQVRJT05fRFVSQVRJT04sIEJBUiwgU1RBUlRfU0NBTEUgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuXG5pbXBvcnQgeyBYLCBZIH0gZnJvbSAnLi4vLi4vY29tbW9uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBpbnRlcnBvbGF0ZVZhbHVlLCBzZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5cbmNsYXNzIEJhckNoYXJ0QW5pbWF0aW9uIGV4dGVuZHMgZHJhdy5BbmltYXRpb24ge1xuXG4gICAgc2V0dXAoKSB7XG4gICAgICAgIGNvbnN0IHsgZWxlbWVudCwgb3B0aW9ucyB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgYmJveCA9IGVsZW1lbnQuYmJveCgpO1xuXG4gICAgICAgIGlmIChiYm94KSB7XG4gICAgICAgICAgICB0aGlzLm9yaWdpbiA9IG9wdGlvbnMub3JpZ2luO1xuICAgICAgICAgICAgY29uc3QgYXhpcyA9IG9wdGlvbnMudmVydGljYWwgPyBZIDogWDtcblxuICAgICAgICAgICAgY29uc3QgZnJvbVNjYWxlID0gdGhpcy5mcm9tU2NhbGUgPSBuZXcgZ2VvbS5Qb2ludCgxLCAxKTtcbiAgICAgICAgICAgIGZyb21TY2FsZVtheGlzXSA9IFNUQVJUX1NDQUxFO1xuXG4gICAgICAgICAgICBlbGVtZW50LnRyYW5zZm9ybShnZW9tLnRyYW5zZm9ybSgpXG4gICAgICAgICAgICAgICAgLnNjYWxlKGZyb21TY2FsZS54LCBmcm9tU2NhbGUueSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFib3J0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGVwKHBvcykge1xuICAgICAgICBjb25zdCBzY2FsZVggPSBpbnRlcnBvbGF0ZVZhbHVlKHRoaXMuZnJvbVNjYWxlLngsIDEsIHBvcyk7XG4gICAgICAgIGNvbnN0IHNjYWxlWSA9IGludGVycG9sYXRlVmFsdWUodGhpcy5mcm9tU2NhbGUueSwgMSwgcG9zKTtcblxuICAgICAgICB0aGlzLmVsZW1lbnQudHJhbnNmb3JtKGdlb20udHJhbnNmb3JtKClcbiAgICAgICAgICAgIC5zY2FsZShzY2FsZVgsIHNjYWxlWSwgdGhpcy5vcmlnaW4pXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgYWJvcnQoKSB7XG4gICAgICAgIHN1cGVyLmFib3J0KCk7XG4gICAgICAgIHRoaXMuZWxlbWVudC50cmFuc2Zvcm0obnVsbCk7XG4gICAgfVxufVxuXG5zZXREZWZhdWx0T3B0aW9ucyhCYXJDaGFydEFuaW1hdGlvbiwge1xuICAgIGR1cmF0aW9uOiBJTklUSUFMX0FOSU1BVElPTl9EVVJBVElPTlxufSk7XG5cbmRyYXcuQW5pbWF0aW9uRmFjdG9yeS5jdXJyZW50LnJlZ2lzdGVyKEJBUiwgQmFyQ2hhcnRBbmltYXRpb24pO1xuXG5leHBvcnQgZGVmYXVsdCBCYXJDaGFydEFuaW1hdGlvbjsiLCJpbXBvcnQgeyBkcmF3aW5nIGFzIGRyYXcsIGdlb21ldHJ5IGFzIGdlb20gfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tZHJhd2luZyc7XG5cbmltcG9ydCB7IFNUQVJUX1NDQUxFLCBCVUJCTEUgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuXG5pbXBvcnQgeyBzZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5cbmNsYXNzIEJ1YmJsZUFuaW1hdGlvbiBleHRlbmRzIGRyYXcuQW5pbWF0aW9uIHtcbiAgICBzZXR1cCgpIHtcbiAgICAgICAgY29uc3QgY2VudGVyID0gdGhpcy5jZW50ZXIgPSB0aGlzLmVsZW1lbnQuYmJveCgpLmNlbnRlcigpO1xuICAgICAgICB0aGlzLmVsZW1lbnQudHJhbnNmb3JtKGdlb20udHJhbnNmb3JtKClcbiAgICAgICAgICAgIC5zY2FsZShTVEFSVF9TQ0FMRSwgU1RBUlRfU0NBTEUsIGNlbnRlcilcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBzdGVwKHBvcykge1xuICAgICAgICB0aGlzLmVsZW1lbnQudHJhbnNmb3JtKGdlb20udHJhbnNmb3JtKClcbiAgICAgICAgICAgIC5zY2FsZShwb3MsIHBvcywgdGhpcy5jZW50ZXIpXG4gICAgICAgICk7XG4gICAgfVxufVxuXG5zZXREZWZhdWx0T3B0aW9ucyhCdWJibGVBbmltYXRpb24sIHtcbiAgICBlYXNpbmc6IFwiZWFzZU91dEVsYXN0aWNcIlxufSk7XG5cbmRyYXcuQW5pbWF0aW9uRmFjdG9yeS5jdXJyZW50LnJlZ2lzdGVyKEJVQkJMRSwgQnViYmxlQW5pbWF0aW9uKTtcblxuZXhwb3J0IGRlZmF1bHQgQnViYmxlQW5pbWF0aW9uOyIsImltcG9ydCB7IGRyYXdpbmcgYXMgZHJhdyB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1kcmF3aW5nJztcblxuaW1wb3J0IHsgRkFERUlOIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcblxuaW1wb3J0IHsgc2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tICcuLi8uLi9jb21tb24nO1xuXG5jbGFzcyBGYWRlSW5BbmltYXRpb24gZXh0ZW5kcyBkcmF3LkFuaW1hdGlvbiB7XG4gICAgc2V0dXAoKSB7XG4gICAgICAgIHRoaXMuZmFkZVRvID0gdGhpcy5lbGVtZW50Lm9wYWNpdHkoKTtcbiAgICAgICAgdGhpcy5lbGVtZW50Lm9wYWNpdHkoMCk7XG4gICAgfVxuXG4gICAgc3RlcChwb3MpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50Lm9wYWNpdHkocG9zICogdGhpcy5mYWRlVG8pO1xuICAgIH1cbn1cblxuc2V0RGVmYXVsdE9wdGlvbnMoRmFkZUluQW5pbWF0aW9uLCB7XG4gICAgZHVyYXRpb246IDIwMCxcbiAgICBlYXNpbmc6IFwibGluZWFyXCJcbn0pO1xuXG5kcmF3LkFuaW1hdGlvbkZhY3RvcnkuY3VycmVudC5yZWdpc3RlcihGQURFSU4sIEZhZGVJbkFuaW1hdGlvbik7XG5cbmV4cG9ydCBkZWZhdWx0IEZhZGVJbkFuaW1hdGlvbjsiLCJpbXBvcnQgeyBkcmF3aW5nIGFzIGRyYXcsIGdlb21ldHJ5IGFzIGdlb20gfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tZHJhd2luZyc7XG5cbmltcG9ydCB7IFNUQVJUX1NDQUxFLCBJTklUSUFMX0FOSU1BVElPTl9EVVJBVElPTiwgUElFIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcblxuaW1wb3J0IHsgc2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tICcuLi8uLi9jb21tb24nO1xuXG5jbGFzcyBQaWVBbmltYXRpb24gZXh0ZW5kcyBkcmF3LkFuaW1hdGlvbiB7XG4gICAgc2V0dXAoKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudC50cmFuc2Zvcm0oZ2VvbS50cmFuc2Zvcm0oKVxuICAgICAgICAgICAgLnNjYWxlKFNUQVJUX1NDQUxFLCBTVEFSVF9TQ0FMRSwgdGhpcy5vcHRpb25zLmNlbnRlcilcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBzdGVwKHBvcykge1xuICAgICAgICB0aGlzLmVsZW1lbnQudHJhbnNmb3JtKGdlb20udHJhbnNmb3JtKClcbiAgICAgICAgICAgIC5zY2FsZShwb3MsIHBvcywgdGhpcy5vcHRpb25zLmNlbnRlcilcbiAgICAgICAgKTtcbiAgICB9XG59XG5cbnNldERlZmF1bHRPcHRpb25zKFBpZUFuaW1hdGlvbiwge1xuICAgIGVhc2luZzogXCJlYXNlT3V0RWxhc3RpY1wiLFxuICAgIGR1cmF0aW9uOiBJTklUSUFMX0FOSU1BVElPTl9EVVJBVElPTlxufSk7XG5cbmRyYXcuQW5pbWF0aW9uRmFjdG9yeS5jdXJyZW50LnJlZ2lzdGVyKFBJRSwgUGllQW5pbWF0aW9uKTtcblxuZXhwb3J0IGRlZmF1bHQgUGllQW5pbWF0aW9uOyIsImltcG9ydCBTY2F0dGVyQ2hhcnQgZnJvbSAnLi9zY2F0dGVyLWNoYXJ0JztcbmltcG9ydCBMaW5lQ2hhcnRNaXhpbiBmcm9tICcuLi9taXhpbnMvbGluZS1jaGFydC1taXhpbic7XG5pbXBvcnQgTGluZVNlZ21lbnQgZnJvbSAnLi4vbGluZS1jaGFydC9saW5lLXNlZ21lbnQnO1xuaW1wb3J0IFNwbGluZVNlZ21lbnQgZnJvbSAnLi4vbGluZS1jaGFydC9zcGxpbmUtc2VnbWVudCc7XG5cbmltcG9ydCB7IFNNT09USCwgWkVSTyB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5cbmltcG9ydCBoYXNWYWx1ZSBmcm9tICcuLi91dGlscy9oYXMtdmFsdWUnO1xuXG5pbXBvcnQgeyBkZWVwRXh0ZW5kIH0gZnJvbSAnLi4vLi4vY29tbW9uJztcblxuY2xhc3MgU2NhdHRlckxpbmVDaGFydCBleHRlbmRzIFNjYXR0ZXJDaGFydCB7XG4gICAgcmVuZGVyKCkge1xuICAgICAgICBzdXBlci5yZW5kZXIoKTtcblxuICAgICAgICB0aGlzLnJlbmRlclNlZ21lbnRzKCk7XG4gICAgfVxuXG4gICAgY3JlYXRlU2VnbWVudChsaW5lUG9pbnRzLCBjdXJyZW50U2VyaWVzLCBzZXJpZXNJeCkge1xuICAgICAgICBjb25zdCBzdHlsZSA9IGN1cnJlbnRTZXJpZXMuc3R5bGU7XG4gICAgICAgIGxldCBwb2ludFR5cGU7XG5cbiAgICAgICAgaWYgKHN0eWxlID09PSBTTU9PVEgpIHtcbiAgICAgICAgICAgIHBvaW50VHlwZSA9IFNwbGluZVNlZ21lbnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwb2ludFR5cGUgPSBMaW5lU2VnbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXcgcG9pbnRUeXBlKGxpbmVQb2ludHMsIGN1cnJlbnRTZXJpZXMsIHNlcmllc0l4KTtcbiAgICB9XG5cbiAgICBhbmltYXRpb25Qb2ludHMoKSB7XG4gICAgICAgIGNvbnN0IHBvaW50cyA9IHN1cGVyLmFuaW1hdGlvblBvaW50cygpO1xuICAgICAgICByZXR1cm4gcG9pbnRzLmNvbmNhdCh0aGlzLl9zZWdtZW50cyk7XG4gICAgfVxuXG4gICAgY3JlYXRlTWlzc2luZ1ZhbHVlKHZhbHVlLCBtaXNzaW5nVmFsdWVzKSB7XG4gICAgICAgIGlmIChtaXNzaW5nVmFsdWVzID09PSBaRVJPKSB7XG4gICAgICAgICAgICBjb25zdCBtaXNzaW5nVmFsdWUgPSB7XG4gICAgICAgICAgICAgICAgeDogdmFsdWUueCxcbiAgICAgICAgICAgICAgICB5OiB2YWx1ZS55XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKCFoYXNWYWx1ZShtaXNzaW5nVmFsdWUueCkpIHtcbiAgICAgICAgICAgICAgICBtaXNzaW5nVmFsdWUueCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWhhc1ZhbHVlKG1pc3NpbmdWYWx1ZS55KSkge1xuICAgICAgICAgICAgICAgIG1pc3NpbmdWYWx1ZS55ID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtaXNzaW5nVmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmRlZXBFeHRlbmQoU2NhdHRlckxpbmVDaGFydC5wcm90b3R5cGUsIExpbmVDaGFydE1peGluKTtcblxuZXhwb3J0IGRlZmF1bHQgU2NhdHRlckxpbmVDaGFydDsiLCJpbXBvcnQgUGxvdEFyZWFCYXNlIGZyb20gJy4vcGxvdGFyZWEtYmFzZSc7XG5pbXBvcnQgQXhpc0dyb3VwUmFuZ2VUcmFja2VyIGZyb20gJy4uL2F4aXMtZ3JvdXAtcmFuZ2UtdHJhY2tlcic7XG5pbXBvcnQgUGxvdEFyZWFFdmVudHNNaXhpbiBmcm9tICcuLi9taXhpbnMvcGxvdGFyZWEtZXZlbnRzLW1peGluJztcbmltcG9ydCBTY2F0dGVyQ2hhcnQgZnJvbSAnLi4vc2NhdHRlci1jaGFydHMvc2NhdHRlci1jaGFydCc7XG5pbXBvcnQgU2NhdHRlckxpbmVDaGFydCBmcm9tICcuLi9zY2F0dGVyLWNoYXJ0cy9zY2F0dGVyLWxpbmUtY2hhcnQnO1xuaW1wb3J0IEJ1YmJsZUNoYXJ0IGZyb20gJy4uL2J1YmJsZS1jaGFydC9idWJibGUtY2hhcnQnO1xuaW1wb3J0IFNlcmllc0JpbmRlciBmcm9tICcuLi9zZXJpZXMtYmluZGVyJztcblxuaW1wb3J0IHsgTnVtZXJpY0F4aXMsIExvZ2FyaXRobWljQXhpcywgRGF0ZVZhbHVlQXhpcywgUG9pbnQgfSBmcm9tICcuLi8uLi9jb3JlJztcblxuaW1wb3J0IGZpbHRlclNlcmllc0J5VHlwZSBmcm9tICcuLi91dGlscy9maWx0ZXItc2VyaWVzLWJ5LXR5cGUnO1xuaW1wb3J0IGVxdWFsc0lnbm9yZUNhc2UgZnJvbSAnLi4vdXRpbHMvZXF1YWxzLWlnbm9yZS1jYXNlJztcbmltcG9ydCBzaW5nbGVJdGVtT3JBcnJheSBmcm9tICcuLi91dGlscy9zaW5nbGUtaXRlbS1vci1hcnJheSc7XG5cbmltcG9ydCB7IFNDQVRURVIsIFNDQVRURVJfTElORSwgQlVCQkxFLCBMT0dBUklUSE1JQyB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5cbmltcG9ydCB7IERBVEUgfSBmcm9tICcuLi8uLi9jb21tb24vY29uc3RhbnRzJztcbmltcG9ydCB7IGRlZXBFeHRlbmQsIGV2ZW50RWxlbWVudCwgZ3JlcCwgaW5BcnJheSwgc2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tICcuLi8uLi9jb21tb24nO1xuXG5jbGFzcyBYWVBsb3RBcmVhIGV4dGVuZHMgUGxvdEFyZWFCYXNlIHtcbiAgICBpbml0RmllbGRzKCkge1xuICAgICAgICB0aGlzLm5hbWVkWEF4ZXMgPSB7fTtcbiAgICAgICAgdGhpcy5uYW1lZFlBeGVzID0ge307XG5cbiAgICAgICAgdGhpcy54QXhpc1JhbmdlVHJhY2tlciA9IG5ldyBBeGlzR3JvdXBSYW5nZVRyYWNrZXIoKTtcbiAgICAgICAgdGhpcy55QXhpc1JhbmdlVHJhY2tlciA9IG5ldyBBeGlzR3JvdXBSYW5nZVRyYWNrZXIoKTtcbiAgICB9XG5cbiAgICByZW5kZXIocGFuZXMgPSB0aGlzLnBhbmVzKSB7XG4gICAgICAgIGNvbnN0IHNlcmllc0J5UGFuZSA9IHRoaXMuZ3JvdXBTZXJpZXNCeVBhbmUoKTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBwYW5lID0gcGFuZXNbaV07XG4gICAgICAgICAgICBjb25zdCBwYW5lU2VyaWVzID0gc2VyaWVzQnlQYW5lW3BhbmUub3B0aW9ucy5uYW1lIHx8IFwiZGVmYXVsdFwiXSB8fCBbXTtcbiAgICAgICAgICAgIHRoaXMuYWRkVG9MZWdlbmQocGFuZVNlcmllcyk7XG4gICAgICAgICAgICBjb25zdCBmaWx0ZXJlZFNlcmllcyA9IHRoaXMuZmlsdGVyVmlzaWJsZVNlcmllcyhwYW5lU2VyaWVzKTtcblxuICAgICAgICAgICAgaWYgKCFmaWx0ZXJlZFNlcmllcykge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZVNjYXR0ZXJDaGFydChcbiAgICAgICAgICAgICAgICBmaWx0ZXJTZXJpZXNCeVR5cGUoZmlsdGVyZWRTZXJpZXMsIFNDQVRURVIpLFxuICAgICAgICAgICAgICAgIHBhbmVcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHRoaXMuY3JlYXRlU2NhdHRlckxpbmVDaGFydChcbiAgICAgICAgICAgICAgICBmaWx0ZXJTZXJpZXNCeVR5cGUoZmlsdGVyZWRTZXJpZXMsIFNDQVRURVJfTElORSksXG4gICAgICAgICAgICAgICAgcGFuZVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgdGhpcy5jcmVhdGVCdWJibGVDaGFydChcbiAgICAgICAgICAgICAgICBmaWx0ZXJTZXJpZXNCeVR5cGUoZmlsdGVyZWRTZXJpZXMsIEJVQkJMRSksXG4gICAgICAgICAgICAgICAgcGFuZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY3JlYXRlQXhlcyhwYW5lcyk7XG4gICAgfVxuXG4gICAgYXBwZW5kQ2hhcnQoY2hhcnQsIHBhbmUpIHtcbiAgICAgICAgdGhpcy54QXhpc1JhbmdlVHJhY2tlci51cGRhdGUoY2hhcnQueEF4aXNSYW5nZXMpO1xuICAgICAgICB0aGlzLnlBeGlzUmFuZ2VUcmFja2VyLnVwZGF0ZShjaGFydC55QXhpc1Jhbmdlcyk7XG5cbiAgICAgICAgc3VwZXIuYXBwZW5kQ2hhcnQoY2hhcnQsIHBhbmUpO1xuICAgIH1cblxuICAgIHJlbW92ZUF4aXMoYXhpcykge1xuICAgICAgICBjb25zdCBheGlzTmFtZSA9IGF4aXMub3B0aW9ucy5uYW1lO1xuXG4gICAgICAgIHN1cGVyLnJlbW92ZUF4aXMoYXhpcyk7XG5cbiAgICAgICAgaWYgKGF4aXMub3B0aW9ucy52ZXJ0aWNhbCkge1xuICAgICAgICAgICAgdGhpcy55QXhpc1JhbmdlVHJhY2tlci5yZXNldChheGlzTmFtZSk7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5uYW1lZFlBeGVzW2F4aXNOYW1lXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMueEF4aXNSYW5nZVRyYWNrZXIucmVzZXQoYXhpc05hbWUpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMubmFtZWRYQXhlc1theGlzTmFtZV07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYXhpcyA9PT0gdGhpcy5heGlzWCkge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuYXhpc1g7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYXhpcyA9PT0gdGhpcy5heGlzWSkge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuYXhpc1k7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUT0RPOiBSZWZhY3Rvciwgb3B0aW9uYWxseSB1c2Ugc2VyaWVzLnBhbmUgb3B0aW9uXG4gICAgc2VyaWVzUGFuZU5hbWUoc2VyaWVzKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHhBeGlzTmFtZSA9IHNlcmllcy54QXhpcztcbiAgICAgICAgY29uc3QgeEF4aXNPcHRpb25zID0gW10uY29uY2F0KG9wdGlvbnMueEF4aXMpO1xuICAgICAgICBjb25zdCB4QXhpcyA9IGdyZXAoeEF4aXNPcHRpb25zLCBmdW5jdGlvbihhKSB7IHJldHVybiBhLm5hbWUgPT09IHhBeGlzTmFtZTsgfSlbMF07XG4gICAgICAgIGNvbnN0IHlBeGlzTmFtZSA9IHNlcmllcy55QXhpcztcbiAgICAgICAgY29uc3QgeUF4aXNPcHRpb25zID0gW10uY29uY2F0KG9wdGlvbnMueUF4aXMpO1xuICAgICAgICBjb25zdCB5QXhpcyA9IGdyZXAoeUF4aXNPcHRpb25zLCBmdW5jdGlvbihhKSB7IHJldHVybiBhLm5hbWUgPT09IHlBeGlzTmFtZTsgfSlbMF07XG4gICAgICAgIGNvbnN0IHBhbmVzID0gb3B0aW9ucy5wYW5lcyB8fCBbIHt9IF07XG4gICAgICAgIGNvbnN0IGRlZmF1bHRQYW5lTmFtZSA9IHBhbmVzWzBdLm5hbWUgfHwgXCJkZWZhdWx0XCI7XG4gICAgICAgIGNvbnN0IHBhbmVOYW1lID0gKHhBeGlzIHx8IHt9KS5wYW5lIHx8ICh5QXhpcyB8fCB7fSkucGFuZSB8fCBkZWZhdWx0UGFuZU5hbWU7XG5cbiAgICAgICAgcmV0dXJuIHBhbmVOYW1lO1xuICAgIH1cblxuICAgIGNyZWF0ZVNjYXR0ZXJDaGFydChzZXJpZXMsIHBhbmUpIHtcbiAgICAgICAgaWYgKHNlcmllcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLmFwcGVuZENoYXJ0KFxuICAgICAgICAgICAgICAgIG5ldyBTY2F0dGVyQ2hhcnQodGhpcywgeyBzZXJpZXM6IHNlcmllcywgY2xpcDogcGFuZS5vcHRpb25zLmNsaXAgfSksXG4gICAgICAgICAgICAgICAgcGFuZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNyZWF0ZVNjYXR0ZXJMaW5lQ2hhcnQoc2VyaWVzLCBwYW5lKSB7XG4gICAgICAgIGlmIChzZXJpZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5hcHBlbmRDaGFydChcbiAgICAgICAgICAgICAgICBuZXcgU2NhdHRlckxpbmVDaGFydCh0aGlzLCB7IHNlcmllczogc2VyaWVzLCBjbGlwOiBwYW5lLm9wdGlvbnMuY2xpcCB9KSxcbiAgICAgICAgICAgICAgICBwYW5lXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY3JlYXRlQnViYmxlQ2hhcnQoc2VyaWVzLCBwYW5lKSB7XG4gICAgICAgIGlmIChzZXJpZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5hcHBlbmRDaGFydChcbiAgICAgICAgICAgICAgICBuZXcgQnViYmxlQ2hhcnQodGhpcywgeyBzZXJpZXM6IHNlcmllcywgY2xpcDogcGFuZS5vcHRpb25zLmNsaXAgfSksXG4gICAgICAgICAgICAgICAgcGFuZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNyZWF0ZVhZQXhpcyhvcHRpb25zLCB2ZXJ0aWNhbCwgYXhpc0luZGV4KSB7XG4gICAgICAgIGNvbnN0IGF4aXNOYW1lID0gb3B0aW9ucy5uYW1lO1xuICAgICAgICBjb25zdCBuYW1lZEF4ZXMgPSB2ZXJ0aWNhbCA/IHRoaXMubmFtZWRZQXhlcyA6IHRoaXMubmFtZWRYQXhlcztcbiAgICAgICAgY29uc3QgdHJhY2tlciA9IHZlcnRpY2FsID8gdGhpcy55QXhpc1JhbmdlVHJhY2tlciA6IHRoaXMueEF4aXNSYW5nZVRyYWNrZXI7XG4gICAgICAgIGNvbnN0IGF4aXNPcHRpb25zID0gZGVlcEV4dGVuZCh7IHJldmVyc2U6ICF2ZXJ0aWNhbCAmJiB0aGlzLmNoYXJ0U2VydmljZS5ydGwgfSwgb3B0aW9ucywgeyB2ZXJ0aWNhbDogdmVydGljYWwgfSk7XG4gICAgICAgIGNvbnN0IGlzTG9nID0gZXF1YWxzSWdub3JlQ2FzZShheGlzT3B0aW9ucy50eXBlLCBMT0dBUklUSE1JQyk7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRSYW5nZSA9IHRyYWNrZXIucXVlcnkoKTtcbiAgICAgICAgY29uc3QgZGVmYXVsdEF4aXNSYW5nZSA9IGlzTG9nID8geyBtaW46IDAuMSwgbWF4OiAxIH0gOiB7IG1pbjogMCwgbWF4OiAxIH07XG4gICAgICAgIGNvbnN0IHJhbmdlID0gdHJhY2tlci5xdWVyeShheGlzTmFtZSkgfHwgZGVmYXVsdFJhbmdlIHx8IGRlZmF1bHRBeGlzUmFuZ2U7XG4gICAgICAgIGNvbnN0IHR5cGVTYW1wbGVzID0gWyBheGlzT3B0aW9ucy5taW4sIGF4aXNPcHRpb25zLm1heCBdO1xuICAgICAgICBjb25zdCBzZXJpZXMgPSB0aGlzLnNlcmllcztcblxuICAgICAgICBmb3IgKGxldCBzZXJpZXNJeCA9IDA7IHNlcmllc0l4IDwgc2VyaWVzLmxlbmd0aDsgc2VyaWVzSXgrKykge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudFNlcmllcyA9IHNlcmllc1tzZXJpZXNJeF07XG4gICAgICAgICAgICBjb25zdCBzZXJpZXNBeGlzTmFtZSA9IGN1cnJlbnRTZXJpZXNbdmVydGljYWwgPyBcInlBeGlzXCIgOiBcInhBeGlzXCJdO1xuICAgICAgICAgICAgaWYgKChzZXJpZXNBeGlzTmFtZSA9PT0gYXhpc09wdGlvbnMubmFtZSkgfHwgKGF4aXNJbmRleCA9PT0gMCAmJiAhc2VyaWVzQXhpc05hbWUpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmlyc3RQb2ludFZhbHVlID0gU2VyaWVzQmluZGVyLmN1cnJlbnQuYmluZFBvaW50KGN1cnJlbnRTZXJpZXMsIDApLnZhbHVlRmllbGRzO1xuICAgICAgICAgICAgICAgIHR5cGVTYW1wbGVzLnB1c2goZmlyc3RQb2ludFZhbHVlW3ZlcnRpY2FsID8gXCJ5XCIgOiBcInhcIl0pO1xuXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYXhpc0luZGV4ID09PSAwICYmIGRlZmF1bHRSYW5nZSkge1xuICAgICAgICAgICAgcmFuZ2UubWluID0gTWF0aC5taW4ocmFuZ2UubWluLCBkZWZhdWx0UmFuZ2UubWluKTtcbiAgICAgICAgICAgIHJhbmdlLm1heCA9IE1hdGgubWF4KHJhbmdlLm1heCwgZGVmYXVsdFJhbmdlLm1heCk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaW5mZXJyZWREYXRlO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHlwZVNhbXBsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0eXBlU2FtcGxlc1tpXSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgICAgICAgICBpbmZlcnJlZERhdGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGF4aXNUeXBlO1xuICAgICAgICBpZiAoZXF1YWxzSWdub3JlQ2FzZShheGlzT3B0aW9ucy50eXBlLCBEQVRFKSB8fCAoIWF4aXNPcHRpb25zLnR5cGUgJiYgaW5mZXJyZWREYXRlKSkge1xuICAgICAgICAgICAgYXhpc1R5cGUgPSBEYXRlVmFsdWVBeGlzO1xuICAgICAgICB9IGVsc2UgaWYgKGlzTG9nKSB7XG4gICAgICAgICAgICBheGlzVHlwZSA9IExvZ2FyaXRobWljQXhpcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGF4aXNUeXBlID0gTnVtZXJpY0F4aXM7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBheGlzID0gbmV3IGF4aXNUeXBlKHJhbmdlLm1pbiwgcmFuZ2UubWF4LCBheGlzT3B0aW9ucywgdGhpcy5jaGFydFNlcnZpY2UpO1xuICAgICAgICBheGlzLmF4aXNJbmRleCA9IGF4aXNJbmRleDtcblxuICAgICAgICBpZiAoYXhpc05hbWUpIHtcbiAgICAgICAgICAgIGlmIChuYW1lZEF4ZXNbYXhpc05hbWVdKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAkeyB2ZXJ0aWNhbCA/IFwiWVwiIDogXCJYXCIgfSBheGlzIHdpdGggbmFtZSAkeyBheGlzTmFtZSB9IGlzIGFscmVhZHkgZGVmaW5lZGApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmFtZWRBeGVzW2F4aXNOYW1lXSA9IGF4aXM7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmFwcGVuZEF4aXMoYXhpcyk7XG5cbiAgICAgICAgcmV0dXJuIGF4aXM7XG4gICAgfVxuXG4gICAgY3JlYXRlQXhlcyhwYW5lcykge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCB4QXhlc09wdGlvbnMgPSBbXS5jb25jYXQob3B0aW9ucy54QXhpcyk7XG4gICAgICAgIGNvbnN0IHhBeGVzID0gW107XG4gICAgICAgIGNvbnN0IHlBeGVzT3B0aW9ucyA9IFtdLmNvbmNhdChvcHRpb25zLnlBeGlzKTtcbiAgICAgICAgY29uc3QgeUF4ZXMgPSBbXTtcblxuICAgICAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCB4QXhlc09wdGlvbnMubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgY29uc3QgYXhpc1BhbmUgPSB0aGlzLmZpbmRQYW5lKHhBeGVzT3B0aW9uc1tpZHhdLnBhbmUpO1xuICAgICAgICAgICAgaWYgKGluQXJyYXkoYXhpc1BhbmUsIHBhbmVzKSkge1xuICAgICAgICAgICAgICAgIHhBeGVzLnB1c2godGhpcy5jcmVhdGVYWUF4aXMoeEF4ZXNPcHRpb25zW2lkeF0sIGZhbHNlLCBpZHgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IHlBeGVzT3B0aW9ucy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgICAgICBjb25zdCBheGlzUGFuZSA9IHRoaXMuZmluZFBhbmUoeUF4ZXNPcHRpb25zW2lkeF0ucGFuZSk7XG4gICAgICAgICAgICBpZiAoaW5BcnJheShheGlzUGFuZSwgcGFuZXMpKSB7XG4gICAgICAgICAgICAgICAgeUF4ZXMucHVzaCh0aGlzLmNyZWF0ZVhZQXhpcyh5QXhlc09wdGlvbnNbaWR4XSwgdHJ1ZSwgaWR4KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmF4aXNYID0gdGhpcy5heGlzWCB8fCB4QXhlc1swXTtcbiAgICAgICAgdGhpcy5heGlzWSA9IHRoaXMuYXhpc1kgfHwgeUF4ZXNbMF07XG4gICAgfVxuXG4gICAgX2Rpc3BhdGNoRXZlbnQoY2hhcnQsIGUsIGV2ZW50VHlwZSkge1xuICAgICAgICBjb25zdCBjb29yZHMgPSBjaGFydC5fZXZlbnRDb29yZGluYXRlcyhlKTtcbiAgICAgICAgY29uc3QgcG9pbnQgPSBuZXcgUG9pbnQoY29vcmRzLngsIGNvb3Jkcy55KTtcbiAgICAgICAgY29uc3QgYWxsQXhlcyA9IHRoaXMuYXhlcztcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gYWxsQXhlcy5sZW5ndGg7XG4gICAgICAgIGNvbnN0IHhWYWx1ZXMgPSBbXTtcbiAgICAgICAgY29uc3QgeVZhbHVlcyA9IFtdO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGF4aXMgPSBhbGxBeGVzW2ldO1xuICAgICAgICAgICAgY29uc3QgdmFsdWVzID0gYXhpcy5vcHRpb25zLnZlcnRpY2FsID8geVZhbHVlcyA6IHhWYWx1ZXM7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50VmFsdWUgPSBheGlzLmdldFZhbHVlKHBvaW50KTtcbiAgICAgICAgICAgIGlmIChjdXJyZW50VmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZXMucHVzaChjdXJyZW50VmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHhWYWx1ZXMubGVuZ3RoID4gMCAmJiB5VmFsdWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNoYXJ0LnRyaWdnZXIoZXZlbnRUeXBlLCB7XG4gICAgICAgICAgICAgICAgZWxlbWVudDogZXZlbnRFbGVtZW50KGUpLFxuICAgICAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGUsXG4gICAgICAgICAgICAgICAgeDogc2luZ2xlSXRlbU9yQXJyYXkoeFZhbHVlcyksXG4gICAgICAgICAgICAgICAgeTogc2luZ2xlSXRlbU9yQXJyYXkoeVZhbHVlcylcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlQXhpc09wdGlvbnMoYXhpcywgb3B0aW9ucykge1xuICAgICAgICBjb25zdCB2ZXJ0aWNhbCA9IGF4aXMub3B0aW9ucy52ZXJ0aWNhbDtcbiAgICAgICAgY29uc3QgYXhlcyA9IHRoaXMuZ3JvdXBBeGVzKHRoaXMucGFuZXMpO1xuICAgICAgICBjb25zdCBpbmRleCA9ICh2ZXJ0aWNhbCA/IGF4ZXMueSA6IGF4ZXMueCkuaW5kZXhPZihheGlzKTtcblxuICAgICAgICB1cGRhdGVBeGlzT3B0aW9ucyh0aGlzLm9wdGlvbnMsIGluZGV4LCB2ZXJ0aWNhbCwgb3B0aW9ucyk7XG4gICAgICAgIHVwZGF0ZUF4aXNPcHRpb25zKHRoaXMub3JpZ2luYWxPcHRpb25zLCBpbmRleCwgdmVydGljYWwsIG9wdGlvbnMpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlQXhpc09wdGlvbnModGFyZ2V0T3B0aW9ucywgYXhpc0luZGV4LCB2ZXJ0aWNhbCwgb3B0aW9ucykge1xuICAgIGNvbnN0IGF4aXNPcHRpb25zID0gKFtdLmNvbmNhdCh2ZXJ0aWNhbCA/IHRhcmdldE9wdGlvbnMueUF4aXMgOiB0YXJnZXRPcHRpb25zLnhBeGlzKSlbYXhpc0luZGV4XTtcbiAgICBkZWVwRXh0ZW5kKGF4aXNPcHRpb25zLCBvcHRpb25zKTtcbn1cblxuc2V0RGVmYXVsdE9wdGlvbnMoWFlQbG90QXJlYSwge1xuICAgIHhBeGlzOiB7fSxcbiAgICB5QXhpczoge31cbn0pO1xuXG5kZWVwRXh0ZW5kKFhZUGxvdEFyZWEucHJvdG90eXBlLCBQbG90QXJlYUV2ZW50c01peGluKTtcblxuZXhwb3J0IGRlZmF1bHQgWFlQbG90QXJlYTsiLCJpbXBvcnQgeyBkcmF3aW5nIGFzIGRyYXcsIGdlb21ldHJ5IGFzIGdlb20sIENvbG9yIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWRyYXdpbmcnO1xuXG5pbXBvcnQgeyBDaGFydEVsZW1lbnQsIFNoYXBlQnVpbGRlciwgVGV4dEJveCwgQm94IH0gZnJvbSAnLi4vLi4vY29yZSc7XG5cbmltcG9ydCBQb2ludEV2ZW50c01peGluIGZyb20gJy4uL21peGlucy9wb2ludC1ldmVudHMtbWl4aW4nO1xuXG5pbXBvcnQgeyBPVVRTSURFX0VORCwgSU5TSURFX0VORCwgUElFLCBGQURFSU4sIFRPT0xUSVBfT0ZGU0VUIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCBoYXNHcmFkaWVudE92ZXJsYXkgZnJvbSAnLi4vdXRpbHMvaGFzLWdyYWRpZW50LW92ZXJsYXknO1xuXG5pbXBvcnQgeyBUT1AsIEJPVFRPTSwgTEVGVCwgUklHSFQsIERFRkFVTFRfRk9OVCwgQ0lSQ0xFLCBXSElURSwgQkxBQ0ssIENFTlRFUiwgREVGQVVMVF9QUkVDSVNJT04gfSBmcm9tICcuLi8uLi9jb21tb24vY29uc3RhbnRzJztcbmltcG9ydCB7IHNldERlZmF1bHRPcHRpb25zLCBnZXRTcGFjaW5nLCBnZXRUZW1wbGF0ZSwgZGVlcEV4dGVuZCwgcm91bmQsIHJhZCB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5cbmNsYXNzIFBpZVNlZ21lbnQgZXh0ZW5kcyBDaGFydEVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKHZhbHVlLCBzZWN0b3IsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLnNlY3RvciA9IHNlY3RvcjtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IGxhYmVscyA9IHRoaXMub3B0aW9ucy5sYWJlbHM7XG4gICAgICAgIGNvbnN0IGNoYXJ0U2VydmljZSA9IHRoaXMub3duZXIuY2hhcnRTZXJ2aWNlO1xuICAgICAgICBsZXQgbGFiZWxUZXh0ID0gdGhpcy52YWx1ZTtcblxuICAgICAgICBpZiAodGhpcy5fcmVuZGVyZWQgfHwgdGhpcy52aXNpYmxlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3JlbmRlcmVkID0gdHJ1ZTtcblxuICAgICAgICBjb25zdCBsYWJlbFRlbXBsYXRlID0gZ2V0VGVtcGxhdGUobGFiZWxzKTtcbiAgICAgICAgY29uc3QgcG9pbnREYXRhID0gdGhpcy5wb2ludERhdGEoKTtcblxuICAgICAgICBpZiAobGFiZWxUZW1wbGF0ZSkge1xuICAgICAgICAgICAgbGFiZWxUZXh0ID0gbGFiZWxUZW1wbGF0ZShwb2ludERhdGEpO1xuICAgICAgICB9IGVsc2UgaWYgKGxhYmVscy5mb3JtYXQpIHtcbiAgICAgICAgICAgIGxhYmVsVGV4dCA9IGNoYXJ0U2VydmljZS5mb3JtYXQuYXV0byhsYWJlbHMuZm9ybWF0LCBsYWJlbFRleHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxhYmVscy52aXNpYmxlICYmIChsYWJlbFRleHQgfHwgbGFiZWxUZXh0ID09PSAwKSkge1xuICAgICAgICAgICAgaWYgKGxhYmVscy5wb3NpdGlvbiA9PT0gQ0VOVEVSIHx8IGxhYmVscy5wb3NpdGlvbiA9PT0gSU5TSURFX0VORCkge1xuICAgICAgICAgICAgICAgIGlmICghbGFiZWxzLmNvbG9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJyaWdodG5lc3NWYWx1ZSA9IG5ldyBDb2xvcih0aGlzLm9wdGlvbnMuY29sb3IpLnBlcmNCcmlnaHRuZXNzKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChicmlnaHRuZXNzVmFsdWUgPiAxODApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVscy5jb2xvciA9IEJMQUNLO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWxzLmNvbG9yID0gV0hJVEU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFsYWJlbHMuYmFja2dyb3VuZCkge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbHMuYmFja2dyb3VuZCA9IHRoaXMub3B0aW9ucy5jb2xvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRoZW1lTGFiZWxzID0gY2hhcnRTZXJ2aWNlLnRoZW1lLnNlcmllc0RlZmF1bHRzLmxhYmVscztcbiAgICAgICAgICAgICAgICBsYWJlbHMuY29sb3IgPSBsYWJlbHMuY29sb3IgfHwgdGhlbWVMYWJlbHMuY29sb3I7XG4gICAgICAgICAgICAgICAgbGFiZWxzLmJhY2tncm91bmQgPSBsYWJlbHMuYmFja2dyb3VuZCB8fCB0aGVtZUxhYmVscy5iYWNrZ3JvdW5kO1xuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIHRoaXMubGFiZWwgPSBuZXcgVGV4dEJveChsYWJlbFRleHQsIGRlZXBFeHRlbmQoe30sIGxhYmVscywge1xuICAgICAgICAgICAgICAgIGFsaWduOiBDRU5URVIsXG4gICAgICAgICAgICAgICAgdkFsaWduOiBcIlwiLFxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBGQURFSU4sXG4gICAgICAgICAgICAgICAgICAgIGRlbGF5OiB0aGlzLmFuaW1hdGlvbkRlbGF5XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksIHBvaW50RGF0YSk7XG5cbiAgICAgICAgICAgIHRoaXMuYXBwZW5kKHRoaXMubGFiZWwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVmbG93KHRhcmdldEJveCkge1xuICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgICB0aGlzLmJveCA9IHRhcmdldEJveDtcbiAgICAgICAgdGhpcy5yZWZsb3dMYWJlbCgpO1xuICAgIH1cblxuICAgIHJlZmxvd0xhYmVsKCkge1xuICAgICAgICBjb25zdCB7IG9wdGlvbnM6IHsgbGFiZWxzOiBsYWJlbHNPcHRpb25zIH0sIGxhYmVsIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBzZWN0b3IgPSB0aGlzLnNlY3Rvci5jbG9uZSgpO1xuICAgICAgICBjb25zdCBsYWJlbHNEaXN0YW5jZSA9IGxhYmVsc09wdGlvbnMuZGlzdGFuY2U7XG4gICAgICAgIGNvbnN0IGFuZ2xlID0gc2VjdG9yLm1pZGRsZSgpO1xuXG4gICAgICAgIGlmIChsYWJlbCkge1xuICAgICAgICAgICAgY29uc3QgbGFiZWxIZWlnaHQgPSBsYWJlbC5ib3guaGVpZ2h0KCk7XG4gICAgICAgICAgICBjb25zdCBsYWJlbFdpZHRoID0gbGFiZWwuYm94LndpZHRoKCk7XG4gICAgICAgICAgICBsZXQgbHA7XG5cbiAgICAgICAgICAgIGlmIChsYWJlbHNPcHRpb25zLnBvc2l0aW9uID09PSBDRU5URVIpIHtcbiAgICAgICAgICAgICAgICBzZWN0b3IucmFkaXVzID0gTWF0aC5hYnMoKHNlY3Rvci5yYWRpdXMgLSBsYWJlbEhlaWdodCkgLyAyKSArIGxhYmVsSGVpZ2h0O1xuICAgICAgICAgICAgICAgIGxwID0gc2VjdG9yLnBvaW50KGFuZ2xlKTtcbiAgICAgICAgICAgICAgICBsYWJlbC5yZWZsb3cobmV3IEJveChscC54LCBscC55IC0gbGFiZWxIZWlnaHQgLyAyLCBscC54LCBscC55KSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGxhYmVsc09wdGlvbnMucG9zaXRpb24gPT09IElOU0lERV9FTkQpIHtcbiAgICAgICAgICAgICAgICBzZWN0b3IucmFkaXVzID0gc2VjdG9yLnJhZGl1cyAtIGxhYmVsSGVpZ2h0IC8gMjtcbiAgICAgICAgICAgICAgICBscCA9IHNlY3Rvci5wb2ludChhbmdsZSk7XG4gICAgICAgICAgICAgICAgbGFiZWwucmVmbG93KG5ldyBCb3gobHAueCwgbHAueSAtIGxhYmVsSGVpZ2h0IC8gMiwgbHAueCwgbHAueSkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsZXQgeDE7XG4gICAgICAgICAgICAgICAgbHAgPSBzZWN0b3IuY2xvbmUoKS5leHBhbmQobGFiZWxzRGlzdGFuY2UpLnBvaW50KGFuZ2xlKTtcbiAgICAgICAgICAgICAgICBpZiAobHAueCA+PSBzZWN0b3IuY2VudGVyLngpIHtcbiAgICAgICAgICAgICAgICAgICAgeDEgPSBscC54ICsgbGFiZWxXaWR0aDtcbiAgICAgICAgICAgICAgICAgICAgbGFiZWwub3JpZW50YXRpb24gPSBSSUdIVDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB4MSA9IGxwLnggLSBsYWJlbFdpZHRoO1xuICAgICAgICAgICAgICAgICAgICBsYWJlbC5vcmllbnRhdGlvbiA9IExFRlQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxhYmVsLnJlZmxvdyhuZXcgQm94KHgxLCBscC55IC0gbGFiZWxIZWlnaHQsIGxwLngsIGxwLnkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNyZWF0ZVZpc3VhbCgpIHtcbiAgICAgICAgY29uc3QgeyBzZWN0b3IsIG9wdGlvbnMgfSA9IHRoaXM7XG5cbiAgICAgICAgc3VwZXIuY3JlYXRlVmlzdWFsKCk7XG5cbiAgICAgICAgaWYgKHRoaXMudmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnZpc3VhbCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXJ0QW5nbGUgPSAoc2VjdG9yLnN0YXJ0QW5nbGUgKyAxODApICUgMzYwO1xuICAgICAgICAgICAgICAgIGNvbnN0IHZpc3VhbCA9IG9wdGlvbnMudmlzdWFsKHtcbiAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnk6IHRoaXMuY2F0ZWdvcnksXG4gICAgICAgICAgICAgICAgICAgIGRhdGFJdGVtOiB0aGlzLmRhdGFJdGVtLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy52YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgc2VyaWVzOiB0aGlzLnNlcmllcyxcbiAgICAgICAgICAgICAgICAgICAgcGVyY2VudGFnZTogdGhpcy5wZXJjZW50YWdlLFxuICAgICAgICAgICAgICAgICAgICBjZW50ZXI6IG5ldyBnZW9tLlBvaW50KHNlY3Rvci5jZW50ZXIueCwgc2VjdG9yLmNlbnRlci55KSxcbiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiBzZWN0b3IucmFkaXVzLFxuICAgICAgICAgICAgICAgICAgICBpbm5lclJhZGl1czogc2VjdG9yLmlubmVyUmFkaXVzLFxuICAgICAgICAgICAgICAgICAgICBzdGFydEFuZ2xlOiBzdGFydEFuZ2xlLFxuICAgICAgICAgICAgICAgICAgICBlbmRBbmdsZTogc3RhcnRBbmdsZSArIHNlY3Rvci5hbmdsZSxcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogb3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgc2VuZGVyOiB0aGlzLmdldFNlbmRlcigpLFxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVWaXN1YWw6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VwID0gbmV3IGRyYXcuR3JvdXAoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlU2VnbWVudFZpc3VhbChncm91cCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBncm91cDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKHZpc3VhbCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpc3VhbC5hcHBlbmQodmlzdWFsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlU2VnbWVudFZpc3VhbCh0aGlzLnZpc3VhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjcmVhdGVTZWdtZW50VmlzdWFsKGdyb3VwKSB7XG4gICAgICAgIGNvbnN0IHsgc2VjdG9yLCBvcHRpb25zIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBib3JkZXJPcHRpb25zID0gb3B0aW9ucy5ib3JkZXIgfHwge307XG4gICAgICAgIGNvbnN0IGJvcmRlciA9IGJvcmRlck9wdGlvbnMud2lkdGggPiAwID8ge1xuICAgICAgICAgICAgc3Ryb2tlOiB7XG4gICAgICAgICAgICAgICAgY29sb3I6IGJvcmRlck9wdGlvbnMuY29sb3IsXG4gICAgICAgICAgICAgICAgd2lkdGg6IGJvcmRlck9wdGlvbnMud2lkdGgsXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogYm9yZGVyT3B0aW9ucy5vcGFjaXR5LFxuICAgICAgICAgICAgICAgIGRhc2hUeXBlOiBib3JkZXJPcHRpb25zLmRhc2hUeXBlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gOiB7fTtcbiAgICAgICAgY29uc3QgY29sb3IgPSBvcHRpb25zLmNvbG9yO1xuICAgICAgICBjb25zdCBmaWxsID0ge1xuICAgICAgICAgICAgY29sb3I6IGNvbG9yLFxuICAgICAgICAgICAgb3BhY2l0eTogb3B0aW9ucy5vcGFjaXR5XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHZpc3VhbCA9IHRoaXMuY3JlYXRlU2VnbWVudChzZWN0b3IsIGRlZXBFeHRlbmQoe1xuICAgICAgICAgICAgZmlsbDogZmlsbCxcbiAgICAgICAgICAgIHN0cm9rZToge1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IG9wdGlvbnMub3BhY2l0eVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHpJbmRleDogb3B0aW9ucy56SW5kZXhcbiAgICAgICAgfSwgYm9yZGVyKSk7XG5cbiAgICAgICAgZ3JvdXAuYXBwZW5kKHZpc3VhbCk7XG5cbiAgICAgICAgaWYgKGhhc0dyYWRpZW50T3ZlcmxheShvcHRpb25zKSkge1xuICAgICAgICAgICAgZ3JvdXAuYXBwZW5kKHRoaXMuY3JlYXRlR3JhZGllbnRPdmVybGF5KHZpc3VhbCwge1xuICAgICAgICAgICAgICAgIGJhc2VDb2xvcjogY29sb3IsXG4gICAgICAgICAgICAgICAgZmFsbGJhY2tGaWxsOiBmaWxsXG4gICAgICAgICAgICB9LCBkZWVwRXh0ZW5kKHtcbiAgICAgICAgICAgICAgICBjZW50ZXI6IFsgc2VjdG9yLmNlbnRlci54LCBzZWN0b3IuY2VudGVyLnkgXSxcbiAgICAgICAgICAgICAgICBpbm5lclJhZGl1czogc2VjdG9yLmlubmVyUmFkaXVzLFxuICAgICAgICAgICAgICAgIHJhZGl1czogc2VjdG9yLnJhZGl1cyxcbiAgICAgICAgICAgICAgICB1c2VyU3BhY2U6IHRydWVcbiAgICAgICAgICAgIH0sIG9wdGlvbnMub3ZlcmxheSkpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNyZWF0ZVNlZ21lbnQoc2VjdG9yLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zLnNpbmdsZVNlZ21lbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgZHJhdy5DaXJjbGUobmV3IGdlb20uQ2lyY2xlKG5ldyBnZW9tLlBvaW50KHNlY3Rvci5jZW50ZXIueCwgc2VjdG9yLmNlbnRlci55KSwgc2VjdG9yLnJhZGl1cyksIG9wdGlvbnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFNoYXBlQnVpbGRlci5jdXJyZW50LmNyZWF0ZVJpbmcoc2VjdG9yLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBjcmVhdGVBbmltYXRpb24oKSB7XG4gICAgICAgIGNvbnN0IHsgb3B0aW9ucywgc2VjdG9yOiB7IGNlbnRlciB9IH0gPSB0aGlzO1xuXG4gICAgICAgIGRlZXBFeHRlbmQob3B0aW9ucywge1xuICAgICAgICAgICAgYW5pbWF0aW9uOiB7XG4gICAgICAgICAgICAgICAgY2VudGVyOiBbIGNlbnRlci54LCBjZW50ZXIueSBdLFxuICAgICAgICAgICAgICAgIGRlbGF5OiB0aGlzLmFuaW1hdGlvbkRlbGF5XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHN1cGVyLmNyZWF0ZUFuaW1hdGlvbigpO1xuICAgIH1cblxuICAgIGNyZWF0ZUhpZ2hsaWdodChvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGhpZ2hsaWdodCA9IHRoaXMub3B0aW9ucy5oaWdobGlnaHQgfHwge307XG4gICAgICAgIGNvbnN0IGJvcmRlciA9IGhpZ2hsaWdodC5ib3JkZXIgfHwge307XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlU2VnbWVudCh0aGlzLnNlY3RvciwgZGVlcEV4dGVuZCh7fSwgb3B0aW9ucywge1xuICAgICAgICAgICAgZmlsbDoge1xuICAgICAgICAgICAgICAgIGNvbG9yOiBoaWdobGlnaHQuY29sb3IsXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogaGlnaGxpZ2h0Lm9wYWNpdHlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdHJva2U6IHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiBib3JkZXIub3BhY2l0eSxcbiAgICAgICAgICAgICAgICB3aWR0aDogYm9yZGVyLndpZHRoLFxuICAgICAgICAgICAgICAgIGNvbG9yOiBib3JkZXIuY29sb3JcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgIH1cblxuICAgIGhpZ2hsaWdodFZpc3VhbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlzdWFsLmNoaWxkcmVuWzBdO1xuICAgIH1cblxuICAgIGhpZ2hsaWdodFZpc3VhbEFyZ3MoKSB7XG4gICAgICAgIGNvbnN0IHNlY3RvciA9IHRoaXMuc2VjdG9yO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBvcHRpb25zOiB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgICByYWRpdXM6IHNlY3Rvci5yYWRpdXMsXG4gICAgICAgICAgICBpbm5lclJhZGl1czogc2VjdG9yLmlubmVyUmFkaXVzLFxuICAgICAgICAgICAgY2VudGVyOiBuZXcgZ2VvbS5Qb2ludChzZWN0b3IuY2VudGVyLngsIHNlY3Rvci5jZW50ZXIueSksXG4gICAgICAgICAgICBzdGFydEFuZ2xlOiBzZWN0b3Iuc3RhcnRBbmdsZSxcbiAgICAgICAgICAgIGVuZEFuZ2xlOiBzZWN0b3IuYW5nbGUgKyBzZWN0b3Iuc3RhcnRBbmdsZSxcbiAgICAgICAgICAgIHZpc3VhbDogdGhpcy52aXN1YWxcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB0b29sdGlwQW5jaG9yKCkge1xuICAgICAgICBjb25zdCBzZWN0b3IgPSB0aGlzLnNlY3Rvci5jbG9uZSgpLmV4cGFuZChUT09MVElQX09GRlNFVCk7XG4gICAgICAgIGNvbnN0IG1pZEFuZGxlID0gc2VjdG9yLm1pZGRsZSgpO1xuICAgICAgICBjb25zdCBtaWRQb2ludCA9IHNlY3Rvci5wb2ludChtaWRBbmRsZSk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHBvaW50OiBtaWRQb2ludCxcbiAgICAgICAgICAgIGFsaWduOiB0b29sdGlwQWxpZ25tZW50KG1pZEFuZGxlICsgMTgwKVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZvcm1hdFZhbHVlKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5vd25lci5mb3JtYXRQb2ludFZhbHVlKHRoaXMsIGZvcm1hdCk7XG4gICAgfVxuXG4gICAgcG9pbnREYXRhKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGF0YUl0ZW06IHRoaXMuZGF0YUl0ZW0sXG4gICAgICAgICAgICBjYXRlZ29yeTogdGhpcy5jYXRlZ29yeSxcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLnZhbHVlLFxuICAgICAgICAgICAgc2VyaWVzOiB0aGlzLnNlcmllcyxcbiAgICAgICAgICAgIHBlcmNlbnRhZ2U6IHRoaXMucGVyY2VudGFnZVxuICAgICAgICB9O1xuICAgIH1cbn1cblxuY29uc3QgUkFEXzMwID0gcm91bmQocmFkKDMwKSwgREVGQVVMVF9QUkVDSVNJT04pO1xuY29uc3QgUkFEXzYwID0gcm91bmQocmFkKDYwKSwgREVGQVVMVF9QUkVDSVNJT04pO1xuXG5mdW5jdGlvbiB0b29sdGlwQWxpZ25tZW50KGFuZ2xlKSB7XG4gICAgY29uc3QgcmFkaWFucyA9IHJhZChhbmdsZSk7XG4gICAgY29uc3Qgc2luZSA9IHJvdW5kKE1hdGguc2luKHJhZGlhbnMpLCBERUZBVUxUX1BSRUNJU0lPTik7XG4gICAgY29uc3QgY29zaW5lID0gcm91bmQoTWF0aC5jb3MocmFkaWFucyksIERFRkFVTFRfUFJFQ0lTSU9OKTtcblxuXG4gICAgbGV0IGhvcml6b250YWw7XG4gICAgaWYgKE1hdGguYWJzKHNpbmUpID4gUkFEXzYwKSB7XG4gICAgICAgIGhvcml6b250YWwgPSBDRU5URVI7XG4gICAgfSBlbHNlIGlmIChjb3NpbmUgPCAwKSB7XG4gICAgICAgIGhvcml6b250YWwgPSBSSUdIVDtcbiAgICB9IGVsc2Uge1xuICAgICAgICBob3Jpem9udGFsID0gTEVGVDtcbiAgICB9XG5cbiAgICBsZXQgdmVydGljYWw7XG4gICAgaWYgKE1hdGguYWJzKHNpbmUpIDwgUkFEXzMwKSB7XG4gICAgICAgIHZlcnRpY2FsID0gQ0VOVEVSO1xuICAgIH0gZWxzZSBpZiAoc2luZSA8IDApIHtcbiAgICAgICAgdmVydGljYWwgPSBCT1RUT007XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmVydGljYWwgPSBUT1A7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgaG9yaXpvbnRhbDogaG9yaXpvbnRhbCxcbiAgICAgICAgdmVydGljYWw6IHZlcnRpY2FsXG4gICAgfTtcbn1cblxuc2V0RGVmYXVsdE9wdGlvbnMoUGllU2VnbWVudCwge1xuICAgIGNvbG9yOiBXSElURSxcbiAgICBvdmVybGF5OiB7XG4gICAgICAgIGdyYWRpZW50OiBcInJvdW5kZWRCZXZlbFwiXG4gICAgfSxcbiAgICBib3JkZXI6IHtcbiAgICAgICAgd2lkdGg6IDAuNVxuICAgIH0sXG4gICAgbGFiZWxzOiB7XG4gICAgICAgIHZpc2libGU6IGZhbHNlLFxuICAgICAgICBkaXN0YW5jZTogMzUsXG4gICAgICAgIGZvbnQ6IERFRkFVTFRfRk9OVCxcbiAgICAgICAgbWFyZ2luOiBnZXRTcGFjaW5nKDAuNSksXG4gICAgICAgIGFsaWduOiBDSVJDTEUsXG4gICAgICAgIHpJbmRleDogMSxcbiAgICAgICAgcG9zaXRpb246IE9VVFNJREVfRU5EXG4gICAgfSxcbiAgICBhbmltYXRpb246IHtcbiAgICAgICAgdHlwZTogUElFXG4gICAgfSxcbiAgICBoaWdobGlnaHQ6IHtcbiAgICAgICAgdmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgYm9yZGVyOiB7XG4gICAgICAgICAgICB3aWR0aDogMVxuICAgICAgICB9XG4gICAgfSxcbiAgICB2aXNpYmxlOiB0cnVlXG59KTtcblxuZGVlcEV4dGVuZChQaWVTZWdtZW50LnByb3RvdHlwZSwgUG9pbnRFdmVudHNNaXhpbik7XG5cbmV4cG9ydCBkZWZhdWx0IFBpZVNlZ21lbnQ7IiwiaW1wb3J0IHsgZ2V0VGVtcGxhdGUgfSBmcm9tICcuLi8uLi9jb21tb24nO1xuaW1wb3J0IHsgaGFzVmFsdWUgfSBmcm9tICcuLi91dGlscyc7XG5cbmNvbnN0IFBpZUNoYXJ0TWl4aW4gPSB7XG4gICAgY3JlYXRlTGVnZW5kSXRlbTogZnVuY3Rpb24odmFsdWUsIHBvaW50LCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGxlZ2VuZE9wdGlvbnMgPSB0aGlzLm9wdGlvbnMubGVnZW5kIHx8IHt9O1xuICAgICAgICBjb25zdCBsYWJlbHNPcHRpb25zID0gbGVnZW5kT3B0aW9ucy5sYWJlbHMgfHwge307XG4gICAgICAgIGNvbnN0IGluYWN0aXZlSXRlbXMgPSBsZWdlbmRPcHRpb25zLmluYWN0aXZlSXRlbXMgfHwge307XG4gICAgICAgIGNvbnN0IGluYWN0aXZlSXRlbXNMYWJlbHMgPSBpbmFjdGl2ZUl0ZW1zLmxhYmVscyB8fCB7fTtcblxuICAgICAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnZpc2libGVJbkxlZ2VuZCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGNvbnN0IHBvaW50VmlzaWJsZSA9IG9wdGlvbnMudmlzaWJsZSAhPT0gZmFsc2U7XG4gICAgICAgICAgICBjb25zdCBsYWJlbFRlbXBsYXRlID0gcG9pbnRWaXNpYmxlID8gZ2V0VGVtcGxhdGUobGFiZWxzT3B0aW9ucykgOlxuICAgICAgICAgICAgICAgIGdldFRlbXBsYXRlKGluYWN0aXZlSXRlbXNMYWJlbHMpIHx8IGdldFRlbXBsYXRlKGxhYmVsc09wdGlvbnMpO1xuICAgICAgICAgICAgbGV0IHRleHQgPSBvcHRpb25zLmNhdGVnb3J5O1xuXG4gICAgICAgICAgICBpZiAobGFiZWxUZW1wbGF0ZSkge1xuICAgICAgICAgICAgICAgIHRleHQgPSBsYWJlbFRlbXBsYXRlKHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogdGV4dCxcbiAgICAgICAgICAgICAgICAgICAgc2VyaWVzOiBvcHRpb25zLnNlcmllcyxcbiAgICAgICAgICAgICAgICAgICAgZGF0YUl0ZW06IG9wdGlvbnMuZGF0YUl0ZW0sXG4gICAgICAgICAgICAgICAgICAgIHBlcmNlbnRhZ2U6IG9wdGlvbnMucGVyY2VudGFnZSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBpdGVtTGFiZWxPcHRpb25zLCBtYXJrZXJDb2xvcjtcbiAgICAgICAgICAgIGlmIChwb2ludFZpc2libGUpIHtcbiAgICAgICAgICAgICAgICBpdGVtTGFiZWxPcHRpb25zID0ge307XG4gICAgICAgICAgICAgICAgbWFya2VyQ29sb3IgPSBwb2ludC5jb2xvcjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaXRlbUxhYmVsT3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6IGluYWN0aXZlSXRlbXNMYWJlbHMuY29sb3IsXG4gICAgICAgICAgICAgICAgICAgIGZvbnQ6IGluYWN0aXZlSXRlbXNMYWJlbHMuZm9udFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgbWFya2VyQ29sb3IgPSAoaW5hY3RpdmVJdGVtcy5tYXJrZXJzIHx8IHt9KS5jb2xvcjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGhhc1ZhbHVlKHRleHQpICYmIHRleHQgIT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxlZ2VuZEl0ZW1zLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBhY3RpdmU6IHBvaW50VmlzaWJsZSxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRJbmRleDogb3B0aW9ucy5pbmRleCxcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogdGV4dCxcbiAgICAgICAgICAgICAgICAgICAgc2VyaWVzOiBvcHRpb25zLnNlcmllcyxcbiAgICAgICAgICAgICAgICAgICAgbWFya2VyQ29sb3I6IG1hcmtlckNvbG9yLFxuICAgICAgICAgICAgICAgICAgICBsYWJlbHM6IGl0ZW1MYWJlbE9wdGlvbnNcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IFBpZUNoYXJ0TWl4aW47IiwiaW1wb3J0IHsgZHJhd2luZyBhcyBkcmF3LCBnZW9tZXRyeSB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1kcmF3aW5nJztcblxuaW1wb3J0IFBpZVNlZ21lbnQgZnJvbSAnLi9waWUtc2VnbWVudCc7XG5pbXBvcnQgUGllQ2hhcnRNaXhpbiBmcm9tICcuLi9taXhpbnMvcGllLWNoYXJ0LW1peGluJztcbmltcG9ydCB7IENoYXJ0RWxlbWVudCwgUmluZywgQm94LCBQb2ludCB9IGZyb20gJy4uLy4uL2NvcmUnO1xuXG5pbXBvcnQgeyBPVVRTSURFX0VORCwgRkFERUlOLCBDT0xVTU4gfSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgYmluZFNlZ21lbnRzLCBldmFsT3B0aW9ucyB9IGZyb20gJy4uL3V0aWxzJztcblxuaW1wb3J0IHsgQ0lSQ0xFLCBSSUdIVCwgQ0VOVEVSIH0gZnJvbSAnLi4vLi4vY29tbW9uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBkZWVwRXh0ZW5kLCBkZWZpbmVkLCBmaW5kLCBpc0Z1bmN0aW9uLCBsYXN0LCByb3VuZCwgc2V0RGVmYXVsdE9wdGlvbnMsIHZhbHVlT3JEZWZhdWx0IH0gZnJvbSAnLi4vLi4vY29tbW9uJztcblxuY29uc3QgUElFX1NFQ1RPUl9BTklNX0RFTEFZID0gNzA7XG5cbmNsYXNzIFBpZUNoYXJ0IGV4dGVuZHMgQ2hhcnRFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcihwbG90QXJlYSwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcblxuICAgICAgICB0aGlzLnBsb3RBcmVhID0gcGxvdEFyZWE7XG4gICAgICAgIHRoaXMuY2hhcnRTZXJ2aWNlID0gcGxvdEFyZWEuY2hhcnRTZXJ2aWNlO1xuICAgICAgICB0aGlzLnBvaW50cyA9IFtdO1xuICAgICAgICB0aGlzLmxlZ2VuZEl0ZW1zID0gW107XG4gICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICB0aGlzLnRyYXZlcnNlRGF0YVBvaW50cyh0aGlzLmFkZFZhbHVlLmJpbmQodGhpcykpO1xuICAgIH1cblxuICAgIHRyYXZlcnNlRGF0YVBvaW50cyhjYWxsYmFjaykge1xuICAgICAgICBjb25zdCB7IG9wdGlvbnMsIHBsb3RBcmVhOiB7IG9wdGlvbnM6IHsgc2VyaWVzQ29sb3JzID0gW10gfSB9IH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBjb2xvcnNDb3VudCA9IHNlcmllc0NvbG9ycy5sZW5ndGg7XG4gICAgICAgIGNvbnN0IHNlcmllcyA9IG9wdGlvbnMuc2VyaWVzO1xuICAgICAgICBjb25zdCBzZXJpZXNDb3VudCA9IHNlcmllcy5sZW5ndGg7XG5cbiAgICAgICAgZm9yIChsZXQgc2VyaWVzSXggPSAwOyBzZXJpZXNJeCA8IHNlcmllc0NvdW50OyBzZXJpZXNJeCsrKSB7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50U2VyaWVzID0gc2VyaWVzW3Nlcmllc0l4XTtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBjdXJyZW50U2VyaWVzLmRhdGE7XG4gICAgICAgICAgICBjb25zdCB7IHRvdGFsLCBwb2ludHMsIGNvdW50IH0gPSBiaW5kU2VnbWVudHMoY3VycmVudFNlcmllcyk7XG4gICAgICAgICAgICBjb25zdCBhbmdsZVBlclZhbHVlID0gMzYwIC8gdG90YWw7XG4gICAgICAgICAgICBsZXQgY29uc3RhbnRBbmdsZTtcbiAgICAgICAgICAgIGlmICghaXNGaW5pdGUoYW5nbGVQZXJWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdGFudEFuZ2xlID0gMzYwIC8gY291bnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgY3VycmVudEFuZ2xlO1xuXG4gICAgICAgICAgICBpZiAoZGVmaW5lZChjdXJyZW50U2VyaWVzLnN0YXJ0QW5nbGUpKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudEFuZ2xlID0gY3VycmVudFNlcmllcy5zdGFydEFuZ2xlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50QW5nbGUgPSBvcHRpb25zLnN0YXJ0QW5nbGU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzZXJpZXNJeCAhPT0gc2VyaWVzQ291bnQgLSAxKSB7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRTZXJpZXMubGFiZWxzLnBvc2l0aW9uID09PSBPVVRTSURFX0VORCkge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50U2VyaWVzLmxhYmVscy5wb3NpdGlvbiA9IENFTlRFUjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcG9pbnREYXRhID0gcG9pbnRzW2ldO1xuICAgICAgICAgICAgICAgIGlmICghcG9pbnREYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IHsgZmllbGRzLCB2YWx1ZSwgdmlzaWJsZSB9ID0gcG9pbnREYXRhO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFuZ2xlID0gdmFsdWUgIT09IDAgPyAoY29uc3RhbnRBbmdsZSB8fCAodmFsdWUgKiBhbmdsZVBlclZhbHVlKSkgOiAwO1xuICAgICAgICAgICAgICAgIGNvbnN0IGV4cGxvZGUgPSBkYXRhLmxlbmd0aCAhPT0gMSAmJiBCb29sZWFuKGZpZWxkcy5leHBsb2RlKTtcblxuICAgICAgICAgICAgICAgIGlmICghaXNGdW5jdGlvbihjdXJyZW50U2VyaWVzLmNvbG9yKSkge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50U2VyaWVzLmNvbG9yID0gZmllbGRzLmNvbG9yIHx8IHNlcmllc0NvbG9yc1tpICUgY29sb3JzQ291bnRdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHBvaW50RGF0YS52YWx1ZUZpZWxkcy52YWx1ZSwgbmV3IFJpbmcobnVsbCwgMCwgMCwgY3VycmVudEFuZ2xlLCBhbmdsZSksIHtcbiAgICAgICAgICAgICAgICAgICAgb3duZXI6IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBkZWZpbmVkKGZpZWxkcy5jYXRlZ29yeSkgPyBmaWVsZHMuY2F0ZWdvcnkgOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICBpbmRleDogaSxcbiAgICAgICAgICAgICAgICAgICAgc2VyaWVzOiBjdXJyZW50U2VyaWVzLFxuICAgICAgICAgICAgICAgICAgICBzZXJpZXNJeDogc2VyaWVzSXgsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFJdGVtOiBkYXRhW2ldLFxuICAgICAgICAgICAgICAgICAgICBwZXJjZW50YWdlOiB0b3RhbCAhPT0gMCA/IHZhbHVlIC8gdG90YWwgOiAwLFxuICAgICAgICAgICAgICAgICAgICBleHBsb2RlOiBleHBsb2RlLFxuICAgICAgICAgICAgICAgICAgICB2aXNpYmxlSW5MZWdlbmQ6IGZpZWxkcy52aXNpYmxlSW5MZWdlbmQsXG4gICAgICAgICAgICAgICAgICAgIHZpc2libGU6IHZpc2libGUsXG4gICAgICAgICAgICAgICAgICAgIHpJbmRleDogc2VyaWVzQ291bnQgLSBzZXJpZXNJeCxcbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uRGVsYXk6IHRoaXMuYW5pbWF0aW9uRGVsYXkoaSwgc2VyaWVzSXgsIHNlcmllc0NvdW50KVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKHZpc2libGUgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRBbmdsZSArPSBhbmdsZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBldmFsU2VnbWVudE9wdGlvbnMob3B0aW9ucywgdmFsdWUsIGZpZWxkcykge1xuICAgICAgICBjb25zdCBzZXJpZXMgPSBmaWVsZHMuc2VyaWVzO1xuXG4gICAgICAgIGV2YWxPcHRpb25zKG9wdGlvbnMsIHtcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgIHNlcmllczogc2VyaWVzLFxuICAgICAgICAgICAgZGF0YUl0ZW06IGZpZWxkcy5kYXRhSXRlbSxcbiAgICAgICAgICAgIGNhdGVnb3J5OiBmaWVsZHMuY2F0ZWdvcnksXG4gICAgICAgICAgICBwZXJjZW50YWdlOiBmaWVsZHMucGVyY2VudGFnZVxuICAgICAgICB9LCB7IGRlZmF1bHRzOiBzZXJpZXMuX2RlZmF1bHRzLCBleGNsdWRlZDogWyBcImRhdGFcIiwgXCJjb250ZW50XCIsIFwidGVtcGxhdGVcIiwgXCJ2aXN1YWxcIiwgXCJ0b2dnbGVcIiBdIH0pO1xuICAgIH1cblxuICAgIGFkZFZhbHVlKHZhbHVlLCBzZWN0b3IsIGZpZWxkcykge1xuICAgICAgICBjb25zdCBzZWdtZW50T3B0aW9ucyA9IGRlZXBFeHRlbmQoe30sIGZpZWxkcy5zZXJpZXMsIHsgaW5kZXg6IGZpZWxkcy5pbmRleCB9KTtcbiAgICAgICAgdGhpcy5ldmFsU2VnbWVudE9wdGlvbnMoc2VnbWVudE9wdGlvbnMsIHZhbHVlLCBmaWVsZHMpO1xuXG4gICAgICAgIHRoaXMuY3JlYXRlTGVnZW5kSXRlbSh2YWx1ZSwgc2VnbWVudE9wdGlvbnMsIGZpZWxkcyk7XG5cbiAgICAgICAgaWYgKGZpZWxkcy52aXNpYmxlID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc2VnbWVudCA9IG5ldyBQaWVTZWdtZW50KHZhbHVlLCBzZWN0b3IsIHNlZ21lbnRPcHRpb25zKTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihzZWdtZW50LCBmaWVsZHMpO1xuICAgICAgICB0aGlzLmFwcGVuZChzZWdtZW50KTtcbiAgICAgICAgdGhpcy5wb2ludHMucHVzaChzZWdtZW50KTtcbiAgICB9XG5cbiAgICByZWZsb3codGFyZ2V0Qm94KSB7XG4gICAgICAgIGNvbnN0IHsgb3B0aW9ucywgcG9pbnRzLCBzZXJpZXNDb25maWdzID0gW10gfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGNvdW50ID0gcG9pbnRzLmxlbmd0aDtcbiAgICAgICAgY29uc3QgYm94ID0gdGFyZ2V0Qm94LmNsb25lKCk7XG4gICAgICAgIGNvbnN0IHNwYWNlID0gNTtcbiAgICAgICAgY29uc3QgbWluV2lkdGggPSBNYXRoLm1pbihib3gud2lkdGgoKSwgYm94LmhlaWdodCgpKTtcbiAgICAgICAgY29uc3QgaGFsZk1pbldpZHRoID0gbWluV2lkdGggLyAyO1xuICAgICAgICBjb25zdCBkZWZhdWx0UGFkZGluZyA9IG1pbldpZHRoIC0gbWluV2lkdGggKiAwLjg1O1xuICAgICAgICBjb25zdCBuZXdCb3ggPSBuZXcgQm94KGJveC54MSwgYm94LnkxLCBib3gueDEgKyBtaW5XaWR0aCwgYm94LnkxICsgbWluV2lkdGgpO1xuICAgICAgICBjb25zdCBuZXdCb3hDZW50ZXIgPSBuZXdCb3guY2VudGVyKCk7XG4gICAgICAgIGNvbnN0IGJveENlbnRlciA9IGJveC5jZW50ZXIoKTtcbiAgICAgICAgY29uc3Qgc2VyaWVzQ291bnQgPSBvcHRpb25zLnNlcmllcy5sZW5ndGg7XG4gICAgICAgIGNvbnN0IGxlZnRTaWRlTGFiZWxzID0gW107XG4gICAgICAgIGNvbnN0IHJpZ2h0U2lkZUxhYmVscyA9IFtdO1xuICAgICAgICBsZXQgcGFkZGluZyA9IHZhbHVlT3JEZWZhdWx0KG9wdGlvbnMucGFkZGluZywgZGVmYXVsdFBhZGRpbmcpO1xuXG4gICAgICAgIHRoaXMudGFyZ2V0Qm94ID0gdGFyZ2V0Qm94O1xuXG4gICAgICAgIHBhZGRpbmcgPSBwYWRkaW5nID4gaGFsZk1pbldpZHRoIC0gc3BhY2UgPyBoYWxmTWluV2lkdGggLSBzcGFjZSA6IHBhZGRpbmc7XG4gICAgICAgIG5ld0JveC50cmFuc2xhdGUoYm94Q2VudGVyLnggLSBuZXdCb3hDZW50ZXIueCwgYm94Q2VudGVyLnkgLSBuZXdCb3hDZW50ZXIueSk7XG5cbiAgICAgICAgY29uc3QgcmFkaXVzID0gaGFsZk1pbldpZHRoIC0gcGFkZGluZztcbiAgICAgICAgY29uc3QgY2VudGVyID0gbmV3IFBvaW50KFxuICAgICAgICAgICAgcmFkaXVzICsgbmV3Qm94LngxICsgcGFkZGluZyxcbiAgICAgICAgICAgIHJhZGl1cyArIG5ld0JveC55MSArIHBhZGRpbmdcbiAgICAgICAgKTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHNlZ21lbnQgPSBwb2ludHNbaV07XG4gICAgICAgICAgICBjb25zdCBzZWN0b3IgPSBzZWdtZW50LnNlY3RvcjtcbiAgICAgICAgICAgIGNvbnN0IHNlcmllc0luZGV4ID0gc2VnbWVudC5zZXJpZXNJeDtcbiAgICAgICAgICAgIHNlY3Rvci5yYWRpdXMgPSByYWRpdXM7XG4gICAgICAgICAgICBzZWN0b3IuY2VudGVyID0gY2VudGVyO1xuXG4gICAgICAgICAgICBpZiAoc2VyaWVzQ29uZmlncy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzZXJpZXNDb25maWcgPSBzZXJpZXNDb25maWdzW3Nlcmllc0luZGV4XTtcbiAgICAgICAgICAgICAgICBzZWN0b3IuaW5uZXJSYWRpdXMgPSBzZXJpZXNDb25maWcuaW5uZXJSYWRpdXM7XG4gICAgICAgICAgICAgICAgc2VjdG9yLnJhZGl1cyA9IHNlcmllc0NvbmZpZy5yYWRpdXM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzZXJpZXNJbmRleCA9PT0gc2VyaWVzQ291bnQgLSAxICYmIHNlZ21lbnQuZXhwbG9kZSkge1xuICAgICAgICAgICAgICAgIHNlY3Rvci5jZW50ZXIgPSBzZWN0b3IuY2xvbmUoKS5zZXRSYWRpdXMoc2VjdG9yLnJhZGl1cyAqIDAuMTUpLnBvaW50KHNlY3Rvci5taWRkbGUoKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNlZ21lbnQucmVmbG93KG5ld0JveCk7XG5cbiAgICAgICAgICAgIGNvbnN0IGxhYmVsID0gc2VnbWVudC5sYWJlbDtcbiAgICAgICAgICAgIGlmIChsYWJlbCkge1xuICAgICAgICAgICAgICAgIGlmIChsYWJlbC5vcHRpb25zLnBvc2l0aW9uID09PSBPVVRTSURFX0VORCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VyaWVzSW5kZXggPT09IHNlcmllc0NvdW50IC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxhYmVsLm9yaWVudGF0aW9uID09PSBSSUdIVCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0U2lkZUxhYmVscy5wdXNoKGxhYmVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdFNpZGVMYWJlbHMucHVzaChsYWJlbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGVmdFNpZGVMYWJlbHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgbGVmdFNpZGVMYWJlbHMuc29ydCh0aGlzLmxhYmVsQ29tcGFyYXRvcih0cnVlKSk7XG4gICAgICAgICAgICB0aGlzLmxlZnRMYWJlbHNSZWZsb3cobGVmdFNpZGVMYWJlbHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJpZ2h0U2lkZUxhYmVscy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByaWdodFNpZGVMYWJlbHMuc29ydCh0aGlzLmxhYmVsQ29tcGFyYXRvcihmYWxzZSkpO1xuICAgICAgICAgICAgdGhpcy5yaWdodExhYmVsc1JlZmxvdyhyaWdodFNpZGVMYWJlbHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5ib3ggPSBuZXdCb3g7XG4gICAgfVxuXG4gICAgbGVmdExhYmVsc1JlZmxvdyhsYWJlbHMpIHtcbiAgICAgICAgY29uc3QgZGlzdGFuY2VzID0gdGhpcy5kaXN0YW5jZUJldHdlZW5MYWJlbHMobGFiZWxzKTtcblxuICAgICAgICB0aGlzLmRpc3RyaWJ1dGVMYWJlbHMoZGlzdGFuY2VzLCBsYWJlbHMpO1xuICAgIH1cblxuICAgIHJpZ2h0TGFiZWxzUmVmbG93KGxhYmVscykge1xuICAgICAgICBjb25zdCBkaXN0YW5jZXMgPSB0aGlzLmRpc3RhbmNlQmV0d2VlbkxhYmVscyhsYWJlbHMpO1xuXG4gICAgICAgIHRoaXMuZGlzdHJpYnV0ZUxhYmVscyhkaXN0YW5jZXMsIGxhYmVscyk7XG4gICAgfVxuXG4gICAgZGlzdGFuY2VCZXR3ZWVuTGFiZWxzKGxhYmVscykge1xuICAgICAgICBjb25zdCBzZWdtZW50ID0gbGFzdCh0aGlzLnBvaW50cyk7XG4gICAgICAgIGNvbnN0IHNlY3RvciA9IHNlZ21lbnQuc2VjdG9yO1xuICAgICAgICBjb25zdCBjb3VudCA9IGxhYmVscy5sZW5ndGggLSAxO1xuICAgICAgICBjb25zdCBsciA9IHNlY3Rvci5yYWRpdXMgKyBzZWdtZW50Lm9wdGlvbnMubGFiZWxzLmRpc3RhbmNlO1xuICAgICAgICBjb25zdCBkaXN0YW5jZXMgPSBbXTtcbiAgICAgICAgbGV0IGZpcnN0Qm94ID0gbGFiZWxzWzBdLmJveDtcbiAgICAgICAgbGV0IGRpc3RhbmNlID0gcm91bmQoZmlyc3RCb3gueTEgLSAoc2VjdG9yLmNlbnRlci55IC0gbHIgLSBmaXJzdEJveC5oZWlnaHQoKSAtIGZpcnN0Qm94LmhlaWdodCgpIC8gMikpO1xuXG4gICAgICAgIGRpc3RhbmNlcy5wdXNoKGRpc3RhbmNlKTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHNlY29uZEJveCA9IGxhYmVsc1tpICsgMV0uYm94O1xuXG4gICAgICAgICAgICBmaXJzdEJveCA9IGxhYmVsc1tpXS5ib3g7XG4gICAgICAgICAgICBkaXN0YW5jZSA9IHJvdW5kKHNlY29uZEJveC55MSAtIGZpcnN0Qm94LnkyKTtcbiAgICAgICAgICAgIGRpc3RhbmNlcy5wdXNoKGRpc3RhbmNlKTtcbiAgICAgICAgfVxuICAgICAgICBkaXN0YW5jZSA9IHJvdW5kKHNlY3Rvci5jZW50ZXIueSArIGxyIC0gbGFiZWxzW2NvdW50XS5ib3gueTIgLSBsYWJlbHNbY291bnRdLmJveC5oZWlnaHQoKSAvIDIpO1xuICAgICAgICBkaXN0YW5jZXMucHVzaChkaXN0YW5jZSk7XG5cbiAgICAgICAgcmV0dXJuIGRpc3RhbmNlcztcbiAgICB9XG5cbiAgICBkaXN0cmlidXRlTGFiZWxzKGRpc3RhbmNlcywgbGFiZWxzKSB7XG4gICAgICAgIGNvbnN0IGNvdW50ID0gZGlzdGFuY2VzLmxlbmd0aDtcbiAgICAgICAgbGV0IGxlZnQsIHJpZ2h0LCByZW1haW5pbmc7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgICAgICByZW1haW5pbmcgPSAtZGlzdGFuY2VzW2ldO1xuICAgICAgICAgICAgbGVmdCA9IHJpZ2h0ID0gaTtcblxuICAgICAgICAgICAgd2hpbGUgKHJlbWFpbmluZyA+IDAgJiYgKGxlZnQgPj0gMCB8fCByaWdodCA8IGNvdW50KSkge1xuICAgICAgICAgICAgICAgIHJlbWFpbmluZyA9IHRoaXMuX3Rha2VEaXN0YW5jZShkaXN0YW5jZXMsIGksIC0tbGVmdCwgcmVtYWluaW5nKTtcbiAgICAgICAgICAgICAgICByZW1haW5pbmcgPSB0aGlzLl90YWtlRGlzdGFuY2UoZGlzdGFuY2VzLCBpLCArK3JpZ2h0LCByZW1haW5pbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yZWZsb3dMYWJlbHMoZGlzdGFuY2VzLCBsYWJlbHMpO1xuICAgIH1cblxuICAgIF90YWtlRGlzdGFuY2UoZGlzdGFuY2VzLCBhbmNob3IsIHBvc2l0aW9uLCBhbW91bnQpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IGFtb3VudDtcbiAgICAgICAgaWYgKGRpc3RhbmNlc1twb3NpdGlvbl0gPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBhdmFpbGFibGUgPSBNYXRoLm1pbihkaXN0YW5jZXNbcG9zaXRpb25dLCByZXN1bHQpO1xuICAgICAgICAgICAgcmVzdWx0IC09IGF2YWlsYWJsZTtcbiAgICAgICAgICAgIGRpc3RhbmNlc1twb3NpdGlvbl0gLT0gYXZhaWxhYmxlO1xuICAgICAgICAgICAgZGlzdGFuY2VzW2FuY2hvcl0gKz0gYXZhaWxhYmxlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICByZWZsb3dMYWJlbHMoZGlzdGFuY2VzLCBsYWJlbHMpIHtcbiAgICAgICAgY29uc3Qgc2VnbWVudCA9IGxhc3QodGhpcy5wb2ludHMpO1xuICAgICAgICBjb25zdCBzZWN0b3IgPSBzZWdtZW50LnNlY3RvcjtcbiAgICAgICAgY29uc3QgbGFiZWxPcHRpb25zID0gc2VnbWVudC5vcHRpb25zLmxhYmVscztcbiAgICAgICAgY29uc3QgbGFiZWxzQ291bnQgPSBsYWJlbHMubGVuZ3RoO1xuICAgICAgICBjb25zdCBsYWJlbERpc3RhbmNlID0gbGFiZWxPcHRpb25zLmRpc3RhbmNlO1xuICAgICAgICBsZXQgYm94WSA9IHNlY3Rvci5jZW50ZXIueSAtIChzZWN0b3IucmFkaXVzICsgbGFiZWxEaXN0YW5jZSkgLSBsYWJlbHNbMF0uYm94LmhlaWdodCgpO1xuICAgICAgICBsZXQgYm94WDtcblxuICAgICAgICBkaXN0YW5jZXNbMF0gKz0gMjtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsYWJlbHNDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBsYWJlbCA9IGxhYmVsc1tpXTtcbiAgICAgICAgICAgIGNvbnN0IGJveCA9IGxhYmVsLmJveDtcblxuICAgICAgICAgICAgYm94WSArPSBkaXN0YW5jZXNbaV07XG4gICAgICAgICAgICBib3hYID0gdGhpcy5oQWxpZ25MYWJlbChcbiAgICAgICAgICAgICAgICBib3gueDIsXG4gICAgICAgICAgICAgICAgc2VjdG9yLmNsb25lKCkuZXhwYW5kKGxhYmVsRGlzdGFuY2UpLFxuICAgICAgICAgICAgICAgIGJveFksXG4gICAgICAgICAgICAgICAgYm94WSArIGJveC5oZWlnaHQoKSxcbiAgICAgICAgICAgICAgICBsYWJlbC5vcmllbnRhdGlvbiA9PT0gUklHSFQpO1xuXG4gICAgICAgICAgICBpZiAobGFiZWwub3JpZW50YXRpb24gPT09IFJJR0hUKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxhYmVsT3B0aW9ucy5hbGlnbiAhPT0gQ0lSQ0xFKSB7XG4gICAgICAgICAgICAgICAgICAgIGJveFggPSBzZWN0b3IucmFkaXVzICsgc2VjdG9yLmNlbnRlci54ICsgbGFiZWxEaXN0YW5jZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGFiZWwucmVmbG93KG5ldyBCb3goYm94WCArIGJveC53aWR0aCgpLCBib3hZLCBib3hYLCBib3hZKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChsYWJlbE9wdGlvbnMuYWxpZ24gIT09IENJUkNMRSkge1xuICAgICAgICAgICAgICAgICAgICBib3hYID0gc2VjdG9yLmNlbnRlci54IC0gc2VjdG9yLnJhZGl1cyAtIGxhYmVsRGlzdGFuY2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxhYmVsLnJlZmxvdyhuZXcgQm94KGJveFggLSBib3gud2lkdGgoKSwgYm94WSwgYm94WCwgYm94WSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBib3hZICs9IGJveC5oZWlnaHQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNyZWF0ZVZpc3VhbCgpIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zOiB7IGNvbm5lY3RvcnMgfSwgcG9pbnRzIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBjb3VudCA9IHBvaW50cy5sZW5ndGg7XG4gICAgICAgIGNvbnN0IHNwYWNlID0gNDtcblxuICAgICAgICBzdXBlci5jcmVhdGVWaXN1YWwoKTtcblxuICAgICAgICB0aGlzLl9jb25uZWN0b3JMaW5lcyA9IFtdO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICAgICAgY29uc3Qgc2VnbWVudCA9IHBvaW50c1tpXTtcbiAgICAgICAgICAgIGNvbnN0IHsgc2VjdG9yLCBsYWJlbCB9ID0gc2VnbWVudDtcbiAgICAgICAgICAgIGNvbnN0IGFuZ2xlID0gc2VjdG9yLm1pZGRsZSgpO1xuICAgICAgICAgICAgY29uc3QgY29ubmVjdG9yc0NvbG9yID0gKHNlZ21lbnQub3B0aW9ucy5jb25uZWN0b3JzIHx8IHt9KS5jb2xvciB8fCBjb25uZWN0b3JzLmNvbG9yO1xuXG4gICAgICAgICAgICBpZiAobGFiZWwpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb25uZWN0b3JMaW5lID0gbmV3IGRyYXcuUGF0aCh7XG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IGNvbm5lY3RvcnNDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBjb25uZWN0b3JzLndpZHRoXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogRkFERUlOLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsYXk6IHNlZ21lbnQuYW5pbWF0aW9uRGVsYXlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKGxhYmVsLm9wdGlvbnMucG9zaXRpb24gPT09IE9VVFNJREVfRU5EKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJveCA9IGxhYmVsLmJveDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2VudGVyUG9pbnQgPSBzZWN0b3IuY2VudGVyO1xuICAgICAgICAgICAgICAgICAgICBsZXQgc3RhcnQgPSBzZWN0b3IucG9pbnQoYW5nbGUpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgbWlkZGxlID0gbmV3IFBvaW50KGJveC54MSwgYm94LmNlbnRlcigpLnkpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgc3IsIGVuZCwgY3Jvc3Npbmc7XG5cbiAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBzZWN0b3IuY2xvbmUoKS5leHBhbmQoY29ubmVjdG9ycy5wYWRkaW5nKS5wb2ludChhbmdsZSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbm5lY3RvckxpbmUubW92ZVRvKHN0YXJ0LngsIHN0YXJ0LnkpO1xuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBFeHRyYWN0IGludG8gYSBtZXRob2QgdG8gcmVtb3ZlIGR1cGxpY2F0aW9uXG4gICAgICAgICAgICAgICAgICAgIGlmIChsYWJlbC5vcmllbnRhdGlvbiA9PT0gUklHSFQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZCA9IG5ldyBQb2ludChib3gueDEgLSBjb25uZWN0b3JzLnBhZGRpbmcsIGJveC5jZW50ZXIoKS55KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyb3NzaW5nID0gaW50ZXJzZWN0aW9uKGNlbnRlclBvaW50LCBzdGFydCwgbWlkZGxlLCBlbmQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWlkZGxlID0gbmV3IFBvaW50KGVuZC54IC0gc3BhY2UsIGVuZC55KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyb3NzaW5nID0gY3Jvc3NpbmcgfHwgbWlkZGxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3Jvc3NpbmcueCA9IE1hdGgubWluKGNyb3NzaW5nLngsIG1pZGRsZS54KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucG9pbnRJbkNpcmNsZShjcm9zc2luZywgc2VjdG9yLmNlbnRlciwgc2VjdG9yLnJhZGl1cyArIHNwYWNlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyb3NzaW5nLnggPCBzZWN0b3IuY2VudGVyLngpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzciA9IHNlY3Rvci5jZW50ZXIueCArIHNlY3Rvci5yYWRpdXMgKyBzcGFjZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VnbWVudC5vcHRpb25zLmxhYmVscy5hbGlnbiAhPT0gQ09MVU1OKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzciA8IG1pZGRsZS54KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0b3JMaW5lLmxpbmVUbyhzciwgc3RhcnQueSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0b3JMaW5lLmxpbmVUbyhzdGFydC54ICsgc3BhY2UgKiAyLCBzdGFydC55KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3RvckxpbmUubGluZVRvKHNyLCBzdGFydC55KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdG9yTGluZS5saW5lVG8obWlkZGxlLngsIGVuZC55KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3Jvc3NpbmcueSA9IGVuZC55O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3RvckxpbmUubGluZVRvKGNyb3NzaW5nLngsIGNyb3NzaW5nLnkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZW5kID0gbmV3IFBvaW50KGJveC54MiArIGNvbm5lY3RvcnMucGFkZGluZywgYm94LmNlbnRlcigpLnkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3Jvc3NpbmcgPSBpbnRlcnNlY3Rpb24oY2VudGVyUG9pbnQsIHN0YXJ0LCBtaWRkbGUsIGVuZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtaWRkbGUgPSBuZXcgUG9pbnQoZW5kLnggKyBzcGFjZSwgZW5kLnkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY3Jvc3NpbmcgPSBjcm9zc2luZyB8fCBtaWRkbGU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjcm9zc2luZy54ID0gTWF0aC5tYXgoY3Jvc3NpbmcueCwgbWlkZGxlLngpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wb2ludEluQ2lyY2xlKGNyb3NzaW5nLCBzZWN0b3IuY2VudGVyLCBzZWN0b3IucmFkaXVzICsgc3BhY2UpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3Jvc3NpbmcueCA+IHNlY3Rvci5jZW50ZXIueCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyID0gc2VjdG9yLmNlbnRlci54IC0gc2VjdG9yLnJhZGl1cyAtIHNwYWNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWdtZW50Lm9wdGlvbnMubGFiZWxzLmFsaWduICE9PSBDT0xVTU4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNyID4gbWlkZGxlLngpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3RvckxpbmUubGluZVRvKHNyLCBzdGFydC55KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbm5lY3RvckxpbmUubGluZVRvKHN0YXJ0LnggLSBzcGFjZSAqIDIsIHN0YXJ0LnkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdG9yTGluZS5saW5lVG8oc3IsIHN0YXJ0LnkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25uZWN0b3JMaW5lLmxpbmVUbyhtaWRkbGUueCwgZW5kLnkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcm9zc2luZy55ID0gZW5kLnk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29ubmVjdG9yTGluZS5saW5lVG8oY3Jvc3NpbmcueCwgY3Jvc3NpbmcueSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjb25uZWN0b3JMaW5lLmxpbmVUbyhlbmQueCwgZW5kLnkpO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Nvbm5lY3RvckxpbmVzLnB1c2goY29ubmVjdG9yTGluZSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlzdWFsLmFwcGVuZChjb25uZWN0b3JMaW5lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW5kZXJWaXN1YWwoKSB7XG4gICAgICAgIHN1cGVyLnJlbmRlclZpc3VhbCgpO1xuXG4gICAgICAgIGlmIChmaW5kKHRoaXMub3B0aW9ucy5zZXJpZXMsIG9wdGlvbnMgPT4gb3B0aW9ucy5hdXRvRml0KSkge1xuICAgICAgICAgICAgY29uc3QgdGFyZ2V0Qm94ID0gdGhpcy50YXJnZXRCb3g7XG4gICAgICAgICAgICBjb25zdCBwaWVDZW50ZXIgPSB0aGlzLmJveC5jZW50ZXIoKTtcbiAgICAgICAgICAgIGNvbnN0IGJib3ggPSB0aGlzLnZpc3VhbC5iYm94KCk7XG4gICAgICAgICAgICBpZiAoIWJib3gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGJib3hCb3R0b20gPSBiYm94LmJvdHRvbVJpZ2h0KCk7XG5cbiAgICAgICAgICAgIGNvbnN0IHNjYWxlID0gTWF0aC5taW4oXG4gICAgICAgICAgICAgICAgKHBpZUNlbnRlci55IC0gdGFyZ2V0Qm94LnkxKSAvIChwaWVDZW50ZXIueSAtIGJib3gub3JpZ2luLnkpLFxuICAgICAgICAgICAgICAgICh0YXJnZXRCb3gueTIgLSBwaWVDZW50ZXIueSkgLyAoYmJveEJvdHRvbS55IC0gcGllQ2VudGVyLnkpLFxuICAgICAgICAgICAgICAgIChwaWVDZW50ZXIueCAtIHRhcmdldEJveC54MSkgLyAocGllQ2VudGVyLnggLSBiYm94Lm9yaWdpbi54KSxcbiAgICAgICAgICAgICAgICAodGFyZ2V0Qm94LngyIC0gcGllQ2VudGVyLngpIC8gKGJib3hCb3R0b20ueCAtIHBpZUNlbnRlci54KVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgaWYgKHNjYWxlIDwgMSkge1xuICAgICAgICAgICAgICAgIHRoaXMudmlzdWFsLnRyYW5zZm9ybShnZW9tZXRyeS50cmFuc2Zvcm0oKS5zY2FsZShzY2FsZSwgc2NhbGUsIFsgcGllQ2VudGVyLngsIHBpZUNlbnRlci55IF0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGxhYmVsQ29tcGFyYXRvcihyZXZlcnNlKSB7XG4gICAgICAgIGNvbnN0IHJldmVyc2VWYWx1ZSA9IHJldmVyc2UgPyAtMSA6IDE7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpcnN0ID0gKGEucGFyZW50LnNlY3Rvci5taWRkbGUoKSArIDI3MCkgJSAzNjA7XG4gICAgICAgICAgICBjb25zdCBzZWNvbmQgPSAoYi5wYXJlbnQuc2VjdG9yLm1pZGRsZSgpICsgMjcwKSAlIDM2MDtcbiAgICAgICAgICAgIHJldHVybiAoZmlyc3QgLSBzZWNvbmQpICogcmV2ZXJzZVZhbHVlO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGhBbGlnbkxhYmVsKG9yaWdpbmFsWCwgc2VjdG9yLCB5MSwgeTIsIGRpcmVjdGlvbikge1xuICAgICAgICBjb25zdCB7IHJhZGl1cywgY2VudGVyOiB7IHg6IGN4LCB5OiBjeSB9IH0gPSBzZWN0b3I7XG4gICAgICAgIGNvbnN0IHQgPSBNYXRoLm1pbihNYXRoLmFicyhjeSAtIHkxKSwgTWF0aC5hYnMoY3kgLSB5MikpO1xuXG4gICAgICAgIGlmICh0ID4gcmFkaXVzKSB7XG4gICAgICAgICAgICByZXR1cm4gb3JpZ2luYWxYO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGN4ICsgTWF0aC5zcXJ0KChyYWRpdXMgKiByYWRpdXMpIC0gKHQgKiB0KSkgKiAoZGlyZWN0aW9uID8gMSA6IC0xKTtcbiAgICB9XG5cbiAgICBwb2ludEluQ2lyY2xlKHBvaW50LCBjZW50ZXIsIHJhZGl1cykge1xuICAgICAgICByZXR1cm4gTWF0aC5wb3coY2VudGVyLnggLSBwb2ludC54LCAyKSArIE1hdGgucG93KGNlbnRlci55IC0gcG9pbnQueSwgMikgPCBNYXRoLnBvdyhyYWRpdXMsIDIpO1xuICAgIH1cblxuICAgIGZvcm1hdFBvaW50VmFsdWUocG9pbnQsIGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jaGFydFNlcnZpY2UuZm9ybWF0LmF1dG8oZm9ybWF0LCBwb2ludC52YWx1ZSk7XG4gICAgfVxuXG4gICAgYW5pbWF0aW9uRGVsYXkoY2F0ZWdvcnlJbmRleCkge1xuICAgICAgICByZXR1cm4gY2F0ZWdvcnlJbmRleCAqIFBJRV9TRUNUT1JfQU5JTV9ERUxBWTtcbiAgICB9XG5cbiAgICBzdGFja1Jvb3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaW50ZXJzZWN0aW9uKGExLCBhMiwgYjEsIGIyKSB7XG4gICAgY29uc3QgdWF0ID0gKGIyLnggLSBiMS54KSAqIChhMS55IC0gYjEueSkgLSAoYjIueSAtIGIxLnkpICogKGExLnggLSBiMS54KTtcbiAgICBjb25zdCB1YiA9IChiMi55IC0gYjEueSkgKiAoYTIueCAtIGExLngpIC0gKGIyLnggLSBiMS54KSAqIChhMi55IC0gYTEueSk7XG5cbiAgICBsZXQgcmVzdWx0O1xuICAgIGlmICh1YiAhPT0gMCkge1xuICAgICAgICBjb25zdCB1YSA9ICh1YXQgLyB1Yik7XG5cbiAgICAgICAgcmVzdWx0ID0gbmV3IFBvaW50KFxuICAgICAgICAgICAgYTEueCArIHVhICogKGEyLnggLSBhMS54KSxcbiAgICAgICAgICAgIGExLnkgKyB1YSAqIChhMi55IC0gYTEueSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5zZXREZWZhdWx0T3B0aW9ucyhQaWVDaGFydCwge1xuICAgIHN0YXJ0QW5nbGU6IDkwLFxuICAgIGNvbm5lY3RvcnM6IHtcbiAgICAgICAgd2lkdGg6IDIsXG4gICAgICAgIGNvbG9yOiBcIiM5MzkzOTNcIixcbiAgICAgICAgcGFkZGluZzogOFxuICAgIH0sXG4gICAgaW5hY3RpdmVJdGVtczoge1xuICAgICAgICBtYXJrZXJzOiB7fSxcbiAgICAgICAgbGFiZWxzOiB7fVxuICAgIH1cbn0pO1xuXG5kZWVwRXh0ZW5kKFBpZUNoYXJ0LnByb3RvdHlwZSwgUGllQ2hhcnRNaXhpbik7XG5cblBpZUNoYXJ0LnByb3RvdHlwZS5pc1N0YWNrUm9vdCA9IHRydWU7XG5cbmV4cG9ydCBkZWZhdWx0IFBpZUNoYXJ0O1xuIiwiaW1wb3J0IFBsb3RBcmVhQmFzZSBmcm9tICcuL3Bsb3RhcmVhLWJhc2UnO1xuaW1wb3J0IFBpZUNoYXJ0IGZyb20gJy4uL3BpZS1jaGFydC9waWUtY2hhcnQnO1xuXG5pbXBvcnQgeyBhcHBlbmQgfSBmcm9tICcuLi8uLi9jb21tb24nO1xuXG5jbGFzcyBQaWVQbG90QXJlYSBleHRlbmRzIFBsb3RBcmVhQmFzZSB7XG4gICAgcmVuZGVyKCkge1xuICAgICAgICB0aGlzLmNyZWF0ZVBpZUNoYXJ0KHRoaXMuc2VyaWVzKTtcbiAgICB9XG5cbiAgICBjcmVhdGVQaWVDaGFydChzZXJpZXMpIHtcbiAgICAgICAgY29uc3QgZmlyc3RTZXJpZXMgPSBzZXJpZXNbMF07XG4gICAgICAgIGNvbnN0IHBpZUNoYXJ0ID0gbmV3IFBpZUNoYXJ0KHRoaXMsIHtcbiAgICAgICAgICAgIHNlcmllczogc2VyaWVzLFxuICAgICAgICAgICAgcGFkZGluZzogZmlyc3RTZXJpZXMucGFkZGluZyxcbiAgICAgICAgICAgIHN0YXJ0QW5nbGU6IGZpcnN0U2VyaWVzLnN0YXJ0QW5nbGUsXG4gICAgICAgICAgICBjb25uZWN0b3JzOiBmaXJzdFNlcmllcy5jb25uZWN0b3JzLFxuICAgICAgICAgICAgbGVnZW5kOiB0aGlzLm9wdGlvbnMubGVnZW5kXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuYXBwZW5kQ2hhcnQocGllQ2hhcnQpO1xuICAgIH1cblxuICAgIGFwcGVuZENoYXJ0KGNoYXJ0LCBwYW5lKSB7XG4gICAgICAgIHN1cGVyLmFwcGVuZENoYXJ0KGNoYXJ0LCBwYW5lKTtcbiAgICAgICAgYXBwZW5kKHRoaXMub3B0aW9ucy5sZWdlbmQuaXRlbXMsIGNoYXJ0LmxlZ2VuZEl0ZW1zKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBpZVBsb3RBcmVhOyIsImltcG9ydCBQaWVTZWdtZW50IGZyb20gJy4uL3BpZS1jaGFydC9waWUtc2VnbWVudCc7XG5pbXBvcnQgUG9pbnRFdmVudHNNaXhpbiBmcm9tICcuLi9taXhpbnMvcG9pbnQtZXZlbnRzLW1peGluJztcblxuaW1wb3J0IHsgUElFIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcblxuaW1wb3J0IHsgU2hhcGVCdWlsZGVyLCBCb3ggfSBmcm9tICcuLi8uLi9jb3JlJztcblxuaW1wb3J0IHsgQ0VOVEVSIH0gZnJvbSAnLi4vLi4vY29tbW9uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBkZWVwRXh0ZW5kLCBzZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5cbmNsYXNzIERvbnV0U2VnbWVudCBleHRlbmRzIFBpZVNlZ21lbnQge1xuICAgIHJlZmxvd0xhYmVsKCkge1xuICAgICAgICBjb25zdCB7IG9wdGlvbnM6IHsgbGFiZWxzOiBsYWJlbHNPcHRpb25zIH0sIGxhYmVsIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBzZWN0b3IgPSB0aGlzLnNlY3Rvci5jbG9uZSgpO1xuICAgICAgICBjb25zdCBhbmdsZSA9IHNlY3Rvci5taWRkbGUoKTtcblxuICAgICAgICBpZiAobGFiZWwpIHtcbiAgICAgICAgICAgIGNvbnN0IGxhYmVsSGVpZ2h0ID0gbGFiZWwuYm94LmhlaWdodCgpO1xuICAgICAgICAgICAgaWYgKGxhYmVsc09wdGlvbnMucG9zaXRpb24gPT09IENFTlRFUikge1xuICAgICAgICAgICAgICAgIHNlY3Rvci5yYWRpdXMgLT0gKHNlY3Rvci5yYWRpdXMgLSBzZWN0b3IuaW5uZXJSYWRpdXMpIC8gMjtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGxwID0gc2VjdG9yLnBvaW50KGFuZ2xlKTtcblxuICAgICAgICAgICAgICAgIGxhYmVsLnJlZmxvdyhuZXcgQm94KGxwLngsIGxwLnkgLSBsYWJlbEhlaWdodCAvIDIsIGxwLngsIGxwLnkpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3VwZXIucmVmbG93TGFiZWwoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNyZWF0ZVNlZ21lbnQoc2VjdG9yLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBTaGFwZUJ1aWxkZXIuY3VycmVudC5jcmVhdGVSaW5nKHNlY3Rvciwgb3B0aW9ucyk7XG4gICAgfVxufVxuXG5zZXREZWZhdWx0T3B0aW9ucyhEb251dFNlZ21lbnQsIHtcbiAgICBvdmVybGF5OiB7XG4gICAgICAgIGdyYWRpZW50OiBcInJvdW5kZWRHbGFzc1wiXG4gICAgfSxcbiAgICBsYWJlbHM6IHtcbiAgICAgICAgcG9zaXRpb246IENFTlRFUlxuICAgIH0sXG4gICAgYW5pbWF0aW9uOiB7XG4gICAgICAgIHR5cGU6IFBJRVxuICAgIH1cbn0pO1xuXG5kZWVwRXh0ZW5kKERvbnV0U2VnbWVudC5wcm90b3R5cGUsIFBvaW50RXZlbnRzTWl4aW4pO1xuXG5cbmV4cG9ydCBkZWZhdWx0IERvbnV0U2VnbWVudDtcbiIsImltcG9ydCBQaWVDaGFydCBmcm9tICcuLi9waWUtY2hhcnQvcGllLWNoYXJ0JztcbmltcG9ydCBEb251dFNlZ21lbnQgZnJvbSAnLi9kb251dC1zZWdtZW50JztcblxuaW1wb3J0IHsgSU5JVElBTF9BTklNQVRJT05fRFVSQVRJT04gfSBmcm9tICcuLi9jb25zdGFudHMnO1xuXG5pbXBvcnQgeyBkZWVwRXh0ZW5kLCBkZWZpbmVkLCBzZXREZWZhdWx0T3B0aW9ucywgdmFsdWVPckRlZmF1bHQgfSBmcm9tICcuLi8uLi9jb21tb24nO1xuXG5jb25zdCBET05VVF9TRUNUT1JfQU5JTV9ERUxBWSA9IDUwO1xuXG5jbGFzcyBEb251dENoYXJ0IGV4dGVuZHMgUGllQ2hhcnQge1xuICAgIGFkZFZhbHVlKHZhbHVlLCBzZWN0b3IsIGZpZWxkcykge1xuICAgICAgICBjb25zdCBzZWdtZW50T3B0aW9ucyA9IGRlZXBFeHRlbmQoe30sIGZpZWxkcy5zZXJpZXMsIHsgaW5kZXg6IGZpZWxkcy5pbmRleCB9KTtcbiAgICAgICAgdGhpcy5ldmFsU2VnbWVudE9wdGlvbnMoc2VnbWVudE9wdGlvbnMsIHZhbHVlLCBmaWVsZHMpO1xuXG4gICAgICAgIHRoaXMuY3JlYXRlTGVnZW5kSXRlbSh2YWx1ZSwgc2VnbWVudE9wdGlvbnMsIGZpZWxkcyk7XG5cbiAgICAgICAgaWYgKCF2YWx1ZSB8fCBmaWVsZHMudmlzaWJsZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHNlZ21lbnQgPSBuZXcgRG9udXRTZWdtZW50KHZhbHVlLCBzZWN0b3IsIHNlZ21lbnRPcHRpb25zKTtcblxuICAgICAgICBPYmplY3QuYXNzaWduKHNlZ21lbnQsIGZpZWxkcyk7XG4gICAgICAgIHRoaXMuYXBwZW5kKHNlZ21lbnQpO1xuICAgICAgICB0aGlzLnBvaW50cy5wdXNoKHNlZ21lbnQpO1xuICAgIH1cblxuICAgIHJlZmxvdyh0YXJnZXRCb3gpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgYm94ID0gdGFyZ2V0Qm94LmNsb25lKCk7XG4gICAgICAgIGNvbnN0IHNwYWNlID0gNTtcbiAgICAgICAgY29uc3QgbWluV2lkdGggPSBNYXRoLm1pbihib3gud2lkdGgoKSwgYm94LmhlaWdodCgpKTtcbiAgICAgICAgY29uc3QgaGFsZk1pbldpZHRoID0gbWluV2lkdGggLyAyO1xuICAgICAgICBjb25zdCBkZWZhdWx0UGFkZGluZyA9IG1pbldpZHRoIC0gbWluV2lkdGggKiAwLjg1O1xuICAgICAgICBjb25zdCBzZXJpZXMgPSBvcHRpb25zLnNlcmllcztcbiAgICAgICAgY29uc3Qgc2VyaWVzQ291bnQgPSBzZXJpZXMubGVuZ3RoO1xuXG4gICAgICAgIGxldCBwYWRkaW5nID0gdmFsdWVPckRlZmF1bHQob3B0aW9ucy5wYWRkaW5nLCBkZWZhdWx0UGFkZGluZyk7XG4gICAgICAgIHBhZGRpbmcgPSBwYWRkaW5nID4gaGFsZk1pbldpZHRoIC0gc3BhY2UgPyBoYWxmTWluV2lkdGggLSBzcGFjZSA6IHBhZGRpbmc7XG5cbiAgICAgICAgbGV0IHRvdGFsU2l6ZSA9IGhhbGZNaW5XaWR0aCAtIHBhZGRpbmc7XG4gICAgICAgIGxldCBzZXJpZXNXaXRob3V0U2l6ZSA9IDA7XG4gICAgICAgIGxldCBob2xlU2l6ZTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcmllc0NvdW50OyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRTZXJpZXMgPSBzZXJpZXNbaV07XG4gICAgICAgICAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGlmIChkZWZpbmVkKGN1cnJlbnRTZXJpZXMuaG9sZVNpemUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGhvbGVTaXplID0gY3VycmVudFNlcmllcy5ob2xlU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgdG90YWxTaXplIC09IGN1cnJlbnRTZXJpZXMuaG9sZVNpemU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZGVmaW5lZChjdXJyZW50U2VyaWVzLnNpemUpKSB7XG4gICAgICAgICAgICAgICAgdG90YWxTaXplIC09IGN1cnJlbnRTZXJpZXMuc2l6ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2VyaWVzV2l0aG91dFNpemUrKztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGRlZmluZWQoY3VycmVudFNlcmllcy5tYXJnaW4pICYmIGkgIT09IHNlcmllc0NvdW50IC0gMSkge1xuICAgICAgICAgICAgICAgIHRvdGFsU2l6ZSAtPSBjdXJyZW50U2VyaWVzLm1hcmdpbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZGVmaW5lZChob2xlU2l6ZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRTaXplID0gKGhhbGZNaW5XaWR0aCAtIHBhZGRpbmcpIC8gKHNlcmllc0NvdW50ICsgMC43NSk7XG4gICAgICAgICAgICBob2xlU2l6ZSA9IGN1cnJlbnRTaXplICogMC43NTtcbiAgICAgICAgICAgIHRvdGFsU2l6ZSAtPSBob2xlU2l6ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBpbm5lclJhZGl1cyA9IGhvbGVTaXplO1xuICAgICAgICBsZXQgbWFyZ2luID0gMDtcbiAgICAgICAgbGV0IHNpemUsIHJhZGl1cztcblxuICAgICAgICB0aGlzLnNlcmllc0NvbmZpZ3MgPSBbXTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcmllc0NvdW50OyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRTZXJpZXMgPSBzZXJpZXNbaV07XG4gICAgICAgICAgICBzaXplID0gdmFsdWVPckRlZmF1bHQoY3VycmVudFNlcmllcy5zaXplLCB0b3RhbFNpemUgLyBzZXJpZXNXaXRob3V0U2l6ZSk7XG4gICAgICAgICAgICBpbm5lclJhZGl1cyArPSBtYXJnaW47XG4gICAgICAgICAgICByYWRpdXMgPSBpbm5lclJhZGl1cyArIHNpemU7XG4gICAgICAgICAgICB0aGlzLnNlcmllc0NvbmZpZ3MucHVzaCh7IGlubmVyUmFkaXVzOiBpbm5lclJhZGl1cywgcmFkaXVzOiByYWRpdXMgfSk7XG4gICAgICAgICAgICBtYXJnaW4gPSBjdXJyZW50U2VyaWVzLm1hcmdpbiB8fCAwO1xuICAgICAgICAgICAgaW5uZXJSYWRpdXMgPSByYWRpdXM7XG4gICAgICAgIH1cblxuICAgICAgICBzdXBlci5yZWZsb3codGFyZ2V0Qm94KTtcbiAgICB9XG5cbiAgICBhbmltYXRpb25EZWxheShjYXRlZ29yeUluZGV4LCBzZXJpZXNJbmRleCwgc2VyaWVzQ291bnQpIHtcbiAgICAgICAgcmV0dXJuIGNhdGVnb3J5SW5kZXggKiBET05VVF9TRUNUT1JfQU5JTV9ERUxBWSArXG4gICAgICAgICAgICAoSU5JVElBTF9BTklNQVRJT05fRFVSQVRJT04gKiAoc2VyaWVzSW5kZXggKyAxKSAvIChzZXJpZXNDb3VudCArIDEpKTtcbiAgICB9XG59XG5cblxuc2V0RGVmYXVsdE9wdGlvbnMoRG9udXRDaGFydCwge1xuICAgIHN0YXJ0QW5nbGU6IDkwLFxuICAgIGNvbm5lY3RvcnM6IHtcbiAgICAgICAgd2lkdGg6IDIsXG4gICAgICAgIGNvbG9yOiBcIiM5MzkzOTNcIixcbiAgICAgICAgcGFkZGluZzogOFxuICAgIH1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBEb251dENoYXJ0OyIsImltcG9ydCBQaWVQbG90QXJlYSBmcm9tICcuL3BpZS1wbG90YXJlYSc7XG5pbXBvcnQgRG9udXRDaGFydCBmcm9tICcuLi9kb251dC1jaGFydC9kb251dC1jaGFydCc7XG5cbmNsYXNzIERvbnV0UGxvdEFyZWEgZXh0ZW5kcyBQaWVQbG90QXJlYSB7XG4gICAgcmVuZGVyKCkge1xuICAgICAgICB0aGlzLmNyZWF0ZURvbnV0Q2hhcnQodGhpcy5zZXJpZXMpO1xuICAgIH1cblxuICAgIGNyZWF0ZURvbnV0Q2hhcnQoc2VyaWVzKSB7XG4gICAgICAgIGNvbnN0IGZpcnN0U2VyaWVzID0gc2VyaWVzWzBdO1xuICAgICAgICBjb25zdCBkb251dENoYXJ0ID0gbmV3IERvbnV0Q2hhcnQodGhpcywge1xuICAgICAgICAgICAgc2VyaWVzOiBzZXJpZXMsXG4gICAgICAgICAgICBwYWRkaW5nOiBmaXJzdFNlcmllcy5wYWRkaW5nLFxuICAgICAgICAgICAgY29ubmVjdG9yczogZmlyc3RTZXJpZXMuY29ubmVjdG9ycyxcbiAgICAgICAgICAgIGxlZ2VuZDogdGhpcy5vcHRpb25zLmxlZ2VuZFxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmFwcGVuZENoYXJ0KGRvbnV0Q2hhcnQpO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRG9udXRQbG90QXJlYTsiLCJpbXBvcnQgUGxvdEFyZWFCYXNlIGZyb20gJy4vcGxvdGFyZWEtYmFzZSc7XG5pbXBvcnQgQXhpc0dyb3VwUmFuZ2VUcmFja2VyIGZyb20gJy4uL2F4aXMtZ3JvdXAtcmFuZ2UtdHJhY2tlcic7XG5pbXBvcnQgeyBSYWRhckxvZ2FyaXRobWljQXhpcywgUmFkYXJOdW1lcmljQXhpcyB9IGZyb20gJy4uLy4uL2NvcmUnO1xuXG5pbXBvcnQgeyBMT0dBUklUSE1JQyB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5cbmltcG9ydCB7IGdldFNwYWNpbmcgfSBmcm9tICcuLi8uLi9jb21tb24nO1xuaW1wb3J0IHsgWSwgQ0VOVEVSIH0gZnJvbSAnLi4vLi4vY29tbW9uL2NvbnN0YW50cyc7XG5cbmNvbnN0IERFRkFVTFRfUEFERElORyA9IDAuMTU7XG5cbmNsYXNzIFBvbGFyUGxvdEFyZWFCYXNlIGV4dGVuZHMgUGxvdEFyZWFCYXNlIHtcbiAgICBpbml0RmllbGRzKCkge1xuICAgICAgICB0aGlzLnZhbHVlQXhpc1JhbmdlVHJhY2tlciA9IG5ldyBBeGlzR3JvdXBSYW5nZVRyYWNrZXIoKTtcbiAgICB9XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHRoaXMuYWRkVG9MZWdlbmQodGhpcy5zZXJpZXMpO1xuICAgICAgICB0aGlzLmNyZWF0ZVBvbGFyQXhpcygpO1xuICAgICAgICB0aGlzLmNyZWF0ZUNoYXJ0cygpO1xuICAgICAgICB0aGlzLmNyZWF0ZVZhbHVlQXhpcygpO1xuICAgIH1cblxuICAgIGFsaWduQXhlcygpIHtcbiAgICAgICAgY29uc3QgYXhpcyA9IHRoaXMudmFsdWVBeGlzO1xuICAgICAgICBjb25zdCByYW5nZSA9IGF4aXMucmFuZ2UoKTtcbiAgICAgICAgY29uc3QgY3Jvc3NpbmdWYWx1ZSA9IGF4aXMub3B0aW9ucy5yZXZlcnNlID8gcmFuZ2UubWF4IDogcmFuZ2UubWluO1xuICAgICAgICBjb25zdCBzbG90ID0gYXhpcy5nZXRTbG90KGNyb3NzaW5nVmFsdWUpO1xuICAgICAgICBjb25zdCBjZW50ZXIgPSB0aGlzLnBvbGFyQXhpcy5nZXRTbG90KDApLmNlbnRlcjtcbiAgICAgICAgY29uc3QgYXhpc0JveCA9IGF4aXMuYm94LnRyYW5zbGF0ZShcbiAgICAgICAgICAgIGNlbnRlci54IC0gc2xvdC54MSxcbiAgICAgICAgICAgIGNlbnRlci55IC0gc2xvdC55MVxuICAgICAgICApO1xuXG4gICAgICAgIGF4aXMucmVmbG93KGF4aXNCb3gpO1xuICAgIH1cblxuICAgIGNyZWF0ZVZhbHVlQXhpcygpIHtcbiAgICAgICAgY29uc3QgdHJhY2tlciA9IHRoaXMudmFsdWVBeGlzUmFuZ2VUcmFja2VyO1xuICAgICAgICBjb25zdCBkZWZhdWx0UmFuZ2UgPSB0cmFja2VyLnF1ZXJ5KCk7XG4gICAgICAgIGNvbnN0IGF4aXNPcHRpb25zID0gdGhpcy52YWx1ZUF4aXNPcHRpb25zKHtcbiAgICAgICAgICAgIHJvdW5kVG9NYWpvclVuaXQ6IGZhbHNlLFxuICAgICAgICAgICAgekluZGV4OiAtMVxuICAgICAgICB9KTtcbiAgICAgICAgbGV0IGF4aXNUeXBlLCBheGlzRGVmYXVsdFJhbmdlO1xuXG4gICAgICAgIGlmIChheGlzT3B0aW9ucy50eXBlID09PSBMT0dBUklUSE1JQykge1xuICAgICAgICAgICAgYXhpc1R5cGUgPSBSYWRhckxvZ2FyaXRobWljQXhpcztcbiAgICAgICAgICAgIGF4aXNEZWZhdWx0UmFuZ2UgPSB7IG1pbjogMC4xLCBtYXg6IDEgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGF4aXNUeXBlID0gUmFkYXJOdW1lcmljQXhpcztcbiAgICAgICAgICAgIGF4aXNEZWZhdWx0UmFuZ2UgPSB7IG1pbjogMCwgbWF4OiAxIH07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCByYW5nZSA9IHRyYWNrZXIucXVlcnkobmFtZSkgfHwgZGVmYXVsdFJhbmdlIHx8IGF4aXNEZWZhdWx0UmFuZ2U7XG5cbiAgICAgICAgaWYgKHJhbmdlICYmIGRlZmF1bHRSYW5nZSkge1xuICAgICAgICAgICAgcmFuZ2UubWluID0gTWF0aC5taW4ocmFuZ2UubWluLCBkZWZhdWx0UmFuZ2UubWluKTtcbiAgICAgICAgICAgIHJhbmdlLm1heCA9IE1hdGgubWF4KHJhbmdlLm1heCwgZGVmYXVsdFJhbmdlLm1heCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB2YWx1ZUF4aXMgPSBuZXcgYXhpc1R5cGUoXG4gICAgICAgICAgICByYW5nZS5taW4sIHJhbmdlLm1heCxcbiAgICAgICAgICAgIGF4aXNPcHRpb25zLFxuICAgICAgICAgICAgdGhpcy5jaGFydFNlcnZpY2VcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLnZhbHVlQXhpcyA9IHZhbHVlQXhpcztcbiAgICAgICAgdGhpcy5hcHBlbmRBeGlzKHZhbHVlQXhpcyk7XG4gICAgfVxuXG4gICAgcmVmbG93QXhlcygpIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zOiB7IHBsb3RBcmVhOiBvcHRpb25zIH0sIHZhbHVlQXhpcywgcG9sYXJBeGlzLCBib3ggfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRQYWRkaW5nID0gTWF0aC5taW4oYm94LndpZHRoKCksIGJveC5oZWlnaHQoKSkgKiBERUZBVUxUX1BBRERJTkc7XG4gICAgICAgIGNvbnN0IHBhZGRpbmcgPSBnZXRTcGFjaW5nKG9wdGlvbnMucGFkZGluZyB8fCB7fSwgZGVmYXVsdFBhZGRpbmcpO1xuICAgICAgICBjb25zdCBwYWRkaW5nQm94ID0gYm94LmNsb25lKCkudW5wYWQocGFkZGluZyk7XG4gICAgICAgIGNvbnN0IGF4aXNCb3ggPSBwYWRkaW5nQm94LmNsb25lKCk7XG5cbiAgICAgICAgYXhpc0JveC55MiA9IGF4aXNCb3gueTEgKyBNYXRoLm1pbihheGlzQm94LndpZHRoKCksIGF4aXNCb3guaGVpZ2h0KCkpO1xuICAgICAgICBheGlzQm94LmFsaWduKHBhZGRpbmdCb3gsIFksIENFTlRFUik7XG5cbiAgICAgICAgY29uc3QgdmFsdWVBeGlzQm94ID0gYXhpc0JveC5jbG9uZSgpLnNocmluaygwLCBheGlzQm94LmhlaWdodCgpIC8gMik7XG5cbiAgICAgICAgcG9sYXJBeGlzLnJlZmxvdyhheGlzQm94KTtcbiAgICAgICAgdmFsdWVBeGlzLnJlZmxvdyh2YWx1ZUF4aXNCb3gpO1xuICAgICAgICBjb25zdCBoZWlnaHREaWZmID0gdmFsdWVBeGlzLmxpbmVCb3goKS5oZWlnaHQoKSAtIHZhbHVlQXhpcy5ib3guaGVpZ2h0KCk7XG4gICAgICAgIHZhbHVlQXhpcy5yZWZsb3codmFsdWVBeGlzLmJveC51bnBhZCh7IHRvcDogaGVpZ2h0RGlmZiB9KSk7XG5cbiAgICAgICAgdGhpcy5heGlzQm94ID0gYXhpc0JveDtcbiAgICAgICAgdGhpcy5hbGlnbkF4ZXMoYXhpc0JveCk7XG4gICAgfVxuXG4gICAgYmFja2dyb3VuZEJveCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYm94O1xuICAgIH1cblxuICAgIGRldGFjaExhYmVscygpIHt9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBvbGFyUGxvdEFyZWFCYXNlO1xuIiwiaW1wb3J0IFNjYXR0ZXJDaGFydCBmcm9tICcuLi9zY2F0dGVyLWNoYXJ0cy9zY2F0dGVyLWNoYXJ0JztcblxuaW1wb3J0IHsgUG9pbnQsIEJveCB9IGZyb20gJy4uLy4uL2NvcmUnO1xuXG5pbXBvcnQgeyBzZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5cbmNsYXNzIFBvbGFyU2NhdHRlckNoYXJ0IGV4dGVuZHMgU2NhdHRlckNoYXJ0IHtcbiAgICBwb2ludFNsb3Qoc2xvdFgsIHNsb3RZKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlUmFkaXVzID0gc2xvdFguY2VudGVyLnkgLSBzbG90WS55MTtcbiAgICAgICAgY29uc3Qgc2xvdCA9IFBvaW50Lm9uQ2lyY2xlKHNsb3RYLmNlbnRlciwgc2xvdFguc3RhcnRBbmdsZSwgdmFsdWVSYWRpdXMpO1xuXG4gICAgICAgIHJldHVybiBuZXcgQm94KHNsb3QueCwgc2xvdC55LCBzbG90LngsIHNsb3QueSk7XG4gICAgfVxufVxuXG5zZXREZWZhdWx0T3B0aW9ucyhQb2xhclNjYXR0ZXJDaGFydCwge1xuICAgIGNsaXA6IGZhbHNlXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgUG9sYXJTY2F0dGVyQ2hhcnQ7IiwiaW1wb3J0IFNjYXR0ZXJMaW5lQ2hhcnQgZnJvbSAnLi4vc2NhdHRlci1jaGFydHMvc2NhdHRlci1saW5lLWNoYXJ0JztcbmltcG9ydCBQb2xhclNjYXR0ZXJDaGFydCBmcm9tICcuLi9wb2xhci1zY2F0dGVyLWNoYXJ0L3BvbGFyLXNjYXR0ZXItY2hhcnQnO1xuXG5pbXBvcnQgeyBzZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5cbmNsYXNzIFBvbGFyTGluZUNoYXJ0IGV4dGVuZHMgU2NhdHRlckxpbmVDaGFydCB7XG59XG5cblBvbGFyTGluZUNoYXJ0LnByb3RvdHlwZS5wb2ludFNsb3QgPSBQb2xhclNjYXR0ZXJDaGFydC5wcm90b3R5cGUucG9pbnRTbG90O1xuXG5zZXREZWZhdWx0T3B0aW9ucyhQb2xhckxpbmVDaGFydCwge1xuICAgIGNsaXA6IGZhbHNlXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgUG9sYXJMaW5lQ2hhcnQ7IiwiaW1wb3J0IFNwbGluZUFyZWFTZWdtZW50IGZyb20gJy4uL2FyZWEtY2hhcnQvc3BsaW5lLWFyZWEtc2VnbWVudCc7XG5pbXBvcnQgeyBDdXJ2ZVByb2Nlc3NvciB9IGZyb20gJy4uLy4uL2NvcmUnO1xuXG5jbGFzcyBTcGxpbmVQb2xhckFyZWFTZWdtZW50IGV4dGVuZHMgU3BsaW5lQXJlYVNlZ21lbnQge1xuICAgIGZpbGxUb0F4ZXMoZmlsbFBhdGgpIHtcbiAgICAgICAgY29uc3QgY2VudGVyID0gdGhpcy5fcG9sYXJBeGlzQ2VudGVyKCk7XG4gICAgICAgIGZpbGxQYXRoLmxpbmVUbyhjZW50ZXIueCwgY2VudGVyLnkpO1xuICAgIH1cblxuICAgIF9wb2xhckF4aXNDZW50ZXIoKSB7XG4gICAgICAgIGNvbnN0IHBvbGFyQXhpcyA9IHRoaXMucGFyZW50LnBsb3RBcmVhLnBvbGFyQXhpcztcbiAgICAgICAgY29uc3QgY2VudGVyID0gcG9sYXJBeGlzLmJveC5jZW50ZXIoKTtcbiAgICAgICAgcmV0dXJuIGNlbnRlcjtcbiAgICB9XG5cbiAgICBzdHJva2VTZWdtZW50cygpIHtcbiAgICAgICAgbGV0IHNlZ21lbnRzID0gdGhpcy5fc3Ryb2tlU2VnbWVudHM7XG5cbiAgICAgICAgaWYgKCFzZWdtZW50cykge1xuICAgICAgICAgICAgY29uc3QgY2VudGVyID0gdGhpcy5fcG9sYXJBeGlzQ2VudGVyKCk7XG4gICAgICAgICAgICBjb25zdCBjdXJ2ZVByb2Nlc3NvciA9IG5ldyBDdXJ2ZVByb2Nlc3NvcihmYWxzZSk7XG4gICAgICAgICAgICBjb25zdCBsaW5lUG9pbnRzID0gdGhpcy5wb2ludHMoKTtcblxuICAgICAgICAgICAgbGluZVBvaW50cy5wdXNoKGNlbnRlcik7XG4gICAgICAgICAgICBzZWdtZW50cyA9IHRoaXMuX3N0cm9rZVNlZ21lbnRzID0gY3VydmVQcm9jZXNzb3IucHJvY2VzcyhsaW5lUG9pbnRzKTtcbiAgICAgICAgICAgIHNlZ21lbnRzLnBvcCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNlZ21lbnRzO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU3BsaW5lUG9sYXJBcmVhU2VnbWVudDsiLCJpbXBvcnQgeyBnZW9tZXRyeSBhcyBnZW9tIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWRyYXdpbmcnO1xuaW1wb3J0IEFyZWFTZWdtZW50IGZyb20gJy4uL2FyZWEtY2hhcnQvYXJlYS1zZWdtZW50JztcblxuY2xhc3MgUG9sYXJBcmVhU2VnbWVudCBleHRlbmRzIEFyZWFTZWdtZW50IHtcbiAgICBmaWxsVG9BeGVzKGZpbGxQYXRoKSB7XG4gICAgICAgIGNvbnN0IHBvbGFyQXhpcyA9IHRoaXMucGFyZW50LnBsb3RBcmVhLnBvbGFyQXhpcztcbiAgICAgICAgY29uc3QgY2VudGVyID0gcG9sYXJBeGlzLmJveC5jZW50ZXIoKTtcbiAgICAgICAgY29uc3QgY2VudGVyU2VnbWVudCA9IG5ldyBnZW9tLlNlZ21lbnQoWyBjZW50ZXIueCwgY2VudGVyLnkgXSk7XG5cbiAgICAgICAgZmlsbFBhdGguc2VnbWVudHMudW5zaGlmdChjZW50ZXJTZWdtZW50KTtcbiAgICAgICAgZmlsbFBhdGguc2VnbWVudHMucHVzaChjZW50ZXJTZWdtZW50KTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFBvbGFyQXJlYVNlZ21lbnQ7IiwiaW1wb3J0IFBvbGFyTGluZUNoYXJ0IGZyb20gJy4uL3BvbGFyLWxpbmUtY2hhcnQvcG9sYXItbGluZS1jaGFydCc7XG5pbXBvcnQgU3BsaW5lUG9sYXJBcmVhU2VnbWVudCBmcm9tICcuL3NwbGluZS1wb2xhci1hcmVhLXNlZ21lbnQnO1xuaW1wb3J0IFBvbGFyQXJlYVNlZ21lbnQgZnJvbSAnLi9wb2xhci1hcmVhLXNlZ21lbnQnO1xuXG5pbXBvcnQgeyBTTU9PVEgsIElOVEVSUE9MQVRFLCBaRVJPLCBHQVAgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuXG5pbXBvcnQgaGFzVmFsdWUgZnJvbSAnLi4vdXRpbHMvaGFzLXZhbHVlJztcblxuY2xhc3MgUG9sYXJBcmVhQ2hhcnQgZXh0ZW5kcyBQb2xhckxpbmVDaGFydCB7XG4gICAgY3JlYXRlU2VnbWVudChsaW5lUG9pbnRzLCBjdXJyZW50U2VyaWVzLCBzZXJpZXNJeCkge1xuICAgICAgICBjb25zdCBzdHlsZSA9IChjdXJyZW50U2VyaWVzLmxpbmUgfHwge30pLnN0eWxlO1xuICAgICAgICBsZXQgc2VnbWVudDtcblxuICAgICAgICBpZiAoc3R5bGUgPT09IFNNT09USCkge1xuICAgICAgICAgICAgc2VnbWVudCA9IG5ldyBTcGxpbmVQb2xhckFyZWFTZWdtZW50KGxpbmVQb2ludHMsIGN1cnJlbnRTZXJpZXMsIHNlcmllc0l4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNlZ21lbnQgPSBuZXcgUG9sYXJBcmVhU2VnbWVudChsaW5lUG9pbnRzLCBjdXJyZW50U2VyaWVzLCBzZXJpZXNJeCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlZ21lbnQ7XG4gICAgfVxuXG4gICAgY3JlYXRlTWlzc2luZ1ZhbHVlKHZhbHVlLCBtaXNzaW5nVmFsdWVzKSB7XG4gICAgICAgIGxldCBtaXNzaW5nVmFsdWU7XG5cbiAgICAgICAgaWYgKGhhc1ZhbHVlKHZhbHVlLngpICYmIG1pc3NpbmdWYWx1ZXMgIT09IElOVEVSUE9MQVRFKSB7XG4gICAgICAgICAgICBtaXNzaW5nVmFsdWUgPSB7XG4gICAgICAgICAgICAgICAgeDogdmFsdWUueCxcbiAgICAgICAgICAgICAgICB5OiB2YWx1ZS55XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKG1pc3NpbmdWYWx1ZXMgPT09IFpFUk8pIHtcbiAgICAgICAgICAgICAgICBtaXNzaW5nVmFsdWUueSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbWlzc2luZ1ZhbHVlO1xuICAgIH1cblxuICAgIHNlcmllc01pc3NpbmdWYWx1ZXMoc2VyaWVzKSB7XG4gICAgICAgIHJldHVybiBzZXJpZXMubWlzc2luZ1ZhbHVlcyB8fCBaRVJPO1xuICAgIH1cblxuICAgIF9oYXNNaXNzaW5nVmFsdWVzR2FwKCkge1xuICAgICAgICBjb25zdCBzZXJpZXMgPSB0aGlzLm9wdGlvbnMuc2VyaWVzO1xuXG4gICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IHNlcmllcy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zZXJpZXNNaXNzaW5nVmFsdWVzKHNlcmllc1tpZHhdKSA9PT0gR0FQKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzb3J0UG9pbnRzKHBvaW50cykge1xuICAgICAgICBwb2ludHMuc29ydCh4Q29tcGFyZXIpO1xuXG4gICAgICAgIGlmICh0aGlzLl9oYXNNaXNzaW5nVmFsdWVzR2FwKCkpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IHBvaW50cy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcG9pbnQgPSBwb2ludHNbaWR4XTtcbiAgICAgICAgICAgICAgICBpZiAocG9pbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBwb2ludC52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFoYXNWYWx1ZSh2YWx1ZS55KSAmJiB0aGlzLnNlcmllc01pc3NpbmdWYWx1ZXMocG9pbnQuc2VyaWVzKSA9PT0gR0FQKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgcG9pbnRzW2lkeF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcG9pbnRzO1xuICAgIH1cbn1cblxuZnVuY3Rpb24geENvbXBhcmVyKGEsIGIpIHtcbiAgICByZXR1cm4gYS52YWx1ZS54IC0gYi52YWx1ZS54O1xufVxuXG5leHBvcnQgZGVmYXVsdCBQb2xhckFyZWFDaGFydDsiLCJpbXBvcnQgUG9sYXJQbG90QXJlYUJhc2UgZnJvbSAnLi9wb2xhci1wbG90YXJlYS1iYXNlJztcbmltcG9ydCBQbG90QXJlYUJhc2UgZnJvbSAnLi9wbG90YXJlYS1iYXNlJztcbmltcG9ydCBQb2xhckxpbmVDaGFydCBmcm9tICcuLi9wb2xhci1saW5lLWNoYXJ0L3BvbGFyLWxpbmUtY2hhcnQnO1xuaW1wb3J0IFBvbGFyU2NhdHRlckNoYXJ0IGZyb20gJy4uL3BvbGFyLXNjYXR0ZXItY2hhcnQvcG9sYXItc2NhdHRlci1jaGFydCc7XG5pbXBvcnQgUG9sYXJBcmVhQ2hhcnQgZnJvbSAnLi4vcG9sYXItYXJlYS1jaGFydC9wb2xhci1hcmVhLWNoYXJ0JztcbmltcG9ydCBQbG90QXJlYUV2ZW50c01peGluIGZyb20gJy4uL21peGlucy9wbG90YXJlYS1ldmVudHMtbWl4aW4nO1xuXG5pbXBvcnQgeyBQb2xhckF4aXMsIFBvaW50IH0gZnJvbSAnLi4vLi4vY29yZSc7XG5cbmltcG9ydCB7IFBPTEFSX0FSRUEsIFBPTEFSX0xJTkUsIFBPTEFSX1NDQVRURVIgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuXG5pbXBvcnQgZmlsdGVyU2VyaWVzQnlUeXBlIGZyb20gJy4uL3V0aWxzL2ZpbHRlci1zZXJpZXMtYnktdHlwZSc7XG5cbmltcG9ydCB7IEFSQyB9IGZyb20gJy4uLy4uL2NvbW1vbi9jb25zdGFudHMnO1xuaW1wb3J0IHsgZGVlcEV4dGVuZCwgZXZlbnRFbGVtZW50LCBzZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5cbmNsYXNzIFBvbGFyUGxvdEFyZWEgZXh0ZW5kcyBQb2xhclBsb3RBcmVhQmFzZSB7XG4gICAgY3JlYXRlUG9sYXJBeGlzKCkge1xuICAgICAgICBjb25zdCBwb2xhckF4aXMgPSBuZXcgUG9sYXJBeGlzKHRoaXMub3B0aW9ucy54QXhpcywgdGhpcy5jaGFydFNlcnZpY2UpO1xuXG4gICAgICAgIHRoaXMucG9sYXJBeGlzID0gcG9sYXJBeGlzO1xuICAgICAgICB0aGlzLmF4aXNYID0gcG9sYXJBeGlzO1xuICAgICAgICB0aGlzLmFwcGVuZEF4aXMocG9sYXJBeGlzKTtcbiAgICB9XG5cbiAgICB2YWx1ZUF4aXNPcHRpb25zKGRlZmF1bHRzKSB7XG4gICAgICAgIHJldHVybiBkZWVwRXh0ZW5kKGRlZmF1bHRzLCB7XG4gICAgICAgICAgICBtYWpvckdyaWRMaW5lczogeyB0eXBlOiBBUkMgfSxcbiAgICAgICAgICAgIG1pbm9yR3JpZExpbmVzOiB7IHR5cGU6IEFSQyB9XG4gICAgICAgIH0sIHRoaXMub3B0aW9ucy55QXhpcyk7XG4gICAgfVxuXG4gICAgY3JlYXRlVmFsdWVBeGlzKCkge1xuICAgICAgICBzdXBlci5jcmVhdGVWYWx1ZUF4aXMoKTtcbiAgICAgICAgdGhpcy5heGlzWSA9IHRoaXMudmFsdWVBeGlzO1xuICAgIH1cblxuICAgIGFwcGVuZENoYXJ0KGNoYXJ0LCBwYW5lKSB7XG4gICAgICAgIHRoaXMudmFsdWVBeGlzUmFuZ2VUcmFja2VyLnVwZGF0ZShjaGFydC55QXhpc1Jhbmdlcyk7XG5cbiAgICAgICAgUGxvdEFyZWFCYXNlLnByb3RvdHlwZS5hcHBlbmRDaGFydC5jYWxsKHRoaXMsIGNoYXJ0LCBwYW5lKTtcbiAgICB9XG5cbiAgICBjcmVhdGVDaGFydHMoKSB7XG4gICAgICAgIGNvbnN0IHNlcmllcyA9IHRoaXMuZmlsdGVyVmlzaWJsZVNlcmllcyh0aGlzLnNlcmllcyk7XG4gICAgICAgIGNvbnN0IHBhbmUgPSB0aGlzLnBhbmVzWzBdO1xuXG4gICAgICAgIHRoaXMuY3JlYXRlTGluZUNoYXJ0KFxuICAgICAgICAgICAgZmlsdGVyU2VyaWVzQnlUeXBlKHNlcmllcywgWyBQT0xBUl9MSU5FIF0pLFxuICAgICAgICAgICAgcGFuZVxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMuY3JlYXRlU2NhdHRlckNoYXJ0KFxuICAgICAgICAgICAgZmlsdGVyU2VyaWVzQnlUeXBlKHNlcmllcywgWyBQT0xBUl9TQ0FUVEVSIF0pLFxuICAgICAgICAgICAgcGFuZVxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMuY3JlYXRlQXJlYUNoYXJ0KFxuICAgICAgICAgICAgZmlsdGVyU2VyaWVzQnlUeXBlKHNlcmllcywgWyBQT0xBUl9BUkVBIF0pLFxuICAgICAgICAgICAgcGFuZVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGNyZWF0ZUxpbmVDaGFydChzZXJpZXMsIHBhbmUpIHtcbiAgICAgICAgaWYgKHNlcmllcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGxpbmVDaGFydCA9IG5ldyBQb2xhckxpbmVDaGFydCh0aGlzLCB7IHNlcmllczogc2VyaWVzIH0pO1xuXG4gICAgICAgIHRoaXMuYXBwZW5kQ2hhcnQobGluZUNoYXJ0LCBwYW5lKTtcbiAgICB9XG5cbiAgICBjcmVhdGVTY2F0dGVyQ2hhcnQoc2VyaWVzLCBwYW5lKSB7XG4gICAgICAgIGlmIChzZXJpZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBzY2F0dGVyQ2hhcnQgPSBuZXcgUG9sYXJTY2F0dGVyQ2hhcnQodGhpcywgeyBzZXJpZXM6IHNlcmllcyB9KTtcblxuICAgICAgICB0aGlzLmFwcGVuZENoYXJ0KHNjYXR0ZXJDaGFydCwgcGFuZSk7XG4gICAgfVxuXG4gICAgY3JlYXRlQXJlYUNoYXJ0KHNlcmllcywgcGFuZSkge1xuICAgICAgICBpZiAoc2VyaWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgYXJlYUNoYXJ0ID0gbmV3IFBvbGFyQXJlYUNoYXJ0KHRoaXMsIHsgc2VyaWVzOiBzZXJpZXMgfSk7XG5cbiAgICAgICAgdGhpcy5hcHBlbmRDaGFydChhcmVhQ2hhcnQsIHBhbmUpO1xuICAgIH1cblxuICAgIF9kaXNwYXRjaEV2ZW50KGNoYXJ0LCBlLCBldmVudFR5cGUpIHtcbiAgICAgICAgY29uc3QgY29vcmRzID0gY2hhcnQuX2V2ZW50Q29vcmRpbmF0ZXMoZSk7XG4gICAgICAgIGNvbnN0IHBvaW50ID0gbmV3IFBvaW50KGNvb3Jkcy54LCBjb29yZHMueSk7XG4gICAgICAgIGNvbnN0IHhWYWx1ZSA9IHRoaXMuYXhpc1guZ2V0VmFsdWUocG9pbnQpO1xuICAgICAgICBjb25zdCB5VmFsdWUgPSB0aGlzLmF4aXNZLmdldFZhbHVlKHBvaW50KTtcblxuICAgICAgICBpZiAoeFZhbHVlICE9PSBudWxsICYmIHlWYWx1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY2hhcnQudHJpZ2dlcihldmVudFR5cGUsIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50OiBldmVudEVsZW1lbnQoZSksXG4gICAgICAgICAgICAgICAgeDogeFZhbHVlLFxuICAgICAgICAgICAgICAgIHk6IHlWYWx1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjcmVhdGVDcm9zc2hhaXJzKCkge31cbn1cblxuc2V0RGVmYXVsdE9wdGlvbnMoUG9sYXJQbG90QXJlYSwge1xuICAgIHhBeGlzOiB7fSxcbiAgICB5QXhpczoge31cbn0pO1xuXG5kZWVwRXh0ZW5kKFBvbGFyUGxvdEFyZWEucHJvdG90eXBlLCBQbG90QXJlYUV2ZW50c01peGluKTtcblxuZXhwb3J0IGRlZmF1bHQgUG9sYXJQbG90QXJlYTsiLCJpbXBvcnQgTGluZUNoYXJ0IGZyb20gJy4uL2xpbmUtY2hhcnQvbGluZS1jaGFydCc7XG5pbXBvcnQgU3BsaW5lU2VnbWVudCBmcm9tICcuLi9saW5lLWNoYXJ0L3NwbGluZS1zZWdtZW50JztcbmltcG9ydCBMaW5lU2VnbWVudCBmcm9tICcuLi9saW5lLWNoYXJ0L2xpbmUtc2VnbWVudCc7XG5cbmltcG9ydCB7IFBvaW50LCBCb3ggfSBmcm9tICcuLi8uLi9jb3JlJztcblxuaW1wb3J0IHsgU01PT1RILCBJTlRFUlBPTEFURSB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5cbmltcG9ydCB7IHNldERlZmF1bHRPcHRpb25zLCBsYXN0IH0gZnJvbSAnLi4vLi4vY29tbW9uJztcblxuZnVuY3Rpb24gZ3JvdXBCeVNlcmllc0l4KHNlZ21lbnRzKSB7XG4gICAgY29uc3Qgc2VyaWVzU2VnbWVudHMgPSBbXTtcbiAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBzZWdtZW50cy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgIGNvbnN0IHNlZ21lbnQgPSBzZWdtZW50c1tpZHhdO1xuICAgICAgICBzZXJpZXNTZWdtZW50c1tzZWdtZW50LnNlcmllc0l4XSA9IHNlcmllc1NlZ21lbnRzW3NlZ21lbnQuc2VyaWVzSXhdIHx8IFtdO1xuICAgICAgICBzZXJpZXNTZWdtZW50c1tzZWdtZW50LnNlcmllc0l4XS5wdXNoKHNlZ21lbnQpO1xuICAgIH1cblxuICAgIHJldHVybiBzZXJpZXNTZWdtZW50cztcbn1cblxuY2xhc3MgUmFkYXJMaW5lQ2hhcnQgZXh0ZW5kcyBMaW5lQ2hhcnQge1xuXG4gICAgcG9pbnRTbG90KGNhdGVnb3J5U2xvdCwgdmFsdWVTbG90KSB7XG4gICAgICAgIGNvbnN0IHZhbHVlUmFkaXVzID0gY2F0ZWdvcnlTbG90LmNlbnRlci55IC0gdmFsdWVTbG90LnkxO1xuICAgICAgICBjb25zdCBzbG90ID0gUG9pbnQub25DaXJjbGUoY2F0ZWdvcnlTbG90LmNlbnRlciwgY2F0ZWdvcnlTbG90Lm1pZGRsZSgpLCB2YWx1ZVJhZGl1cyk7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBCb3goc2xvdC54LCBzbG90LnksIHNsb3QueCwgc2xvdC55KTtcbiAgICB9XG5cbiAgICByZW5kZXJTZWdtZW50cygpIHtcbiAgICAgICAgc3VwZXIucmVuZGVyU2VnbWVudHMoKTtcblxuICAgICAgICBpZiAodGhpcy5fc2VnbWVudHMgJiYgdGhpcy5fc2VnbWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgY29uc3Qgc2VyaWVzU2VnbWVudHMgPSBncm91cEJ5U2VyaWVzSXgodGhpcy5fc2VnbWVudHMpO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBzZXJpZXNTZWdtZW50cy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VnbWVudHMgPSBzZXJpZXNTZWdtZW50c1tpZHhdO1xuICAgICAgICAgICAgICAgIGlmIChzZWdtZW50cyAmJiBzZWdtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpcnN0UG9pbnQgPSBzZWdtZW50c1swXS5saW5lUG9pbnRzWzBdO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsYXN0U2VnbWVudCA9IGxhc3Qoc2VnbWVudHMpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsYXN0UG9pbnQgPSBsYXN0KGxhc3RTZWdtZW50LmxpbmVQb2ludHMpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpc0ZpcnN0RGF0YVBvaW50ID0gZmlyc3RQb2ludC5jYXRlZ29yeUl4ID09PSAwO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpc0xhc3REYXRhUG9pbnQgPSBsYXN0UG9pbnQuY2F0ZWdvcnlJeCA9PT0gbGFzdFBvaW50LmNhdGVnb3JpZXNDb3VudCAtIDE7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc0ZpcnN0RGF0YVBvaW50ICYmIGlzTGFzdERhdGFQb2ludCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdChzZWdtZW50cykubGluZVBvaW50cy5wdXNoKGZpcnN0UG9pbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY3JlYXRlU2VnbWVudChsaW5lUG9pbnRzLCBjdXJyZW50U2VyaWVzLCBzZXJpZXNJeCkge1xuICAgICAgICBjb25zdCBzdHlsZSA9IGN1cnJlbnRTZXJpZXMuc3R5bGU7XG4gICAgICAgIGxldCBwb2ludFR5cGU7XG5cbiAgICAgICAgaWYgKHN0eWxlID09PSBTTU9PVEgpIHtcbiAgICAgICAgICAgIHBvaW50VHlwZSA9IFNwbGluZVNlZ21lbnQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwb2ludFR5cGUgPSBMaW5lU2VnbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHNlZ21lbnQgPSBuZXcgcG9pbnRUeXBlKGxpbmVQb2ludHMsIGN1cnJlbnRTZXJpZXMsIHNlcmllc0l4KTtcbiAgICAgICAgY29uc3QgbWlzc2luZ1ZhbHVlcyA9IHRoaXMuc2VyaWVzTWlzc2luZ1ZhbHVlcyhjdXJyZW50U2VyaWVzKTtcblxuICAgICAgICBpZiAobGluZVBvaW50cy5sZW5ndGggPT09IGN1cnJlbnRTZXJpZXMuZGF0YS5sZW5ndGggfHwgbWlzc2luZ1ZhbHVlcyA9PT0gSU5URVJQT0xBVEUpIHtcbiAgICAgICAgICAgIHNlZ21lbnQub3B0aW9ucy5jbG9zZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNlZ21lbnQ7XG4gICAgfVxufVxuXG5zZXREZWZhdWx0T3B0aW9ucyhSYWRhckxpbmVDaGFydCwge1xuICAgIGNsaXA6IGZhbHNlLFxuICAgIGxpbWl0UG9pbnRzOiBmYWxzZVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IFJhZGFyTGluZUNoYXJ0O1xuIiwiaW1wb3J0IFNwbGluZUFyZWFTZWdtZW50IGZyb20gJy4uL2FyZWEtY2hhcnQvc3BsaW5lLWFyZWEtc2VnbWVudCc7XG5cbmNsYXNzIFNwbGluZVJhZGFyQXJlYVNlZ21lbnQgZXh0ZW5kcyBTcGxpbmVBcmVhU2VnbWVudCB7XG4gICAgZmlsbFRvQXhlcygpIHt9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNwbGluZVJhZGFyQXJlYVNlZ21lbnQ7IiwiaW1wb3J0IEFyZWFTZWdtZW50IGZyb20gJy4uL2FyZWEtY2hhcnQvYXJlYS1zZWdtZW50JztcblxuY2xhc3MgUmFkYXJBcmVhU2VnbWVudCBleHRlbmRzIEFyZWFTZWdtZW50IHtcbiAgICBmaWxsVG9BeGVzKCkge31cbn1cblxuZXhwb3J0IGRlZmF1bHQgUmFkYXJBcmVhU2VnbWVudDsiLCJpbXBvcnQgUmFkYXJMaW5lQ2hhcnQgZnJvbSAnLi4vcmFkYXItbGluZS1jaGFydC9yYWRhci1saW5lLWNoYXJ0JztcbmltcG9ydCBTcGxpbmVSYWRhckFyZWFTZWdtZW50IGZyb20gJy4vc3BsaW5lLXJhZGFyLWFyZWEtc2VnbWVudCc7XG5pbXBvcnQgUmFkYXJBcmVhU2VnbWVudCBmcm9tICcuL3JhZGFyLWFyZWEtc2VnbWVudCc7XG5cbmltcG9ydCB7IFNNT09USCwgWkVSTyB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5cbmNsYXNzIFJhZGFyQXJlYUNoYXJ0IGV4dGVuZHMgUmFkYXJMaW5lQ2hhcnQge1xuICAgIGNyZWF0ZVNlZ21lbnQobGluZVBvaW50cywgY3VycmVudFNlcmllcywgc2VyaWVzSXgsIHByZXZTZWdtZW50KSB7XG4gICAgICAgIGNvbnN0IGlzU3RhY2tlZCA9IHRoaXMub3B0aW9ucy5pc1N0YWNrZWQ7XG4gICAgICAgIGNvbnN0IHN0eWxlID0gKGN1cnJlbnRTZXJpZXMubGluZSB8fCB7fSkuc3R5bGU7XG4gICAgICAgIGxldCBwcmV2aW91c1NlZ21lbnQ7XG4gICAgICAgIGxldCBzdGFja1BvaW50cztcbiAgICAgICAgbGV0IHNlZ21lbnQ7XG5cbiAgICAgICAgaWYgKGlzU3RhY2tlZCAmJiBzZXJpZXNJeCA+IDAgJiYgcHJldlNlZ21lbnQpIHtcbiAgICAgICAgICAgIHN0YWNrUG9pbnRzID0gcHJldlNlZ21lbnQubGluZVBvaW50cy5zbGljZSgwKTtcbiAgICAgICAgICAgIHByZXZpb3VzU2VnbWVudCA9IHByZXZTZWdtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0eWxlID09PSBTTU9PVEgpIHtcbiAgICAgICAgICAgIHNlZ21lbnQgPSBuZXcgU3BsaW5lUmFkYXJBcmVhU2VnbWVudChsaW5lUG9pbnRzLCBjdXJyZW50U2VyaWVzLCBzZXJpZXNJeCwgcHJldmlvdXNTZWdtZW50LCBzdGFja1BvaW50cyk7XG4gICAgICAgICAgICBzZWdtZW50Lm9wdGlvbnMuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxpbmVQb2ludHMucHVzaChsaW5lUG9pbnRzWzBdKTtcbiAgICAgICAgICAgIHNlZ21lbnQgPSBuZXcgUmFkYXJBcmVhU2VnbWVudChsaW5lUG9pbnRzLCBjdXJyZW50U2VyaWVzLCBzZXJpZXNJeCwgcHJldmlvdXNTZWdtZW50LCBzdGFja1BvaW50cyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc2VnbWVudDtcbiAgICB9XG5cbiAgICBzZXJpZXNNaXNzaW5nVmFsdWVzKHNlcmllcykge1xuICAgICAgICByZXR1cm4gc2VyaWVzLm1pc3NpbmdWYWx1ZXMgfHwgWkVSTztcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJhZGFyQXJlYUNoYXJ0OyIsImltcG9ydCBEb251dFNlZ21lbnQgZnJvbSAnLi4vZG9udXQtY2hhcnQvZG9udXQtc2VnbWVudCc7XG5cbmltcG9ydCB7IHNldERlZmF1bHRPcHRpb25zIH0gZnJvbSAnLi4vLi4vY29tbW9uJztcblxuY2xhc3MgUmFkYXJTZWdtZW50IGV4dGVuZHMgRG9udXRTZWdtZW50IHtcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZSwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcih2YWx1ZSwgbnVsbCwgb3B0aW9ucyk7XG4gICAgfVxufVxuXG5zZXREZWZhdWx0T3B0aW9ucyhSYWRhclNlZ21lbnQsIHtcbiAgICBvdmVybGF5OiB7XG4gICAgICAgIGdyYWRpZW50OiBcIm5vbmVcIlxuICAgIH0sXG4gICAgbGFiZWxzOiB7XG4gICAgICAgIGRpc3RhbmNlOiAxMFxuICAgIH1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBSYWRhclNlZ21lbnQ7IiwiaW1wb3J0IHsgQ2hhcnRFbGVtZW50IH0gZnJvbSAnLi4vLi4vY29yZSc7XG5cbmltcG9ydCB7IHNldERlZmF1bHRPcHRpb25zIH0gZnJvbSAnLi4vLi4vY29tbW9uJztcblxuaW1wb3J0IHsgZm9yRWFjaCwgZm9yRWFjaFJldmVyc2UgfSBmcm9tICcuL3V0aWxzJztcblxuY2xhc3MgUmFkYXJDbHVzdGVyTGF5b3V0IGV4dGVuZHMgQ2hhcnRFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG9wdGlvbnMpO1xuXG4gICAgICAgIHRoaXMuZm9yRWFjaCA9IG9wdGlvbnMucnRsID8gZm9yRWFjaFJldmVyc2UgOiBmb3JFYWNoO1xuICAgIH1cblxuICAgIHJlZmxvdyhzZWN0b3IpIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zLCBjaGlsZHJlbiB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyBnYXAsIHNwYWNpbmcgfSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGNvdW50ID0gY2hpbGRyZW4ubGVuZ3RoO1xuICAgICAgICBjb25zdCBzbG90cyA9IGNvdW50ICsgZ2FwICsgKHNwYWNpbmcgKiAoY291bnQgLSAxKSk7XG4gICAgICAgIGNvbnN0IHNsb3RBbmdsZSA9IHNlY3Rvci5hbmdsZSAvIHNsb3RzO1xuICAgICAgICBsZXQgYW5nbGUgPSBzZWN0b3Iuc3RhcnRBbmdsZSArIHNsb3RBbmdsZSAqIChnYXAgLyAyKTtcblxuICAgICAgICB0aGlzLmZvckVhY2goY2hpbGRyZW4sIChjaGlsZCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc2xvdFNlY3RvciA9IHNlY3Rvci5jbG9uZSgpO1xuICAgICAgICAgICAgc2xvdFNlY3Rvci5zdGFydEFuZ2xlID0gYW5nbGU7XG4gICAgICAgICAgICBzbG90U2VjdG9yLmFuZ2xlID0gc2xvdEFuZ2xlO1xuXG4gICAgICAgICAgICBpZiAoY2hpbGQuc2VjdG9yKSB7XG4gICAgICAgICAgICAgICAgc2xvdFNlY3Rvci5yYWRpdXMgPSBjaGlsZC5zZWN0b3IucmFkaXVzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjaGlsZC5yZWZsb3coc2xvdFNlY3Rvcik7XG4gICAgICAgICAgICBjaGlsZC5zZWN0b3IgPSBzbG90U2VjdG9yO1xuXG4gICAgICAgICAgICBhbmdsZSArPSBzbG90QW5nbGUgKyAoc2xvdEFuZ2xlICogc3BhY2luZyk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuc2V0RGVmYXVsdE9wdGlvbnMoUmFkYXJDbHVzdGVyTGF5b3V0LCB7XG4gICAgZ2FwOiAxLFxuICAgIHNwYWNpbmc6IDBcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBSYWRhckNsdXN0ZXJMYXlvdXQ7IiwiaW1wb3J0IHsgQ2hhcnRFbGVtZW50LCBCb3ggfSBmcm9tICcuLi8uLi9jb3JlJztcblxuY2xhc3MgUmFkYXJTdGFja0xheW91dCBleHRlbmRzIENoYXJ0RWxlbWVudCB7XG4gICAgcmVmbG93KHNlY3Rvcikge1xuICAgICAgICBjb25zdCB7IG9wdGlvbnM6IHsgcmV2ZXJzZSB9LCBjaGlsZHJlbiB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgY2hpbGRyZW5Db3VudCA9IGNoaWxkcmVuLmxlbmd0aDtcbiAgICAgICAgY29uc3QgZmlyc3QgPSByZXZlcnNlID8gY2hpbGRyZW5Db3VudCAtIDEgOiAwO1xuICAgICAgICBjb25zdCBzdGVwID0gcmV2ZXJzZSA/IC0xIDogMTtcblxuICAgICAgICB0aGlzLmJveCA9IG5ldyBCb3goKTtcblxuICAgICAgICBmb3IgKGxldCBpID0gZmlyc3Q7IGkgPj0gMCAmJiBpIDwgY2hpbGRyZW5Db3VudDsgaSArPSBzdGVwKSB7XG4gICAgICAgICAgICBjb25zdCBjaGlsZFNlY3RvciA9IGNoaWxkcmVuW2ldLnNlY3RvcjtcbiAgICAgICAgICAgIGNoaWxkU2VjdG9yLnN0YXJ0QW5nbGUgPSBzZWN0b3Iuc3RhcnRBbmdsZTtcbiAgICAgICAgICAgIGNoaWxkU2VjdG9yLmFuZ2xlID0gc2VjdG9yLmFuZ2xlO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBSYWRhclN0YWNrTGF5b3V0OyIsImltcG9ydCBCYXJDaGFydCBmcm9tICcuLi9iYXItY2hhcnQvYmFyLWNoYXJ0JztcbmltcG9ydCBSYWRhclNlZ21lbnQgZnJvbSAnLi9yYWRhci1zZWdtZW50JztcbmltcG9ydCBSYWRhckNsdXN0ZXJMYXlvdXQgZnJvbSAnLi4vbGF5b3V0L3JhZGFyLWNsdXN0ZXItbGF5b3V0JztcbmltcG9ydCBSYWRhclN0YWNrTGF5b3V0IGZyb20gJy4uL2xheW91dC9yYWRhci1zdGFjay1sYXlvdXQnO1xuaW1wb3J0IENhdGVnb3JpY2FsQ2hhcnQgZnJvbSAnLi4vY2F0ZWdvcmljYWwtY2hhcnQnO1xuXG5pbXBvcnQgeyBzZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5cbmNsYXNzIFJhZGFyQmFyQ2hhcnQgZXh0ZW5kcyBCYXJDaGFydCB7XG4gICAgcG9pbnRUeXBlKCkge1xuICAgICAgICByZXR1cm4gUmFkYXJTZWdtZW50O1xuICAgIH1cblxuICAgIGNsdXN0ZXJUeXBlKCkge1xuICAgICAgICByZXR1cm4gUmFkYXJDbHVzdGVyTGF5b3V0O1xuICAgIH1cblxuICAgIHN0YWNrVHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIFJhZGFyU3RhY2tMYXlvdXQ7XG4gICAgfVxuXG4gICAgY2F0ZWdvcnlTbG90KGNhdGVnb3J5QXhpcywgY2F0ZWdvcnlJeCkge1xuICAgICAgICByZXR1cm4gY2F0ZWdvcnlBeGlzLmdldFNsb3QoY2F0ZWdvcnlJeCk7XG4gICAgfVxuXG4gICAgcG9pbnRTbG90KGNhdGVnb3J5U2xvdCwgdmFsdWVTbG90KSB7XG4gICAgICAgIGNvbnN0IHNsb3QgPSBjYXRlZ29yeVNsb3QuY2xvbmUoKTtcbiAgICAgICAgY29uc3QgeSA9IGNhdGVnb3J5U2xvdC5jZW50ZXIueTtcblxuICAgICAgICBzbG90LnJhZGl1cyA9IHkgLSB2YWx1ZVNsb3QueTE7XG4gICAgICAgIHNsb3QuaW5uZXJSYWRpdXMgPSB5IC0gdmFsdWVTbG90LnkyO1xuXG4gICAgICAgIHJldHVybiBzbG90O1xuICAgIH1cblxuICAgIHJlZmxvd1BvaW50KHBvaW50LCBwb2ludFNsb3QpIHtcbiAgICAgICAgcG9pbnQuc2VjdG9yID0gcG9pbnRTbG90O1xuICAgICAgICBwb2ludC5yZWZsb3coKTtcbiAgICB9XG5cbiAgICBjcmVhdGVBbmltYXRpb24oKSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5hbmltYXRpb24uY2VudGVyID0gdGhpcy5ib3gudG9SZWN0KCkuY2VudGVyKCk7XG4gICAgICAgIHN1cGVyLmNyZWF0ZUFuaW1hdGlvbigpO1xuICAgIH1cbn1cblxuUmFkYXJCYXJDaGFydC5wcm90b3R5cGUucmVmbG93ID0gQ2F0ZWdvcmljYWxDaGFydC5wcm90b3R5cGUucmVmbG93O1xuXG5zZXREZWZhdWx0T3B0aW9ucyhSYWRhckJhckNoYXJ0LCB7XG4gICAgY2xpcDogZmFsc2UsXG4gICAgbGltaXRQb2ludHM6IGZhbHNlLFxuICAgIGFuaW1hdGlvbjoge1xuICAgICAgICB0eXBlOiBcInBpZVwiXG4gICAgfVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IFJhZGFyQmFyQ2hhcnQ7IiwiaW1wb3J0IFBvbGFyUGxvdEFyZWFCYXNlIGZyb20gJy4vcG9sYXItcGxvdGFyZWEtYmFzZSc7XG5pbXBvcnQgQ2F0ZWdvcmljYWxQbG90QXJlYSBmcm9tICcuL2NhdGVnb3JpY2FsLXBsb3RhcmVhJztcbmltcG9ydCBSYWRhckFyZWFDaGFydCBmcm9tICcuLi9yYWRhci1hcmVhLWNoYXJ0L3JhZGFyLWFyZWEtY2hhcnQnO1xuaW1wb3J0IFJhZGFyTGluZUNoYXJ0IGZyb20gJy4uL3JhZGFyLWxpbmUtY2hhcnQvcmFkYXItbGluZS1jaGFydCc7XG5pbXBvcnQgUmFkYXJCYXJDaGFydCBmcm9tICcuLi9yYWRhci1iYXItY2hhcnQvcmFkYXItYmFyLWNoYXJ0JztcbmltcG9ydCBQbG90QXJlYUV2ZW50c01peGluIGZyb20gJy4uL21peGlucy9wbG90YXJlYS1ldmVudHMtbWl4aW4nO1xuXG5pbXBvcnQgeyBSYWRhckNhdGVnb3J5QXhpcywgUG9pbnQgfSBmcm9tICcuLi8uLi9jb3JlJztcblxuaW1wb3J0IHsgUkFEQVJfQVJFQSwgUkFEQVJfTElORSwgUkFEQVJfQ09MVU1OIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcblxuaW1wb3J0IGZpbHRlclNlcmllc0J5VHlwZSBmcm9tICcuLi91dGlscy9maWx0ZXItc2VyaWVzLWJ5LXR5cGUnO1xuXG5pbXBvcnQgeyBBUkMgfSBmcm9tICcuLi8uLi9jb21tb24vY29uc3RhbnRzJztcbmltcG9ydCB7IGV2ZW50RWxlbWVudCwgZGVlcEV4dGVuZCwgc2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tICcuLi8uLi9jb21tb24nO1xuXG5jbGFzcyBSYWRhclBsb3RBcmVhIGV4dGVuZHMgUG9sYXJQbG90QXJlYUJhc2Uge1xuICAgIGNyZWF0ZVBvbGFyQXhpcygpIHtcbiAgICAgICAgY29uc3QgY2F0ZWdvcnlBeGlzID0gbmV3IFJhZGFyQ2F0ZWdvcnlBeGlzKHRoaXMub3B0aW9ucy5jYXRlZ29yeUF4aXMsIHRoaXMuY2hhcnRTZXJ2aWNlKTtcblxuICAgICAgICB0aGlzLnBvbGFyQXhpcyA9IGNhdGVnb3J5QXhpcztcbiAgICAgICAgdGhpcy5jYXRlZ29yeUF4aXMgPSBjYXRlZ29yeUF4aXM7XG4gICAgICAgIHRoaXMuYXBwZW5kQXhpcyhjYXRlZ29yeUF4aXMpO1xuICAgICAgICB0aGlzLmFnZ3JlZ2F0ZUNhdGVnb3JpZXMoKTtcbiAgICAgICAgdGhpcy5jcmVhdGVDYXRlZ29yeUF4ZXNMYWJlbHMoKTtcbiAgICB9XG5cbiAgICB2YWx1ZUF4aXNPcHRpb25zKGRlZmF1bHRzKSB7XG4gICAgICAgIGlmICh0aGlzLl9oYXNCYXJDaGFydHMpIHtcbiAgICAgICAgICAgIGRlZXBFeHRlbmQoZGVmYXVsdHMsIHtcbiAgICAgICAgICAgICAgICBtYWpvckdyaWRMaW5lczogeyB0eXBlOiBBUkMgfSxcbiAgICAgICAgICAgICAgICBtaW5vckdyaWRMaW5lczogeyB0eXBlOiBBUkMgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5faXNTdGFja2VkMTAwKSB7XG4gICAgICAgICAgICBkZWVwRXh0ZW5kKGRlZmF1bHRzLCB7XG4gICAgICAgICAgICAgICAgcm91bmRUb01ham9yVW5pdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7IGZvcm1hdDogXCJQMFwiIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRlZXBFeHRlbmQoZGVmYXVsdHMsIHRoaXMub3B0aW9ucy52YWx1ZUF4aXMpO1xuICAgIH1cblxuICAgIGFnZ3JlZ2F0ZUNhdGVnb3JpZXMoKSB7XG4gICAgICAgIC8vIE5vIHNlcGFyYXRlIHBhbmVzIGluIHJhZGFyIGNoYXJ0c1xuICAgICAgICBDYXRlZ29yaWNhbFBsb3RBcmVhLnByb3RvdHlwZS5hZ2dyZWdhdGVDYXRlZ29yaWVzLmNhbGwodGhpcywgdGhpcy5wYW5lcyk7XG4gICAgfVxuXG4gICAgY3JlYXRlQ2F0ZWdvcnlBeGVzTGFiZWxzKCkge1xuICAgICAgICBDYXRlZ29yaWNhbFBsb3RBcmVhLnByb3RvdHlwZS5jcmVhdGVDYXRlZ29yeUF4ZXNMYWJlbHMuY2FsbCh0aGlzLCB0aGlzLnBhbmVzKTtcbiAgICB9XG5cbiAgICBmaWx0ZXJTZXJpZXMoY3VycmVudFNlcmllcykge1xuICAgICAgICAvLyBOb3Qgc3VwcG9ydGVkIGZvciByYWRhciBjaGFydHNcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRTZXJpZXM7XG4gICAgfVxuXG4gICAgY3JlYXRlQ2hhcnRzKCkge1xuICAgICAgICBjb25zdCBzZXJpZXMgPSB0aGlzLmZpbHRlclZpc2libGVTZXJpZXModGhpcy5zZXJpZXMpO1xuICAgICAgICBjb25zdCBwYW5lID0gdGhpcy5wYW5lc1swXTtcblxuICAgICAgICB0aGlzLmNyZWF0ZUFyZWFDaGFydChcbiAgICAgICAgICAgIGZpbHRlclNlcmllc0J5VHlwZShzZXJpZXMsIFsgUkFEQVJfQVJFQSBdKSxcbiAgICAgICAgICAgIHBhbmVcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLmNyZWF0ZUxpbmVDaGFydChcbiAgICAgICAgICAgIGZpbHRlclNlcmllc0J5VHlwZShzZXJpZXMsIFsgUkFEQVJfTElORSBdKSxcbiAgICAgICAgICAgIHBhbmVcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLmNyZWF0ZUJhckNoYXJ0KFxuICAgICAgICAgICAgZmlsdGVyU2VyaWVzQnlUeXBlKHNlcmllcywgWyBSQURBUl9DT0xVTU4gXSksXG4gICAgICAgICAgICBwYW5lXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgY2hhcnRPcHRpb25zKHNlcmllcykge1xuICAgICAgICBjb25zdCBvcHRpb25zID0geyBzZXJpZXM6IHNlcmllcyB9O1xuICAgICAgICBjb25zdCBmaXJzdFNlcmllcyA9IHNlcmllc1swXTtcbiAgICAgICAgaWYgKGZpcnN0U2VyaWVzKSB7XG4gICAgICAgICAgICBjb25zdCBmaWx0ZXJlZFNlcmllcyA9IHRoaXMuZmlsdGVyVmlzaWJsZVNlcmllcyhzZXJpZXMpO1xuICAgICAgICAgICAgY29uc3Qgc3RhY2sgPSBmaXJzdFNlcmllcy5zdGFjaztcbiAgICAgICAgICAgIG9wdGlvbnMuaXNTdGFja2VkID0gc3RhY2sgJiYgZmlsdGVyZWRTZXJpZXMubGVuZ3RoID4gMTtcbiAgICAgICAgICAgIG9wdGlvbnMuaXNTdGFja2VkMTAwID0gc3RhY2sgJiYgc3RhY2sudHlwZSA9PT0gXCIxMDAlXCIgJiYgZmlsdGVyZWRTZXJpZXMubGVuZ3RoID4gMTtcblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuaXNTdGFja2VkMTAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faXNTdGFja2VkMTAwID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvcHRpb25zO1xuICAgIH1cblxuICAgIGNyZWF0ZUFyZWFDaGFydChzZXJpZXMsIHBhbmUpIHtcbiAgICAgICAgaWYgKHNlcmllcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGFyZWFDaGFydCA9IG5ldyBSYWRhckFyZWFDaGFydCh0aGlzLCB0aGlzLmNoYXJ0T3B0aW9ucyhzZXJpZXMpKTtcbiAgICAgICAgdGhpcy5hcHBlbmRDaGFydChhcmVhQ2hhcnQsIHBhbmUpO1xuICAgIH1cblxuICAgIGNyZWF0ZUxpbmVDaGFydChzZXJpZXMsIHBhbmUpIHtcbiAgICAgICAgaWYgKHNlcmllcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGxpbmVDaGFydCA9IG5ldyBSYWRhckxpbmVDaGFydCh0aGlzLCB0aGlzLmNoYXJ0T3B0aW9ucyhzZXJpZXMpKTtcbiAgICAgICAgdGhpcy5hcHBlbmRDaGFydChsaW5lQ2hhcnQsIHBhbmUpO1xuICAgIH1cblxuICAgIGNyZWF0ZUJhckNoYXJ0KHNlcmllcywgcGFuZSkge1xuICAgICAgICBpZiAoc2VyaWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZmlyc3RTZXJpZXMgPSBzZXJpZXNbMF07XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLmNoYXJ0T3B0aW9ucyhzZXJpZXMpO1xuICAgICAgICBvcHRpb25zLmdhcCA9IGZpcnN0U2VyaWVzLmdhcDtcbiAgICAgICAgb3B0aW9ucy5zcGFjaW5nID0gZmlyc3RTZXJpZXMuc3BhY2luZztcblxuICAgICAgICBjb25zdCBiYXJDaGFydCA9IG5ldyBSYWRhckJhckNoYXJ0KHRoaXMsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmFwcGVuZENoYXJ0KGJhckNoYXJ0LCBwYW5lKTtcblxuICAgICAgICB0aGlzLl9oYXNCYXJDaGFydHMgPSB0cnVlO1xuICAgIH1cblxuICAgIHNlcmllc0NhdGVnb3J5QXhpcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2F0ZWdvcnlBeGlzO1xuICAgIH1cblxuICAgIF9kaXNwYXRjaEV2ZW50KGNoYXJ0LCBlLCBldmVudFR5cGUpIHtcbiAgICAgICAgY29uc3QgY29vcmRzID0gY2hhcnQuX2V2ZW50Q29vcmRpbmF0ZXMoZSk7XG4gICAgICAgIGNvbnN0IHBvaW50ID0gbmV3IFBvaW50KGNvb3Jkcy54LCBjb29yZHMueSk7XG4gICAgICAgIGNvbnN0IGNhdGVnb3J5ID0gdGhpcy5jYXRlZ29yeUF4aXMuZ2V0Q2F0ZWdvcnkocG9pbnQpO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMudmFsdWVBeGlzLmdldFZhbHVlKHBvaW50KTtcblxuICAgICAgICBpZiAoY2F0ZWdvcnkgIT09IG51bGwgJiYgdmFsdWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNoYXJ0LnRyaWdnZXIoZXZlbnRUeXBlLCB7XG4gICAgICAgICAgICAgICAgZWxlbWVudDogZXZlbnRFbGVtZW50KGUpLFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBjYXRlZ29yeSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY3JlYXRlQ3Jvc3NoYWlycygpIHt9XG59XG5cbmRlZXBFeHRlbmQoUmFkYXJQbG90QXJlYS5wcm90b3R5cGUsIFBsb3RBcmVhRXZlbnRzTWl4aW4sIHtcbiAgICBhcHBlbmRDaGFydDogQ2F0ZWdvcmljYWxQbG90QXJlYS5wcm90b3R5cGUuYXBwZW5kQ2hhcnQsXG4gICAgYWdncmVnYXRlU2VyaWVzOiBDYXRlZ29yaWNhbFBsb3RBcmVhLnByb3RvdHlwZS5hZ2dyZWdhdGVTZXJpZXMsXG4gICAgc2VyaWVzU291cmNlUG9pbnRzOiBDYXRlZ29yaWNhbFBsb3RBcmVhLnByb3RvdHlwZS5zZXJpZXNTb3VyY2VQb2ludHNcbn0pO1xuXG5zZXREZWZhdWx0T3B0aW9ucyhSYWRhclBsb3RBcmVhLCB7XG4gICAgY2F0ZWdvcnlBeGlzOiB7XG4gICAgICAgIGNhdGVnb3JpZXM6IFtdXG4gICAgfSxcbiAgICB2YWx1ZUF4aXM6IHt9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgUmFkYXJQbG90QXJlYTsiLCJpbXBvcnQgeyBkcmF3aW5nIGFzIGRyYXcgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tZHJhd2luZyc7XG5cbmltcG9ydCB7IENoYXJ0RWxlbWVudCwgQm94LCBQb2ludCB9IGZyb20gJy4uLy4uL2NvcmUnO1xuaW1wb3J0IFBvaW50RXZlbnRzTWl4aW4gZnJvbSAnLi4vbWl4aW5zL3BvaW50LWV2ZW50cy1taXhpbic7XG5cbmltcG9ydCB7IFdISVRFIH0gZnJvbSAnLi4vLi4vY29tbW9uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBkZWVwRXh0ZW5kLCBzZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5cbmNsYXNzIEZ1bm5lbFNlZ21lbnQgZXh0ZW5kcyBDaGFydEVsZW1lbnQge1xuICAgIGNvbnN0cnVjdG9yKHZhbHVlLCBvcHRpb25zLCBzZWdtZW50T3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcblxuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMub3B0aW9ucy5pbmRleCA9IHNlZ21lbnRPcHRpb25zLmluZGV4O1xuICAgIH1cblxuICAgIHJlZmxvdyhjaGFydEJveCkge1xuICAgICAgICBjb25zdCBwb2ludHMgPSB0aGlzLnBvaW50cztcbiAgICAgICAgY29uc3QgbGFiZWwgPSB0aGlzLmNoaWxkcmVuWzBdO1xuXG4gICAgICAgIHRoaXMuYm94ID0gbmV3IEJveChwb2ludHNbMF0ueCwgcG9pbnRzWzBdLnksIHBvaW50c1sxXS54LCBwb2ludHNbMl0ueSk7XG5cbiAgICAgICAgaWYgKGxhYmVsKSB7XG4gICAgICAgICAgICBsYWJlbC5yZWZsb3cobmV3IEJveChjaGFydEJveC54MSwgcG9pbnRzWzBdLnksIGNoYXJ0Qm94LngyLCBwb2ludHNbMl0ueSkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY3JlYXRlVmlzdWFsKCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBsZXQgdmlzdWFsO1xuXG4gICAgICAgIHN1cGVyLmNyZWF0ZVZpc3VhbCgpO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnZpc3VhbCkge1xuICAgICAgICAgICAgdmlzdWFsID0gb3B0aW9ucy52aXN1YWwoe1xuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiB0aGlzLmNhdGVnb3J5LFxuICAgICAgICAgICAgICAgIGRhdGFJdGVtOiB0aGlzLmRhdGFJdGVtLFxuICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnZhbHVlLFxuICAgICAgICAgICAgICAgIHNlcmllczogdGhpcy5zZXJpZXMsXG4gICAgICAgICAgICAgICAgcGVyY2VudGFnZTogdGhpcy5wZXJjZW50YWdlLFxuICAgICAgICAgICAgICAgIHBvaW50czogdGhpcy5wb2ludHMsXG4gICAgICAgICAgICAgICAgb3B0aW9uczogb3B0aW9ucyxcbiAgICAgICAgICAgICAgICBzZW5kZXI6IHRoaXMuZ2V0U2VuZGVyKCksXG4gICAgICAgICAgICAgICAgY3JlYXRlVmlzdWFsOiAoKSA9PiB0aGlzLmNyZWF0ZVBhdGgoKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2aXN1YWwgPSB0aGlzLmNyZWF0ZVBhdGgoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2aXN1YWwpIHtcbiAgICAgICAgICAgIHRoaXMudmlzdWFsLmFwcGVuZCh2aXN1YWwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY3JlYXRlUGF0aCgpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgYm9yZGVyID0gb3B0aW9ucy5ib3JkZXI7XG4gICAgICAgIGNvbnN0IHBhdGggPSBkcmF3LlBhdGguZnJvbVBvaW50cyh0aGlzLnBvaW50cywge1xuICAgICAgICAgICAgZmlsbDoge1xuICAgICAgICAgICAgICAgIGNvbG9yOiBvcHRpb25zLmNvbG9yLFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IG9wdGlvbnMub3BhY2l0eVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0cm9rZToge1xuICAgICAgICAgICAgICAgIGNvbG9yOiBib3JkZXIuY29sb3IsXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogYm9yZGVyLm9wYWNpdHksXG4gICAgICAgICAgICAgICAgd2lkdGg6IGJvcmRlci53aWR0aFxuICAgICAgICAgICAgfVxuICAgICAgICB9KS5jbG9zZSgpO1xuXG4gICAgICAgIHJldHVybiBwYXRoO1xuICAgIH1cblxuICAgIGNyZWF0ZUhpZ2hsaWdodChzdHlsZSkge1xuICAgICAgICByZXR1cm4gZHJhdy5QYXRoLmZyb21Qb2ludHModGhpcy5wb2ludHMsIHN0eWxlKTtcbiAgICB9XG5cbiAgICBoaWdobGlnaHRWaXN1YWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpc3VhbC5jaGlsZHJlblswXTtcbiAgICB9XG5cbiAgICBoaWdobGlnaHRWaXN1YWxBcmdzKCkge1xuICAgICAgICBjb25zdCBwYXRoID0gZHJhdy5QYXRoLmZyb21Qb2ludHModGhpcy5wb2ludHMpLmNsb3NlKCk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG9wdGlvbnM6IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICAgIHBhdGg6IHBhdGhcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB0b29sdGlwQW5jaG9yKCkge1xuICAgICAgICBjb25zdCBib3ggPSB0aGlzLmJveDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHBvaW50OiBuZXcgUG9pbnQoYm94LmNlbnRlcigpLngsIGJveC55MSksXG4gICAgICAgICAgICBhbGlnbjoge1xuICAgICAgICAgICAgICAgIGhvcml6b250YWw6IFwiY2VudGVyXCIsXG4gICAgICAgICAgICAgICAgdmVydGljYWw6IFwidG9wXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmb3JtYXRWYWx1ZShmb3JtYXQpIHtcbiAgICAgICAgY29uc3QgcG9pbnQgPSB0aGlzO1xuICAgICAgICByZXR1cm4gcG9pbnQub3duZXIuZm9ybWF0UG9pbnRWYWx1ZShwb2ludCwgZm9ybWF0KTtcbiAgICB9XG59XG5cbnNldERlZmF1bHRPcHRpb25zKEZ1bm5lbFNlZ21lbnQsIHtcbiAgICBjb2xvcjogV0hJVEUsXG4gICAgYm9yZGVyOiB7XG4gICAgICAgIHdpZHRoOiAxXG4gICAgfVxufSk7XG5cbmRlZXBFeHRlbmQoRnVubmVsU2VnbWVudC5wcm90b3R5cGUsIFBvaW50RXZlbnRzTWl4aW4pO1xuXG5leHBvcnQgZGVmYXVsdCBGdW5uZWxTZWdtZW50OyIsImltcG9ydCB7IGdlb21ldHJ5IGFzIGdlb20sIENvbG9yIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWRyYXdpbmcnO1xuXG5pbXBvcnQgeyBDaGFydEVsZW1lbnQsIFRleHRCb3ggfSBmcm9tICcuLi8uLi9jb3JlJztcbmltcG9ydCBQaWVDaGFydE1peGluIGZyb20gJy4uL21peGlucy9waWUtY2hhcnQtbWl4aW4nO1xuaW1wb3J0IEZ1bm5lbFNlZ21lbnQgZnJvbSAnLi9mdW5uZWwtc2VnbWVudCc7XG5cbmltcG9ydCB7IGJpbmRTZWdtZW50cywgZXZhbE9wdGlvbnMgfSBmcm9tICcuLi91dGlscyc7XG5cbmltcG9ydCB7IEJMQUNLLCBXSElURSwgQ0VOVEVSLCBMRUZUIH0gZnJvbSAnLi4vLi4vY29tbW9uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBkZWVwRXh0ZW5kLCBpc0Z1bmN0aW9uLCBnZXRUZW1wbGF0ZSwgbGltaXRWYWx1ZSwgc2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tICcuLi8uLi9jb21tb24nO1xuXG5jbGFzcyBGdW5uZWxDaGFydCBleHRlbmRzIENoYXJ0RWxlbWVudCB7XG4gICAgY29uc3RydWN0b3IocGxvdEFyZWEsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5wbG90QXJlYSA9IHBsb3RBcmVhO1xuICAgICAgICB0aGlzLnBvaW50cyA9IFtdO1xuICAgICAgICB0aGlzLmxhYmVscyA9IFtdO1xuICAgICAgICB0aGlzLmxlZ2VuZEl0ZW1zID0gW107XG4gICAgICAgIHRoaXMucmVuZGVyKCk7XG4gICAgfVxuXG4gICAgZm9ybWF0UG9pbnRWYWx1ZShwb2ludCwgZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNoYXJ0U2VydmljZS5mb3JtYXQuYXV0byhmb3JtYXQscG9pbnQudmFsdWUpO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zLCBwbG90QXJlYTogeyBvcHRpb25zOiB7IHNlcmllc0NvbG9ycyA9IFtdIH0gfSB9ID0gdGhpcztcbiAgICAgICAgY29uc3Qgc2VyaWVzID0gb3B0aW9ucy5zZXJpZXNbMF07XG4gICAgICAgIGNvbnN0IGRhdGEgPSBzZXJpZXMuZGF0YTtcblxuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHsgdG90YWwsIHBvaW50cyB9ID0gYmluZFNlZ21lbnRzKHNlcmllcyk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHBvaW50RGF0YSA9IHBvaW50c1tpXTtcblxuICAgICAgICAgICAgaWYgKCFwb2ludERhdGEpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IGZpZWxkcyA9IHBvaW50RGF0YS5maWVsZHM7XG5cbiAgICAgICAgICAgIGlmICghaXNGdW5jdGlvbihzZXJpZXMuY29sb3IpKSB7XG4gICAgICAgICAgICAgICAgc2VyaWVzLmNvbG9yID0gZmllbGRzLmNvbG9yIHx8IHNlcmllc0NvbG9yc1tpICUgc2VyaWVzQ29sb3JzLmxlbmd0aF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZpZWxkcyA9IGRlZXBFeHRlbmQoe1xuICAgICAgICAgICAgICAgIGluZGV4OiBpLFxuICAgICAgICAgICAgICAgIG93bmVyOiB0aGlzLFxuICAgICAgICAgICAgICAgIHNlcmllczogc2VyaWVzLFxuICAgICAgICAgICAgICAgIGRhdGFJdGVtOiBkYXRhW2ldLFxuICAgICAgICAgICAgICAgIHBlcmNlbnRhZ2U6IHBvaW50RGF0YS52YWx1ZSAvIHRvdGFsXG4gICAgICAgICAgICB9LCBmaWVsZHMsIHsgdmlzaWJsZTogcG9pbnREYXRhLnZpc2libGUgfSk7XG5cbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gcG9pbnREYXRhLnZhbHVlRmllbGRzLnZhbHVlO1xuICAgICAgICAgICAgY29uc3Qgc2VnbWVudCA9IHRoaXMuY3JlYXRlU2VnbWVudCh2YWx1ZSwgZmllbGRzKTtcbiAgICAgICAgICAgIGNvbnN0IGxhYmVsID0gdGhpcy5jcmVhdGVMYWJlbCh2YWx1ZSwgZmllbGRzKTtcblxuICAgICAgICAgICAgaWYgKHNlZ21lbnQgJiYgbGFiZWwpIHtcbiAgICAgICAgICAgICAgICBzZWdtZW50LmFwcGVuZChsYWJlbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBldmFsU2VnbWVudE9wdGlvbnMob3B0aW9ucywgdmFsdWUsIGZpZWxkcykge1xuICAgICAgICBjb25zdCBzZXJpZXMgPSBmaWVsZHMuc2VyaWVzO1xuXG4gICAgICAgIGV2YWxPcHRpb25zKG9wdGlvbnMsIHtcbiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgIHNlcmllczogc2VyaWVzLFxuICAgICAgICAgICAgZGF0YUl0ZW06IGZpZWxkcy5kYXRhSXRlbSxcbiAgICAgICAgICAgIGluZGV4OiBmaWVsZHMuaW5kZXhcbiAgICAgICAgfSwgeyBkZWZhdWx0czogc2VyaWVzLl9kZWZhdWx0cywgZXhjbHVkZWQ6IFsgXCJkYXRhXCIsIFwiY29udGVudFwiLCBcInRlbXBsYXRlXCIsIFwidG9nZ2xlXCIsIFwidmlzdWFsXCIgXSB9KTtcbiAgICB9XG5cbiAgICBjcmVhdGVTZWdtZW50KHZhbHVlLCBmaWVsZHMpIHtcbiAgICAgICAgY29uc3Qgc2VyaWVzT3B0aW9ucyA9IGRlZXBFeHRlbmQoe30sIGZpZWxkcy5zZXJpZXMpO1xuICAgICAgICB0aGlzLmV2YWxTZWdtZW50T3B0aW9ucyhzZXJpZXNPcHRpb25zLCB2YWx1ZSwgZmllbGRzKTtcblxuICAgICAgICB0aGlzLmNyZWF0ZUxlZ2VuZEl0ZW0odmFsdWUsIHNlcmllc09wdGlvbnMsIGZpZWxkcyk7XG5cbiAgICAgICAgaWYgKGZpZWxkcy52aXNpYmxlICE9PSBmYWxzZSkge1xuXG4gICAgICAgICAgICBjb25zdCBzZWdtZW50ID0gbmV3IEZ1bm5lbFNlZ21lbnQodmFsdWUsIHNlcmllc09wdGlvbnMsIGZpZWxkcyk7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHNlZ21lbnQsIGZpZWxkcyk7XG5cbiAgICAgICAgICAgIHRoaXMuYXBwZW5kKHNlZ21lbnQpO1xuICAgICAgICAgICAgdGhpcy5wb2ludHMucHVzaChzZWdtZW50KTtcblxuICAgICAgICAgICAgcmV0dXJuIHNlZ21lbnQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjcmVhdGVMYWJlbCh2YWx1ZSwgZmllbGRzKSB7XG4gICAgICAgIGNvbnN0IHsgc2VyaWVzLCBkYXRhSXRlbSB9ID0gZmllbGRzO1xuICAgICAgICBjb25zdCBsYWJlbHMgPSBkZWVwRXh0ZW5kKHt9LCB0aGlzLm9wdGlvbnMubGFiZWxzLCBzZXJpZXMubGFiZWxzKTtcbiAgICAgICAgbGV0IHRleHQgPSB2YWx1ZTtcblxuICAgICAgICBpZiAobGFiZWxzLnZpc2libGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGxhYmVsVGVtcGxhdGUgPSBnZXRUZW1wbGF0ZShsYWJlbHMpO1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICBkYXRhSXRlbTogZGF0YUl0ZW0sXG4gICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgICAgIHBlcmNlbnRhZ2U6IGZpZWxkcy5wZXJjZW50YWdlLFxuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiBmaWVsZHMuY2F0ZWdvcnksXG4gICAgICAgICAgICAgICAgc2VyaWVzOiBzZXJpZXNcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBpZiAobGFiZWxUZW1wbGF0ZSkge1xuICAgICAgICAgICAgICAgIHRleHQgPSBsYWJlbFRlbXBsYXRlKGRhdGEpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsYWJlbHMuZm9ybWF0KSB7XG4gICAgICAgICAgICAgICAgdGV4dCA9IHRoaXMucGxvdEFyZWEuY2hhcnRTZXJ2aWNlLmZvcm1hdC5hdXRvKGxhYmVscy5mb3JtYXQsIHRleHQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWxhYmVscy5jb2xvcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJyaWdodG5lc3NWYWx1ZSA9IG5ldyBDb2xvcihzZXJpZXMuY29sb3IpLnBlcmNCcmlnaHRuZXNzKCk7XG4gICAgICAgICAgICAgICAgaWYgKGJyaWdodG5lc3NWYWx1ZSA+IDE4MCkge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbHMuY29sb3IgPSBCTEFDSztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbHMuY29sb3IgPSBXSElURTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFsYWJlbHMuYmFja2dyb3VuZCkge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbHMuYmFja2dyb3VuZCA9IHNlcmllcy5jb2xvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuZXZhbFNlZ21lbnRPcHRpb25zKGxhYmVscywgdmFsdWUsIGZpZWxkcyk7XG4gICAgICAgICAgICBjb25zdCB0ZXh0Qm94ID0gbmV3IFRleHRCb3godGV4dCwgZGVlcEV4dGVuZCh7XG4gICAgICAgICAgICAgICAgdkFsaWduOiBsYWJlbHMucG9zaXRpb25cbiAgICAgICAgICAgIH0sIGxhYmVscyksIGRhdGEpO1xuXG4gICAgICAgICAgICB0aGlzLmxhYmVscy5wdXNoKHRleHRCb3gpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGV4dEJveDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGxhYmVsUGFkZGluZygpIHtcbiAgICAgICAgY29uc3QgbGFiZWxzID0gdGhpcy5sYWJlbHM7XG4gICAgICAgIGNvbnN0IHBhZGRpbmcgPSB7IGxlZnQ6IDAsIHJpZ2h0OiAwIH07XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsYWJlbHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGxhYmVsID0gbGFiZWxzW2ldO1xuICAgICAgICAgICAgY29uc3QgYWxpZ24gPSBsYWJlbC5vcHRpb25zLmFsaWduO1xuICAgICAgICAgICAgaWYgKGFsaWduICE9PSBDRU5URVIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB3aWR0aCA9IGxhYmVsc1tpXS5ib3gud2lkdGgoKTtcblxuICAgICAgICAgICAgICAgIGlmIChhbGlnbiA9PT0gTEVGVCkge1xuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nLmxlZnQgPSBNYXRoLm1heChwYWRkaW5nLmxlZnQsIHdpZHRoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nLnJpZ2h0ID0gTWF0aC5tYXgocGFkZGluZy5yaWdodCwgd2lkdGgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwYWRkaW5nO1xuICAgIH1cblxuICAgIGR5bmFtaWNTbG9wZVJlZmxvdyhib3gsIHdpZHRoLCB0b3RhbEhlaWdodCkge1xuICAgICAgICBjb25zdCB7IG9wdGlvbnMsIHBvaW50czogc2VnbWVudHMgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGNvdW50ID0gc2VnbWVudHMubGVuZ3RoO1xuICAgICAgICBjb25zdCBmaXJzdFNlZ21lbnQgPSBzZWdtZW50c1swXTtcbiAgICAgICAgbGV0IG1heFNlZ21lbnQgPSBmaXJzdFNlZ21lbnQ7XG5cbiAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgc2VnbWVudHMubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgaWYgKHNlZ21lbnRzW2lkeF0ucGVyY2VudGFnZSA+IG1heFNlZ21lbnQucGVyY2VudGFnZSkge1xuICAgICAgICAgICAgICAgIG1heFNlZ21lbnQgPSBzZWdtZW50c1tpZHhdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGxhc3RVcHBlclNpZGUgPSAoZmlyc3RTZWdtZW50LnBlcmNlbnRhZ2UgLyBtYXhTZWdtZW50LnBlcmNlbnRhZ2UpICogd2lkdGg7XG4gICAgICAgIGxldCBwcmV2aW91c09mZnNldCA9ICh3aWR0aCAtIGxhc3RVcHBlclNpZGUpIC8gMjtcbiAgICAgICAgbGV0IHByZXZpb3VzSGVpZ2h0ID0gMDtcblxuICAgICAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBjb3VudDsgaWR4KyspIHtcbiAgICAgICAgICAgIGNvbnN0IHBlcmNlbnRhZ2UgPSBzZWdtZW50c1tpZHhdLnBlcmNlbnRhZ2U7XG4gICAgICAgICAgICBjb25zdCBuZXh0U2VnbWVudCA9IHNlZ21lbnRzW2lkeCArIDFdO1xuICAgICAgICAgICAgY29uc3QgbmV4dFBlcmNlbnRhZ2UgPSAobmV4dFNlZ21lbnQgPyBuZXh0U2VnbWVudC5wZXJjZW50YWdlIDogcGVyY2VudGFnZSk7XG4gICAgICAgICAgICBjb25zdCBwb2ludHMgPSBzZWdtZW50c1tpZHhdLnBvaW50cyA9IFtdO1xuICAgICAgICAgICAgY29uc3QgaGVpZ2h0ID0gKG9wdGlvbnMuZHluYW1pY0hlaWdodCkgPyAodG90YWxIZWlnaHQgKiBwZXJjZW50YWdlKSA6ICh0b3RhbEhlaWdodCAvIGNvdW50KTtcbiAgICAgICAgICAgIGxldCBvZmZzZXQ7XG5cbiAgICAgICAgICAgIGlmICghcGVyY2VudGFnZSkge1xuICAgICAgICAgICAgICAgIG9mZnNldCA9IG5leHRQZXJjZW50YWdlID8gMCA6IHdpZHRoIC8gMjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gKHdpZHRoIC0gbGFzdFVwcGVyU2lkZSAqIChuZXh0UGVyY2VudGFnZSAvIHBlcmNlbnRhZ2UpKSAvIDI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG9mZnNldCA9IGxpbWl0VmFsdWUob2Zmc2V0LCAwLCB3aWR0aCk7XG5cbiAgICAgICAgICAgIHBvaW50cy5wdXNoKG5ldyBnZW9tLlBvaW50KGJveC54MSArIHByZXZpb3VzT2Zmc2V0LCBib3gueTEgKyBwcmV2aW91c0hlaWdodCkpO1xuICAgICAgICAgICAgcG9pbnRzLnB1c2gobmV3IGdlb20uUG9pbnQoYm94LngxICsgd2lkdGggLSBwcmV2aW91c09mZnNldCwgYm94LnkxICsgcHJldmlvdXNIZWlnaHQpKTtcbiAgICAgICAgICAgIHBvaW50cy5wdXNoKG5ldyBnZW9tLlBvaW50KGJveC54MSArIHdpZHRoIC0gb2Zmc2V0LCBib3gueTEgKyBoZWlnaHQgKyBwcmV2aW91c0hlaWdodCkpO1xuICAgICAgICAgICAgcG9pbnRzLnB1c2gobmV3IGdlb20uUG9pbnQoYm94LngxICsgb2Zmc2V0LCBib3gueTEgKyBoZWlnaHQgKyBwcmV2aW91c0hlaWdodCkpO1xuXG4gICAgICAgICAgICBwcmV2aW91c09mZnNldCA9IG9mZnNldDtcbiAgICAgICAgICAgIHByZXZpb3VzSGVpZ2h0ICs9IGhlaWdodCArIG9wdGlvbnMuc2VnbWVudFNwYWNpbmc7XG4gICAgICAgICAgICBsYXN0VXBwZXJTaWRlID0gbGltaXRWYWx1ZSh3aWR0aCAtIDIgKiBvZmZzZXQsIDAsIHdpZHRoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0YW50U2xvcGVSZWZsb3coYm94LCB3aWR0aCwgdG90YWxIZWlnaHQpIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zLCBwb2ludHM6IHNlZ21lbnRzIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBjb3VudCA9IHNlZ21lbnRzLmxlbmd0aDtcbiAgICAgICAgY29uc3QgZGVjcmVhc2luZ1dpZHRoID0gb3B0aW9ucy5uZWNrUmF0aW8gPD0gMTtcbiAgICAgICAgY29uc3QgbmVja1JhdGlvID0gZGVjcmVhc2luZ1dpZHRoID8gb3B0aW9ucy5uZWNrUmF0aW8gKiB3aWR0aCA6IHdpZHRoO1xuICAgICAgICBsZXQgcHJldmlvdXNPZmZzZXQgPSBkZWNyZWFzaW5nV2lkdGggPyAwIDogKHdpZHRoIC0gd2lkdGggLyBvcHRpb25zLm5lY2tSYXRpbykgLyAyO1xuICAgICAgICBjb25zdCB0b3BNb3N0V2lkdGggPSBkZWNyZWFzaW5nV2lkdGggPyB3aWR0aCA6IHdpZHRoIC0gcHJldmlvdXNPZmZzZXQgKiAyO1xuICAgICAgICBjb25zdCBmaW5hbE5hcnJvdyA9ICh0b3BNb3N0V2lkdGggLSBuZWNrUmF0aW8pIC8gMjtcbiAgICAgICAgbGV0IHByZXZpb3VzSGVpZ2h0ID0gMDtcblxuICAgICAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBjb3VudDsgaWR4KyspIHtcbiAgICAgICAgICAgIGNvbnN0IHBvaW50cyA9IHNlZ21lbnRzW2lkeF0ucG9pbnRzID0gW107XG4gICAgICAgICAgICBjb25zdCBwZXJjZW50YWdlID0gc2VnbWVudHNbaWR4XS5wZXJjZW50YWdlO1xuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gKG9wdGlvbnMuZHluYW1pY0hlaWdodCkgPyAoZmluYWxOYXJyb3cgKiBwZXJjZW50YWdlKSA6IChmaW5hbE5hcnJvdyAvIGNvdW50KTtcbiAgICAgICAgICAgIGNvbnN0IGhlaWdodCA9IChvcHRpb25zLmR5bmFtaWNIZWlnaHQpID8gKHRvdGFsSGVpZ2h0ICogcGVyY2VudGFnZSkgOiAodG90YWxIZWlnaHQgLyBjb3VudCk7XG5cbiAgICAgICAgICAgIHBvaW50cy5wdXNoKG5ldyBnZW9tLlBvaW50KGJveC54MSArIHByZXZpb3VzT2Zmc2V0LCBib3gueTEgKyBwcmV2aW91c0hlaWdodCkpO1xuICAgICAgICAgICAgcG9pbnRzLnB1c2gobmV3IGdlb20uUG9pbnQoYm94LngxICsgd2lkdGggLSBwcmV2aW91c09mZnNldCwgYm94LnkxICsgcHJldmlvdXNIZWlnaHQpKTtcbiAgICAgICAgICAgIHBvaW50cy5wdXNoKG5ldyBnZW9tLlBvaW50KGJveC54MSArIHdpZHRoIC0gcHJldmlvdXNPZmZzZXQgLSBvZmZzZXQsIGJveC55MSArIGhlaWdodCArIHByZXZpb3VzSGVpZ2h0KSk7XG4gICAgICAgICAgICBwb2ludHMucHVzaChuZXcgZ2VvbS5Qb2ludChib3gueDEgKyBwcmV2aW91c09mZnNldCArIG9mZnNldCxib3gueTEgKyBoZWlnaHQgKyBwcmV2aW91c0hlaWdodCkpO1xuICAgICAgICAgICAgcHJldmlvdXNPZmZzZXQgKz0gb2Zmc2V0O1xuICAgICAgICAgICAgcHJldmlvdXNIZWlnaHQgKz0gaGVpZ2h0ICsgb3B0aW9ucy5zZWdtZW50U3BhY2luZztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlZmxvdyhjaGFydEJveCkge1xuICAgICAgICBjb25zdCBwb2ludHMgPSB0aGlzLnBvaW50cztcbiAgICAgICAgY29uc3QgY291bnQgPSBwb2ludHMubGVuZ3RoO1xuXG4gICAgICAgIGlmICghY291bnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGJveCA9IGNoYXJ0Qm94LmNsb25lKCkudW5wYWQodGhpcy5sYWJlbFBhZGRpbmcoKSk7XG4gICAgICAgIGNvbnN0IHRvdGFsSGVpZ2h0ID0gYm94LmhlaWdodCgpIC0gb3B0aW9ucy5zZWdtZW50U3BhY2luZyAqIChjb3VudCAtIDEpO1xuICAgICAgICBjb25zdCB3aWR0aCA9IGJveC53aWR0aCgpO1xuXG4gICAgICAgIGlmIChvcHRpb25zLmR5bmFtaWNTbG9wZSkge1xuICAgICAgICAgICAgdGhpcy5keW5hbWljU2xvcGVSZWZsb3coYm94LCB3aWR0aCwgdG90YWxIZWlnaHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jb25zdGFudFNsb3BlUmVmbG93KGJveCwgd2lkdGgsIHRvdGFsSGVpZ2h0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGNvdW50OyBpZHgrKykge1xuICAgICAgICAgICAgcG9pbnRzW2lkeF0ucmVmbG93KGNoYXJ0Qm94KTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuc2V0RGVmYXVsdE9wdGlvbnMoRnVubmVsQ2hhcnQsIHtcbiAgICBuZWNrUmF0aW86IDAuMyxcbiAgICB3aWR0aDogMzAwLFxuICAgIGR5bmFtaWNTbG9wZTogZmFsc2UsXG4gICAgZHluYW1pY0hlaWdodDogdHJ1ZSxcbiAgICBzZWdtZW50U3BhY2luZzogMCxcbiAgICBsYWJlbHM6IHtcbiAgICAgICAgdmlzaWJsZTogZmFsc2UsXG4gICAgICAgIGFsaWduOiBDRU5URVIsXG4gICAgICAgIHBvc2l0aW9uOiBDRU5URVIsXG4gICAgICAgIHpJbmRleDogMVxuICAgIH1cbn0pO1xuXG5kZWVwRXh0ZW5kKEZ1bm5lbENoYXJ0LnByb3RvdHlwZSwgUGllQ2hhcnRNaXhpbik7XG5cbmV4cG9ydCBkZWZhdWx0IEZ1bm5lbENoYXJ0O1xuIiwiaW1wb3J0IFBsb3RBcmVhQmFzZSBmcm9tICcuL3Bsb3RhcmVhLWJhc2UnO1xuaW1wb3J0IEZ1bm5lbENoYXJ0IGZyb20gJy4uL2Z1bm5lbC1jaGFydC9mdW5uZWwtY2hhcnQnO1xuXG5pbXBvcnQgeyBhcHBlbmQgfSBmcm9tICcuLi8uLi9jb21tb24nO1xuXG5jbGFzcyBGdW5uZWxQbG90QXJlYSBleHRlbmRzIFBsb3RBcmVhQmFzZSB7XG4gICAgcmVuZGVyKCkge1xuICAgICAgICB0aGlzLmNyZWF0ZUZ1bm5lbENoYXJ0KHRoaXMuc2VyaWVzKTtcbiAgICB9XG5cbiAgICBjcmVhdGVGdW5uZWxDaGFydChzZXJpZXMpIHtcbiAgICAgICAgY29uc3QgZmlyc3RTZXJpZXMgPSBzZXJpZXNbMF07XG4gICAgICAgIGNvbnN0IGZ1bm5lbENoYXJ0ID0gbmV3IEZ1bm5lbENoYXJ0KHRoaXMsIHtcbiAgICAgICAgICAgIHNlcmllczogc2VyaWVzLFxuICAgICAgICAgICAgbGVnZW5kOiB0aGlzLm9wdGlvbnMubGVnZW5kLFxuICAgICAgICAgICAgbmVja1JhdGlvOiBmaXJzdFNlcmllcy5uZWNrUmF0aW8sXG4gICAgICAgICAgICBkeW5hbWljSGVpZ2h0OiBmaXJzdFNlcmllcy5keW5hbWljSGVpZ2h0LFxuICAgICAgICAgICAgZHluYW1pY1Nsb3BlOiBmaXJzdFNlcmllcy5keW5hbWljU2xvcGUsXG4gICAgICAgICAgICBzZWdtZW50U3BhY2luZzogZmlyc3RTZXJpZXMuc2VnbWVudFNwYWNpbmcsXG4gICAgICAgICAgICBoaWdobGlnaHQ6IGZpcnN0U2VyaWVzLmhpZ2hsaWdodFxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmFwcGVuZENoYXJ0KGZ1bm5lbENoYXJ0KTtcbiAgICB9XG5cbiAgICBhcHBlbmRDaGFydChjaGFydCwgcGFuZSkge1xuICAgICAgICBzdXBlci5hcHBlbmRDaGFydChjaGFydCwgcGFuZSk7XG4gICAgICAgIGFwcGVuZCh0aGlzLm9wdGlvbnMubGVnZW5kLml0ZW1zLCBjaGFydC5sZWdlbmRJdGVtcyk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBGdW5uZWxQbG90QXJlYTsiLCJpbXBvcnQgUGxvdEFyZWFGYWN0b3J5IGZyb20gJy4vcGxvdGFyZWEvcGxvdGFyZWEtZmFjdG9yeSc7XG5pbXBvcnQgU2VyaWVzQmluZGVyIGZyb20gJy4vc2VyaWVzLWJpbmRlcic7XG5pbXBvcnQgRGVmYXVsdEFnZ3JlZ2F0ZXMgZnJvbSAnLi9hZ2dyZWdhdGVzL2RlZmF1bHQtYWdncmVnYXRlcyc7XG5pbXBvcnQgQ2F0ZWdvcmljYWxQbG90QXJlYSBmcm9tICcuL3Bsb3RhcmVhL2NhdGVnb3JpY2FsLXBsb3RhcmVhJztcbmltcG9ydCBYWVBsb3RBcmVhIGZyb20gJy4vcGxvdGFyZWEveHktcGxvdGFyZWEnO1xuaW1wb3J0IFBpZVBsb3RBcmVhIGZyb20gJy4vcGxvdGFyZWEvcGllLXBsb3RhcmVhJztcbmltcG9ydCBEb251dFBsb3RBcmVhIGZyb20gJy4vcGxvdGFyZWEvZG9udXQtcGxvdGFyZWEnO1xuaW1wb3J0IFBvbGFyUGxvdEFyZWEgZnJvbSAnLi9wbG90YXJlYS9wb2xhci1wbG90YXJlYSc7XG5pbXBvcnQgUmFkYXJQbG90QXJlYSBmcm9tICcuL3Bsb3RhcmVhL3JhZGFyLXBsb3RhcmVhJztcbmltcG9ydCBGdW5uZWxQbG90QXJlYSBmcm9tICcuL3Bsb3RhcmVhL2Z1bm5lbC1wbG90YXJlYSc7XG5cbmltcG9ydCB7IENPTFVNTiwgRE9OVVQsIFBJRSwgRlVOTkVMLCBCQVIsIExJTkUsIFZFUlRJQ0FMX0xJTkUsIEFSRUEsIFZFUlRJQ0FMX0FSRUEsXG4gICAgQ0FORExFU1RJQ0ssIE9ITEMsIEJVTExFVCwgVkVSVElDQUxfQlVMTEVULCBCT1hfUExPVCwgVkVSVElDQUxfQk9YX1BMT1QsIFJBTkdFX0NPTFVNTixcbiAgICBSQU5HRV9CQVIsIFdBVEVSRkFMTCwgSE9SSVpPTlRBTF9XQVRFUkZBTEwsIFNDQVRURVIsIFNDQVRURVJfTElORSwgQlVCQkxFLFxuICAgIFBPTEFSX0FSRUEsIFBPTEFSX0xJTkUsIFBPTEFSX1NDQVRURVIsIFJBREFSX0FSRUEsIFJBREFSX0NPTFVNTiwgUkFEQVJfTElORSwgQ0FURUdPUlksXG4gICAgUkFOR0VfQVJFQSwgVkVSVElDQUxfUkFOR0VfQVJFQSwgWF9FUlJPUl9MT1dfRklFTEQsIFhfRVJST1JfSElHSF9GSUVMRCwgWV9FUlJPUl9MT1dfRklFTEQsIFlfRVJST1JfSElHSF9GSUVMRCxcbiAgICBFUlJPUl9MT1dfRklFTEQsIEVSUk9SX0hJR0hfRklFTEQgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBYLCBZLCBWQUxVRSB9IGZyb20gJy4uL2NvbW1vbi9jb25zdGFudHMnO1xuXG5jb25zdCBDT0xPUiA9IFwiY29sb3JcIjtcbmNvbnN0IEZJUlNUID0gXCJmaXJzdFwiO1xuY29uc3QgRlJPTSA9IFwiZnJvbVwiO1xuY29uc3QgTUFYID0gXCJtYXhcIjtcbmNvbnN0IE1JTiA9IFwibWluXCI7XG5jb25zdCBOT1RFX1RFWFQgPSBcIm5vdGVUZXh0XCI7XG5jb25zdCBTVU1NQVJZX0ZJRUxEID0gXCJzdW1tYXJ5XCI7XG5jb25zdCBUTyA9IFwidG9cIjtcblxuUGxvdEFyZWFGYWN0b3J5LmN1cnJlbnQucmVnaXN0ZXIoQ2F0ZWdvcmljYWxQbG90QXJlYSwgW1xuICAgIEJBUiwgQ09MVU1OLCBMSU5FLCBWRVJUSUNBTF9MSU5FLCBBUkVBLCBWRVJUSUNBTF9BUkVBLFxuICAgIENBTkRMRVNUSUNLLCBPSExDLCBCVUxMRVQsIFZFUlRJQ0FMX0JVTExFVCwgQk9YX1BMT1QsIFZFUlRJQ0FMX0JPWF9QTE9ULFxuICAgIFJBTkdFX0NPTFVNTiwgUkFOR0VfQkFSLCBXQVRFUkZBTEwsIEhPUklaT05UQUxfV0FURVJGQUxMLCBSQU5HRV9BUkVBLCBWRVJUSUNBTF9SQU5HRV9BUkVBXG5dKTtcblxuUGxvdEFyZWFGYWN0b3J5LmN1cnJlbnQucmVnaXN0ZXIoWFlQbG90QXJlYSwgW1xuICAgIFNDQVRURVIsIFNDQVRURVJfTElORSwgQlVCQkxFXG5dKTtcblxuUGxvdEFyZWFGYWN0b3J5LmN1cnJlbnQucmVnaXN0ZXIoUGllUGxvdEFyZWEsIFsgUElFIF0pO1xuUGxvdEFyZWFGYWN0b3J5LmN1cnJlbnQucmVnaXN0ZXIoRG9udXRQbG90QXJlYSwgWyBET05VVCBdKTtcblBsb3RBcmVhRmFjdG9yeS5jdXJyZW50LnJlZ2lzdGVyKEZ1bm5lbFBsb3RBcmVhLCBbIEZVTk5FTCBdKTtcblxuUGxvdEFyZWFGYWN0b3J5LmN1cnJlbnQucmVnaXN0ZXIoUG9sYXJQbG90QXJlYSwgWyBQT0xBUl9BUkVBLCBQT0xBUl9MSU5FLCBQT0xBUl9TQ0FUVEVSIF0pO1xuUGxvdEFyZWFGYWN0b3J5LmN1cnJlbnQucmVnaXN0ZXIoUmFkYXJQbG90QXJlYSwgWyBSQURBUl9BUkVBLCBSQURBUl9DT0xVTU4sIFJBREFSX0xJTkUgXSk7XG5cblNlcmllc0JpbmRlci5jdXJyZW50LnJlZ2lzdGVyKFxuICAgIFsgQkFSLCBDT0xVTU4sIExJTkUsIFZFUlRJQ0FMX0xJTkUsIEFSRUEsIFZFUlRJQ0FMX0FSRUEgXSxcbiAgICBbIFZBTFVFIF0sIFsgQ0FURUdPUlksIENPTE9SLCBOT1RFX1RFWFQsIEVSUk9SX0xPV19GSUVMRCwgRVJST1JfSElHSF9GSUVMRCBdXG4pO1xuXG5TZXJpZXNCaW5kZXIuY3VycmVudC5yZWdpc3RlcihcbiAgICBbIFJBTkdFX0NPTFVNTiwgUkFOR0VfQkFSLCBSQU5HRV9BUkVBLCBWRVJUSUNBTF9SQU5HRV9BUkVBIF0sXG4gICAgWyBGUk9NLCBUTyBdLCBbIENBVEVHT1JZLCBDT0xPUiwgTk9URV9URVhUIF1cbik7XG5cblNlcmllc0JpbmRlci5jdXJyZW50LnJlZ2lzdGVyKFxuICAgIFsgV0FURVJGQUxMLCBIT1JJWk9OVEFMX1dBVEVSRkFMTCBdLFxuICAgIFsgVkFMVUUgXSwgWyBDQVRFR09SWSwgQ09MT1IsIE5PVEVfVEVYVCwgU1VNTUFSWV9GSUVMRCBdXG4pO1xuXG5TZXJpZXNCaW5kZXIuY3VycmVudC5yZWdpc3RlcihbIFBPTEFSX0FSRUEsIFBPTEFSX0xJTkUsIFBPTEFSX1NDQVRURVIgXSwgWyBYLCBZIF0sIFsgQ09MT1IgXSk7XG5TZXJpZXNCaW5kZXIuY3VycmVudC5yZWdpc3RlcihbIFJBREFSX0FSRUEsIFJBREFSX0NPTFVNTiwgUkFEQVJfTElORSBdLCBbIFZBTFVFIF0sIFsgQ09MT1IgXSk7XG5cblNlcmllc0JpbmRlci5jdXJyZW50LnJlZ2lzdGVyKFxuICAgIFsgRlVOTkVMIF0sXG4gICAgWyBWQUxVRSBdLCBbIENBVEVHT1JZLCBDT0xPUiwgXCJ2aXNpYmxlSW5MZWdlbmRcIiwgXCJ2aXNpYmxlXCIgXVxuKTtcblxuRGVmYXVsdEFnZ3JlZ2F0ZXMuY3VycmVudC5yZWdpc3RlcihcbiAgICBbIEJBUiwgQ09MVU1OLCBMSU5FLCBWRVJUSUNBTF9MSU5FLCBBUkVBLCBWRVJUSUNBTF9BUkVBLCBXQVRFUkZBTEwsIEhPUklaT05UQUxfV0FURVJGQUxMIF0sXG4gICAgeyB2YWx1ZTogTUFYLCBjb2xvcjogRklSU1QsIG5vdGVUZXh0OiBGSVJTVCwgZXJyb3JMb3c6IE1JTiwgZXJyb3JIaWdoOiBNQVggfVxuKTtcblxuRGVmYXVsdEFnZ3JlZ2F0ZXMuY3VycmVudC5yZWdpc3RlcihcbiAgICBbIFJBTkdFX0NPTFVNTiwgUkFOR0VfQkFSLCBSQU5HRV9BUkVBLCBWRVJUSUNBTF9SQU5HRV9BUkVBIF0sXG4gICAgeyBmcm9tOiBNSU4sIHRvOiBNQVgsIGNvbG9yOiBGSVJTVCwgbm90ZVRleHQ6IEZJUlNUIH1cbik7XG5cbkRlZmF1bHRBZ2dyZWdhdGVzLmN1cnJlbnQucmVnaXN0ZXIoXG4gICAgWyBSQURBUl9BUkVBLCBSQURBUl9DT0xVTU4sIFJBREFSX0xJTkUgXSxcbiAgICB7IHZhbHVlOiBNQVgsIGNvbG9yOiBGSVJTVCB9XG4pO1xuXG5TZXJpZXNCaW5kZXIuY3VycmVudC5yZWdpc3RlcihcbiAgICBbIFNDQVRURVIsIFNDQVRURVJfTElORSwgQlVCQkxFIF0sXG4gICAgWyBYLCBZIF0sIFsgQ09MT1IsIE5PVEVfVEVYVCwgWF9FUlJPUl9MT1dfRklFTEQsIFhfRVJST1JfSElHSF9GSUVMRCwgWV9FUlJPUl9MT1dfRklFTEQsIFlfRVJST1JfSElHSF9GSUVMRCBdXG4pO1xuXG5TZXJpZXNCaW5kZXIuY3VycmVudC5yZWdpc3RlcihcbiAgICBbIEJVQkJMRSBdLCBbIFgsIFksIFwic2l6ZVwiIF0sIFsgQ09MT1IsIENBVEVHT1JZLCBOT1RFX1RFWFQgXVxuKTtcblxuU2VyaWVzQmluZGVyLmN1cnJlbnQucmVnaXN0ZXIoXG4gICAgWyBDQU5ETEVTVElDSywgT0hMQyBdLFxuICAgIFsgXCJvcGVuXCIsIFwiaGlnaFwiLCBcImxvd1wiLCBcImNsb3NlXCIgXSwgWyBDQVRFR09SWSwgQ09MT1IsIFwiZG93bkNvbG9yXCIsIE5PVEVfVEVYVCBdXG4pO1xuXG5EZWZhdWx0QWdncmVnYXRlcy5jdXJyZW50LnJlZ2lzdGVyKFxuICAgIFsgQ0FORExFU1RJQ0ssIE9ITEMgXSxcbiAgICB7IG9wZW46IE1BWCwgaGlnaDogTUFYLCBsb3c6IE1JTiwgY2xvc2U6IE1BWCxcbiAgICAgIGNvbG9yOiBGSVJTVCwgZG93bkNvbG9yOiBGSVJTVCwgbm90ZVRleHQ6IEZJUlNUIH1cbik7XG5cblNlcmllc0JpbmRlci5jdXJyZW50LnJlZ2lzdGVyKFxuICAgIFsgQk9YX1BMT1QsIFZFUlRJQ0FMX0JPWF9QTE9UIF0sXG4gICAgWyBcImxvd2VyXCIsIFwicTFcIiwgXCJtZWRpYW5cIiwgXCJxM1wiLCBcInVwcGVyXCIsIFwibWVhblwiLCBcIm91dGxpZXJzXCIgXSwgWyBDQVRFR09SWSwgQ09MT1IsIE5PVEVfVEVYVCBdXG4pO1xuXG5EZWZhdWx0QWdncmVnYXRlcy5jdXJyZW50LnJlZ2lzdGVyKFxuICAgIFsgQk9YX1BMT1QsIFZFUlRJQ0FMX0JPWF9QTE9UIF0sXG4gICAgeyBsb3dlcjogTUFYLCBxMTogTUFYLCBtZWRpYW46IE1BWCwgcTM6IE1BWCwgdXBwZXI6IE1BWCwgbWVhbjogTUFYLCBvdXRsaWVyczogRklSU1QsXG4gICAgICBjb2xvcjogRklSU1QsIG5vdGVUZXh0OiBGSVJTVCB9XG4pO1xuXG5TZXJpZXNCaW5kZXIuY3VycmVudC5yZWdpc3RlcihcbiAgICBbIEJVTExFVCwgVkVSVElDQUxfQlVMTEVUIF0sXG4gICAgWyBcImN1cnJlbnRcIiwgXCJ0YXJnZXRcIiBdLCBbIENBVEVHT1JZLCBDT0xPUiwgXCJ2aXNpYmxlSW5MZWdlbmRcIiwgTk9URV9URVhUIF1cbik7XG5cbkRlZmF1bHRBZ2dyZWdhdGVzLmN1cnJlbnQucmVnaXN0ZXIoXG4gICAgWyBCVUxMRVQsIFZFUlRJQ0FMX0JVTExFVCBdLFxuICAgIHsgY3VycmVudDogTUFYLCB0YXJnZXQ6IE1BWCwgY29sb3I6IEZJUlNULCBub3RlVGV4dDogRklSU1QgfVxuKTtcblxuU2VyaWVzQmluZGVyLmN1cnJlbnQucmVnaXN0ZXIoXG4gICAgWyBQSUUsIERPTlVUIF0sXG4gICAgWyBWQUxVRSBdLCBbIENBVEVHT1JZLCBDT0xPUiwgXCJleHBsb2RlXCIsIFwidmlzaWJsZUluTGVnZW5kXCIsIFwidmlzaWJsZVwiIF1cbik7IiwiaW1wb3J0IHsgZHJhd2luZyBhcyBkcmF3LCB0aHJvdHRsZSwgZ2VvbWV0cnkgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tZHJhd2luZyc7XG5cbmltcG9ydCB7IFJvb3RFbGVtZW50LCBUaXRsZSwgQ2F0ZWdvcnlBeGlzLCBQb2ludCB9IGZyb20gJy4uL2NvcmUnO1xuXG5pbXBvcnQgSGlnaGxpZ2h0IGZyb20gJy4vaGlnaGxpZ2h0JztcbmltcG9ydCBQYW5uYWJsZSBmcm9tICcuL3Bhbi1hbmQtem9vbS9wYW5uYWJsZSc7XG5pbXBvcnQgWm9vbVNlbGVjdGlvbiBmcm9tICcuL3Bhbi1hbmQtem9vbS96b29tLXNlbGVjdGlvbic7XG5pbXBvcnQgTW91c2V3aGVlbFpvb20gZnJvbSAnLi9wYW4tYW5kLXpvb20vbW91c2V3aGVlbC16b29tJztcbmltcG9ydCBMZWdlbmQgZnJvbSAnLi9sZWdlbmQvbGVnZW5kJztcbmltcG9ydCBQbG90QXJlYUZhY3RvcnkgZnJvbSAnLi9wbG90YXJlYS9wbG90YXJlYS1mYWN0b3J5JztcbmltcG9ydCBTZWxlY3Rpb24gZnJvbSAnLi9zZWxlY3Rpb24nO1xuaW1wb3J0IFNlcmllc0JpbmRlciBmcm9tICcuL3Nlcmllcy1iaW5kZXInO1xuaW1wb3J0IFRvb2x0aXAgZnJvbSAnLi90b29sdGlwL3Rvb2x0aXAnO1xuaW1wb3J0IFNoYXJlZFRvb2x0aXAgZnJvbSAnLi90b29sdGlwL3NoYXJlZC10b29sdGlwJztcbmltcG9ydCBDYXRlZ29yaWNhbFBsb3RBcmVhIGZyb20gJy4vcGxvdGFyZWEvY2F0ZWdvcmljYWwtcGxvdGFyZWEnO1xuaW1wb3J0IFBsb3RBcmVhQmFzZSBmcm9tICcuL3Bsb3RhcmVhL3Bsb3RhcmVhLWJhc2UnO1xuaW1wb3J0IHsgQ2hhcnRTZXJ2aWNlLCBEb21FdmVudHNCdWlsZGVyIH0gZnJvbSAnLi4vc2VydmljZXMnO1xuaW1wb3J0IGdldEZpZWxkIGZyb20gJy4vdXRpbHMvZ2V0LWZpZWxkJztcbmltcG9ydCBpc0RhdGVBeGlzIGZyb20gJy4vdXRpbHMvaXMtZGF0ZS1heGlzJztcbmltcG9ydCBnZXREYXRlRmllbGQgZnJvbSAnLi91dGlscy9nZXQtZGF0ZS1maWVsZCc7XG5pbXBvcnQgeyBDaGFydFBhbmUsIENoYXJ0UGxvdEFyZWEsIGZpbmRBeGlzQnlOYW1lIH0gZnJvbSAnLi9hcGktZWxlbWVudHMnO1xuXG5pbXBvcnQgeyBYLCBZLCBWQUxVRSwgREVGQVVMVF9XSURUSCwgREVGQVVMVF9IRUlHSFQsIERFRkFVTFRfU0VSSUVTX09QQUNJVFkgfSBmcm9tICcuLi9jb21tb24vY29uc3RhbnRzJztcbmltcG9ydCB7IGFkZENsYXNzLCBDbGFzcywgc2V0RGVmYXVsdE9wdGlvbnMsIGRlZXBFeHRlbmQsIGRlZmluZWQsIGZpbmQsIGlzT2JqZWN0LCBpc0Z1bmN0aW9uLCBlbGVtZW50U2l6ZSwgZWxlbWVudE9mZnNldCxcbiAgICAgICAgIGVsZW1lbnRTY2FsZSwgZWxlbWVudFN0eWxlcywgZXZlbnRDb29yZGluYXRlcywgYmluZEV2ZW50cywgdW5iaW5kRXZlbnRzLCBtb3VzZXdoZWVsRGVsdGEsIEZvbnRMb2FkZXIsIGluQXJyYXksIGxhc3QsIHJvdW5kLCBIYXNoTWFwIH0gZnJvbSAnLi4vY29tbW9uJztcblxuaW1wb3J0IHsgZGF0ZUNvbXBhcmVyIH0gZnJvbSAnLi4vZGF0ZS11dGlscyc7XG5cbmltcG9ydCB7IERSQUdfU1RBUlQsIERSQUcsIERSQUdfRU5ELCBaT09NX1NUQVJULCBaT09NLCBaT09NX0VORCwgU0VMRUNUX1NUQVJULCBTRUxFQ1QsIFNFTEVDVF9FTkQsIFBMT1RfQVJFQV9IT1ZFUiwgUExPVF9BUkVBX0xFQVZFLFxuICAgIFJFTkRFUiwgQ0FURUdPUlksIFBJRSwgRE9OVVQsIEZVTk5FTCwgQ09MVU1OLCBNT1VTRVdIRUVMLCBNT1VTRVdIRUVMX0RFTEFZLCBTSE9XX1RPT0xUSVAsIFNFUklFU19IT1ZFUiB9IGZyb20gJy4vY29uc3RhbnRzJztcblxuaW1wb3J0ICcuL2FuaW1hdGlvbnMnO1xuaW1wb3J0ICcuL3JlZ2lzdGVyLWNoYXJ0cyc7XG5cbmNvbnN0IEFYSVNfTkFNRVMgPSBbIENBVEVHT1JZLCBWQUxVRSwgWCwgWSBdO1xuXG5jb25zdCBNT1VTRU1PVkUgPSBcIm1vdXNlbW92ZVwiO1xuY29uc3QgQ09OVEVYVE1FTlUgPSBcImNvbnRleHRtZW51XCI7XG5jb25zdCBNT1VTRUxFQVZFID0gXCJtb3VzZWxlYXZlXCI7XG5jb25zdCBNT1VTRU1PVkVfREVMQVkgPSAyMDtcblxuY2xhc3MgQ2hhcnQgZXh0ZW5kcyBDbGFzcyB7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudCwgdXNlck9wdGlvbnMsIHRoZW1lT3B0aW9ucywgY29udGV4dCA9IHt9KSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5vYnNlcnZlcnMgPSBbXTtcbiAgICAgICAgdGhpcy5hZGRPYnNlcnZlcihjb250ZXh0Lm9ic2VydmVyKTtcbiAgICAgICAgdGhpcy5jaGFydFNlcnZpY2UgPSBuZXcgQ2hhcnRTZXJ2aWNlKHRoaXMsIGNvbnRleHQpO1xuICAgICAgICB0aGlzLmNoYXJ0U2VydmljZS50aGVtZSA9IHRoZW1lT3B0aW9ucztcblxuICAgICAgICB0aGlzLl9pbml0RWxlbWVudChlbGVtZW50KTtcblxuICAgICAgICBjb25zdCBvcHRpb25zID0gZGVlcEV4dGVuZCh7fSwgdGhpcy5vcHRpb25zLCB1c2VyT3B0aW9ucyk7XG4gICAgICAgIHRoaXMuX29yaWdpbmFsT3B0aW9ucyA9IGRlZXBFeHRlbmQoe30sIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLl90aGVtZSA9IHRoZW1lT3B0aW9ucztcbiAgICAgICAgdGhpcy5faW5pdFRoZW1lKG9wdGlvbnMsIHRoZW1lT3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5faW5pdEhhbmRsZXJzKCk7XG4gICAgICAgIHRoaXMuX2luaXRTdXJmYWNlKCk7XG5cbiAgICAgICAgdGhpcy5iaW5kQ2F0ZWdvcmllcygpO1xuICAgICAgICBGb250TG9hZGVyLnByZWxvYWRGb250cyh1c2VyT3B0aW9ucywgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5mb250TG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGlmICghdGhpcy5fZGVzdHJveWVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCdpbml0Jyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVkcmF3KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fYXR0YWNoRXZlbnRzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIF9pbml0RWxlbWVudChlbGVtZW50KSB7XG4gICAgICAgIHRoaXMuX3NldEVsZW1lbnRDbGFzcyhlbGVtZW50KTtcbiAgICAgICAgZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcbiAgICAgICAgd2hpbGUgKGVsZW1lbnQuZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVDaGlsZChlbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgfVxuXG4gICAgX3NldEVsZW1lbnRDbGFzcyhlbGVtZW50KSB7XG4gICAgICAgIGFkZENsYXNzKGVsZW1lbnQsIFwiay1jaGFydFwiKTtcbiAgICB9XG5cbiAgICBfaW5pdFRoZW1lKG9wdGlvbnMsIHRoZW1lT3B0aW9ucykge1xuICAgICAgICBjb25zdCBzZXJpZXNDb3BpZXMgPSBbXTtcbiAgICAgICAgY29uc3Qgc2VyaWVzID0gb3B0aW9ucy5zZXJpZXMgfHwgW107XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHNlcmllc0NvcGllcy5wdXNoKE9iamVjdC5hc3NpZ24oe30sIHNlcmllc1tpXSkpO1xuICAgICAgICB9XG4gICAgICAgIG9wdGlvbnMuc2VyaWVzID0gc2VyaWVzQ29waWVzO1xuXG4gICAgICAgIHJlc29sdmVBeGlzQWxpYXNlcyhvcHRpb25zKTtcbiAgICAgICAgdGhpcy5hcHBseURlZmF1bHRzKG9wdGlvbnMsIHRoZW1lT3B0aW9ucyk7XG5cbiAgICAgICAgLy8gQ2xlYW4gdXAgZGVmYXVsdCBpZiBub3Qgb3ZlcnJpZGVuIGJ5IGRhdGEgYXR0cmlidXRlc1xuICAgICAgICBpZiAob3B0aW9ucy5zZXJpZXNDb2xvcnMgPT09IG51bGwpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBvcHRpb25zLnNlcmllc0NvbG9ycztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IGRlZXBFeHRlbmQoe30sIHRoZW1lT3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuYXBwbHlTZXJpZXNDb2xvcnMoKTtcbiAgICB9XG5cbiAgICBnZXRTaXplKCkge1xuICAgICAgICBjb25zdCBjaGFydEFyZWEgPSB0aGlzLm9wdGlvbnMuY2hhcnRBcmVhIHx8IHt9O1xuICAgICAgICBjb25zdCB3aWR0aCA9IGNoYXJ0QXJlYS53aWR0aCA/IHBhcnNlSW50KGNoYXJ0QXJlYS53aWR0aCwgMTApIDogTWF0aC5mbG9vcih0aGlzLmVsZW1lbnQub2Zmc2V0V2lkdGgpO1xuICAgICAgICBjb25zdCBoZWlnaHQgPSBjaGFydEFyZWEuaGVpZ2h0ID8gcGFyc2VJbnQoY2hhcnRBcmVhLmhlaWdodCwgMTApIDogTWF0aC5mbG9vcih0aGlzLmVsZW1lbnQub2Zmc2V0SGVpZ2h0KTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHRcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICByZXNpemUoZm9yY2UpIHtcbiAgICAgICAgY29uc3Qgc2l6ZSA9IHRoaXMuZ2V0U2l6ZSgpO1xuICAgICAgICBjb25zdCBjdXJyZW50U2l6ZSA9IHRoaXMuX3NpemU7XG4gICAgICAgIGNvbnN0IGhhc1NpemUgPSBzaXplLndpZHRoID4gMCB8fCBzaXplLmhlaWdodCA+IDA7XG5cbiAgICAgICAgaWYgKGZvcmNlIHx8IGhhc1NpemUgJiYgKCFjdXJyZW50U2l6ZSB8fCBzaXplLndpZHRoICE9PSBjdXJyZW50U2l6ZS53aWR0aCB8fCBzaXplLmhlaWdodCAhPT0gY3VycmVudFNpemUuaGVpZ2h0KSkge1xuICAgICAgICAgICAgdGhpcy5fc2l6ZSA9IHNpemU7XG4gICAgICAgICAgICB0aGlzLl9yZXNpemUoc2l6ZSwgZm9yY2UpO1xuICAgICAgICAgICAgdGhpcy50cmlnZ2VyKFwicmVzaXplXCIsIHNpemUpO1xuICAgICAgICB9IGVsc2UgaWYgKGhhc1NpemUgJiYgdGhpcy5fc2VsZWN0aW9ucyAmJiBmaW5kKHRoaXMuX3NlbGVjdGlvbnMsIHMgPT4gIXMudmlzaWJsZSkpIHtcbiAgICAgICAgICAgIHRoaXMuX2Rlc3Ryb3lTZWxlY3Rpb25zKCk7XG4gICAgICAgICAgICB0aGlzLl9zZXR1cFNlbGVjdGlvbigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3Jlc2l6ZSgpIHtcbiAgICAgICAgdGhpcy5fbm9UcmFuc2l0aW9uc1JlZHJhdygpO1xuICAgIH1cblxuICAgIHJlZHJhdyhwYW5lTmFtZSkge1xuICAgICAgICB0aGlzLmFwcGx5RGVmYXVsdHModGhpcy5vcHRpb25zKTtcbiAgICAgICAgdGhpcy5hcHBseVNlcmllc0NvbG9ycygpO1xuXG4gICAgICAgIGlmIChwYW5lTmFtZSkge1xuICAgICAgICAgICAgY29uc3QgcGxvdEFyZWEgPSB0aGlzLl9tb2RlbC5fcGxvdEFyZWE7XG4gICAgICAgICAgICBjb25zdCBwYW5lID0gcGxvdEFyZWEuZmluZFBhbmUocGFuZU5hbWUpO1xuICAgICAgICAgICAgcGxvdEFyZWEucmVkcmF3KHBhbmUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fcmVkcmF3KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRBeGlzKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGZpbmRBeGlzQnlOYW1lKG5hbWUsIHRoaXMuX3Bsb3RBcmVhLmF4ZXMpO1xuICAgIH1cblxuICAgIGZpbmRBeGlzQnlOYW1lKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QXhpcyhuYW1lKTtcbiAgICB9XG5cbiAgICBmaW5kUGFuZUJ5TmFtZShuYW1lKSB7XG4gICAgICAgIGNvbnN0IHBhbmVzID0gdGhpcy5fcGxvdEFyZWEucGFuZXM7XG5cbiAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgcGFuZXMubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgaWYgKHBhbmVzW2lkeF0ub3B0aW9ucy5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDaGFydFBhbmUocGFuZXNbaWR4XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmaW5kUGFuZUJ5SW5kZXgoaWR4KSB7XG4gICAgICAgIGNvbnN0IHBhbmVzID0gdGhpcy5fcGxvdEFyZWEucGFuZXM7XG4gICAgICAgIGlmIChwYW5lc1tpZHhdKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IENoYXJ0UGFuZShwYW5lc1tpZHhdKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHBsb3RBcmVhKCkge1xuICAgICAgICByZXR1cm4gbmV3IENoYXJ0UGxvdEFyZWEodGhpcy5fcGxvdEFyZWEpO1xuICAgIH1cblxuICAgIHRvZ2dsZUhpZ2hsaWdodChzaG93LCBmaWx0ZXIpIHtcbiAgICAgICAgY29uc3QgcGxvdEFyZWEgPSB0aGlzLl9wbG90QXJlYTtcbiAgICAgICAgY29uc3QgZmlyc3RTZXJpZXMgPSAocGxvdEFyZWEuc3JjU2VyaWVzIHx8IHBsb3RBcmVhLnNlcmllcyB8fCBbXSlbMF07XG4gICAgICAgIGxldCBwb2ludHM7XG5cbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oZmlsdGVyKSkge1xuICAgICAgICAgICAgcG9pbnRzID0gcGxvdEFyZWEuZmlsdGVyUG9pbnRzKGZpbHRlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgc2VyaWVzTmFtZSwgY2F0ZWdvcnlOYW1lO1xuICAgICAgICAgICAgaWYgKGlzT2JqZWN0KGZpbHRlcikpIHtcbiAgICAgICAgICAgICAgICBzZXJpZXNOYW1lID0gZmlsdGVyLnNlcmllcztcbiAgICAgICAgICAgICAgICBjYXRlZ29yeU5hbWUgPSBmaWx0ZXIuY2F0ZWdvcnk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNlcmllc05hbWUgPSBjYXRlZ29yeU5hbWUgPSBmaWx0ZXI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChmaXJzdFNlcmllcy50eXBlID09PSBET05VVCkge1xuICAgICAgICAgICAgICAgIHBvaW50cyA9IHBvaW50QnlDYXRlZ29yeU5hbWUocGxvdEFyZWEucG9pbnRzQnlTZXJpZXNOYW1lKHNlcmllc05hbWUpLCBjYXRlZ29yeU5hbWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChmaXJzdFNlcmllcy50eXBlID09PSBQSUUgfHwgZmlyc3RTZXJpZXMudHlwZSA9PT0gRlVOTkVMKSB7XG4gICAgICAgICAgICAgICAgcG9pbnRzID0gcG9pbnRCeUNhdGVnb3J5TmFtZSgocGxvdEFyZWEuY2hhcnRzWzBdIHx8IHt9KS5wb2ludHMsIGNhdGVnb3J5TmFtZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHBvaW50cyA9IHBsb3RBcmVhLnBvaW50c0J5U2VyaWVzTmFtZShzZXJpZXNOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwb2ludHMpIHtcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlUG9pbnRzSGlnaGxpZ2h0KHNob3csIHBvaW50cyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0b2dnbGVQb2ludHNIaWdobGlnaHQoc2hvdywgcG9pbnRzKSB7XG4gICAgICAgIGNvbnN0IGhpZ2hsaWdodCA9IHRoaXMuX2hpZ2hsaWdodDtcbiAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgcG9pbnRzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgICAgIGhpZ2hsaWdodC50b2dnbGVQb2ludEhpZ2hsaWdodChwb2ludHNbaWR4XSwgc2hvdyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzaG93VG9vbHRpcChmaWx0ZXIpIHtcbiAgICAgICAgY29uc3Qgc2hhcmVkID0gdGhpcy5fc2hhcmVkVG9vbHRpcCgpO1xuICAgICAgICBjb25zdCB7IF90b29sdGlwOiB0b29sdGlwLCBfcGxvdEFyZWE6IHBsb3RBcmVhIH0gPSB0aGlzO1xuICAgICAgICBsZXQgcG9pbnQsIGNhdGVnb3J5SW5kZXg7XG5cbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oZmlsdGVyKSkge1xuICAgICAgICAgICAgcG9pbnQgPSBwbG90QXJlYS5maW5kUG9pbnQoZmlsdGVyKTtcbiAgICAgICAgICAgIGlmIChwb2ludCAmJiBzaGFyZWQpIHtcbiAgICAgICAgICAgICAgICBjYXRlZ29yeUluZGV4ID0gcG9pbnQuY2F0ZWdvcnlJeDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChzaGFyZWQgJiYgZGVmaW5lZChmaWx0ZXIpKSB7XG4gICAgICAgICAgICBjYXRlZ29yeUluZGV4ID0gcGxvdEFyZWEuY2F0ZWdvcnlBeGlzLmNhdGVnb3J5SW5kZXgoZmlsdGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaGFyZWQpIHtcbiAgICAgICAgICAgIGlmIChjYXRlZ29yeUluZGV4ID49IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwb2ludHMgPSB0aGlzLl9wbG90QXJlYS5wb2ludHNCeUNhdGVnb3J5SW5kZXgoY2F0ZWdvcnlJbmRleCk7XG4gICAgICAgICAgICAgICAgdG9vbHRpcC5zaG93QXQocG9pbnRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChwb2ludCkge1xuICAgICAgICAgICAgdG9vbHRpcC5zaG93KHBvaW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhpZGVUb29sdGlwKCkge1xuICAgICAgICB0aGlzLl90b29sdGlwLmhpZGUoKTtcbiAgICB9XG5cbiAgICBfaW5pdFN1cmZhY2UoKSB7XG4gICAgICAgIGNvbnN0IHN1cmZhY2UgPSB0aGlzLnN1cmZhY2U7XG4gICAgICAgIGNvbnN0IHdyYXAgPSB0aGlzLl9zdXJmYWNlV3JhcCgpO1xuXG4gICAgICAgIGNvbnN0IGNoYXJ0QXJlYSA9IHRoaXMub3B0aW9ucy5jaGFydEFyZWEgfHwge307XG4gICAgICAgIGlmIChjaGFydEFyZWEud2lkdGgpIHtcbiAgICAgICAgICAgIGVsZW1lbnRTaXplKHdyYXAsIHsgd2lkdGg6IGNoYXJ0QXJlYS53aWR0aCB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2hhcnRBcmVhLmhlaWdodCkge1xuICAgICAgICAgICAgZWxlbWVudFNpemUod3JhcCwgeyBoZWlnaHQ6IGNoYXJ0QXJlYS5oZWlnaHQgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXN1cmZhY2UgfHwgc3VyZmFjZS5vcHRpb25zLnR5cGUgIT09IHRoaXMub3B0aW9ucy5yZW5kZXJBcykge1xuICAgICAgICAgICAgdGhpcy5fZGVzdHJveVN1cmZhY2UoKTtcblxuICAgICAgICAgICAgdGhpcy5zdXJmYWNlID0gZHJhdy5TdXJmYWNlLmNyZWF0ZSh3cmFwLCB7XG4gICAgICAgICAgICAgICAgdHlwZTogdGhpcy5vcHRpb25zLnJlbmRlckFzXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5zdXJmYWNlLmJpbmQoXCJtb3VzZWVudGVyXCIsIHRoaXMuX3N1cmZhY2VNb3VzZWVudGVySGFuZGxlcik7XG4gICAgICAgICAgICB0aGlzLnN1cmZhY2UuYmluZChcIm1vdXNlbGVhdmVcIiwgdGhpcy5fc3VyZmFjZU1vdXNlbGVhdmVIYW5kbGVyKTtcblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdXJmYWNlLmNsZWFyKCk7XG4gICAgICAgICAgICB0aGlzLnN1cmZhY2UucmVzaXplKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfc3VyZmFjZVdyYXAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnQ7XG4gICAgfVxuXG4gICAgX3JlZHJhdygpIHtcbiAgICAgICAgY29uc3QgbW9kZWwgPSB0aGlzLl9nZXRNb2RlbCgpO1xuICAgICAgICB0aGlzLl9zaXplID0ge1xuICAgICAgICAgICAgd2lkdGg6IG1vZGVsLm9wdGlvbnMud2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IG1vZGVsLm9wdGlvbnMuaGVpZ2h0XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5fZGVzdHJveVZpZXcoKTtcblxuICAgICAgICB0aGlzLl9tb2RlbCA9IG1vZGVsO1xuICAgICAgICB0aGlzLl9wbG90QXJlYSA9IG1vZGVsLl9wbG90QXJlYTtcblxuICAgICAgICBtb2RlbC5yZW5kZXJWaXN1YWwoKTtcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnRyYW5zaXRpb25zICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgbW9kZWwudHJhdmVyc2UoZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LmFuaW1hdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmFuaW1hdGlvbi5zZXR1cCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5faW5pdFN1cmZhY2UoKTtcbiAgICAgICAgdGhpcy5zdXJmYWNlLmRyYXcobW9kZWwudmlzdWFsKTtcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnRyYW5zaXRpb25zICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgbW9kZWwudHJhdmVyc2UoZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LmFuaW1hdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmFuaW1hdGlvbi5wbGF5KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl90b29sdGlwID0gdGhpcy5fY3JlYXRlVG9vbHRpcCgpO1xuICAgICAgICB0aGlzLl9oaWdobGlnaHQgPSBuZXcgSGlnaGxpZ2h0KCk7XG4gICAgICAgIHRoaXMuX3NldHVwU2VsZWN0aW9uKCk7XG4gICAgICAgIHRoaXMuX2NyZWF0ZVBhbm5hYmxlKCk7XG4gICAgICAgIHRoaXMuX2NyZWF0ZVpvb21TZWxlY3Rpb24oKTtcbiAgICAgICAgdGhpcy5fY3JlYXRlTW91c2V3aGVlbFpvb20oKTtcblxuICAgICAgICB0aGlzLnRyaWdnZXIoUkVOREVSKTtcbiAgICAgICAgdHJpZ2dlclBhbmVSZW5kZXIodGhpcy5fcGxvdEFyZWEucGFuZXMpO1xuXG4gICAgICAgIGlmICghdGhpcy5fbmF2U3RhdGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2NhbmNlbERvbUV2ZW50cygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZXhwb3J0VmlzdWFsKGV4cG9ydE9wdGlvbnMpIHtcbiAgICAgICAgbGV0IHZpc3VhbDtcbiAgICAgICAgaWYgKGV4cG9ydE9wdGlvbnMgJiYgKGV4cG9ydE9wdGlvbnMud2lkdGggfHwgZXhwb3J0T3B0aW9ucy5oZWlnaHQgfHwgZXhwb3J0T3B0aW9ucy5vcHRpb25zKSkge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudE9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgICAgICBjb25zdCBvcHRpb25zID0gZGVlcEV4dGVuZCh7fSwgZXhwb3J0T3B0aW9ucy5vcHRpb25zLCB7XG4gICAgICAgICAgICAgICAgY2hhcnRBcmVhOiB7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBleHBvcnRPcHRpb25zLndpZHRoLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGV4cG9ydE9wdGlvbnMuaGVpZ2h0XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNsZWFyTWlzc2luZ1ZhbHVlcyh0aGlzLl9vcmlnaW5hbE9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zID0gZGVlcEV4dGVuZCh7fSwgdGhpcy5fb3JpZ2luYWxPcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHRoaXMuX2luaXRUaGVtZSh0aGlzLm9wdGlvbnMsIHRoaXMuX3RoZW1lKTtcbiAgICAgICAgICAgIHRoaXMuYmluZENhdGVnb3JpZXMoKTtcblxuICAgICAgICAgICAgY29uc3QgbW9kZWwgPSB0aGlzLl9nZXRNb2RlbCgpO1xuXG4gICAgICAgICAgICBtb2RlbC5yZW5kZXJWaXN1YWwoKTtcbiAgICAgICAgICAgIHRyaWdnZXJQYW5lUmVuZGVyKG1vZGVsLl9wbG90QXJlYS5wYW5lcyk7XG5cbiAgICAgICAgICAgIHZpc3VhbCA9IG1vZGVsLnZpc3VhbDtcblxuICAgICAgICAgICAgdGhpcy5vcHRpb25zID0gY3VycmVudE9wdGlvbnM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2aXN1YWwgPSB0aGlzLnN1cmZhY2UuZXhwb3J0VmlzdWFsKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmlzdWFsO1xuICAgIH1cblxuICAgIF9zaGFyZWRUb29sdGlwKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGxvdEFyZWEgaW5zdGFuY2VvZiBDYXRlZ29yaWNhbFBsb3RBcmVhICYmIHRoaXMub3B0aW9ucy50b29sdGlwICYmIHRoaXMub3B0aW9ucy50b29sdGlwLnNoYXJlZDtcbiAgICB9XG5cbiAgICBfY3JlYXRlUGFubmFibGUoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGlmIChvcHRpb25zLnBhbm5hYmxlICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgdGhpcy5fcGFubmFibGUgPSBuZXcgUGFubmFibGUodGhpcy5fcGxvdEFyZWEsIG9wdGlvbnMucGFubmFibGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2NyZWF0ZVpvb21TZWxlY3Rpb24oKSB7XG4gICAgICAgIGNvbnN0IHpvb21hYmxlID0gdGhpcy5vcHRpb25zLnpvb21hYmxlO1xuICAgICAgICBjb25zdCBzZWxlY3Rpb24gPSAoem9vbWFibGUgfHwge30pLnNlbGVjdGlvbjtcbiAgICAgICAgaWYgKHpvb21hYmxlICE9PSBmYWxzZSAmJiBzZWxlY3Rpb24gIT09IGZhbHNlKSB7XG4gICAgICAgICAgICB0aGlzLl96b29tU2VsZWN0aW9uID0gbmV3IFpvb21TZWxlY3Rpb24odGhpcywgc2VsZWN0aW9uKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9jcmVhdGVNb3VzZXdoZWVsWm9vbSgpIHtcbiAgICAgICAgY29uc3Qgem9vbWFibGUgPSB0aGlzLm9wdGlvbnMuem9vbWFibGU7XG4gICAgICAgIGNvbnN0IG1vdXNld2hlZWwgPSAoem9vbWFibGUgfHwge30pLm1vdXNld2hlZWw7XG4gICAgICAgIGlmICh6b29tYWJsZSAhPT0gZmFsc2UgJiYgbW91c2V3aGVlbCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRoaXMuX21vdXNld2hlZWxab29tID0gbmV3IE1vdXNld2hlZWxab29tKHRoaXMsIG1vdXNld2hlZWwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3RvZ2dsZURyYWdab29tRXZlbnRzKCkge1xuICAgICAgICBjb25zdCBwYW5uYWJsZSA9IHRoaXMub3B0aW9ucy5wYW5uYWJsZTtcbiAgICAgICAgY29uc3Qgem9vbWFibGUgPSB0aGlzLm9wdGlvbnMuem9vbWFibGU7XG4gICAgICAgIGNvbnN0IHNlbGVjdGlvbiA9ICh6b29tYWJsZSB8fCB7fSkuc2VsZWN0aW9uO1xuICAgICAgICBjb25zdCBtb3VzZXdoZWVsID0gKHpvb21hYmxlIHx8IHt9KS5tb3VzZXdoZWVsO1xuICAgICAgICBjb25zdCBhbGxvd0RyYWcgPSAhcGFubmFibGUgJiYgKHpvb21hYmxlID09PSBmYWxzZSB8fCBzZWxlY3Rpb24gPT09IGZhbHNlKSAmJiAhdGhpcy5yZXF1aXJlc0hhbmRsZXJzKFsgRFJBR19TVEFSVCwgRFJBRywgRFJBR19FTkQgXSk7XG4gICAgICAgIGNvbnN0IGFsbG93Wm9vbSA9ICh6b29tYWJsZSA9PT0gZmFsc2UgfHwgbW91c2V3aGVlbCA9PT0gZmFsc2UpICYmICF0aGlzLnJlcXVpcmVzSGFuZGxlcnMoWyBaT09NX1NUQVJULCBaT09NLCBaT09NX0VORCBdKTtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMuZWxlbWVudDtcblxuICAgICAgICBpZiAodGhpcy5fZHJhZ1pvb21FbmFibGVkICYmIGFsbG93RHJhZyAmJiBhbGxvd1pvb20pIHtcbiAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUudG91Y2hBY3Rpb24gPSB0aGlzLl90b3VjaEFjdGlvbiB8fCAnJztcbiAgICAgICAgICAgIHRoaXMuX2RyYWdab29tRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLl9kcmFnWm9vbUVuYWJsZWQgJiYgIShhbGxvd0RyYWcgJiYgYWxsb3dab29tKSkge1xuICAgICAgICAgICAgZWxlbWVudC5zdHlsZS50b3VjaEFjdGlvbiA9IFwibm9uZVwiO1xuXG4gICAgICAgICAgICB0aGlzLl9kcmFnWm9vbUVuYWJsZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fdG9nZ2xlRG9tRXZlbnRzKCFhbGxvd0RyYWcsICFhbGxvd1pvb20pO1xuICAgIH1cblxuICAgIF90b2dnbGVEb21FdmVudHMoZHJhZywgem9vbSkge1xuICAgICAgICBjb25zdCBkb21FdmVudHMgPSB0aGlzLmRvbUV2ZW50cztcbiAgICAgICAgaWYgKCFkb21FdmVudHMpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkb21FdmVudHMudG9nZ2xlRHJhZykge1xuICAgICAgICAgICAgZG9tRXZlbnRzLnRvZ2dsZURyYWcoZHJhZyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZG9tRXZlbnRzLnRvZ2dsZVpvb20pIHtcbiAgICAgICAgICAgIGRvbUV2ZW50cy50b2dnbGVab29tKHpvb20pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2NyZWF0ZVRvb2x0aXAoKSB7XG4gICAgICAgIGNvbnN0IHsgb3B0aW9uczogeyB0b29sdGlwOiB0b29sdGlwT3B0aW9ucyB9IH0gPSB0aGlzO1xuICAgICAgICBsZXQgdG9vbHRpcDtcblxuICAgICAgICBpZiAodGhpcy5fc2hhcmVkVG9vbHRpcCgpKSB7XG4gICAgICAgICAgICB0b29sdGlwID0gdGhpcy5fY3JlYXRlU2hhcmVkVG9vbHRpcCh0b29sdGlwT3B0aW9ucyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0b29sdGlwID0gbmV3IFRvb2x0aXAodGhpcy5jaGFydFNlcnZpY2UsIHRvb2x0aXBPcHRpb25zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0b29sdGlwO1xuICAgIH1cblxuICAgIF9jcmVhdGVTaGFyZWRUb29sdGlwKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTaGFyZWRUb29sdGlwKHRoaXMuX3Bsb3RBcmVhLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBhcHBseURlZmF1bHRzKG9wdGlvbnMsIHRoZW1lT3B0aW9ucykge1xuICAgICAgICBhcHBseUF4aXNEZWZhdWx0cyhvcHRpb25zLCB0aGVtZU9wdGlvbnMpO1xuICAgICAgICBhcHBseVNlcmllc0RlZmF1bHRzKG9wdGlvbnMsIHRoZW1lT3B0aW9ucyk7XG4gICAgfVxuXG4gICAgYXBwbHlTZXJpZXNDb2xvcnMoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHNlcmllcyA9IG9wdGlvbnMuc2VyaWVzO1xuICAgICAgICBjb25zdCBjb2xvcnMgPSBvcHRpb25zLnNlcmllc0NvbG9ycyB8fCBbXTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcmllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudFNlcmllcyA9IHNlcmllc1tpXTtcbiAgICAgICAgICAgIGNvbnN0IHNlcmllc0NvbG9yID0gY29sb3JzW2kgJSBjb2xvcnMubGVuZ3RoXTtcbiAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRzID0gY3VycmVudFNlcmllcy5fZGVmYXVsdHM7XG5cbiAgICAgICAgICAgIGN1cnJlbnRTZXJpZXMuY29sb3IgPSBjdXJyZW50U2VyaWVzLmNvbG9yIHx8IHNlcmllc0NvbG9yO1xuICAgICAgICAgICAgaWYgKGRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdHMuY29sb3IgPSBkZWZhdWx0cy5jb2xvciB8fCBzZXJpZXNDb2xvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9nZXRNb2RlbCgpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgcGxvdEFyZWEgPSB0aGlzLl9jcmVhdGVQbG90QXJlYSgpO1xuICAgICAgICBjb25zdCBtb2RlbCA9IG5ldyBSb290RWxlbWVudCh0aGlzLl9tb2RlbE9wdGlvbnMoKSk7XG4gICAgICAgIG1vZGVsLmNoYXJ0ID0gdGhpcztcbiAgICAgICAgbW9kZWwuX3Bsb3RBcmVhID0gcGxvdEFyZWE7XG5cbiAgICAgICAgVGl0bGUuYnVpbGRUaXRsZShvcHRpb25zLnRpdGxlLCBtb2RlbCk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMubGVnZW5kICYmIG9wdGlvbnMubGVnZW5kLnZpc2libGUpIHtcbiAgICAgICAgICAgIG1vZGVsLmFwcGVuZChuZXcgTGVnZW5kKHBsb3RBcmVhLm9wdGlvbnMubGVnZW5kLCB0aGlzLmNoYXJ0U2VydmljZSkpO1xuICAgICAgICB9XG4gICAgICAgIG1vZGVsLmFwcGVuZChwbG90QXJlYSk7XG4gICAgICAgIG1vZGVsLnJlZmxvdygpO1xuXG4gICAgICAgIHJldHVybiBtb2RlbDtcbiAgICB9XG5cbiAgICBfbW9kZWxPcHRpb25zKCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBzaXplID0gdGhpcy5nZXRTaXplKCk7XG5cbiAgICAgICAgcmV0dXJuIGRlZXBFeHRlbmQoe1xuICAgICAgICAgICAgdHJhbnNpdGlvbnM6IG9wdGlvbnMudHJhbnNpdGlvbnMsXG4gICAgICAgICAgICB3aWR0aDogc2l6ZS53aWR0aCB8fCBERUZBVUxUX1dJRFRILFxuICAgICAgICAgICAgaGVpZ2h0OiBzaXplLmhlaWdodCB8fCBERUZBVUxUX0hFSUdIVFxuICAgICAgICB9LCBvcHRpb25zLmNoYXJ0QXJlYSk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZVBsb3RBcmVhKHNraXBTZXJpZXMpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcblxuICAgICAgICBjb25zdCBwbG90QXJlYSA9IFBsb3RBcmVhRmFjdG9yeS5jdXJyZW50LmNyZWF0ZShza2lwU2VyaWVzID8gW10gOiBvcHRpb25zLnNlcmllcywgb3B0aW9ucywgdGhpcy5jaGFydFNlcnZpY2UpO1xuXG4gICAgICAgIHJldHVybiBwbG90QXJlYTtcbiAgICB9XG5cbiAgICBfc2V0dXBTZWxlY3Rpb24oKSB7XG4gICAgICAgIGNvbnN0IHsgX3Bsb3RBcmVhOiB7IGF4ZXMgfSB9ID0gdGhpcztcbiAgICAgICAgY29uc3Qgc2VsZWN0aW9ucyA9IHRoaXMuX3NlbGVjdGlvbnMgPSBbXTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGF4ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGF4aXMgPSBheGVzW2ldO1xuICAgICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IGF4aXMub3B0aW9ucztcbiAgICAgICAgICAgIGlmIChheGlzIGluc3RhbmNlb2YgQ2F0ZWdvcnlBeGlzICYmIG9wdGlvbnMuc2VsZWN0ICYmICFvcHRpb25zLnZlcnRpY2FsKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSBheGlzLnJhbmdlKCk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3Rpb24gPSBuZXcgU2VsZWN0aW9uKHRoaXMsIGF4aXMsXG4gICAgICAgICAgICAgICAgICAgIGRlZXBFeHRlbmQoeyBtaW46IHJhbmdlLm1pbiwgbWF4OiByYW5nZS5tYXggfSwgb3B0aW9ucy5zZWxlY3QpXG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIHNlbGVjdGlvbnMucHVzaChzZWxlY3Rpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3NlbGVjdFN0YXJ0KGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJpZ2dlcihTRUxFQ1RfU1RBUlQsIGUpO1xuICAgIH1cblxuICAgIF9zZWxlY3QoZSkge1xuICAgICAgICByZXR1cm4gdGhpcy50cmlnZ2VyKFNFTEVDVCwgZSk7XG4gICAgfVxuXG4gICAgX3NlbGVjdEVuZChlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRyaWdnZXIoU0VMRUNUX0VORCwgZSk7XG4gICAgfVxuXG4gICAgX2luaXRIYW5kbGVycygpIHtcbiAgICAgICAgdGhpcy5fY2xpY2tIYW5kbGVyID0gdGhpcy5fY2xpY2suYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5fbW91c2V3aGVlbEhhbmRsZXIgPSB0aGlzLl9tb3VzZXdoZWVsLmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuX21vdXNlbGVhdmVIYW5kbGVyID0gdGhpcy5fbW91c2VsZWF2ZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLl9zdXJmYWNlTW91c2VlbnRlckhhbmRsZXIgPSB0aGlzLl9tb3VzZW92ZXIuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5fc3VyZmFjZU1vdXNlbGVhdmVIYW5kbGVyID0gdGhpcy5fbW91c2VvdXQuYmluZCh0aGlzKTtcblxuICAgICAgICB0aGlzLl9tb3VzZW1vdmUgPSB0aHJvdHRsZShcbiAgICAgICAgICAgIHRoaXMuX21vdXNlbW92ZS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgTU9VU0VNT1ZFX0RFTEFZXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgYWRkT2JzZXJ2ZXIob2JzZXJ2ZXIpIHtcbiAgICAgICAgaWYgKG9ic2VydmVyKSB7XG4gICAgICAgICAgICB0aGlzLm9ic2VydmVycy5wdXNoKG9ic2VydmVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbW92ZU9ic2VydmVyKG9ic2VydmVyKSB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5vYnNlcnZlcnMuaW5kZXhPZihvYnNlcnZlcik7XG4gICAgICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgICAgICB0aGlzLm9ic2VydmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVxdWlyZXNIYW5kbGVycyhldmVudE5hbWVzKSB7XG4gICAgICAgIGNvbnN0IG9ic2VydmVycyA9IHRoaXMub2JzZXJ2ZXJzO1xuICAgICAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBvYnNlcnZlcnMubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgaWYgKG9ic2VydmVyc1tpZHhdLnJlcXVpcmVzSGFuZGxlcnMoZXZlbnROYW1lcykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRyaWdnZXIobmFtZSwgYXJncyA9IHt9KSB7XG4gICAgICAgIGlmIChuYW1lID09PSBTSE9XX1RPT0xUSVApIHtcbiAgICAgICAgICAgIGFyZ3MuYW5jaG9yLnBvaW50ID0gdGhpcy5fdG9Eb2N1bWVudENvb3JkaW5hdGVzKGFyZ3MuYW5jaG9yLnBvaW50KTtcbiAgICAgICAgfVxuICAgICAgICBhcmdzLnNlbmRlciA9IHRoaXM7XG5cbiAgICAgICAgY29uc3Qgb2JzZXJ2ZXJzID0gdGhpcy5vYnNlcnZlcnM7XG4gICAgICAgIGxldCBpc0RlZmF1bHRQcmV2ZW50ZWQgPSBmYWxzZTtcbiAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgb2JzZXJ2ZXJzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgICAgIGlmIChvYnNlcnZlcnNbaWR4XS50cmlnZ2VyKG5hbWUsIGFyZ3MpKSB7XG4gICAgICAgICAgICAgICAgaXNEZWZhdWx0UHJldmVudGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBpc0RlZmF1bHRQcmV2ZW50ZWQ7XG4gICAgfVxuXG4gICAgX2F0dGFjaEV2ZW50cygpIHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMuZWxlbWVudDtcblxuICAgICAgICB0aGlzLl90b3VjaEFjdGlvbiA9IGVsZW1lbnQuc3R5bGUudG91Y2hBY3Rpb247XG5cbiAgICAgICAgYmluZEV2ZW50cyhlbGVtZW50LCB7XG4gICAgICAgICAgICBbIENPTlRFWFRNRU5VIF06IHRoaXMuX2NsaWNrSGFuZGxlcixcbiAgICAgICAgICAgIFsgTU9VU0VXSEVFTCBdOiB0aGlzLl9tb3VzZXdoZWVsSGFuZGxlcixcbiAgICAgICAgICAgIFsgTU9VU0VMRUFWRSBdOiB0aGlzLl9tb3VzZWxlYXZlSGFuZGxlclxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAodGhpcy5fc2hvdWxkQXR0YWNoTW91c2VNb3ZlKCkpIHtcbiAgICAgICAgICAgIGJpbmRFdmVudHMoZWxlbWVudCwgeyBbIE1PVVNFTU9WRSBdOiB0aGlzLl9tb3VzZW1vdmUgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmRvbUV2ZW50cyA9IERvbUV2ZW50c0J1aWxkZXIuY3JlYXRlKHRoaXMuZWxlbWVudCwge1xuICAgICAgICAgICAgc3RhcnQ6IHRoaXMuX3N0YXJ0LmJpbmQodGhpcyksXG4gICAgICAgICAgICBtb3ZlOiB0aGlzLl9tb3ZlLmJpbmQodGhpcyksXG4gICAgICAgICAgICBlbmQ6IHRoaXMuX2VuZC5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgdGFwOiB0aGlzLl90YXAuYmluZCh0aGlzKSxcbiAgICAgICAgICAgIGdlc3R1cmVzdGFydDogdGhpcy5fZ2VzdHVyZXN0YXJ0LmJpbmQodGhpcyksXG4gICAgICAgICAgICBnZXN0dXJlY2hhbmdlOiB0aGlzLl9nZXN0dXJlY2hhbmdlLmJpbmQodGhpcyksXG4gICAgICAgICAgICBnZXN0dXJlZW5kOiB0aGlzLl9nZXN0dXJlZW5kLmJpbmQodGhpcylcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5fdG9nZ2xlRHJhZ1pvb21FdmVudHMoKTtcbiAgICB9XG5cbiAgICBfbW91c2VsZWF2ZShlKSB7XG4gICAgICAgIGlmICh0aGlzLl9ob3ZlcmVkUG9pbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX2hvdmVyZWRQb2ludC5vdXQodGhpcywgZSk7XG4gICAgICAgICAgICB0aGlzLl9ob3ZlcmVkUG9pbnQgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX3Bsb3RBcmVhLmhvdmVyZWQpIHtcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlcihQTE9UX0FSRUFfTEVBVkUpO1xuICAgICAgICAgICAgdGhpcy5fcGxvdEFyZWEuaG92ZXJlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2NhbmNlbERvbUV2ZW50cygpIHtcbiAgICAgICAgaWYgKHRoaXMuZG9tRXZlbnRzICYmIHRoaXMuZG9tRXZlbnRzLmNhbmNlbCkge1xuICAgICAgICAgICAgdGhpcy5kb21FdmVudHMuY2FuY2VsKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfZ2VzdHVyZXN0YXJ0KGUpIHtcbiAgICAgICAgaWYgKHRoaXMuX21vdXNld2hlZWxab29tICYmICF0aGlzLl9zdG9wQ2hhcnRIYW5kbGVycyhlKSkge1xuICAgICAgICAgICAgdGhpcy5fZ2VzdHVyZURpc3RhbmNlID0gZS5kaXN0YW5jZTtcbiAgICAgICAgICAgIHRoaXMuX3Vuc2V0QWN0aXZlUG9pbnQoKTtcbiAgICAgICAgICAgIHRoaXMuc3VyZmFjZS5zdXNwZW5kVHJhY2tpbmcoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9nZXN0dXJlZW5kKGUpIHtcbiAgICAgICAgaWYgKHRoaXMuX3pvb21pbmcgJiYgIXRoaXMuX3N0b3BDaGFydEhhbmRsZXJzKGUpKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zdXJmYWNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdXJmYWNlLnJlc3VtZVRyYWNraW5nKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl96b29taW5nID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLnRyaWdnZXIoWk9PTV9FTkQsIHt9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9nZXN0dXJlY2hhbmdlKGUpIHtcbiAgICAgICAgY29uc3QgbW91c2V3aGVlbFpvb20gPSB0aGlzLl9tb3VzZXdoZWVsWm9vbTtcblxuICAgICAgICBpZiAobW91c2V3aGVlbFpvb20gJiYgIXRoaXMuX3N0b3BDaGFydEhhbmRsZXJzKGUpKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBjb25zdCBwcmV2aW91c0dlc3R1cmVEaXN0YW5jZSA9IHRoaXMuX2dlc3R1cmVEaXN0YW5jZTtcbiAgICAgICAgICAgIGxldCBzY2FsZURlbHRhID0gLWUuZGlzdGFuY2UgLyBwcmV2aW91c0dlc3R1cmVEaXN0YW5jZSArIDE7XG5cbiAgICAgICAgICAgIGlmIChNYXRoLmFicyhzY2FsZURlbHRhKSA+PSAwLjEpIHtcbiAgICAgICAgICAgICAgICBzY2FsZURlbHRhID0gTWF0aC5yb3VuZChzY2FsZURlbHRhICogMTApO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5fZ2VzdHVyZURpc3RhbmNlID0gZS5kaXN0YW5jZTtcbiAgICAgICAgICAgICAgICBjb25zdCBhcmdzID0geyBkZWx0YTogc2NhbGVEZWx0YSwgYXhpc1JhbmdlczogYXhpc1Jhbmdlcyh0aGlzLl9wbG90QXJlYS5heGVzKSwgb3JpZ2luYWxFdmVudDogZSB9O1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl96b29taW5nIHx8ICF0aGlzLnRyaWdnZXIoWk9PTV9TVEFSVCwgYXJncykpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3pvb21pbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3pvb21pbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmFuZ2VzID0gYXJncy5heGlzUmFuZ2VzID0gbW91c2V3aGVlbFpvb20udXBkYXRlUmFuZ2VzKHNjYWxlRGVsdGEpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmFuZ2VzICYmICF0aGlzLnRyaWdnZXIoWk9PTSwgYXJncykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vdXNld2hlZWxab29tLnpvb20oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9tb3VzZW91dChlKSB7XG4gICAgICAgIGlmIChlLmVsZW1lbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLl9kcmF3aW5nQ2hhcnRFbGVtZW50KGUuZWxlbWVudCwgZSk7XG5cbiAgICAgICAgICAgIGlmIChlbGVtZW50ICYmIGVsZW1lbnQubGVhdmUpIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmxlYXZlKHRoaXMsIGUub3JpZ2luYWxFdmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfc3RhcnQoZSkge1xuICAgICAgICBjb25zdCBjb29yZHMgPSB0aGlzLl9ldmVudENvb3JkaW5hdGVzKGUpO1xuXG4gICAgICAgIGlmICh0aGlzLl9zdG9wQ2hhcnRIYW5kbGVycyhlKSB8fCAhdGhpcy5fcGxvdEFyZWEuYmFja2dyb3VuZENvbnRhaW5zUG9pbnQoY29vcmRzKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cblxuICAgICAgICBpZiAodGhpcy5yZXF1aXJlc0hhbmRsZXJzKFsgRFJBR19TVEFSVCwgRFJBRywgRFJBR19FTkQgXSkpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXJ0TmF2aWdhdGlvbihlLCBjb29yZHMsIERSQUdfU1RBUlQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX3Bhbm5hYmxlICYmIHRoaXMuX3Bhbm5hYmxlLnN0YXJ0KGUpKSB7XG4gICAgICAgICAgICB0aGlzLnN1cmZhY2Uuc3VzcGVuZFRyYWNraW5nKCk7XG4gICAgICAgICAgICB0aGlzLl91bnNldEFjdGl2ZVBvaW50KCk7XG4gICAgICAgICAgICB0aGlzLl9zdXBwcmVzc0hvdmVyID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuY2hhcnRTZXJ2aWNlLnBhbm5pbmcgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX3pvb21TZWxlY3Rpb24pIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl96b29tU2VsZWN0aW9uLnN0YXJ0KGUpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKFpPT01fU1RBUlQsIHsgYXhpc1JhbmdlczogYXhpc1Jhbmdlcyh0aGlzLl9wbG90QXJlYS5heGVzKSwgb3JpZ2luYWxFdmVudDogZSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9tb3ZlKGUpIHtcbiAgICAgICAgbGV0IHsgX25hdlN0YXRlOiBzdGF0ZSwgX3Bhbm5hYmxlOiBwYW5uYWJsZSB9ID0gdGhpcztcblxuICAgICAgICBpZiAodGhpcy5fc3RvcENoYXJ0SGFuZGxlcnMoZSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYW5uYWJsZSkge1xuICAgICAgICAgICAgY29uc3QgcmFuZ2VzID0gcGFubmFibGUubW92ZShlKTtcblxuICAgICAgICAgICAgaWYgKHJhbmdlcyAmJiAhdGhpcy50cmlnZ2VyKERSQUcsIHsgYXhpc1JhbmdlczogcmFuZ2VzLCBvcmlnaW5hbEV2ZW50OiBlIH0pKSB7XG4gICAgICAgICAgICAgICAgcGFubmFibGUucGFuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoc3RhdGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHJhbmdlcyA9IHt9O1xuICAgICAgICAgICAgY29uc3QgYXhlcyA9IHN0YXRlLmF4ZXM7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXhlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRBeGlzID0gYXhlc1tpXTtcbiAgICAgICAgICAgICAgICBjb25zdCBheGlzTmFtZSA9IGN1cnJlbnRBeGlzLm9wdGlvbnMubmFtZTtcbiAgICAgICAgICAgICAgICBpZiAoYXhpc05hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYXhpcyA9IGN1cnJlbnRBeGlzLm9wdGlvbnMudmVydGljYWwgPyBlLnkgOiBlLng7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlbHRhID0gYXhpcy5zdGFydExvY2F0aW9uIC0gYXhpcy5sb2NhdGlvbjtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZGVsdGEgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlc1tjdXJyZW50QXhpcy5vcHRpb25zLm5hbWVdID0gY3VycmVudEF4aXMudHJhbnNsYXRlUmFuZ2UoZGVsdGEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzdGF0ZS5heGlzUmFuZ2VzID0gcmFuZ2VzO1xuICAgICAgICAgICAgdGhpcy50cmlnZ2VyKERSQUcsIHtcbiAgICAgICAgICAgICAgICBheGlzUmFuZ2VzOiByYW5nZXMsXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fem9vbVNlbGVjdGlvbikge1xuICAgICAgICAgICAgdGhpcy5fem9vbVNlbGVjdGlvbi5tb3ZlKGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2VuZChlKSB7XG4gICAgICAgIGlmICh0aGlzLl9zdG9wQ2hhcnRIYW5kbGVycyhlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcGFubmFibGUgPSB0aGlzLl9wYW5uYWJsZTtcbiAgICAgICAgaWYgKHBhbm5hYmxlICYmIHBhbm5hYmxlLmVuZChlKSkge1xuICAgICAgICAgICAgdGhpcy5zdXJmYWNlLnJlc3VtZVRyYWNraW5nKCk7XG4gICAgICAgICAgICB0aGlzLnRyaWdnZXIoRFJBR19FTkQsIHtcbiAgICAgICAgICAgICAgICBheGlzUmFuZ2VzOiBheGlzUmFuZ2VzKHRoaXMuX3Bsb3RBcmVhLmF4ZXMpLFxuICAgICAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5fc3VwcHJlc3NIb3ZlciA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5jaGFydFNlcnZpY2UucGFubmluZyA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fZW5kTmF2aWdhdGlvbihlLCBEUkFHX0VORCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fem9vbVNlbGVjdGlvbikge1xuICAgICAgICAgICAgY29uc3QgcmFuZ2VzID0gdGhpcy5fem9vbVNlbGVjdGlvbi5lbmQoZSk7XG4gICAgICAgICAgICBpZiAocmFuZ2VzICYmICF0aGlzLnRyaWdnZXIoWk9PTSwgeyBheGlzUmFuZ2VzOiByYW5nZXMsIG9yaWdpbmFsRXZlbnQ6IGUgfSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl96b29tU2VsZWN0aW9uLnpvb20oKTtcbiAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXIoWk9PTV9FTkQsIHsgYXhpc1JhbmdlczogcmFuZ2VzLCBvcmlnaW5hbEV2ZW50OiBlIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3N0b3BDaGFydEhhbmRsZXJzKGUpIHtcbiAgICAgICAgY29uc3Qgc2VsZWN0aW9ucyA9IHRoaXMuX3NlbGVjdGlvbnMgfHwgW107XG4gICAgICAgIGlmICghc2VsZWN0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNvb3JkcyA9IHRoaXMuX2V2ZW50Q29vcmRpbmF0ZXMoZSk7XG4gICAgICAgIGNvbnN0IHBhbmUgPSB0aGlzLl9wbG90QXJlYS5wYW5lQnlQb2ludChjb29yZHMpO1xuICAgICAgICBpZiAocGFuZSkge1xuICAgICAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgc2VsZWN0aW9ucy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGVjdGlvbnNbaWR4XS5vblBhbmUocGFuZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgX21vdXNld2hlZWwoZSkge1xuICAgICAgICBjb25zdCBkZWx0YSA9IG1vdXNld2hlZWxEZWx0YShlKTtcbiAgICAgICAgY29uc3QgbW91c2V3aGVlbFpvb20gPSB0aGlzLl9tb3VzZXdoZWVsWm9vbTtcbiAgICAgICAgY29uc3QgY29vcmRzID0gdGhpcy5fZXZlbnRDb29yZGluYXRlcyhlKTtcblxuICAgICAgICBpZiAodGhpcy5fc3RvcENoYXJ0SGFuZGxlcnMoZSkgfHwgIXRoaXMuX3Bsb3RBcmVhLmJhY2tncm91bmRDb250YWluc1BvaW50KGNvb3JkcykpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChtb3VzZXdoZWVsWm9vbSkge1xuICAgICAgICAgICAgY29uc3QgYXJncyA9IHsgZGVsdGE6IGRlbHRhLCBheGlzUmFuZ2VzOiBheGlzUmFuZ2VzKHRoaXMuX3Bsb3RBcmVhLmF4ZXMpLCBvcmlnaW5hbEV2ZW50OiBlIH07XG4gICAgICAgICAgICBpZiAodGhpcy5fem9vbWluZyB8fCAhdGhpcy50cmlnZ2VyKFpPT01fU1RBUlQsIGFyZ3MpKSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl96b29taW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Vuc2V0QWN0aXZlUG9pbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdXJmYWNlLnN1c3BlbmRUcmFja2luZygpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl96b29taW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbXdUaW1lb3V0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9td1RpbWVvdXQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGFyZ3MuYXhpc1JhbmdlcyA9IG1vdXNld2hlZWxab29tLnVwZGF0ZVJhbmdlcyhkZWx0YSk7XG4gICAgICAgICAgICAgICAgaWYgKGFyZ3MuYXhpc1JhbmdlcyAmJiAhdGhpcy50cmlnZ2VyKFpPT00sIGFyZ3MpKSB7XG4gICAgICAgICAgICAgICAgICAgIG1vdXNld2hlZWxab29tLnpvb20oKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9td1RpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKFpPT01fRU5ELCBhcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fem9vbWluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zdXJmYWNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN1cmZhY2UucmVzdW1lVHJhY2tpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIE1PVVNFV0hFRUxfREVMQVkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGV0IHN0YXRlID0gdGhpcy5fbmF2U3RhdGU7XG4gICAgICAgICAgICBpZiAoIXN0YXRlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJldmVudGVkID0gdGhpcy5fc3RhcnROYXZpZ2F0aW9uKGUsIGNvb3JkcywgWk9PTV9TVEFSVCk7XG4gICAgICAgICAgICAgICAgaWYgKCFwcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzLl9uYXZTdGF0ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzdGF0ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRvdGFsRGVsdGEgPSBzdGF0ZS50b3RhbERlbHRhIHx8IGRlbHRhO1xuICAgICAgICAgICAgICAgIHN0YXRlLnRvdGFsRGVsdGEgPSB0b3RhbERlbHRhICsgZGVsdGE7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBheGVzID0gdGhpcy5fbmF2U3RhdGUuYXhlcztcbiAgICAgICAgICAgICAgICBjb25zdCByYW5nZXMgPSB7fTtcblxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXhlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50QXhpcyA9IGF4ZXNbaV07XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGF4aXNOYW1lID0gY3VycmVudEF4aXMub3B0aW9ucy5uYW1lO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXhpc05hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlc1theGlzTmFtZV0gPSBjdXJyZW50QXhpcy5zY2FsZVJhbmdlKC10b3RhbERlbHRhKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcihaT09NLCB7XG4gICAgICAgICAgICAgICAgICAgIGRlbHRhOiBkZWx0YSxcbiAgICAgICAgICAgICAgICAgICAgYXhpc1JhbmdlczogcmFuZ2VzLFxuICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBlXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbXdUaW1lb3V0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9td1RpbWVvdXQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuX213VGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9lbmROYXZpZ2F0aW9uKGUsIFpPT01fRU5EKTtcbiAgICAgICAgICAgICAgICB9LCBNT1VTRVdIRUVMX0RFTEFZKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9zdGFydE5hdmlnYXRpb24oZSwgY29vcmRzLCBjaGFydEV2ZW50KSB7XG4gICAgICAgIGNvbnN0IHBsb3RBcmVhID0gdGhpcy5fbW9kZWwuX3Bsb3RBcmVhO1xuICAgICAgICBjb25zdCBwYW5lID0gcGxvdEFyZWEuZmluZFBvaW50UGFuZShjb29yZHMpO1xuICAgICAgICBjb25zdCBheGVzID0gcGxvdEFyZWEuYXhlcy5zbGljZSgwKTtcblxuICAgICAgICBpZiAoIXBhbmUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHJhbmdlcyA9IGF4aXNSYW5nZXMoYXhlcyk7XG5cbiAgICAgICAgY29uc3QgcHJldmVudGVkID0gdGhpcy50cmlnZ2VyKGNoYXJ0RXZlbnQsIHtcbiAgICAgICAgICAgIGF4aXNSYW5nZXM6IHJhbmdlcyxcbiAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHByZXZlbnRlZCkge1xuICAgICAgICAgICAgdGhpcy5fY2FuY2VsRG9tRXZlbnRzKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9zdXBwcmVzc0hvdmVyID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX3Vuc2V0QWN0aXZlUG9pbnQoKTtcbiAgICAgICAgICAgIHRoaXMuX25hdlN0YXRlID0ge1xuICAgICAgICAgICAgICAgIGF4aXNSYW5nZXM6IHJhbmdlcyxcbiAgICAgICAgICAgICAgICBwYW5lOiBwYW5lLFxuICAgICAgICAgICAgICAgIGF4ZXM6IGF4ZXNcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfZW5kTmF2aWdhdGlvbihlLCBjaGFydEV2ZW50KSB7XG4gICAgICAgIGlmICh0aGlzLl9uYXZTdGF0ZSkge1xuICAgICAgICAgICAgdGhpcy50cmlnZ2VyKGNoYXJ0RXZlbnQsIHtcbiAgICAgICAgICAgICAgICBheGlzUmFuZ2VzOiB0aGlzLl9uYXZTdGF0ZS5heGlzUmFuZ2VzLFxuICAgICAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5fc3VwcHJlc3NIb3ZlciA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5fbmF2U3RhdGUgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2dldENoYXJ0RWxlbWVudChlLCBtYXRjaCkge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5zdXJmYWNlLmV2ZW50VGFyZ2V0KGUpO1xuICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RyYXdpbmdDaGFydEVsZW1lbnQoZWxlbWVudCwgZSwgbWF0Y2gpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2RyYXdpbmdDaGFydEVsZW1lbnQoZWxlbWVudCwgZSwgbWF0Y2gpIHtcbiAgICAgICAgbGV0IGN1cnJlbnQgPSBlbGVtZW50O1xuICAgICAgICBsZXQgY2hhcnRFbGVtZW50O1xuICAgICAgICB3aGlsZSAoY3VycmVudCAmJiAhY2hhcnRFbGVtZW50KSB7XG4gICAgICAgICAgICBjaGFydEVsZW1lbnQgPSBjdXJyZW50LmNoYXJ0RWxlbWVudDtcbiAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LnBhcmVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjaGFydEVsZW1lbnQpIHtcbiAgICAgICAgICAgIGlmIChjaGFydEVsZW1lbnQuYWxpYXNGb3IpIHtcbiAgICAgICAgICAgICAgICBjaGFydEVsZW1lbnQgPSBjaGFydEVsZW1lbnQuYWxpYXNGb3IoZSwgdGhpcy5fZXZlbnRDb29yZGluYXRlcyhlKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIGNoYXJ0RWxlbWVudCA9IGNoYXJ0RWxlbWVudC5jbG9zZXN0KG1hdGNoKTtcbiAgICAgICAgICAgICAgICBpZiAoY2hhcnRFbGVtZW50ICYmIGNoYXJ0RWxlbWVudC5hbGlhc0Zvcikge1xuICAgICAgICAgICAgICAgICAgICBjaGFydEVsZW1lbnQgPSBjaGFydEVsZW1lbnQuYWxpYXNGb3IoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBjaGFydEVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfZXZlbnRDb29yZGluYXRlcyhlKSB7XG4gICAgICAgIGNvbnN0IGNvb3JkaW5hdGVzID0gZXZlbnRDb29yZGluYXRlcyhlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RvTW9kZWxDb29yZGluYXRlcyhjb29yZGluYXRlcy54LCBjb29yZGluYXRlcy55KTtcbiAgICB9XG5cbiAgICBfZWxlbWVudFBhZGRpbmcoKSB7XG4gICAgICAgIGlmICghdGhpcy5fcGFkZGluZykge1xuICAgICAgICAgICAgY29uc3QgeyBwYWRkaW5nTGVmdCwgcGFkZGluZ1RvcCB9ID0gZWxlbWVudFN0eWxlcyh0aGlzLmVsZW1lbnQsIFsgXCJwYWRkaW5nTGVmdFwiLCBcInBhZGRpbmdUb3BcIiBdKTtcbiAgICAgICAgICAgIHRoaXMuX3BhZGRpbmcgPSB7XG4gICAgICAgICAgICAgICAgdG9wOiBwYWRkaW5nVG9wLFxuICAgICAgICAgICAgICAgIGxlZnQ6IHBhZGRpbmdMZWZ0XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3BhZGRpbmc7XG4gICAgfVxuXG4gICAgX3RvRG9jdW1lbnRDb29yZGluYXRlcyhwb2ludCkge1xuICAgICAgICBjb25zdCBwYWRkaW5nID0gdGhpcy5fZWxlbWVudFBhZGRpbmcoKTtcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gZWxlbWVudE9mZnNldCh0aGlzLmVsZW1lbnQpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsZWZ0OiByb3VuZChwb2ludC54ICsgcGFkZGluZy5sZWZ0ICsgb2Zmc2V0LmxlZnQpLFxuICAgICAgICAgICAgdG9wOiByb3VuZChwb2ludC55ICsgcGFkZGluZy50b3AgKyBvZmZzZXQudG9wKVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIFRPRE86IEJyZWFraW5nIGNoYW5nZSBkdWUgdG8gcGVlciB2ZXJzaW9uIGNoYW5nZVxuICAgIC8vIFJldXNlIGJ5IGV4cG9zaW5nIF9zdXJmYWNlUG9pbnQgb24gU3VyZmFjZVxuICAgIF90b01vZGVsQ29vcmRpbmF0ZXMoY2xpZW50WCwgY2xpZW50WSkge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5lbGVtZW50O1xuICAgICAgICBjb25zdCBvZmZzZXQgPSBlbGVtZW50T2Zmc2V0KGVsZW1lbnQpO1xuICAgICAgICBjb25zdCBwYWRkaW5nID0gdGhpcy5fZWxlbWVudFBhZGRpbmcoKTtcbiAgICAgICAgY29uc3QgaW52ZXJzZVRyYW5zZm9ybSA9IGVsZW1lbnRTY2FsZShlbGVtZW50KS5pbnZlcnQoKTtcbiAgICAgICAgY29uc3QgcG9pbnQgPSBuZXcgZ2VvbWV0cnkuUG9pbnQoXG4gICAgICAgICAgICBjbGllbnRYIC0gb2Zmc2V0LmxlZnQgLSBwYWRkaW5nLmxlZnQsXG4gICAgICAgICAgICBjbGllbnRZIC0gb2Zmc2V0LnRvcCAtIHBhZGRpbmcudG9wXG4gICAgICAgICkudHJhbnNmb3JtKGludmVyc2VUcmFuc2Zvcm0pO1xuXG4gICAgICAgIHJldHVybiBuZXcgUG9pbnQocG9pbnQueCwgcG9pbnQueSk7XG4gICAgfVxuXG4gICAgX3RhcChlKSB7XG4gICAgICAgIGNvbnN0IGRyYXdpbmdFbGVtZW50ID0gdGhpcy5zdXJmYWNlLmV2ZW50VGFyZ2V0KGUpO1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5fZHJhd2luZ0NoYXJ0RWxlbWVudChkcmF3aW5nRWxlbWVudCwgZSk7XG4gICAgICAgIGNvbnN0IHNoYXJlZFRvb2x0aXAgPSB0aGlzLl9zaGFyZWRUb29sdGlwKCk7XG5cbiAgICAgICAgaWYgKCF0aGlzLl9zdGFydEhvdmVyKGRyYXdpbmdFbGVtZW50LCBlKSAmJiAhc2hhcmVkVG9vbHRpcCkge1xuICAgICAgICAgICAgdGhpcy5fdW5zZXRBY3RpdmVQb2ludCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNoYXJlZFRvb2x0aXApIHtcbiAgICAgICAgICAgIHRoaXMuX3RyYWNrU2hhcmVkVG9vbHRpcCh0aGlzLl9ldmVudENvb3JkaW5hdGVzKGUpLCBlLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3Byb3BhZ2F0ZUNsaWNrKGVsZW1lbnQsIGUpO1xuXG4gICAgICAgIC8vcGFydCBvZiBmaXggZm9yIGhvdmVyIGlzc3VlIG9uIHdpbmRvd3MgdG91Y2hcbiAgICAgICAgdGhpcy5oYW5kbGluZ1RhcCA9IHRydWU7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGluZ1RhcCA9IGZhbHNlO1xuICAgICAgICB9LCAwKTtcbiAgICB9XG5cbiAgICBfY2xpY2soZSkge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5fZ2V0Q2hhcnRFbGVtZW50KGUpO1xuICAgICAgICB0aGlzLl9wcm9wYWdhdGVDbGljayhlbGVtZW50LCBlKTtcbiAgICB9XG5cbiAgICBfcHJvcGFnYXRlQ2xpY2soZWxlbWVudCwgZSkge1xuICAgICAgICBsZXQgY3VycmVudCA9IGVsZW1lbnQ7XG4gICAgICAgIHdoaWxlIChjdXJyZW50KSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudC5jbGljaykge1xuICAgICAgICAgICAgICAgIGN1cnJlbnQuY2xpY2sodGhpcywgZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LnBhcmVudDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9zdGFydEhvdmVyKGVsZW1lbnQsIGUpIHtcbiAgICAgICAgaWYgKHRoaXMuX3N1cHByZXNzSG92ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBwb2ludCA9IHRoaXMuX2RyYXdpbmdDaGFydEVsZW1lbnQoZWxlbWVudCwgZSwgZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIChlbGVtZW50LmhvdmVyIHx8IGVsZW1lbnQub3ZlcikgJiYgIShlbGVtZW50IGluc3RhbmNlb2YgUGxvdEFyZWFCYXNlKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgYWN0aXZlUG9pbnQgPSB0aGlzLl9hY3RpdmVQb2ludDtcbiAgICAgICAgY29uc3QgbXVsdGlwbGVTZXJpZXMgPSB0aGlzLl9wbG90QXJlYS5zZXJpZXMubGVuZ3RoID4gMTtcbiAgICAgICAgY29uc3QgaGFzSW5hY3RpdmVPcGFjaXR5ID0gdGhpcy5faGFzSW5hY3RpdmVPcGFjaXR5KCk7XG5cbiAgICAgICAgdGhpcy5fdXBkYXRlSG92ZXJlZFBvaW50KHBvaW50LCBlKTtcblxuICAgICAgICBpZiAocG9pbnQgJiYgYWN0aXZlUG9pbnQgIT09IHBvaW50ICYmIHBvaW50LmhvdmVyKSB7XG4gICAgICAgICAgICB0aGlzLl9hY3RpdmVQb2ludCA9IHBvaW50O1xuXG4gICAgICAgICAgICBpZiAoIXRoaXMuX3NoYXJlZFRvb2x0aXAoKSAmJiAhcG9pbnQuaG92ZXIodGhpcywgZSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0b29sdGlwT3B0aW9ucyA9IGRlZXBFeHRlbmQoe30sIHRoaXMub3B0aW9ucy50b29sdGlwLCBwb2ludC5vcHRpb25zLnRvb2x0aXApO1xuICAgICAgICAgICAgICAgIGlmICh0b29sdGlwT3B0aW9ucy52aXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rvb2x0aXAuc2hvdyhwb2ludCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKG11bHRpcGxlU2VyaWVzICYmIGhhc0luYWN0aXZlT3BhY2l0eSkge1xuICAgICAgICAgICAgICAgICAgICBwb2ludCA9IHRoaXMuX2Rpc3BsYXlJbmFjdGl2ZU9wYWNpdHkocG9pbnQsIHRydWUsIGUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIW11bHRpcGxlU2VyaWVzICYmIGhhc0luYWN0aXZlT3BhY2l0eSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9kaXNwbGF5SW5hY3RpdmVPcGFjaXR5KHBvaW50KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9oaWdobGlnaHQuc2hvdyhwb2ludCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCFwb2ludCAmJiBoYXNJbmFjdGl2ZU9wYWNpdHkpIHtcbiAgICAgICAgICAgIGlmIChtdWx0aXBsZVNlcmllcykge1xuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVNlcmllc09wYWNpdHkocG9pbnQsIHRydWUpO1xuICAgICAgICAgICAgICAgIHRoaXMubm9UcmFuc2l0aW9uc1JlZHJhdygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9oaWdobGlnaHQgJiYgdGhpcy5faGlnaGxpZ2h0LmhpZGUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9hY3RpdmVQb2ludCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcG9pbnQ7XG4gICAgfVxuXG4gICAgX2Rpc3BsYXlJbmFjdGl2ZU9wYWNpdHkoYWN0aXZlUG9pbnQsIG11bHRpcGxlU2VyaWVzLCBldmVudCkge1xuICAgICAgICBsZXQgcG9pbnQgPSBhY3RpdmVQb2ludDtcbiAgICAgICAgaWYgKG11bHRpcGxlU2VyaWVzKSB7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVTZXJpZXNPcGFjaXR5KHBvaW50KTtcbiAgICAgICAgICAgIHRoaXMubm9UcmFuc2l0aW9uc1JlZHJhdygpO1xuICAgICAgICAgICAgcG9pbnQgPSB0aGlzLl9maW5kTmV3UG9pbnQodGhpcy5fcGxvdEFyZWEuY2hpbGRyZW4sIHBvaW50LmRhdGFJdGVtLCBwb2ludC5zZXJpZXMpO1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlSG92ZXJlZFBvaW50KHBvaW50LCBldmVudCk7XG4gICAgICAgICAgICB0aGlzLl9oaWdobGlnaHQuc2hvdyhwb2ludCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgaW5hY3RpdmVQb2ludHM7XG4gICAgICAgICAgICBsZXQgY2hhcnRJbnN0YW5jZSA9IGFjdGl2ZVBvaW50LnBhcmVudDtcblxuICAgICAgICAgICAgd2hpbGUgKCFjaGFydEluc3RhbmNlLnBsb3RBcmVhKSB7XG4gICAgICAgICAgICAgICAgY2hhcnRJbnN0YW5jZSA9IGNoYXJ0SW5zdGFuY2UucGFyZW50O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWNoYXJ0SW5zdGFuY2Uuc3VwcG9ydHNQb2ludEluYWN0aXZlT3BhY2l0eSgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faGlnaGxpZ2h0LnNob3cocG9pbnQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpbmFjdGl2ZVBvaW50cyA9IHRoaXMuX2dldEluYWN0aXZlUG9pbnRzKHBvaW50LCBjaGFydEluc3RhbmNlKTtcblxuICAgICAgICAgICAgaWYgKGluYWN0aXZlUG9pbnRzICYmIGluYWN0aXZlUG9pbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2hpZ2hsaWdodC5zaG93KGluYWN0aXZlUG9pbnRzLCAxIC0gdGhpcy5fZ2V0SW5hY3RpdmVPcGFjaXR5Rm9yU2VyaWVzKHBvaW50LnNlcmllcykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBvaW50O1xuICAgIH1cblxuICAgIF9nZXRJbmFjdGl2ZVBvaW50cyhhY3RpdmVQb2ludCwgY2hhcnRJbnN0YW5jZSkge1xuICAgICAgICBsZXQgYWxsUG9pbnRzID0gdGhpcy5fZ2V0QWxsUG9pbnRzT2ZUeXBlKGNoYXJ0SW5zdGFuY2UsIGFjdGl2ZVBvaW50LmNvbnN0cnVjdG9yKTtcblxuICAgICAgICByZXR1cm4gYWxsUG9pbnRzLmZpbHRlcihwb2ludCA9PiBwb2ludCAhPT0gYWN0aXZlUG9pbnQpO1xuICAgIH1cblxuICAgIF9nZXRBbGxQb2ludHNPZlR5cGUoY29udGFpbmVyLCB0eXBlKSB7XG4gICAgICAgIGxldCBwb2ludHMgPSBbXTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbnRhaW5lci5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGNvbnRhaW5lci5jaGlsZHJlbltpXTtcblxuICAgICAgICAgICAgaWYgKGVsZW1lbnQuY29uc3RydWN0b3IgPT09IHR5cGUpIHtcbiAgICAgICAgICAgICAgICBwb2ludHMucHVzaChlbGVtZW50KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudC5jaGlsZHJlbiAmJiBlbGVtZW50LmNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHBvaW50cyA9IHBvaW50cy5jb25jYXQodGhpcy5fZ2V0QWxsUG9pbnRzT2ZUeXBlKGVsZW1lbnQsIHR5cGUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwb2ludHM7XG4gICAgfVxuXG4gICAgX2ZpbmROZXdQb2ludChjaGlsZHJlbiwgZGF0YUl0ZW0sIHNlcmllcykge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgY2hpbGQgPSBjaGlsZHJlbltpXTtcblxuICAgICAgICAgICAgaWYgKGNoaWxkLmRhdGFJdGVtID09PSBkYXRhSXRlbSAmJiBjaGlsZC5zZXJpZXMgPT09IHNlcmllcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNoaWxkLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICAgICAgbGV0IHJlc3VsdCA9IHRoaXMuX2ZpbmROZXdQb2ludChjaGlsZC5jaGlsZHJlbiwgZGF0YUl0ZW0sIHNlcmllcyk7XG5cbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3VwZGF0ZUhvdmVyZWRQb2ludChwb2ludCwgZSkge1xuICAgICAgICBjb25zdCBob3ZlcmVkUG9pbnQgPSB0aGlzLl9ob3ZlcmVkUG9pbnQ7XG5cbiAgICAgICAgaWYgKGhvdmVyZWRQb2ludCAmJiBob3ZlcmVkUG9pbnQgIT09IHBvaW50KSB7XG4gICAgICAgICAgICBob3ZlcmVkUG9pbnQub3V0KHRoaXMsIGUpO1xuICAgICAgICAgICAgdGhpcy5faG92ZXJlZFBvaW50ID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwb2ludCAmJiBob3ZlcmVkUG9pbnQgIT09IHBvaW50ICYmIHBvaW50Lm92ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX2hvdmVyZWRQb2ludCA9IHBvaW50O1xuICAgICAgICAgICAgcG9pbnQub3Zlcih0aGlzLCBlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF91cGRhdGVTZXJpZXNPcGFjaXR5KHBvaW50LCByZXNldE9wYWNpdHkpIHtcbiAgICAgICAgY29uc3QgcGxvdEFyZWEgPSB0aGlzLl9wbG90QXJlYTtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gcGxvdEFyZWEuc2VyaWVzLmxlbmd0aDtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBjdXJyU2VyaWVzID0gcGxvdEFyZWEuc2VyaWVzW2ldO1xuICAgICAgICAgICAgY29uc3QgZGVmYXVsdE9wYWNpdHkgPSB0aGlzLl9nZXREZWZhdWx0T3BhY2l0eUZvclNlcmllcyhjdXJyU2VyaWVzKTtcbiAgICAgICAgICAgIGNvbnN0IGluYWN0aXZlT3BhY2l0eSA9IHRoaXMuX2dldEluYWN0aXZlT3BhY2l0eUZvclNlcmllcyhjdXJyU2VyaWVzKTtcblxuICAgICAgICAgICAgaWYgKCFyZXNldE9wYWNpdHkgJiYgY3VyclNlcmllcyAhPT0gcG9pbnQuc2VyaWVzKSB7XG4gICAgICAgICAgICAgICAgY3VyclNlcmllcy5kZWZhdWx0T3BhY2l0eSA9IGRlZmF1bHRPcGFjaXR5O1xuICAgICAgICAgICAgICAgIGN1cnJTZXJpZXMub3BhY2l0eSA9IGluYWN0aXZlT3BhY2l0eTtcblxuICAgICAgICAgICAgICAgIGlmIChjdXJyU2VyaWVzLmxpbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VyclNlcmllcy5saW5lLm9wYWNpdHkgPSBpbmFjdGl2ZU9wYWNpdHk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjdXJyU2VyaWVzLm9wYWNpdHkgPSBkZWZhdWx0T3BhY2l0eTtcblxuICAgICAgICAgICAgICAgIGlmIChjdXJyU2VyaWVzLmxpbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VyclNlcmllcy5saW5lLm9wYWNpdHkgPSBkZWZhdWx0T3BhY2l0eTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfaGFzSW5hY3RpdmVPcGFjaXR5KCkge1xuICAgICAgICBsZXQgaGFzRGVmYXVsdEluYWN0aXZlT3BhY2l0eSA9IHRoaXMub3B0aW9ucy5zZXJpZXNEZWZhdWx0cy5oaWdobGlnaHQuaW5hY3RpdmVPcGFjaXR5ICE9PSB1bmRlZmluZWQ7XG4gICAgICAgIGxldCBoYXNJbmFjdGl2ZU9wYWNpdHkgPSB0aGlzLm9wdGlvbnMuc2VyaWVzLmZpbHRlcihzID0+IHMuaGlnaGxpZ2h0LmluYWN0aXZlT3BhY2l0eSAhPT0gdW5kZWZpbmVkICkubGVuZ3RoID4gMDtcbiAgICAgICAgcmV0dXJuIGhhc0RlZmF1bHRJbmFjdGl2ZU9wYWNpdHkgfHwgaGFzSW5hY3RpdmVPcGFjaXR5O1xuICAgIH1cblxuICAgIF9nZXRJbmFjdGl2ZU9wYWNpdHlGb3JTZXJpZXMoc2VyaWVzKSB7XG4gICAgICAgIGxldCBkZWZhdWx0SW5hY3RpdmVPcGFjaXR5ID0gdGhpcy5vcHRpb25zLnNlcmllc0RlZmF1bHRzLmhpZ2hsaWdodC5pbmFjdGl2ZU9wYWNpdHk7XG4gICAgICAgIGxldCBzZXJpZXNJbmFjdGl2ZU9wYWNpdHkgPSBzZXJpZXMuaGlnaGxpZ2h0LmluYWN0aXZlT3BhY2l0eTtcbiAgICAgICAgcmV0dXJuIHNlcmllc0luYWN0aXZlT3BhY2l0eSB8fCBkZWZhdWx0SW5hY3RpdmVPcGFjaXR5IHx8IHNlcmllcy5vcGFjaXR5IHx8IERFRkFVTFRfU0VSSUVTX09QQUNJVFk7XG4gICAgfVxuXG4gICAgX2dldERlZmF1bHRPcGFjaXR5Rm9yU2VyaWVzKHNlcmllcykge1xuICAgICAgICByZXR1cm4gc2VyaWVzLmRlZmF1bHRPcGFjaXR5IHx8IHNlcmllcy5vcGFjaXR5IHx8IERFRkFVTFRfU0VSSUVTX09QQUNJVFk7XG4gICAgfVxuXG4gICAgX21vdXNlb3ZlcihlKSB7XG4gICAgICAgIGNvbnN0IHBvaW50ID0gdGhpcy5fc3RhcnRIb3ZlcihlLmVsZW1lbnQsIGUub3JpZ2luYWxFdmVudCk7XG5cbiAgICAgICAgaWYgKHBvaW50ICYmIHBvaW50LnRvb2x0aXBUcmFja2luZyAmJiAhdGhpcy5fbW91c2VNb3ZlVHJhY2tIYW5kbGVyICYmICF0aGlzLl9zaGFyZWRUb29sdGlwKCkpIHtcbiAgICAgICAgICAgIHRoaXMuX21vdXNlTW92ZVRyYWNrSGFuZGxlciA9IHRoaXMuX21vdXNlTW92ZVRyYWNraW5nLmJpbmQodGhpcyk7XG4gICAgICAgICAgICBiaW5kRXZlbnRzKGRvY3VtZW50LCB7XG4gICAgICAgICAgICAgICAgWyBNT1VTRU1PVkUgXTogdGhpcy5fbW91c2VNb3ZlVHJhY2tIYW5kbGVyXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9tb3VzZU1vdmVUcmFja2luZyhlKSB7XG4gICAgICAgIGNvbnN0IHsgb3B0aW9ucywgX3Rvb2x0aXA6IHRvb2x0aXAsIF9oaWdobGlnaHQ6IGhpZ2hsaWdodCwgX2FjdGl2ZVBvaW50OiBwb2ludCB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgY29vcmRzID0gdGhpcy5fZXZlbnRDb29yZGluYXRlcyhlKTtcblxuICAgICAgICBpZiAodGhpcy5fcGxvdEFyZWEuYm94LmNvbnRhaW5zUG9pbnQoY29vcmRzKSkge1xuICAgICAgICAgICAgaWYgKHBvaW50ICYmIHBvaW50LnRvb2x0aXBUcmFja2luZyAmJiBwb2ludC5zZXJpZXMgJiYgcG9pbnQucGFyZW50LmdldE5lYXJlc3RQb2ludCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlcmllc1BvaW50ID0gcG9pbnQucGFyZW50LmdldE5lYXJlc3RQb2ludChjb29yZHMueCwgY29vcmRzLnksIHBvaW50LnNlcmllc0l4KTtcbiAgICAgICAgICAgICAgICBpZiAoc2VyaWVzUG9pbnQgJiYgc2VyaWVzUG9pbnQgIT09IHBvaW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FjdGl2ZVBvaW50ID0gc2VyaWVzUG9pbnQ7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzZXJpZXNQb2ludC5ob3Zlcih0aGlzLCBlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdG9vbHRpcE9wdGlvbnMgPSBkZWVwRXh0ZW5kKHt9LCBvcHRpb25zLnRvb2x0aXAsIHNlcmllc1BvaW50Lm9wdGlvbnMudG9vbHRpcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodG9vbHRpcE9wdGlvbnMudmlzaWJsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvb2x0aXAuc2hvdyhzZXJpZXNQb2ludCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGhpZ2hsaWdodC5zaG93KHNlcmllc1BvaW50KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHVuYmluZEV2ZW50cyhkb2N1bWVudCwge1xuICAgICAgICAgICAgICAgIFsgTU9VU0VNT1ZFIF06IHRoaXMuX21vdXNlTW92ZVRyYWNrSGFuZGxlclxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLl91bnNldEFjdGl2ZVBvaW50KCk7XG4gICAgICAgICAgICB0aGlzLl9tb3VzZU1vdmVUcmFja0hhbmRsZXIgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX21vdXNlbW92ZShlKSB7XG4gICAgICAgIGNvbnN0IGNvb3JkcyA9IHRoaXMuX2V2ZW50Q29vcmRpbmF0ZXMoZSk7XG4gICAgICAgIGNvbnN0IHBsb3RBcmVhID0gdGhpcy5fcGxvdEFyZWE7XG5cbiAgICAgICAgdGhpcy5fdHJhY2tDcm9zc2hhaXJzKGNvb3Jkcyk7XG5cbiAgICAgICAgaWYgKHBsb3RBcmVhLmhvdmVyKSB7XG4gICAgICAgICAgICBjb25zdCBvdmVyUGxvdEFyZWEgPSBwbG90QXJlYS5iYWNrZ3JvdW5kQ29udGFpbnNQb2ludChjb29yZHMpO1xuICAgICAgICAgICAgaWYgKG92ZXJQbG90QXJlYSkge1xuICAgICAgICAgICAgICAgIHBsb3RBcmVhLmhvdmVyZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Bsb3RBcmVhLmhvdmVyKHRoaXMsIGUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwbG90QXJlYS5ob3ZlcmVkICYmICFvdmVyUGxvdEFyZWEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXIoUExPVF9BUkVBX0xFQVZFKTtcbiAgICAgICAgICAgICAgICBwbG90QXJlYS5ob3ZlcmVkID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fc2hhcmVkVG9vbHRpcCgpKSB7XG4gICAgICAgICAgICB0aGlzLl90cmFja1NoYXJlZFRvb2x0aXAoY29vcmRzLCBlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF90cmFja0Nyb3NzaGFpcnMoY29vcmRzKSB7XG4gICAgICAgIGNvbnN0IGNyb3NzaGFpcnMgPSB0aGlzLl9wbG90QXJlYS5jcm9zc2hhaXJzO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY3Jvc3NoYWlycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudCA9IGNyb3NzaGFpcnNbaV07XG5cbiAgICAgICAgICAgIGlmIChjdXJyZW50LmJveC5jb250YWluc1BvaW50KGNvb3JkcykpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50LnNob3dBdChjb29yZHMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50LmhpZGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIF90cmFja1NoYXJlZFRvb2x0aXAoY29vcmRzLCBlLCB0b2dnbGUpIHtcbiAgICAgICAgaWYgKHRoaXMuX3N1cHByZXNzSG92ZXIpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHsgb3B0aW9uczogeyB0b29sdGlwOiB0b29sdGlwT3B0aW9ucyB9LCBfcGxvdEFyZWE6IHBsb3RBcmVhLCBfcGxvdEFyZWE6IHsgY2F0ZWdvcnlBeGlzIH0sIF90b29sdGlwOiB0b29sdGlwLCBfaGlnaGxpZ2h0OiBoaWdobGlnaHQgfSA9IHRoaXM7XG5cbiAgICAgICAgaWYgKHBsb3RBcmVhLmJhY2tncm91bmRDb250YWluc1BvaW50KGNvb3JkcykpIHtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gY2F0ZWdvcnlBeGlzLnBvaW50Q2F0ZWdvcnlJbmRleChjb29yZHMpO1xuICAgICAgICAgICAgaWYgKGluZGV4ICE9PSB0aGlzLl90b29sdGlwQ2F0ZWdvcnlJeCB8fCAoIXRoaXMuX3NoYXJlZEhpZ2hsaWdodCAmJiB0b2dnbGUpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcG9pbnRzID0gcGxvdEFyZWEucG9pbnRzQnlDYXRlZ29yeUluZGV4KGluZGV4KTtcbiAgICAgICAgICAgICAgICBjb25zdCBwb2ludEFyZ3MgPSBwb2ludHMubWFwKGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwb2ludC5ldmVudEFyZ3MoZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29uc3QgaG92ZXJBcmdzID0gcG9pbnRBcmdzWzBdIHx8IHt9O1xuICAgICAgICAgICAgICAgIGhvdmVyQXJncy5jYXRlZ29yeVBvaW50cyA9IHBvaW50QXJncztcblxuICAgICAgICAgICAgICAgIGlmIChwb2ludHMubGVuZ3RoID4gMCAmJiAhdGhpcy50cmlnZ2VyKFNFUklFU19IT1ZFUiwgaG92ZXJBcmdzKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAodG9vbHRpcE9wdGlvbnMudmlzaWJsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9vbHRpcC5zaG93QXQocG9pbnRzLCBjb29yZHMpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaGlnaGxpZ2h0LnNob3cocG9pbnRzKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zaGFyZWRIaWdobGlnaHQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRvb2x0aXAuaGlkZSgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuX3Rvb2x0aXBDYXRlZ29yeUl4ID0gaW5kZXg7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRvZ2dsZSAmJiB0aGlzLl9zaGFyZWRIaWdobGlnaHQpIHtcbiAgICAgICAgICAgICAgICBoaWdobGlnaHQuaGlkZSgpO1xuICAgICAgICAgICAgICAgIHRvb2x0aXAuaGlkZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3NoYXJlZEhpZ2hsaWdodCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3NoYXJlZEhpZ2hsaWdodCkge1xuICAgICAgICAgICAgaGlnaGxpZ2h0LmhpZGUoKTtcbiAgICAgICAgICAgIHRvb2x0aXAuaGlkZSgpO1xuICAgICAgICAgICAgdGhpcy5fdG9vbHRpcENhdGVnb3J5SXggPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5fc2hhcmVkSGlnaGxpZ2h0ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBoaWRlRWxlbWVudHMob3B0aW9ucykge1xuICAgICAgICBjb25zdCBwbG90QXJlYSA9IHRoaXMuX3Bsb3RBcmVhO1xuICAgICAgICB0aGlzLl9tb3VzZW1vdmUuY2FuY2VsKCk7XG5cbiAgICAgICAgcGxvdEFyZWEuaGlkZUNyb3NzaGFpcnMoKTtcblxuICAgICAgICB0aGlzLl91bnNldEFjdGl2ZVBvaW50KG9wdGlvbnMpO1xuICAgIH1cblxuICAgIF91bnNldEFjdGl2ZVBvaW50KG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyBfdG9vbHRpcDogdG9vbHRpcCwgX2hpZ2hsaWdodDogaGlnaGxpZ2h0IH0gPSB0aGlzO1xuXG4gICAgICAgIHRoaXMuX2FjdGl2ZVBvaW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5faG92ZXJlZFBvaW50ID0gbnVsbDtcblxuICAgICAgICBpZiAodG9vbHRpcCAmJiAhKG9wdGlvbnMgJiYgb3B0aW9ucy5rZWVwVG9vbHRpcE9wZW4pKSB7XG4gICAgICAgICAgICB0b29sdGlwLmhpZGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3Rvb2x0aXBDYXRlZ29yeUl4ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fc2hhcmVkSGlnaGxpZ2h0ID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKGhpZ2hsaWdodCkge1xuICAgICAgICAgICAgaGlnaGxpZ2h0LmhpZGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9kZWZlclJlZHJhdygpIHtcbiAgICAgICAgdGhpcy5fcmVkcmF3KCk7XG4gICAgfVxuXG4gICAgX2NsZWFyUmVkcmF3VGltZW91dCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3JlZHJhd1RpbWVvdXQpIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5fcmVkcmF3VGltZW91dCk7XG4gICAgICAgICAgICB0aGlzLl9yZWRyYXdUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGJpbmRDYXRlZ29yaWVzKCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBkZWZpbml0aW9ucyA9IFtdLmNvbmNhdChvcHRpb25zLmNhdGVnb3J5QXhpcyk7XG5cbiAgICAgICAgZm9yIChsZXQgYXhpc0l4ID0gMDsgYXhpc0l4IDwgZGVmaW5pdGlvbnMubGVuZ3RoOyBheGlzSXgrKykge1xuICAgICAgICAgICAgY29uc3QgYXhpcyA9IGRlZmluaXRpb25zW2F4aXNJeF07XG4gICAgICAgICAgICBpZiAoYXhpcy5hdXRvQmluZCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJpbmRDYXRlZ29yeUF4aXNGcm9tU2VyaWVzKGF4aXMsIGF4aXNJeCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBiaW5kQ2F0ZWdvcnlBeGlzRnJvbVNlcmllcyhheGlzLCBheGlzSXgpIHtcbiAgICAgICAgY29uc3Qgc2VyaWVzID0gdGhpcy5vcHRpb25zLnNlcmllcztcbiAgICAgICAgY29uc3Qgc2VyaWVzTGVuZ3RoID0gc2VyaWVzLmxlbmd0aDtcbiAgICAgICAgY29uc3QgdW5pcXVlQ2F0ZWdvcmllcyA9IG5ldyBIYXNoTWFwKCk7Ly9wZXJmIGltcHJvdmVtZW50IGluIGNhc2UgdHlwZSBjYXRlZ29yeSB3aXRoIGRhdGVzXG4gICAgICAgIGxldCBpdGVtcyA9IFtdO1xuICAgICAgICBsZXQgYmluZGFibGUgPSBmYWxzZTtcbiAgICAgICAgbGV0IGRhdGVBeGlzO1xuXG4gICAgICAgIGZvciAobGV0IHNlcmllc0l4ID0gMDsgc2VyaWVzSXggPCBzZXJpZXNMZW5ndGg7IHNlcmllc0l4KyspIHtcbiAgICAgICAgICAgIGNvbnN0IHMgPSBzZXJpZXNbc2VyaWVzSXhdO1xuICAgICAgICAgICAgY29uc3Qgb25BeGlzID0gcy5jYXRlZ29yeUF4aXMgPT09IGF4aXMubmFtZSB8fCAoIXMuY2F0ZWdvcnlBeGlzICYmIGF4aXNJeCA9PT0gMCk7XG4gICAgICAgICAgICBjb25zdCBkYXRhID0gcy5kYXRhO1xuICAgICAgICAgICAgY29uc3QgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoO1xuICAgICAgICAgICAgY29uc3QgYmluZCA9IHMuY2F0ZWdvcnlGaWVsZCAmJiBvbkF4aXM7XG4gICAgICAgICAgICBiaW5kYWJsZSA9IGJpbmQgfHwgYmluZGFibGU7XG5cbiAgICAgICAgICAgIGlmIChiaW5kICYmIGRhdGFMZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgZGF0ZUF4aXMgPSBpc0RhdGVBeGlzKGF4aXMsIGdldEZpZWxkKHMuY2F0ZWdvcnlGaWVsZCwgZGF0YVswXSkpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgZ2V0Rm4gPSBkYXRlQXhpcyA/IGdldERhdGVGaWVsZCA6IGdldEZpZWxkO1xuXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgZGF0YUl4ID0gMDsgZGF0YUl4IDwgZGF0YUxlbmd0aDsgZGF0YUl4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YVJvdyA9IGRhdGFbZGF0YUl4XTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2F0ZWdvcnkgPSBnZXRGbihzLmNhdGVnb3J5RmllbGQsIGRhdGFSb3csIHRoaXMuY2hhcnRTZXJ2aWNlLmludGwpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRlQXhpcyB8fCAhdW5pcXVlQ2F0ZWdvcmllcy5nZXQoY2F0ZWdvcnkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKFsgY2F0ZWdvcnksIGRhdGFSb3cgXSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZGF0ZUF4aXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmlxdWVDYXRlZ29yaWVzLnNldChjYXRlZ29yeSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXRlbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgaWYgKGRhdGVBeGlzKSB7XG4gICAgICAgICAgICAgICAgaXRlbXMgPSB1bmlxdWVEYXRlcyhpdGVtcywgZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZUNvbXBhcmVyKGFbMF0sIGJbMF0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB0cmFuc3Bvc2UoaXRlbXMpO1xuICAgICAgICAgICAgYXhpcy5jYXRlZ29yaWVzID0gcmVzdWx0WzBdO1xuICAgICAgICB9IGVsc2UgaWYgKGJpbmRhYmxlKSB7XG4gICAgICAgICAgICBheGlzLmNhdGVnb3JpZXMgPSBbXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9pc0JpbmRhYmxlKHNlcmllcykge1xuICAgICAgICBjb25zdCB2YWx1ZUZpZWxkcyA9IFNlcmllc0JpbmRlci5jdXJyZW50LnZhbHVlRmllbGRzKHNlcmllcyk7XG4gICAgICAgIGxldCByZXN1bHQgPSB0cnVlO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWVGaWVsZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBmaWVsZCA9IHZhbHVlRmllbGRzW2ldO1xuICAgICAgICAgICAgaWYgKGZpZWxkID09PSBWQUxVRSkge1xuICAgICAgICAgICAgICAgIGZpZWxkID0gXCJmaWVsZFwiO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmaWVsZCA9IGZpZWxkICsgXCJGaWVsZFwiO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWRlZmluZWQoc2VyaWVzW2ZpZWxkXSkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgX25vVHJhbnNpdGlvbnNSZWRyYXcoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGxldCB0cmFuc2l0aW9uc1N0YXRlO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnRyYW5zaXRpb25zICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgb3B0aW9ucy50cmFuc2l0aW9ucyA9IGZhbHNlO1xuICAgICAgICAgICAgdHJhbnNpdGlvbnNTdGF0ZSA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9yZWRyYXcoKTtcblxuICAgICAgICBpZiAodHJhbnNpdGlvbnNTdGF0ZSkge1xuICAgICAgICAgICAgb3B0aW9ucy50cmFuc2l0aW9ucyA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfbGVnZW5kSXRlbUhvdmVyKHNlcmllc0luZGV4LCBwb2ludEluZGV4KSB7XG4gICAgICAgIGNvbnN0IHsgX3Bsb3RBcmVhOiBwbG90QXJlYSwgX2hpZ2hsaWdodDogaGlnaGxpZ2h0IH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBjdXJyZW50U2VyaWVzID0gKHBsb3RBcmVhLnNyY1NlcmllcyB8fCBwbG90QXJlYS5zZXJpZXMpW3Nlcmllc0luZGV4XTtcbiAgICAgICAgbGV0IGl0ZW1zO1xuXG4gICAgICAgIGlmIChpbkFycmF5KGN1cnJlbnRTZXJpZXMudHlwZSwgWyBQSUUsIERPTlVULCBGVU5ORUwgXSkpIHtcbiAgICAgICAgICAgIGl0ZW1zID0gcGxvdEFyZWEuZmluZFBvaW50KGZ1bmN0aW9uKHBvaW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBvaW50LnNlcmllcy5pbmRleCA9PT0gc2VyaWVzSW5kZXggJiYgcG9pbnQuaW5kZXggPT09IHBvaW50SW5kZXg7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGl0ZW1zID0gcGxvdEFyZWEucG9pbnRzQnlTZXJpZXNJbmRleChzZXJpZXNJbmRleCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5faGFzSW5hY3RpdmVPcGFjaXR5KCkpIHtcbiAgICAgICAgICAgIGNvbnN0IG11bHRpcGxlU2VyaWVzID0gcGxvdEFyZWEuc2VyaWVzLmxlbmd0aCA+IDE7XG4gICAgICAgICAgICBjb25zdCBwb2ludCA9IGl0ZW1zWzBdO1xuXG4gICAgICAgICAgICBpZiAobXVsdGlwbGVTZXJpZXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9kaXNwbGF5SW5hY3RpdmVPcGFjaXR5KHBvaW50LCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZGlzcGxheUluYWN0aXZlT3BhY2l0eShwb2ludCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoaWdobGlnaHQuc2hvdyhpdGVtcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfc2hvdWxkQXR0YWNoTW91c2VNb3ZlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGxvdEFyZWEuY3Jvc3NoYWlycy5sZW5ndGggfHwgKHRoaXMuX3Rvb2x0aXAgJiYgdGhpcy5fc2hhcmVkVG9vbHRpcCgpKSB8fCB0aGlzLnJlcXVpcmVzSGFuZGxlcnMoWyBQTE9UX0FSRUFfSE9WRVIsIFBMT1RfQVJFQV9MRUFWRSBdKTtcbiAgICB9XG5cbiAgICB1cGRhdGVNb3VzZU1vdmVIYW5kbGVyKCkge1xuICAgICAgICB1bmJpbmRFdmVudHModGhpcy5lbGVtZW50LCB7XG4gICAgICAgICAgICBbIE1PVVNFTU9WRSBdOiB0aGlzLl9tb3VzZW1vdmVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHRoaXMuX3Nob3VsZEF0dGFjaE1vdXNlTW92ZSgpKSB7XG4gICAgICAgICAgICBiaW5kRXZlbnRzKHRoaXMuZWxlbWVudCwge1xuICAgICAgICAgICAgICAgIFsgTU9VU0VNT1ZFIF06IHRoaXMuX21vdXNlbW92ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhcHBseU9wdGlvbnMob3B0aW9ucywgdGhlbWUpIHtcbiAgICAgICAgY2xlYXJNaXNzaW5nVmFsdWVzKHRoaXMuX29yaWdpbmFsT3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuX29yaWdpbmFsT3B0aW9ucyA9IGRlZXBFeHRlbmQodGhpcy5fb3JpZ2luYWxPcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gZGVlcEV4dGVuZCh7fSwgdGhpcy5fb3JpZ2luYWxPcHRpb25zKTtcblxuICAgICAgICBpZiAodGhlbWUpIHtcbiAgICAgICAgICAgIHRoaXMuX3RoZW1lID0gdGhlbWU7XG4gICAgICAgICAgICB0aGlzLmNoYXJ0U2VydmljZS50aGVtZSA9IHRoZW1lO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2luaXRUaGVtZSh0aGlzLm9wdGlvbnMsIHRoaXMuX3RoZW1lKTtcblxuICAgICAgICB0aGlzLl90b2dnbGVEcmFnWm9vbUV2ZW50cygpO1xuICAgIH1cblxuICAgIHNldE9wdGlvbnMob3B0aW9ucywgdGhlbWUpIHtcbiAgICAgICAgdGhpcy5hcHBseU9wdGlvbnMob3B0aW9ucywgdGhlbWUpO1xuICAgICAgICB0aGlzLmJpbmRDYXRlZ29yaWVzKCk7XG4gICAgICAgIHRoaXMucmVkcmF3KCk7XG4gICAgICAgIHRoaXMudXBkYXRlTW91c2VNb3ZlSGFuZGxlcigpO1xuICAgIH1cblxuICAgIHNldERpcmVjdGlvbihydGwpIHtcbiAgICAgICAgdGhpcy5jaGFydFNlcnZpY2UucnRsID0gQm9vbGVhbihydGwpO1xuICAgICAgICBpZiAodGhpcy5zdXJmYWNlICYmIHRoaXMuc3VyZmFjZS50eXBlID09PSAnc3ZnJykge1xuICAgICAgICAgICAgdGhpcy5fZGVzdHJveVN1cmZhY2UoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldEludGxTZXJ2aWNlKGludGwpIHtcbiAgICAgICAgdGhpcy5jaGFydFNlcnZpY2UuaW50bCA9IGludGw7XG4gICAgfVxuXG4gICAgbm9UcmFuc2l0aW9uc1JlZHJhdygpIHtcbiAgICAgICAgdGhpcy5fbm9UcmFuc2l0aW9uc1JlZHJhdygpO1xuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuX2Rlc3Ryb3llZCA9IHRydWU7XG5cbiAgICAgICAgdW5iaW5kRXZlbnRzKHRoaXMuZWxlbWVudCwge1xuICAgICAgICAgICAgWyBDT05URVhUTUVOVSBdOiB0aGlzLl9jbGlja0hhbmRsZXIsXG4gICAgICAgICAgICBbIE1PVVNFV0hFRUwgXTogdGhpcy5fbW91c2V3aGVlbEhhbmRsZXIsXG4gICAgICAgICAgICBbIE1PVVNFTU9WRSBdOiB0aGlzLl9tb3VzZW1vdmUsXG4gICAgICAgICAgICBbIE1PVVNFTEVBVkUgXTogdGhpcy5fbW91c2VsZWF2ZUhhbmRsZXJcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHRoaXMuZG9tRXZlbnRzKSB7XG4gICAgICAgICAgICB0aGlzLmRvbUV2ZW50cy5kZXN0cm95KCk7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5kb21FdmVudHM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fbW91c2VNb3ZlVHJhY2tIYW5kbGVyKSB7XG4gICAgICAgICAgICB1bmJpbmRFdmVudHMoZG9jdW1lbnQsIHtcbiAgICAgICAgICAgICAgICBbIE1PVVNFTU9WRSBdOiB0aGlzLl9tb3VzZU1vdmVUcmFja0hhbmRsZXJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZGVzdHJveVZpZXcoKTtcblxuICAgICAgICB0aGlzLl9kZXN0cm95U3VyZmFjZSgpO1xuXG4gICAgICAgIHRoaXMuX2NsZWFyUmVkcmF3VGltZW91dCgpO1xuICAgIH1cblxuICAgIF9kZXN0cm95U3VyZmFjZSgpIHtcbiAgICAgICAgY29uc3Qgc3VyZmFjZSA9IHRoaXMuc3VyZmFjZTtcbiAgICAgICAgaWYgKHN1cmZhY2UpIHtcbiAgICAgICAgICAgIHN1cmZhY2UudW5iaW5kKFwibW91c2VlbnRlclwiLCB0aGlzLl9zdXJmYWNlTW91c2VlbnRlckhhbmRsZXIpO1xuICAgICAgICAgICAgc3VyZmFjZS51bmJpbmQoXCJtb3VzZWxlYXZlXCIsIHRoaXMuX3N1cmZhY2VNb3VzZWxlYXZlSGFuZGxlcik7XG4gICAgICAgICAgICBzdXJmYWNlLmRlc3Ryb3koKTtcblxuICAgICAgICAgICAgdGhpcy5zdXJmYWNlID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9kZXN0cm95U2VsZWN0aW9ucygpIHtcbiAgICAgICAgY29uc3Qgc2VsZWN0aW9ucyA9IHRoaXMuX3NlbGVjdGlvbnM7XG5cbiAgICAgICAgaWYgKHNlbGVjdGlvbnMpIHtcbiAgICAgICAgICAgIHdoaWxlIChzZWxlY3Rpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb25zLnNoaWZ0KCkuZGVzdHJveSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2Rlc3Ryb3lWaWV3KCkge1xuICAgICAgICBjb25zdCBtb2RlbCA9IHRoaXMuX21vZGVsO1xuXG4gICAgICAgIGlmIChtb2RlbCkge1xuICAgICAgICAgICAgbW9kZWwuZGVzdHJveSgpO1xuICAgICAgICAgICAgdGhpcy5fbW9kZWwgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fdW5zZXRBY3RpdmVQb2ludCgpO1xuXG4gICAgICAgIHRoaXMuX2Rlc3Ryb3lTZWxlY3Rpb25zKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuX3Rvb2x0aXApIHtcbiAgICAgICAgICAgIHRoaXMuX3Rvb2x0aXAuZGVzdHJveSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX2hpZ2hsaWdodCkge1xuICAgICAgICAgICAgdGhpcy5faGlnaGxpZ2h0LmRlc3Ryb3koKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl96b29tU2VsZWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLl96b29tU2VsZWN0aW9uLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl96b29tU2VsZWN0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX3Bhbm5hYmxlKSB7XG4gICAgICAgICAgICB0aGlzLl9wYW5uYWJsZS5kZXN0cm95KCk7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fcGFubmFibGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5fbW91c2V3aGVlbFpvb20pIHtcbiAgICAgICAgICAgIHRoaXMuX21vdXNld2hlZWxab29tLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9tb3VzZXdoZWVsWm9vbTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUF4aXNBbGlhc2VzKG9wdGlvbnMpIHtcbiAgICBjb25zdCBhbGlhc2VzID0gQVhJU19OQU1FUztcblxuICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGFsaWFzZXMubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICBjb25zdCBhbGlhcyA9IGFsaWFzZXNbaWR4XSArIFwiQXhlc1wiO1xuICAgICAgICBpZiAob3B0aW9uc1thbGlhc10pIHtcbiAgICAgICAgICAgIG9wdGlvbnNbYWxpYXNlc1tpZHhdICsgXCJBeGlzXCJdID0gb3B0aW9uc1thbGlhc107XG4gICAgICAgICAgICBkZWxldGUgb3B0aW9uc1thbGlhc107XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIHBvaW50QnlDYXRlZ29yeU5hbWUocG9pbnRzLCBuYW1lKSB7XG4gICAgaWYgKHBvaW50cykge1xuICAgICAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBwb2ludHMubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgaWYgKHBvaW50c1tpZHhdLmNhdGVnb3J5ID09PSBuYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsgcG9pbnRzW2lkeF0gXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlBeGlzRGVmYXVsdHMob3B0aW9ucywgdGhlbWVPcHRpb25zKSB7XG4gICAgY29uc3QgdGhlbWVBeGlzRGVmYXVsdHMgPSAoKHRoZW1lT3B0aW9ucyB8fCB7fSkuYXhpc0RlZmF1bHRzKSB8fCB7fTtcbiAgICBsZXQgYXhpc05hbWUsIGF4aXNEZWZhdWx0cywgYXhlcztcblxuICAgIGZ1bmN0aW9uIG1hcEF4aXNPcHRpb25zKGF4aXNPcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGF4aXNDb2xvciA9IChheGlzT3B0aW9ucyB8fCB7fSkuY29sb3IgfHwgYXhpc0RlZmF1bHRzLmNvbG9yO1xuICAgICAgICBjb25zdCByZXN1bHQgPSBkZWVwRXh0ZW5kKHt9LFxuICAgICAgICAgICAgdGhlbWVBeGlzRGVmYXVsdHMsXG4gICAgICAgICAgICB0aGVtZUF4aXNEZWZhdWx0c1theGlzTmFtZV0sXG4gICAgICAgICAgICBheGlzRGVmYXVsdHMsXG4gICAgICAgICAgICBheGlzRGVmYXVsdHNbYXhpc05hbWVdLCB7XG4gICAgICAgICAgICAgICAgbGluZTogeyBjb2xvcjogYXhpc0NvbG9yIH0sXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7IGNvbG9yOiBheGlzQ29sb3IgfSxcbiAgICAgICAgICAgICAgICB0aXRsZTogeyBjb2xvcjogYXhpc0NvbG9yIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBheGlzT3B0aW9uc1xuICAgICAgICApO1xuXG4gICAgICAgIGRlbGV0ZSByZXN1bHRbYXhpc05hbWVdO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgQVhJU19OQU1FUy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgIGF4aXNOYW1lID0gQVhJU19OQU1FU1tpZHhdICsgXCJBeGlzXCI7XG4gICAgICAgIGF4aXNEZWZhdWx0cyA9IG9wdGlvbnMuYXhpc0RlZmF1bHRzIHx8IHt9O1xuICAgICAgICBheGVzID0gW10uY29uY2F0KG9wdGlvbnNbYXhpc05hbWVdKTtcblxuICAgICAgICBheGVzID0gYXhlcy5tYXAobWFwQXhpc09wdGlvbnMpO1xuXG4gICAgICAgIG9wdGlvbnNbYXhpc05hbWVdID0gYXhlcy5sZW5ndGggPiAxID8gYXhlcyA6IGF4ZXNbMF07XG4gICAgfVxufVxuXG5mdW5jdGlvbiBhcHBseVNlcmllc0RlZmF1bHRzKG9wdGlvbnMsIHRoZW1lT3B0aW9ucykge1xuICAgIGNvbnN0IHNlcmllcyA9IG9wdGlvbnMuc2VyaWVzO1xuICAgIGNvbnN0IHNlcmllc0xlbmd0aCA9IHNlcmllcy5sZW5ndGg7XG4gICAgY29uc3Qgc2VyaWVzRGVmYXVsdHMgPSBvcHRpb25zLnNlcmllc0RlZmF1bHRzO1xuICAgIGNvbnN0IGNvbW1vbkRlZmF1bHRzID0gZGVlcEV4dGVuZCh7fSwgb3B0aW9ucy5zZXJpZXNEZWZhdWx0cyk7XG4gICAgY29uc3QgdGhlbWVTZXJpZXNEZWZhdWx0cyA9IHRoZW1lT3B0aW9ucyA/IGRlZXBFeHRlbmQoe30sIHRoZW1lT3B0aW9ucy5zZXJpZXNEZWZhdWx0cykgOiB7fTtcbiAgICBjb25zdCBjb21tb25UaGVtZURlZmF1bHRzID0gZGVlcEV4dGVuZCh7fSwgdGhlbWVTZXJpZXNEZWZhdWx0cyk7XG5cbiAgICBjbGVhbnVwTmVzdGVkU2VyaWVzRGVmYXVsdHMoY29tbW9uRGVmYXVsdHMpO1xuICAgIGNsZWFudXBOZXN0ZWRTZXJpZXNEZWZhdWx0cyhjb21tb25UaGVtZURlZmF1bHRzKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VyaWVzTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qgc2VyaWVzVHlwZSA9IHNlcmllc1tpXS50eXBlIHx8IG9wdGlvbnMuc2VyaWVzRGVmYXVsdHMudHlwZTtcblxuICAgICAgICBjb25zdCBiYXNlT3B0aW9ucyA9IGRlZXBFeHRlbmQoXG4gICAgICAgICAgICB7IGRhdGE6IFtdIH0sXG4gICAgICAgICAgICBjb21tb25UaGVtZURlZmF1bHRzLFxuICAgICAgICAgICAgdGhlbWVTZXJpZXNEZWZhdWx0c1tzZXJpZXNUeXBlXSxcbiAgICAgICAgICAgIHsgdG9vbHRpcDogb3B0aW9ucy50b29sdGlwIH0sXG4gICAgICAgICAgICBjb21tb25EZWZhdWx0cyxcbiAgICAgICAgICAgIHNlcmllc0RlZmF1bHRzW3Nlcmllc1R5cGVdXG4gICAgICAgICk7XG5cbiAgICAgICAgc2VyaWVzW2ldLl9kZWZhdWx0cyA9IGJhc2VPcHRpb25zO1xuICAgICAgICBzZXJpZXNbaV0gPSBkZWVwRXh0ZW5kKHt9LCBiYXNlT3B0aW9ucywgc2VyaWVzW2ldKTtcbiAgICAgICAgc2VyaWVzW2ldLmRhdGEgPSBzZXJpZXNbaV0uZGF0YSB8fCBbXTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNsZWFudXBOZXN0ZWRTZXJpZXNEZWZhdWx0cyhzZXJpZXNEZWZhdWx0cykge1xuICAgIGRlbGV0ZSBzZXJpZXNEZWZhdWx0cy5iYXI7XG4gICAgZGVsZXRlIHNlcmllc0RlZmF1bHRzLmNvbHVtbjtcbiAgICBkZWxldGUgc2VyaWVzRGVmYXVsdHMucmFuZ2VDb2x1bW47XG4gICAgZGVsZXRlIHNlcmllc0RlZmF1bHRzLmxpbmU7XG4gICAgZGVsZXRlIHNlcmllc0RlZmF1bHRzLnZlcnRpY2FsTGluZTtcbiAgICBkZWxldGUgc2VyaWVzRGVmYXVsdHMucGllO1xuICAgIGRlbGV0ZSBzZXJpZXNEZWZhdWx0cy5kb251dDtcbiAgICBkZWxldGUgc2VyaWVzRGVmYXVsdHMuYXJlYTtcbiAgICBkZWxldGUgc2VyaWVzRGVmYXVsdHMudmVydGljYWxBcmVhO1xuICAgIGRlbGV0ZSBzZXJpZXNEZWZhdWx0cy5zY2F0dGVyO1xuICAgIGRlbGV0ZSBzZXJpZXNEZWZhdWx0cy5zY2F0dGVyTGluZTtcbiAgICBkZWxldGUgc2VyaWVzRGVmYXVsdHMuYnViYmxlO1xuICAgIGRlbGV0ZSBzZXJpZXNEZWZhdWx0cy5jYW5kbGVzdGljaztcbiAgICBkZWxldGUgc2VyaWVzRGVmYXVsdHMub2hsYztcbiAgICBkZWxldGUgc2VyaWVzRGVmYXVsdHMuYm94UGxvdDtcbiAgICBkZWxldGUgc2VyaWVzRGVmYXVsdHMuYnVsbGV0O1xuICAgIGRlbGV0ZSBzZXJpZXNEZWZhdWx0cy52ZXJ0aWNhbEJ1bGxldDtcbiAgICBkZWxldGUgc2VyaWVzRGVmYXVsdHMucG9sYXJBcmVhO1xuICAgIGRlbGV0ZSBzZXJpZXNEZWZhdWx0cy5wb2xhckxpbmU7XG4gICAgZGVsZXRlIHNlcmllc0RlZmF1bHRzLnJhZGFyQXJlYTtcbiAgICBkZWxldGUgc2VyaWVzRGVmYXVsdHMucmFkYXJMaW5lO1xuICAgIGRlbGV0ZSBzZXJpZXNEZWZhdWx0cy53YXRlcmZhbGw7XG59XG5cblxuZnVuY3Rpb24gYXhpc1JhbmdlcyhheGVzKSB7XG4gICAgY29uc3QgcmFuZ2VzID0ge307XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGF4ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgYXhpcyA9IGF4ZXNbaV07XG4gICAgICAgIGNvbnN0IGF4aXNOYW1lID0gYXhpcy5vcHRpb25zLm5hbWU7XG4gICAgICAgIGlmIChheGlzTmFtZSkge1xuICAgICAgICAgICAgcmFuZ2VzW2F4aXNOYW1lXSA9IGF4aXMucmFuZ2UoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByYW5nZXM7XG59XG5cbmZ1bmN0aW9uIHNvcnREYXRlcyhkYXRlcywgY29tcGFyZXIgPSBkYXRlQ29tcGFyZXIpIHtcbiAgICBmb3IgKGxldCBpID0gMSwgbGVuZ3RoID0gZGF0ZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGNvbXBhcmVyKGRhdGVzW2ldLCBkYXRlc1tpIC0gMV0pIDwgMCkge1xuICAgICAgICAgICAgZGF0ZXMuc29ydChjb21wYXJlcik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkYXRlcztcbn1cblxuZnVuY3Rpb24gdW5pcXVlRGF0ZXMoc3JjRGF0ZXMsIGNvbXBhcmVyID0gZGF0ZUNvbXBhcmVyKSB7XG4gICAgY29uc3QgZGF0ZXMgPSBzb3J0RGF0ZXMoc3JjRGF0ZXMsIGNvbXBhcmVyKTtcbiAgICBjb25zdCBsZW5ndGggPSBkYXRlcy5sZW5ndGg7XG4gICAgY29uc3QgcmVzdWx0ID0gbGVuZ3RoID4gMCA/IFsgZGF0ZXNbMF0gXSA6IFtdO1xuXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoY29tcGFyZXIoZGF0ZXNbaV0sIGxhc3QocmVzdWx0KSkgIT09IDApIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGRhdGVzW2ldKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIHRyYW5zcG9zZShyb3dzKSB7XG4gICAgY29uc3Qgcm93Q291bnQgPSByb3dzLmxlbmd0aDtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcblxuICAgIGZvciAobGV0IHJvd0l4ID0gMDsgcm93SXggPCByb3dDb3VudDsgcm93SXgrKykge1xuICAgICAgICBjb25zdCByb3cgPSByb3dzW3Jvd0l4XTtcbiAgICAgICAgY29uc3QgY29sQ291bnQgPSByb3cubGVuZ3RoO1xuXG4gICAgICAgIGZvciAobGV0IGNvbEl4ID0gMDsgY29sSXggPCBjb2xDb3VudDsgY29sSXgrKykge1xuICAgICAgICAgICAgcmVzdWx0W2NvbEl4XSA9IHJlc3VsdFtjb2xJeF0gfHwgW107XG4gICAgICAgICAgICByZXN1bHRbY29sSXhdLnB1c2gocm93W2NvbEl4XSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5jb25zdCBEQVRBX0ZJRUxEUyA9IFsgJ2RhdGEnLCAnY2F0ZWdvcmllcycgXTtcblxuZnVuY3Rpb24gY2xlYXJNaXNzaW5nVmFsdWVzKG9yaWdpbmFsT3B0aW9ucywgb3B0aW9ucykge1xuICAgIGZvciAobGV0IGZpZWxkIGluIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCFpbkFycmF5KGZpZWxkLCBEQVRBX0ZJRUxEUykgJiYgb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShmaWVsZCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpZWxkVmFsdWUgPSBvcHRpb25zW2ZpZWxkXTtcbiAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsVmFsdWUgPSBvcmlnaW5hbE9wdGlvbnNbZmllbGRdO1xuICAgICAgICAgICAgaWYgKGRlZmluZWQob3JpZ2luYWxWYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBudWxsVmFsdWUgPSBmaWVsZFZhbHVlID09PSBudWxsO1xuICAgICAgICAgICAgICAgIGlmICgobnVsbFZhbHVlIHx8ICFkZWZpbmVkKGZpZWxkVmFsdWUpKSkge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgb3JpZ2luYWxPcHRpb25zW2ZpZWxkXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG51bGxWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnNbZmllbGRdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvcmlnaW5hbFZhbHVlICYmIGlzT2JqZWN0KGZpZWxkVmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc09iamVjdChvcmlnaW5hbFZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJNaXNzaW5nVmFsdWVzKG9yaWdpbmFsVmFsdWUsIGZpZWxkVmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiB0cmlnZ2VyUGFuZVJlbmRlcihwYW5lcykge1xuICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IHBhbmVzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgcGFuZXNbaWR4XS5ub3RpZnlSZW5kZXIoKTtcbiAgICB9XG59XG5cbnNldERlZmF1bHRPcHRpb25zKENoYXJ0LCB7XG4gICAgcmVuZGVyQXM6IFwiXCIsXG4gICAgY2hhcnRBcmVhOiB7fSxcbiAgICBsZWdlbmQ6IHtcbiAgICAgICAgdmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgbGFiZWxzOiB7fVxuICAgIH0sXG4gICAgY2F0ZWdvcnlBeGlzOiB7fSxcbiAgICBzZXJpZXNEZWZhdWx0czoge1xuICAgICAgICB0eXBlOiBDT0xVTU4sXG4gICAgICAgIGRhdGE6IFtdLFxuICAgICAgICBoaWdobGlnaHQ6IHtcbiAgICAgICAgICAgIHZpc2libGU6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgbGFiZWxzOiB7fSxcbiAgICAgICAgbmVnYXRpdmVWYWx1ZXM6IHtcbiAgICAgICAgICAgIHZpc2libGU6IGZhbHNlXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHNlcmllczogW10sXG4gICAgc2VyaWVzQ29sb3JzOiBudWxsLFxuICAgIHRvb2x0aXA6IHtcbiAgICAgICAgdmlzaWJsZTogZmFsc2VcbiAgICB9LFxuICAgIHRyYW5zaXRpb25zOiB0cnVlLFxuICAgIHZhbHVlQXhpczoge30sXG4gICAgcGxvdEFyZWE6IHt9LFxuICAgIHRpdGxlOiB7fSxcbiAgICB4QXhpczoge30sXG4gICAgeUF4aXM6IHt9LFxuICAgIHBhbmVzOiBbIHt9IF0sXG4gICAgcGFubmFibGU6IGZhbHNlLFxuICAgIHpvb21hYmxlOiBmYWxzZVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IENoYXJ0O1xuIiwiaW1wb3J0IHsgU2hhcmVkVG9vbHRpcCBhcyBDaGFydFNoYXJlZFRvb2x0aXAgfSBmcm9tICcuLi9jaGFydCc7XG5pbXBvcnQgeyBQb2ludCB9IGZyb20gJy4uL2NvcmUnO1xuY29uc3QgVE9QX09GRlNFVCA9IC0yO1xuXG5jbGFzcyBTaGFyZWRUb29sdGlwIGV4dGVuZHMgQ2hhcnRTaGFyZWRUb29sdGlwIHtcbiAgICBfc2xvdEFuY2hvcihjb29yZHMsIHNsb3QpIHtcbiAgICAgICAgY29uc3QgYXhpcyA9IHRoaXMucGxvdEFyZWEuY2F0ZWdvcnlBeGlzO1xuICAgICAgICBjb25zdCB2ZXJ0aWNhbCA9IGF4aXMub3B0aW9ucy52ZXJ0aWNhbDtcbiAgICAgICAgY29uc3QgYWxpZ24gPSB2ZXJ0aWNhbCA/IHtcbiAgICAgICAgICAgIGhvcml6b250YWw6IFwibGVmdFwiLFxuICAgICAgICAgICAgdmVydGljYWw6IFwiY2VudGVyXCJcbiAgICAgICAgfSA6IHtcbiAgICAgICAgICAgIGhvcml6b250YWw6IFwiY2VudGVyXCIsXG4gICAgICAgICAgICB2ZXJ0aWNhbDogXCJib3R0b21cIlxuICAgICAgICB9O1xuXG4gICAgICAgIGxldCBwb2ludDtcblxuICAgICAgICBpZiAodmVydGljYWwpIHtcbiAgICAgICAgICAgIHBvaW50ID0gbmV3IFBvaW50KHRoaXMucGxvdEFyZWEuYm94LngyLCBzbG90LmNlbnRlcigpLnkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcG9pbnQgPSBuZXcgUG9pbnQoc2xvdC5jZW50ZXIoKS54LCBUT1BfT0ZGU0VUKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBwb2ludDogcG9pbnQsXG4gICAgICAgICAgICBhbGlnbjogYWxpZ25cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBfZGVmYXVsdEFuY2hvcihwb2ludCwgc2xvdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2xvdEFuY2hvcih7fSwgc2xvdCk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTaGFyZWRUb29sdGlwOyIsImltcG9ydCB7IENoYXJ0IH0gZnJvbSAnLi4vY2hhcnQnO1xuaW1wb3J0IHsgQkFSLCBCVUxMRVQsIFBJRSwgQ09MVU1OLCBWRVJUSUNBTF9CVUxMRVQgfSBmcm9tICcuLi9jaGFydC9jb25zdGFudHMnO1xuaW1wb3J0eyBhZGRDbGFzcywgZGVlcEV4dGVuZCwgZWxlbWVudFNpemUsIGdldFNwYWNpbmcsIGluQXJyYXksIGlzQXJyYXksIGlzTnVtYmVyLCBzZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gJy4uL2NvbW1vbic7XG5pbXBvcnQgU2hhcmVkVG9vbHRpcCBmcm9tICcuL3NoYXJlZC10b29sdGlwJztcblxuY29uc3QgREVBVUxUX0JBUl9XSURUSCA9IDE1MDtcbmNvbnN0IERFQVVMVF9CVUxMRVRfV0lEVEggPSAxNTA7XG5jb25zdCBOT19DUk9TU0hBSVIgPSBbIEJBUiwgQlVMTEVUIF07XG5cbmZ1bmN0aW9uIGhpZGUoY2hpbGRyZW4pIHtcbiAgICBjb25zdCBzdGF0ZSA9IFtdO1xuICAgIGZvciAobGV0IGlkeCA9IDA7IGlkeCA8IGNoaWxkcmVuLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgY29uc3QgY2hpbGQgPSBjaGlsZHJlbltpZHhdO1xuICAgICAgICBzdGF0ZVtpZHhdID0gY2hpbGQuc3R5bGUuZGlzcGxheTtcbiAgICAgICAgY2hpbGQuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgIH1cblxuICAgIHJldHVybiBzdGF0ZTtcbn1cblxuZnVuY3Rpb24gc2hvdyhjaGlsZHJlbiwgc3RhdGUpIHtcbiAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBjaGlsZHJlbi5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgIGNoaWxkcmVuW2lkeF0uc3R5bGUuZGlzcGxheSA9IHN0YXRlW2lkeF07XG4gICAgfVxufVxuXG5mdW5jdGlvbiB3cmFwTnVtYmVyKHZhbHVlKSB7XG4gICAgcmV0dXJuIGlzTnVtYmVyKHZhbHVlKSA/IFsgdmFsdWUgXSA6IHZhbHVlO1xufVxuXG5jbGFzcyBTcGFya2xpbmUgZXh0ZW5kcyBDaGFydCB7XG4gICAgX3NldEVsZW1lbnRDbGFzcyhlbGVtZW50KSB7XG4gICAgICAgIGFkZENsYXNzKGVsZW1lbnQsICdrLXNwYXJrbGluZScpO1xuICAgIH1cblxuICAgIF9pbml0RWxlbWVudChlbGVtZW50KSB7XG4gICAgICAgIHN1cGVyLl9pbml0RWxlbWVudChlbGVtZW50KTtcblxuICAgICAgICB0aGlzLl9pbml0aWFsV2lkdGggPSBNYXRoLmZsb29yKGVsZW1lbnRTaXplKGVsZW1lbnQpLndpZHRoKTtcbiAgICB9XG5cbiAgICBfcmVzaXplKCkge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5lbGVtZW50O1xuICAgICAgICBjb25zdCBzdGF0ZSA9IGhpZGUoZWxlbWVudC5jaGlsZE5vZGVzKTtcblxuICAgICAgICB0aGlzLl9pbml0aWFsV2lkdGggPSBNYXRoLmZsb29yKGVsZW1lbnRTaXplKGVsZW1lbnQpLndpZHRoKTtcblxuICAgICAgICBzaG93KGVsZW1lbnQuY2hpbGROb2Rlcywgc3RhdGUpO1xuXG4gICAgICAgIHN1cGVyLl9yZXNpemUoKTtcbiAgICB9XG5cbiAgICBfbW9kZWxPcHRpb25zKCkge1xuICAgICAgICBjb25zdCBjaGFydE9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHN0YWdlID0gdGhpcy5fc3VyZmFjZVdyYXAoKTtcbiAgICAgICAgY29uc3QgZGlzcGxheVN0YXRlID0gaGlkZShzdGFnZS5jaGlsZE5vZGVzKTtcblxuICAgICAgICBjb25zdCBzcGFjZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgICAgc3BhY2UuaW5uZXJIVE1MID0gJyZuYnNwOyc7XG5cbiAgICAgICAgc3RhZ2UuYXBwZW5kQ2hpbGQoc3BhY2UpO1xuXG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBkZWVwRXh0ZW5kKHtcbiAgICAgICAgICAgIHdpZHRoOiB0aGlzLl9hdXRvV2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IGVsZW1lbnRTaXplKHN0YWdlKS5oZWlnaHQsXG4gICAgICAgICAgICB0cmFuc2l0aW9uczogY2hhcnRPcHRpb25zLnRyYW5zaXRpb25zXG4gICAgICAgIH0sIGNoYXJ0T3B0aW9ucy5jaGFydEFyZWEsIHtcbiAgICAgICAgICAgIGlubGluZTogdHJ1ZSxcbiAgICAgICAgICAgIGFsaWduOiBmYWxzZVxuICAgICAgICB9KTtcblxuICAgICAgICBlbGVtZW50U2l6ZShzdGFnZSwge1xuICAgICAgICAgICAgd2lkdGg6IG9wdGlvbnMud2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IG9wdGlvbnMuaGVpZ2h0XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHN0YWdlLnJlbW92ZUNoaWxkKHNwYWNlKTtcblxuICAgICAgICBzaG93KHN0YWdlLmNoaWxkTm9kZXMsIGRpc3BsYXlTdGF0ZSk7XG5cbiAgICAgICAgaWYgKHRoaXMuc3VyZmFjZSkge1xuICAgICAgICAgICAgdGhpcy5zdXJmYWNlLnJlc2l6ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgfVxuXG4gICAgX3N1cmZhY2VXcmFwKCkge1xuICAgICAgICBpZiAoIXRoaXMuc3RhZ2UpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YWdlID0gdGhpcy5zdGFnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcbiAgICAgICAgICAgIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZChzdGFnZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhZ2U7XG4gICAgfVxuXG4gICAgX2NyZWF0ZVBsb3RBcmVhKHNraXBTZXJpZXMpIHtcbiAgICAgICAgY29uc3QgcGxvdEFyZWEgPSBzdXBlci5fY3JlYXRlUGxvdEFyZWEoc2tpcFNlcmllcyk7XG4gICAgICAgIHRoaXMuX2F1dG9XaWR0aCA9IHRoaXMuX2luaXRpYWxXaWR0aCB8fCB0aGlzLl9jYWxjdWxhdGVXaWR0aChwbG90QXJlYSk7XG5cbiAgICAgICAgcmV0dXJuIHBsb3RBcmVhO1xuICAgIH1cblxuICAgIF9jYWxjdWxhdGVXaWR0aChwbG90QXJlYSkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBtYXJnaW4gPSBnZXRTcGFjaW5nKG9wdGlvbnMuY2hhcnRBcmVhLm1hcmdpbik7XG4gICAgICAgIGNvbnN0IGNoYXJ0cyA9IHBsb3RBcmVhLmNoYXJ0cztcbiAgICAgICAgY29uc3Qgc3RhZ2UgPSB0aGlzLl9zdXJmYWNlV3JhcCgpO1xuICAgICAgICBsZXQgdG90YWwgPSAwO1xuXG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRDaGFydCA9IGNoYXJ0c1tpXTtcbiAgICAgICAgICAgIGNvbnN0IGZpcnN0U2VyaWVzID0gKGN1cnJlbnRDaGFydC5vcHRpb25zLnNlcmllcyB8fCBbXSlbMF07XG4gICAgICAgICAgICBpZiAoIWZpcnN0U2VyaWVzKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChmaXJzdFNlcmllcy50eXBlID09PSBCQVIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gREVBVUxUX0JBUl9XSURUSDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGZpcnN0U2VyaWVzLnR5cGUgPT09IEJVTExFVCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBERUFVTFRfQlVMTEVUX1dJRFRIO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZmlyc3RTZXJpZXMudHlwZSA9PT0gUElFKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnRTaXplKHN0YWdlKS5oZWlnaHQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGNhdGVnb3J5QXhpcyA9IGN1cnJlbnRDaGFydC5jYXRlZ29yeUF4aXM7XG4gICAgICAgICAgICBpZiAoY2F0ZWdvcnlBeGlzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcG9pbnRzQ291bnQgPSBjYXRlZ29yeUF4aXMuY2F0ZWdvcmllc0NvdW50KCkgKlxuICAgICAgICAgICAgICAgICAgICAoIWN1cnJlbnRDaGFydC5vcHRpb25zLmlzU3RhY2tlZCAmJiBpbkFycmF5KGZpcnN0U2VyaWVzLnR5cGUsIFsgQ09MVU1OLCBWRVJUSUNBTF9CVUxMRVQgXSkgPyBjdXJyZW50Q2hhcnQuc2VyaWVzT3B0aW9ucy5sZW5ndGggOiAxKTtcblxuICAgICAgICAgICAgICAgIHRvdGFsID0gTWF0aC5tYXgodG90YWwsIHBvaW50c0NvdW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBzaXplID0gdG90YWwgKiBvcHRpb25zLnBvaW50V2lkdGg7XG4gICAgICAgIGlmIChzaXplID4gMCkge1xuICAgICAgICAgICAgc2l6ZSArPSBtYXJnaW4ubGVmdCArIG1hcmdpbi5yaWdodDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzaXplO1xuICAgIH1cblxuICAgIF9jcmVhdGVTaGFyZWRUb29sdGlwKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTaGFyZWRUb29sdGlwKHRoaXMuX3Bsb3RBcmVhLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgbm9ybWFsaXplT3B0aW9ucyh1c2VyT3B0aW9ucykge1xuICAgICAgICBsZXQgb3B0aW9ucyA9IHdyYXBOdW1iZXIodXNlck9wdGlvbnMpO1xuXG4gICAgICAgIGlmIChpc0FycmF5KG9wdGlvbnMpKSB7XG4gICAgICAgICAgICBvcHRpb25zID0geyBzZXJpZXNEZWZhdWx0czogeyBkYXRhOiBvcHRpb25zIH0gfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBkZWVwRXh0ZW5kKHt9LCBvcHRpb25zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghb3B0aW9ucy5zZXJpZXMpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuc2VyaWVzID0gWyB7IGRhdGE6IHdyYXBOdW1iZXIob3B0aW9ucy5kYXRhKSB9IF07XG4gICAgICAgIH1cblxuICAgICAgICBkZWVwRXh0ZW5kKG9wdGlvbnMsIHtcbiAgICAgICAgICAgIHNlcmllc0RlZmF1bHRzOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogb3B0aW9ucy50eXBlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChpbkFycmF5KG9wdGlvbnMuc2VyaWVzWzBdLnR5cGUsIE5PX0NST1NTSEFJUikgfHxcbiAgICAgICAgICAgIGluQXJyYXkob3B0aW9ucy5zZXJpZXNEZWZhdWx0cy50eXBlLCBOT19DUk9TU0hBSVIpKSB7XG4gICAgICAgICAgICBvcHRpb25zID0gZGVlcEV4dGVuZCh7fSwge1xuICAgICAgICAgICAgICAgIGNhdGVnb3J5QXhpczoge1xuICAgICAgICAgICAgICAgICAgICBjcm9zc2hhaXI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpc2libGU6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBvcHRpb25zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvcHRpb25zO1xuICAgIH1cbn1cblxuc2V0RGVmYXVsdE9wdGlvbnMoU3BhcmtsaW5lLCB7XG4gICAgY2hhcnRBcmVhOiB7XG4gICAgICAgIG1hcmdpbjogMlxuICAgIH0sXG4gICAgYXhpc0RlZmF1bHRzOiB7XG4gICAgICAgIHZpc2libGU6IGZhbHNlLFxuICAgICAgICBtYWpvckdyaWRMaW5lczoge1xuICAgICAgICAgICAgdmlzaWJsZTogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgdmFsdWVBeGlzOiB7XG4gICAgICAgICAgICBuYXJyb3dSYW5nZTogdHJ1ZVxuICAgICAgICB9XG4gICAgfSxcbiAgICBzZXJpZXNEZWZhdWx0czoge1xuICAgICAgICB0eXBlOiBcImxpbmVcIixcbiAgICAgICAgYXJlYToge1xuICAgICAgICAgICAgbGluZToge1xuICAgICAgICAgICAgICAgIHdpZHRoOiAwLjVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgYmFyOiB7XG4gICAgICAgICAgICBzdGFjazogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBwYWRkaW5nOiAyLFxuICAgICAgICB3aWR0aDogMC41LFxuICAgICAgICBvdmVybGF5OiB7XG4gICAgICAgICAgICBncmFkaWVudDogbnVsbFxuICAgICAgICB9LFxuICAgICAgICBoaWdobGlnaHQ6IHtcbiAgICAgICAgICAgIHZpc2libGU6IGZhbHNlXG4gICAgICAgIH0sXG4gICAgICAgIGJvcmRlcjoge1xuICAgICAgICAgICAgd2lkdGg6IDBcbiAgICAgICAgfSxcbiAgICAgICAgbWFya2Vyczoge1xuICAgICAgICAgICAgc2l6ZTogMixcbiAgICAgICAgICAgIHZpc2libGU6IGZhbHNlXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHRvb2x0aXA6IHtcbiAgICAgICAgdmlzaWJsZTogdHJ1ZSxcbiAgICAgICAgc2hhcmVkOiB0cnVlXG4gICAgfSxcbiAgICBjYXRlZ29yeUF4aXM6IHtcbiAgICAgICAgY3Jvc3NoYWlyOiB7XG4gICAgICAgICAgICB2aXNpYmxlOiB0cnVlLFxuICAgICAgICAgICAgdG9vbHRpcDoge1xuICAgICAgICAgICAgICAgIHZpc2libGU6IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGxlZ2VuZDoge1xuICAgICAgICB2aXNpYmxlOiBmYWxzZVxuICAgIH0sXG4gICAgdHJhbnNpdGlvbnM6IGZhbHNlLFxuXG4gICAgcG9pbnRXaWR0aDogNSxcblxuICAgIHBhbmVzOiBbIHsgY2xpcDogZmFsc2UgfSBdXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgU3BhcmtsaW5lOyIsImltcG9ydCB7IGRyYXdpbmcgYXMgZHJhdyB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1kcmF3aW5nJztcblxuaW1wb3J0IHsgaW50ZXJwb2xhdGVWYWx1ZSwgZWxlbWVudFN0eWxlcyB9IGZyb20gJy4uL2NvbW1vbic7XG5cbmNsYXNzIEZhZGVPdXRBbmltYXRpb24gZXh0ZW5kcyBkcmF3LkFuaW1hdGlvbiB7XG5cbiAgICBzZXR1cCgpIHtcbiAgICAgICAgdGhpcy5faW5pdGlhbE9wYWNpdHkgPSBwYXJzZUZsb2F0KGVsZW1lbnRTdHlsZXModGhpcy5lbGVtZW50LCAnb3BhY2l0eScpLm9wYWNpdHkpO1xuICAgIH1cblxuICAgIHN0ZXAocG9zKSB7XG4gICAgICAgIGVsZW1lbnRTdHlsZXModGhpcy5lbGVtZW50LCB7XG4gICAgICAgICAgICBvcGFjaXR5OiBTdHJpbmcoaW50ZXJwb2xhdGVWYWx1ZSh0aGlzLl9pbml0aWFsT3BhY2l0eSwgMCwgcG9zKSlcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYWJvcnQoKSB7XG4gICAgICAgIHN1cGVyLmFib3J0KCk7XG4gICAgICAgIGVsZW1lbnRTdHlsZXModGhpcy5lbGVtZW50LCB7XG4gICAgICAgICAgICBkaXNwbGF5OiAnbm9uZScsXG4gICAgICAgICAgICBvcGFjaXR5OiBTdHJpbmcodGhpcy5faW5pdGlhbE9wYWNpdHkpXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNhbmNlbCgpIHtcbiAgICAgICAgc3VwZXIuYWJvcnQoKTtcbiAgICAgICAgZWxlbWVudFN0eWxlcyh0aGlzLmVsZW1lbnQsIHtcbiAgICAgICAgICAgIG9wYWNpdHk6IFN0cmluZyh0aGlzLl9pbml0aWFsT3BhY2l0eSlcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBGYWRlT3V0QW5pbWF0aW9uOyIsImltcG9ydCB7IENsYXNzLCBkZWVwRXh0ZW5kLCBlbGVtZW50U3R5bGVzLCBnZXRUZW1wbGF0ZSwgc2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tICcuLi9jb21tb24nO1xuaW1wb3J0IHsgdG9EYXRlLCB0b1RpbWUgfSBmcm9tICcuLi9kYXRlLXV0aWxzJztcbmltcG9ydCBGYWRlT3V0QW5pbWF0aW9uIGZyb20gJy4vZmFkZS1vdXQtYW5pbWF0aW9uJztcblxuZnVuY3Rpb24gY3JlYXRlRGl2KGNsYXNzTmFtZSwgc3R5bGUpIHtcbiAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGRpdi5jbGFzc05hbWUgPSBjbGFzc05hbWU7XG4gICAgaWYgKHN0eWxlKSB7XG4gICAgICAgIGRpdi5zdHlsZS5jc3NUZXh0ID0gc3R5bGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRpdjtcbn1cblxuY2xhc3MgTmF2aWdhdG9ySGludCBleHRlbmRzIENsYXNzIHtcbiAgICBjb25zdHJ1Y3Rvcihjb250YWluZXIsIGNoYXJ0U2VydmljZSwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IGRlZXBFeHRlbmQoe30sIHRoaXMub3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgICAgICB0aGlzLmNoYXJ0U2VydmljZSA9IGNoYXJ0U2VydmljZTtcblxuICAgICAgICBjb25zdCBwYWRkaW5nID0gZWxlbWVudFN0eWxlcyhjb250YWluZXIsIFsgXCJwYWRkaW5nTGVmdFwiLCBcInBhZGRpbmdUb3BcIiBdKTtcbiAgICAgICAgdGhpcy5jaGFydFBhZGRpbmcgPSB7XG4gICAgICAgICAgICB0b3A6IHBhZGRpbmcucGFkZGluZ1RvcCxcbiAgICAgICAgICAgIGxlZnQ6IHBhZGRpbmcucGFkZGluZ0xlZnRcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLmNyZWF0ZUVsZW1lbnRzKCk7XG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLmVsZW1lbnQpO1xuICAgIH1cblxuICAgIGNyZWF0ZUVsZW1lbnRzKCkge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5lbGVtZW50ID0gY3JlYXRlRGl2KCdrLW5hdmlnYXRvci1oaW50JywgJ2Rpc3BsYXk6IG5vbmU7IHBvc2l0aW9uOiBhYnNvbHV0ZTsgdG9wOiAxcHg7IGxlZnQ6IDFweDsnKTtcbiAgICAgICAgY29uc3QgdG9vbHRpcCA9IHRoaXMudG9vbHRpcCA9IGNyZWF0ZURpdignay10b29sdGlwIGstY2hhcnQtdG9vbHRpcCcpO1xuICAgICAgICBjb25zdCBzY3JvbGwgPSB0aGlzLnNjcm9sbCA9IGNyZWF0ZURpdignay1zY3JvbGwnKTtcblxuICAgICAgICB0b29sdGlwLmlubmVySFRNTCA9ICcmbmJzcDsnO1xuXG4gICAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQodG9vbHRpcCk7XG4gICAgICAgIGVsZW1lbnQuYXBwZW5kQ2hpbGQoc2Nyb2xsKTtcbiAgICB9XG5cbiAgICBzaG93KGZyb20sIHRvLCBiYm94KSB7XG4gICAgICAgIGNvbnN0IHsgZWxlbWVudCwgb3B0aW9ucywgc2Nyb2xsLCB0b29sdGlwIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBtaWRkbGUgPSB0b0RhdGUodG9UaW1lKGZyb20pICsgdG9UaW1lKHRvIC0gZnJvbSkgLyAyKTtcbiAgICAgICAgY29uc3Qgc2Nyb2xsV2lkdGggPSBiYm94LndpZHRoKCkgKiAwLjQ7XG4gICAgICAgIGNvbnN0IG1pblBvcyA9IGJib3guY2VudGVyKCkueCAtIHNjcm9sbFdpZHRoO1xuICAgICAgICBjb25zdCBtYXhQb3MgPSBiYm94LmNlbnRlcigpLng7XG4gICAgICAgIGNvbnN0IHBvc1JhbmdlID0gbWF4UG9zIC0gbWluUG9zO1xuICAgICAgICBjb25zdCByYW5nZSA9IG9wdGlvbnMubWF4IC0gb3B0aW9ucy5taW47XG4gICAgICAgIGNvbnN0IHNjYWxlID0gcG9zUmFuZ2UgLyByYW5nZTtcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gbWlkZGxlIC0gb3B0aW9ucy5taW47XG4gICAgICAgIGxldCB0ZXh0ID0gdGhpcy5jaGFydFNlcnZpY2UuaW50bC5mb3JtYXQob3B0aW9ucy5mb3JtYXQsIGZyb20sIHRvKTtcbiAgICAgICAgY29uc3QgdGVtcGxhdGUgPSBnZXRUZW1wbGF0ZShvcHRpb25zKTtcblxuICAgICAgICB0aGlzLmNsZWFySGlkZVRpbWVvdXQoKTtcblxuICAgICAgICBpZiAoIXRoaXMuX3Zpc2libGUpIHtcbiAgICAgICAgICAgIGVsZW1lbnRTdHlsZXMoZWxlbWVudCwge1xuICAgICAgICAgICAgICAgIHZpc2liaWxpdHk6ICdoaWRkZW4nLFxuICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdibG9jaydcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5fdmlzaWJsZSA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGVtcGxhdGUpIHtcbiAgICAgICAgICAgIHRleHQgPSB0ZW1wbGF0ZSh7XG4gICAgICAgICAgICAgICAgZnJvbTogZnJvbSxcbiAgICAgICAgICAgICAgICB0bzogdG9cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdG9vbHRpcC5pbm5lckhUTUwgPSB0ZXh0O1xuICAgICAgICBlbGVtZW50U3R5bGVzKHRvb2x0aXAsIHtcbiAgICAgICAgICAgIGxlZnQ6IGJib3guY2VudGVyKCkueCAtIHRvb2x0aXAub2Zmc2V0V2lkdGggLyAyLFxuICAgICAgICAgICAgdG9wOiBiYm94LnkxXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHRvb2x0aXBTdHlsZSA9IGVsZW1lbnRTdHlsZXModG9vbHRpcCwgWyAnbWFyZ2luVG9wJywgJ2JvcmRlclRvcFdpZHRoJywgJ2hlaWdodCcgXSk7XG5cbiAgICAgICAgZWxlbWVudFN0eWxlcyhzY3JvbGwsIHtcbiAgICAgICAgICAgIHdpZHRoOiBzY3JvbGxXaWR0aCxcbiAgICAgICAgICAgIGxlZnQ6IG1pblBvcyArIG9mZnNldCAqIHNjYWxlLFxuICAgICAgICAgICAgdG9wOiBiYm94LnkxICsgdG9vbHRpcFN0eWxlLm1hcmdpblRvcCArIHRvb2x0aXBTdHlsZS5ib3JkZXJUb3BXaWR0aCArIHRvb2x0aXBTdHlsZS5oZWlnaHQgLyAyXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGVsZW1lbnRTdHlsZXMoZWxlbWVudCwge1xuICAgICAgICAgICAgdmlzaWJpbGl0eTogJ3Zpc2libGUnXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGNsZWFySGlkZVRpbWVvdXQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9oaWRlVGltZW91dCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX2hpZGVUaW1lb3V0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9oaWRlQW5pbWF0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLl9oaWRlQW5pbWF0aW9uLmNhbmNlbCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaGlkZSgpIHtcbiAgICAgICAgdGhpcy5jbGVhckhpZGVUaW1lb3V0KCk7XG5cbiAgICAgICAgdGhpcy5faGlkZVRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3Zpc2libGUgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuX2hpZGVBbmltYXRpb24gPSBuZXcgRmFkZU91dEFuaW1hdGlvbih0aGlzLmVsZW1lbnQpO1xuICAgICAgICAgICAgdGhpcy5faGlkZUFuaW1hdGlvbi5zZXR1cCgpO1xuICAgICAgICAgICAgdGhpcy5faGlkZUFuaW1hdGlvbi5wbGF5KCk7XG4gICAgICAgIH0sIHRoaXMub3B0aW9ucy5oaWRlRGVsYXkpO1xuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuY2xlYXJIaWRlVGltZW91dCgpO1xuICAgICAgICBpZiAodGhpcy5jb250YWluZXIpIHtcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLnJlbW92ZUNoaWxkKHRoaXMuZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgZGVsZXRlIHRoaXMuY29udGFpbmVyO1xuICAgICAgICBkZWxldGUgdGhpcy5jaGFydFNlcnZpY2U7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmVsZW1lbnQ7XG4gICAgICAgIGRlbGV0ZSB0aGlzLnRvb2x0aXA7XG4gICAgICAgIGRlbGV0ZSB0aGlzLnNjcm9sbDtcbiAgICB9XG59XG5cbnNldERlZmF1bHRPcHRpb25zKE5hdmlnYXRvckhpbnQsIHtcbiAgICBmb3JtYXQ6IFwiezA6ZH0gLSB7MTpkfVwiLFxuICAgIGhpZGVEZWxheTogNTAwXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgTmF2aWdhdG9ySGludDsiLCJjb25zdCBOQVZJR0FUT1JfUEFORSA9IFwiX25hdmlnYXRvclwiO1xuY29uc3QgTkFWSUdBVE9SX0FYSVMgPSBOQVZJR0FUT1JfUEFORTtcblxuZXhwb3J0IHsgTkFWSUdBVE9SX0FYSVMsIE5BVklHQVRPUl9QQU5FIH07IiwiaW1wb3J0IE5hdmlnYXRvckhpbnQgZnJvbSAnLi9uYXZpZ2F0b3ItaGludCc7XG5pbXBvcnQgeyBTZWxlY3Rpb24sIGZpbHRlclNlcmllc0J5VHlwZSB9IGZyb20gJy4uL2NoYXJ0JztcbmltcG9ydCB7IERSQUcsIERSQUdfRU5ELCBFUVVBTExZX1NQQUNFRF9TRVJJRVMsIFpPT00sIFpPT01fRU5EIH0gZnJvbSAnLi4vY2hhcnQvY29uc3RhbnRzJztcbmltcG9ydCB7IERhdGVDYXRlZ29yeUF4aXMgfSBmcm9tICcuLi9jb3JlJztcbmltcG9ydCB7IGFkZER1cmF0aW9uLCBwYXJzZURhdGUsIHRvRGF0ZSwgdG9UaW1lIH0gZnJvbSAnLi4vZGF0ZS11dGlscyc7XG5pbXBvcnQgeyBDbGFzcywgZGVlcEV4dGVuZCwgZGVmaW5lZCwgZ2V0VGVtcGxhdGUsIEluc3RhbmNlT2JzZXJ2ZXIsIGxhc3QsIGxpbWl0VmFsdWUsIHZhbHVlT3JEZWZhdWx0IH0gZnJvbSAnLi4vY29tbW9uJztcbmltcG9ydCB7IE5BVklHQVRPUl9BWElTLCBOQVZJR0FUT1JfUEFORSB9IGZyb20gJy4vY29uc3RhbnRzJztcblxuY29uc3QgWk9PTV9BQ0NFTEVSQVRJT04gPSAzO1xuXG5jbGFzcyBOYXZpZ2F0b3IgZXh0ZW5kcyBDbGFzcyB7XG4gICAgY29uc3RydWN0b3IoY2hhcnQpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLmNoYXJ0ID0gY2hhcnQ7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnMgPSBkZWVwRXh0ZW5kKHt9LCB0aGlzLm9wdGlvbnMsIGNoYXJ0Lm9wdGlvbnMubmF2aWdhdG9yKTtcbiAgICAgICAgY29uc3Qgc2VsZWN0ID0gb3B0aW9ucy5zZWxlY3Q7XG4gICAgICAgIGlmIChzZWxlY3QpIHtcbiAgICAgICAgICAgIHNlbGVjdC5mcm9tID0gdGhpcy5wYXJzZURhdGUoc2VsZWN0LmZyb20pO1xuICAgICAgICAgICAgc2VsZWN0LnRvID0gdGhpcy5wYXJzZURhdGUoc2VsZWN0LnRvKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZGVmaW5lZChvcHRpb25zLmhpbnQudmlzaWJsZSkpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuaGludC52aXNpYmxlID0gb3B0aW9ucy52aXNpYmxlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jaGFydE9ic2VydmVyID0gbmV3IEluc3RhbmNlT2JzZXJ2ZXIodGhpcywge1xuICAgICAgICAgICAgW0RSQUddOiAnX2RyYWcnLFxuICAgICAgICAgICAgW0RSQUdfRU5EXTogJ19kcmFnRW5kJyxcbiAgICAgICAgICAgIFtaT09NXTogJ196b29tJyxcbiAgICAgICAgICAgIFtaT09NX0VORF06ICdfem9vbUVuZCdcbiAgICAgICAgfSk7XG4gICAgICAgIGNoYXJ0LmFkZE9ic2VydmVyKHRoaXMuY2hhcnRPYnNlcnZlcik7XG4gICAgfVxuXG4gICAgcGFyc2VEYXRlKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBwYXJzZURhdGUodGhpcy5jaGFydC5jaGFydFNlcnZpY2UuaW50bCwgdmFsdWUpO1xuICAgIH1cblxuICAgIGNsZWFuKCkge1xuICAgICAgICBpZiAodGhpcy5zZWxlY3Rpb24pIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9uLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9uID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmhpbnQpIHtcbiAgICAgICAgICAgIHRoaXMuaGludC5kZXN0cm95KCk7XG4gICAgICAgICAgICB0aGlzLmhpbnQgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgaWYgKHRoaXMuY2hhcnQpIHtcbiAgICAgICAgICAgIHRoaXMuY2hhcnQucmVtb3ZlT2JzZXJ2ZXIodGhpcy5jaGFydE9ic2VydmVyKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmNoYXJ0O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jbGVhbigpO1xuICAgIH1cblxuICAgIHJlZHJhdygpIHtcbiAgICAgICAgdGhpcy5fcmVkcmF3U2VsZigpO1xuICAgICAgICB0aGlzLmluaXRTZWxlY3Rpb24oKTtcbiAgICB9XG5cbiAgICBpbml0U2VsZWN0aW9uKCkge1xuICAgICAgICBjb25zdCB7IGNoYXJ0LCBvcHRpb25zIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBheGlzID0gdGhpcy5tYWluQXhpcygpO1xuICAgICAgICBjb25zdCB7IG1pbiwgbWF4IH0gPSBheGlzLnJvdW5kZWRSYW5nZSgpO1xuICAgICAgICBjb25zdCB7IGZyb20sIHRvLCBtb3VzZXdoZWVsIH0gPSBvcHRpb25zLnNlbGVjdDtcbiAgICAgICAgY29uc3QgYXhpc0Nsb25lID0gY2xvbmUoYXhpcyk7XG5cbiAgICAgICAgaWYgKGF4aXMuY2F0ZWdvcmllc0NvdW50KCkgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2xlYW4oKTtcblxuICAgICAgICAvLyBcIkZyZWV6ZVwiIHRoZSBzZWxlY3Rpb24gYXhpcyBwb3NpdGlvbiB1bnRpbCB0aGUgbmV4dCByZWRyYXdcbiAgICAgICAgYXhpc0Nsb25lLmJveCA9IGF4aXMuYm94O1xuXG4gICAgICAgIHRoaXMuc2VsZWN0aW9uID0gbmV3IFNlbGVjdGlvbihjaGFydCwgYXhpc0Nsb25lLCB7XG4gICAgICAgICAgICBtaW46IG1pbixcbiAgICAgICAgICAgIG1heDogbWF4LFxuICAgICAgICAgICAgZnJvbTogZnJvbSB8fCBtaW4sXG4gICAgICAgICAgICB0bzogdG8gfHwgbWF4LFxuICAgICAgICAgICAgbW91c2V3aGVlbDogdmFsdWVPckRlZmF1bHQobW91c2V3aGVlbCwgeyB6b29tOiBcImxlZnRcIiB9KSxcbiAgICAgICAgICAgIHZpc2libGU6IG9wdGlvbnMudmlzaWJsZVxuICAgICAgICB9LCBuZXcgSW5zdGFuY2VPYnNlcnZlcih0aGlzLCB7XG4gICAgICAgICAgICBzZWxlY3RTdGFydDogJ19zZWxlY3RTdGFydCcsXG4gICAgICAgICAgICBzZWxlY3Q6ICdfc2VsZWN0JyxcbiAgICAgICAgICAgIHNlbGVjdEVuZDogJ19zZWxlY3RFbmQnXG4gICAgICAgIH0pKTtcblxuICAgICAgICBpZiAob3B0aW9ucy5oaW50LnZpc2libGUpIHtcbiAgICAgICAgICAgIHRoaXMuaGludCA9IG5ldyBOYXZpZ2F0b3JIaW50KGNoYXJ0LmVsZW1lbnQsIGNoYXJ0LmNoYXJ0U2VydmljZSwge1xuICAgICAgICAgICAgICAgIG1pbjogbWluLFxuICAgICAgICAgICAgICAgIG1heDogbWF4LFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlOiBnZXRUZW1wbGF0ZShvcHRpb25zLmhpbnQpLFxuICAgICAgICAgICAgICAgIGZvcm1hdDogb3B0aW9ucy5oaW50LmZvcm1hdFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRSYW5nZSgpIHtcbiAgICAgICAgY29uc3QgcGxvdEFyZWEgPSB0aGlzLmNoYXJ0Ll9jcmVhdGVQbG90QXJlYSh0cnVlKTtcbiAgICAgICAgY29uc3QgYXhpcyA9IHBsb3RBcmVhLm5hbWVkQ2F0ZWdvcnlBeGVzW05BVklHQVRPUl9BWElTXTtcblxuICAgICAgICBjb25zdCB7IG1pbiwgbWF4IH0gPSBheGlzLnJvdW5kZWRSYW5nZSgpO1xuXG4gICAgICAgIGNvbnN0IHNlbGVjdCA9IHRoaXMub3B0aW9ucy5zZWxlY3QgfHwge307XG4gICAgICAgIGxldCBmcm9tID0gc2VsZWN0LmZyb20gfHwgbWluO1xuICAgICAgICBpZiAoZnJvbSA8IG1pbikge1xuICAgICAgICAgICAgZnJvbSA9IG1pbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCB0byA9IHNlbGVjdC50byB8fCBtYXg7XG4gICAgICAgIGlmICh0byA+IG1heCkge1xuICAgICAgICAgICAgdG8gPSBtYXg7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm9wdGlvbnMuc2VsZWN0ID0gZGVlcEV4dGVuZCh7fSwgc2VsZWN0LCB7XG4gICAgICAgICAgICBmcm9tOiBmcm9tLFxuICAgICAgICAgICAgdG86IHRvXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuZmlsdGVyQXhlcygpO1xuICAgIH1cblxuICAgIF9yZWRyYXdTZWxmKHNpbGVudCkge1xuICAgICAgICBjb25zdCBwbG90QXJlYSA9IHRoaXMuY2hhcnQuX3Bsb3RBcmVhO1xuXG4gICAgICAgIGlmIChwbG90QXJlYSkge1xuICAgICAgICAgICAgcGxvdEFyZWEucmVkcmF3KGxhc3QocGxvdEFyZWEucGFuZXMpLCBzaWxlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVkcmF3U2xhdmVzKCkge1xuICAgICAgICBjb25zdCBjaGFydCA9IHRoaXMuY2hhcnQ7XG4gICAgICAgIGNvbnN0IHBsb3RBcmVhID0gY2hhcnQuX3Bsb3RBcmVhO1xuICAgICAgICBjb25zdCBzbGF2ZVBhbmVzID0gcGxvdEFyZWEucGFuZXMuc2xpY2UoMCwgLTEpO1xuXG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgb3JpZ2luYWwgc2VyaWVzIGFuZCBjYXRlZ29yeUF4aXMgYmVmb3JlIHBhcnRpYWwgcmVmcmVzaC5cbiAgICAgICAgcGxvdEFyZWEuc3JjU2VyaWVzID0gY2hhcnQub3B0aW9ucy5zZXJpZXM7XG4gICAgICAgIHBsb3RBcmVhLm9wdGlvbnMuY2F0ZWdvcnlBeGlzID0gY2hhcnQub3B0aW9ucy5jYXRlZ29yeUF4aXM7XG4gICAgICAgIHBsb3RBcmVhLmNsZWFyU2VyaWVzUG9pbnRzQ2FjaGUoKTtcblxuICAgICAgICBwbG90QXJlYS5yZWRyYXcoc2xhdmVQYW5lcyk7XG4gICAgfVxuXG4gICAgX2RyYWcoZSkge1xuICAgICAgICBjb25zdCB7IGNoYXJ0LCBzZWxlY3Rpb24gfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGNvb3JkcyA9IGNoYXJ0Ll9ldmVudENvb3JkaW5hdGVzKGUub3JpZ2luYWxFdmVudCk7XG4gICAgICAgIGNvbnN0IG5hdmlnYXRvckF4aXMgPSB0aGlzLm1haW5BeGlzKCk7XG4gICAgICAgIGNvbnN0IG5hdmlSYW5nZSA9IG5hdmlnYXRvckF4aXMucm91bmRlZFJhbmdlKCk7XG4gICAgICAgIGNvbnN0IGluTmF2aWdhdG9yID0gbmF2aWdhdG9yQXhpcy5wYW5lLmJveC5jb250YWluc1BvaW50KGNvb3Jkcyk7XG4gICAgICAgIGNvbnN0IGF4aXMgPSBjaGFydC5fcGxvdEFyZWEuY2F0ZWdvcnlBeGlzO1xuICAgICAgICBjb25zdCByYW5nZSA9IGUuYXhpc1Jhbmdlc1theGlzLm9wdGlvbnMubmFtZV07XG4gICAgICAgIGNvbnN0IHNlbGVjdCA9IHRoaXMub3B0aW9ucy5zZWxlY3Q7XG4gICAgICAgIGxldCBkdXJhdGlvbjtcblxuICAgICAgICBpZiAoIXJhbmdlIHx8IGluTmF2aWdhdG9yIHx8ICFzZWxlY3Rpb24pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZWxlY3QuZnJvbSAmJiBzZWxlY3QudG8pIHtcbiAgICAgICAgICAgIGR1cmF0aW9uID0gdG9UaW1lKHNlbGVjdC50bykgLSB0b1RpbWUoc2VsZWN0LmZyb20pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZHVyYXRpb24gPSB0b1RpbWUoc2VsZWN0aW9uLm9wdGlvbnMudG8pIC0gdG9UaW1lKHNlbGVjdGlvbi5vcHRpb25zLmZyb20pO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZnJvbSA9IHRvRGF0ZShsaW1pdFZhbHVlKFxuICAgICAgICAgICAgdG9UaW1lKHJhbmdlLm1pbiksXG4gICAgICAgICAgICBuYXZpUmFuZ2UubWluLCB0b1RpbWUobmF2aVJhbmdlLm1heCkgLSBkdXJhdGlvblxuICAgICAgICApKTtcblxuICAgICAgICBjb25zdCB0byA9IHRvRGF0ZShsaW1pdFZhbHVlKFxuICAgICAgICAgICAgdG9UaW1lKGZyb20pICsgZHVyYXRpb24sXG4gICAgICAgICAgICB0b1RpbWUobmF2aVJhbmdlLm1pbikgKyBkdXJhdGlvbiwgbmF2aVJhbmdlLm1heFxuICAgICAgICApKTtcblxuICAgICAgICB0aGlzLm9wdGlvbnMuc2VsZWN0ID0geyBmcm9tOiBmcm9tLCB0bzogdG8gfTtcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmxpdmVEcmFnKSB7XG4gICAgICAgICAgICB0aGlzLmZpbHRlckF4ZXMoKTtcbiAgICAgICAgICAgIHRoaXMucmVkcmF3U2xhdmVzKCk7XG4gICAgICAgIH1cblxuICAgICAgICBzZWxlY3Rpb24uc2V0KGZyb20sIHRvKTtcblxuICAgICAgICB0aGlzLnNob3dIaW50KGZyb20sIHRvKTtcbiAgICB9XG5cbiAgICBfZHJhZ0VuZCgpIHtcbiAgICAgICAgdGhpcy5maWx0ZXJBeGVzKCk7XG4gICAgICAgIHRoaXMuZmlsdGVyKCk7XG4gICAgICAgIHRoaXMucmVkcmF3U2xhdmVzKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuaGludCkge1xuICAgICAgICAgICAgdGhpcy5oaW50LmhpZGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlYWRTZWxlY3Rpb24oKSB7XG4gICAgICAgIGNvbnN0IHsgc2VsZWN0aW9uOiB7IG9wdGlvbnM6IHsgZnJvbSwgdG8gfSB9LCBvcHRpb25zOiB7IHNlbGVjdCB9IH0gPSB0aGlzO1xuXG4gICAgICAgIHNlbGVjdC5mcm9tID0gZnJvbTtcbiAgICAgICAgc2VsZWN0LnRvID0gdG87XG4gICAgfVxuXG4gICAgZmlsdGVyQXhlcygpIHtcbiAgICAgICAgY29uc3QgeyBvcHRpb25zOiB7IHNlbGVjdCA9IHsgfSB9LCBjaGFydCB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgYWxsQXhlcyA9IGNoYXJ0Lm9wdGlvbnMuY2F0ZWdvcnlBeGlzO1xuICAgICAgICBjb25zdCB7IGZyb20sIHRvIH0gPSBzZWxlY3Q7XG5cbiAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgYWxsQXhlcy5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICAgICAgICBjb25zdCBheGlzID0gYWxsQXhlc1tpZHhdO1xuICAgICAgICAgICAgaWYgKGF4aXMucGFuZSAhPT0gTkFWSUdBVE9SX1BBTkUpIHtcbiAgICAgICAgICAgICAgICBheGlzLm1pbiA9IGZyb207XG4gICAgICAgICAgICAgICAgYXhpcy5tYXggPSB0bztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZpbHRlcigpIHtcbiAgICAgICAgY29uc3QgeyBjaGFydCwgb3B0aW9uczogeyBzZWxlY3QgfSB9ID0gdGhpcztcblxuICAgICAgICBpZiAoIWNoYXJ0LnJlcXVpcmVzSGFuZGxlcnMoWyBcIm5hdmlnYXRvckZpbHRlclwiIF0pKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBtYWluQXhpcyA9IHRoaXMubWFpbkF4aXMoKTtcbiAgICAgICAgY29uc3QgYXJncyA9IHtcbiAgICAgICAgICAgIGZyb206IHNlbGVjdC5mcm9tLFxuICAgICAgICAgICAgdG86IHNlbGVjdC50b1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChtYWluQXhpcy5vcHRpb25zLnR5cGUgIT09ICdjYXRlZ29yeScpIHtcbiAgICAgICAgICAgIGNvbnN0IGF4aXNPcHRpb25zID0gbmV3IERhdGVDYXRlZ29yeUF4aXMoZGVlcEV4dGVuZCh7XG4gICAgICAgICAgICAgICAgYmFzZVVuaXQ6IFwiZml0XCJcbiAgICAgICAgICAgIH0sIGNoYXJ0Lm9wdGlvbnMuY2F0ZWdvcnlBeGlzWzBdLCB7XG4gICAgICAgICAgICAgICAgY2F0ZWdvcmllczogWyBzZWxlY3QuZnJvbSwgc2VsZWN0LnRvIF1cbiAgICAgICAgICAgIH0pLCBjaGFydC5jaGFydFNlcnZpY2UpLm9wdGlvbnM7XG5cbiAgICAgICAgICAgIGFyZ3MuZnJvbSA9IGFkZER1cmF0aW9uKGF4aXNPcHRpb25zLm1pbiwgLWF4aXNPcHRpb25zLmJhc2VVbml0U3RlcCwgYXhpc09wdGlvbnMuYmFzZVVuaXQpO1xuICAgICAgICAgICAgYXJncy50byA9IGFkZER1cmF0aW9uKGF4aXNPcHRpb25zLm1heCwgYXhpc09wdGlvbnMuYmFzZVVuaXRTdGVwLCBheGlzT3B0aW9ucy5iYXNlVW5pdCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNoYXJ0LnRyaWdnZXIoXCJuYXZpZ2F0b3JGaWx0ZXJcIiwgYXJncyk7XG4gICAgfVxuXG4gICAgX3pvb20oZSkge1xuICAgICAgICBjb25zdCB7IGNoYXJ0OiB7IF9wbG90QXJlYTogeyBjYXRlZ29yeUF4aXM6IGF4aXMgfSB9LCBzZWxlY3Rpb24sIG9wdGlvbnM6IHsgc2VsZWN0LCBsaXZlRHJhZyB9IH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBtYWluQXhpcyA9IHRoaXMubWFpbkF4aXMoKTtcbiAgICAgICAgbGV0IGRlbHRhID0gZS5kZWx0YTtcblxuICAgICAgICBpZiAoIXNlbGVjdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZnJvbUl4ID0gbWFpbkF4aXMuY2F0ZWdvcnlJbmRleChzZWxlY3Rpb24ub3B0aW9ucy5mcm9tKTtcbiAgICAgICAgY29uc3QgdG9JeCA9IG1haW5BeGlzLmNhdGVnb3J5SW5kZXgoc2VsZWN0aW9uLm9wdGlvbnMudG8pO1xuXG4gICAgICAgIGUub3JpZ2luYWxFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIGlmIChNYXRoLmFicyhkZWx0YSkgPiAxKSB7XG4gICAgICAgICAgICBkZWx0YSAqPSBaT09NX0FDQ0VMRVJBVElPTjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0b0l4IC0gZnJvbUl4ID4gMSkge1xuICAgICAgICAgICAgc2VsZWN0aW9uLmV4cGFuZChkZWx0YSk7XG4gICAgICAgICAgICB0aGlzLnJlYWRTZWxlY3Rpb24oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGF4aXMub3B0aW9ucy5taW4gPSBzZWxlY3QuZnJvbTtcbiAgICAgICAgICAgIHNlbGVjdC5mcm9tID0gYXhpcy5zY2FsZVJhbmdlKC1lLmRlbHRhKS5taW47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGl2ZURyYWcpIHtcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyQXhlcygpO1xuICAgICAgICAgICAgdGhpcy5yZWRyYXdTbGF2ZXMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlbGVjdGlvbi5zZXQoc2VsZWN0LmZyb20sIHNlbGVjdC50byk7XG5cbiAgICAgICAgdGhpcy5zaG93SGludCh0aGlzLm9wdGlvbnMuc2VsZWN0LmZyb20sIHRoaXMub3B0aW9ucy5zZWxlY3QudG8pO1xuICAgIH1cblxuICAgIF96b29tRW5kKGUpIHtcbiAgICAgICAgdGhpcy5fZHJhZ0VuZChlKTtcbiAgICB9XG5cbiAgICBzaG93SGludChmcm9tLCB0bykge1xuICAgICAgICBjb25zdCBwbG90QXJlYSA9IHRoaXMuY2hhcnQuX3Bsb3RBcmVhO1xuXG4gICAgICAgIGlmICh0aGlzLmhpbnQpIHtcbiAgICAgICAgICAgIHRoaXMuaGludC5zaG93KGZyb20sIHRvLCBwbG90QXJlYS5iYWNrZ3JvdW5kQm94KCkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3NlbGVjdFN0YXJ0KGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcnQuX3NlbGVjdFN0YXJ0KGUpO1xuICAgIH1cblxuICAgIF9zZWxlY3QoZSkge1xuICAgICAgICB0aGlzLnNob3dIaW50KGUuZnJvbSwgZS50byk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuY2hhcnQuX3NlbGVjdChlKTtcbiAgICB9XG5cbiAgICBfc2VsZWN0RW5kKGUpIHtcbiAgICAgICAgaWYgKHRoaXMuaGludCkge1xuICAgICAgICAgICAgdGhpcy5oaW50LmhpZGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucmVhZFNlbGVjdGlvbigpO1xuICAgICAgICB0aGlzLmZpbHRlckF4ZXMoKTtcbiAgICAgICAgdGhpcy5maWx0ZXIoKTtcbiAgICAgICAgdGhpcy5yZWRyYXdTbGF2ZXMoKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5jaGFydC5fc2VsZWN0RW5kKGUpO1xuICAgIH1cblxuICAgIG1haW5BeGlzKCkge1xuICAgICAgICBjb25zdCBwbG90QXJlYSA9IHRoaXMuY2hhcnQuX3Bsb3RBcmVhO1xuXG4gICAgICAgIGlmIChwbG90QXJlYSkge1xuICAgICAgICAgICAgcmV0dXJuIHBsb3RBcmVhLm5hbWVkQ2F0ZWdvcnlBeGVzW05BVklHQVRPUl9BWElTXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNlbGVjdChmcm9tLCB0bykge1xuICAgICAgICBjb25zdCBzZWxlY3QgPSB0aGlzLm9wdGlvbnMuc2VsZWN0O1xuXG4gICAgICAgIGlmIChmcm9tICYmIHRvKSB7XG4gICAgICAgICAgICBzZWxlY3QuZnJvbSA9IHRoaXMucGFyc2VEYXRlKGZyb20pO1xuICAgICAgICAgICAgc2VsZWN0LnRvID0gdGhpcy5wYXJzZURhdGUodG8pO1xuXG4gICAgICAgICAgICB0aGlzLmZpbHRlckF4ZXMoKTtcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyKCk7XG4gICAgICAgICAgICB0aGlzLnJlZHJhd1NsYXZlcygpO1xuXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGlvbi5zZXQoZnJvbSwgdG8pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZyb206IHNlbGVjdC5mcm9tLFxuICAgICAgICAgICAgdG86IHNlbGVjdC50b1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHN0YXRpYyBzZXR1cChvcHRpb25zID0ge30sIHRoZW1lT3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGlmIChvcHRpb25zLl9fbmF2aSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIG9wdGlvbnMuX19uYXZpID0gdHJ1ZTtcblxuICAgICAgICBjb25zdCBuYXZpT3B0aW9ucyA9IGRlZXBFeHRlbmQoe30sIHRoZW1lT3B0aW9ucy5uYXZpZ2F0b3IsIG9wdGlvbnMubmF2aWdhdG9yKTtcbiAgICAgICAgY29uc3QgcGFuZXMgPSBvcHRpb25zLnBhbmVzID0gW10uY29uY2F0KG9wdGlvbnMucGFuZXMpO1xuICAgICAgICBjb25zdCBwYW5lT3B0aW9ucyA9IGRlZXBFeHRlbmQoe30sIG5hdmlPcHRpb25zLnBhbmUsIHsgbmFtZTogTkFWSUdBVE9SX1BBTkUgfSk7XG5cbiAgICAgICAgaWYgKCFuYXZpT3B0aW9ucy52aXNpYmxlKSB7XG4gICAgICAgICAgICBwYW5lT3B0aW9ucy52aXNpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICBwYW5lT3B0aW9ucy5oZWlnaHQgPSAwLjE7XG4gICAgICAgIH1cblxuICAgICAgICBwYW5lcy5wdXNoKHBhbmVPcHRpb25zKTtcblxuICAgICAgICBOYXZpZ2F0b3IuYXR0YWNoQXhlcyhvcHRpb25zLCBuYXZpT3B0aW9ucyk7XG4gICAgICAgIE5hdmlnYXRvci5hdHRhY2hTZXJpZXMob3B0aW9ucywgbmF2aU9wdGlvbnMsIHRoZW1lT3B0aW9ucyk7XG4gICAgfVxuXG4gICAgc3RhdGljIGF0dGFjaEF4ZXMob3B0aW9ucywgbmF2aU9wdGlvbnMpIHtcbiAgICAgICAgY29uc3Qgc2VyaWVzID0gbmF2aU9wdGlvbnMuc2VyaWVzIHx8IFtdO1xuICAgICAgICBjb25zdCBjYXRlZ29yeUF4ZXMgPSBvcHRpb25zLmNhdGVnb3J5QXhpcyA9IFtdLmNvbmNhdChvcHRpb25zLmNhdGVnb3J5QXhpcyk7XG4gICAgICAgIGNvbnN0IHZhbHVlQXhlcyA9IG9wdGlvbnMudmFsdWVBeGlzID0gW10uY29uY2F0KG9wdGlvbnMudmFsdWVBeGlzKTtcblxuICAgICAgICBjb25zdCBlcXVhbGx5U3BhY2VkU2VyaWVzID0gZmlsdGVyU2VyaWVzQnlUeXBlKHNlcmllcywgRVFVQUxMWV9TUEFDRURfU0VSSUVTKTtcbiAgICAgICAgY29uc3QganVzdGlmeUF4aXMgPSBlcXVhbGx5U3BhY2VkU2VyaWVzLmxlbmd0aCA9PT0gMDtcblxuICAgICAgICBjb25zdCBiYXNlID0gZGVlcEV4dGVuZCh7XG4gICAgICAgICAgICB0eXBlOiBcImRhdGVcIixcbiAgICAgICAgICAgIHBhbmU6IE5BVklHQVRPUl9QQU5FLFxuICAgICAgICAgICAgcm91bmRUb0Jhc2VVbml0OiAhanVzdGlmeUF4aXMsXG4gICAgICAgICAgICBqdXN0aWZpZWQ6IGp1c3RpZnlBeGlzLFxuICAgICAgICAgICAgX2NvbGxhcHNlOiBmYWxzZSxcbiAgICAgICAgICAgIG1ham9yVGlja3M6IHsgdmlzaWJsZTogdHJ1ZSB9LFxuICAgICAgICAgICAgdG9vbHRpcDogeyB2aXNpYmxlOiBmYWxzZSB9LFxuICAgICAgICAgICAgbGFiZWxzOiB7IHN0ZXA6IDEgfSxcbiAgICAgICAgICAgIGF1dG9CaW5kOiBuYXZpT3B0aW9ucy5hdXRvQmluZEVsZW1lbnRzLFxuICAgICAgICAgICAgYXV0b0Jhc2VVbml0U3RlcHM6IHtcbiAgICAgICAgICAgICAgICBtaW51dGVzOiBbIDEgXSxcbiAgICAgICAgICAgICAgICBob3VyczogWyAxLCAyIF0sXG4gICAgICAgICAgICAgICAgZGF5czogWyAxLCAyIF0sXG4gICAgICAgICAgICAgICAgd2Vla3M6IFtdLFxuICAgICAgICAgICAgICAgIG1vbnRoczogWyAxIF0sXG4gICAgICAgICAgICAgICAgeWVhcnM6IFsgMSBdXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCB1c2VyID0gbmF2aU9wdGlvbnMuY2F0ZWdvcnlBeGlzO1xuXG4gICAgICAgIGNhdGVnb3J5QXhlcy5wdXNoKFxuICAgICAgICAgICAgZGVlcEV4dGVuZCh7fSwgYmFzZSwge1xuICAgICAgICAgICAgICAgIG1heERhdGVHcm91cHM6IDIwMFxuICAgICAgICAgICAgfSwgdXNlciwge1xuICAgICAgICAgICAgICAgIG5hbWU6IE5BVklHQVRPUl9BWElTLFxuICAgICAgICAgICAgICAgIHRpdGxlOiBudWxsLFxuICAgICAgICAgICAgICAgIGJhc2VVbml0OiBcImZpdFwiLFxuICAgICAgICAgICAgICAgIGJhc2VVbml0U3RlcDogXCJhdXRvXCIsXG4gICAgICAgICAgICAgICAgbGFiZWxzOiB7IHZpc2libGU6IGZhbHNlIH0sXG4gICAgICAgICAgICAgICAgbWFqb3JUaWNrczogeyB2aXNpYmxlOiBmYWxzZSB9XG4gICAgICAgICAgICB9KSwgZGVlcEV4dGVuZCh7fSwgYmFzZSwgdXNlciwge1xuICAgICAgICAgICAgICAgIG5hbWU6IE5BVklHQVRPUl9BWElTICsgXCJfbGFiZWxzXCIsXG4gICAgICAgICAgICAgICAgbWF4RGF0ZUdyb3VwczogMjAsXG4gICAgICAgICAgICAgICAgYmFzZVVuaXRTdGVwOiBcImF1dG9cIixcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHsgcG9zaXRpb246IFwiXCIgfSxcbiAgICAgICAgICAgICAgICBwbG90QmFuZHM6IFtdLFxuICAgICAgICAgICAgICAgIGF1dG9CYXNlVW5pdFN0ZXBzOiB7XG4gICAgICAgICAgICAgICAgICAgIG1pbnV0ZXM6IFtdXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBfb3ZlcmxhcDogdHJ1ZVxuICAgICAgICAgICAgfSksIGRlZXBFeHRlbmQoe30sIGJhc2UsIHVzZXIsIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBOQVZJR0FUT1JfQVhJUyArIFwiX3RpY2tzXCIsXG4gICAgICAgICAgICAgICAgbWF4RGF0ZUdyb3VwczogMjAwLFxuICAgICAgICAgICAgICAgIG1ham9yVGlja3M6IHtcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDAuNVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgcGxvdEJhbmRzOiBbXSxcbiAgICAgICAgICAgICAgICB0aXRsZTogbnVsbCxcbiAgICAgICAgICAgICAgICBsYWJlbHM6IHsgdmlzaWJsZTogZmFsc2UsIG1pcnJvcjogdHJ1ZSB9LFxuICAgICAgICAgICAgICAgIF9vdmVybGFwOiB0cnVlXG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuXG4gICAgICAgIHZhbHVlQXhlcy5wdXNoKGRlZXBFeHRlbmQoe1xuICAgICAgICAgICAgbmFtZTogTkFWSUdBVE9SX0FYSVMsXG4gICAgICAgICAgICBwYW5lOiBOQVZJR0FUT1JfUEFORSxcbiAgICAgICAgICAgIG1ham9yR3JpZExpbmVzOiB7XG4gICAgICAgICAgICAgICAgdmlzaWJsZTogZmFsc2VcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB2aXNpYmxlOiBmYWxzZVxuICAgICAgICB9LCBuYXZpT3B0aW9ucy52YWx1ZUF4aXMpKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgYXR0YWNoU2VyaWVzKG9wdGlvbnMsIG5hdmlPcHRpb25zLCB0aGVtZU9wdGlvbnMpIHtcbiAgICAgICAgY29uc3Qgc2VyaWVzID0gb3B0aW9ucy5zZXJpZXMgPSBvcHRpb25zLnNlcmllcyB8fCBbXTtcbiAgICAgICAgY29uc3QgbmF2aWdhdG9yU2VyaWVzID0gW10uY29uY2F0KG5hdmlPcHRpb25zLnNlcmllcyB8fCBbXSk7XG4gICAgICAgIGNvbnN0IHNlcmllc0NvbG9ycyA9IHRoZW1lT3B0aW9ucy5zZXJpZXNDb2xvcnM7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRzID0gbmF2aU9wdGlvbnMuc2VyaWVzRGVmYXVsdHM7XG5cbiAgICAgICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgbmF2aWdhdG9yU2VyaWVzLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgICAgICAgIHNlcmllcy5wdXNoKFxuICAgICAgICAgICAgICAgIGRlZXBFeHRlbmQoe1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogc2VyaWVzQ29sb3JzW2lkeCAlIHNlcmllc0NvbG9ycy5sZW5ndGhdLFxuICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeUZpZWxkOiBuYXZpT3B0aW9ucy5kYXRlRmllbGQsXG4gICAgICAgICAgICAgICAgICAgIHZpc2libGVJbkxlZ2VuZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpc2libGU6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LCBkZWZhdWx0cywgbmF2aWdhdG9yU2VyaWVzW2lkeF0sIHtcbiAgICAgICAgICAgICAgICAgICAgYXhpczogTkFWSUdBVE9SX0FYSVMsXG4gICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5QXhpczogTkFWSUdBVE9SX0FYSVMsXG4gICAgICAgICAgICAgICAgICAgIGF1dG9CaW5kOiBuYXZpT3B0aW9ucy5hdXRvQmluZEVsZW1lbnRzXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIENsb25lZE9iamVjdCgpIHsgfVxuZnVuY3Rpb24gY2xvbmUob2JqKSB7XG4gICAgQ2xvbmVkT2JqZWN0LnByb3RvdHlwZSA9IG9iajtcbiAgICByZXR1cm4gbmV3IENsb25lZE9iamVjdCgpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBOYXZpZ2F0b3I7XG4iLCJpbXBvcnQgeyBDaGFydCB9IGZyb20gJy4uL2NoYXJ0JztcblxuaW1wb3J0IE5hdmlnYXRvciBmcm9tICcuL25hdmlnYXRvcic7XG5pbXBvcnQgeyBERUZBVUxUX1dJRFRIIH0gZnJvbSAnLi4vY29tbW9uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBhZGRDbGFzcywgZGVlcEV4dGVuZCwgZWxlbWVudFNpemUsIGdyZXAsIHNldERlZmF1bHRPcHRpb25zIH0gZnJvbSAnLi4vY29tbW9uJztcbmltcG9ydCB7IE5BVklHQVRPUl9BWElTLCBOQVZJR0FUT1JfUEFORSB9IGZyb20gJy4vY29uc3RhbnRzJztcblxuY29uc3QgQVVUT19DQVRFR09SWV9XSURUSCA9IDI4O1xuXG5jbGFzcyBTdG9ja0NoYXJ0IGV4dGVuZHMgQ2hhcnQge1xuXG4gICAgYXBwbHlEZWZhdWx0cyhvcHRpb25zLCB0aGVtZU9wdGlvbnMpIHtcbiAgICAgICAgY29uc3Qgd2lkdGggPSBlbGVtZW50U2l6ZSh0aGlzLmVsZW1lbnQpLndpZHRoIHx8IERFRkFVTFRfV0lEVEg7XG4gICAgICAgIGxldCB0aGVtZSA9IHRoZW1lT3B0aW9ucztcblxuICAgICAgICBjb25zdCBzdG9ja0RlZmF1bHRzID0ge1xuICAgICAgICAgICAgc2VyaWVzRGVmYXVsdHM6IHtcbiAgICAgICAgICAgICAgICBjYXRlZ29yeUZpZWxkOiBvcHRpb25zLmRhdGVGaWVsZFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGF4aXNEZWZhdWx0czoge1xuICAgICAgICAgICAgICAgIGNhdGVnb3J5QXhpczoge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImRlZmF1bHRcIixcbiAgICAgICAgICAgICAgICAgICAgbWFqb3JHcmlkTGluZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpc2libGU6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RlcDogMlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBtYWpvclRpY2tzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBtYXhEYXRlR3JvdXBzOiBNYXRoLmZsb29yKHdpZHRoIC8gQVVUT19DQVRFR09SWV9XSURUSClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHRoZW1lKSB7XG4gICAgICAgICAgICB0aGVtZSA9IGRlZXBFeHRlbmQoe30sIHRoZW1lLCBzdG9ja0RlZmF1bHRzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIE5hdmlnYXRvci5zZXR1cChvcHRpb25zLCB0aGVtZSk7XG5cbiAgICAgICAgc3VwZXIuYXBwbHlEZWZhdWx0cyhvcHRpb25zLCB0aGVtZSk7XG4gICAgfVxuXG4gICAgX3NldEVsZW1lbnRDbGFzcyhlbGVtZW50KSB7XG4gICAgICAgIGFkZENsYXNzKGVsZW1lbnQsICdrLWNoYXJ0IGstc3RvY2tjaGFydCcpO1xuICAgIH1cblxuICAgIHNldE9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICB0aGlzLmRlc3Ryb3lOYXZpZ2F0b3IoKTtcbiAgICAgICAgc3VwZXIuc2V0T3B0aW9ucyhvcHRpb25zKTtcbiAgICB9XG5cbiAgICBub1RyYW5zaXRpb25zUmVkcmF3KCkge1xuICAgICAgICBjb25zdCB0cmFuc2l0aW9ucyA9IHRoaXMub3B0aW9ucy50cmFuc2l0aW9ucztcblxuICAgICAgICB0aGlzLm9wdGlvbnMudHJhbnNpdGlvbnMgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fZnVsbFJlZHJhdygpO1xuICAgICAgICB0aGlzLm9wdGlvbnMudHJhbnNpdGlvbnMgPSB0cmFuc2l0aW9ucztcbiAgICB9XG5cbiAgICBfcmVzaXplKCkge1xuICAgICAgICB0aGlzLm5vVHJhbnNpdGlvbnNSZWRyYXcoKTtcbiAgICB9XG5cbiAgICBfcmVkcmF3KCkge1xuICAgICAgICBjb25zdCBuYXZpZ2F0b3IgPSB0aGlzLm5hdmlnYXRvcjtcblxuICAgICAgICBpZiAoIXRoaXMuX2RpcnR5KCkgJiYgbmF2aWdhdG9yICYmIG5hdmlnYXRvci5vcHRpb25zLnBhcnRpYWxSZWRyYXcpIHtcbiAgICAgICAgICAgIG5hdmlnYXRvci5yZWRyYXdTbGF2ZXMoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2Z1bGxSZWRyYXcoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9kaXJ0eSgpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3Qgc2VyaWVzID0gW10uY29uY2F0KG9wdGlvbnMuc2VyaWVzLCBvcHRpb25zLm5hdmlnYXRvci5zZXJpZXMpO1xuICAgICAgICBjb25zdCBzZXJpZXNDb3VudCA9IGdyZXAoc2VyaWVzLCBmdW5jdGlvbihzKSB7IHJldHVybiBzICYmIHMudmlzaWJsZTsgfSkubGVuZ3RoO1xuICAgICAgICBjb25zdCBkaXJ0eSA9IHRoaXMuX3Nlcmllc0NvdW50ICE9PSBzZXJpZXNDb3VudDtcbiAgICAgICAgdGhpcy5fc2VyaWVzQ291bnQgPSBzZXJpZXNDb3VudDtcblxuICAgICAgICByZXR1cm4gZGlydHk7XG4gICAgfVxuXG4gICAgX2Z1bGxSZWRyYXcoKSB7XG4gICAgICAgIGxldCBuYXZpZ2F0b3IgPSB0aGlzLm5hdmlnYXRvcjtcblxuICAgICAgICBpZiAoIW5hdmlnYXRvcikge1xuICAgICAgICAgICAgbmF2aWdhdG9yID0gdGhpcy5uYXZpZ2F0b3IgPSBuZXcgTmF2aWdhdG9yKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy50cmlnZ2VyKFwibmF2aWdhdG9yQ3JlYXRlZFwiLCB7IG5hdmlnYXRvcjogbmF2aWdhdG9yIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgbmF2aWdhdG9yLmNsZWFuKCk7XG4gICAgICAgIG5hdmlnYXRvci5zZXRSYW5nZSgpO1xuXG4gICAgICAgIHN1cGVyLl9yZWRyYXcoKTtcblxuICAgICAgICBuYXZpZ2F0b3IuaW5pdFNlbGVjdGlvbigpO1xuICAgIH1cblxuICAgIF90cmFja1NoYXJlZFRvb2x0aXAoY29vcmRzKSB7XG4gICAgICAgIGNvbnN0IHBsb3RBcmVhID0gdGhpcy5fcGxvdEFyZWE7XG4gICAgICAgIGNvbnN0IHBhbmUgPSBwbG90QXJlYS5wYW5lQnlQb2ludChjb29yZHMpO1xuXG4gICAgICAgIGlmIChwYW5lICYmIHBhbmUub3B0aW9ucy5uYW1lID09PSBOQVZJR0FUT1JfUEFORSkge1xuICAgICAgICAgICAgdGhpcy5fdW5zZXRBY3RpdmVQb2ludCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3VwZXIuX3RyYWNrU2hhcmVkVG9vbHRpcChjb29yZHMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYmluZENhdGVnb3JpZXMoKSB7XG4gICAgICAgIHN1cGVyLmJpbmRDYXRlZ29yaWVzKCk7XG4gICAgICAgIHRoaXMuY29weU5hdmlnYXRvckNhdGVnb3JpZXMoKTtcbiAgICB9XG5cbiAgICBjb3B5TmF2aWdhdG9yQ2F0ZWdvcmllcygpIHtcbiAgICAgICAgY29uc3QgZGVmaW5pdGlvbnMgPSBbXS5jb25jYXQodGhpcy5vcHRpb25zLmNhdGVnb3J5QXhpcyk7XG4gICAgICAgIGxldCBjYXRlZ29yaWVzO1xuXG4gICAgICAgIGZvciAobGV0IGF4aXNJeCA9IDA7IGF4aXNJeCA8IGRlZmluaXRpb25zLmxlbmd0aDsgYXhpc0l4KyspIHtcbiAgICAgICAgICAgIGNvbnN0IGF4aXMgPSBkZWZpbml0aW9uc1theGlzSXhdO1xuICAgICAgICAgICAgaWYgKGF4aXMubmFtZSA9PT0gTkFWSUdBVE9SX0FYSVMpIHtcbiAgICAgICAgICAgICAgICBjYXRlZ29yaWVzID0gYXhpcy5jYXRlZ29yaWVzO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjYXRlZ29yaWVzICYmIGF4aXMucGFuZSA9PT0gTkFWSUdBVE9SX1BBTkUpIHtcbiAgICAgICAgICAgICAgICBheGlzLmNhdGVnb3JpZXMgPSBjYXRlZ29yaWVzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGVzdHJveU5hdmlnYXRvcigpIHtcbiAgICAgICAgaWYgKHRoaXMubmF2aWdhdG9yKSB7XG4gICAgICAgICAgICB0aGlzLm5hdmlnYXRvci5kZXN0cm95KCk7XG4gICAgICAgICAgICB0aGlzLm5hdmlnYXRvciA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLmRlc3Ryb3lOYXZpZ2F0b3IoKTtcbiAgICAgICAgc3VwZXIuZGVzdHJveSgpO1xuICAgIH1cblxuICAgIF9zdG9wQ2hhcnRIYW5kbGVycyhlKSB7XG4gICAgICAgIGNvbnN0IGNvb3JkcyA9IHRoaXMuX2V2ZW50Q29vcmRpbmF0ZXMoZSk7XG4gICAgICAgIGNvbnN0IHBhbmUgPSB0aGlzLl9wbG90QXJlYS5wYW5lQnlQb2ludChjb29yZHMpO1xuXG4gICAgICAgIHJldHVybiBzdXBlci5fc3RvcENoYXJ0SGFuZGxlcnMoZSkgfHwgKHBhbmUgJiYgcGFuZS5vcHRpb25zLm5hbWUgPT09IE5BVklHQVRPUl9QQU5FKTtcbiAgICB9XG5cbiAgICBfdG9nZ2xlRHJhZ1pvb21FdmVudHMoKSB7XG4gICAgICAgIGlmICghdGhpcy5fZHJhZ1pvb21FbmFibGVkKSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuc3R5bGUudG91Y2hBY3Rpb24gPSBcIm5vbmVcIjtcblxuICAgICAgICAgICAgdGhpcy5fZHJhZ1pvb21FbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuc2V0RGVmYXVsdE9wdGlvbnMoU3RvY2tDaGFydCwge1xuICAgIGRhdGVGaWVsZDogXCJkYXRlXCIsXG4gICAgYXhpc0RlZmF1bHRzOiB7XG4gICAgICAgIGNhdGVnb3J5QXhpczoge1xuICAgICAgICAgICAgdHlwZTogXCJkYXRlXCIsXG4gICAgICAgICAgICBiYXNlVW5pdDogXCJmaXRcIixcbiAgICAgICAgICAgIGp1c3RpZmllZDogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICB2YWx1ZUF4aXM6IHtcbiAgICAgICAgICAgIG5hcnJvd1JhbmdlOiB0cnVlLFxuICAgICAgICAgICAgbGFiZWxzOiB7XG4gICAgICAgICAgICAgICAgZm9ybWF0OiBcIkNcIlxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICBuYXZpZ2F0b3I6IHtcbiAgICAgICAgc2VsZWN0OiB7fSxcbiAgICAgICAgc2VyaWVzRGVmYXVsdHM6IHtcbiAgICAgICAgICAgIG1hcmtlcnM6IHtcbiAgICAgICAgICAgICAgICB2aXNpYmxlOiBmYWxzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRvb2x0aXA6IHtcbiAgICAgICAgICAgICAgICB2aXNpYmxlOiB0cnVlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGluZToge1xuICAgICAgICAgICAgICAgIHdpZHRoOiAyXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGhpbnQ6IHt9LFxuICAgICAgICB2aXNpYmxlOiB0cnVlXG4gICAgfSxcbiAgICB0b29sdGlwOiB7XG4gICAgICAgIHZpc2libGU6IHRydWVcbiAgICB9LFxuICAgIGxlZ2VuZDoge1xuICAgICAgICB2aXNpYmxlOiBmYWxzZVxuICAgIH1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBTdG9ja0NoYXJ0OyIsImNvbnN0IEFOR1VMQVJfU1BFRUQgPSAxNTA7XG5jb25zdCBMSU5FQVJfU1BFRUQgPSAyNTA7XG5jb25zdCBBUlJPVyA9IFwiYXJyb3dcIjtcbmNvbnN0IEFSUk9XX1BPSU5URVIgPSBcImFycm93UG9pbnRlclwiO1xuY29uc3QgQkFSX1BPSU5URVIgPSBcImJhclBvaW50ZXJcIjtcbmNvbnN0IERFRkFVTFRfSEVJR0hUID0gMjAwO1xuY29uc3QgREVGQVVMVF9MSU5FX1dJRFRIID0gMC41O1xuY29uc3QgREVGQVVMVF9XSURUSCA9IDIwMDtcbmNvbnN0IERFR1JFRSA9IE1hdGguUEkgLyAxODA7XG5jb25zdCBJTlNJREUgPSBcImluc2lkZVwiO1xuY29uc3QgTElORUFSID0gXCJsaW5lYXJcIjtcbmNvbnN0IE9VVFNJREUgPSBcIm91dHNpZGVcIjtcbmNvbnN0IFJBRElBTF9QT0lOVEVSID0gXCJyYWRpYWxQb2ludGVyXCI7XG5jb25zdCBSQURJQUxfUkFOR0VfUE9JTlRFUiA9IFwicmFkaWFsUmFuZ2VQb2ludGVyXCI7XG5cbmV4cG9ydCB7XG4gICAgQU5HVUxBUl9TUEVFRCwgTElORUFSX1NQRUVELCBBUlJPVywgQVJST1dfUE9JTlRFUiwgQkFSX1BPSU5URVIsXG4gICAgREVGQVVMVF9IRUlHSFQsIERFRkFVTFRfTElORV9XSURUSCwgREVGQVVMVF9XSURUSCxcbiAgICBERUdSRUUsIElOU0lERSwgTElORUFSLCBPVVRTSURFLCBSQURJQUxfUE9JTlRFUiwgUkFESUFMX1JBTkdFX1BPSU5URVJcbn07IiwiaW1wb3J0IHsgZ2V0U3BhY2luZyB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBhZChiYm94LCB2YWx1ZSkge1xuICAgIGNvbnN0IG9yaWdpbiA9IGJib3guZ2V0T3JpZ2luKCk7XG4gICAgY29uc3Qgc2l6ZSA9IGJib3guZ2V0U2l6ZSgpO1xuICAgIGNvbnN0IHNwYWNpbmcgPSBnZXRTcGFjaW5nKHZhbHVlKTtcblxuICAgIGJib3guc2V0T3JpZ2luKFsgb3JpZ2luLnggLSBzcGFjaW5nLmxlZnQsIG9yaWdpbi55IC0gc3BhY2luZy50b3AgXSk7XG4gICAgYmJveC5zZXRTaXplKFsgc2l6ZS53aWR0aCArIChzcGFjaW5nLmxlZnQgKyBzcGFjaW5nLnJpZ2h0KSwgc2l6ZS5oZWlnaHQgKyAoc3BhY2luZy50b3AgKyBzcGFjaW5nLmJvdHRvbSkgXSk7XG5cbiAgICByZXR1cm4gYmJveDtcbn0iLCJpbXBvcnQgeyBnZW9tZXRyeSBhcyBnZW8sIGRyYXdpbmcgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tZHJhd2luZyc7XG5pbXBvcnQgcGFkIGZyb20gJy4vcGFkJztcblxuY29uc3QgeyBHcm91cCwgUGF0aCwgVGV4dCB9ID0gZHJhd2luZztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRMYWJlbEVsZW1lbnQobGFiZWwsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBsYWJlbEJveCA9IGxhYmVsLmJveDtcbiAgICBjb25zdCB0ZXh0Qm94ID0gbGFiZWwuY2hpbGRyZW5bMF0uYm94O1xuICAgIGNvbnN0IGJvcmRlciA9IG9wdGlvbnMuYm9yZGVyIHx8IHt9O1xuICAgIGNvbnN0IGJhY2tncm91bmQgPSBvcHRpb25zLmJhY2tncm91bmQgfHwgXCJcIjtcblxuICAgIGNvbnN0IHdyYXBwZXIgPSBQYXRoLmZyb21SZWN0KG5ldyBnZW8uUmVjdChbIGxhYmVsQm94LngxLCBsYWJlbEJveC55MSBdLCBbIGxhYmVsQm94LndpZHRoKCksIGxhYmVsQm94LmhlaWdodCgpIF0pLCB7XG4gICAgICAgIHN0cm9rZToge31cbiAgICB9KTtcblxuICAgIGNvbnN0IHRleHQgPSBuZXcgVGV4dChsYWJlbC50ZXh0LCBuZXcgZ2VvLlBvaW50KHRleHRCb3gueDEsIHRleHRCb3gueTEpLCB7XG4gICAgICAgIGZvbnQ6IG9wdGlvbnMuZm9udCxcbiAgICAgICAgZmlsbDogeyBjb2xvcjogb3B0aW9ucy5jb2xvciB9XG4gICAgfSk7XG5cbiAgICBjb25zdCBzdHlsZUdlb21ldHJ5ID0gcGFkKHRleHQuYmJveCgpLmNsb25lKCksIG9wdGlvbnMucGFkZGluZyk7XG5cbiAgICBjb25zdCBzdHlsZUJveCA9IFBhdGguZnJvbVJlY3Qoc3R5bGVHZW9tZXRyeSwge1xuICAgICAgICBzdHJva2U6IHtcbiAgICAgICAgICAgIGNvbG9yOiBib3JkZXIud2lkdGggPyBib3JkZXIuY29sb3IgOiBcIlwiLFxuICAgICAgICAgICAgd2lkdGg6IGJvcmRlci53aWR0aCxcbiAgICAgICAgICAgIG9wYWNpdHk6IGJvcmRlci5vcGFjaXR5LFxuICAgICAgICAgICAgZGFzaFR5cGU6IGJvcmRlci5kYXNoVHlwZSxcbiAgICAgICAgICAgIGxpbmVKb2luOiBcInJvdW5kXCIsXG4gICAgICAgICAgICBsaW5lQ2FwOiBcInJvdW5kXCJcbiAgICAgICAgfSxcbiAgICAgICAgZmlsbDoge1xuICAgICAgICAgICAgY29sb3I6IGJhY2tncm91bmRcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgY29uc3QgZWxlbWVudHMgPSBuZXcgR3JvdXAoKTtcbiAgICBlbGVtZW50cy5hcHBlbmQod3JhcHBlcik7XG4gICAgZWxlbWVudHMuYXBwZW5kKHN0eWxlQm94KTtcbiAgICBlbGVtZW50cy5hcHBlbmQodGV4dCk7XG5cbiAgICByZXR1cm4gZWxlbWVudHM7XG59IiwiaW1wb3J0IHsgZGVmaW5lZCB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5pbXBvcnQgeyBNSU5fVkFMVUUsIE1BWF9WQUxVRSB9IGZyb20gJy4uLy4uL2NvbW1vbi9jb25zdGFudHMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRSYW5nZShyYW5nZSwgbWluLCBtYXgpIHtcbiAgICBjb25zdCBmcm9tID0gZGVmaW5lZChyYW5nZS5mcm9tKSA/IHJhbmdlLmZyb20gOiBNSU5fVkFMVUU7XG4gICAgY29uc3QgdG8gPSBkZWZpbmVkKHJhbmdlLnRvKSA/IHJhbmdlLnRvIDogTUFYX1ZBTFVFO1xuXG4gICAgcmFuZ2UuZnJvbSA9IE1hdGgubWF4KE1hdGgubWluKHRvLCBmcm9tKSwgbWluKTtcbiAgICByYW5nZS50byA9IE1hdGgubWluKE1hdGgubWF4KHRvLCBmcm9tKSwgbWF4KTtcblxuICAgIHJldHVybiByYW5nZTtcbn0iLCJpbXBvcnQgeyBnZXRTcGFjaW5nIH0gZnJvbSAnLi4vLi4vY29tbW9uJztcbmltcG9ydCBwYWQgZnJvbSAnLi9wYWQnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1bnBhZChiYm94LCB2YWx1ZSkge1xuICAgIGNvbnN0IHNwYWNpbmcgPSBnZXRTcGFjaW5nKHZhbHVlKTtcblxuICAgIHNwYWNpbmcubGVmdCA9IC1zcGFjaW5nLmxlZnQ7IHNwYWNpbmcudG9wID0gLXNwYWNpbmcudG9wO1xuICAgIHNwYWNpbmcucmlnaHQgPSAtc3BhY2luZy5yaWdodDsgc3BhY2luZy5ib3R0b20gPSAtc3BhY2luZy5ib3R0b207XG5cbiAgICByZXR1cm4gcGFkKGJib3gsIHNwYWNpbmcpO1xufSIsImltcG9ydCB7IGdlb21ldHJ5IGFzIGdlbywgZHJhd2luZyB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1kcmF3aW5nJztcbmltcG9ydCB7IENsYXNzLCBlbGVtZW50U2l6ZSwgc2V0RGVmYXVsdE9wdGlvbnMsIGRlZXBFeHRlbmQsIGlzQXJyYXksIGlzTnVtYmVyIH0gZnJvbSAnLi4vY29tbW9uJztcbmltcG9ydCB7IERFRkFVTFRfV0lEVEgsIERFRkFVTFRfSEVJR0hUIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgQ2hhcnRTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMnO1xuaW1wb3J0IHsgdW5wYWQgfSBmcm9tICcuL3V0aWxzJztcblxuY29uc3QgREVGQVVMVF9NQVJHSU4gPSA1O1xuY29uc3QgeyBQYXRoLCBTdXJmYWNlIH0gPSBkcmF3aW5nO1xuXG5jbGFzcyBHYXVnZSBleHRlbmRzIENsYXNzIHtcblxuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQsIHVzZXJPcHRpb25zLCB0aGVtZSwgY29udGV4dCA9IHt9KSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgdGhpcy50aGVtZSA9IHRoZW1lO1xuICAgICAgICB0aGlzLmNvbnRleHRTZXJ2aWNlID0gbmV3IENoYXJ0U2VydmljZSh0aGlzLCBjb250ZXh0KTtcbiAgICAgICAgdGhpcy5fb3JpZ2luYWxPcHRpb25zID0gZGVlcEV4dGVuZCh7fSwgdGhpcy5vcHRpb25zLCB1c2VyT3B0aW9ucyk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IGRlZXBFeHRlbmQoe30sIHRoaXMuX29yaWdpbmFsT3B0aW9ucyk7XG4gICAgICAgIHRoaXMuX2luaXRUaGVtZSh0aGVtZSk7XG5cbiAgICAgICAgdGhpcy5yZWRyYXcoKTtcbiAgICB9XG5cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBpZiAodGhpcy5zdXJmYWNlKSB7XG4gICAgICAgICAgICB0aGlzLnN1cmZhY2UuZGVzdHJveSgpO1xuICAgICAgICAgICAgdGhpcy5zdXJmYWNlID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlbGV0ZSB0aGlzLmVsZW1lbnQ7XG4gICAgICAgIGRlbGV0ZSB0aGlzLnN1cmZhY2VFbGVtZW50O1xuICAgIH1cblxuICAgIHZhbHVlKHBvaW50ZXJWYWx1ZSkge1xuICAgICAgICBjb25zdCBwb2ludGVyID0gdGhpcy5wb2ludGVyc1swXTtcblxuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHBvaW50ZXIudmFsdWUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBvaW50ZXIudmFsdWUocG9pbnRlclZhbHVlKTtcbiAgICAgICAgdGhpcy5fc2V0VmFsdWVPcHRpb25zKHBvaW50ZXJWYWx1ZSk7XG4gICAgfVxuXG4gICAgX2RyYXcoKSB7XG4gICAgICAgIGNvbnN0IHN1cmZhY2UgPSB0aGlzLnN1cmZhY2U7XG5cbiAgICAgICAgc3VyZmFjZS5jbGVhcigpO1xuICAgICAgICBzdXJmYWNlLmRyYXcodGhpcy5fdmlzdWFscyk7XG4gICAgfVxuXG4gICAgZXhwb3J0VmlzdWFsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmlzdWFscztcbiAgICB9XG5cbiAgICBhbGxWYWx1ZXModmFsdWVzKSB7XG4gICAgICAgIGNvbnN0IHBvaW50ZXJzID0gdGhpcy5wb2ludGVycztcbiAgICAgICAgY29uc3QgYWxsVmFsdWVzID0gW107XG5cbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBhbGxWYWx1ZXMucHVzaChwb2ludGVyc1tpXS52YWx1ZSgpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGFsbFZhbHVlcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0FycmF5KHZhbHVlcykpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzTnVtYmVyKHZhbHVlc1tpXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRlcnNbaV0udmFsdWUodmFsdWVzW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9zZXRWYWx1ZU9wdGlvbnModmFsdWVzKTtcbiAgICB9XG5cbiAgICBfc2V0VmFsdWVPcHRpb25zKHZhbHVlcykge1xuICAgICAgICBjb25zdCBwb2ludGVycyA9IFtdLmNvbmNhdCh0aGlzLm9wdGlvbnMucG9pbnRlcik7XG4gICAgICAgIGNvbnN0IGFycmF5VmFsdWVzID0gW10uY29uY2F0KHZhbHVlcyk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheVZhbHVlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcG9pbnRlcnNbaV0udmFsdWUgPSBhcnJheVZhbHVlc1tpXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlc2l6ZSgpIHtcbiAgICAgICAgdGhpcy5ub1RyYW5zaXRpb25zUmVkcmF3KCk7XG4gICAgfVxuXG4gICAgbm9UcmFuc2l0aW9uc1JlZHJhdygpIHtcbiAgICAgICAgY29uc3QgdHJhbnNpdGlvbnMgPSB0aGlzLm9wdGlvbnMudHJhbnNpdGlvbnM7XG5cbiAgICAgICAgdGhpcy5fdG9nZ2xlVHJhbnNpdGlvbnMoZmFsc2UpO1xuXG4gICAgICAgIHRoaXMucmVkcmF3KCk7XG5cbiAgICAgICAgdGhpcy5fdG9nZ2xlVHJhbnNpdGlvbnModHJhbnNpdGlvbnMpO1xuICAgIH1cblxuICAgIHJlZHJhdygpIHtcbiAgICAgICAgY29uc3Qgc2l6ZSA9IHRoaXMuX3N1cmZhY2VTaXplKCk7XG4gICAgICAgIGNvbnN0IHdyYXBwZXIgPSBuZXcgZ2VvLlJlY3QoWyAwLCAwIF0sIFsgc2l6ZS53aWR0aCwgc2l6ZS5oZWlnaHQgXSk7XG5cbiAgICAgICAgdGhpcy5faW5pdFN1cmZhY2UoKTtcblxuICAgICAgICB0aGlzLmdhdWdlQXJlYSA9IHRoaXMuX2NyZWF0ZUdhdWdlQXJlYSgpO1xuXG4gICAgICAgIHRoaXMuX2NyZWF0ZU1vZGVsKCk7XG5cbiAgICAgICAgY29uc3QgYmJveCA9IHVucGFkKHdyYXBwZXIuYmJveCgpLCB0aGlzLl9nYXVnZUFyZWFNYXJnaW4pO1xuICAgICAgICB0aGlzLnJlZmxvdyhiYm94KTtcbiAgICB9XG5cbiAgICBzZXRPcHRpb25zKG9wdGlvbnMsIHRoZW1lKSB7XG4gICAgICAgIHRoaXMuX29yaWdpbmFsT3B0aW9ucyA9IGRlZXBFeHRlbmQodGhpcy5fb3JpZ2luYWxPcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gZGVlcEV4dGVuZCh7fSwgdGhpcy5fb3JpZ2luYWxPcHRpb25zKTtcblxuICAgICAgICB0aGlzLl9pbml0VGhlbWUodGhlbWUpO1xuXG4gICAgICAgIHRoaXMucmVkcmF3KCk7XG4gICAgfVxuXG4gICAgc2V0RGlyZWN0aW9uKHJ0bCkge1xuICAgICAgICB0aGlzLmNvbnRleHRTZXJ2aWNlLnJ0bCA9IEJvb2xlYW4ocnRsKTtcbiAgICAgICAgaWYgKHRoaXMuc3VyZmFjZSAmJiB0aGlzLnN1cmZhY2UudHlwZSA9PT0gJ3N2ZycpIHtcbiAgICAgICAgICAgIHRoaXMuc3VyZmFjZS5kZXN0cm95KCk7XG4gICAgICAgICAgICB0aGlzLnN1cmZhY2UgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0SW50bFNlcnZpY2UoaW50bCkge1xuICAgICAgICB0aGlzLmNvbnRleHRTZXJ2aWNlLmludGwgPSBpbnRsO1xuICAgIH1cblxuICAgIF9pbml0VGhlbWUodGhlbWUpIHtcbiAgICAgICAgbGV0IGN1cnJlbnRUaGVtZSA9IHRoZW1lIHx8IHRoaXMudGhlbWUgfHwge307XG4gICAgICAgIHRoaXMudGhlbWUgPSBjdXJyZW50VGhlbWU7XG5cbiAgICAgICAgdGhpcy5vcHRpb25zID0gZGVlcEV4dGVuZCh7fSwgY3VycmVudFRoZW1lLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBwb2ludGVyID0gb3B0aW9ucy5wb2ludGVyO1xuXG4gICAgICAgIGlmIChpc0FycmF5KHBvaW50ZXIpKSB7XG4gICAgICAgICAgICBjb25zdCBwb2ludGVycyA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2ludGVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcG9pbnRlcnMucHVzaChkZWVwRXh0ZW5kKHt9LCBjdXJyZW50VGhlbWUucG9pbnRlciwgcG9pbnRlcltpXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3B0aW9ucy5wb2ludGVyID0gcG9pbnRlcnM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfY3JlYXRlR2F1Z2VBcmVhKCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zLmdhdWdlQXJlYTtcbiAgICAgICAgY29uc3Qgc2l6ZSA9IHRoaXMuc3VyZmFjZS5zaXplKCk7XG4gICAgICAgIGNvbnN0IGJvcmRlciA9IG9wdGlvbnMuYm9yZGVyIHx8IHt9O1xuICAgICAgICBsZXQgYXJlYUdlb21ldHJ5ID0gbmV3IGdlby5SZWN0KFsgMCwgMCBdLCBbIHNpemUud2lkdGgsIHNpemUuaGVpZ2h0IF0pO1xuXG4gICAgICAgIHRoaXMuX2dhdWdlQXJlYU1hcmdpbiA9IG9wdGlvbnMubWFyZ2luIHx8IERFRkFVTFRfTUFSR0lOO1xuXG4gICAgICAgIGlmIChib3JkZXIud2lkdGggPiAwKSB7XG4gICAgICAgICAgICBhcmVhR2VvbWV0cnkgPSB1bnBhZChhcmVhR2VvbWV0cnksIGJvcmRlci53aWR0aCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBnYXVnZUFyZWEgPSBQYXRoLmZyb21SZWN0KGFyZWFHZW9tZXRyeSwge1xuICAgICAgICAgICAgc3Ryb2tlOiB7XG4gICAgICAgICAgICAgICAgY29sb3I6IGJvcmRlci53aWR0aCA/IGJvcmRlci5jb2xvciA6IFwiXCIsXG4gICAgICAgICAgICAgICAgd2lkdGg6IGJvcmRlci53aWR0aCxcbiAgICAgICAgICAgICAgICBkYXNoVHlwZTogYm9yZGVyLmRhc2hUeXBlLFxuICAgICAgICAgICAgICAgIGxpbmVKb2luOiBcInJvdW5kXCIsXG4gICAgICAgICAgICAgICAgbGluZUNhcDogXCJyb3VuZFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZmlsbDoge1xuICAgICAgICAgICAgICAgIGNvbG9yOiBvcHRpb25zLmJhY2tncm91bmRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGdhdWdlQXJlYTtcbiAgICB9XG5cbiAgICBfaW5pdFN1cmZhY2UoKSB7XG4gICAgICAgIGNvbnN0IHsgb3B0aW9ucywgc3VyZmFjZSB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMuX3N1cmZhY2VFbGVtZW50KCk7XG4gICAgICAgIGNvbnN0IHNpemUgPSB0aGlzLl9zdXJmYWNlU2l6ZSgpO1xuXG4gICAgICAgIGVsZW1lbnRTaXplKGVsZW1lbnQsIHNpemUpO1xuXG4gICAgICAgIGlmICghc3VyZmFjZSB8fCBzdXJmYWNlLm9wdGlvbnMudHlwZSAhPT0gb3B0aW9ucy5yZW5kZXJBcykge1xuICAgICAgICAgICAgaWYgKHN1cmZhY2UpIHtcbiAgICAgICAgICAgICAgICBzdXJmYWNlLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5zdXJmYWNlID0gU3VyZmFjZS5jcmVhdGUoZWxlbWVudCwge1xuICAgICAgICAgICAgICAgIHR5cGU6IG9wdGlvbnMucmVuZGVyQXNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdXJmYWNlLmNsZWFyKCk7XG4gICAgICAgICAgICB0aGlzLnN1cmZhY2UucmVzaXplKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfc3VyZmFjZVNpemUoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHNpemUgPSB0aGlzLl9nZXRTaXplKCk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuZ2F1Z2VBcmVhKSB7XG4gICAgICAgICAgICBkZWVwRXh0ZW5kKHNpemUsIG9wdGlvbnMuZ2F1Z2VBcmVhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzaXplO1xuICAgIH1cblxuICAgIF9zdXJmYWNlRWxlbWVudCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnN1cmZhY2VFbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLnN1cmZhY2VFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5zdXJmYWNlRWxlbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5zdXJmYWNlRWxlbWVudDtcbiAgICB9XG5cbiAgICBnZXRTaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0U2l6ZSgpO1xuICAgIH1cblxuICAgIF9nZXRTaXplKCkge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5lbGVtZW50O1xuICAgICAgICBjb25zdCBkZWZhdWx0U2l6ZSA9IHRoaXMuX2RlZmF1bHRTaXplKCk7XG4gICAgICAgIGxldCB3aWR0aCA9IGVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gICAgICAgIGxldCBoZWlnaHQgPSBlbGVtZW50Lm9mZnNldEhlaWdodDtcblxuICAgICAgICBpZiAoIXdpZHRoKSB7XG4gICAgICAgICAgICB3aWR0aCA9IGRlZmF1bHRTaXplLndpZHRoO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFoZWlnaHQpIHtcbiAgICAgICAgICAgIGhlaWdodCA9IGRlZmF1bHRTaXplLmhlaWdodDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7IHdpZHRoOiB3aWR0aCwgaGVpZ2h0OiBoZWlnaHQgfTtcbiAgICB9XG5cbiAgICBfZGVmYXVsdFNpemUoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB3aWR0aDogREVGQVVMVF9XSURUSCxcbiAgICAgICAgICAgIGhlaWdodDogREVGQVVMVF9IRUlHSFRcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBfdG9nZ2xlVHJhbnNpdGlvbnModmFsdWUpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLnRyYW5zaXRpb25zID0gdmFsdWU7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5wb2ludGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5wb2ludGVyc1tpXS5vcHRpb25zLmFuaW1hdGlvbi50cmFuc2l0aW9ucyA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5zZXREZWZhdWx0T3B0aW9ucyhHYXVnZSwge1xuICAgIHBsb3RBcmVhOiB7fSxcbiAgICB0aGVtZTogXCJkZWZhdWx0XCIsXG4gICAgcmVuZGVyQXM6IFwiXCIsXG4gICAgcG9pbnRlcjoge30sXG4gICAgc2NhbGU6IHt9LFxuICAgIGdhdWdlQXJlYToge31cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBHYXVnZTsiLCJpbXBvcnQgeyBnZW9tZXRyeSBhcyBnZW8sIGRyYXdpbmcgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tZHJhd2luZyc7XG5pbXBvcnQgeyBzZXREZWZhdWx0T3B0aW9ucywgZGVlcEV4dGVuZCwgZGVmaW5lZCB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5pbXBvcnQgeyBCTEFDSyB9IGZyb20gJy4uLy4uL2NvbW1vbi9jb25zdGFudHMnO1xuaW1wb3J0IHsgTnVtZXJpY0F4aXMgfSBmcm9tICcuLi8uLi9jb3JlJztcbmltcG9ydCB7IERFRkFVTFRfTElORV9XSURUSCwgSU5TSURFIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCB7IGF1dG9NYWpvclVuaXQgfSBmcm9tICcuLi8uLi9jb3JlJztcbmltcG9ydCB7IGJ1aWxkTGFiZWxFbGVtZW50LCBnZXRSYW5nZSB9IGZyb20gJy4uL3V0aWxzJztcblxuY29uc3QgeyBQYXRoLCBHcm91cCB9ID0gZHJhd2luZztcbmNvbnN0IFBvaW50ID0gZ2VvLlBvaW50O1xuXG5mdW5jdGlvbiByZW5kZXJBeGlzVGljayh0aWNrUmVuZGVyT3B0aW9ucywgdGlja09wdGlvbnMpIHtcbiAgICBjb25zdCB7IHBvc2l0aW9uLCB0aWNrWCwgdGlja1kgfSA9IHRpY2tSZW5kZXJPcHRpb25zO1xuICAgIGxldCBzdGFydCwgZW5kO1xuXG4gICAgaWYgKHRpY2tSZW5kZXJPcHRpb25zLnZlcnRpY2FsKSB7XG4gICAgICAgIHN0YXJ0ID0gbmV3IFBvaW50KHRpY2tYLCBwb3NpdGlvbik7XG4gICAgICAgIGVuZCA9IG5ldyBQb2ludCh0aWNrWCArIHRpY2tPcHRpb25zLnNpemUsIHBvc2l0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzdGFydCA9IG5ldyBQb2ludChwb3NpdGlvbiwgdGlja1kpO1xuICAgICAgICBlbmQgPSBuZXcgUG9pbnQocG9zaXRpb24sIHRpY2tZICsgdGlja09wdGlvbnMuc2l6ZSk7XG4gICAgfVxuXG4gICAgY29uc3QgdGlja1BhdGggPSBuZXcgUGF0aCh7XG4gICAgICAgIHN0cm9rZToge1xuICAgICAgICAgICAgY29sb3I6IHRpY2tPcHRpb25zLmNvbG9yLFxuICAgICAgICAgICAgd2lkdGg6IHRpY2tPcHRpb25zLndpZHRoXG4gICAgICAgIH1cbiAgICB9KS5tb3ZlVG8oc3RhcnQpLmxpbmVUbyhlbmQpO1xuXG4gICAgcmV0dXJuIHRpY2tQYXRoO1xufVxuXG5mdW5jdGlvbiByZW5kZXJUaWNrcyh0aWNrR3JvdXAsIHRpY2tQb3NpdGlvbnMsIHRpY2tSZW5kZXJPcHRpb25zLCB0aWNrT3B0aW9ucykge1xuICAgIGNvbnN0IGNvdW50ID0gdGlja1Bvc2l0aW9ucy5sZW5ndGg7XG5cbiAgICBpZiAodGlja09wdGlvbnMudmlzaWJsZSkge1xuICAgICAgICBjb25zdCB7IG1pcnJvciwgbGluZUJveCB9ID0gdGlja1JlbmRlck9wdGlvbnM7XG4gICAgICAgIGZvciAobGV0IGkgPSB0aWNrT3B0aW9ucy5za2lwOyBpIDwgY291bnQ7IGkgKz0gdGlja09wdGlvbnMuc3RlcCkge1xuICAgICAgICAgICAgaWYgKGkgJSB0aWNrT3B0aW9ucy5za2lwVW5pdCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aWNrUmVuZGVyT3B0aW9ucy50aWNrWCA9IG1pcnJvciA/IGxpbmVCb3gueDIgOiBsaW5lQm94LngyIC0gdGlja09wdGlvbnMuc2l6ZTtcbiAgICAgICAgICAgIHRpY2tSZW5kZXJPcHRpb25zLnRpY2tZID0gbWlycm9yID8gbGluZUJveC55MSAtIHRpY2tPcHRpb25zLnNpemUgOiBsaW5lQm94LnkxO1xuICAgICAgICAgICAgdGlja1JlbmRlck9wdGlvbnMucG9zaXRpb24gPSB0aWNrUG9zaXRpb25zW2ldO1xuXG4gICAgICAgICAgICB0aWNrR3JvdXAuYXBwZW5kKHJlbmRlckF4aXNUaWNrKHRpY2tSZW5kZXJPcHRpb25zLCB0aWNrT3B0aW9ucykpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5jbGFzcyBMaW5lYXJTY2FsZSBleHRlbmRzIE51bWVyaWNBeGlzIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zLCBzZXJ2aWNlKSB7XG4gICAgICAgIGxldCBzY2FsZU9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgICAgICBpZiAoIWRlZmluZWQoc2NhbGVPcHRpb25zLnJldmVyc2UpICYmIHNjYWxlT3B0aW9ucy52ZXJ0aWNhbCA9PT0gZmFsc2UgJiYgKHNlcnZpY2UgfHwge30pLnJ0bCkge1xuICAgICAgICAgICAgc2NhbGVPcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgc2NhbGVPcHRpb25zLCB7XG4gICAgICAgICAgICAgICAgcmV2ZXJzZTogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBzdXBlcigwLCAxLCBzY2FsZU9wdGlvbnMsIHNlcnZpY2UpO1xuXG4gICAgICAgIHRoaXMub3B0aW9ucy5taW5vclVuaXQgPSB0aGlzLm9wdGlvbnMubWlub3JVbml0IHx8IHRoaXMub3B0aW9ucy5tYWpvclVuaXQgLyAxMDtcbiAgICB9XG5cbiAgICBpbml0VXNlck9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICBsZXQgc2NhbGVPcHRpb25zID0gZGVlcEV4dGVuZCh7fSwgdGhpcy5vcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgc2NhbGVPcHRpb25zID0gZGVlcEV4dGVuZCh7fSwgc2NhbGVPcHRpb25zICwgeyBsYWJlbHM6IHsgbWlycm9yOiBzY2FsZU9wdGlvbnMubWlycm9yIH0gfSk7XG4gICAgICAgIHNjYWxlT3B0aW9ucy5tYWpvclVuaXQgPSBzY2FsZU9wdGlvbnMubWFqb3JVbml0IHx8IGF1dG9NYWpvclVuaXQoc2NhbGVPcHRpb25zLm1pbiwgc2NhbGVPcHRpb25zLm1heCk7XG5cbiAgICAgICAgcmV0dXJuIHNjYWxlT3B0aW9ucztcbiAgICB9XG5cbiAgICBpbml0RmllbGRzKCkge1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgZWxlbWVudHMgPSB0aGlzLmVsZW1lbnRzID0gbmV3IEdyb3VwKCk7XG4gICAgICAgIGNvbnN0IGxhYmVscyA9IHRoaXMucmVuZGVyTGFiZWxzKCk7XG4gICAgICAgIGNvbnN0IHNjYWxlTGluZSA9IHRoaXMucmVuZGVyTGluZSgpO1xuICAgICAgICBjb25zdCBzY2FsZVRpY2tzID0gdGhpcy5yZW5kZXJUaWNrcygpO1xuICAgICAgICBjb25zdCByYW5nZXMgPSB0aGlzLnJlbmRlclJhbmdlcygpO1xuXG4gICAgICAgIGVsZW1lbnRzLmFwcGVuZChzY2FsZUxpbmUsIGxhYmVscywgc2NhbGVUaWNrcywgcmFuZ2VzKTtcblxuICAgICAgICByZXR1cm4gZWxlbWVudHM7XG4gICAgfVxuXG4gICAgcmVuZGVyUmFuZ2VzKCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCB7IG1pbiwgbWF4LCB2ZXJ0aWNhbCwgbGFiZWxzOiB7IG1pcnJvciB9IH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCByYW5nZXMgPSBvcHRpb25zLnJhbmdlcyB8fCBbXTtcbiAgICAgICAgY29uc3QgZWxlbWVudHMgPSBuZXcgR3JvdXAoKTtcbiAgICAgICAgY29uc3QgY291bnQgPSByYW5nZXMubGVuZ3RoO1xuICAgICAgICBjb25zdCByYW5nZVNpemUgPSBvcHRpb25zLnJhbmdlU2l6ZSB8fCBvcHRpb25zLm1pbm9yVGlja3Muc2l6ZSAvIDI7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCByYW5nZSA9IGdldFJhbmdlKHJhbmdlc1tpXSwgbWluLCBtYXgpO1xuICAgICAgICAgICAgY29uc3Qgc2xvdCA9IHRoaXMuZ2V0U2xvdChyYW5nZS5mcm9tLCByYW5nZS50byk7XG4gICAgICAgICAgICBjb25zdCBzbG90WCA9IHZlcnRpY2FsID8gdGhpcy5saW5lQm94KCkgOiBzbG90O1xuICAgICAgICAgICAgY29uc3Qgc2xvdFkgPSB2ZXJ0aWNhbCA/IHNsb3QgOiB0aGlzLmxpbmVCb3goKTtcbiAgICAgICAgICAgIGlmICh2ZXJ0aWNhbCkge1xuICAgICAgICAgICAgICAgIHNsb3RYLngxIC09IHJhbmdlU2l6ZSAqIChtaXJyb3IgPyAtMSA6IDEpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzbG90WS55MiArPSByYW5nZVNpemUgKiAobWlycm9yID8gLTEgOiAxKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZWxlbWVudHMuYXBwZW5kKFBhdGguZnJvbVJlY3QobmV3IGdlby5SZWN0KFsgc2xvdFgueDEsIHNsb3RZLnkxIF0sIFsgc2xvdFgueDIgLSBzbG90WC54MSwgc2xvdFkueTIgLSBzbG90WS55MSBdKSwge1xuICAgICAgICAgICAgICAgIGZpbGw6IHsgY29sb3I6IHJhbmdlLmNvbG9yLCBvcGFjaXR5OiByYW5nZS5vcGFjaXR5IH0sXG4gICAgICAgICAgICAgICAgc3Ryb2tlOiB7IH1cbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlbGVtZW50cztcbiAgICB9XG5cbiAgICByZW5kZXJMYWJlbHMoKSB7XG4gICAgICAgIGNvbnN0IHsgbGFiZWxzLCBvcHRpb25zIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBlbGVtZW50cyA9IG5ldyBHcm91cCgpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGFiZWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBlbGVtZW50cy5hcHBlbmQoYnVpbGRMYWJlbEVsZW1lbnQobGFiZWxzW2ldLCBvcHRpb25zLmxhYmVscykpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGVsZW1lbnRzO1xuICAgIH1cblxuICAgIHJlbmRlckxpbmUoKSB7XG4gICAgICAgIGNvbnN0IGxpbmUgPSB0aGlzLm9wdGlvbnMubGluZTtcbiAgICAgICAgY29uc3QgbGluZUJveCA9IHRoaXMubGluZUJveCgpO1xuICAgICAgICBjb25zdCBlbGVtZW50cyA9IG5ldyBHcm91cCgpO1xuXG4gICAgICAgIGlmIChsaW5lLndpZHRoID4gMCAmJiBsaW5lLnZpc2libGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGxpbmVQYXRoID0gbmV3IFBhdGgoe1xuICAgICAgICAgICAgICAgIHN0cm9rZToge1xuICAgICAgICAgICAgICAgICAgICBjb2xvcjogbGluZS5jb2xvcixcbiAgICAgICAgICAgICAgICAgICAgZGFzaFR5cGU6IGxpbmUuZGFzaFR5cGUsXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBsaW5lLndpZHRoXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGxpbmVQYXRoLm1vdmVUbyhsaW5lQm94LngxLCBsaW5lQm94LnkxKS5saW5lVG8obGluZUJveC54MiwgbGluZUJveC55Mik7XG4gICAgICAgICAgICBlbGVtZW50cy5hcHBlbmQobGluZVBhdGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGVsZW1lbnRzO1xuICAgIH1cblxuICAgIHJlbmRlclRpY2tzKCkge1xuICAgICAgICBjb25zdCB0aWNrcyA9IG5ldyBHcm91cCgpO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBtYWpvclVuaXQgPSBvcHRpb25zLm1ham9yVGlja3MudmlzaWJsZSA/IG9wdGlvbnMubWFqb3JVbml0IDogMDtcbiAgICAgICAgY29uc3QgdGlja1JlbmRlck9wdGlvbnMgPSB7XG4gICAgICAgICAgICB2ZXJ0aWNhbDogb3B0aW9ucy52ZXJ0aWNhbCxcbiAgICAgICAgICAgIG1pcnJvcjogb3B0aW9ucy5sYWJlbHMubWlycm9yLFxuICAgICAgICAgICAgbGluZUJveDogdGhpcy5saW5lQm94KClcbiAgICAgICAgfTtcblxuICAgICAgICByZW5kZXJUaWNrcyh0aWNrcywgdGhpcy5nZXRNYWpvclRpY2tQb3NpdGlvbnMoKSwgdGlja1JlbmRlck9wdGlvbnMsIG9wdGlvbnMubWFqb3JUaWNrcyk7XG4gICAgICAgIHJlbmRlclRpY2tzKHRpY2tzLCB0aGlzLmdldE1pbm9yVGlja1Bvc2l0aW9ucygpLCB0aWNrUmVuZGVyT3B0aW9ucywgZGVlcEV4dGVuZCh7fSwge1xuICAgICAgICAgICAgc2tpcFVuaXQ6IG1ham9yVW5pdCAvIG9wdGlvbnMubWlub3JVbml0XG4gICAgICAgIH0sIG9wdGlvbnMubWlub3JUaWNrcykpO1xuXG4gICAgICAgIHJldHVybiB0aWNrcztcbiAgICB9XG59XG5cbnNldERlZmF1bHRPcHRpb25zKExpbmVhclNjYWxlLCB7XG4gICAgbWluOiAwLFxuICAgIG1heDogNTAsXG5cbiAgICBtYWpvclRpY2tzOiB7XG4gICAgICAgIHNpemU6IDE1LFxuICAgICAgICBhbGlnbjogSU5TSURFLFxuICAgICAgICBjb2xvcjogQkxBQ0ssXG4gICAgICAgIHdpZHRoOiBERUZBVUxUX0xJTkVfV0lEVEgsXG4gICAgICAgIHZpc2libGU6IHRydWVcbiAgICB9LFxuXG4gICAgbWlub3JUaWNrczoge1xuICAgICAgICBzaXplOiAxMCxcbiAgICAgICAgYWxpZ246IElOU0lERSxcbiAgICAgICAgY29sb3I6IEJMQUNLLFxuICAgICAgICB3aWR0aDogREVGQVVMVF9MSU5FX1dJRFRILFxuICAgICAgICB2aXNpYmxlOiB0cnVlXG4gICAgfSxcblxuICAgIGxpbmU6IHtcbiAgICAgICAgd2lkdGg6IERFRkFVTFRfTElORV9XSURUSFxuICAgIH0sXG5cbiAgICBsYWJlbHM6IHtcbiAgICAgICAgcG9zaXRpb246IElOU0lERSxcbiAgICAgICAgcGFkZGluZzogMlxuICAgIH0sXG4gICAgbWlycm9yOiBmYWxzZSxcbiAgICBfYWxpZ25MaW5lczogZmFsc2Vcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBMaW5lYXJTY2FsZTsiLCJpbXBvcnQgeyBDbGFzcywgc2V0RGVmYXVsdE9wdGlvbnMsIGRlZmluZWQsIGRlZXBFeHRlbmQsIGxpbWl0VmFsdWUgfSBmcm9tICcuLi9jb21tb24nO1xuaW1wb3J0IHsgQkxBQ0sgfSBmcm9tICcuLi9jb21tb24vY29uc3RhbnRzJztcblxuY2xhc3MgUG9pbnRlciBleHRlbmRzIENsYXNzIHtcbiAgICBjb25zdHJ1Y3RvcihzY2FsZSwgdXNlck9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICBjb25zdCB7IG1pbiwgbWF4IH0gPSBzY2FsZS5vcHRpb25zO1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zID0gZGVlcEV4dGVuZCh7fSwgdGhpcy5vcHRpb25zLCB1c2VyT3B0aW9ucyk7XG5cbiAgICAgICAgb3B0aW9ucy5maWxsID0gb3B0aW9ucy5jb2xvcjtcblxuICAgICAgICB0aGlzLnNjYWxlID0gc2NhbGU7XG5cbiAgICAgICAgaWYgKGRlZmluZWQob3B0aW9ucy52YWx1ZSkpIHtcbiAgICAgICAgICAgIG9wdGlvbnMudmFsdWUgPSBsaW1pdFZhbHVlKG9wdGlvbnMudmFsdWUsIG1pbiwgbWF4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9wdGlvbnMudmFsdWUgPSBtaW47XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YWx1ZShuZXdWYWx1ZSkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IG9wdGlvbnMudmFsdWU7XG5cbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHsgbWluLCBtYXggfSA9IHRoaXMuc2NhbGUub3B0aW9ucztcblxuICAgICAgICBvcHRpb25zLl9vbGRWYWx1ZSA9IGRlZmluZWQob3B0aW9ucy5fb2xkVmFsdWUpID8gb3B0aW9ucy52YWx1ZSA6IG1pbjtcbiAgICAgICAgb3B0aW9ucy52YWx1ZSA9IGxpbWl0VmFsdWUobmV3VmFsdWUsIG1pbiwgbWF4KTtcblxuICAgICAgICBpZiAodGhpcy5lbGVtZW50cykge1xuICAgICAgICAgICAgdGhpcy5yZXBhaW50KCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbnNldERlZmF1bHRPcHRpb25zKFBvaW50ZXIsIHtcbiAgICBjb2xvcjogQkxBQ0tcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBQb2ludGVyOyIsImltcG9ydCB7IHNldERlZmF1bHRPcHRpb25zLCBkZWVwRXh0ZW5kLCBkZWZpbmVkLCBnZXRTcGFjaW5nIH0gZnJvbSAnLi4vLi4vY29tbW9uJztcbmltcG9ydCB7IEJveCB9IGZyb20gJy4uLy4uL2NvcmUnO1xuaW1wb3J0IHsgQkxBQ0sgfSBmcm9tICcuLi8uLi9jb21tb24vY29uc3RhbnRzJztcbmltcG9ydCB7IEJBUl9QT0lOVEVSIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCBQb2ludGVyIGZyb20gJy4uL3BvaW50ZXInO1xuXG5jbGFzcyBMaW5lYXJQb2ludGVyIGV4dGVuZHMgUG9pbnRlciB7XG4gICAgY29uc3RydWN0b3Ioc2NhbGUsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoc2NhbGUsIG9wdGlvbnMpO1xuXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IGRlZXBFeHRlbmQoe1xuICAgICAgICAgICAgdHJhY2s6IHtcbiAgICAgICAgICAgICAgICB2aXNpYmxlOiBkZWZpbmVkKG9wdGlvbnMudHJhY2spXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHRoaXMub3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcmVmbG93KCkge1xuICAgICAgICBjb25zdCB7IG9wdGlvbnMsIHNjYWxlIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB7IG1pcnJvciwgdmVydGljYWwgfSA9IHNjYWxlLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHNjYWxlTGluZSA9IHNjYWxlLmxpbmVCb3goKTtcbiAgICAgICAgY29uc3QgdHJhY2tTaXplID0gb3B0aW9ucy50cmFjay5zaXplIHx8IG9wdGlvbnMuc2l6ZTtcbiAgICAgICAgY29uc3QgcG9pbnRlckhhbGZTaXplID0gb3B0aW9ucy5zaXplIC8gMjtcbiAgICAgICAgY29uc3QgbWFyZ2luID0gZ2V0U3BhY2luZyhvcHRpb25zLm1hcmdpbik7XG4gICAgICAgIGxldCBzcGFjZSA9IHZlcnRpY2FsID9cbiAgICAgICAgICAgICAgICAgbWFyZ2luW21pcnJvciA/IFwibGVmdFwiIDogXCJyaWdodFwiXSA6XG4gICAgICAgICAgICAgICAgIG1hcmdpblttaXJyb3IgPyBcImJvdHRvbVwiIDogXCJ0b3BcIl07XG4gICAgICAgIGxldCBwb2ludGVyQm94LCBwb2ludGVyUmFuZ2VCb3gsIHRyYWNrQm94O1xuXG4gICAgICAgIHNwYWNlID0gbWlycm9yID8gLXNwYWNlIDogc3BhY2U7XG5cbiAgICAgICAgaWYgKHZlcnRpY2FsKSB7XG4gICAgICAgICAgICB0cmFja0JveCA9IG5ldyBCb3goXG4gICAgICAgICAgICAgICAgc2NhbGVMaW5lLngxICsgc3BhY2UsIHNjYWxlTGluZS55MSxcbiAgICAgICAgICAgICAgICBzY2FsZUxpbmUueDEgKyBzcGFjZSwgc2NhbGVMaW5lLnkyKTtcblxuICAgICAgICAgICAgaWYgKG1pcnJvcikge1xuICAgICAgICAgICAgICAgIHRyYWNrQm94LngxIC09IHRyYWNrU2l6ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdHJhY2tCb3gueDIgKz0gdHJhY2tTaXplO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5zaGFwZSAhPT0gQkFSX1BPSU5URVIpIHtcbiAgICAgICAgICAgICAgICBwb2ludGVyUmFuZ2VCb3ggPSBuZXcgQm94KFxuICAgICAgICAgICAgICAgICAgICBzY2FsZUxpbmUueDIgKyBzcGFjZSwgc2NhbGVMaW5lLnkxIC0gcG9pbnRlckhhbGZTaXplLFxuICAgICAgICAgICAgICAgICAgICBzY2FsZUxpbmUueDIgKyBzcGFjZSwgc2NhbGVMaW5lLnkyICsgcG9pbnRlckhhbGZTaXplXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBwb2ludGVyQm94ID0gcG9pbnRlclJhbmdlQm94O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHJhY2tCb3ggPSBuZXcgQm94KFxuICAgICAgICAgICAgICAgIHNjYWxlTGluZS54MSwgc2NhbGVMaW5lLnkxIC0gc3BhY2UsXG4gICAgICAgICAgICAgICAgc2NhbGVMaW5lLngyLCBzY2FsZUxpbmUueTEgLSBzcGFjZSk7XG5cbiAgICAgICAgICAgIGlmIChtaXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0cmFja0JveC55MiArPSB0cmFja1NpemU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRyYWNrQm94LnkxIC09IHRyYWNrU2l6ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2hhcGUgIT09IEJBUl9QT0lOVEVSKSB7XG4gICAgICAgICAgICAgICAgcG9pbnRlclJhbmdlQm94ID0gbmV3IEJveChcbiAgICAgICAgICAgICAgICAgICAgc2NhbGVMaW5lLngxIC0gcG9pbnRlckhhbGZTaXplLCBzY2FsZUxpbmUueTEgLSBzcGFjZSxcbiAgICAgICAgICAgICAgICAgICAgc2NhbGVMaW5lLngyICsgcG9pbnRlckhhbGZTaXplLCBzY2FsZUxpbmUueTEgLSBzcGFjZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgcG9pbnRlckJveCA9IHBvaW50ZXJSYW5nZUJveDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudHJhY2tCb3ggPSB0cmFja0JveDtcbiAgICAgICAgdGhpcy5wb2ludGVyUmFuZ2VCb3ggPSBwb2ludGVyUmFuZ2VCb3g7XG4gICAgICAgIHRoaXMuYm94ID0gcG9pbnRlckJveCB8fCB0cmFja0JveC5jbG9uZSgpLnBhZChvcHRpb25zLmJvcmRlci53aWR0aCk7XG4gICAgfVxuXG4gICAgZ2V0RWxlbWVudE9wdGlvbnMoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZpbGw6IHtcbiAgICAgICAgICAgICAgICBjb2xvcjogb3B0aW9ucy5jb2xvcixcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiBvcHRpb25zLm9wYWNpdHlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdHJva2U6IGRlZmluZWQob3B0aW9ucy5ib3JkZXIpID8ge1xuICAgICAgICAgICAgICAgIGNvbG9yOiBvcHRpb25zLmJvcmRlci53aWR0aCA/IG9wdGlvbnMuYm9yZGVyLmNvbG9yIHx8IG9wdGlvbnMuY29sb3IgOiBcIlwiLFxuICAgICAgICAgICAgICAgIHdpZHRoOiBvcHRpb25zLmJvcmRlci53aWR0aCxcbiAgICAgICAgICAgICAgICBkYXNoVHlwZTogb3B0aW9ucy5ib3JkZXIuZGFzaFR5cGUsXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogb3B0aW9ucy5vcGFjaXR5XG4gICAgICAgICAgICB9IDogbnVsbFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIF9tYXJnaW4oKSB7XG4gICAgICAgIGNvbnN0IHsgc2NhbGUsIG9wdGlvbnMgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHsgbWlycm9yLCB2ZXJ0aWNhbCB9ID0gc2NhbGUub3B0aW9ucztcbiAgICAgICAgY29uc3QgbWFyZ2luID0gZ2V0U3BhY2luZyhvcHRpb25zLm1hcmdpbik7XG5cbiAgICAgICAgY29uc3Qgc3BhY2UgPSB2ZXJ0aWNhbCA/XG4gICAgICAgICAgICBtYXJnaW5bbWlycm9yID8gXCJsZWZ0XCIgOiBcInJpZ2h0XCJdIDpcbiAgICAgICAgICAgIG1hcmdpblttaXJyb3IgPyBcImJvdHRvbVwiIDogXCJ0b3BcIl07XG5cbiAgICAgICAgcmV0dXJuIHNwYWNlO1xuICAgIH1cbn1cblxuc2V0RGVmYXVsdE9wdGlvbnMoTGluZWFyUG9pbnRlciwge1xuICAgIHNoYXBlOiBCQVJfUE9JTlRFUixcblxuICAgIHRyYWNrOiB7XG4gICAgICAgIGJvcmRlcjoge1xuICAgICAgICAgICAgd2lkdGg6IDFcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBjb2xvcjogQkxBQ0ssXG4gICAgYm9yZGVyOiB7XG4gICAgICAgIHdpZHRoOiAxXG4gICAgfSxcbiAgICBvcGFjaXR5OiAxLFxuXG4gICAgbWFyZ2luOiBnZXRTcGFjaW5nKDMpLFxuICAgIGFuaW1hdGlvbjoge1xuICAgICAgICB0eXBlOiBCQVJfUE9JTlRFUlxuICAgIH0sXG4gICAgdmlzaWJsZTogdHJ1ZVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IExpbmVhclBvaW50ZXI7IiwiaW1wb3J0IHsgZ2VvbWV0cnksIGRyYXdpbmcgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tZHJhd2luZyc7XG5pbXBvcnQgeyBpbnRlcnBvbGF0ZVZhbHVlLCBzZXREZWZhdWx0T3B0aW9ucyB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5pbXBvcnQgeyBBUlJPV19QT0lOVEVSLCBMSU5FQVJfU1BFRUQsIExJTkVBUiB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5cbmNsYXNzIEFycm93TGluZWFyUG9pbnRlckFuaW1hdGlvbiBleHRlbmRzIGRyYXdpbmcuQW5pbWF0aW9uIHtcblxuICAgIHNldHVwKCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCB7IG1hcmdpbiwgZnJvbSwgdG8sIHZlcnRpY2FsIH0gPSBvcHRpb25zO1xuICAgICAgICBjb25zdCBheGlzID0gdmVydGljYWwgPyBcIngxXCIgOiBcInkxXCI7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMubWlycm9yID09PSB2ZXJ0aWNhbCkge1xuICAgICAgICAgICAgZnJvbVtheGlzXSAtPSBtYXJnaW47IHRvW2F4aXNdIC09IG1hcmdpbjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZyb21bYXhpc10gKz0gbWFyZ2luOyB0b1theGlzXSArPSBtYXJnaW47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBmcm9tU2NhbGUgPSB0aGlzLmZyb21TY2FsZSA9IG5ldyBnZW9tZXRyeS5Qb2ludChmcm9tLngxLCBmcm9tLnkxKTtcbiAgICAgICAgY29uc3QgdG9TY2FsZSA9IHRoaXMudG9TY2FsZSA9IG5ldyBnZW9tZXRyeS5Qb2ludCh0by54MSwgdG8ueTEpO1xuXG4gICAgICAgIGlmIChvcHRpb25zLmR1cmF0aW9uICE9PSAwKSB7XG4gICAgICAgICAgICBvcHRpb25zLmR1cmF0aW9uID0gTWF0aC5tYXgoKGZyb21TY2FsZS5kaXN0YW5jZVRvKHRvU2NhbGUpIC8gb3B0aW9ucy5kdXJhdGlvbikgKiAxMDAwLCAxKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0ZXAocG9zKSB7XG4gICAgICAgIGNvbnN0IHRyYW5zbGF0ZVggPSBpbnRlcnBvbGF0ZVZhbHVlKHRoaXMuZnJvbVNjYWxlLngsIHRoaXMudG9TY2FsZS54LCBwb3MpO1xuICAgICAgICBjb25zdCB0cmFuc2xhdGVZID0gaW50ZXJwb2xhdGVWYWx1ZSh0aGlzLmZyb21TY2FsZS55LCB0aGlzLnRvU2NhbGUueSwgcG9zKTtcblxuICAgICAgICB0aGlzLmVsZW1lbnQudHJhbnNmb3JtKGdlb21ldHJ5LnRyYW5zZm9ybSgpLnRyYW5zbGF0ZSh0cmFuc2xhdGVYLCB0cmFuc2xhdGVZKSk7XG4gICAgfVxufVxuXG5zZXREZWZhdWx0T3B0aW9ucyhBcnJvd0xpbmVhclBvaW50ZXJBbmltYXRpb24sIHtcbiAgICBlYXNpbmc6IExJTkVBUixcbiAgICBkdXJhdGlvbjogTElORUFSX1NQRUVEXG59KTtcblxuZHJhd2luZy5BbmltYXRpb25GYWN0b3J5LmN1cnJlbnQucmVnaXN0ZXIoQVJST1dfUE9JTlRFUiwgQXJyb3dMaW5lYXJQb2ludGVyQW5pbWF0aW9uKTtcblxuZXhwb3J0IGRlZmF1bHQgQXJyb3dMaW5lYXJQb2ludGVyQW5pbWF0aW9uOyIsImltcG9ydCB7IGdlb21ldHJ5IGFzIGdlbywgZHJhd2luZyB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1kcmF3aW5nJztcbmltcG9ydCB7IGRlZXBFeHRlbmQsIGRlZmluZWQgfSBmcm9tICcuLi8uLi9jb21tb24nO1xuaW1wb3J0IHsgQVJST1dfUE9JTlRFUiB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgTGluZWFyUG9pbnRlciBmcm9tICcuL2xpbmVhci1wb2ludGVyJztcbmltcG9ydCBBcnJvd0xpbmVhclBvaW50ZXJBbmltYXRpb24gZnJvbSAnLi9hcnJvdy1saW5lYXItcG9pbnRlci1hbmltYXRpb24nO1xuXG5jb25zdCBQb2ludCA9IGdlby5Qb2ludDtcbmNvbnN0IFBhdGggPSBkcmF3aW5nLlBhdGg7XG5cbmNsYXNzIEFycm93TGluZWFyUG9pbnRlciBleHRlbmRzIExpbmVhclBvaW50ZXIge1xuICAgIGNvbnN0cnVjdG9yKHNjYWxlLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKHNjYWxlLCBvcHRpb25zKTtcblxuICAgICAgICBpZiAoIWRlZmluZWQodGhpcy5vcHRpb25zLnNpemUpKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuc2l6ZSA9IHRoaXMuc2NhbGUub3B0aW9ucy5tYWpvclRpY2tzLnNpemUgKiAwLjY7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwb2ludGVyU2hhcGUoKSB7XG4gICAgICAgIGNvbnN0IHsgc2NhbGUsIG9wdGlvbnM6IHsgc2l6ZSB9IH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBoYWxmU2l6ZSA9IHNpemUgLyAyO1xuICAgICAgICBjb25zdCBzaWduID0gKHNjYWxlLm9wdGlvbnMubWlycm9yID8gLTEgOiAxKTtcbiAgICAgICAgbGV0IHNoYXBlO1xuXG4gICAgICAgIGlmIChzY2FsZS5vcHRpb25zLnZlcnRpY2FsKSB7XG4gICAgICAgICAgICBzaGFwZSA9IFtcbiAgICAgICAgICAgICAgICBuZXcgUG9pbnQoMCwgMCAtIGhhbGZTaXplKSwgbmV3IFBvaW50KDAgLSBzaWduICogc2l6ZSwgMCksIG5ldyBQb2ludCgwLCAwICsgaGFsZlNpemUpXG4gICAgICAgICAgICBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2hhcGUgPSBbXG4gICAgICAgICAgICAgICAgbmV3IFBvaW50KDAgLSBoYWxmU2l6ZSwgMCksIG5ldyBQb2ludCgwLCAwICsgc2lnbiAqIHNpemUpLCBuZXcgUG9pbnQoMCArIGhhbGZTaXplLCAwKVxuICAgICAgICAgICAgXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzaGFwZTtcbiAgICB9XG5cbiAgICByZXBhaW50KCkge1xuICAgICAgICBjb25zdCB7IHNjYWxlLCBvcHRpb25zIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBhbmltYXRpb24gPSBuZXcgQXJyb3dMaW5lYXJQb2ludGVyQW5pbWF0aW9uKHRoaXMuZWxlbWVudHMsIGRlZXBFeHRlbmQob3B0aW9ucy5hbmltYXRpb24sIHtcbiAgICAgICAgICAgIHZlcnRpY2FsOiBzY2FsZS5vcHRpb25zLnZlcnRpY2FsLFxuICAgICAgICAgICAgbWlycm9yOiBzY2FsZS5vcHRpb25zLm1pcnJvcixcbiAgICAgICAgICAgIG1hcmdpbjogdGhpcy5fbWFyZ2luKG9wdGlvbnMubWFyZ2luKSxcbiAgICAgICAgICAgIGZyb206IHNjYWxlLmdldFNsb3Qob3B0aW9ucy5fb2xkVmFsdWUpLFxuICAgICAgICAgICAgdG86IHNjYWxlLmdldFNsb3Qob3B0aW9ucy52YWx1ZSlcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIGlmIChvcHRpb25zLmFuaW1hdGlvbi50cmFuc2l0aW9ucyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGFuaW1hdGlvbi5vcHRpb25zLmR1cmF0aW9uID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGFuaW1hdGlvbi5zZXR1cCgpO1xuICAgICAgICBhbmltYXRpb24ucGxheSgpO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyBzY2FsZSwgb3B0aW9ucyB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgZWxlbWVudE9wdGlvbnMgPSB0aGlzLmdldEVsZW1lbnRPcHRpb25zKCk7XG4gICAgICAgIGNvbnN0IHNoYXBlID0gdGhpcy5wb2ludGVyU2hhcGUob3B0aW9ucy52YWx1ZSk7XG5cbiAgICAgICAgb3B0aW9ucy5hbmltYXRpb24udHlwZSA9IEFSUk9XX1BPSU5URVI7XG5cbiAgICAgICAgY29uc3QgZWxlbWVudHMgPSBuZXcgUGF0aCh7XG4gICAgICAgICAgICBzdHJva2U6IGVsZW1lbnRPcHRpb25zLnN0cm9rZSxcbiAgICAgICAgICAgIGZpbGw6IGVsZW1lbnRPcHRpb25zLmZpbGxcbiAgICAgICAgfSkubW92ZVRvKHNoYXBlWzBdKS5saW5lVG8oc2hhcGVbMV0pLmxpbmVUbyhzaGFwZVsyXSkuY2xvc2UoKTtcblxuICAgICAgICBjb25zdCBzbG90ID0gc2NhbGUuZ2V0U2xvdChvcHRpb25zLnZhbHVlKTtcbiAgICAgICAgZWxlbWVudHMudHJhbnNmb3JtKGdlby50cmFuc2Zvcm0oKS50cmFuc2xhdGUoc2xvdC54MSwgc2xvdC55MSkpO1xuXG4gICAgICAgIHRoaXMuZWxlbWVudHMgPSBlbGVtZW50cztcblxuICAgICAgICByZXR1cm4gZWxlbWVudHM7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBBcnJvd0xpbmVhclBvaW50ZXI7IiwiaW1wb3J0IHsgZHJhd2luZyB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1kcmF3aW5nJztcbmltcG9ydCB7IGludGVycG9sYXRlVmFsdWUsIHNldERlZmF1bHRPcHRpb25zIH0gZnJvbSAnLi4vLi4vY29tbW9uJztcbmltcG9ydCB7IFgsIFkgfSBmcm9tICcuLi8uLi9jb21tb24vY29uc3RhbnRzJztcbmltcG9ydCB7IEJBUl9QT0lOVEVSLCBMSU5FQVJfU1BFRUQsIExJTkVBUiB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5cbmNsYXNzIEJhckxpbmVhclBvaW50ZXJBbmltYXRpb24gZXh0ZW5kcyBkcmF3aW5nLkFuaW1hdGlvbiB7XG5cbiAgICBzZXR1cCgpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgYXhpcyA9IHRoaXMuYXhpcyA9IG9wdGlvbnMudmVydGljYWwgPyBZIDogWDtcbiAgICAgICAgY29uc3QgdG8gPSB0aGlzLnRvID0gb3B0aW9ucy5uZXdQb2ludHNbMF1bYXhpc107XG4gICAgICAgIGNvbnN0IGZyb20gPSB0aGlzLmZyb20gPSBvcHRpb25zLm9sZFBvaW50c1swXVtheGlzXTtcblxuICAgICAgICBpZiAob3B0aW9ucy5kdXJhdGlvbiAhPT0gMCkge1xuICAgICAgICAgICAgb3B0aW9ucy5kdXJhdGlvbiA9IE1hdGgubWF4KChNYXRoLmFicyh0byAtIGZyb20pIC8gb3B0aW9ucy5zcGVlZCkgKiAxMDAwLCAxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3NldChmcm9tKTtcbiAgICB9XG5cbiAgICBzdGVwKHBvcykge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGludGVycG9sYXRlVmFsdWUodGhpcy5mcm9tLCB0aGlzLnRvLCBwb3MpO1xuICAgICAgICB0aGlzLl9zZXQodmFsdWUpO1xuICAgIH1cblxuICAgIF9zZXQodmFsdWUpIHtcbiAgICAgICAgY29uc3Qgc2V0dGVyID0gXCJzZXRcIiArIHRoaXMuYXhpcy50b1VwcGVyQ2FzZSgpO1xuICAgICAgICBjb25zdCBwb2ludHMgPSB0aGlzLm9wdGlvbnMubmV3UG9pbnRzO1xuXG4gICAgICAgIHBvaW50c1swXVtzZXR0ZXJdKHZhbHVlKTtcbiAgICAgICAgcG9pbnRzWzFdW3NldHRlcl0odmFsdWUpO1xuICAgIH1cbn1cblxuc2V0RGVmYXVsdE9wdGlvbnMoQmFyTGluZWFyUG9pbnRlckFuaW1hdGlvbiwge1xuICAgIGVhc2luZzogTElORUFSLFxuICAgIHNwZWVkOiBMSU5FQVJfU1BFRURcbn0pO1xuXG5kcmF3aW5nLkFuaW1hdGlvbkZhY3RvcnkuY3VycmVudC5yZWdpc3RlcihCQVJfUE9JTlRFUiwgQmFyTGluZWFyUG9pbnRlckFuaW1hdGlvbik7XG5cbmV4cG9ydCBkZWZhdWx0IEJhckxpbmVhclBvaW50ZXJBbmltYXRpb247IiwiaW1wb3J0IHsgZ2VvbWV0cnkgYXMgZ2VvLCBkcmF3aW5nIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWRyYXdpbmcnO1xuaW1wb3J0IHsgZGVlcEV4dGVuZCwgZGVmaW5lZCB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5pbXBvcnQgeyBYLCBZIH0gZnJvbSAnLi4vLi4vY29tbW9uL2NvbnN0YW50cyc7XG5pbXBvcnQgTGluZWFyUG9pbnRlciBmcm9tICcuL2xpbmVhci1wb2ludGVyJztcbmltcG9ydCBCYXJMaW5lYXJQb2ludGVyQW5pbWF0aW9uIGZyb20gJy4vYmFyLWxpbmVhci1wb2ludGVyLWFuaW1hdGlvbic7XG5cbmNvbnN0IHsgR3JvdXAsIFBhdGggfSA9IGRyYXdpbmc7XG5cbmNsYXNzIEJhckxpbmVhclBvaW50ZXIgZXh0ZW5kcyBMaW5lYXJQb2ludGVyIHtcbiAgICBjb25zdHJ1Y3RvcihzY2FsZSwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihzY2FsZSwgb3B0aW9ucyk7XG5cbiAgICAgICAgaWYgKCFkZWZpbmVkKHRoaXMub3B0aW9ucy5zaXplKSkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnNpemUgPSB0aGlzLnNjYWxlLm9wdGlvbnMubWFqb3JUaWNrcy5zaXplICogMC4zO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcG9pbnRlclNoYXBlKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IHsgc2NhbGUsIG9wdGlvbnMgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHsgbWlycm9yLCB2ZXJ0aWNhbCB9ID0gc2NhbGUub3B0aW9ucztcbiAgICAgICAgY29uc3QgZGlyID0gbWlycm9yID09PSB2ZXJ0aWNhbCA/IC0xIDogMTtcbiAgICAgICAgY29uc3Qgc2l6ZSA9IG9wdGlvbnMuc2l6ZSAqIGRpcjtcbiAgICAgICAgY29uc3QgbWluU2xvdCA9IHNjYWxlLmdldFNsb3Qoc2NhbGUub3B0aW9ucy5taW4pO1xuICAgICAgICBjb25zdCBzbG90ID0gc2NhbGUuZ2V0U2xvdCh2YWx1ZSk7XG4gICAgICAgIGNvbnN0IGF4aXMgPSB2ZXJ0aWNhbCA/IFkgOiBYO1xuICAgICAgICBjb25zdCBzaXplQXhpcyA9IHZlcnRpY2FsID8gWCA6IFk7XG4gICAgICAgIGNvbnN0IG1hcmdpbiA9IHRoaXMuX21hcmdpbigpICogZGlyO1xuXG4gICAgICAgIGNvbnN0IHAxID0gbmV3IGdlby5Qb2ludCgpO1xuICAgICAgICBwMVtheGlzXSA9IG1pblNsb3RbYXhpcyArIFwiMVwiXTtcbiAgICAgICAgcDFbc2l6ZUF4aXNdID0gbWluU2xvdFtzaXplQXhpcyArIFwiMVwiXTtcblxuICAgICAgICBjb25zdCBwMiA9IG5ldyBnZW8uUG9pbnQoKTtcbiAgICAgICAgcDJbYXhpc10gPSBzbG90W2F4aXMgKyBcIjFcIl07XG4gICAgICAgIHAyW3NpemVBeGlzXSA9IHNsb3Rbc2l6ZUF4aXMgKyBcIjFcIl07XG5cbiAgICAgICAgaWYgKHZlcnRpY2FsKSB7XG4gICAgICAgICAgICBwMS50cmFuc2xhdGUobWFyZ2luLCAwKTtcbiAgICAgICAgICAgIHAyLnRyYW5zbGF0ZShtYXJnaW4sIDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcDEudHJhbnNsYXRlKDAsIG1hcmdpbik7XG4gICAgICAgICAgICBwMi50cmFuc2xhdGUoMCwgbWFyZ2luKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHAzID0gcDIuY2xvbmUoKTtcbiAgICAgICAgY29uc3QgcDQgPSBwMS5jbG9uZSgpO1xuXG4gICAgICAgIGlmICh2ZXJ0aWNhbCkge1xuICAgICAgICAgICAgcDMudHJhbnNsYXRlKHNpemUsIDApO1xuICAgICAgICAgICAgcDQudHJhbnNsYXRlKHNpemUsIDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcDMudHJhbnNsYXRlKDAsIHNpemUpO1xuICAgICAgICAgICAgcDQudHJhbnNsYXRlKDAsIHNpemUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFsgcDEsIHAyLCBwMywgcDQgXTtcbiAgICB9XG5cbiAgICByZXBhaW50KCkge1xuICAgICAgICBjb25zdCB7IHNjYWxlLCBvcHRpb25zIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBzaGFwZSA9IHRoaXMucG9pbnRlclNoYXBlKG9wdGlvbnMudmFsdWUpO1xuICAgICAgICBjb25zdCBwb2ludGVyUGF0aCA9IHRoaXMucG9pbnRlclBhdGg7XG4gICAgICAgIGNvbnN0IG9sZFNoYXBlID0gdGhpcy5wb2ludGVyU2hhcGUob3B0aW9ucy5fb2xkVmFsdWUpO1xuXG4gICAgICAgIHBvaW50ZXJQYXRoLm1vdmVUbyhzaGFwZVswXSkubGluZVRvKHNoYXBlWzFdKS5saW5lVG8oc2hhcGVbMl0pLmxpbmVUbyhzaGFwZVszXSkuY2xvc2UoKTtcblxuICAgICAgICBjb25zdCBhbmltYXRpb24gPSBuZXcgQmFyTGluZWFyUG9pbnRlckFuaW1hdGlvbihwb2ludGVyUGF0aCwgZGVlcEV4dGVuZChvcHRpb25zLmFuaW1hdGlvbiwge1xuICAgICAgICAgICAgcmV2ZXJzZTogc2NhbGUub3B0aW9ucy5yZXZlcnNlLFxuICAgICAgICAgICAgdmVydGljYWw6IHNjYWxlLm9wdGlvbnMudmVydGljYWwsXG4gICAgICAgICAgICBvbGRQb2ludHM6IFsgb2xkU2hhcGVbMV0sIG9sZFNoYXBlWzJdIF0sXG4gICAgICAgICAgICBuZXdQb2ludHM6IFsgc2hhcGVbMV0sIHNoYXBlWzJdIF1cbiAgICAgICAgfSkpO1xuXG4gICAgICAgIGlmIChvcHRpb25zLmFuaW1hdGlvbi50cmFuc2l0aW9ucyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGFuaW1hdGlvbi5vcHRpb25zLmR1cmF0aW9uID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGFuaW1hdGlvbi5zZXR1cCgpO1xuICAgICAgICBhbmltYXRpb24ucGxheSgpO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgZ3JvdXAgPSBuZXcgR3JvdXAoKTtcbiAgICAgICAgY29uc3QgZWxlbWVudE9wdGlvbnMgPSB0aGlzLmdldEVsZW1lbnRPcHRpb25zKCk7XG5cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy50cmFjay52aXNpYmxlKSB7XG4gICAgICAgICAgICBncm91cC5hcHBlbmQodGhpcy5yZW5kZXJUcmFjaygpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHBvaW50ZXIgPSB0aGlzLnBvaW50ZXJQYXRoID0gbmV3IFBhdGgoe1xuICAgICAgICAgICAgc3Ryb2tlOiBlbGVtZW50T3B0aW9ucy5zdHJva2UsXG4gICAgICAgICAgICBmaWxsOiBlbGVtZW50T3B0aW9ucy5maWxsXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGdyb3VwLmFwcGVuZChwb2ludGVyKTtcblxuICAgICAgICB0aGlzLmVsZW1lbnRzID0gZ3JvdXA7XG5cbiAgICAgICAgcmV0dXJuIGdyb3VwO1xuICAgIH1cblxuICAgIHJlbmRlclRyYWNrKCkge1xuICAgICAgICBjb25zdCB0cmFja09wdGlvbnMgPSB0aGlzLm9wdGlvbnMudHJhY2s7XG4gICAgICAgIGNvbnN0IGJvcmRlciA9IHRyYWNrT3B0aW9ucy5ib3JkZXIgfHwge307XG4gICAgICAgIGNvbnN0IHRyYWNrQm94ID0gdGhpcy50cmFja0JveC5jbG9uZSgpLnBhZChib3JkZXIud2lkdGggfHwgMCk7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBQYXRoLmZyb21SZWN0KHRyYWNrQm94LnRvUmVjdCgpLCB7XG4gICAgICAgICAgICBmaWxsOiB7XG4gICAgICAgICAgICAgICAgY29sb3I6IHRyYWNrT3B0aW9ucy5jb2xvcixcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiB0cmFja09wdGlvbnMub3BhY2l0eVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0cm9rZToge1xuICAgICAgICAgICAgICAgIGNvbG9yOiBib3JkZXIud2lkdGggPyBib3JkZXIuY29sb3IgfHwgdHJhY2tPcHRpb25zLmNvbG9yIDogXCJcIixcbiAgICAgICAgICAgICAgICB3aWR0aDogYm9yZGVyLndpZHRoLFxuICAgICAgICAgICAgICAgIGRhc2hUeXBlOiBib3JkZXIuZGFzaFR5cGVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBCYXJMaW5lYXJQb2ludGVyOyIsImltcG9ydCB7IGRyYXdpbmcgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tZHJhd2luZyc7XG5pbXBvcnQgeyBCb3ggfSBmcm9tICcuLi8uLi9jb3JlJztcbmltcG9ydCB7IHNldERlZmF1bHRPcHRpb25zLCBkZWVwRXh0ZW5kLCBpc0FycmF5IH0gZnJvbSAnLi4vLi4vY29tbW9uJztcbmltcG9ydCB7IEFSUk9XLCBERUZBVUxUX1dJRFRILCBERUZBVUxUX0hFSUdIVCB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgR2F1Z2UgZnJvbSAnLi4vZ2F1Z2UnO1xuaW1wb3J0IExpbmVhclNjYWxlIGZyb20gJy4vbGluZWFyLXNjYWxlJztcbmltcG9ydCBBcnJvd0xpbmVhclBvaW50ZXIgZnJvbSAnLi9hcnJvdy1saW5lYXItcG9pbnRlcic7XG5pbXBvcnQgQmFyTGluZWFyUG9pbnRlciBmcm9tICcuL2Jhci1saW5lYXItcG9pbnRlcic7XG5cbmNvbnN0IERFRkFVTFRfTUlOX1dJRFRIID0gNjA7XG5jb25zdCBERUZBVUxUX01JTl9IRUlHSFQgPSA2MDtcblxuY29uc3QgR3JvdXAgPSBkcmF3aW5nLkdyb3VwO1xuXG5jbGFzcyBMaW5lYXJHYXVnZSBleHRlbmRzIEdhdWdlIHtcblxuICAgIHJlZmxvdyhiYm94KSB7XG4gICAgICAgIGNvbnN0IHBvaW50ZXJzID0gdGhpcy5wb2ludGVycztcbiAgICAgICAgY29uc3QgYmJveFggPSBiYm94Lm9yaWdpbi54O1xuICAgICAgICBjb25zdCBiYm94WSA9IGJib3gub3JpZ2luLnk7XG5cbiAgICAgICAgY29uc3QgYm94ID0gbmV3IEJveChiYm94WCwgYmJveFksIGJib3hYICsgYmJveC53aWR0aCgpLCBiYm94WSArIGJib3guaGVpZ2h0KCkpO1xuXG4gICAgICAgIHRoaXMuc2NhbGUucmVmbG93KGJveCk7XG4gICAgICAgIHRoaXMuX3Nocmlua1NjYWxlV2lkdGgoYm94KTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBwb2ludGVyc1tpXS5yZWZsb3coKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYmJveCA9IHRoaXMuX2dldEJveChib3gpO1xuICAgICAgICB0aGlzLl9hbGlnbkVsZW1lbnRzKCk7XG4gICAgICAgIHRoaXMuX3Nocmlua0VsZW1lbnRzKCk7XG4gICAgICAgIHRoaXMuX2J1aWxkVmlzdWFsKCk7XG4gICAgICAgIHRoaXMuX2RyYXcoKTtcbiAgICB9XG5cbiAgICBfYnVpbGRWaXN1YWwoKSB7XG4gICAgICAgIGNvbnN0IHZpc3VhbHMgPSBuZXcgR3JvdXAoKTtcbiAgICAgICAgY29uc3Qgc2NhbGVFbGVtZW50cyA9IHRoaXMuc2NhbGUucmVuZGVyKCk7XG4gICAgICAgIGNvbnN0IHBvaW50ZXJzID0gdGhpcy5wb2ludGVycztcblxuICAgICAgICB2aXN1YWxzLmFwcGVuZCh0aGlzLmdhdWdlQXJlYSk7XG4gICAgICAgIHZpc3VhbHMuYXBwZW5kKHNjYWxlRWxlbWVudHMpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnQgPSBwb2ludGVyc1tpXTtcbiAgICAgICAgICAgIHZpc3VhbHMuYXBwZW5kKGN1cnJlbnQucmVuZGVyKCkpO1xuICAgICAgICAgICAgY3VycmVudC52YWx1ZShjdXJyZW50Lm9wdGlvbnMudmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fdmlzdWFscyA9IHZpc3VhbHM7XG4gICAgfVxuXG4gICAgX2NyZWF0ZU1vZGVsKCkge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBzY2FsZSA9IHRoaXMuc2NhbGUgPSBuZXcgTGluZWFyU2NhbGUob3B0aW9ucy5zY2FsZSwgdGhpcy5jb250ZXh0U2VydmljZSk7XG5cbiAgICAgICAgdGhpcy5wb2ludGVycyA9IFtdO1xuXG4gICAgICAgIGxldCBwb2ludGVycyA9IG9wdGlvbnMucG9pbnRlcjtcbiAgICAgICAgcG9pbnRlcnMgPSBpc0FycmF5KHBvaW50ZXJzKSA/IHBvaW50ZXJzIDogWyBwb2ludGVycyBdO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRPcHRpb25zID0gZGVlcEV4dGVuZCh7fSwgcG9pbnRlcnNbaV0sIHtcbiAgICAgICAgICAgICAgICBhbmltYXRpb246IHtcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbnM6IG9wdGlvbnMudHJhbnNpdGlvbnNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGNvbnN0IHBvaW50ZXJUeXBlID0gY3VycmVudE9wdGlvbnMuc2hhcGUgPT09IEFSUk9XID8gQXJyb3dMaW5lYXJQb2ludGVyIDogQmFyTGluZWFyUG9pbnRlcjtcblxuICAgICAgICAgICAgdGhpcy5wb2ludGVycy5wdXNoKG5ldyBwb2ludGVyVHlwZShzY2FsZSwgY3VycmVudE9wdGlvbnMpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9kZWZhdWx0U2l6ZSgpIHtcbiAgICAgICAgY29uc3QgdmVydGljYWwgPSB0aGlzLm9wdGlvbnMuc2NhbGUudmVydGljYWw7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHdpZHRoOiB2ZXJ0aWNhbCA/IERFRkFVTFRfTUlOX1dJRFRIIDogREVGQVVMVF9XSURUSCxcbiAgICAgICAgICAgIGhlaWdodDogdmVydGljYWwgPyBERUZBVUxUX0hFSUdIVCA6IERFRkFVTFRfTUlOX0hFSUdIVFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIF9nZXRCb3goYm94KSB7XG4gICAgICAgIGNvbnN0IHsgc2NhbGUsIHBvaW50ZXJzIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBib3hDZW50ZXIgPSBib3guY2VudGVyKCk7XG4gICAgICAgIGxldCBwbG90QXJlYUJveCA9IHBvaW50ZXJzWzBdLmJveC5jbG9uZSgpLndyYXAoc2NhbGUuYm94KTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBwbG90QXJlYUJveC53cmFwKHBvaW50ZXJzW2ldLmJveC5jbG9uZSgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBzaXplO1xuICAgICAgICBpZiAoc2NhbGUub3B0aW9ucy52ZXJ0aWNhbCkge1xuICAgICAgICAgICAgc2l6ZSA9IHBsb3RBcmVhQm94LndpZHRoKCkgLyAyO1xuICAgICAgICAgICAgcGxvdEFyZWFCb3ggPSBuZXcgQm94KFxuICAgICAgICAgICAgICAgIGJveENlbnRlci54IC0gc2l6ZSwgYm94LnkxLFxuICAgICAgICAgICAgICAgIGJveENlbnRlci54ICsgc2l6ZSwgYm94LnkyXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2l6ZSA9IHBsb3RBcmVhQm94LmhlaWdodCgpIC8gMjtcbiAgICAgICAgICAgIHBsb3RBcmVhQm94ID0gbmV3IEJveChcbiAgICAgICAgICAgICAgICBib3gueDEsIGJveENlbnRlci55IC0gc2l6ZSxcbiAgICAgICAgICAgICAgICBib3gueDIsIGJveENlbnRlci55ICsgc2l6ZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwbG90QXJlYUJveDtcbiAgICB9XG5cbiAgICBfYWxpZ25FbGVtZW50cygpIHtcbiAgICAgICAgY29uc3QgeyBzY2FsZSwgcG9pbnRlcnMgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IHNjYWxlQm94ID0gc2NhbGUuYm94O1xuICAgICAgICBjb25zdCBib3ggPSBwb2ludGVyc1swXS5ib3guY2xvbmUoKS53cmFwKHNjYWxlLmJveCk7XG4gICAgICAgIGNvbnN0IHBsb3RBcmVhQm94ID0gdGhpcy5iYm94O1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGJveC53cmFwKHBvaW50ZXJzW2ldLmJveC5jbG9uZSgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBkaWZmO1xuICAgICAgICBpZiAoc2NhbGUub3B0aW9ucy52ZXJ0aWNhbCkge1xuICAgICAgICAgICAgZGlmZiA9IHBsb3RBcmVhQm94LmNlbnRlcigpLnggLSBib3guY2VudGVyKCkueDtcbiAgICAgICAgICAgIHNjYWxlLnJlZmxvdyhuZXcgQm94KFxuICAgICAgICAgICAgICAgIHNjYWxlQm94LngxICsgZGlmZiwgcGxvdEFyZWFCb3gueTEsXG4gICAgICAgICAgICAgICAgc2NhbGVCb3gueDIgKyBkaWZmLCBwbG90QXJlYUJveC55MlxuICAgICAgICAgICAgKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkaWZmID0gcGxvdEFyZWFCb3guY2VudGVyKCkueSAtIGJveC5jZW50ZXIoKS55O1xuICAgICAgICAgICAgc2NhbGUucmVmbG93KG5ldyBCb3goXG4gICAgICAgICAgICAgICAgc2NhbGVCb3gueDEsIHNjYWxlQm94LnkxICsgZGlmZixcbiAgICAgICAgICAgICAgICBzY2FsZUJveC54Miwgc2NhbGVCb3gueTIgKyBkaWZmXG4gICAgICAgICAgICApKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHBvaW50ZXJzW2ldLnJlZmxvdyh0aGlzLmJib3gpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3Nocmlua1NjYWxlV2lkdGgoYmJveCkge1xuICAgICAgICBjb25zdCB7IHNjYWxlIH0gPSB0aGlzO1xuICAgICAgICBpZiAoIXNjYWxlLm9wdGlvbnMudmVydGljYWwpIHtcbiAgICAgICAgICAgIGNvbnN0IG92ZXJmbG93ID0gc2NhbGUuY29udGVudEJveCgpLndpZHRoKCkgLSBiYm94LndpZHRoKCk7XG4gICAgICAgICAgICBpZiAob3ZlcmZsb3cgPiAwKSB7XG4gICAgICAgICAgICAgICAgc2NhbGUuYm94LnNocmluayhvdmVyZmxvdywgMCk7XG4gICAgICAgICAgICAgICAgc2NhbGUuYm94LmFsaWduVG8oYmJveCwgJ2NlbnRlcicpO1xuICAgICAgICAgICAgICAgIHNjYWxlLnJlZmxvdyhzY2FsZS5ib3gpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3Nocmlua0VsZW1lbnRzKCkge1xuICAgICAgICBjb25zdCB7IHNjYWxlLCBwb2ludGVycyB9ID0gdGhpcztcbiAgICAgICAgY29uc3Qgc2NhbGVCb3ggPSBzY2FsZS5ib3guY2xvbmUoKTtcbiAgICAgICAgY29uc3QgcG9zID0gc2NhbGUub3B0aW9ucy52ZXJ0aWNhbCA/IFwieVwiIDogXCJ4XCI7XG4gICAgICAgIGNvbnN0IHBvaW50ZXJCb3ggPSBwb2ludGVyc1swXS5ib3g7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2ludGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcG9pbnRlckJveC53cmFwKHBvaW50ZXJzW2ldLmJveC5jbG9uZSgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNjYWxlQm94W3BvcyArIDFdICs9IE1hdGgubWF4KHNjYWxlQm94W3BvcyArIDFdIC0gcG9pbnRlckJveFtwb3MgKyAxXSwgMCk7XG4gICAgICAgIHNjYWxlQm94W3BvcyArIDJdIC09IE1hdGgubWF4KHBvaW50ZXJCb3hbcG9zICsgMl0gLSBzY2FsZUJveFtwb3MgKyAyXSwgMCk7XG5cbiAgICAgICAgc2NhbGUucmVmbG93KHNjYWxlQm94KTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBwb2ludGVyc1tpXS5yZWZsb3codGhpcy5iYm94KTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuc2V0RGVmYXVsdE9wdGlvbnMoTGluZWFyR2F1Z2UsIHtcbiAgICB0cmFuc2l0aW9uczogdHJ1ZSxcbiAgICBnYXVnZUFyZWE6IHtcbiAgICAgICAgYmFja2dyb3VuZDogXCJcIlxuICAgIH0sXG4gICAgc2NhbGU6IHtcbiAgICAgICAgdmVydGljYWw6IHRydWVcbiAgICB9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgTGluZWFyR2F1Z2U7IiwiaW1wb3J0IHsgZ2VvbWV0cnkgYXMgZ2VvLCBkcmF3aW5nIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWRyYXdpbmcnO1xuaW1wb3J0IHsgc2V0RGVmYXVsdE9wdGlvbnMsIGRlZXBFeHRlbmQsIGRlZmluZWQsIHJvdW5kLCBnZXRTcGFjaW5nIH0gZnJvbSAnLi4vLi4vY29tbW9uJztcbmltcG9ydCB7IEJMQUNLLCBDT09SRF9QUkVDSVNJT04gfSBmcm9tICcuLi8uLi9jb21tb24vY29uc3RhbnRzJztcbmltcG9ydCB7IGF1dG9NYWpvclVuaXQsIEJveCwgTnVtZXJpY0F4aXMgfSBmcm9tICcuLi8uLi9jb3JlJztcbmltcG9ydCB7IGJ1aWxkTGFiZWxFbGVtZW50LCBnZXRSYW5nZSB9IGZyb20gJy4uL3V0aWxzJztcblxuaW1wb3J0IHsgREVHUkVFLCBERUZBVUxUX0xJTkVfV0lEVEgsIElOU0lERSwgT1VUU0lERSB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5cbmNvbnN0IEdFT19BUkNfQURKVVNUX0FOR0xFID0gMTgwO1xuXG5jb25zdCB7IEFyYywgUGF0aCwgR3JvdXAgfSA9IGRyYXdpbmc7XG5cbmZ1bmN0aW9uIGRyYXdUaWNrcyhhcmMsIHRpY2tBbmdsZXMsIHVuaXQsIHRpY2tPcHRpb25zKSB7XG4gICAgY29uc3QgdGlja3MgPSBuZXcgR3JvdXAoKTtcbiAgICBjb25zdCBjZW50ZXIgPSBhcmMuY2VudGVyO1xuICAgIGNvbnN0IHJhZGl1cyA9IGFyYy5nZXRSYWRpdXNYKCk7XG5cbiAgICBpZiAodGlja09wdGlvbnMudmlzaWJsZSkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRpY2tBbmdsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHRpY2tTdGFydCA9IGFyYy5wb2ludEF0KHRpY2tBbmdsZXNbaV0pO1xuICAgICAgICAgICAgY29uc3QgdGlja0VuZCA9IG5ldyBnZW8uUG9pbnQoY2VudGVyLnggKyByYWRpdXMgLSB0aWNrT3B0aW9ucy5zaXplLCBjZW50ZXIueSkucm90YXRlKHRpY2tBbmdsZXNbaV0sIGNlbnRlcik7XG5cbiAgICAgICAgICAgIHRpY2tzLmFwcGVuZChuZXcgUGF0aCh7XG4gICAgICAgICAgICAgICAgc3Ryb2tlOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiB0aWNrT3B0aW9ucy5jb2xvcixcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHRpY2tPcHRpb25zLndpZHRoXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkubW92ZVRvKHRpY2tTdGFydCkubGluZVRvKHRpY2tFbmQpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aWNrcztcbn1cblxuZnVuY3Rpb24gcmFuZ2VTZWdtZW50KGZyb20sIHRvLCBjb2xvciwgb3BhY2l0eSkge1xuICAgIHJldHVybiB7IGZyb206IGZyb20sIHRvOiB0bywgY29sb3I6IGNvbG9yLCBvcGFjaXR5OiBvcGFjaXR5IH07XG59XG5cbmNsYXNzIFJhZGlhbFNjYWxlIGV4dGVuZHMgTnVtZXJpY0F4aXMge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMsIHNlcnZpY2UpIHtcbiAgICAgICAgc3VwZXIoMCwgMSwgb3B0aW9ucywgc2VydmljZSk7XG4gICAgfVxuXG4gICAgaW5pdFVzZXJPcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3Qgc2NhbGVPcHRpb25zID0gZGVlcEV4dGVuZCh7fSwgdGhpcy5vcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgc2NhbGVPcHRpb25zLm1ham9yVW5pdCA9IHNjYWxlT3B0aW9ucy5tYWpvclVuaXQgfHwgYXV0b01ham9yVW5pdChzY2FsZU9wdGlvbnMubWluLCBzY2FsZU9wdGlvbnMubWF4KTtcbiAgICAgICAgc2NhbGVPcHRpb25zLm1pbm9yVW5pdCA9IHNjYWxlT3B0aW9ucy5taW5vclVuaXQgfHwgc2NhbGVPcHRpb25zLm1ham9yVW5pdCAvIDEwO1xuXG4gICAgICAgIHJldHVybiBzY2FsZU9wdGlvbnM7XG4gICAgfVxuXG4gICAgaW5pdEZpZWxkcygpIHtcbiAgICB9XG5cbiAgICByZW5kZXIoY2VudGVyLCByYWRpdXMpIHtcbiAgICAgICAgY29uc3QgYXJjID0gdGhpcy5yZW5kZXJBcmMoY2VudGVyLCByYWRpdXMpO1xuXG4gICAgICAgIHRoaXMuYmJveCA9IGFyYy5iYm94KCk7XG4gICAgICAgIHRoaXMubGFiZWxFbGVtZW50cyA9IHRoaXMucmVuZGVyTGFiZWxzKCk7XG4gICAgICAgIHRoaXMudGlja3MgPSB0aGlzLnJlbmRlclRpY2tzKCk7XG4gICAgICAgIHRoaXMucmFuZ2VzID0gdGhpcy5yZW5kZXJSYW5nZXMoKTtcbiAgICB9XG5cbiAgICByZWZsb3coYmJveCkge1xuICAgICAgICBjb25zdCBjZW50ZXIgPSBiYm94LmNlbnRlcigpO1xuICAgICAgICBjb25zdCByYWRpdXMgPSBNYXRoLm1pbihiYm94LmhlaWdodCgpLCBiYm94LndpZHRoKCkpIC8gMjtcblxuICAgICAgICBpZiAoZGVmaW5lZCh0aGlzLmJib3gpKSB7XG4gICAgICAgICAgICB0aGlzLmJib3ggPSB0aGlzLmFyYy5iYm94KCk7XG4gICAgICAgICAgICB0aGlzLnJhZGl1cyh0aGlzLmFyYy5nZXRSYWRpdXNYKCkpO1xuICAgICAgICAgICAgdGhpcy5yZXBvc2l0aW9uUmFuZ2VzKCk7XG4gICAgICAgICAgICB0aGlzLnJlbmRlckxhYmVscygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVuZGVyKGNlbnRlciwgcmFkaXVzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNsb3RBbmdsZSh2YWx1ZSkge1xuICAgICAgICBjb25zdCB7IG1pbiwgbWF4LCByZXZlcnNlLCBzdGFydEFuZ2xlLCBlbmRBbmdsZSB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBhbmdsZSA9IGVuZEFuZ2xlIC0gc3RhcnRBbmdsZTtcbiAgICAgICAgbGV0IHJlc3VsdDtcblxuICAgICAgICBpZiAocmV2ZXJzZSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gZW5kQW5nbGUgLSAodmFsdWUgLSBtaW4pIC8gKG1heCAtIG1pbikgKiBhbmdsZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdCA9ICgodmFsdWUgLSBtaW4pIC8gKG1heCAtIG1pbikgKiBhbmdsZSkgKyBzdGFydEFuZ2xlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdCArIEdFT19BUkNfQURKVVNUX0FOR0xFO1xuICAgIH1cblxuICAgIGhhc1JhbmdlcygpIHtcbiAgICAgICAgY29uc3QgcmFuZ2VzID0gdGhpcy5vcHRpb25zLnJhbmdlcztcblxuICAgICAgICByZXR1cm4gcmFuZ2VzICYmIHJhbmdlcy5sZW5ndGg7XG4gICAgfVxuXG4gICAgdGlja3NTaXplKCkge1xuICAgICAgICBjb25zdCB7IG1ham9yVGlja3MsIG1pbm9yVGlja3MgfSA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgbGV0IHNpemUgPSAwO1xuICAgICAgICBpZiAobWFqb3JUaWNrcy52aXNpYmxlKSB7XG4gICAgICAgICAgICBzaXplID0gbWFqb3JUaWNrcy5zaXplO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1pbm9yVGlja3MudmlzaWJsZSkge1xuICAgICAgICAgICAgc2l6ZSA9IE1hdGgubWF4KG1pbm9yVGlja3Muc2l6ZSwgc2l6ZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc2l6ZTtcbiAgICB9XG5cbiAgICByZW5kZXJMYWJlbHMoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGFyYyA9IHRoaXMuYXJjLmNsb25lKCk7XG4gICAgICAgIGxldCByYWRpdXMgPSBhcmMuZ2V0UmFkaXVzWCgpO1xuICAgICAgICBjb25zdCB0aWNrQW5nbGVzID0gdGhpcy50aWNrQW5nbGVzKGFyYywgb3B0aW9ucy5tYWpvclVuaXQpO1xuICAgICAgICBjb25zdCByYW5nZVNpemUgPSBvcHRpb25zLnJhbmdlU2l6ZSA9IG9wdGlvbnMucmFuZ2VTaXplIHx8IHJhZGl1cyAqIDAuMTtcbiAgICAgICAgY29uc3QgbGFiZWxzR3JvdXAgPSBuZXcgR3JvdXAoKTtcblxuICAgICAgICBsZXQgcmFuZ2VEaXN0YW5jZSA9IHJhZGl1cyAqIDAuMDU7XG4gICAgICAgIGlmIChkZWZpbmVkKG9wdGlvbnMucmFuZ2VEaXN0YW5jZSkpIHtcbiAgICAgICAgICAgIHJhbmdlRGlzdGFuY2UgPSBvcHRpb25zLnJhbmdlRGlzdGFuY2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvcHRpb25zLnJhbmdlRGlzdGFuY2UgPSByYW5nZURpc3RhbmNlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbGFiZWxzT3B0aW9ucyA9IG9wdGlvbnMubGFiZWxzO1xuICAgICAgICBjb25zdCBpc0luc2lkZSA9IGxhYmVsc09wdGlvbnMucG9zaXRpb24gPT09IElOU0lERTtcbiAgICAgICAgY29uc3QgaGFzTGFiZWxFbGVtZW50cyA9IGRlZmluZWQodGhpcy5sYWJlbEVsZW1lbnRzKTtcblxuICAgICAgICBpZiAoaXNJbnNpZGUpIHtcbiAgICAgICAgICAgIHJhZGl1cyAtPSB0aGlzLnRpY2tzU2l6ZSgpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5oYXNSYW5nZXMoKSAmJiAhaGFzTGFiZWxFbGVtZW50cykge1xuICAgICAgICAgICAgICAgIHJhZGl1cyAtPSByYW5nZVNpemUgKyByYW5nZURpc3RhbmNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYXJjLnNldFJhZGl1c1gocmFkaXVzKS5zZXRSYWRpdXNZKHJhZGl1cyk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBsYWJlbHMgPSB0aGlzLmxhYmVscztcbiAgICAgICAgY29uc3QgY291bnQgPSBsYWJlbHMubGVuZ3RoO1xuICAgICAgICBjb25zdCBwYWRkaW5nID0gZ2V0U3BhY2luZyhsYWJlbHNPcHRpb25zLnBhZGRpbmcpO1xuICAgICAgICBjb25zdCBwYWRkaW5nV2lkdGggPSAocGFkZGluZy5sZWZ0ICsgcGFkZGluZy5yaWdodCkgLyAyO1xuICAgICAgICBjb25zdCBwYWRkaW5nSGVpZ2h0ID0gKHBhZGRpbmcudG9wICsgcGFkZGluZy5ib3R0b20pIC8gMjtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGxhYmVsID0gbGFiZWxzW2ldO1xuICAgICAgICAgICAgY29uc3QgaGFsZldpZHRoID0gbGFiZWwuYm94LndpZHRoKCkgLyAyO1xuICAgICAgICAgICAgY29uc3QgaGFsZkhlaWdodCA9IGxhYmVsLmJveC5oZWlnaHQoKSAvIDI7XG4gICAgICAgICAgICBjb25zdCBhbmdsZSA9IHRpY2tBbmdsZXNbaV07XG4gICAgICAgICAgICBjb25zdCBsYWJlbEFuZ2xlID0gKGFuZ2xlIC0gR0VPX0FSQ19BREpVU1RfQU5HTEUpICogREVHUkVFO1xuXG4gICAgICAgICAgICBjb25zdCBscCA9IGFyYy5wb2ludEF0KGFuZ2xlKTtcbiAgICAgICAgICAgIGNvbnN0IGN4ID0gbHAueCArIChNYXRoLmNvcyhsYWJlbEFuZ2xlKSAqIChoYWxmV2lkdGggKyBwYWRkaW5nV2lkdGgpICogKGlzSW5zaWRlID8gMSA6IC0xKSk7XG4gICAgICAgICAgICBjb25zdCBjeSA9IGxwLnkgKyAoTWF0aC5zaW4obGFiZWxBbmdsZSkgKiAoaGFsZkhlaWdodCArIHBhZGRpbmdIZWlnaHQpICogKGlzSW5zaWRlID8gMSA6IC0xKSk7XG5cbiAgICAgICAgICAgIGxhYmVsLnJlZmxvdyhuZXcgQm94KGN4IC0gaGFsZldpZHRoLCBjeSAtIGhhbGZIZWlnaHQsIGN4ICsgaGFsZldpZHRoLCBjeSArIGhhbGZIZWlnaHQpKTtcbiAgICAgICAgICAgIGNvbnN0IGxhYmVsUG9zID0gbmV3IGdlby5Qb2ludChsYWJlbC5ib3gueDEsIGxhYmVsLmJveC55MSk7XG5cbiAgICAgICAgICAgIGxldCBsYWJlbEVsZW1lbnQ7XG4gICAgICAgICAgICBpZiAoIWhhc0xhYmVsRWxlbWVudHMpIHtcbiAgICAgICAgICAgICAgICBsYWJlbEVsZW1lbnQgPSBidWlsZExhYmVsRWxlbWVudChsYWJlbCwgb3B0aW9ucy5sYWJlbHMpO1xuICAgICAgICAgICAgICAgIGxhYmVsc0dyb3VwLmFwcGVuZChsYWJlbEVsZW1lbnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBsYWJlbEVsZW1lbnQgPSB0aGlzLmxhYmVsRWxlbWVudHMuY2hpbGRyZW5baV07XG4gICAgICAgICAgICAgICAgY29uc3QgcHJldkxhYmVsUG9zID0gbGFiZWxFbGVtZW50LmJib3goKS5vcmlnaW47XG5cbiAgICAgICAgICAgICAgICBjb25zdCBsYWJlbFRyYW5zZm9ybSA9IGxhYmVsRWxlbWVudC50cmFuc2Zvcm0oKSB8fCBnZW8udHJhbnNmb3JtKCk7XG4gICAgICAgICAgICAgICAgbGFiZWxUcmFuc2Zvcm0udHJhbnNsYXRlKGxhYmVsUG9zLnggLSBwcmV2TGFiZWxQb3MueCwgbGFiZWxQb3MueSAtIHByZXZMYWJlbFBvcy55KTtcbiAgICAgICAgICAgICAgICBsYWJlbEVsZW1lbnQudHJhbnNmb3JtKGxhYmVsVHJhbnNmb3JtKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5iYm94ID0gZ2VvLlJlY3QudW5pb24odGhpcy5iYm94LCBsYWJlbEVsZW1lbnQuYmJveCgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBsYWJlbHNHcm91cDtcbiAgICB9XG5cbiAgICByZXBvc2l0aW9uUmFuZ2VzKCkge1xuICAgICAgICBjb25zdCByYW5nZXMgPSB0aGlzLnJhbmdlcy5jaGlsZHJlbjtcblxuICAgICAgICBpZiAocmFuZ2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHsgcmFuZ2VEaXN0YW5jZSwgcmFuZ2VTaXplIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgICAgICBsZXQgcmFuZ2VSYWRpdXMgPSB0aGlzLmdldFJhbmdlUmFkaXVzKCk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMubGFiZWxzLnBvc2l0aW9uID09PSBJTlNJREUpIHtcbiAgICAgICAgICAgICAgICByYW5nZVJhZGl1cyArPSByYW5nZVNpemUgKyByYW5nZURpc3RhbmNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBuZXdSYWRpdXMgPSByYW5nZVJhZGl1cyArIChyYW5nZVNpemUgLyAyKTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByYW5nZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICByYW5nZXNbaV0uX2dlb21ldHJ5LnNldFJhZGl1c1gobmV3UmFkaXVzKS5zZXRSYWRpdXNZKG5ld1JhZGl1cyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuYmJveCA9IGdlby5SZWN0LnVuaW9uKHRoaXMuYmJveCwgdGhpcy5yYW5nZXMuYmJveCgpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlclJhbmdlcygpIHtcbiAgICAgICAgY29uc3Qgc2VnbWVudHMgPSB0aGlzLnJhbmdlU2VnbWVudHMoKTtcbiAgICAgICAgY29uc3Qgc2VnbWVudHNDb3VudCA9IHNlZ21lbnRzLmxlbmd0aDtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IEdyb3VwKCk7XG5cbiAgICAgICAgaWYgKHNlZ21lbnRzQ291bnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgcmFuZ2VTaXplLCByZXZlcnNlLCByYW5nZURpc3RhbmNlIH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgICAgICBjb25zdCByYW5nZVJhZGl1cyA9IHRoaXMuZ2V0UmFuZ2VSYWRpdXMoKTtcblxuICAgICAgICAgICAgLy8gbW92ZSB0aGUgdGlja3Mgd2l0aCBhIHJhbmdlIGRpc3RhbmNlIGFuZCBhIHJhbmdlIHNpemVcbiAgICAgICAgICAgIHRoaXMucmFkaXVzKHRoaXMucmFkaXVzKCkgLSByYW5nZVNpemUgLSByYW5nZURpc3RhbmNlKTtcblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWdtZW50c0NvdW50OyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzZWdtZW50ID0gc2VnbWVudHNbaV07XG4gICAgICAgICAgICAgICAgY29uc3QgZnJvbSA9IHRoaXMuc2xvdEFuZ2xlKHNlZ21lbnRbcmV2ZXJzZSA/IFwidG9cIiA6IFwiZnJvbVwiXSk7XG4gICAgICAgICAgICAgICAgY29uc3QgdG8gPSB0aGlzLnNsb3RBbmdsZShzZWdtZW50WyFyZXZlcnNlID8gXCJ0b1wiIDogXCJmcm9tXCJdKTtcblxuICAgICAgICAgICAgICAgIGlmICh0byAtIGZyb20gIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0LmFwcGVuZCh0aGlzLmNyZWF0ZVJhbmdlKGZyb20sIHRvLCByYW5nZVJhZGl1cywgc2VnbWVudCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgY3JlYXRlUmFuZ2Uoc3RhcnRBbmdsZSwgZW5kQW5nbGUsIHJhbmdlUmFkaXVzLCBvcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IHJhbmdlU2l6ZSA9IHRoaXMub3B0aW9ucy5yYW5nZVNpemU7XG4gICAgICAgIGNvbnN0IHJhbmdlR2VvbSA9IG5ldyBnZW8uQXJjKHRoaXMuYXJjLmNlbnRlciwge1xuICAgICAgICAgICAgcmFkaXVzWDogcmFuZ2VSYWRpdXMgKyAocmFuZ2VTaXplIC8gMiksXG4gICAgICAgICAgICByYWRpdXNZOiByYW5nZVJhZGl1cyArIChyYW5nZVNpemUgLyAyKSxcbiAgICAgICAgICAgIHN0YXJ0QW5nbGU6IHN0YXJ0QW5nbGUsXG4gICAgICAgICAgICBlbmRBbmdsZTogZW5kQW5nbGVcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBBcmMocmFuZ2VHZW9tLCB7XG4gICAgICAgICAgICBzdHJva2U6IHtcbiAgICAgICAgICAgICAgICB3aWR0aDogcmFuZ2VTaXplLFxuICAgICAgICAgICAgICAgIGNvbG9yOiBvcHRpb25zLmNvbG9yLFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IG9wdGlvbnMub3BhY2l0eSxcbiAgICAgICAgICAgICAgICBsaW5lQ2FwOiBvcHRpb25zLmxpbmVDYXBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmFuZ2VTZWdtZW50cygpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgcmFuZ2VzID0gb3B0aW9ucy5yYW5nZXMgfHwgW107XG4gICAgICAgIGNvbnN0IGNvdW50ID0gcmFuZ2VzLmxlbmd0aDtcbiAgICAgICAgY29uc3Qgc2VnbWVudHMgPSBbXTtcblxuICAgICAgICBpZiAoY291bnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgbWluLCBtYXgsIHJhbmdlUGxhY2Vob2xkZXJDb2xvcjogZGVmYXVsdENvbG9yIH0gPSBvcHRpb25zO1xuICAgICAgICAgICAgc2VnbWVudHMucHVzaChyYW5nZVNlZ21lbnQobWluLCBtYXgsIGRlZmF1bHRDb2xvcikpO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCByYW5nZSA9IGdldFJhbmdlKHJhbmdlc1tpXSwgbWluLCBtYXgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlZ21lbnRzQ291bnQgPSBzZWdtZW50cy5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHNlZ21lbnRzQ291bnQ7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzZWdtZW50ID0gc2VnbWVudHNbal07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlZ21lbnQuZnJvbSA8PSByYW5nZS5mcm9tICYmIHJhbmdlLmZyb20gPD0gc2VnbWVudC50bykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VnbWVudHMucHVzaChyYW5nZVNlZ21lbnQocmFuZ2UuZnJvbSwgcmFuZ2UudG8sIHJhbmdlLmNvbG9yLCByYW5nZS5vcGFjaXR5KSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWdtZW50LmZyb20gPD0gcmFuZ2UudG8gJiYgcmFuZ2UudG8gPD0gc2VnbWVudC50bykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlZ21lbnRzLnB1c2gocmFuZ2VTZWdtZW50KHJhbmdlLnRvLCBzZWdtZW50LnRvLCBkZWZhdWx0Q29sb3IsIHJhbmdlLm9wYWNpdHkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgc2VnbWVudC50byA9IHJhbmdlLmZyb207XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHNlZ21lbnRzO1xuICAgIH1cblxuICAgIGdldFJhbmdlUmFkaXVzKCkge1xuICAgICAgICBjb25zdCB7IGFyYywgb3B0aW9ucyB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgeyByYW5nZVNpemUsIHJhbmdlRGlzdGFuY2UsIG1ham9yVGlja3M6IHsgc2l6ZTogbWFqb3JUaWNrU2l6ZSB9IH0gPSBvcHRpb25zO1xuICAgICAgICBsZXQgcmFkaXVzO1xuXG4gICAgICAgIGlmIChvcHRpb25zLmxhYmVscy5wb3NpdGlvbiA9PT0gT1VUU0lERSkge1xuICAgICAgICAgICAgcmFkaXVzID0gYXJjLmdldFJhZGl1c1goKSAtIG1ham9yVGlja1NpemUgLSByYW5nZURpc3RhbmNlIC0gcmFuZ2VTaXplO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmFkaXVzID0gYXJjLmdldFJhZGl1c1goKSAtIHJhbmdlU2l6ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByYWRpdXM7XG4gICAgfVxuXG4gICAgcmVuZGVyQXJjKGNlbnRlciwgcmFkaXVzKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAgICAgY29uc3QgYXJjID0gdGhpcy5hcmMgPSBuZXcgZ2VvLkFyYyhjZW50ZXIsIHtcbiAgICAgICAgICAgIHJhZGl1c1g6IHJhZGl1cyxcbiAgICAgICAgICAgIHJhZGl1c1k6IHJhZGl1cyxcbiAgICAgICAgICAgIHN0YXJ0QW5nbGU6IG9wdGlvbnMuc3RhcnRBbmdsZSArIEdFT19BUkNfQURKVVNUX0FOR0xFLFxuICAgICAgICAgICAgZW5kQW5nbGU6IG9wdGlvbnMuZW5kQW5nbGUgKyBHRU9fQVJDX0FESlVTVF9BTkdMRVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gYXJjO1xuICAgIH1cblxuICAgIHJlbmRlclRpY2tzKCkge1xuICAgICAgICBjb25zdCB7IGFyYywgb3B0aW9ucyB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgdGlja0FyYyA9IGFyYy5jbG9uZSgpO1xuXG4gICAgICAgIHRoaXMubWFqb3JUaWNrQW5nbGVzID0gdGhpcy50aWNrQW5nbGVzKGFyYywgb3B0aW9ucy5tYWpvclVuaXQpO1xuICAgICAgICB0aGlzLm1ham9yVGlja3MgPSBkcmF3VGlja3ModGlja0FyYywgdGhpcy5tYWpvclRpY2tBbmdsZXMsIG9wdGlvbnMubWFqb3JVbml0LCBvcHRpb25zLm1ham9yVGlja3MpO1xuXG4gICAgICAgIGNvbnN0IGFsbFRpY2tzID0gbmV3IEdyb3VwKCk7XG4gICAgICAgIGFsbFRpY2tzLmFwcGVuZCh0aGlzLm1ham9yVGlja3MpO1xuXG4gICAgICAgIGNvbnN0IG1ham9yVGlja1NpemUgPSBvcHRpb25zLm1ham9yVGlja3Muc2l6ZTtcbiAgICAgICAgY29uc3QgbWlub3JUaWNrU2l6ZSA9IG9wdGlvbnMubWlub3JUaWNrcy5zaXplO1xuXG4gICAgICAgIHRoaXMuX3RpY2tEaWZmZXJlbmNlID0gbWFqb3JUaWNrU2l6ZSAtIG1pbm9yVGlja1NpemU7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMubGFiZWxzLnBvc2l0aW9uID09PSBPVVRTSURFKSB7XG4gICAgICAgICAgICBjb25zdCByYWRpdXMgPSB0aWNrQXJjLmdldFJhZGl1c1goKTtcbiAgICAgICAgICAgIHRpY2tBcmMuc2V0UmFkaXVzWChyYWRpdXMgLSBtYWpvclRpY2tTaXplICsgbWlub3JUaWNrU2l6ZSlcbiAgICAgICAgICAgICAgICAgICAuc2V0UmFkaXVzWShyYWRpdXMgLSBtYWpvclRpY2tTaXplICsgbWlub3JUaWNrU2l6ZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm1pbm9yVGlja0FuZ2xlcyA9IHRoaXMubm9ybWFsaXplVGlja0FuZ2xlcyh0aGlzLnRpY2tBbmdsZXMoYXJjLCBvcHRpb25zLm1pbm9yVW5pdCkpO1xuICAgICAgICB0aGlzLm1pbm9yVGlja3MgPSBkcmF3VGlja3ModGlja0FyYywgdGhpcy5taW5vclRpY2tBbmdsZXMsIG9wdGlvbnMubWlub3JVbml0LCBvcHRpb25zLm1pbm9yVGlja3MpO1xuICAgICAgICBhbGxUaWNrcy5hcHBlbmQodGhpcy5taW5vclRpY2tzKTtcblxuICAgICAgICByZXR1cm4gYWxsVGlja3M7XG4gICAgfVxuXG4gICAgbm9ybWFsaXplVGlja0FuZ2xlcyhhbmdsZXMpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3Qgc2tpcCA9IG9wdGlvbnMubWFqb3JVbml0IC8gb3B0aW9ucy5taW5vclVuaXQ7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IGFuZ2xlcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgaWYgKGkgJSBza2lwID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYW5nbGVzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhbmdsZXM7XG4gICAgfVxuXG4gICAgdGlja0FuZ2xlcyhyaW5nLCBzdGVwVmFsdWUpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgcmV2ZXJzZSA9IG9wdGlvbnMucmV2ZXJzZTtcbiAgICAgICAgY29uc3QgcmFuZ2UgPSBvcHRpb25zLm1heCAtIG9wdGlvbnMubWluO1xuICAgICAgICBjb25zdCBhbmdsZSA9IHJpbmcuZW5kQW5nbGUgLSByaW5nLnN0YXJ0QW5nbGU7XG4gICAgICAgIGNvbnN0IHRpY2tDb3VudCA9IHJhbmdlIC8gc3RlcFZhbHVlO1xuICAgICAgICBsZXQgcG9zID0gcmluZy5zdGFydEFuZ2xlO1xuICAgICAgICBsZXQgc3RlcCA9IGFuZ2xlIC8gdGlja0NvdW50O1xuXG4gICAgICAgIGlmIChyZXZlcnNlKSB7XG4gICAgICAgICAgICBwb3MgKz0gYW5nbGU7XG4gICAgICAgICAgICBzdGVwID0gLXN0ZXA7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwb3NpdGlvbnMgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aWNrQ291bnQ7IGkrKykge1xuICAgICAgICAgICAgcG9zaXRpb25zLnB1c2gocm91bmQocG9zLCBDT09SRF9QUkVDSVNJT04pKTtcbiAgICAgICAgICAgIHBvcyArPSBzdGVwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJvdW5kKHBvcykgPD0gcmluZy5lbmRBbmdsZSkge1xuICAgICAgICAgICAgcG9zaXRpb25zLnB1c2gocG9zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwb3NpdGlvbnM7XG4gICAgfVxuXG4gICAgcmFkaXVzKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5hcmMuc2V0UmFkaXVzWCh2YWx1ZSkuc2V0UmFkaXVzWSh2YWx1ZSk7XG4gICAgICAgICAgICB0aGlzLnJlcG9zaXRpb25UaWNrcyh0aGlzLm1ham9yVGlja3MuY2hpbGRyZW4sIHRoaXMubWFqb3JUaWNrQW5nbGVzKTtcbiAgICAgICAgICAgIHRoaXMucmVwb3NpdGlvblRpY2tzKHRoaXMubWlub3JUaWNrcy5jaGlsZHJlbiwgdGhpcy5taW5vclRpY2tBbmdsZXMsIHRydWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXJjLmdldFJhZGl1c1goKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlcG9zaXRpb25UaWNrcyh0aWNrcywgdGlja0FuZ2xlcywgbWlub3IpIHtcbiAgICAgICAgY29uc3QgZGlmZiA9IG1pbm9yID8gKHRoaXMuX3RpY2tEaWZmZXJlbmNlIHx8IDApIDogMDtcbiAgICAgICAgbGV0IHRpY2tBcmMgPSB0aGlzLmFyYztcbiAgICAgICAgY29uc3QgcmFkaXVzID0gdGlja0FyYy5nZXRSYWRpdXNYKCk7XG5cbiAgICAgICAgaWYgKG1pbm9yICYmIHRoaXMub3B0aW9ucy5sYWJlbHMucG9zaXRpb24gPT09IE9VVFNJREUgJiYgZGlmZiAhPT0gMCkge1xuICAgICAgICAgICAgdGlja0FyYyA9IHRoaXMuYXJjLmNsb25lKCk7XG4gICAgICAgICAgICB0aWNrQXJjLnNldFJhZGl1c1gocmFkaXVzIC0gZGlmZikuc2V0UmFkaXVzWShyYWRpdXMgLSBkaWZmKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGlja3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld1BvaW50ID0gdGlja0FyYy5wb2ludEF0KHRpY2tBbmdsZXNbaV0pO1xuICAgICAgICAgICAgY29uc3Qgc2VnbWVudHMgPSB0aWNrc1tpXS5zZWdtZW50cztcbiAgICAgICAgICAgIGNvbnN0IHhEaWZmID0gbmV3UG9pbnQueCAtIHNlZ21lbnRzWzBdLmFuY2hvcigpLng7XG4gICAgICAgICAgICBjb25zdCB5RGlmZiA9IG5ld1BvaW50LnkgLSBzZWdtZW50c1swXS5hbmNob3IoKS55O1xuXG4gICAgICAgICAgICB0aWNrc1tpXS50cmFuc2Zvcm0obmV3IGdlby50cmFuc2Zvcm0oKS50cmFuc2xhdGUoeERpZmYsIHlEaWZmKSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbnNldERlZmF1bHRPcHRpb25zKFJhZGlhbFNjYWxlLCB7XG4gICAgbWluOiAwLFxuICAgIG1heDogMTAwLFxuXG4gICAgbWFqb3JUaWNrczoge1xuICAgICAgICBzaXplOiAxNSxcbiAgICAgICAgYWxpZ246IElOU0lERSxcbiAgICAgICAgY29sb3I6IEJMQUNLLFxuICAgICAgICB3aWR0aDogREVGQVVMVF9MSU5FX1dJRFRILFxuICAgICAgICB2aXNpYmxlOiB0cnVlXG4gICAgfSxcblxuICAgIG1pbm9yVGlja3M6IHtcbiAgICAgICAgc2l6ZTogMTAsXG4gICAgICAgIGFsaWduOiBJTlNJREUsXG4gICAgICAgIGNvbG9yOiBCTEFDSyxcbiAgICAgICAgd2lkdGg6IERFRkFVTFRfTElORV9XSURUSCxcbiAgICAgICAgdmlzaWJsZTogdHJ1ZVxuICAgIH0sXG5cbiAgICBzdGFydEFuZ2xlOiAtMzAsXG4gICAgZW5kQW5nbGU6IDIxMCxcblxuICAgIGxhYmVsczoge1xuICAgICAgICBwb3NpdGlvbjogSU5TSURFLFxuICAgICAgICBwYWRkaW5nOiAyXG4gICAgfVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IFJhZGlhbFNjYWxlOyIsImltcG9ydCB7IGdlb21ldHJ5LCBkcmF3aW5nIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWRyYXdpbmcnO1xuaW1wb3J0IHsgaW50ZXJwb2xhdGVWYWx1ZSwgc2V0RGVmYXVsdE9wdGlvbnMgfSBmcm9tICcuLi8uLi9jb21tb24nO1xuaW1wb3J0IHsgQU5HVUxBUl9TUEVFRCwgTElORUFSLCBSQURJQUxfUE9JTlRFUiB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5cbmNsYXNzIFJhZGlhbFBvaW50ZXJBbmltYXRpb24gZXh0ZW5kcyBkcmF3aW5nLkFuaW1hdGlvbiB7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudCwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihlbGVtZW50LCBvcHRpb25zKTtcblxuICAgICAgICBjb25zdCBhbmltYXRpb25PcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG4gICAgICAgIGFuaW1hdGlvbk9wdGlvbnMuZHVyYXRpb24gPSBNYXRoLm1heCgoTWF0aC5hYnMoYW5pbWF0aW9uT3B0aW9ucy5uZXdBbmdsZSAtIGFuaW1hdGlvbk9wdGlvbnMub2xkQW5nbGUpIC8gYW5pbWF0aW9uT3B0aW9ucy5kdXJhdGlvbikgKiAxMDAwLCAxKTtcbiAgICB9XG5cbiAgICBzdGVwKHBvcykge1xuICAgICAgICBjb25zdCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBhbmdsZSA9IGludGVycG9sYXRlVmFsdWUob3B0aW9ucy5vbGRBbmdsZSwgb3B0aW9ucy5uZXdBbmdsZSwgcG9zKTtcblxuICAgICAgICB0aGlzLmVsZW1lbnQudHJhbnNmb3JtKGdlb21ldHJ5LnRyYW5zZm9ybSgpLnJvdGF0ZShhbmdsZSwgb3B0aW9ucy5jZW50ZXIpKTtcbiAgICB9XG59XG5cbnNldERlZmF1bHRPcHRpb25zKFJhZGlhbFBvaW50ZXJBbmltYXRpb24sIHtcbiAgICBlYXNpbmc6IExJTkVBUixcbiAgICBkdXJhdGlvbjogQU5HVUxBUl9TUEVFRFxufSk7XG5cbmRyYXdpbmcuQW5pbWF0aW9uRmFjdG9yeS5jdXJyZW50LnJlZ2lzdGVyKFJBRElBTF9QT0lOVEVSLCBSYWRpYWxQb2ludGVyQW5pbWF0aW9uKTtcblxuZXhwb3J0IGRlZmF1bHQgUmFkaWFsUG9pbnRlckFuaW1hdGlvbjsiLCJpbXBvcnQgeyBnZW9tZXRyeSBhcyBnZW8sIGRyYXdpbmcgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tZHJhd2luZyc7XG5cbmltcG9ydCB7IHNldERlZmF1bHRPcHRpb25zLCBkZWVwRXh0ZW5kLCBsaW1pdFZhbHVlIH0gZnJvbSAnLi4vLi4vY29tbW9uJztcbmltcG9ydCB7IEFOR1VMQVJfU1BFRUQsIERFR1JFRSwgREVGQVVMVF9MSU5FX1dJRFRILCBSQURJQUxfUE9JTlRFUiB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgUG9pbnRlciBmcm9tICcuLi9wb2ludGVyJztcbmltcG9ydCBSYWRpYWxQb2ludGVyQW5pbWF0aW9uIGZyb20gJy4vcmFkaWFsLXBvaW50ZXItYW5pbWF0aW9uJztcblxuY29uc3QgQ0FQX1NJWkUgPSAwLjA1O1xuY29uc3QgeyBDaXJjbGUsIEdyb3VwLCBQYXRoIH0gPSBkcmF3aW5nO1xuXG5jbGFzcyBSYWRpYWxQb2ludGVyIGV4dGVuZHMgUG9pbnRlciB7XG5cbiAgICBzZXRBbmdsZShhbmdsZSkge1xuICAgICAgICB0aGlzLmVsZW1lbnRzLnRyYW5zZm9ybShnZW8udHJhbnNmb3JtKCkucm90YXRlKGFuZ2xlLCB0aGlzLmNlbnRlcikpO1xuICAgIH1cblxuICAgIHJlcGFpbnQoKSB7XG4gICAgICAgIGNvbnN0IHsgc2NhbGUsIG9wdGlvbnMgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IG9sZEFuZ2xlID0gc2NhbGUuc2xvdEFuZ2xlKG9wdGlvbnMuX29sZFZhbHVlKTtcbiAgICAgICAgY29uc3QgbmV3QW5nbGUgPSBzY2FsZS5zbG90QW5nbGUob3B0aW9ucy52YWx1ZSk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuYW5pbWF0aW9uLnRyYW5zaXRpb25zID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdGhpcy5zZXRBbmdsZShuZXdBbmdsZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXcgUmFkaWFsUG9pbnRlckFuaW1hdGlvbih0aGlzLmVsZW1lbnRzLCBkZWVwRXh0ZW5kKG9wdGlvbnMuYW5pbWF0aW9uLCB7XG4gICAgICAgICAgICAgICAgb2xkQW5nbGU6IG9sZEFuZ2xlLFxuICAgICAgICAgICAgICAgIG5ld0FuZ2xlOiBuZXdBbmdsZVxuICAgICAgICAgICAgfSkpLnBsYXkoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgY29uc3QgeyBzY2FsZSwgb3B0aW9ucyB9ID0gdGhpcztcbiAgICAgICAgY29uc3QgZWxlbWVudHMgPSBuZXcgR3JvdXAoKTtcblxuICAgICAgICBpZiAob3B0aW9ucy5hbmltYXRpb24gIT09IGZhbHNlKSB7XG4gICAgICAgICAgICBkZWVwRXh0ZW5kKG9wdGlvbnMuYW5pbWF0aW9uLCB7XG4gICAgICAgICAgICAgICAgc3RhcnRBbmdsZTogMCxcbiAgICAgICAgICAgICAgICBjZW50ZXI6IHNjYWxlLmFyYy5jZW50ZXIsXG4gICAgICAgICAgICAgICAgcmV2ZXJzZTogc2NhbGUub3B0aW9ucy5yZXZlcnNlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsZW1lbnRzLmFwcGVuZCh0aGlzLl9yZW5kZXJOZWVkbGUoKSwgdGhpcy5fcmVuZGVyQ2FwKCkpO1xuXG4gICAgICAgIHRoaXMuZWxlbWVudHMgPSBlbGVtZW50cztcbiAgICAgICAgdGhpcy5zZXRBbmdsZShERUdSRUUpO1xuXG4gICAgICAgIHJldHVybiBlbGVtZW50cztcbiAgICB9XG5cbiAgICByZWZsb3coYXJjKSB7XG4gICAgICAgIGNvbnN0IGNlbnRlciA9IHRoaXMuY2VudGVyID0gYXJjLmNlbnRlcjtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gbGltaXRWYWx1ZSh0aGlzLm9wdGlvbnMubGVuZ3RoIHx8IDEsIDAuMSwgMS41KTtcbiAgICAgICAgY29uc3QgcmFkaXVzID0gdGhpcy5yYWRpdXMgPSBhcmMuZ2V0UmFkaXVzWCgpICogbGVuZ3RoO1xuICAgICAgICBjb25zdCBjYXBTaXplID0gdGhpcy5jYXBTaXplID0gTWF0aC5yb3VuZChyYWRpdXMgKiB0aGlzLm9wdGlvbnMuY2FwLnNpemUpO1xuXG4gICAgICAgIHRoaXMuYmJveCA9IGdlby5SZWN0LmZyb21Qb2ludHMobmV3IGdlby5Qb2ludChjZW50ZXIueCAtIGNhcFNpemUsIGNlbnRlci55IC0gY2FwU2l6ZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgZ2VvLlBvaW50KGNlbnRlci54ICsgY2FwU2l6ZSwgY2VudGVyLnkgKyBjYXBTaXplKSk7XG4gICAgfVxuXG4gICAgX3JlbmRlck5lZWRsZSgpIHtcbiAgICAgICAgY29uc3QgbWlub3JUaWNrU2l6ZSA9IHRoaXMuc2NhbGUub3B0aW9ucy5taW5vclRpY2tzLnNpemU7XG4gICAgICAgIGNvbnN0IGNlbnRlciA9IHRoaXMuY2VudGVyO1xuICAgICAgICBjb25zdCBuZWVkbGVDb2xvciA9IHRoaXMub3B0aW9ucy5jb2xvcjtcblxuICAgICAgICBjb25zdCBuZWVkbGVQYXRoID0gbmV3IFBhdGgoe1xuICAgICAgICAgICAgZmlsbDogeyBjb2xvcjogbmVlZGxlQ29sb3IgfSxcbiAgICAgICAgICAgIHN0cm9rZTogeyBjb2xvcjogbmVlZGxlQ29sb3IsIHdpZHRoOiBERUZBVUxUX0xJTkVfV0lEVEggfVxuICAgICAgICB9KTtcblxuICAgICAgICBuZWVkbGVQYXRoLm1vdmVUbyhjZW50ZXIueCArIHRoaXMucmFkaXVzIC0gbWlub3JUaWNrU2l6ZSwgY2VudGVyLnkpXG4gICAgICAgICAgICAgICAgICAubGluZVRvKGNlbnRlci54LCBjZW50ZXIueSAtICh0aGlzLmNhcFNpemUgLyAyKSlcbiAgICAgICAgICAgICAgICAgIC5saW5lVG8oY2VudGVyLngsIGNlbnRlci55ICsgKHRoaXMuY2FwU2l6ZSAvIDIpKVxuICAgICAgICAgICAgICAgICAgLmNsb3NlKCk7XG5cbiAgICAgICAgcmV0dXJuIG5lZWRsZVBhdGg7XG4gICAgfVxuXG4gICAgX3JlbmRlckNhcCgpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgY29uc3QgY2FwQ29sb3IgPSBvcHRpb25zLmNhcC5jb2xvciB8fCBvcHRpb25zLmNvbG9yO1xuICAgICAgICBjb25zdCBjaXJjbGUgPSBuZXcgZ2VvLkNpcmNsZSh0aGlzLmNlbnRlciwgdGhpcy5jYXBTaXplKTtcblxuICAgICAgICBjb25zdCBjYXAgPSBuZXcgQ2lyY2xlKGNpcmNsZSwge1xuICAgICAgICAgICAgZmlsbDogeyBjb2xvcjogY2FwQ29sb3IgfSxcbiAgICAgICAgICAgIHN0cm9rZTogeyBjb2xvcjogY2FwQ29sb3IgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gY2FwO1xuICAgIH1cbn1cblxuc2V0RGVmYXVsdE9wdGlvbnMoUmFkaWFsUG9pbnRlciwge1xuICAgIGNhcDoge1xuICAgICAgICBzaXplOiBDQVBfU0laRVxuICAgIH0sXG4gICAgYXJyb3c6IHtcbiAgICAgICAgd2lkdGg6IDE2LFxuICAgICAgICBoZWlnaHQ6IDE0XG4gICAgfSxcbiAgICBhbmltYXRpb246IHtcbiAgICAgICAgdHlwZTogUkFESUFMX1BPSU5URVIsXG4gICAgICAgIGR1cmF0aW9uOiBBTkdVTEFSX1NQRUVEXG4gICAgfVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IFJhZGlhbFBvaW50ZXI7XG4iLCJpbXBvcnQgeyBnZW9tZXRyeSBhcyBnZW8sIGRyYXdpbmcgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tZHJhd2luZyc7XG5pbXBvcnQgeyBzZXREZWZhdWx0T3B0aW9ucywgZGVlcEV4dGVuZCwgcm91bmQsIGlzQXJyYXkgfSBmcm9tICcuLi8uLi9jb21tb24nO1xuaW1wb3J0IHsgQ09PUkRfUFJFQ0lTSU9OIH0gZnJvbSAnLi4vLi4vY29tbW9uL2NvbnN0YW50cyc7XG5pbXBvcnQgR2F1Z2UgZnJvbSAnLi4vZ2F1Z2UnO1xuaW1wb3J0IFJhZGlhbFNjYWxlIGZyb20gJy4vcmFkaWFsLXNjYWxlJztcbmltcG9ydCBSYWRpYWxQb2ludGVyIGZyb20gJy4vcmFkaWFsLXBvaW50ZXInO1xuXG5jb25zdCBHcm91cCA9IGRyYXdpbmcuR3JvdXA7XG5cbmNsYXNzIFJhZGlhbEdhdWdlIGV4dGVuZHMgR2F1Z2Uge1xuXG4gICAgcmVmbG93KGJib3gpIHtcbiAgICAgICAgY29uc3QgcG9pbnRlcnMgPSB0aGlzLnBvaW50ZXJzO1xuICAgICAgICB0aGlzLnNjYWxlLnJlZmxvdyhiYm94KTtcbiAgICAgICAgdGhpcy5faW5pdGlhbFBsb3RBcmVhID0gdGhpcy5zY2FsZS5iYm94O1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHBvaW50ZXJzW2ldLnJlZmxvdyh0aGlzLnNjYWxlLmFyYyk7XG4gICAgICAgICAgICB0aGlzLl9pbml0aWFsUGxvdEFyZWEgPSBnZW8uUmVjdC51bmlvbih0aGlzLl9pbml0aWFsUGxvdEFyZWEsIHBvaW50ZXJzW2ldLmJib3gpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5maXRTY2FsZShiYm94KTtcbiAgICAgICAgdGhpcy5hbGlnblNjYWxlKGJib3gpO1xuICAgICAgICB0aGlzLl9idWlsZFZpc3VhbCh0aGlzLmdhdWdlQXJlYSwgcG9pbnRlcnMsIHRoaXMuc2NhbGUpO1xuICAgICAgICB0aGlzLl9kcmF3KCk7XG4gICAgfVxuXG4gICAgX2J1aWxkVmlzdWFsKGdhdWdlQXJlYSwgcG9pbnRlcnMsIHNjYWxlKSB7XG4gICAgICAgIGNvbnN0IHZpc3VhbHMgPSB0aGlzLl92aXN1YWxzID0gbmV3IEdyb3VwKCk7XG5cbiAgICAgICAgdmlzdWFscy5hcHBlbmQoZ2F1Z2VBcmVhKTtcbiAgICAgICAgdmlzdWFscy5hcHBlbmQoc2NhbGUudGlja3MpO1xuICAgICAgICB2aXN1YWxzLmFwcGVuZChzY2FsZS5yYW5nZXMpO1xuICAgICAgICB0aGlzLl9idWlsZFBvaW50ZXJzKHBvaW50ZXJzKTtcbiAgICAgICAgdmlzdWFscy5hcHBlbmQoc2NhbGUubGFiZWxFbGVtZW50cyk7XG4gICAgfVxuXG4gICAgX2J1aWxkUG9pbnRlcnMocG9pbnRlcnMpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2ludGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudCA9IHBvaW50ZXJzW2ldO1xuICAgICAgICAgICAgY3VycmVudC5yZW5kZXIoKTtcbiAgICAgICAgICAgIHRoaXMuX3Zpc3VhbHMuYXBwZW5kKGN1cnJlbnQuZWxlbWVudHMpO1xuXG4gICAgICAgICAgICBjdXJyZW50LnZhbHVlKGN1cnJlbnQub3B0aW9ucy52YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmaXRTY2FsZShiYm94KSB7XG4gICAgICAgIGNvbnN0IGFyYyA9IHRoaXMuc2NhbGUuYXJjO1xuICAgICAgICBjb25zdCBwbG90QXJlYUJveCA9IHRoaXMuX2luaXRpYWxQbG90QXJlYTtcbiAgICAgICAgY29uc3Qgc3RlcCA9IE1hdGguYWJzKHRoaXMuZ2V0RGlmZihwbG90QXJlYUJveCwgYmJveCkpO1xuICAgICAgICBsZXQgbWluID0gcm91bmQoc3RlcCwgQ09PUkRfUFJFQ0lTSU9OKTtcbiAgICAgICAgbGV0IG1heCA9IHJvdW5kKC1zdGVwLCBDT09SRF9QUkVDSVNJT04pO1xuICAgICAgICBsZXQgbWluRGlmZiwgbWlkRGlmZiwgbWF4RGlmZiwgbWlkLCBvbGREaWZmO1xuICAgICAgICBsZXQgc3RhbGVGbGFnID0gMDtcbiAgICAgICAgbGV0IGkgPSAwO1xuXG4gICAgICAgIHdoaWxlIChpKysgPCAxMDApIHtcbiAgICAgICAgICAgIHN0YWxlRmxhZyA9IChvbGREaWZmID09PSBtYXhEaWZmKSA/IChzdGFsZUZsYWcgKyAxKSA6IDA7XG5cbiAgICAgICAgICAgIGlmIChzdGFsZUZsYWcgPiA1KSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChtaW4gIT09IG1pZCkge1xuICAgICAgICAgICAgICAgIG1pbkRpZmYgPSB0aGlzLmdldFBsb3RCb3gobWluLCBiYm94LCBhcmMpO1xuICAgICAgICAgICAgICAgIGlmICgwIDw9IG1pbkRpZmYgJiYgbWluRGlmZiA8PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG1heCAhPT0gbWlkKSB7XG4gICAgICAgICAgICAgICAgbWF4RGlmZiA9IHRoaXMuZ2V0UGxvdEJveChtYXgsIGJib3gsIGFyYyk7XG4gICAgICAgICAgICAgICAgaWYgKDAgPD0gbWF4RGlmZiAmJiBtYXhEaWZmIDw9IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobWluRGlmZiA+IDAgJiYgbWF4RGlmZiA+IDApIHtcbiAgICAgICAgICAgICAgICBtaWQgPSBtaW4gKiAyO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtaW5EaWZmIDwgMCAmJiBtYXhEaWZmIDwgMCkge1xuICAgICAgICAgICAgICAgIG1pZCA9IG1heCAqIDI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1pZCA9IHJvdW5kKCgobWluICsgbWF4KSAvIDIpIHx8IDEsIENPT1JEX1BSRUNJU0lPTik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG1pZERpZmYgPSB0aGlzLmdldFBsb3RCb3gobWlkLCBiYm94LCBhcmMpO1xuICAgICAgICAgICAgaWYgKDAgPD0gbWlkRGlmZiAmJiBtaWREaWZmIDw9IDIpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb2xkRGlmZiA9IG1heERpZmY7XG5cbiAgICAgICAgICAgIGlmIChtaWREaWZmID4gMCkge1xuICAgICAgICAgICAgICAgIG1heCA9IG1pZDtcbiAgICAgICAgICAgICAgICBtYXhEaWZmID0gbWlkRGlmZjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbWluID0gbWlkO1xuICAgICAgICAgICAgICAgIG1pbkRpZmYgPSBtaWREaWZmO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0UGxvdEJveChzdGVwLCBiYm94LCBhcmMpIHtcbiAgICAgICAgY29uc3Qgc2NhbGUgPSB0aGlzLnNjYWxlO1xuICAgICAgICBjb25zdCBwb2ludGVycyA9IHRoaXMucG9pbnRlcnM7XG4gICAgICAgIGNvbnN0IHJhZGl1cyA9IGFyYy5nZXRSYWRpdXNYKCk7XG4gICAgICAgIGNvbnN0IHNjYWxlQXJjID0gYXJjLmNsb25lKCk7XG5cbiAgICAgICAgc2NhbGVBcmMuc2V0UmFkaXVzWChyYWRpdXMgKyBzdGVwKS5zZXRSYWRpdXNZKHJhZGl1cyArIHN0ZXApO1xuXG4gICAgICAgIHNjYWxlLmFyYyA9IHNjYWxlQXJjO1xuICAgICAgICBzY2FsZS5yZWZsb3coYmJveCk7XG4gICAgICAgIHRoaXMucGxvdEJib3ggPSBzY2FsZS5iYm94O1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHBvaW50ZXJzW2ldLnJlZmxvdyhzY2FsZUFyYyk7XG4gICAgICAgICAgICB0aGlzLnBsb3RCYm94ID0gZ2VvLlJlY3QudW5pb24odGhpcy5wbG90QmJveCwgcG9pbnRlcnNbaV0uYmJveCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5nZXREaWZmKHRoaXMucGxvdEJib3gsIGJib3gpO1xuICAgIH1cblxuICAgIGdldERpZmYocGxvdEJveCwgYm94KSB7XG4gICAgICAgIHJldHVybiBNYXRoLm1pbihib3gud2lkdGgoKSAtIHBsb3RCb3gud2lkdGgoKSwgYm94LmhlaWdodCgpIC0gcGxvdEJveC5oZWlnaHQoKSk7XG4gICAgfVxuXG4gICAgYWxpZ25TY2FsZShiYm94KSB7XG4gICAgICAgIGNvbnN0IHBsb3RCb3hDZW50ZXIgPSB0aGlzLnBsb3RCYm94LmNlbnRlcigpO1xuICAgICAgICBjb25zdCBib3hDZW50ZXIgPSBiYm94LmNlbnRlcigpO1xuICAgICAgICBjb25zdCBwYWRkaW5nWCA9IHBsb3RCb3hDZW50ZXIueCAtIGJveENlbnRlci54O1xuICAgICAgICBjb25zdCBwYWRkaW5nWSA9IHBsb3RCb3hDZW50ZXIueSAtIGJveENlbnRlci55O1xuICAgICAgICBjb25zdCB7IHNjYWxlLCBwb2ludGVycyB9ID0gdGhpcztcblxuICAgICAgICBzY2FsZS5hcmMuY2VudGVyLnggLT0gcGFkZGluZ1g7XG4gICAgICAgIHNjYWxlLmFyYy5jZW50ZXIueSAtPSBwYWRkaW5nWTtcblxuICAgICAgICBzY2FsZS5yZWZsb3coYmJveCk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2ludGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcG9pbnRlcnNbaV0ucmVmbG93KHNjYWxlLmFyYyk7XG4gICAgICAgICAgICB0aGlzLnBsb3RCYm94ID0gZ2VvLlJlY3QudW5pb24oc2NhbGUuYmJveCwgcG9pbnRlcnNbaV0uYmJveCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfY3JlYXRlTW9kZWwoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHBvaW50ZXJzID0gb3B0aW9ucy5wb2ludGVyO1xuICAgICAgICBjb25zdCBzY2FsZSA9IHRoaXMuc2NhbGUgPSBuZXcgUmFkaWFsU2NhbGUob3B0aW9ucy5zY2FsZSwgdGhpcy5jb250ZXh0U2VydmljZSk7XG5cbiAgICAgICAgdGhpcy5wb2ludGVycyA9IFtdO1xuXG4gICAgICAgIGNvbnN0IHBvaW50ZXJzQXJyID0gaXNBcnJheShwb2ludGVycykgPyBwb2ludGVycyA6IFsgcG9pbnRlcnMgXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2ludGVyc0Fyci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudCA9IG5ldyBSYWRpYWxQb2ludGVyKHNjYWxlLCBkZWVwRXh0ZW5kKHt9LCBwb2ludGVyc0FycltpXSwge1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvbjoge1xuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uczogb3B0aW9ucy50cmFuc2l0aW9uc1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgdGhpcy5wb2ludGVycy5wdXNoKGN1cnJlbnQpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5zZXREZWZhdWx0T3B0aW9ucyhSYWRpYWxHYXVnZSwge1xuICAgIHRyYW5zaXRpb25zOiB0cnVlLFxuICAgIGdhdWdlQXJlYToge1xuICAgICAgICBiYWNrZ3JvdW5kOiBcIlwiXG4gICAgfVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IFJhZGlhbEdhdWdlOyIsImltcG9ydCBSYWRpYWxTY2FsZSBmcm9tICcuLi9yYWRpYWwvcmFkaWFsLXNjYWxlJztcbmltcG9ydCB7IHNldERlZmF1bHRPcHRpb25zIH0gZnJvbSAnLi4vLi4vY29tbW9uJztcblxuY2xhc3MgQXJjU2NhbGUgZXh0ZW5kcyBSYWRpYWxTY2FsZSB7XG5cbiAgICByYW5nZVNlZ21lbnRzKCkge1xuICAgICAgICBjb25zdCB7IG1pbiwgbWF4LCByYW5nZVBsYWNlaG9sZGVyQ29sb3IsIHJhbmdlTGluZUNhcCB9ID0gdGhpcy5vcHRpb25zO1xuXG4gICAgICAgIHJldHVybiBbIHsgZnJvbTogbWluLCB0bzogbWF4LCBjb2xvcjogcmFuZ2VQbGFjZWhvbGRlckNvbG9yLCBsaW5lQ2FwOiByYW5nZUxpbmVDYXAgfSBdO1xuICAgIH1cblxuICAgIGhhc1JhbmdlcygpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcGxhY2Vob2xkZXJSYW5nZUFuZ2xlKGFuZ2xlKSB7XG4gICAgICAgIGNvbnN0IGdlb21ldHJ5ID0gdGhpcy5yYW5nZXMuY2hpbGRyZW5bMF0uZ2VvbWV0cnkoKTtcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJldmVyc2UpIHtcbiAgICAgICAgICAgIGdlb21ldHJ5LnNldEVuZEFuZ2xlKGFuZ2xlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdlb21ldHJ5LnNldFN0YXJ0QW5nbGUoYW5nbGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgYWRkUmFuZ2UoZnJvbSwgdG8sIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgcmV2ZXJzZSA9IHRoaXMub3B0aW9ucy5yZXZlcnNlO1xuXG4gICAgICAgIGNvbnN0IHN0YXJ0QW5nbGUgPSB0aGlzLnNsb3RBbmdsZShyZXZlcnNlID8gdG8gOiBmcm9tKTtcbiAgICAgICAgY29uc3QgZW5kQW5nbGUgPSB0aGlzLnNsb3RBbmdsZShyZXZlcnNlID8gZnJvbSA6IHRvKTtcblxuICAgICAgICBjb25zdCByYW5nZSA9IHRoaXMuY3JlYXRlUmFuZ2Uoc3RhcnRBbmdsZSwgZW5kQW5nbGUsIHRoaXMuZ2V0UmFuZ2VSYWRpdXMoKSwgb3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5yYW5nZXMuYXBwZW5kKHJhbmdlKTtcblxuICAgICAgICByZXR1cm4gcmFuZ2U7XG4gICAgfVxufVxuXG5zZXREZWZhdWx0T3B0aW9ucyhBcmNTY2FsZSwge1xuICAgIG1pbjogMCxcbiAgICBtYXg6IDEwMCxcblxuICAgIG1ham9yVGlja3M6IHtcbiAgICAgICAgdmlzaWJsZTogZmFsc2VcbiAgICB9LFxuXG4gICAgbWlub3JUaWNrczoge1xuICAgICAgICB2aXNpYmxlOiBmYWxzZVxuICAgIH0sXG5cbiAgICBsYWJlbHM6IHtcbiAgICAgICAgdmlzaWJsZTogZmFsc2VcbiAgICB9LFxuXG4gICAgc3RhcnRBbmdsZTogMCxcbiAgICBlbmRBbmdsZTogMTgwLFxuICAgIHJhbmdlTGluZUNhcDogJ3JvdW5kJ1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IEFyY1NjYWxlOyIsImltcG9ydCB7IGRyYXdpbmcsIENvbG9yIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWRyYXdpbmcnO1xuaW1wb3J0IHsgaW50ZXJwb2xhdGVWYWx1ZSwgc2V0RGVmYXVsdE9wdGlvbnMsIHJvdW5kLCBsaW1pdFZhbHVlIH0gZnJvbSAnLi4vLi4vY29tbW9uJztcbmltcG9ydCB7IEFOR1VMQVJfU1BFRUQsIExJTkVBUiwgUkFESUFMX1JBTkdFX1BPSU5URVIgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuXG5jb25zdCBNQVhfRFVSQVRJT04gPSA4MDA7XG5cbmNsYXNzIFJhbmdlUG9pbnRlckFuaW1hdGlvbiBleHRlbmRzIGRyYXdpbmcuQW5pbWF0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKGVsZW1lbnQsIG9wdGlvbnMpO1xuXG4gICAgICAgIGNvbnN0IGFuaW1hdGlvbk9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGR1cmF0aW9uID0gKE1hdGguYWJzKGFuaW1hdGlvbk9wdGlvbnMubmV3QW5nbGUgLSBhbmltYXRpb25PcHRpb25zLm9sZEFuZ2xlKSAvIGFuaW1hdGlvbk9wdGlvbnMuZHVyYXRpb24pICogMTAwMDtcbiAgICAgICAgYW5pbWF0aW9uT3B0aW9ucy5kdXJhdGlvbiA9IGxpbWl0VmFsdWUoZHVyYXRpb24sIEFOR1VMQVJfU1BFRUQsIE1BWF9EVVJBVElPTik7XG5cbiAgICAgICAgY29uc3Qgc3RhcnRDb2xvciA9IGVsZW1lbnQuZWxlbWVudHMub3B0aW9ucy5nZXQoXCJzdHJva2UuY29sb3JcIik7XG4gICAgICAgIGNvbnN0IGNvbG9yID0gZWxlbWVudC5jdXJyZW50Q29sb3IoKTtcbiAgICAgICAgaWYgKHN0YXJ0Q29sb3IgIT09IGNvbG9yKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0Q29sb3IgPSBuZXcgQ29sb3Ioc3RhcnRDb2xvcik7XG4gICAgICAgICAgICB0aGlzLmNvbG9yID0gbmV3IENvbG9yKGNvbG9yKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0ZXAocG9zKSB7XG4gICAgICAgIGNvbnN0IHsgb3B0aW9ucywgc3RhcnRDb2xvciwgY29sb3IgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGFuZ2xlID0gaW50ZXJwb2xhdGVWYWx1ZShvcHRpb25zLm9sZEFuZ2xlLCBvcHRpb25zLm5ld0FuZ2xlLCBwb3MpO1xuICAgICAgICB0aGlzLmVsZW1lbnQuYW5nbGUoYW5nbGUpO1xuXG4gICAgICAgIGlmIChjb2xvcikge1xuICAgICAgICAgICAgY29uc3QgciA9IHJvdW5kKGludGVycG9sYXRlVmFsdWUoc3RhcnRDb2xvci5yLCBjb2xvci5yLCBwb3MpKTtcbiAgICAgICAgICAgIGNvbnN0IGcgPSByb3VuZChpbnRlcnBvbGF0ZVZhbHVlKHN0YXJ0Q29sb3IuZywgY29sb3IuZywgcG9zKSk7XG4gICAgICAgICAgICBjb25zdCBiID0gcm91bmQoaW50ZXJwb2xhdGVWYWx1ZShzdGFydENvbG9yLmIsIGNvbG9yLmIsIHBvcykpO1xuXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuc3Ryb2tlKG5ldyBDb2xvcihyLCBnLCBiKS50b0hleCgpKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuc2V0RGVmYXVsdE9wdGlvbnMoUmFuZ2VQb2ludGVyQW5pbWF0aW9uLCB7XG4gICAgZWFzaW5nOiBMSU5FQVIsXG4gICAgZHVyYXRpb246IEFOR1VMQVJfU1BFRURcbn0pO1xuXG5kcmF3aW5nLkFuaW1hdGlvbkZhY3RvcnkuY3VycmVudC5yZWdpc3RlcihSQURJQUxfUkFOR0VfUE9JTlRFUiwgUmFuZ2VQb2ludGVyQW5pbWF0aW9uKTtcblxuZXhwb3J0IGRlZmF1bHQgUmFuZ2VQb2ludGVyQW5pbWF0aW9uOyIsImltcG9ydCB7IHNldERlZmF1bHRPcHRpb25zLCBkZWVwRXh0ZW5kLCBpc051bWJlciB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5pbXBvcnQgeyBBTkdVTEFSX1NQRUVELCBSQURJQUxfUkFOR0VfUE9JTlRFUiB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgUG9pbnRlciBmcm9tICcuLi9wb2ludGVyJztcbmltcG9ydCBSYW5nZVBvaW50ZXJBbmltYXRpb24gZnJvbSAnLi9yYW5nZS1wb2ludGVyLWFuaW1hdGlvbic7XG5cbmNsYXNzIFJhbmdlUG9pbnRlciBleHRlbmRzIFBvaW50ZXIge1xuXG4gICAgcmVwYWludCgpIHtcbiAgICAgICAgY29uc3QgeyBzY2FsZSwgb3B0aW9ucyB9ID0gdGhpcztcbiAgICAgICAgY29uc3Qgb2xkQW5nbGUgPSBzY2FsZS5zbG90QW5nbGUob3B0aW9ucy5fb2xkVmFsdWUpO1xuICAgICAgICBjb25zdCBuZXdBbmdsZSA9IHNjYWxlLnNsb3RBbmdsZShvcHRpb25zLnZhbHVlKTtcblxuICAgICAgICBpZiAodGhpcy5hbmltYXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uLmFib3J0KCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5hbmltYXRpb24udHJhbnNpdGlvbnMgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB0aGlzLmFuZ2xlKG5ld0FuZ2xlKTtcbiAgICAgICAgICAgIHRoaXMuc3Ryb2tlKHRoaXMuY3VycmVudENvbG9yKCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hbmltYXRpb24gPSBuZXcgUmFuZ2VQb2ludGVyQW5pbWF0aW9uKHRoaXMsIGRlZXBFeHRlbmQob3B0aW9ucy5hbmltYXRpb24sIHtcbiAgICAgICAgICAgICAgICBvbGRBbmdsZTogb2xkQW5nbGUsXG4gICAgICAgICAgICAgICAgbmV3QW5nbGU6IG5ld0FuZ2xlXG4gICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uLnBsYXkoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFuZ2xlKHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGdlb21ldHJ5ID0gdGhpcy5lbGVtZW50cy5nZW9tZXRyeSgpO1xuICAgICAgICBpZiAodGhpcy5zY2FsZS5vcHRpb25zLnJldmVyc2UpIHtcbiAgICAgICAgICAgIGdlb21ldHJ5LnNldFN0YXJ0QW5nbGUodmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2VvbWV0cnkuc2V0RW5kQW5nbGUodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2NhbGUucGxhY2Vob2xkZXJSYW5nZUFuZ2xlKHZhbHVlKTtcbiAgICB9XG5cbiAgICBzdHJva2UodmFsdWUpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50cy5zdHJva2UodmFsdWUpO1xuICAgIH1cblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgaWYgKHRoaXMuZWxlbWVudHMpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHsgc2NhbGUsIG9wdGlvbnMgfSA9IHRoaXM7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuYW5pbWF0aW9uICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgZGVlcEV4dGVuZChvcHRpb25zLmFuaW1hdGlvbiwge1xuICAgICAgICAgICAgICAgIHN0YXJ0QW5nbGU6IDAsXG4gICAgICAgICAgICAgICAgY2VudGVyOiBzY2FsZS5hcmMuY2VudGVyLFxuICAgICAgICAgICAgICAgIHJldmVyc2U6IHNjYWxlLm9wdGlvbnMucmV2ZXJzZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmVsZW1lbnRzID0gc2NhbGUuYWRkUmFuZ2Uoc2NhbGUub3B0aW9ucy5taW4sIHRoaXMub3B0aW9ucy52YWx1ZSwge1xuICAgICAgICAgICAgY29sb3I6IHRoaXMuY3VycmVudENvbG9yKCksXG4gICAgICAgICAgICBvcGFjaXR5OiBvcHRpb25zLm9wYWNpdHksXG4gICAgICAgICAgICBsaW5lQ2FwOiBzY2FsZS5vcHRpb25zLnJhbmdlTGluZUNhcFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBjdXJyZW50Q29sb3IoKSB7XG4gICAgICAgIGNvbnN0IHsgbWluLCBtYXggfSA9IHRoaXMuc2NhbGUub3B0aW9ucztcbiAgICAgICAgY29uc3QgeyBjb2xvcnMsIGNvbG9yLCB2YWx1ZSB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBjdXJyZW50VmFsdWUgPSBpc051bWJlcih2YWx1ZSkgPyB2YWx1ZSA6IG1pbjtcblxuICAgICAgICBpZiAoY29sb3JzKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpZHggPSAwOyBpZHggPCBjb2xvcnMubGVuZ3RoOyBpZHgrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgY29sb3I6IHJhbmdlQ29sb3IsIGZyb20gPSBtaW4sIHRvID0gbWF4IH0gPSBjb2xvcnNbaWR4XTtcblxuICAgICAgICAgICAgICAgIGlmIChmcm9tIDw9IGN1cnJlbnRWYWx1ZSAmJiBjdXJyZW50VmFsdWUgPD0gdG8pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJhbmdlQ29sb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbG9yO1xuICAgIH1cblxuICAgIHJlZmxvdygpIHtcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcblxuICAgICAgICB0aGlzLmJib3ggPSB0aGlzLmVsZW1lbnRzLmJib3goKTtcbiAgICB9XG59XG5cbnNldERlZmF1bHRPcHRpb25zKFJhbmdlUG9pbnRlciwge1xuICAgIGFuaW1hdGlvbjoge1xuICAgICAgICB0eXBlOiBSQURJQUxfUkFOR0VfUE9JTlRFUixcbiAgICAgICAgZHVyYXRpb246IEFOR1VMQVJfU1BFRURcbiAgICB9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgUmFuZ2VQb2ludGVyO1xuIiwiaW1wb3J0IFJhZGlhbEdhdWdlIGZyb20gJy4uL3JhZGlhbC9yYWRpYWwtZ2F1Z2UnO1xuaW1wb3J0IEFyY1NjYWxlIGZyb20gJy4vYXJjLXNjYWxlJztcbmltcG9ydCBSYW5nZVBvaW50ZXIgZnJvbSAnLi9yYW5nZS1wb2ludGVyJztcblxuaW1wb3J0IHsgZGVlcEV4dGVuZCB9IGZyb20gJy4uLy4uL2NvbW1vbic7XG5cblxuY2xhc3MgQXJjR2F1Z2UgZXh0ZW5kcyBSYWRpYWxHYXVnZSB7XG5cbiAgICBfaW5pdFRoZW1lKHRoZW1lKSB7XG4gICAgICAgIHN1cGVyLl9pbml0VGhlbWUodGhlbWUpO1xuXG4gICAgICAgIHRoaXMub3B0aW9ucy5jb2xvciA9IHRoaXMub3B0aW9ucy5jb2xvciB8fCAodGhpcy50aGVtZS5wb2ludGVyIHx8IHt9KS5jb2xvcjtcbiAgICB9XG5cbiAgICBfY3JlYXRlTW9kZWwoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHNjYWxlID0gdGhpcy5zY2FsZSA9IG5ldyBBcmNTY2FsZShvcHRpb25zLnNjYWxlLCB0aGlzLmNvbnRleHRTZXJ2aWNlKTtcblxuICAgICAgICBjb25zdCBwb2ludGVyID0gbmV3IFJhbmdlUG9pbnRlcihzY2FsZSwgZGVlcEV4dGVuZCh7fSwge1xuICAgICAgICAgICAgY29sb3JzOiBvcHRpb25zLmNvbG9ycyxcbiAgICAgICAgICAgIGNvbG9yOiBvcHRpb25zLmNvbG9yLFxuICAgICAgICAgICAgdmFsdWU6IG9wdGlvbnMudmFsdWUsXG4gICAgICAgICAgICBvcGFjaXR5OiBvcHRpb25zLm9wYWNpdHksXG4gICAgICAgICAgICBhbmltYXRpb246IHtcbiAgICAgICAgICAgICAgICB0cmFuc2l0aW9uczogb3B0aW9ucy50cmFuc2l0aW9uc1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSk7XG5cbiAgICAgICAgdGhpcy5wb2ludGVycyA9IFsgcG9pbnRlciBdO1xuICAgIH1cblxuICAgIF9idWlsZFBvaW50ZXJzKHBvaW50ZXJzKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnQgPSBwb2ludGVyc1tpXTtcbiAgICAgICAgICAgIGN1cnJlbnQucmVuZGVyKCk7XG5cbiAgICAgICAgICAgIGN1cnJlbnQudmFsdWUoY3VycmVudC5vcHRpb25zLnZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9zZXRWYWx1ZU9wdGlvbnModmFsdWUpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuXG4gICAgY3VycmVudENvbG9yKCkge1xuICAgICAgICBjb25zdCBwb2ludGVyID0gdGhpcy5wb2ludGVyc1swXTtcbiAgICAgICAgaWYgKHBvaW50ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBwb2ludGVyLmN1cnJlbnRDb2xvcigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY2VudGVyTGFiZWxQb3NpdGlvbih3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIGNvbnN0IHNpemUgPSB0aGlzLmdldFNpemUoKTtcbiAgICAgICAgY29uc3QgY2VudGVyID0gdGhpcy5zY2FsZS5hcmMuY2VudGVyO1xuXG4gICAgICAgIGxldCBsZWZ0ID0gY2VudGVyLnggLSB3aWR0aCAvIDI7XG4gICAgICAgIGxldCB0b3AgPSBjZW50ZXIueSAtIGhlaWdodCAvIDI7XG5cbiAgICAgICAgaWYgKHdpZHRoIDwgc2l6ZS53aWR0aCkge1xuICAgICAgICAgICAgY29uc3QgcmlnaHQgPSBsZWZ0ICsgd2lkdGg7XG5cbiAgICAgICAgICAgIGxlZnQgPSBNYXRoLm1heChsZWZ0LCAwKTtcblxuICAgICAgICAgICAgaWYgKHJpZ2h0ID4gc2l6ZS53aWR0aCkge1xuICAgICAgICAgICAgICAgIGxlZnQgLT0gcmlnaHQgLSBzaXplLndpZHRoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhlaWdodCA8IHNpemUuaGVpZ2h0KSB7XG4gICAgICAgICAgICBjb25zdCBiYm94ID0gdGhpcy5zY2FsZS5iYm94O1xuICAgICAgICAgICAgY29uc3QgeUxpbWl0ID0gYmJveC5ib3R0b21SaWdodCgpLnk7XG4gICAgICAgICAgICBjb25zdCBib3R0b20gPSB0b3AgKyBoZWlnaHQ7XG5cbiAgICAgICAgICAgIHRvcCA9IE1hdGgubWF4KHRvcCwgYmJveC5vcmlnaW4ueSk7XG5cbiAgICAgICAgICAgIGlmIChib3R0b20gPiB5TGltaXQpIHtcbiAgICAgICAgICAgICAgICB0b3AgLT0gYm90dG9tIC0geUxpbWl0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxlZnQ6IGxlZnQsXG4gICAgICAgICAgICB0b3A6IHRvcFxuICAgICAgICB9O1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQXJjR2F1Z2U7IiwiY29uc3QgQkFSX0dBUCA9IDEuNTtcbmNvbnN0IEJBUl9TUEFDSU5HID0gMC40O1xuY29uc3QgQkxBQ0sgPSAnIzAwMCc7XG5jb25zdCBTQU5TID0gJ0FyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWYnO1xuY29uc3QgU0FOUzExID0gXCIxMXB4IFwiICsgU0FOUztcbmNvbnN0IFNBTlMxMiA9ICcxMnB4ICcgKyBTQU5TO1xuY29uc3QgU0FOUzE2ID0gJzE2cHggJyArIFNBTlM7XG5jb25zdCBUUkFOU1BBUkVOVCA9ICd0cmFuc3BhcmVudCc7XG5jb25zdCBXSElURSA9ICcjZmZmJztcblxuY29uc3Qgbm90ZXMgPSAoKSA9PiAoe1xuICAgIGljb246IHtcbiAgICAgICAgYm9yZGVyOiB7XG4gICAgICAgICAgICB3aWR0aDogMVxuICAgICAgICB9XG4gICAgfSxcbiAgICBsYWJlbDoge1xuICAgICAgICBmb250OiBTQU5TMTIsXG4gICAgICAgIHBhZGRpbmc6IDNcbiAgICB9LFxuICAgIGxpbmU6IHtcbiAgICAgICAgbGVuZ3RoOiAxMCxcbiAgICAgICAgd2lkdGg6IDJcbiAgICB9LFxuICAgIHZpc2libGU6IHRydWVcbn0pO1xuXG5jb25zdCBheGlzRGVmYXVsdHMgPSAoKSA9PiAoe1xuICAgIGxhYmVsczoge1xuICAgICAgICBmb250OiBTQU5TMTJcbiAgICB9LFxuICAgIG5vdGVzOiBub3RlcygpLFxuICAgIHRpdGxlOiB7XG4gICAgICAgIGZvbnQ6IFNBTlMxNixcbiAgICAgICAgbWFyZ2luOiA1XG4gICAgfVxufSk7XG5cbmNvbnN0IGFyZWFTZXJpZXMgPSAoKSA9PiAoe1xuICAgIGhpZ2hsaWdodDoge1xuICAgICAgICBtYXJrZXJzOiB7XG4gICAgICAgICAgICBib3JkZXI6IHt9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGxpbmU6IHtcbiAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgd2lkdGg6IDBcbiAgICB9LFxuICAgIG1hcmtlcnM6IHtcbiAgICAgICAgc2l6ZTogNixcbiAgICAgICAgdmlzaWJsZTogZmFsc2VcbiAgICB9LFxuICAgIG9wYWNpdHk6IDAuNFxufSk7XG5cbmNvbnN0IHJhbmdlQXJlYVNlcmllcyA9ICgpID0+ICh7XG4gICAgaGlnaGxpZ2h0OiB7XG4gICAgICAgIG1hcmtlcnM6IHtcbiAgICAgICAgICAgIGJvcmRlcjoge31cbiAgICAgICAgfVxuICAgIH0sXG4gICAgbGluZToge1xuICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICB3aWR0aDogMFxuICAgIH0sXG4gICAgbWFya2Vyczoge1xuICAgICAgICBzaXplOiA2LFxuICAgICAgICB2aXNpYmxlOiBmYWxzZVxuICAgIH0sXG4gICAgb3BhY2l0eTogMC40XG59KTtcblxuY29uc3QgYmFyU2VyaWVzID0gKCkgPT4gKHtcbiAgICBnYXA6IEJBUl9HQVAsXG4gICAgc3BhY2luZzogQkFSX1NQQUNJTkdcbn0pO1xuXG5jb25zdCBib3hQbG90U2VyaWVzID0gKCkgPT4gKHtcbiAgICBvdXRsaWVyc0ZpZWxkOiBcIlwiLFxuICAgIG1lYW5GaWVsZDogXCJcIixcbiAgICBib3JkZXI6IHtcbiAgICAgICAgX2JyaWdodG5lc3M6IDAuOCxcbiAgICAgICAgd2lkdGg6IDFcbiAgICB9LFxuICAgIGRvd25Db2xvcjogV0hJVEUsXG4gICAgZ2FwOiAxLFxuICAgIGhpZ2hsaWdodDoge1xuICAgICAgICBib3JkZXI6IHtcbiAgICAgICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgICAgICB3aWR0aDogMlxuICAgICAgICB9LFxuICAgICAgICB3aGlza2Vyczoge1xuICAgICAgICAgICAgd2lkdGg6IDNcbiAgICAgICAgfSxcbiAgICAgICAgbWVhbjoge1xuICAgICAgICAgICAgd2lkdGg6IDJcbiAgICAgICAgfSxcbiAgICAgICAgbWVkaWFuOiB7XG4gICAgICAgICAgICB3aWR0aDogMlxuICAgICAgICB9XG4gICAgfSxcbiAgICBtZWFuOiB7XG4gICAgICAgIHdpZHRoOiAyXG4gICAgfSxcbiAgICBtZWRpYW46IHtcbiAgICAgICAgd2lkdGg6IDJcbiAgICB9LFxuICAgIHNwYWNpbmc6IDAuMyxcbiAgICB3aGlza2Vyczoge1xuICAgICAgICB3aWR0aDogMlxuICAgIH1cbn0pO1xuXG5jb25zdCBidWJibGVTZXJpZXMgPSAoKSA9PiAoe1xuICAgIGJvcmRlcjoge1xuICAgICAgICB3aWR0aDogMFxuICAgIH0sXG4gICAgbGFiZWxzOiB7XG4gICAgICAgIGJhY2tncm91bmQ6IFRSQU5TUEFSRU5UXG4gICAgfSxcbiAgICBvcGFjaXR5OiAwLjZcbn0pO1xuXG5jb25zdCBidWxsZXRTZXJpZXMgPSAoKSA9PiAoe1xuICAgIGdhcDogQkFSX0dBUCxcbiAgICBzcGFjaW5nOiBCQVJfU1BBQ0lORyxcbiAgICB0YXJnZXQ6IHtcbiAgICAgICAgY29sb3I6IFwiI2ZmMDAwMFwiXG4gICAgfVxufSk7XG5cbmNvbnN0IGNhbmRsZXN0aWNrU2VyaWVzID0gKCkgPT4gKHtcbiAgICBib3JkZXI6IHtcbiAgICAgICAgX2JyaWdodG5lc3M6IDAuOCxcbiAgICAgICAgd2lkdGg6IDFcbiAgICB9LFxuICAgIGRvd25Db2xvcjogV0hJVEUsXG4gICAgZ2FwOiAxLFxuICAgIGhpZ2hsaWdodDoge1xuICAgICAgICBib3JkZXI6IHtcbiAgICAgICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgICAgICB3aWR0aDogMlxuICAgICAgICB9LFxuICAgICAgICBsaW5lOiB7XG4gICAgICAgICAgICB3aWR0aDogMlxuICAgICAgICB9XG4gICAgfSxcbiAgICBsaW5lOiB7XG4gICAgICAgIGNvbG9yOiBCTEFDSyxcbiAgICAgICAgd2lkdGg6IDFcbiAgICB9LFxuICAgIHNwYWNpbmc6IDAuM1xufSk7XG5cbmNvbnN0IGNvbHVtblNlcmllcyA9ICgpID0+ICh7XG4gICAgZ2FwOiBCQVJfR0FQLFxuICAgIHNwYWNpbmc6IEJBUl9TUEFDSU5HXG59KTtcblxuY29uc3QgZG9udXRTZXJpZXMgPSAoKSA9PiAoe1xuICAgIG1hcmdpbjogMVxufSk7XG5cbmNvbnN0IGxpbmVTZXJpZXMgPSAoKSA9PiAoe1xuICAgIHdpZHRoOiAyXG59KTtcblxuY29uc3Qgb2hsY1NlcmllcyA9ICgpID0+ICh7XG4gICAgZ2FwOiAxLFxuICAgIGhpZ2hsaWdodDoge1xuICAgICAgICBsaW5lOiB7XG4gICAgICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICAgICAgd2lkdGg6IDNcbiAgICAgICAgfVxuICAgIH0sXG4gICAgbGluZToge1xuICAgICAgICB3aWR0aDogMVxuICAgIH0sXG4gICAgc3BhY2luZzogMC4zXG59KTtcblxuY29uc3QgcmFkYXJBcmVhU2VyaWVzID0gKCkgPT4gKHtcbiAgICBsaW5lOiB7XG4gICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgIHdpZHRoOiAwXG4gICAgfSxcbiAgICBtYXJrZXJzOiB7XG4gICAgICAgIHNpemU6IDYsXG4gICAgICAgIHZpc2libGU6IGZhbHNlXG4gICAgfSxcbiAgICBvcGFjaXR5OiAwLjVcbn0pO1xuXG5jb25zdCByYWRhckxpbmVTZXJpZXMgPSAoKSA9PiAoe1xuICAgIG1hcmtlcnM6IHtcbiAgICAgICAgdmlzaWJsZTogZmFsc2VcbiAgICB9LFxuICAgIHdpZHRoOiAyXG59KTtcblxuY29uc3QgcmFuZ2VCYXJTZXJpZXMgPSAoKSA9PiAoe1xuICAgIGdhcDogQkFSX0dBUCxcbiAgICBzcGFjaW5nOiBCQVJfU1BBQ0lOR1xufSk7XG5cbmNvbnN0IHJhbmdlQ29sdW1uU2VyaWVzID0gKCkgPT4gKHtcbiAgICBnYXA6IEJBUl9HQVAsXG4gICAgc3BhY2luZzogQkFSX1NQQUNJTkdcbn0pO1xuXG5jb25zdCBzY2F0dGVyTGluZVNlcmllcyA9ICgpID0+ICh7XG4gICAgd2lkdGg6IDFcbn0pO1xuXG5jb25zdCB3YXRlcmZhbGxTZXJpZXMgPSAoKSA9PiAoe1xuICAgIGdhcDogMC41LFxuICAgIGxpbmU6IHtcbiAgICAgICAgY29sb3I6IEJMQUNLLFxuICAgICAgICB3aWR0aDogMVxuICAgIH0sXG4gICAgc3BhY2luZzogQkFSX1NQQUNJTkdcbn0pO1xuXG5jb25zdCBwaWVTZXJpZXMgPSAoKSA9PiAoe1xuICAgIGxhYmVsczoge1xuICAgICAgICBiYWNrZ3JvdW5kOiAnJyxcbiAgICAgICAgY29sb3I6ICcnLFxuICAgICAgICBwYWRkaW5nOiB7XG4gICAgICAgICAgICB0b3A6IDUsXG4gICAgICAgICAgICBib3R0b206IDUsXG4gICAgICAgICAgICBsZWZ0OiA3LFxuICAgICAgICAgICAgcmlnaHQ6IDdcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuXG5jb25zdCBmdW5uZWxTZXJpZXMgPSAoKSA9PiAoe1xuICAgIGxhYmVsczoge1xuICAgICAgICBiYWNrZ3JvdW5kOiAnJyxcbiAgICAgICAgY29sb3I6ICcnLFxuICAgICAgICBwYWRkaW5nOiB7XG4gICAgICAgICAgICB0b3A6IDUsXG4gICAgICAgICAgICBib3R0b206IDUsXG4gICAgICAgICAgICBsZWZ0OiA3LFxuICAgICAgICAgICAgcmlnaHQ6IDdcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuXG5jb25zdCBzZXJpZXNEZWZhdWx0cyA9IChvcHRpb25zKSA9PiAoe1xuICAgIHZpc2libGU6IHRydWUsXG4gICAgbGFiZWxzOiB7XG4gICAgICAgIGZvbnQ6IFNBTlMxMVxuICAgIH0sXG4gICAgb3ZlcmxheTogb3B0aW9ucy5ncmFkaWVudHMgPyB7fSA6IHtcbiAgICAgICAgZ3JhZGllbnQ6IFwibm9uZVwiXG4gICAgfSxcbiAgICBhcmVhOiBhcmVhU2VyaWVzKCksXG4gICAgcmFuZ2VBcmVhOiByYW5nZUFyZWFTZXJpZXMoKSxcbiAgICB2ZXJ0aWNhbFJhbmdlQXJlYTogcmFuZ2VBcmVhU2VyaWVzKCksXG4gICAgYmFyOiBiYXJTZXJpZXMoKSxcbiAgICBib3hQbG90OiBib3hQbG90U2VyaWVzKCksXG4gICAgYnViYmxlOiBidWJibGVTZXJpZXMoKSxcbiAgICBidWxsZXQ6IGJ1bGxldFNlcmllcygpLFxuICAgIGNhbmRsZXN0aWNrOiBjYW5kbGVzdGlja1NlcmllcygpLFxuICAgIGNvbHVtbjogY29sdW1uU2VyaWVzKCksXG4gICAgcGllOiBwaWVTZXJpZXMoKSxcbiAgICBkb251dDogZG9udXRTZXJpZXMoKSxcbiAgICBmdW5uZWw6IGZ1bm5lbFNlcmllcygpLFxuICAgIGhvcml6b250YWxXYXRlcmZhbGw6IHdhdGVyZmFsbFNlcmllcygpLFxuICAgIGxpbmU6IGxpbmVTZXJpZXMoKSxcbiAgICBub3Rlczogbm90ZXMoKSxcbiAgICBvaGxjOiBvaGxjU2VyaWVzKCksXG4gICAgcmFkYXJBcmVhOiByYWRhckFyZWFTZXJpZXMoKSxcbiAgICByYWRhckxpbmU6IHJhZGFyTGluZVNlcmllcygpLFxuICAgIHBvbGFyQXJlYTogcmFkYXJBcmVhU2VyaWVzKCksXG4gICAgcG9sYXJMaW5lOiByYWRhckxpbmVTZXJpZXMoKSxcbiAgICByYW5nZUJhcjogcmFuZ2VCYXJTZXJpZXMoKSxcbiAgICByYW5nZUNvbHVtbjogcmFuZ2VDb2x1bW5TZXJpZXMoKSxcbiAgICBzY2F0dGVyTGluZTogc2NhdHRlckxpbmVTZXJpZXMoKSxcbiAgICB2ZXJ0aWNhbEFyZWE6IGFyZWFTZXJpZXMoKSxcbiAgICB2ZXJ0aWNhbEJveFBsb3Q6IGJveFBsb3RTZXJpZXMoKSxcbiAgICB2ZXJ0aWNhbEJ1bGxldDogYnVsbGV0U2VyaWVzKCksXG4gICAgdmVydGljYWxMaW5lOiBsaW5lU2VyaWVzKCksXG4gICAgd2F0ZXJmYWxsOiB3YXRlcmZhbGxTZXJpZXMoKVxufSk7XG5cbmNvbnN0IHRpdGxlID0gKCkgPT4gKHtcbiAgICBmb250OiBTQU5TMTZcbn0pO1xuXG5jb25zdCBsZWdlbmQgPSAoKSA9PiAoe1xuICAgIGxhYmVsczoge1xuICAgICAgICBmb250OiBTQU5TMTJcbiAgICB9XG59KTtcblxuZXhwb3J0IGNvbnN0IGJhc2VUaGVtZSA9IChvcHRpb25zID0ge30pID0+ICh7XG4gICAgYXhpc0RlZmF1bHRzOiBheGlzRGVmYXVsdHMoKSxcbiAgICBjYXRlZ29yeUF4aXM6IHtcbiAgICAgICAgbWFqb3JHcmlkTGluZXM6IHtcbiAgICAgICAgICAgIHZpc2libGU6IHRydWVcbiAgICAgICAgfVxuICAgIH0sXG4gICAgbmF2aWdhdG9yOiB7XG4gICAgICAgIHBhbmU6IHtcbiAgICAgICAgICAgIGhlaWdodDogOTAsXG4gICAgICAgICAgICBtYXJnaW46IHtcbiAgICAgICAgICAgICAgICB0b3A6IDEwXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHNlcmllc0RlZmF1bHRzOiBzZXJpZXNEZWZhdWx0cyhvcHRpb25zKSxcbiAgICB0aXRsZTogdGl0bGUoKSxcbiAgICBsZWdlbmQ6IGxlZ2VuZCgpXG59KTtcblxuIl0sIm5hbWVzIjpbImNvbnN0IiwibGV0IiwiZHJhd2luZyIsIk9CSkVDVCIsImFyZ3VtZW50cyIsImZpZWxkIiwicHJvdG90eXBlQWNjZXNzb3JzIiwiY3VycmVudCIsInRoaXMiLCJhcHBlbmQiLCJlbGVtZW50U2l6ZSIsImxvZ1RvQ29uc29sZSIsImdlb21ldHJ5Iiwic3VwZXIiLCJDbGFzcyIsImdlb20iLCJkcmF3IiwiaWR4IiwibWFwIiwibGFzdCIsImFwcGx5RGVmYXVsdHMiLCJhdXRvQXhpc01heCIsImF1dG9BeGlzTWluIiwiTnVtZXJpY0F4aXMiLCJMb2dhcml0aG1pY0F4aXMiLCJ0YW5nZW50IiwiY29udHJvbFBvaW50cyIsInN1cHBvcnQiLCJjYXRlZ29yaWVzQ291bnQiLCJzZXJpZXNJeCIsIkNvbG9yIiwiaSIsImxlbmd0aCIsImF4aXMiLCJsaW5lQm94Iiwic2VyaWVzTWlzc2luZ1ZhbHVlcyIsImhhc1ZhbHVlIiwiZ2V0dGVyIiwicGFuZSIsInBhbmVJZCIsInZpc2libGUiLCJhbmNob3IiLCJhbmNob3JDcm9zc2luZ3MiLCJjdXJyZW50QXhpcyIsImN1cnJlbnRQYW5lIiwiQVVUTyIsImVsZW1lbnRPZmZzZXQiLCJheGlzUGFuZSIsInVwZGF0ZUF4aXNPcHRpb25zIiwiY3VycmVudFNlcmllcyIsInRocm90dGxlIiwicmFuZ2VzIiwiU2hhcmVkVG9vbHRpcCIsIkNoYXJ0U2hhcmVkVG9vbHRpcCIsImhpZGUiLCJzaG93IiwiY3JlYXRlRGl2IiwiWk9PTV9BQ0NFTEVSQVRJT04iLCJjbG9uZSIsImR1cmF0aW9uIiwiREVGQVVMVF9IRUlHSFQiLCJERUZBVUxUX1dJRFRIIiwiSU5TSURFIiwiTElORUFSIiwiT1VUU0lERSIsInBhZCIsIlBhdGgiLCJUZXh0IiwiZ2VvIiwidW5wYWQiLCJHcm91cCIsIlBvaW50IiwicmVuZGVyVGlja3MiLCJCTEFDSyIsIldISVRFIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBT0EsSUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDO0FBQ3pCLEFBQU9BLElBQU0sZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQUM7QUFDakQsQUFBT0EsSUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDO0FBQzVCLEFBQU9BLElBQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQztBQUMvQixBQUFPQSxJQUFNLE1BQU0sR0FBRyxRQUFRLENBQUM7QUFDL0IsQUFBT0EsSUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDO0FBQy9CLEFBQU9BLElBQU0sZUFBZSxHQUFHLENBQUMsQ0FBQztBQUNqQyxBQUFPQSxJQUFNLEtBQUssR0FBRyxPQUFPLENBQUM7QUFDN0IsQUFBT0EsSUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDO0FBQzNCLEFBQU9BLElBQU0sWUFBWSxHQUFHLGlCQUFpQixDQUFDO0FBQzlDLEFBQU9BLElBQU0sY0FBYyxHQUFHLEdBQUcsQ0FBQztBQUNsQyxBQUFPQSxJQUFNLGlCQUFpQixHQUFHLEVBQUUsQ0FBQztBQUNwQyxBQUFPQSxJQUFNLGFBQWEsR0FBRyxHQUFHLENBQUM7QUFDakMsQUFBT0EsSUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDO0FBQ3pCLEFBQU9BLElBQU0sWUFBWSxHQUFHLFNBQVMsQ0FBQztBQUN0QyxBQUFPQSxJQUFNLE1BQU0sR0FBRyxRQUFRLENBQUM7QUFDL0IsQUFBT0EsSUFBTSxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7QUFDcEMsQUFBT0EsSUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDO0FBQy9CLEFBQU9BLElBQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQztBQUMzQixBQUFPQSxJQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFD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Q0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDeERBLElBQU0sRUFBRSxHQUFHLFdBQVcsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7O1FBRXBELEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1RSxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7O1FBRTdFLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUM7UUFDMUIsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxHQUFHLE1BQU0sQ0FBQzs7UUFFM0IsT0FBTyxJQUFJLENBQUM7S0FDZixDQUFBOztJQUVELGNBQUEsTUFBTSxzQkFBRztRQUNMLE9BQU8sSUFBSWUsK0JBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFBRSxJQUFJLENBQUMsTUFBTSxF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LENBQUMsRUFBRSxlQUFlLENBQUMsQ0FBQzs7UUFFaEUsT0FBTyxJQUFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDMUIsQ0FBQTs7SUFFRCxlQUFBLFdBQVcseUJBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUU7UUFDakNBLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDN0NBLElBQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNqQ0EsSUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN4Q0EsSUFBTSxFQUFFLEdBQUcsS0FBSyxHQUFHLENBQUMsQ0FBQztRQUNyQkEsSUFBTSxFQUFFLEdBQUcsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUN0QkEsSUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNuQ0EsSUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNuQ0MsSUFBSSxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDeEJBLElBQUksQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDOztRQUV4QixJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFO1lBQ3BCLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNoQzs7UUFFRCxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxFQUFFO1lBQ3BCLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcs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QUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMvQkEsSUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMvQkEsSUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMvQkEsSUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMvQkEsSUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMvQkEsSUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMvQkEsSUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMvQkEsSUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDOzs7Ozs7Ozs7Ozs7O0lBYWpCLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMvQixLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDL0IsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQy9CLEtBQUssQ0FBQyxDQUFDLENB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