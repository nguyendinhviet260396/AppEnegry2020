"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _tslib = require("tslib");

var _lib = require("@antv/util/lib");

var _base = _interopRequireDefault(require("../base"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DELTA = 0.05;
var lensDelegateStyle = {
  stroke: '#000',
  strokeOpacity: 0.8,
  lineWidth: 2,
  fillOpacity: 0.1,
  fill: '#ccc'
};

var Fisheye =
/** @class */
function (_super) {
  (0, _tslib.__extends)(Fisheye, _super);

  function Fisheye() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Fisheye.prototype.getDefaultCfgs = function () {
    return {
      trigger: 'mousemove',
      d: 1.5,
      r: 300,
      delegateStyle: (0, _lib.clone)(lensDelegateStyle),
      showLabel: false,
      maxD: 5,
      minD: 0
    };
  }; // class-methods-use-this


  Fisheye.prototype.getEvents = function () {
    var events;

    switch (this.get('trigger')) {
      case 'click':
        events = {
          click: 'magnify'
        };
        break;

      case 'drag':
        events = {
          click: 'createDelegate'
        };
        break;

      default:
        events = {
          mousemove: 'magnify'
        };
        break;
    }

    return events;
  };

  Fisheye.prototype.init = function () {
    var self = this;
    var r = self.get('r');
    self.set('cachedMagnifiedModels', []);
    self.set('cachedOriginPositions', {});
    self.set('r2', r * r);
    var d = self.get('d');
    self.set('molecularParam', (d + 1) * r);
  };

  Fisheye.prototype.createDelegate = function (e) {
    var self = this;
    var lensDelegate = self.get('delegate');

    if (!lensDelegate || lensDelegate.destroyed) {
      self.magnify(e);
      lensDelegate = self.get('delegate');
      lensDelegate.on('dragstart', function (evt) {
        self.set('delegateCenterDiff', {
          x: lensDelegate.attr('x') - evt.x,
          y: lensDelegate.attr('y') - evt.y
        });
      });
      lensDelegate.on('drag', function (evt) {
        self.magnify(evt);
      });

      if (this.get('scaleRByWheel')) {
        lensDelegate.on('mousewheel', function (evt) {
          self.scaleRange(evt);
        });
      }
    }
  };
  /**
   * 调整放大镜范围
   * @param e wheel 事件
   */


  Fisheye.prototype.scaleRange = function (e) {
    if (!e && !e.originalEvent) return;
    var self = this;
    var graph = self.get('graph');
    var ratio;
    var mousePos = graph.getPointByClient(e.clientX, e.clientY);

    if (e.originalEvent.wheelDelta < 0) {
      ratio = 1 - DELTA;
    } else {
      ratio = 1 / (1 - DELTA);
    }

    var maxR = self.get('maxR');
    var minR = self.get('minR');
    var r = self.get('r');

    if (r > (maxR || graph.get('height')) && ratio > 1 || r < (minR || graph.get('height') * 0.05) && ratio < 1) {
      ratio = 1;
    }

    r *= ratio;
    self.set('r', r);
    self.set('r2', r * r);
    var d = self.get('d');
    self.set('molecularParam', (d + 1) * r);
    self.magnify(e, mousePos);
  };
  /**
   * mousemove、click、drag 事件的响应函数
   * @param e 鼠标事件
   */


  Fisheye.prototype.magnify = function (e, mousePos) {
    var self = this;
    self.restoreCache();
    var graph = self.get('graph');
    var cachedMagnifiedModels = self.get('cachedMagnifiedModels');
    var cachedOriginPositions = self.get('cachedOriginPositions');
    var showLabel = self.get('showLabel');
    var r = self.get('r');
    var r2 = self.get('r2');
    var d = self.get('d');
    var molecularParam = self.get('molecularParam');
    var nodes = graph.getNodes();
    var nodeLength = nodes.length;
    var mCenter = mousePos ? {
      x: mousePos.x,
      y: mousePos.y
    } : {
      x: e.x,
      y: e.y
    };

    if (self.get('dragging') && (self.get('trigger') === 'mousemove' || self.get('trigger') === 'click')) {
      mCenter = self.get('cacheCenter');
    }

    var delegateCenterDiff = self.get('delegateCenterDiff');

    if (delegateCenterDiff) {
      mCenter.x += delegateCenterDiff.x;
      mCenter.y += delegateCenterDiff.y;
    }

    self.updateDelegate(mCenter, r);

    for (var i = 0; i < nodeLength; i++) {
      var model = nodes[i].getModel();
      var x = model.x,
          y = model.y;
      if (isNaN(x) || isNaN(y)) continue; // the square of the distance between the node and the magnified center

      var dist2 = (x - mCenter.x) * (x - mCenter.x) + (y - mCenter.y) * (y - mCenter.y);

      if (!isNaN(dist2) && dist2 < r2 && dist2 !== 0) {
        var dist = Math.sqrt(dist2); // (r * (d + 1) * (dist / r)) / (d * (dist / r) + 1);

        var magnifiedDist = molecularParam * dist / (d * dist + r);
        var cos = (x - mCenter.x) / dist;
        var sin = (y - mCenter.y) / dist;
        model.x = cos * magnifiedDist + mCenter.x;
        model.y = sin * magnifiedDist + mCenter.y;

        if (!cachedOriginPositions[model.id]) {
          cachedOriginPositions[model.id] = {
            x: x,
            y: y,
            texts: []
          };
        }

        cachedMagnifiedModels.push(model);

        if (showLabel && 2 * dist < r) {
          var node = nodes[i];
          var nodeGroup = node.getContainer();
          var shapes = nodeGroup.getChildren();
          var shapeLength = shapes.length;

          for (var j = 0; j < shapeLength; j++) {
            var shape = shapes[j];

            if (shape.get('type') === 'text') {
              cachedOriginPositions[model.id].texts.push({
                visible: shape.get('visible'),
                shape: shape
              });
              shape.set('visible', true);
            }
          }
        }
      }
    }

    graph.refreshPositions();
  };
  /**
   * 恢复缓存的被缩放的节点
   */


  Fisheye.prototype.restoreCache = function () {
    var self = this;
    var cachedMagnifiedModels = self.get('cachedMagnifiedModels');
    var cachedOriginPositions = self.get('cachedOriginPositions');
    var cacheLength = cachedMagnifiedModels.length;

    for (var i = 0; i < cacheLength; i++) {
      var node = cachedMagnifiedModels[i];
      var id = node.id;
      var ori = cachedOriginPositions[id];
      node.x = ori.x;
      node.y = ori.y;
      var textLength = ori.texts.length;

      for (var j = 0; j < textLength; j++) {
        var text = ori.texts[j];
        text.shape.set('visible', text.visible);
      }
    }

    self.set('cachedMagnifiedModels', []);
    self.set('cachedOriginPositions', {});
  };
  /**
   * 提供给用户调整系数
   * @param {Point} mCenter
   * @param {number} r
   */


  Fisheye.prototype.updateParams = function (cfg) {
    var self = this;
    var r = cfg.r,
        d = cfg.d,
        trigger = cfg.trigger,
        minD = cfg.minD,
        maxD = cfg.maxD,
        minR = cfg.minR,
        maxR = cfg.maxR;

    if (!isNaN(cfg.r)) {
      self.set('r', r);
      self.set('r2', r * r);
    }

    if (!isNaN(d)) {
      self.set('d', d);
    }

    if (!isNaN(maxD)) {
      self.set('maxD', maxD);
    }

    if (!isNaN(minD)) {
      self.set('minD', minD);
    }

    if (!isNaN(maxR)) {
      self.set('maxR', maxR);
    }

    if (!isNaN(minR)) {
      self.set('minR', minR);
    }

    var nd = self.get('d');
    var nr = self.get('r');
    self.set('molecularParam', (nd + 1) * nr);

    if (trigger === 'mousemove' || trigger === 'click' || trigger === 'drag') {
      self.set('trigger', trigger);
    }
  };
  /**
   * 放大镜的图形
   * @param {Point} mCenter
   * @param {number} r
   */


  Fisheye.prototype.updateDelegate = function (mCenter, r) {
    var self = this;
    var graph = self.get('graph');
    var lensDelegate = self.get('delegate');

    if (!lensDelegate || lensDelegate.destroyed) {
      // 拖动多个
      var parent_1 = graph.get('group');
      var attrs = self.get('delegateStyle') || lensDelegateStyle; // model上的x, y是相对于图形中心的，delegateShape是g实例，x,y是绝对坐标

      lensDelegate = parent_1.addShape('circle', {
        attrs: (0, _tslib.__assign)({
          r: r / 1.5,
          x: mCenter.x,
          y: mCenter.y
        }, attrs),
        name: 'lens-shape',
        draggable: true
      });

      if (this.get('scaleRByWheel')) {
        lensDelegate.on('mousewheel', function (evt) {
          self.scaleRange(evt);
        });
      }

      lensDelegate.on('dragstart', function (e) {
        self.set('dragging', true);
        self.set('cacheCenter', {
          x: e.x,
          y: e.y
        });
        self.set('dragPrePos', {
          x: e.x,
          y: e.y
        });
      });
      lensDelegate.on('drag', function (e) {
        var dragPrePos = self.get('dragPrePos');
        var delta = e.x - dragPrePos.x > 0 ? 0.1 : -0.1;
        var d = self.get('d');
        var newD = d + delta;
        var maxD = self.get('maxD');
        var minD = self.get('minD');

        if (newD < maxD && newD > minD) {
          self.set('d', newD);
          r = self.get('r');
          self.set('molecularParam', (newD + 1) * r);
          self.magnify(e);
        }

        self.set('dragPrePos', {
          x: e.x,
          y: e.y
        });
      });
      lensDelegate.on('dragend', function (e) {
        self.set('dragging', false);
      });
    } else {
      lensDelegate.attr({
        x: mCenter.x,
        y: mCenter.y,
        r: r / 1.5
      });
    }

    self.set('delegate', lensDelegate);
  };

  Fisheye.prototype.clear = function () {
    var graph = this.get('graph');
    this.restoreCache();
    graph.refreshPositions();
    var lensDelegate = this.get('delegate');

    if (lensDelegate && !lensDelegate.destroyed) {
      lensDelegate.remove();
      lensDelegate.destroy();
    }
  };

  Fisheye.prototype.destroy = function () {
    this.clear();
  };

  return Fisheye;
}(_base.default);

var _default = Fisheye;
exports.default = _default;